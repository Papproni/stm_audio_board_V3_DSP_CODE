
stm_audio_board_V3_DSP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .sdram_section 0000002a  c0000000  c0000000  00040000  2**2
                  ALLOC
  2 .text         000107ac  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000134  08010a7c  08010a7c  00020a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010bb0  08010bb0  00020bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010bb4  08010bb4  00020bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000140  24000000  08010bb8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001434  24000140  08010cf8  00030140  2**2
                  ALLOC
  8 ._user_heap_stack 00006004  24001574  08010cf8  00031574  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003016e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00020e85  00000000  00000000  000301b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005161  00000000  00000000  00051036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001850  00000000  00000000  00056198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001251  00000000  00000000  000579e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00038dca  00000000  00000000  00058c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00025525  00000000  00000000  00091a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014e8da  00000000  00000000  000b6f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006aec  00000000  00000000  00205804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000082  00000000  00000000  0020c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000140 	.word	0x24000140
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08010a64 	.word	0x08010a64

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000144 	.word	0x24000144
 800030c:	08010a64 	.word	0x08010a64

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <ad1939_write_reg>:
#include "AD1939_driver.h"


// send bytes
int ad1939_write_reg(uint8_t reg_address, uint8_t data){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af02      	add	r7, sp, #8
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
	int8_t retval = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	73fb      	strb	r3, [r7, #15]
	TXdata[0] = AD1939_Global_Address_Write;
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <ad1939_write_reg+0x4c>)
 80003c6:	2208      	movs	r2, #8
 80003c8:	701a      	strb	r2, [r3, #0]
	TXdata[1] = reg_address;
 80003ca:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <ad1939_write_reg+0x4c>)
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	7053      	strb	r3, [r2, #1]
	TXdata[2] = data;
 80003d0:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <ad1939_write_reg+0x4c>)
 80003d2:	79bb      	ldrb	r3, [r7, #6]
 80003d4:	7093      	strb	r3, [r2, #2]

//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <ad1939_write_reg+0x50>)
 80003d8:	6818      	ldr	r0, [r3, #0]
 80003da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003de:	9300      	str	r3, [sp, #0]
 80003e0:	2303      	movs	r3, #3
 80003e2:	4a08      	ldr	r2, [pc, #32]	; (8000404 <ad1939_write_reg+0x54>)
 80003e4:	4905      	ldr	r1, [pc, #20]	; (80003fc <ad1939_write_reg+0x4c>)
 80003e6:	f00a fce1 	bl	800adac <HAL_SPI_TransmitReceive>
 80003ea:	4603      	mov	r3, r0
 80003ec:	73fb      	strb	r3, [r7, #15]
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 //HAL_Delay(10);
	return retval;
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3710      	adds	r7, #16
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	24000160 	.word	0x24000160
 8000400:	2400015c 	.word	0x2400015c
 8000404:	24000164 	.word	0x24000164

08000408 <ad1939_pll_locked>:

	return retval;
}

int ad1939_pll_locked()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af02      	add	r7, sp, #8
	TXdata[0] = AD1939_Global_Address_Read;
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <ad1939_pll_locked+0x3c>)
 8000410:	2209      	movs	r2, #9
 8000412:	701a      	strb	r2, [r3, #0]
	TXdata[1] = AD1939_PLL_Control_1;
 8000414:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <ad1939_pll_locked+0x3c>)
 8000416:	2201      	movs	r2, #1
 8000418:	705a      	strb	r2, [r3, #1]
	TXdata[2] = 0b00000100;
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <ad1939_pll_locked+0x3c>)
 800041c:	2204      	movs	r2, #4
 800041e:	709a      	strb	r2, [r3, #2]
	HAL_Delay(10);
 8000420:	200a      	movs	r0, #10
 8000422:	f001 fc9f 	bl	8001d64 <HAL_Delay>
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <ad1939_pll_locked+0x40>)
 8000428:	6818      	ldr	r0, [r3, #0]
 800042a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2303      	movs	r3, #3
 8000432:	4a06      	ldr	r2, [pc, #24]	; (800044c <ad1939_pll_locked+0x44>)
 8000434:	4903      	ldr	r1, [pc, #12]	; (8000444 <ad1939_pll_locked+0x3c>)
 8000436:	f00a fcb9 	bl	800adac <HAL_SPI_TransmitReceive>
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 return 0;
 800043a:	2300      	movs	r3, #0
}
 800043c:	4618      	mov	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	24000160 	.word	0x24000160
 8000448:	2400015c 	.word	0x2400015c
 800044c:	24000164 	.word	0x24000164

08000450 <ad1939_init>:

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
    AD1939_spi = hspi_codec;
 8000458:	4a3d      	ldr	r2, [pc, #244]	; (8000550 <ad1939_init+0x100>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6013      	str	r3, [r2, #0]

    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 800045e:	21be      	movs	r1, #190	; 0xbe
 8000460:	2000      	movs	r0, #0
 8000462:	f7ff ffa5 	bl	80003b0 <ad1939_write_reg>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d002      	beq.n	8000472 <ad1939_init+0x22>
 800046c:	f04f 33ff 	mov.w	r3, #4294967295
 8000470:	e069      	b.n	8000546 <ad1939_init+0xf6>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 8000472:	2104      	movs	r1, #4
 8000474:	2001      	movs	r0, #1
 8000476:	f7ff ff9b 	bl	80003b0 <ad1939_write_reg>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d002      	beq.n	8000486 <ad1939_init+0x36>
 8000480:	f04f 33ff 	mov.w	r3, #4294967295
 8000484:	e05f      	b.n	8000546 <ad1939_init+0xf6>





    HAL_Delay(100);
 8000486:	2064      	movs	r0, #100	; 0x64
 8000488:	f001 fc6c 	bl	8001d64 <HAL_Delay>

    if(ad1939_pll_locked()){
 800048c:	f7ff ffbc 	bl	8000408 <ad1939_pll_locked>
    // 192 khz
    //    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000100)) return -1;
    // 96 khz
//            if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000010)) return -1;
    // 48 Khz
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b01000000)) return -1;
 8000490:	2140      	movs	r1, #64	; 0x40
 8000492:	2002      	movs	r0, #2
 8000494:	f7ff ff8c 	bl	80003b0 <ad1939_write_reg>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d002      	beq.n	80004a4 <ad1939_init+0x54>
 800049e:	f04f 33ff 	mov.w	r3, #4294967295
 80004a2:	e050      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000100)) return -1; // Slave setup
 80004a4:	2104      	movs	r1, #4
 80004a6:	2003      	movs	r0, #3
 80004a8:	f7ff ff82 	bl	80003b0 <ad1939_write_reg>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d002      	beq.n	80004b8 <ad1939_init+0x68>
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295
 80004b6:	e046      	b.n	8000546 <ad1939_init+0xf6>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 80004b8:	2100      	movs	r1, #0
 80004ba:	2004      	movs	r0, #4
 80004bc:	f7ff ff78 	bl	80003b0 <ad1939_write_reg>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d002      	beq.n	80004cc <ad1939_init+0x7c>
 80004c6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ca:	e03c      	b.n	8000546 <ad1939_init+0xf6>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 80004cc:	2100      	movs	r1, #0
 80004ce:	2005      	movs	r0, #5
 80004d0:	f7ff ff6e 	bl	80003b0 <ad1939_write_reg>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d002      	beq.n	80004e0 <ad1939_init+0x90>
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	e032      	b.n	8000546 <ad1939_init+0xf6>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 80004e0:	2100      	movs	r1, #0
 80004e2:	2008      	movs	r0, #8
 80004e4:	f7ff ff64 	bl	80003b0 <ad1939_write_reg>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d002      	beq.n	80004f4 <ad1939_init+0xa4>
 80004ee:	f04f 33ff 	mov.w	r3, #4294967295
 80004f2:	e028      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 80004f4:	2100      	movs	r1, #0
 80004f6:	2009      	movs	r0, #9
 80004f8:	f7ff ff5a 	bl	80003b0 <ad1939_write_reg>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <ad1939_init+0xb8>
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	e01e      	b.n	8000546 <ad1939_init+0xf6>
    // 192 khz
	//    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b10000000)) return -1;
    // 96khz
//        if (ad1939_write_reg(AD1939_ADC_Control_0, 0b01000000)) return -1;
        // 48 Khz
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 8000508:	2100      	movs	r1, #0
 800050a:	200e      	movs	r0, #14
 800050c:	f7ff ff50 	bl	80003b0 <ad1939_write_reg>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <ad1939_init+0xcc>
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
 800051a:	e014      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0b00100000 )) return -1;
 800051c:	2120      	movs	r1, #32
 800051e:	200f      	movs	r0, #15
 8000520:	f7ff ff46 	bl	80003b0 <ad1939_write_reg>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <ad1939_init+0xe0>
 800052a:	f04f 33ff 	mov.w	r3, #4294967295
 800052e:	e00a      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 8000530:	2100      	movs	r1, #0
 8000532:	2010      	movs	r0, #16
 8000534:	f7ff ff3c 	bl	80003b0 <ad1939_write_reg>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d002      	beq.n	8000544 <ad1939_init+0xf4>
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	e000      	b.n	8000546 <ad1939_init+0xf6>



    return 0; // Return 0 if all writes are successful
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	2400015c 	.word	0x2400015c

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <MX_DMA_Init+0x6c>)
 800055c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000560:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <MX_DMA_Init+0x6c>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_DMA_Init+0x6c>)
 800056c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_DMA_Init+0x6c>)
 800057a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800057e:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <MX_DMA_Init+0x6c>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <MX_DMA_Init+0x6c>)
 800058a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	200b      	movs	r0, #11
 800059c:	f001 fce1 	bl	8001f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005a0:	200b      	movs	r0, #11
 80005a2:	f001 fcf8 	bl	8001f96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2038      	movs	r0, #56	; 0x38
 80005ac:	f001 fcd9 	bl	8001f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005b0:	2038      	movs	r0, #56	; 0x38
 80005b2:	f001 fcf0 	bl	8001f96 <HAL_NVIC_EnableIRQ>

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	58024400 	.word	0x58024400

080005c4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b090      	sub	sp, #64	; 0x40
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80005ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80005de:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <MX_FMC_Init+0xcc>)
 80005e0:	4a2c      	ldr	r2, [pc, #176]	; (8000694 <MX_FMC_Init+0xd0>)
 80005e2:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <MX_FMC_Init+0xcc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80005ea:	4b29      	ldr	r3, [pc, #164]	; (8000690 <MX_FMC_Init+0xcc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <MX_FMC_Init+0xcc>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80005f6:	4b26      	ldr	r3, [pc, #152]	; (8000690 <MX_FMC_Init+0xcc>)
 80005f8:	2210      	movs	r2, #16
 80005fa:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <MX_FMC_Init+0xcc>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000602:	4b23      	ldr	r3, [pc, #140]	; (8000690 <MX_FMC_Init+0xcc>)
 8000604:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000608:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <MX_FMC_Init+0xcc>)
 800060c:	2200      	movs	r2, #0
 800060e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <MX_FMC_Init+0xcc>)
 8000612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000616:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000618:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_FMC_Init+0xcc>)
 800061a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_FMC_Init+0xcc>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000626:	2310      	movs	r3, #16
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 16;
 800062a:	2310      	movs	r3, #16
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 16;
 800062e:	2310      	movs	r3, #16
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
  SdramTiming.RowCycleDelay = 16;
 8000632:	2310      	movs	r3, #16
 8000634:	633b      	str	r3, [r7, #48]	; 0x30
  SdramTiming.WriteRecoveryTime = 16;
 8000636:	2310      	movs	r3, #16
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
  SdramTiming.RPDelay = 16;
 800063a:	2310      	movs	r3, #16
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  SdramTiming.RCDDelay = 16;
 800063e:	2310      	movs	r3, #16
 8000640:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000646:	4619      	mov	r1, r3
 8000648:	4811      	ldr	r0, [pc, #68]	; (8000690 <MX_FMC_Init+0xcc>)
 800064a:	f00a f9f1 	bl	800aa30 <HAL_SDRAM_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8000654:	f000 fdf3 	bl	800123e <Error_Handler>

//    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 2500);


    IS42S16800J_Context_t my_sdram;
    my_sdram.TargetBank  = FMC_SDRAM_CMD_TARGET_BANK1;
 8000658:	2310      	movs	r3, #16
 800065a:	607b      	str	r3, [r7, #4]
    my_sdram.RefreshMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800065c:	2303      	movs	r3, #3
 800065e:	60bb      	str	r3, [r7, #8]
    my_sdram.RefreshRate = REFRESH_COUNT;
 8000660:	f240 63d6 	movw	r3, #1750	; 0x6d6
 8000664:	60fb      	str	r3, [r7, #12]
    my_sdram.CASLatency  = IS42S16800J_CAS_LATENCY_3;
 8000666:	2330      	movs	r3, #48	; 0x30
 8000668:	61bb      	str	r3, [r7, #24]
    my_sdram.OperationMode = IS42S16800J_OPERATING_MODE_STANDARD;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
    my_sdram.WriteBurstMode = IS42S16800J_WRITEBURST_MODE_SINGLE;
 800066e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000672:	623b      	str	r3, [r7, #32]
    my_sdram.BurstType 		= IS42S16800J_BURST_TYPE_SEQUENTIAL;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
    my_sdram.BurstLength 	= IS42S16800J_BURST_LENGTH_1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]

    IS42S16800J_Init(&hsdram1, &my_sdram);
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4619      	mov	r1, r3
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <MX_FMC_Init+0xcc>)
 8000682:	f000 f975 	bl	8000970 <IS42S16800J_Init>
  /* USER CODE END FMC_Init 2 */
}
 8000686:	bf00      	nop
 8000688:	3740      	adds	r7, #64	; 0x40
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	24000168 	.word	0x24000168
 8000694:	52004140 	.word	0x52004140

08000698 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	b0b6      	sub	sp, #216	; 0xd8
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006ae:	4b5b      	ldr	r3, [pc, #364]	; (800081c <HAL_FMC_MspInit+0x184>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f040 80ae 	bne.w	8000814 <HAL_FMC_MspInit+0x17c>
    return;
  }
  FMC_Initialized = 1;
 80006b8:	4b58      	ldr	r3, [pc, #352]	; (800081c <HAL_FMC_MspInit+0x184>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	22b8      	movs	r2, #184	; 0xb8
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00f fb77 	bl	800fdba <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80006cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80006d8:	2300      	movs	r3, #0
 80006da:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	4618      	mov	r0, r3
 80006e2:	f006 ffcd 	bl	8007680 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80006ec:	f000 fda7 	bl	800123e <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006f0:	4b4b      	ldr	r3, [pc, #300]	; (8000820 <HAL_FMC_MspInit+0x188>)
 80006f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80006f6:	4a4a      	ldr	r2, [pc, #296]	; (8000820 <HAL_FMC_MspInit+0x188>)
 80006f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006fc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000700:	4b47      	ldr	r3, [pc, #284]	; (8000820 <HAL_FMC_MspInit+0x188>)
 8000702:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800070e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000712:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000728:	230c      	movs	r3, #12
 800072a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800072e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000732:	4619      	mov	r1, r3
 8000734:	483b      	ldr	r0, [pc, #236]	; (8000824 <HAL_FMC_MspInit+0x18c>)
 8000736:	f003 fd29 	bl	800418c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800073a:	230d      	movs	r3, #13
 800073c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000752:	230c      	movs	r3, #12
 8000754:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000758:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800075c:	4619      	mov	r1, r3
 800075e:	4832      	ldr	r0, [pc, #200]	; (8000828 <HAL_FMC_MspInit+0x190>)
 8000760:	f003 fd14 	bl	800418c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000764:	2310      	movs	r3, #16
 8000766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800077c:	230c      	movs	r3, #12
 800077e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000786:	4619      	mov	r1, r3
 8000788:	4828      	ldr	r0, [pc, #160]	; (800082c <HAL_FMC_MspInit+0x194>)
 800078a:	f003 fcff 	bl	800418c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 800078e:	f248 1311 	movw	r3, #33041	; 0x8111
 8000792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007a8:	230c      	movs	r3, #12
 80007aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007b2:	4619      	mov	r1, r3
 80007b4:	481e      	ldr	r0, [pc, #120]	; (8000830 <HAL_FMC_MspInit+0x198>)
 80007b6:	f003 fce9 	bl	800418c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80007ba:	f24f 7383 	movw	r3, #63363	; 0xf783
 80007be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007d4:	230c      	movs	r3, #12
 80007d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007de:	4619      	mov	r1, r3
 80007e0:	4814      	ldr	r0, [pc, #80]	; (8000834 <HAL_FMC_MspInit+0x19c>)
 80007e2:	f003 fcd3 	bl	800418c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80007e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80007ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000800:	230c      	movs	r3, #12
 8000802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000806:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800080a:	4619      	mov	r1, r3
 800080c:	480a      	ldr	r0, [pc, #40]	; (8000838 <HAL_FMC_MspInit+0x1a0>)
 800080e:	f003 fcbd 	bl	800418c <HAL_GPIO_Init>
 8000812:	e000      	b.n	8000816 <HAL_FMC_MspInit+0x17e>
    return;
 8000814:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000816:	37d8      	adds	r7, #216	; 0xd8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2400019c 	.word	0x2400019c
 8000820:	58024400 	.word	0x58024400
 8000824:	58021400 	.word	0x58021400
 8000828:	58020800 	.word	0x58020800
 800082c:	58020000 	.word	0x58020000
 8000830:	58021800 	.word	0x58021800
 8000834:	58021000 	.word	0x58021000
 8000838:	58020c00 	.word	0x58020c00

0800083c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000844:	f7ff ff28 	bl	8000698 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000866:	4b40      	ldr	r3, [pc, #256]	; (8000968 <MX_GPIO_Init+0x118>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	4a3e      	ldr	r2, [pc, #248]	; (8000968 <MX_GPIO_Init+0x118>)
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000876:	4b3c      	ldr	r3, [pc, #240]	; (8000968 <MX_GPIO_Init+0x118>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087c:	f003 0310 	and.w	r3, r3, #16
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000884:	4b38      	ldr	r3, [pc, #224]	; (8000968 <MX_GPIO_Init+0x118>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088a:	4a37      	ldr	r2, [pc, #220]	; (8000968 <MX_GPIO_Init+0x118>)
 800088c:	f043 0320 	orr.w	r3, r3, #32
 8000890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000894:	4b34      	ldr	r3, [pc, #208]	; (8000968 <MX_GPIO_Init+0x118>)
 8000896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089a:	f003 0320 	and.w	r3, r3, #32
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	4b31      	ldr	r3, [pc, #196]	; (8000968 <MX_GPIO_Init+0x118>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <MX_GPIO_Init+0x118>)
 80008aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b2:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <MX_GPIO_Init+0x118>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c0:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_GPIO_Init+0x118>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c6:	4a28      	ldr	r2, [pc, #160]	; (8000968 <MX_GPIO_Init+0x118>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d0:	4b25      	ldr	r3, [pc, #148]	; (8000968 <MX_GPIO_Init+0x118>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b22      	ldr	r3, [pc, #136]	; (8000968 <MX_GPIO_Init+0x118>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	4a20      	ldr	r2, [pc, #128]	; (8000968 <MX_GPIO_Init+0x118>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_GPIO_Init+0x118>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_GPIO_Init+0x118>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000902:	4a19      	ldr	r2, [pc, #100]	; (8000968 <MX_GPIO_Init+0x118>)
 8000904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000908:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_GPIO_Init+0x118>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_GPIO_Init+0x118>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	4a11      	ldr	r2, [pc, #68]	; (8000968 <MX_GPIO_Init+0x118>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_GPIO_Init+0x118>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	f003 0308 	and.w	r3, r3, #8
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2120      	movs	r1, #32
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <MX_GPIO_Init+0x11c>)
 800093e:	f003 fdcd 	bl	80044dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000942:	2320      	movs	r3, #32
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094a:	2301      	movs	r3, #1
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_GPIO_Init+0x11c>)
 800095a:	f003 fc17 	bl	800418c <HAL_GPIO_Init>

}
 800095e:	bf00      	nop
 8000960:	3730      	adds	r7, #48	; 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	58024400 	.word	0x58024400
 800096c:	58021800 	.word	0x58021800

08000970 <IS42S16800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S16800J_ERROR;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S16800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 f832 	bl	80009f0 <IS42S16800J_ClockEnable>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d128      	bne.n	80009e4 <IS42S16800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S16800J_Delay(1);
 8000992:	2001      	movs	r0, #1
 8000994:	f000 f8e2 	bl	8000b5c <IS42S16800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S16800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 f84a 	bl	8000a38 <IS42S16800J_Precharge>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d11c      	bne.n	80009e4 <IS42S16800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S16800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S16800J_OK)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	6819      	ldr	r1, [r3, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	461a      	mov	r2, r3
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 f897 	bl	8000ae8 <IS42S16800J_RefreshMode>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d111      	bne.n	80009e4 <IS42S16800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S16800J_ModeRegConfig(Ctx, pRegMode) == IS42S16800J_OK)
 80009c0:	6839      	ldr	r1, [r7, #0]
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 f85c 	bl	8000a80 <IS42S16800J_ModeRegConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10a      	bne.n	80009e4 <IS42S16800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S16800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S16800J_OK)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	4619      	mov	r1, r3
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f000 f8ad 	bl	8000b34 <IS42S16800J_RefreshRate>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d101      	bne.n	80009e4 <IS42S16800J_Init+0x74>
          {
            ret = IS42S16800J_OK;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 80009e4:	68fb      	ldr	r3, [r7, #12]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <IS42S16800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_CLK_ENABLE_CMD;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <IS42S16800J_ClockEnable+0x44>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000a00:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <IS42S16800J_ClockEnable+0x44>)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <IS42S16800J_ClockEnable+0x44>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <IS42S16800J_ClockEnable+0x44>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a16:	4907      	ldr	r1, [pc, #28]	; (8000a34 <IS42S16800J_ClockEnable+0x44>)
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f00a f845 	bl	800aaa8 <HAL_SDRAM_SendCommand>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d002      	beq.n	8000a2a <IS42S16800J_ClockEnable+0x3a>
  {
    return IS42S16800J_ERROR;
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	e000      	b.n	8000a2c <IS42S16800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 8000a2a:	2300      	movs	r3, #0
  }
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	240001a0 	.word	0x240001a0

08000a38 <IS42S16800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_PALL_CMD;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <IS42S16800J_Precharge+0x44>)
 8000a44:	2202      	movs	r2, #2
 8000a46:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <IS42S16800J_Precharge+0x44>)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <IS42S16800J_Precharge+0x44>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <IS42S16800J_Precharge+0x44>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5e:	4907      	ldr	r1, [pc, #28]	; (8000a7c <IS42S16800J_Precharge+0x44>)
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f00a f821 	bl	800aaa8 <HAL_SDRAM_SendCommand>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <IS42S16800J_Precharge+0x3a>
  {
    return IS42S16800J_ERROR;
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a70:	e000      	b.n	8000a74 <IS42S16800J_Precharge+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 8000a72:	2300      	movs	r3, #0
  }
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	240001a0 	.word	0x240001a0

08000a80 <IS42S16800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000a92:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8000a98:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8000a9e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S16800J_LOAD_MODE_CMD;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <IS42S16800J_ModeRegConfig+0x64>)
 8000aaa:	2204      	movs	r2, #4
 8000aac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <IS42S16800J_ModeRegConfig+0x64>)
 8000ab4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <IS42S16800J_ModeRegConfig+0x64>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000abc:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <IS42S16800J_ModeRegConfig+0x64>)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ac6:	4907      	ldr	r1, [pc, #28]	; (8000ae4 <IS42S16800J_ModeRegConfig+0x64>)
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f009 ffed 	bl	800aaa8 <HAL_SDRAM_SendCommand>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <IS42S16800J_ModeRegConfig+0x5a>
  {
    return IS42S16800J_ERROR;
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad8:	e000      	b.n	8000adc <IS42S16800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S16800J_OK;
 8000ada:	2300      	movs	r3, #0
  }
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	240001a0 	.word	0x240001a0

08000ae8 <IS42S16800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S16800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S16800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S16800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <IS42S16800J_RefreshMode+0x48>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000afa:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <IS42S16800J_RefreshMode+0x48>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <IS42S16800J_RefreshMode+0x48>)
 8000b02:	2208      	movs	r2, #8
 8000b04:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <IS42S16800J_RefreshMode+0x48>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b10:	4907      	ldr	r1, [pc, #28]	; (8000b30 <IS42S16800J_RefreshMode+0x48>)
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f009 ffc8 	bl	800aaa8 <HAL_SDRAM_SendCommand>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <IS42S16800J_RefreshMode+0x3c>
  {
    return IS42S16800J_ERROR;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	e000      	b.n	8000b26 <IS42S16800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S16800J_OK;
 8000b24:	2300      	movs	r3, #0
  }
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	240001a0 	.word	0x240001a0

08000b34 <IS42S16800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S16800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000b3e:	6839      	ldr	r1, [r7, #0]
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f009 ffe6 	bl	800ab12 <HAL_SDRAM_ProgramRefreshRate>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <IS42S16800J_RefreshRate+0x1e>
  {
    return IS42S16800J_ERROR;
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b50:	e000      	b.n	8000b54 <IS42S16800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S16800J_OK;
 8000b52:	2300      	movs	r3, #0
  }
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <IS42S16800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval IS42S16800J_OK
  */
static int32_t IS42S16800J_Delay(uint32_t Delay)
{  
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000b64:	f001 f8f2 	bl	8001d4c <HAL_GetTick>
 8000b68:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000b6a:	bf00      	nop
 8000b6c:	f001 f8ee 	bl	8001d4c <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d8f7      	bhi.n	8000b6c <IS42S16800J_Delay+0x10>
  {
  }
  return IS42S16800J_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_SAI_TxCpltCallback>:
volatile uint8_t 			ADC_HALF_COMPLETE_FLAG = 0;
volatile uint8_t 			DAC_HALF_COMPLETE_FLAG = 0;
volatile uint32_t input_i2s_buffer_au32[16];
volatile uint32_t output_i2s_buffer_au32[16];

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
 8000b88:	b480      	push	{r7}
 8000b8a:	b08b      	sub	sp, #44	; 0x2c
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 0;
 8000b90:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <HAL_SAI_TxCpltCallback+0xb4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <HAL_SAI_TxCpltCallback+0xb8>)
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	dd1d      	ble.n	8000be0 <HAL_SAI_TxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	f003 021f 	and.w	r2, r3, #31
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	4413      	add	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb4:	f3bf 8f4f 	dsb	sy
}
 8000bb8:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000bba:	4a22      	ldr	r2, [pc, #136]	; (8000c44 <HAL_SAI_TxCpltCallback+0xbc>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	3320      	adds	r3, #32
 8000bc6:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3b20      	subs	r3, #32
 8000bcc:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	dcf2      	bgt.n	8000bba <HAL_SAI_TxCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd4:	f3bf 8f4f 	dsb	sy
}
 8000bd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bda:	f3bf 8f6f 	isb	sy
}
 8000bde:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000be0:	bf00      	nop
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_SAI_TxCpltCallback+0xc0>)
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
 8000be6:	2340      	movs	r3, #64	; 0x40
 8000be8:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000bea:	6a3b      	ldr	r3, [r7, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	dd1d      	ble.n	8000c2c <HAL_SAI_TxCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	f003 021f 	and.w	r2, r3, #31
 8000bf6:	6a3b      	ldr	r3, [r7, #32]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c00:	f3bf 8f4f 	dsb	sy
}
 8000c04:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <HAL_SAI_TxCpltCallback+0xbc>)
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	3320      	adds	r3, #32
 8000c12:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	3b20      	subs	r3, #32
 8000c18:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	dcf2      	bgt.n	8000c06 <HAL_SAI_TxCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c20:	f3bf 8f4f 	dsb	sy
}
 8000c24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c26:	f3bf 8f6f 	isb	sy
}
 8000c2a:	bf00      	nop
}
 8000c2c:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));

}
 8000c2e:	bf00      	nop
 8000c30:	372c      	adds	r7, #44	; 0x2c
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	240001b1 	.word	0x240001b1
 8000c40:	240001b4 	.word	0x240001b4
 8000c44:	e000ed00 	.word	0xe000ed00
 8000c48:	240001f4 	.word	0x240001f4

08000c4c <HAL_SAI_TxHalfCpltCallback>:
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000c4c:	b480      	push	{r7}
 8000c4e:	b08b      	sub	sp, #44	; 0x2c
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 1;
 8000c54:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <HAL_SAI_TxHalfCpltCallback+0xb4>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <HAL_SAI_TxHalfCpltCallback+0xb8>)
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	2340      	movs	r3, #64	; 0x40
 8000c60:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	dd1d      	ble.n	8000ca4 <HAL_SAI_TxHalfCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	f003 021f 	and.w	r2, r3, #31
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	4413      	add	r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c78:	f3bf 8f4f 	dsb	sy
}
 8000c7c:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c7e:	4a22      	ldr	r2, [pc, #136]	; (8000d08 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	3320      	adds	r3, #32
 8000c8a:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3b20      	subs	r3, #32
 8000c90:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	dcf2      	bgt.n	8000c7e <HAL_SAI_TxHalfCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c98:	f3bf 8f4f 	dsb	sy
}
 8000c9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c9e:	f3bf 8f6f 	isb	sy
}
 8000ca2:	bf00      	nop
}
 8000ca4:	bf00      	nop
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_SAI_TxHalfCpltCallback+0xc0>)
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8000caa:	2340      	movs	r3, #64	; 0x40
 8000cac:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	dd1d      	ble.n	8000cf0 <HAL_SAI_TxHalfCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	f003 021f 	and.w	r2, r3, #31
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc4:	f3bf 8f4f 	dsb	sy
}
 8000cc8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000cca:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	3320      	adds	r3, #32
 8000cd6:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	3b20      	subs	r3, #32
 8000cdc:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	dcf2      	bgt.n	8000cca <HAL_SAI_TxHalfCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ce4:	f3bf 8f4f 	dsb	sy
}
 8000ce8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cea:	f3bf 8f6f 	isb	sy
}
 8000cee:	bf00      	nop
}
 8000cf0:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
		SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000cf2:	bf00      	nop
 8000cf4:	372c      	adds	r7, #44	; 0x2c
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	240001b1 	.word	0x240001b1
 8000d04:	240001b4 	.word	0x240001b4
 8000d08:	e000ed00 	.word	0xe000ed00
 8000d0c:	240001f4 	.word	0x240001f4

08000d10 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000d10:	b480      	push	{r7}
 8000d12:	b093      	sub	sp, #76	; 0x4c
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 0;
 8000d18:	4b54      	ldr	r3, [pc, #336]	; (8000e6c <HAL_SAI_RxCpltCallback+0x15c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
 8000d1e:	4b54      	ldr	r3, [pc, #336]	; (8000e70 <HAL_SAI_RxCpltCallback+0x160>)
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	2340      	movs	r3, #64	; 0x40
 8000d24:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	dd1d      	ble.n	8000d68 <HAL_SAI_RxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f003 021f 	and.w	r2, r3, #31
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4413      	add	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d3c:	f3bf 8f4f 	dsb	sy
}
 8000d40:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000d42:	4a4c      	ldr	r2, [pc, #304]	; (8000e74 <HAL_SAI_RxCpltCallback+0x164>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	3320      	adds	r3, #32
 8000d4e:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	3b20      	subs	r3, #32
 8000d54:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	dcf2      	bgt.n	8000d42 <HAL_SAI_RxCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d5c:	f3bf 8f4f 	dsb	sy
}
 8000d60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d62:	f3bf 8f6f 	isb	sy
}
 8000d66:	bf00      	nop
}
 8000d68:	bf00      	nop
 8000d6a:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <HAL_SAI_RxCpltCallback+0x168>)
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6e:	2340      	movs	r3, #64	; 0x40
 8000d70:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	dd1d      	ble.n	8000db4 <HAL_SAI_RxCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	f003 021f 	and.w	r2, r3, #31
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	4413      	add	r3, r2
 8000d82:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d88:	f3bf 8f4f 	dsb	sy
}
 8000d8c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000d8e:	4a39      	ldr	r2, [pc, #228]	; (8000e74 <HAL_SAI_RxCpltCallback+0x164>)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	3320      	adds	r3, #32
 8000d9a:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	3b20      	subs	r3, #32
 8000da0:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	dcf2      	bgt.n	8000d8e <HAL_SAI_RxCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000da8:	f3bf 8f4f 	dsb	sy
}
 8000dac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dae:	f3bf 8f6f 	isb	sy
}
 8000db2:	bf00      	nop
}
 8000db4:	bf00      	nop

	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	output_i2s_buffer_au32[14] = input_i2s_buffer_au32[10];
 8000db6:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <HAL_SAI_RxCpltCallback+0x160>)
 8000db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dba:	4a2f      	ldr	r2, [pc, #188]	; (8000e78 <HAL_SAI_RxCpltCallback+0x168>)
 8000dbc:	6393      	str	r3, [r2, #56]	; 0x38
	output_i2s_buffer_au32[15] = input_i2s_buffer_au32[11];
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <HAL_SAI_RxCpltCallback+0x160>)
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	4a2d      	ldr	r2, [pc, #180]	; (8000e78 <HAL_SAI_RxCpltCallback+0x168>)
 8000dc4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <HAL_SAI_RxCpltCallback+0x160>)
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 8000dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	dd1d      	ble.n	8000e10 <HAL_SAI_RxCpltCallback+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd6:	f003 021f 	and.w	r2, r3, #31
 8000dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ddc:	4413      	add	r3, r2
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 8000de4:	f3bf 8f4f 	dsb	sy
}
 8000de8:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000dea:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <HAL_SAI_RxCpltCallback+0x164>)
 8000dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dee:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000df4:	3320      	adds	r3, #32
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfa:	3b20      	subs	r3, #32
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	dcf2      	bgt.n	8000dea <HAL_SAI_RxCpltCallback+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e04:	f3bf 8f4f 	dsb	sy
}
 8000e08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e0a:	f3bf 8f6f 	isb	sy
}
 8000e0e:	bf00      	nop
}
 8000e10:	bf00      	nop
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <HAL_SAI_RxCpltCallback+0x168>)
 8000e14:	647b      	str	r3, [r7, #68]	; 0x44
 8000e16:	2340      	movs	r3, #64	; 0x40
 8000e18:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8000e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	dd1d      	ble.n	8000e5c <HAL_SAI_RxCpltCallback+0x14c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e22:	f003 021f 	and.w	r2, r3, #31
 8000e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e28:	4413      	add	r3, r2
 8000e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8000e30:	f3bf 8f4f 	dsb	sy
}
 8000e34:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000e36:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <HAL_SAI_RxCpltCallback+0x164>)
 8000e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e3a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e40:	3320      	adds	r3, #32
 8000e42:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e46:	3b20      	subs	r3, #32
 8000e48:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 8000e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	dcf2      	bgt.n	8000e36 <HAL_SAI_RxCpltCallback+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e50:	f3bf 8f4f 	dsb	sy
}
 8000e54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e56:	f3bf 8f6f 	isb	sy
}
 8000e5a:	bf00      	nop
}
 8000e5c:	bf00      	nop

	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000e5e:	bf00      	nop
 8000e60:	374c      	adds	r7, #76	; 0x4c
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	240001b0 	.word	0x240001b0
 8000e70:	240001b4 	.word	0x240001b4
 8000e74:	e000ed00 	.word	0xe000ed00
 8000e78:	240001f4 	.word	0x240001f4

08000e7c <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b093      	sub	sp, #76	; 0x4c
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 1;
 8000e84:	4b54      	ldr	r3, [pc, #336]	; (8000fd8 <HAL_SAI_RxHalfCpltCallback+0x15c>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	4b54      	ldr	r3, [pc, #336]	; (8000fdc <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	2340      	movs	r3, #64	; 0x40
 8000e90:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	dd1d      	ble.n	8000ed4 <HAL_SAI_RxHalfCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f003 021f 	and.w	r2, r3, #31
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea8:	f3bf 8f4f 	dsb	sy
}
 8000eac:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000eae:	4a4c      	ldr	r2, [pc, #304]	; (8000fe0 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	3320      	adds	r3, #32
 8000eba:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3b20      	subs	r3, #32
 8000ec0:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	dcf2      	bgt.n	8000eae <HAL_SAI_RxHalfCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ec8:	f3bf 8f4f 	dsb	sy
}
 8000ecc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ece:	f3bf 8f6f 	isb	sy
}
 8000ed2:	bf00      	nop
}
 8000ed4:	bf00      	nop
 8000ed6:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eda:	2340      	movs	r3, #64	; 0x40
 8000edc:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	dd1d      	ble.n	8000f20 <HAL_SAI_RxHalfCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	f003 021f 	and.w	r2, r3, #31
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	4413      	add	r3, r2
 8000eee:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef4:	f3bf 8f4f 	dsb	sy
}
 8000ef8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000efa:	4a39      	ldr	r2, [pc, #228]	; (8000fe0 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	3320      	adds	r3, #32
 8000f06:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	3b20      	subs	r3, #32
 8000f0c:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dcf2      	bgt.n	8000efa <HAL_SAI_RxHalfCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f14:	f3bf 8f4f 	dsb	sy
}
 8000f18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f1a:	f3bf 8f6f 	isb	sy
}
 8000f1e:	bf00      	nop
}
 8000f20:	bf00      	nop


	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	output_i2s_buffer_au32[6] = input_i2s_buffer_au32[2];
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	4a2f      	ldr	r2, [pc, #188]	; (8000fe4 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000f28:	6193      	str	r3, [r2, #24]
	output_i2s_buffer_au32[7] = input_i2s_buffer_au32[3];
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	4a2d      	ldr	r2, [pc, #180]	; (8000fe4 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b2c      	ldr	r3, [pc, #176]	; (8000fe4 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
 8000f36:	2340      	movs	r3, #64	; 0x40
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 8000f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	dd1d      	ble.n	8000f7c <HAL_SAI_RxHalfCpltCallback+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f42:	f003 021f 	and.w	r2, r3, #31
 8000f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f48:	4413      	add	r3, r2
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 8000f50:	f3bf 8f4f 	dsb	sy
}
 8000f54:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000f56:	4a22      	ldr	r2, [pc, #136]	; (8000fe0 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5a:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f60:	3320      	adds	r3, #32
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f66:	3b20      	subs	r3, #32
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	dcf2      	bgt.n	8000f56 <HAL_SAI_RxHalfCpltCallback+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f70:	f3bf 8f4f 	dsb	sy
}
 8000f74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f76:	f3bf 8f6f 	isb	sy
}
 8000f7a:	bf00      	nop
}
 8000f7c:	bf00      	nop
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000f80:	647b      	str	r3, [r7, #68]	; 0x44
 8000f82:	2340      	movs	r3, #64	; 0x40
 8000f84:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8000f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	dd1d      	ble.n	8000fc8 <HAL_SAI_RxHalfCpltCallback+0x14c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f8e:	f003 021f 	and.w	r2, r3, #31
 8000f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f94:	4413      	add	r3, r2
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8000f9c:	f3bf 8f4f 	dsb	sy
}
 8000fa0:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fac:	3320      	adds	r3, #32
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb2:	3b20      	subs	r3, #32
 8000fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 8000fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dcf2      	bgt.n	8000fa2 <HAL_SAI_RxHalfCpltCallback+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fbc:	f3bf 8f4f 	dsb	sy
}
 8000fc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fc2:	f3bf 8f6f 	isb	sy
}
 8000fc6:	bf00      	nop
}
 8000fc8:	bf00      	nop

	SCB_CleanDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));


}
 8000fca:	bf00      	nop
 8000fcc:	374c      	adds	r7, #76	; 0x4c
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	240001b0 	.word	0x240001b0
 8000fdc:	240001b4 	.word	0x240001b4
 8000fe0:	e000ed00 	.word	0xe000ed00
 8000fe4:	240001f4 	.word	0x240001f4

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f000 fe27 	bl	8001c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f881 	bl	80010f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ff6:	f000 f8ef 	bl	80011d8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffa:	f7ff fc29 	bl	8000850 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ffe:	f7ff faa9 	bl	8000554 <MX_DMA_Init>
  MX_SAI1_Init();
 8001002:	f000 fa4b 	bl	800149c <MX_SAI1_Init>
  MX_SPI1_Init();
 8001006:	f000 fb8f 	bl	8001728 <MX_SPI1_Init>
  MX_FMC_Init();
 800100a:	f7ff fadb 	bl	80005c4 <MX_FMC_Init>
  MX_OCTOSPI1_Init();
 800100e:	f000 f91b 	bl	8001248 <MX_OCTOSPI1_Init>
  MX_USB_DEVICE_Init();
 8001012:	f00e f935 	bl	800f280 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // init SAI interface
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, output_i2s_buffer_au32, 	16);
 8001016:	2210      	movs	r2, #16
 8001018:	4930      	ldr	r1, [pc, #192]	; (80010dc <main+0xf4>)
 800101a:	4831      	ldr	r0, [pc, #196]	; (80010e0 <main+0xf8>)
 800101c:	f009 f962 	bl	800a2e4 <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, input_i2s_buffer_au32, 	16);
 8001020:	2210      	movs	r2, #16
 8001022:	4930      	ldr	r1, [pc, #192]	; (80010e4 <main+0xfc>)
 8001024:	4830      	ldr	r0, [pc, #192]	; (80010e8 <main+0x100>)
 8001026:	f009 fa13 	bl	800a450 <HAL_SAI_Receive_DMA>

  // init CODEC
	ad1939_init(&hspi1);
 800102a:	4830      	ldr	r0, [pc, #192]	; (80010ec <main+0x104>)
 800102c:	f7ff fa10 	bl	8000450 <ad1939_init>
  while (1)
  {
	  uint32_t fmctestStart;
	  uint32_t fmctestStop;

	  fmctestStart = HAL_GetTick();
 8001030:	f000 fe8c 	bl	8001d4c <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]
	  uint32_t errorCounter =0;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t usb_state=0;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
	  for(uint32_t i = 0; i<10000;i++){
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
 8001042:	e039      	b.n	80010b8 <main+0xd0>


		  //usb_state = CDC_Transmit_HS((uint8_t*)mymsg, strlen(mymsg));
		  //HAL_Delay(100);

		  for(uint32_t j=256*256-2; j<256*256+200;j++){
 8001044:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e02e      	b.n	80010aa <main+0xc2>
			  fmctestStart = HAL_GetTick();
 800104c:	f000 fe7e 	bl	8001d4c <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]
			  uint8_t number_inc = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	72bb      	strb	r3, [r7, #10]
//			  for(uint32_t counter = 1; counter<SDRAM_SIZE; counter=counter+2){
//				  *(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) = (uint8_t) number_inc;
//				  number_inc++;
//			  }

			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	e007      	b.n	800106c <main+0x84>
			 				  sdram_array[counter] = j;
 800105c:	4924      	ldr	r1, [pc, #144]	; (80010f0 <main+0x108>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	3301      	adds	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2b09      	cmp	r3, #9
 8001070:	d9f4      	bls.n	800105c <main+0x74>
//			  				  if(*(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) != j){
//			  					  errorCounter++;
//			  				  }


			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	e00c      	b.n	8001092 <main+0xaa>
				  if( sdram_array[counter] != j){
 8001078:	4a1d      	ldr	r2, [pc, #116]	; (80010f0 <main+0x108>)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	429a      	cmp	r2, r3
 8001084:	d002      	beq.n	800108c <main+0xa4>
					  errorCounter++;
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	3301      	adds	r3, #1
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	2b09      	cmp	r3, #9
 8001096:	d9ef      	bls.n	8001078 <main+0x90>
				  }
			  }
			  fmctestStop = (HAL_GetTick()-fmctestStart);
 8001098:	f000 fe58 	bl	8001d4c <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	607b      	str	r3, [r7, #4]
		  for(uint32_t j=256*256-2; j<256*256+200;j++){
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	3301      	adds	r3, #1
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <main+0x10c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d9cc      	bls.n	800104c <main+0x64>
	  for(uint32_t i = 0; i<10000;i++){
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	3301      	adds	r3, #1
 80010b6:	623b      	str	r3, [r7, #32]
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80010be:	4293      	cmp	r3, r2
 80010c0:	d9c0      	bls.n	8001044 <main+0x5c>
		  }

	  }

	  if(errorCounter){
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d000      	beq.n	80010ca <main+0xe2>
		  while(1){
 80010c8:	e7fe      	b.n	80010c8 <main+0xe0>

		  }
	  }

	  uint8_t var = *(__IO uint8_t*)(SDRAM_ADDRESS_START);
 80010ca:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	72fb      	strb	r3, [r7, #11]
	  HAL_Delay(50);
 80010d2:	2032      	movs	r0, #50	; 0x32
 80010d4:	f000 fe46 	bl	8001d64 <HAL_Delay>
  {
 80010d8:	e7aa      	b.n	8001030 <main+0x48>
 80010da:	bf00      	nop
 80010dc:	240001f4 	.word	0x240001f4
 80010e0:	24000290 	.word	0x24000290
 80010e4:	240001b4 	.word	0x240001b4
 80010e8:	24000328 	.word	0x24000328
 80010ec:	240004b4 	.word	0x240004b4
 80010f0:	c0000000 	.word	0xc0000000
 80010f4:	000100c7 	.word	0x000100c7

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b09c      	sub	sp, #112	; 0x70
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	224c      	movs	r2, #76	; 0x4c
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f00e fe57 	bl	800fdba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2220      	movs	r2, #32
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f00e fe51 	bl	800fdba <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001118:	2002      	movs	r0, #2
 800111a:	f005 fb17 	bl	800674c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <SystemClock_Config+0xdc>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	4a2b      	ldr	r2, [pc, #172]	; (80011d4 <SystemClock_Config+0xdc>)
 8001128:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800112c:	6193      	str	r3, [r2, #24]
 800112e:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <SystemClock_Config+0xdc>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800113a:	bf00      	nop
 800113c:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <SystemClock_Config+0xdc>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001148:	d1f8      	bne.n	800113c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800114a:	2321      	movs	r3, #33	; 0x21
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001154:	2301      	movs	r3, #1
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001158:	2302      	movs	r3, #2
 800115a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115c:	2302      	movs	r3, #2
 800115e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001160:	2302      	movs	r3, #2
 8001162:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001164:	232c      	movs	r3, #44	; 0x2c
 8001166:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001168:	2301      	movs	r3, #1
 800116a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800116c:	2302      	movs	r3, #2
 800116e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001170:	2302      	movs	r3, #2
 8001172:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001174:	230c      	movs	r3, #12
 8001176:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001178:	2300      	movs	r3, #0
 800117a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	4618      	mov	r0, r3
 8001186:	f005 fb2b 	bl	80067e0 <HAL_RCC_OscConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001190:	f000 f855 	bl	800123e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001194:	233f      	movs	r3, #63	; 0x3f
 8001196:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001198:	2303      	movs	r3, #3
 800119a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011a0:	2308      	movs	r3, #8
 80011a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011a4:	2340      	movs	r3, #64	; 0x40
 80011a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011a8:	2340      	movs	r3, #64	; 0x40
 80011aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011b2:	2340      	movs	r3, #64	; 0x40
 80011b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2103      	movs	r1, #3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f005 feea 	bl	8006f94 <HAL_RCC_ClockConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80011c6:	f000 f83a 	bl	800123e <Error_Handler>
  }
}
 80011ca:	bf00      	nop
 80011cc:	3770      	adds	r7, #112	; 0x70
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	58024800 	.word	0x58024800

080011d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0ae      	sub	sp, #184	; 0xb8
 80011dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011de:	463b      	mov	r3, r7
 80011e0:	22b8      	movs	r2, #184	; 0xb8
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f00e fde8 	bl	800fdba <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 80011ea:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80011ee:	f04f 0300 	mov.w	r3, #0
 80011f2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 80011fa:	230f      	movs	r3, #15
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011fe:	2302      	movs	r3, #2
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001202:	2302      	movs	r3, #2
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001206:	2302      	movs	r3, #2
 8001208:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800120a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800120e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001210:	2300      	movs	r3, #0
 8001212:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 8001214:	f640 3386 	movw	r3, #2950	; 0xb86
 8001218:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 800121a:	2302      	movs	r3, #2
 800121c:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001222:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4618      	mov	r0, r3
 8001228:	f006 fa2a 	bl	8007680 <HAL_RCCEx_PeriphCLKConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8001232:	f000 f804 	bl	800123e <Error_Handler>
  }
}
 8001236:	bf00      	nop
 8001238:	37b8      	adds	r7, #184	; 0xb8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001242:	b672      	cpsid	i
}
 8001244:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001246:	e7fe      	b.n	8001246 <Error_Handler+0x8>

08001248 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 8001260:	4a28      	ldr	r2, [pc, #160]	; (8001304 <MX_OCTOSPI1_Init+0xbc>)
 8001262:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 8001266:	2204      	movs	r2, #4
 8001268:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001270:	4b23      	ldr	r3, [pc, #140]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 8001278:	2218      	movs	r2, #24
 800127a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800127c:	4b20      	ldr	r3, [pc, #128]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 800127e:	2201      	movs	r2, #1
 8001280:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 4;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 8001296:	2204      	movs	r2, #4
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 800129c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 80012b0:	2208      	movs	r2, #8
 80012b2:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80012c0:	480f      	ldr	r0, [pc, #60]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 80012c2:	f003 f925 	bl	8004510 <HAL_OSPI_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 80012cc:	f7ff ffb7 	bl	800123e <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80012d8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80012dc:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_OCTOSPI1_Init+0xb8>)
 80012e8:	f003 f9de 	bl	80046a8 <HAL_OSPIM_Config>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 80012f2:	f7ff ffa4 	bl	800123e <Error_Handler>
//	sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
//
//	HAL_OSPI_Command(&hospi1, &sCommand, 1000);
  /* USER CODE END OCTOSPI1_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	24000234 	.word	0x24000234
 8001304:	52005000 	.word	0x52005000

08001308 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0ba      	sub	sp, #232	; 0xe8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001320:	f107 0318 	add.w	r3, r7, #24
 8001324:	22b8      	movs	r2, #184	; 0xb8
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f00e fd46 	bl	800fdba <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a56      	ldr	r2, [pc, #344]	; (800148c <HAL_OSPI_MspInit+0x184>)
 8001334:	4293      	cmp	r3, r2
 8001336:	f040 80a5 	bne.w	8001484 <HAL_OSPI_MspInit+0x17c>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800133a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8001346:	2300      	movs	r3, #0
 8001348:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134a:	f107 0318 	add.w	r3, r7, #24
 800134e:	4618      	mov	r0, r3
 8001350:	f006 f996 	bl	8007680 <HAL_RCCEx_PeriphCLKConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 800135a:	f7ff ff70 	bl	800123e <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800135e:	4b4c      	ldr	r3, [pc, #304]	; (8001490 <HAL_OSPI_MspInit+0x188>)
 8001360:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001364:	4a4a      	ldr	r2, [pc, #296]	; (8001490 <HAL_OSPI_MspInit+0x188>)
 8001366:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800136a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800136e:	4b48      	ldr	r3, [pc, #288]	; (8001490 <HAL_OSPI_MspInit+0x188>)
 8001370:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800137c:	4b44      	ldr	r3, [pc, #272]	; (8001490 <HAL_OSPI_MspInit+0x188>)
 800137e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001382:	4a43      	ldr	r2, [pc, #268]	; (8001490 <HAL_OSPI_MspInit+0x188>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800138c:	4b40      	ldr	r3, [pc, #256]	; (8001490 <HAL_OSPI_MspInit+0x188>)
 800138e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800139a:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <HAL_OSPI_MspInit+0x188>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a0:	4a3b      	ldr	r2, [pc, #236]	; (8001490 <HAL_OSPI_MspInit+0x188>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013aa:	4b39      	ldr	r3, [pc, #228]	; (8001490 <HAL_OSPI_MspInit+0x188>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013b8:	4b35      	ldr	r3, [pc, #212]	; (8001490 <HAL_OSPI_MspInit+0x188>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013be:	4a34      	ldr	r2, [pc, #208]	; (8001490 <HAL_OSPI_MspInit+0x188>)
 80013c0:	f043 0320 	orr.w	r3, r3, #32
 80013c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c8:	4b31      	ldr	r3, [pc, #196]	; (8001490 <HAL_OSPI_MspInit+0x188>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	f003 0320 	and.w	r3, r3, #32
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> OCTOSPIM_P1_IO0
    PF9     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013d6:	2304      	movs	r3, #4
 80013d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80013ee:	2309      	movs	r3, #9
 80013f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4826      	ldr	r0, [pc, #152]	; (8001494 <HAL_OSPI_MspInit+0x18c>)
 80013fc:	f002 fec6 	bl	800418c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001400:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001404:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800141a:	230a      	movs	r3, #10
 800141c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001420:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001424:	4619      	mov	r1, r3
 8001426:	481c      	ldr	r0, [pc, #112]	; (8001498 <HAL_OSPI_MspInit+0x190>)
 8001428:	f002 feb0 	bl	800418c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800142c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001430:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001446:	2309      	movs	r3, #9
 8001448:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800144c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001450:	4619      	mov	r1, r3
 8001452:	4811      	ldr	r0, [pc, #68]	; (8001498 <HAL_OSPI_MspInit+0x190>)
 8001454:	f002 fe9a 	bl	800418c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001458:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800145c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8001472:	230b      	movs	r3, #11
 8001474:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001478:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800147c:	4619      	mov	r1, r3
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_OSPI_MspInit+0x18c>)
 8001480:	f002 fe84 	bl	800418c <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8001484:	bf00      	nop
 8001486:	37e8      	adds	r7, #232	; 0xe8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	52005000 	.word	0x52005000
 8001490:	58024400 	.word	0x58024400
 8001494:	58021000 	.word	0x58021000
 8001498:	58021400 	.word	0x58021400

0800149c <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <MX_SAI1_Init+0xb0>)
 80014a2:	4a2b      	ldr	r2, [pc, #172]	; (8001550 <MX_SAI1_Init+0xb4>)
 80014a4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <MX_SAI1_Init+0xb0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80014ac:	4b27      	ldr	r3, [pc, #156]	; (800154c <MX_SAI1_Init+0xb0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <MX_SAI1_Init+0xb0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <MX_SAI1_Init+0xb0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <MX_SAI1_Init+0xb0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <MX_SAI1_Init+0xb0>)
 80014c6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80014ca:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80014cc:	4b1f      	ldr	r3, [pc, #124]	; (800154c <MX_SAI1_Init+0xb0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80014d2:	4b1e      	ldr	r3, [pc, #120]	; (800154c <MX_SAI1_Init+0xb0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80014d8:	4b1c      	ldr	r3, [pc, #112]	; (800154c <MX_SAI1_Init+0xb0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <MX_SAI1_Init+0xb0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 80014e4:	2308      	movs	r3, #8
 80014e6:	2202      	movs	r2, #2
 80014e8:	2100      	movs	r1, #0
 80014ea:	4818      	ldr	r0, [pc, #96]	; (800154c <MX_SAI1_Init+0xb0>)
 80014ec:	f008 fcae 	bl	8009e4c <HAL_SAI_InitProtocol>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80014f6:	f7ff fea2 	bl	800123e <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <MX_SAI1_Init+0xb8>)
 80014fc:	4a16      	ldr	r2, [pc, #88]	; (8001558 <MX_SAI1_Init+0xbc>)
 80014fe:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <MX_SAI1_Init+0xb8>)
 8001502:	2203      	movs	r2, #3
 8001504:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <MX_SAI1_Init+0xb8>)
 8001508:	2201      	movs	r2, #1
 800150a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_SAI1_Init+0xb8>)
 800150e:	2200      	movs	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_SAI1_Init+0xb8>)
 8001514:	2200      	movs	r2, #0
 8001516:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_SAI1_Init+0xb8>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <MX_SAI1_Init+0xb8>)
 8001520:	2200      	movs	r2, #0
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_SAI1_Init+0xb8>)
 8001526:	2200      	movs	r2, #0
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <MX_SAI1_Init+0xb8>)
 800152c:	2200      	movs	r2, #0
 800152e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001530:	2308      	movs	r3, #8
 8001532:	2202      	movs	r2, #2
 8001534:	2100      	movs	r1, #0
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <MX_SAI1_Init+0xb8>)
 8001538:	f008 fc88 	bl	8009e4c <HAL_SAI_InitProtocol>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8001542:	f7ff fe7c 	bl	800123e <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	24000290 	.word	0x24000290
 8001550:	40015804 	.word	0x40015804
 8001554:	24000328 	.word	0x24000328
 8001558:	40015824 	.word	0x40015824

0800155c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a66      	ldr	r2, [pc, #408]	; (8001704 <HAL_SAI_MspInit+0x1a8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d160      	bne.n	8001630 <HAL_SAI_MspInit+0xd4>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800156e:	4b66      	ldr	r3, [pc, #408]	; (8001708 <HAL_SAI_MspInit+0x1ac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10e      	bne.n	8001594 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001576:	4b65      	ldr	r3, [pc, #404]	; (800170c <HAL_SAI_MspInit+0x1b0>)
 8001578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800157c:	4a63      	ldr	r2, [pc, #396]	; (800170c <HAL_SAI_MspInit+0x1b0>)
 800157e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001582:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001586:	4b61      	ldr	r3, [pc, #388]	; (800170c <HAL_SAI_MspInit+0x1b0>)
 8001588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800158c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001594:	4b5c      	ldr	r3, [pc, #368]	; (8001708 <HAL_SAI_MspInit+0x1ac>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	4a5b      	ldr	r2, [pc, #364]	; (8001708 <HAL_SAI_MspInit+0x1ac>)
 800159c:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800159e:	2370      	movs	r3, #112	; 0x70
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80015ae:	2306      	movs	r3, #6
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4855      	ldr	r0, [pc, #340]	; (8001710 <HAL_SAI_MspInit+0x1b4>)
 80015ba:	f002 fde7 	bl	800418c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 80015be:	4b55      	ldr	r3, [pc, #340]	; (8001714 <HAL_SAI_MspInit+0x1b8>)
 80015c0:	4a55      	ldr	r2, [pc, #340]	; (8001718 <HAL_SAI_MspInit+0x1bc>)
 80015c2:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_SAI_MspInit+0x1b8>)
 80015c6:	2257      	movs	r2, #87	; 0x57
 80015c8:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ca:	4b52      	ldr	r3, [pc, #328]	; (8001714 <HAL_SAI_MspInit+0x1b8>)
 80015cc:	2240      	movs	r2, #64	; 0x40
 80015ce:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <HAL_SAI_MspInit+0x1b8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80015d6:	4b4f      	ldr	r3, [pc, #316]	; (8001714 <HAL_SAI_MspInit+0x1b8>)
 80015d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015dc:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015de:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <HAL_SAI_MspInit+0x1b8>)
 80015e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e4:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015e6:	4b4b      	ldr	r3, [pc, #300]	; (8001714 <HAL_SAI_MspInit+0x1b8>)
 80015e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ec:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80015ee:	4b49      	ldr	r3, [pc, #292]	; (8001714 <HAL_SAI_MspInit+0x1b8>)
 80015f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f4:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015f6:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_SAI_MspInit+0x1b8>)
 80015f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015fc:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015fe:	4b45      	ldr	r3, [pc, #276]	; (8001714 <HAL_SAI_MspInit+0x1b8>)
 8001600:	2200      	movs	r2, #0
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001604:	4843      	ldr	r0, [pc, #268]	; (8001714 <HAL_SAI_MspInit+0x1b8>)
 8001606:	f000 fce1 	bl	8001fcc <HAL_DMA_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8001610:	f7ff fe15 	bl	800123e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a3f      	ldr	r2, [pc, #252]	; (8001714 <HAL_SAI_MspInit+0x1b8>)
 8001618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800161c:	4a3d      	ldr	r2, [pc, #244]	; (8001714 <HAL_SAI_MspInit+0x1b8>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a3b      	ldr	r2, [pc, #236]	; (8001714 <HAL_SAI_MspInit+0x1b8>)
 8001626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800162a:	4a3a      	ldr	r2, [pc, #232]	; (8001714 <HAL_SAI_MspInit+0x1b8>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a39      	ldr	r2, [pc, #228]	; (800171c <HAL_SAI_MspInit+0x1c0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d160      	bne.n	80016fc <HAL_SAI_MspInit+0x1a0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 800163a:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_SAI_MspInit+0x1ac>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10e      	bne.n	8001660 <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001642:	4b32      	ldr	r3, [pc, #200]	; (800170c <HAL_SAI_MspInit+0x1b0>)
 8001644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001648:	4a30      	ldr	r2, [pc, #192]	; (800170c <HAL_SAI_MspInit+0x1b0>)
 800164a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800164e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001652:	4b2e      	ldr	r3, [pc, #184]	; (800170c <HAL_SAI_MspInit+0x1b0>)
 8001654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001660:	4b29      	ldr	r3, [pc, #164]	; (8001708 <HAL_SAI_MspInit+0x1ac>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	4a28      	ldr	r2, [pc, #160]	; (8001708 <HAL_SAI_MspInit+0x1ac>)
 8001668:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800166a:	2308      	movs	r3, #8
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800167a:	2306      	movs	r3, #6
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4822      	ldr	r0, [pc, #136]	; (8001710 <HAL_SAI_MspInit+0x1b4>)
 8001686:	f002 fd81 	bl	800418c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream0;
 800168a:	4b25      	ldr	r3, [pc, #148]	; (8001720 <HAL_SAI_MspInit+0x1c4>)
 800168c:	4a25      	ldr	r2, [pc, #148]	; (8001724 <HAL_SAI_MspInit+0x1c8>)
 800168e:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_SAI_MspInit+0x1c4>)
 8001692:	2258      	movs	r2, #88	; 0x58
 8001694:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_SAI_MspInit+0x1c4>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800169c:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_SAI_MspInit+0x1c4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80016a2:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <HAL_SAI_MspInit+0x1c4>)
 80016a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a8:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_SAI_MspInit+0x1c4>)
 80016ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016b0:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_SAI_MspInit+0x1c4>)
 80016b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016b8:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_SAI_MspInit+0x1c4>)
 80016bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c0:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <HAL_SAI_MspInit+0x1c4>)
 80016c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016c8:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_SAI_MspInit+0x1c4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80016d0:	4813      	ldr	r0, [pc, #76]	; (8001720 <HAL_SAI_MspInit+0x1c4>)
 80016d2:	f000 fc7b 	bl	8001fcc <HAL_DMA_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 80016dc:	f7ff fdaf 	bl	800123e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <HAL_SAI_MspInit+0x1c4>)
 80016e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <HAL_SAI_MspInit+0x1c4>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <HAL_SAI_MspInit+0x1c4>)
 80016f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_SAI_MspInit+0x1c4>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40015804 	.word	0x40015804
 8001708:	240004b0 	.word	0x240004b0
 800170c:	58024400 	.word	0x58024400
 8001710:	58021000 	.word	0x58021000
 8001714:	240003c0 	.word	0x240003c0
 8001718:	40020010 	.word	0x40020010
 800171c:	40015824 	.word	0x40015824
 8001720:	24000438 	.word	0x24000438
 8001724:	40020410 	.word	0x40020410

08001728 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800172c:	4b27      	ldr	r3, [pc, #156]	; (80017cc <MX_SPI1_Init+0xa4>)
 800172e:	4a28      	ldr	r2, [pc, #160]	; (80017d0 <MX_SPI1_Init+0xa8>)
 8001730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <MX_SPI1_Init+0xa4>)
 8001734:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <MX_SPI1_Init+0xa4>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <MX_SPI1_Init+0xa4>)
 8001742:	2207      	movs	r2, #7
 8001744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001746:	4b21      	ldr	r3, [pc, #132]	; (80017cc <MX_SPI1_Init+0xa4>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <MX_SPI1_Init+0xa4>)
 800174e:	2200      	movs	r2, #0
 8001750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001752:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <MX_SPI1_Init+0xa4>)
 8001754:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <MX_SPI1_Init+0xa4>)
 800175c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001760:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <MX_SPI1_Init+0xa4>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <MX_SPI1_Init+0xa4>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <MX_SPI1_Init+0xa4>)
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <MX_SPI1_Init+0xa4>)
 8001776:	2200      	movs	r2, #0
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <MX_SPI1_Init+0xa4>)
 800177c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001780:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <MX_SPI1_Init+0xa4>)
 8001784:	2200      	movs	r2, #0
 8001786:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <MX_SPI1_Init+0xa4>)
 800178a:	2200      	movs	r2, #0
 800178c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_SPI1_Init+0xa4>)
 8001790:	2200      	movs	r2, #0
 8001792:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001794:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <MX_SPI1_Init+0xa4>)
 8001796:	2200      	movs	r2, #0
 8001798:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_SPI1_Init+0xa4>)
 800179c:	2200      	movs	r2, #0
 800179e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <MX_SPI1_Init+0xa4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_SPI1_Init+0xa4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <MX_SPI1_Init+0xa4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_SPI1_Init+0xa4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <MX_SPI1_Init+0xa4>)
 80017ba:	f009 f9d3 	bl	800ab64 <HAL_SPI_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80017c4:	f7ff fd3b 	bl	800123e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	240004b4 	.word	0x240004b4
 80017d0:	40013000 	.word	0x40013000

080017d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a3a      	ldr	r2, [pc, #232]	; (80018dc <HAL_SPI_MspInit+0x108>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d16d      	bne.n	80018d2 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017f6:	4b3a      	ldr	r3, [pc, #232]	; (80018e0 <HAL_SPI_MspInit+0x10c>)
 80017f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017fc:	4a38      	ldr	r2, [pc, #224]	; (80018e0 <HAL_SPI_MspInit+0x10c>)
 80017fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001802:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001806:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <HAL_SPI_MspInit+0x10c>)
 8001808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800180c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <HAL_SPI_MspInit+0x10c>)
 8001816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181a:	4a31      	ldr	r2, [pc, #196]	; (80018e0 <HAL_SPI_MspInit+0x10c>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001824:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <HAL_SPI_MspInit+0x10c>)
 8001826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_SPI_MspInit+0x10c>)
 8001834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001838:	4a29      	ldr	r2, [pc, #164]	; (80018e0 <HAL_SPI_MspInit+0x10c>)
 800183a:	f043 0308 	orr.w	r3, r3, #8
 800183e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <HAL_SPI_MspInit+0x10c>)
 8001844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <HAL_SPI_MspInit+0x10c>)
 8001852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001856:	4a22      	ldr	r2, [pc, #136]	; (80018e0 <HAL_SPI_MspInit+0x10c>)
 8001858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800185c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <HAL_SPI_MspInit+0x10c>)
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> SPI1_MISO
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 800186e:	f248 0340 	movw	r3, #32832	; 0x8040
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001880:	2305      	movs	r3, #5
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4816      	ldr	r0, [pc, #88]	; (80018e4 <HAL_SPI_MspInit+0x110>)
 800188c:	f002 fc7e 	bl	800418c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018a0:	2305      	movs	r3, #5
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	480f      	ldr	r0, [pc, #60]	; (80018e8 <HAL_SPI_MspInit+0x114>)
 80018ac:	f002 fc6e 	bl	800418c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018c2:	2305      	movs	r3, #5
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4619      	mov	r1, r3
 80018cc:	4807      	ldr	r0, [pc, #28]	; (80018ec <HAL_SPI_MspInit+0x118>)
 80018ce:	f002 fc5d 	bl	800418c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80018d2:	bf00      	nop
 80018d4:	3730      	adds	r7, #48	; 0x30
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40013000 	.word	0x40013000
 80018e0:	58024400 	.word	0x58024400
 80018e4:	58020000 	.word	0x58020000
 80018e8:	58020c00 	.word	0x58020c00
 80018ec:	58021800 	.word	0x58021800

080018f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_MspInit+0x30>)
 80018f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018fc:	4a08      	ldr	r2, [pc, #32]	; (8001920 <HAL_MspInit+0x30>)
 80018fe:	f043 0302 	orr.w	r3, r3, #2
 8001902:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_MspInit+0x30>)
 8001908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	58024400 	.word	0x58024400

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001928:	e7fe      	b.n	8001928 <NMI_Handler+0x4>

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001970:	f000 f9d8 	bl	8001d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <DMA1_Stream0_IRQHandler+0x10>)
 800197e:	f001 f8e7 	bl	8002b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	240003c0 	.word	0x240003c0

0800198c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <DMA2_Stream0_IRQHandler+0x10>)
 8001992:	f001 f8dd 	bl	8002b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	24000438 	.word	0x24000438

080019a0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <OTG_HS_IRQHandler+0x10>)
 80019a6:	f003 fdd5 	bl	8005554 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	24000b20 	.word	0x24000b20

080019b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	e00a      	b.n	80019dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019c6:	f3af 8000 	nop.w
 80019ca:	4601      	mov	r1, r0
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	60ba      	str	r2, [r7, #8]
 80019d2:	b2ca      	uxtb	r2, r1
 80019d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	dbf0      	blt.n	80019c6 <_read+0x12>
  }

  return len;
 80019e4:	687b      	ldr	r3, [r7, #4]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e009      	b.n	8001a14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbf1      	blt.n	8001a00 <_write+0x12>
  }
  return len;
 8001a1c:	687b      	ldr	r3, [r7, #4]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_close>:

int _close(int file)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_isatty>:

int _isatty(int file)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a98:	4a14      	ldr	r2, [pc, #80]	; (8001aec <_sbrk+0x5c>)
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <_sbrk+0x60>)
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <_sbrk+0x64>)
 8001aae:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <_sbrk+0x68>)
 8001ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d207      	bcs.n	8001ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac0:	f00e f9ca 	bl	800fe58 <__errno>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	e009      	b.n	8001ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <_sbrk+0x64>)
 8001ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	24050000 	.word	0x24050000
 8001af0:	00004000 	.word	0x00004000
 8001af4:	2400053c 	.word	0x2400053c
 8001af8:	24001578 	.word	0x24001578

08001afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b00:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <SystemInit+0xd0>)
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b06:	4a31      	ldr	r2, [pc, #196]	; (8001bcc <SystemInit+0xd0>)
 8001b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b10:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <SystemInit+0xd4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	2b06      	cmp	r3, #6
 8001b1a:	d807      	bhi.n	8001b2c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b1c:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <SystemInit+0xd4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 030f 	bic.w	r3, r3, #15
 8001b24:	4a2a      	ldr	r2, [pc, #168]	; (8001bd0 <SystemInit+0xd4>)
 8001b26:	f043 0307 	orr.w	r3, r3, #7
 8001b2a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <SystemInit+0xd8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a28      	ldr	r2, [pc, #160]	; (8001bd4 <SystemInit+0xd8>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b38:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <SystemInit+0xd8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b3e:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <SystemInit+0xd8>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4924      	ldr	r1, [pc, #144]	; (8001bd4 <SystemInit+0xd8>)
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <SystemInit+0xdc>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b4a:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <SystemInit+0xd4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <SystemInit+0xd4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 030f 	bic.w	r3, r3, #15
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <SystemInit+0xd4>)
 8001b60:	f043 0307 	orr.w	r3, r3, #7
 8001b64:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <SystemInit+0xd8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <SystemInit+0xd8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <SystemInit+0xd8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <SystemInit+0xd8>)
 8001b7a:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <SystemInit+0xe0>)
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <SystemInit+0xd8>)
 8001b80:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <SystemInit+0xe4>)
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <SystemInit+0xd8>)
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <SystemInit+0xe8>)
 8001b88:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <SystemInit+0xd8>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <SystemInit+0xd8>)
 8001b92:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <SystemInit+0xe8>)
 8001b94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <SystemInit+0xd8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <SystemInit+0xd8>)
 8001b9e:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <SystemInit+0xe8>)
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <SystemInit+0xd8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <SystemInit+0xd8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <SystemInit+0xd8>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <SystemInit+0xd8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <SystemInit+0xec>)
 8001bbc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001bc0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00
 8001bd0:	52002000 	.word	0x52002000
 8001bd4:	58024400 	.word	0x58024400
 8001bd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001bdc:	02020200 	.word	0x02020200
 8001be0:	01ff0000 	.word	0x01ff0000
 8001be4:	01010280 	.word	0x01010280
 8001be8:	52004000 	.word	0x52004000

08001bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bf0:	f7ff ff84 	bl	8001afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf4:	480c      	ldr	r0, [pc, #48]	; (8001c28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bf6:	490d      	ldr	r1, [pc, #52]	; (8001c2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	; (8001c30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bfc:	e002      	b.n	8001c04 <LoopCopyDataInit>

08001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c02:	3304      	adds	r3, #4

08001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c08:	d3f9      	bcc.n	8001bfe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c0c:	4c0a      	ldr	r4, [pc, #40]	; (8001c38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c10:	e001      	b.n	8001c16 <LoopFillZerobss>

08001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c14:	3204      	adds	r2, #4

08001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c18:	d3fb      	bcc.n	8001c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1a:	f00e f923 	bl	800fe64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1e:	f7ff f9e3 	bl	8000fe8 <main>
  bx  lr
 8001c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c24:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001c28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c2c:	24000140 	.word	0x24000140
  ldr r2, =_sidata
 8001c30:	08010bb8 	.word	0x08010bb8
  ldr r2, =_sbss
 8001c34:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8001c38:	24001574 	.word	0x24001574

08001c3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC3_IRQHandler>
	...

08001c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c46:	2003      	movs	r0, #3
 8001c48:	f000 f980 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c4c:	f005 fb58 	bl	8007300 <HAL_RCC_GetSysClockFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_Init+0x68>)
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	4913      	ldr	r1, [pc, #76]	; (8001cac <HAL_Init+0x6c>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
 8001c68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <HAL_Init+0x68>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <HAL_Init+0x6c>)
 8001c74:	5cd3      	ldrb	r3, [r2, r3]
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c80:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <HAL_Init+0x70>)
 8001c82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c84:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <HAL_Init+0x74>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c8a:	200f      	movs	r0, #15
 8001c8c:	f000 f814 	bl	8001cb8 <HAL_InitTick>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e002      	b.n	8001ca0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9a:	f7ff fe29 	bl	80018f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	58024400 	.word	0x58024400
 8001cac:	08010b64 	.word	0x08010b64
 8001cb0:	24000004 	.word	0x24000004
 8001cb4:	24000000 	.word	0x24000000

08001cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <HAL_InitTick+0x60>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e021      	b.n	8001d10 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <HAL_InitTick+0x64>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_InitTick+0x60>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f965 	bl	8001fb2 <HAL_SYSTICK_Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00e      	b.n	8001d10 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d80a      	bhi.n	8001d0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f000 f92f 	bl	8001f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d04:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <HAL_InitTick+0x68>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2400000c 	.word	0x2400000c
 8001d1c:	24000000 	.word	0x24000000
 8001d20:	24000008 	.word	0x24000008

08001d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_IncTick+0x20>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x24>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_IncTick+0x24>)
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	2400000c 	.word	0x2400000c
 8001d48:	24000540 	.word	0x24000540

08001d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_GetTick+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	24000540 	.word	0x24000540

08001d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff ffee 	bl	8001d4c <HAL_GetTick>
 8001d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7c:	d005      	beq.n	8001d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_Delay+0x44>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d8a:	bf00      	nop
 8001d8c:	f7ff ffde 	bl	8001d4c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d8f7      	bhi.n	8001d8c <HAL_Delay+0x28>
  {
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2400000c 	.word	0x2400000c

08001dac <__NVIC_SetPriorityGrouping>:
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <__NVIC_SetPriorityGrouping+0x40>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <__NVIC_SetPriorityGrouping+0x40>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00
 8001df0:	05fa0000 	.word	0x05fa0000

08001df4 <__NVIC_GetPriorityGrouping>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4907      	ldr	r1, [pc, #28]	; (8001e48 <__NVIC_EnableIRQ+0x38>)
 8001e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f18:	d301      	bcc.n	8001f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00f      	b.n	8001f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <SysTick_Config+0x40>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f26:	210f      	movs	r1, #15
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f7ff ff8e 	bl	8001e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <SysTick_Config+0x40>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <SysTick_Config+0x40>)
 8001f38:	2207      	movs	r2, #7
 8001f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	e000e010 	.word	0xe000e010

08001f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff29 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f70:	f7ff ff40 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f7ff ff90 	bl	8001ea0 <NVIC_EncodePriority>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff5f 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff33 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffa4 	bl	8001f08 <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff feba 	bl	8001d4c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e312      	b.n	800260a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a66      	ldr	r2, [pc, #408]	; (8002184 <HAL_DMA_Init+0x1b8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d04a      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a65      	ldr	r2, [pc, #404]	; (8002188 <HAL_DMA_Init+0x1bc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d045      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a63      	ldr	r2, [pc, #396]	; (800218c <HAL_DMA_Init+0x1c0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d040      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a62      	ldr	r2, [pc, #392]	; (8002190 <HAL_DMA_Init+0x1c4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d03b      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a60      	ldr	r2, [pc, #384]	; (8002194 <HAL_DMA_Init+0x1c8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d036      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a5f      	ldr	r2, [pc, #380]	; (8002198 <HAL_DMA_Init+0x1cc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d031      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a5d      	ldr	r2, [pc, #372]	; (800219c <HAL_DMA_Init+0x1d0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d02c      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a5c      	ldr	r2, [pc, #368]	; (80021a0 <HAL_DMA_Init+0x1d4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d027      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a5a      	ldr	r2, [pc, #360]	; (80021a4 <HAL_DMA_Init+0x1d8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d022      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a59      	ldr	r2, [pc, #356]	; (80021a8 <HAL_DMA_Init+0x1dc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d01d      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a57      	ldr	r2, [pc, #348]	; (80021ac <HAL_DMA_Init+0x1e0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d018      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a56      	ldr	r2, [pc, #344]	; (80021b0 <HAL_DMA_Init+0x1e4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d013      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a54      	ldr	r2, [pc, #336]	; (80021b4 <HAL_DMA_Init+0x1e8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00e      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a53      	ldr	r2, [pc, #332]	; (80021b8 <HAL_DMA_Init+0x1ec>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a51      	ldr	r2, [pc, #324]	; (80021bc <HAL_DMA_Init+0x1f0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d004      	beq.n	8002084 <HAL_DMA_Init+0xb8>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a50      	ldr	r2, [pc, #320]	; (80021c0 <HAL_DMA_Init+0x1f4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d101      	bne.n	8002088 <HAL_DMA_Init+0xbc>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_DMA_Init+0xbe>
 8002088:	2300      	movs	r3, #0
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 813c 	beq.w	8002308 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a37      	ldr	r2, [pc, #220]	; (8002184 <HAL_DMA_Init+0x1b8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d04a      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a36      	ldr	r2, [pc, #216]	; (8002188 <HAL_DMA_Init+0x1bc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d045      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a34      	ldr	r2, [pc, #208]	; (800218c <HAL_DMA_Init+0x1c0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d040      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a33      	ldr	r2, [pc, #204]	; (8002190 <HAL_DMA_Init+0x1c4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d03b      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a31      	ldr	r2, [pc, #196]	; (8002194 <HAL_DMA_Init+0x1c8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d036      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a30      	ldr	r2, [pc, #192]	; (8002198 <HAL_DMA_Init+0x1cc>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d031      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a2e      	ldr	r2, [pc, #184]	; (800219c <HAL_DMA_Init+0x1d0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d02c      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2d      	ldr	r2, [pc, #180]	; (80021a0 <HAL_DMA_Init+0x1d4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d027      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a2b      	ldr	r2, [pc, #172]	; (80021a4 <HAL_DMA_Init+0x1d8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d022      	beq.n	8002140 <HAL_DMA_Init+0x174>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a2a      	ldr	r2, [pc, #168]	; (80021a8 <HAL_DMA_Init+0x1dc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d01d      	beq.n	8002140 <HAL_DMA_Init+0x174>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a28      	ldr	r2, [pc, #160]	; (80021ac <HAL_DMA_Init+0x1e0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d018      	beq.n	8002140 <HAL_DMA_Init+0x174>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a27      	ldr	r2, [pc, #156]	; (80021b0 <HAL_DMA_Init+0x1e4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d013      	beq.n	8002140 <HAL_DMA_Init+0x174>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a25      	ldr	r2, [pc, #148]	; (80021b4 <HAL_DMA_Init+0x1e8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00e      	beq.n	8002140 <HAL_DMA_Init+0x174>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a24      	ldr	r2, [pc, #144]	; (80021b8 <HAL_DMA_Init+0x1ec>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d009      	beq.n	8002140 <HAL_DMA_Init+0x174>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a22      	ldr	r2, [pc, #136]	; (80021bc <HAL_DMA_Init+0x1f0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d004      	beq.n	8002140 <HAL_DMA_Init+0x174>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a21      	ldr	r2, [pc, #132]	; (80021c0 <HAL_DMA_Init+0x1f4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d108      	bne.n	8002152 <HAL_DMA_Init+0x186>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e007      	b.n	8002162 <HAL_DMA_Init+0x196>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0201 	bic.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002162:	e02f      	b.n	80021c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002164:	f7ff fdf2 	bl	8001d4c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b05      	cmp	r3, #5
 8002170:	d928      	bls.n	80021c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2220      	movs	r2, #32
 8002176:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2203      	movs	r2, #3
 800217c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e242      	b.n	800260a <HAL_DMA_Init+0x63e>
 8002184:	40020010 	.word	0x40020010
 8002188:	40020028 	.word	0x40020028
 800218c:	40020040 	.word	0x40020040
 8002190:	40020058 	.word	0x40020058
 8002194:	40020070 	.word	0x40020070
 8002198:	40020088 	.word	0x40020088
 800219c:	400200a0 	.word	0x400200a0
 80021a0:	400200b8 	.word	0x400200b8
 80021a4:	40020410 	.word	0x40020410
 80021a8:	40020428 	.word	0x40020428
 80021ac:	40020440 	.word	0x40020440
 80021b0:	40020458 	.word	0x40020458
 80021b4:	40020470 	.word	0x40020470
 80021b8:	40020488 	.word	0x40020488
 80021bc:	400204a0 	.word	0x400204a0
 80021c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1c8      	bne.n	8002164 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4b83      	ldr	r3, [pc, #524]	; (80023ec <HAL_DMA_Init+0x420>)
 80021de:	4013      	ands	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80021ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002202:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	2b04      	cmp	r3, #4
 8002216:	d107      	bne.n	8002228 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	4313      	orrs	r3, r2
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b28      	cmp	r3, #40	; 0x28
 800222e:	d903      	bls.n	8002238 <HAL_DMA_Init+0x26c>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b2e      	cmp	r3, #46	; 0x2e
 8002236:	d91f      	bls.n	8002278 <HAL_DMA_Init+0x2ac>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b3e      	cmp	r3, #62	; 0x3e
 800223e:	d903      	bls.n	8002248 <HAL_DMA_Init+0x27c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b42      	cmp	r3, #66	; 0x42
 8002246:	d917      	bls.n	8002278 <HAL_DMA_Init+0x2ac>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b46      	cmp	r3, #70	; 0x46
 800224e:	d903      	bls.n	8002258 <HAL_DMA_Init+0x28c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b48      	cmp	r3, #72	; 0x48
 8002256:	d90f      	bls.n	8002278 <HAL_DMA_Init+0x2ac>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b4e      	cmp	r3, #78	; 0x4e
 800225e:	d903      	bls.n	8002268 <HAL_DMA_Init+0x29c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b52      	cmp	r3, #82	; 0x52
 8002266:	d907      	bls.n	8002278 <HAL_DMA_Init+0x2ac>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b73      	cmp	r3, #115	; 0x73
 800226e:	d905      	bls.n	800227c <HAL_DMA_Init+0x2b0>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b77      	cmp	r3, #119	; 0x77
 8002276:	d801      	bhi.n	800227c <HAL_DMA_Init+0x2b0>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_DMA_Init+0x2b2>
 800227c:	2300      	movs	r3, #0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002288:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f023 0307 	bic.w	r3, r3, #7
 80022a0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d117      	bne.n	80022e4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00e      	beq.n	80022e4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f001 fdd6 	bl	8003e78 <DMA_CheckFifoParam>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2240      	movs	r2, #64	; 0x40
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e192      	b.n	800260a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f001 fd11 	bl	8003d14 <DMA_CalcBaseAndBitshift>
 80022f2:	4603      	mov	r3, r0
 80022f4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	223f      	movs	r2, #63	; 0x3f
 8002300:	409a      	lsls	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	e0c8      	b.n	800249a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a38      	ldr	r2, [pc, #224]	; (80023f0 <HAL_DMA_Init+0x424>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d022      	beq.n	8002358 <HAL_DMA_Init+0x38c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a37      	ldr	r2, [pc, #220]	; (80023f4 <HAL_DMA_Init+0x428>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d01d      	beq.n	8002358 <HAL_DMA_Init+0x38c>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a35      	ldr	r2, [pc, #212]	; (80023f8 <HAL_DMA_Init+0x42c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d018      	beq.n	8002358 <HAL_DMA_Init+0x38c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a34      	ldr	r2, [pc, #208]	; (80023fc <HAL_DMA_Init+0x430>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <HAL_DMA_Init+0x38c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a32      	ldr	r2, [pc, #200]	; (8002400 <HAL_DMA_Init+0x434>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00e      	beq.n	8002358 <HAL_DMA_Init+0x38c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a31      	ldr	r2, [pc, #196]	; (8002404 <HAL_DMA_Init+0x438>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d009      	beq.n	8002358 <HAL_DMA_Init+0x38c>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2f      	ldr	r2, [pc, #188]	; (8002408 <HAL_DMA_Init+0x43c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_DMA_Init+0x38c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a2e      	ldr	r2, [pc, #184]	; (800240c <HAL_DMA_Init+0x440>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_DMA_Init+0x390>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_DMA_Init+0x392>
 800235c:	2300      	movs	r3, #0
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8092 	beq.w	8002488 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a21      	ldr	r2, [pc, #132]	; (80023f0 <HAL_DMA_Init+0x424>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d021      	beq.n	80023b2 <HAL_DMA_Init+0x3e6>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a20      	ldr	r2, [pc, #128]	; (80023f4 <HAL_DMA_Init+0x428>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d01c      	beq.n	80023b2 <HAL_DMA_Init+0x3e6>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1e      	ldr	r2, [pc, #120]	; (80023f8 <HAL_DMA_Init+0x42c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d017      	beq.n	80023b2 <HAL_DMA_Init+0x3e6>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <HAL_DMA_Init+0x430>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d012      	beq.n	80023b2 <HAL_DMA_Init+0x3e6>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1b      	ldr	r2, [pc, #108]	; (8002400 <HAL_DMA_Init+0x434>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_DMA_Init+0x3e6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1a      	ldr	r2, [pc, #104]	; (8002404 <HAL_DMA_Init+0x438>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d008      	beq.n	80023b2 <HAL_DMA_Init+0x3e6>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a18      	ldr	r2, [pc, #96]	; (8002408 <HAL_DMA_Init+0x43c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d003      	beq.n	80023b2 <HAL_DMA_Init+0x3e6>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a17      	ldr	r2, [pc, #92]	; (800240c <HAL_DMA_Init+0x440>)
 80023b0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HAL_DMA_Init+0x444>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b40      	cmp	r3, #64	; 0x40
 80023d8:	d01c      	beq.n	8002414 <HAL_DMA_Init+0x448>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b80      	cmp	r3, #128	; 0x80
 80023e0:	d102      	bne.n	80023e8 <HAL_DMA_Init+0x41c>
 80023e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023e6:	e016      	b.n	8002416 <HAL_DMA_Init+0x44a>
 80023e8:	2300      	movs	r3, #0
 80023ea:	e014      	b.n	8002416 <HAL_DMA_Init+0x44a>
 80023ec:	fe10803f 	.word	0xfe10803f
 80023f0:	58025408 	.word	0x58025408
 80023f4:	5802541c 	.word	0x5802541c
 80023f8:	58025430 	.word	0x58025430
 80023fc:	58025444 	.word	0x58025444
 8002400:	58025458 	.word	0x58025458
 8002404:	5802546c 	.word	0x5802546c
 8002408:	58025480 	.word	0x58025480
 800240c:	58025494 	.word	0x58025494
 8002410:	fffe000f 	.word	0xfffe000f
 8002414:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68d2      	ldr	r2, [r2, #12]
 800241a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800241c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002424:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800242c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002434:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800243c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002444:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4313      	orrs	r3, r2
 800244a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	4b6e      	ldr	r3, [pc, #440]	; (8002614 <HAL_DMA_Init+0x648>)
 800245c:	4413      	add	r3, r2
 800245e:	4a6e      	ldr	r2, [pc, #440]	; (8002618 <HAL_DMA_Init+0x64c>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	009a      	lsls	r2, r3, #2
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f001 fc51 	bl	8003d14 <DMA_CalcBaseAndBitshift>
 8002472:	4603      	mov	r3, r0
 8002474:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2201      	movs	r2, #1
 8002480:	409a      	lsls	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	e008      	b.n	800249a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2240      	movs	r2, #64	; 0x40
 800248c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2203      	movs	r2, #3
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0b7      	b.n	800260a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a5f      	ldr	r2, [pc, #380]	; (800261c <HAL_DMA_Init+0x650>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d072      	beq.n	800258a <HAL_DMA_Init+0x5be>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a5d      	ldr	r2, [pc, #372]	; (8002620 <HAL_DMA_Init+0x654>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d06d      	beq.n	800258a <HAL_DMA_Init+0x5be>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a5c      	ldr	r2, [pc, #368]	; (8002624 <HAL_DMA_Init+0x658>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d068      	beq.n	800258a <HAL_DMA_Init+0x5be>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a5a      	ldr	r2, [pc, #360]	; (8002628 <HAL_DMA_Init+0x65c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d063      	beq.n	800258a <HAL_DMA_Init+0x5be>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a59      	ldr	r2, [pc, #356]	; (800262c <HAL_DMA_Init+0x660>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d05e      	beq.n	800258a <HAL_DMA_Init+0x5be>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a57      	ldr	r2, [pc, #348]	; (8002630 <HAL_DMA_Init+0x664>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d059      	beq.n	800258a <HAL_DMA_Init+0x5be>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a56      	ldr	r2, [pc, #344]	; (8002634 <HAL_DMA_Init+0x668>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d054      	beq.n	800258a <HAL_DMA_Init+0x5be>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a54      	ldr	r2, [pc, #336]	; (8002638 <HAL_DMA_Init+0x66c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d04f      	beq.n	800258a <HAL_DMA_Init+0x5be>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a53      	ldr	r2, [pc, #332]	; (800263c <HAL_DMA_Init+0x670>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d04a      	beq.n	800258a <HAL_DMA_Init+0x5be>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a51      	ldr	r2, [pc, #324]	; (8002640 <HAL_DMA_Init+0x674>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d045      	beq.n	800258a <HAL_DMA_Init+0x5be>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a50      	ldr	r2, [pc, #320]	; (8002644 <HAL_DMA_Init+0x678>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d040      	beq.n	800258a <HAL_DMA_Init+0x5be>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a4e      	ldr	r2, [pc, #312]	; (8002648 <HAL_DMA_Init+0x67c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d03b      	beq.n	800258a <HAL_DMA_Init+0x5be>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a4d      	ldr	r2, [pc, #308]	; (800264c <HAL_DMA_Init+0x680>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d036      	beq.n	800258a <HAL_DMA_Init+0x5be>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a4b      	ldr	r2, [pc, #300]	; (8002650 <HAL_DMA_Init+0x684>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d031      	beq.n	800258a <HAL_DMA_Init+0x5be>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a4a      	ldr	r2, [pc, #296]	; (8002654 <HAL_DMA_Init+0x688>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d02c      	beq.n	800258a <HAL_DMA_Init+0x5be>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a48      	ldr	r2, [pc, #288]	; (8002658 <HAL_DMA_Init+0x68c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d027      	beq.n	800258a <HAL_DMA_Init+0x5be>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a47      	ldr	r2, [pc, #284]	; (800265c <HAL_DMA_Init+0x690>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d022      	beq.n	800258a <HAL_DMA_Init+0x5be>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a45      	ldr	r2, [pc, #276]	; (8002660 <HAL_DMA_Init+0x694>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d01d      	beq.n	800258a <HAL_DMA_Init+0x5be>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a44      	ldr	r2, [pc, #272]	; (8002664 <HAL_DMA_Init+0x698>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d018      	beq.n	800258a <HAL_DMA_Init+0x5be>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a42      	ldr	r2, [pc, #264]	; (8002668 <HAL_DMA_Init+0x69c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d013      	beq.n	800258a <HAL_DMA_Init+0x5be>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a41      	ldr	r2, [pc, #260]	; (800266c <HAL_DMA_Init+0x6a0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00e      	beq.n	800258a <HAL_DMA_Init+0x5be>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a3f      	ldr	r2, [pc, #252]	; (8002670 <HAL_DMA_Init+0x6a4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d009      	beq.n	800258a <HAL_DMA_Init+0x5be>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a3e      	ldr	r2, [pc, #248]	; (8002674 <HAL_DMA_Init+0x6a8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d004      	beq.n	800258a <HAL_DMA_Init+0x5be>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a3c      	ldr	r2, [pc, #240]	; (8002678 <HAL_DMA_Init+0x6ac>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d101      	bne.n	800258e <HAL_DMA_Init+0x5c2>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <HAL_DMA_Init+0x5c4>
 800258e:	2300      	movs	r3, #0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d032      	beq.n	80025fa <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f001 fceb 	bl	8003f70 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b80      	cmp	r3, #128	; 0x80
 80025a0:	d102      	bne.n	80025a8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d010      	beq.n	80025e8 <HAL_DMA_Init+0x61c>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d80c      	bhi.n	80025e8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f001 fd68 	bl	80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	e008      	b.n	80025fa <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	a7fdabf8 	.word	0xa7fdabf8
 8002618:	cccccccd 	.word	0xcccccccd
 800261c:	40020010 	.word	0x40020010
 8002620:	40020028 	.word	0x40020028
 8002624:	40020040 	.word	0x40020040
 8002628:	40020058 	.word	0x40020058
 800262c:	40020070 	.word	0x40020070
 8002630:	40020088 	.word	0x40020088
 8002634:	400200a0 	.word	0x400200a0
 8002638:	400200b8 	.word	0x400200b8
 800263c:	40020410 	.word	0x40020410
 8002640:	40020428 	.word	0x40020428
 8002644:	40020440 	.word	0x40020440
 8002648:	40020458 	.word	0x40020458
 800264c:	40020470 	.word	0x40020470
 8002650:	40020488 	.word	0x40020488
 8002654:	400204a0 	.word	0x400204a0
 8002658:	400204b8 	.word	0x400204b8
 800265c:	58025408 	.word	0x58025408
 8002660:	5802541c 	.word	0x5802541c
 8002664:	58025430 	.word	0x58025430
 8002668:	58025444 	.word	0x58025444
 800266c:	58025458 	.word	0x58025458
 8002670:	5802546c 	.word	0x5802546c
 8002674:	58025480 	.word	0x58025480
 8002678:	58025494 	.word	0x58025494

0800267c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e226      	b.n	8002ae6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_DMA_Start_IT+0x2a>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e21f      	b.n	8002ae6 <HAL_DMA_Start_IT+0x46a>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	f040 820a 	bne.w	8002ad0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a68      	ldr	r2, [pc, #416]	; (8002870 <HAL_DMA_Start_IT+0x1f4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d04a      	beq.n	800276a <HAL_DMA_Start_IT+0xee>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a66      	ldr	r2, [pc, #408]	; (8002874 <HAL_DMA_Start_IT+0x1f8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d045      	beq.n	800276a <HAL_DMA_Start_IT+0xee>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a65      	ldr	r2, [pc, #404]	; (8002878 <HAL_DMA_Start_IT+0x1fc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d040      	beq.n	800276a <HAL_DMA_Start_IT+0xee>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a63      	ldr	r2, [pc, #396]	; (800287c <HAL_DMA_Start_IT+0x200>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d03b      	beq.n	800276a <HAL_DMA_Start_IT+0xee>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a62      	ldr	r2, [pc, #392]	; (8002880 <HAL_DMA_Start_IT+0x204>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d036      	beq.n	800276a <HAL_DMA_Start_IT+0xee>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a60      	ldr	r2, [pc, #384]	; (8002884 <HAL_DMA_Start_IT+0x208>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d031      	beq.n	800276a <HAL_DMA_Start_IT+0xee>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a5f      	ldr	r2, [pc, #380]	; (8002888 <HAL_DMA_Start_IT+0x20c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d02c      	beq.n	800276a <HAL_DMA_Start_IT+0xee>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a5d      	ldr	r2, [pc, #372]	; (800288c <HAL_DMA_Start_IT+0x210>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d027      	beq.n	800276a <HAL_DMA_Start_IT+0xee>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a5c      	ldr	r2, [pc, #368]	; (8002890 <HAL_DMA_Start_IT+0x214>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d022      	beq.n	800276a <HAL_DMA_Start_IT+0xee>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a5a      	ldr	r2, [pc, #360]	; (8002894 <HAL_DMA_Start_IT+0x218>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d01d      	beq.n	800276a <HAL_DMA_Start_IT+0xee>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a59      	ldr	r2, [pc, #356]	; (8002898 <HAL_DMA_Start_IT+0x21c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d018      	beq.n	800276a <HAL_DMA_Start_IT+0xee>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a57      	ldr	r2, [pc, #348]	; (800289c <HAL_DMA_Start_IT+0x220>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_DMA_Start_IT+0xee>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a56      	ldr	r2, [pc, #344]	; (80028a0 <HAL_DMA_Start_IT+0x224>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00e      	beq.n	800276a <HAL_DMA_Start_IT+0xee>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a54      	ldr	r2, [pc, #336]	; (80028a4 <HAL_DMA_Start_IT+0x228>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d009      	beq.n	800276a <HAL_DMA_Start_IT+0xee>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a53      	ldr	r2, [pc, #332]	; (80028a8 <HAL_DMA_Start_IT+0x22c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d004      	beq.n	800276a <HAL_DMA_Start_IT+0xee>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a51      	ldr	r2, [pc, #324]	; (80028ac <HAL_DMA_Start_IT+0x230>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d108      	bne.n	800277c <HAL_DMA_Start_IT+0x100>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e007      	b.n	800278c <HAL_DMA_Start_IT+0x110>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f001 f912 	bl	80039bc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a34      	ldr	r2, [pc, #208]	; (8002870 <HAL_DMA_Start_IT+0x1f4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d04a      	beq.n	8002838 <HAL_DMA_Start_IT+0x1bc>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a33      	ldr	r2, [pc, #204]	; (8002874 <HAL_DMA_Start_IT+0x1f8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d045      	beq.n	8002838 <HAL_DMA_Start_IT+0x1bc>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a31      	ldr	r2, [pc, #196]	; (8002878 <HAL_DMA_Start_IT+0x1fc>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d040      	beq.n	8002838 <HAL_DMA_Start_IT+0x1bc>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a30      	ldr	r2, [pc, #192]	; (800287c <HAL_DMA_Start_IT+0x200>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d03b      	beq.n	8002838 <HAL_DMA_Start_IT+0x1bc>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2e      	ldr	r2, [pc, #184]	; (8002880 <HAL_DMA_Start_IT+0x204>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d036      	beq.n	8002838 <HAL_DMA_Start_IT+0x1bc>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a2d      	ldr	r2, [pc, #180]	; (8002884 <HAL_DMA_Start_IT+0x208>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d031      	beq.n	8002838 <HAL_DMA_Start_IT+0x1bc>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a2b      	ldr	r2, [pc, #172]	; (8002888 <HAL_DMA_Start_IT+0x20c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d02c      	beq.n	8002838 <HAL_DMA_Start_IT+0x1bc>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2a      	ldr	r2, [pc, #168]	; (800288c <HAL_DMA_Start_IT+0x210>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d027      	beq.n	8002838 <HAL_DMA_Start_IT+0x1bc>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a28      	ldr	r2, [pc, #160]	; (8002890 <HAL_DMA_Start_IT+0x214>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d022      	beq.n	8002838 <HAL_DMA_Start_IT+0x1bc>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a27      	ldr	r2, [pc, #156]	; (8002894 <HAL_DMA_Start_IT+0x218>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d01d      	beq.n	8002838 <HAL_DMA_Start_IT+0x1bc>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a25      	ldr	r2, [pc, #148]	; (8002898 <HAL_DMA_Start_IT+0x21c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d018      	beq.n	8002838 <HAL_DMA_Start_IT+0x1bc>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a24      	ldr	r2, [pc, #144]	; (800289c <HAL_DMA_Start_IT+0x220>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d013      	beq.n	8002838 <HAL_DMA_Start_IT+0x1bc>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <HAL_DMA_Start_IT+0x224>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00e      	beq.n	8002838 <HAL_DMA_Start_IT+0x1bc>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a21      	ldr	r2, [pc, #132]	; (80028a4 <HAL_DMA_Start_IT+0x228>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d009      	beq.n	8002838 <HAL_DMA_Start_IT+0x1bc>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <HAL_DMA_Start_IT+0x22c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d004      	beq.n	8002838 <HAL_DMA_Start_IT+0x1bc>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_DMA_Start_IT+0x230>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d101      	bne.n	800283c <HAL_DMA_Start_IT+0x1c0>
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <HAL_DMA_Start_IT+0x1c2>
 800283c:	2300      	movs	r3, #0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d036      	beq.n	80028b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 021e 	bic.w	r2, r3, #30
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0216 	orr.w	r2, r2, #22
 8002854:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d03e      	beq.n	80028dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 0208 	orr.w	r2, r2, #8
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	e035      	b.n	80028dc <HAL_DMA_Start_IT+0x260>
 8002870:	40020010 	.word	0x40020010
 8002874:	40020028 	.word	0x40020028
 8002878:	40020040 	.word	0x40020040
 800287c:	40020058 	.word	0x40020058
 8002880:	40020070 	.word	0x40020070
 8002884:	40020088 	.word	0x40020088
 8002888:	400200a0 	.word	0x400200a0
 800288c:	400200b8 	.word	0x400200b8
 8002890:	40020410 	.word	0x40020410
 8002894:	40020428 	.word	0x40020428
 8002898:	40020440 	.word	0x40020440
 800289c:	40020458 	.word	0x40020458
 80028a0:	40020470 	.word	0x40020470
 80028a4:	40020488 	.word	0x40020488
 80028a8:	400204a0 	.word	0x400204a0
 80028ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 020e 	bic.w	r2, r3, #14
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 020a 	orr.w	r2, r2, #10
 80028c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0204 	orr.w	r2, r2, #4
 80028da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a83      	ldr	r2, [pc, #524]	; (8002af0 <HAL_DMA_Start_IT+0x474>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d072      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a82      	ldr	r2, [pc, #520]	; (8002af4 <HAL_DMA_Start_IT+0x478>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d06d      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a80      	ldr	r2, [pc, #512]	; (8002af8 <HAL_DMA_Start_IT+0x47c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d068      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a7f      	ldr	r2, [pc, #508]	; (8002afc <HAL_DMA_Start_IT+0x480>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d063      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a7d      	ldr	r2, [pc, #500]	; (8002b00 <HAL_DMA_Start_IT+0x484>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d05e      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7c      	ldr	r2, [pc, #496]	; (8002b04 <HAL_DMA_Start_IT+0x488>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d059      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a7a      	ldr	r2, [pc, #488]	; (8002b08 <HAL_DMA_Start_IT+0x48c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d054      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a79      	ldr	r2, [pc, #484]	; (8002b0c <HAL_DMA_Start_IT+0x490>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d04f      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a77      	ldr	r2, [pc, #476]	; (8002b10 <HAL_DMA_Start_IT+0x494>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d04a      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a76      	ldr	r2, [pc, #472]	; (8002b14 <HAL_DMA_Start_IT+0x498>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d045      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a74      	ldr	r2, [pc, #464]	; (8002b18 <HAL_DMA_Start_IT+0x49c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d040      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a73      	ldr	r2, [pc, #460]	; (8002b1c <HAL_DMA_Start_IT+0x4a0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d03b      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a71      	ldr	r2, [pc, #452]	; (8002b20 <HAL_DMA_Start_IT+0x4a4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d036      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a70      	ldr	r2, [pc, #448]	; (8002b24 <HAL_DMA_Start_IT+0x4a8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d031      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a6e      	ldr	r2, [pc, #440]	; (8002b28 <HAL_DMA_Start_IT+0x4ac>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d02c      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6d      	ldr	r2, [pc, #436]	; (8002b2c <HAL_DMA_Start_IT+0x4b0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d027      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a6b      	ldr	r2, [pc, #428]	; (8002b30 <HAL_DMA_Start_IT+0x4b4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d022      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6a      	ldr	r2, [pc, #424]	; (8002b34 <HAL_DMA_Start_IT+0x4b8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d01d      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a68      	ldr	r2, [pc, #416]	; (8002b38 <HAL_DMA_Start_IT+0x4bc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d018      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a67      	ldr	r2, [pc, #412]	; (8002b3c <HAL_DMA_Start_IT+0x4c0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d013      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a65      	ldr	r2, [pc, #404]	; (8002b40 <HAL_DMA_Start_IT+0x4c4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00e      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a64      	ldr	r2, [pc, #400]	; (8002b44 <HAL_DMA_Start_IT+0x4c8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d009      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a62      	ldr	r2, [pc, #392]	; (8002b48 <HAL_DMA_Start_IT+0x4cc>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_DMA_Start_IT+0x350>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a61      	ldr	r2, [pc, #388]	; (8002b4c <HAL_DMA_Start_IT+0x4d0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d101      	bne.n	80029d0 <HAL_DMA_Start_IT+0x354>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <HAL_DMA_Start_IT+0x356>
 80029d0:	2300      	movs	r3, #0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d01a      	beq.n	8002a0c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a0a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a37      	ldr	r2, [pc, #220]	; (8002af0 <HAL_DMA_Start_IT+0x474>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d04a      	beq.n	8002aac <HAL_DMA_Start_IT+0x430>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a36      	ldr	r2, [pc, #216]	; (8002af4 <HAL_DMA_Start_IT+0x478>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d045      	beq.n	8002aac <HAL_DMA_Start_IT+0x430>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a34      	ldr	r2, [pc, #208]	; (8002af8 <HAL_DMA_Start_IT+0x47c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d040      	beq.n	8002aac <HAL_DMA_Start_IT+0x430>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a33      	ldr	r2, [pc, #204]	; (8002afc <HAL_DMA_Start_IT+0x480>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d03b      	beq.n	8002aac <HAL_DMA_Start_IT+0x430>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a31      	ldr	r2, [pc, #196]	; (8002b00 <HAL_DMA_Start_IT+0x484>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d036      	beq.n	8002aac <HAL_DMA_Start_IT+0x430>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a30      	ldr	r2, [pc, #192]	; (8002b04 <HAL_DMA_Start_IT+0x488>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d031      	beq.n	8002aac <HAL_DMA_Start_IT+0x430>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2e      	ldr	r2, [pc, #184]	; (8002b08 <HAL_DMA_Start_IT+0x48c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d02c      	beq.n	8002aac <HAL_DMA_Start_IT+0x430>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a2d      	ldr	r2, [pc, #180]	; (8002b0c <HAL_DMA_Start_IT+0x490>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d027      	beq.n	8002aac <HAL_DMA_Start_IT+0x430>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2b      	ldr	r2, [pc, #172]	; (8002b10 <HAL_DMA_Start_IT+0x494>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d022      	beq.n	8002aac <HAL_DMA_Start_IT+0x430>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a2a      	ldr	r2, [pc, #168]	; (8002b14 <HAL_DMA_Start_IT+0x498>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d01d      	beq.n	8002aac <HAL_DMA_Start_IT+0x430>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a28      	ldr	r2, [pc, #160]	; (8002b18 <HAL_DMA_Start_IT+0x49c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d018      	beq.n	8002aac <HAL_DMA_Start_IT+0x430>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a27      	ldr	r2, [pc, #156]	; (8002b1c <HAL_DMA_Start_IT+0x4a0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d013      	beq.n	8002aac <HAL_DMA_Start_IT+0x430>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a25      	ldr	r2, [pc, #148]	; (8002b20 <HAL_DMA_Start_IT+0x4a4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00e      	beq.n	8002aac <HAL_DMA_Start_IT+0x430>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a24      	ldr	r2, [pc, #144]	; (8002b24 <HAL_DMA_Start_IT+0x4a8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d009      	beq.n	8002aac <HAL_DMA_Start_IT+0x430>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a22      	ldr	r2, [pc, #136]	; (8002b28 <HAL_DMA_Start_IT+0x4ac>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d004      	beq.n	8002aac <HAL_DMA_Start_IT+0x430>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a21      	ldr	r2, [pc, #132]	; (8002b2c <HAL_DMA_Start_IT+0x4b0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d108      	bne.n	8002abe <HAL_DMA_Start_IT+0x442>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e012      	b.n	8002ae4 <HAL_DMA_Start_IT+0x468>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e009      	b.n	8002ae4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40020010 	.word	0x40020010
 8002af4:	40020028 	.word	0x40020028
 8002af8:	40020040 	.word	0x40020040
 8002afc:	40020058 	.word	0x40020058
 8002b00:	40020070 	.word	0x40020070
 8002b04:	40020088 	.word	0x40020088
 8002b08:	400200a0 	.word	0x400200a0
 8002b0c:	400200b8 	.word	0x400200b8
 8002b10:	40020410 	.word	0x40020410
 8002b14:	40020428 	.word	0x40020428
 8002b18:	40020440 	.word	0x40020440
 8002b1c:	40020458 	.word	0x40020458
 8002b20:	40020470 	.word	0x40020470
 8002b24:	40020488 	.word	0x40020488
 8002b28:	400204a0 	.word	0x400204a0
 8002b2c:	400204b8 	.word	0x400204b8
 8002b30:	58025408 	.word	0x58025408
 8002b34:	5802541c 	.word	0x5802541c
 8002b38:	58025430 	.word	0x58025430
 8002b3c:	58025444 	.word	0x58025444
 8002b40:	58025458 	.word	0x58025458
 8002b44:	5802546c 	.word	0x5802546c
 8002b48:	58025480 	.word	0x58025480
 8002b4c:	58025494 	.word	0x58025494

08002b50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b5c:	4b67      	ldr	r3, [pc, #412]	; (8002cfc <HAL_DMA_IRQHandler+0x1ac>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a67      	ldr	r2, [pc, #412]	; (8002d00 <HAL_DMA_IRQHandler+0x1b0>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	0a9b      	lsrs	r3, r3, #10
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b74:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a5f      	ldr	r2, [pc, #380]	; (8002d04 <HAL_DMA_IRQHandler+0x1b4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d04a      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a5d      	ldr	r2, [pc, #372]	; (8002d08 <HAL_DMA_IRQHandler+0x1b8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d045      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a5c      	ldr	r2, [pc, #368]	; (8002d0c <HAL_DMA_IRQHandler+0x1bc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d040      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a5a      	ldr	r2, [pc, #360]	; (8002d10 <HAL_DMA_IRQHandler+0x1c0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d03b      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a59      	ldr	r2, [pc, #356]	; (8002d14 <HAL_DMA_IRQHandler+0x1c4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d036      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a57      	ldr	r2, [pc, #348]	; (8002d18 <HAL_DMA_IRQHandler+0x1c8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d031      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a56      	ldr	r2, [pc, #344]	; (8002d1c <HAL_DMA_IRQHandler+0x1cc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d02c      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd2>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a54      	ldr	r2, [pc, #336]	; (8002d20 <HAL_DMA_IRQHandler+0x1d0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d027      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a53      	ldr	r2, [pc, #332]	; (8002d24 <HAL_DMA_IRQHandler+0x1d4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d022      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a51      	ldr	r2, [pc, #324]	; (8002d28 <HAL_DMA_IRQHandler+0x1d8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d01d      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a50      	ldr	r2, [pc, #320]	; (8002d2c <HAL_DMA_IRQHandler+0x1dc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d018      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a4e      	ldr	r2, [pc, #312]	; (8002d30 <HAL_DMA_IRQHandler+0x1e0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d013      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a4d      	ldr	r2, [pc, #308]	; (8002d34 <HAL_DMA_IRQHandler+0x1e4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00e      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd2>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a4b      	ldr	r2, [pc, #300]	; (8002d38 <HAL_DMA_IRQHandler+0x1e8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d009      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a4a      	ldr	r2, [pc, #296]	; (8002d3c <HAL_DMA_IRQHandler+0x1ec>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d004      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a48      	ldr	r2, [pc, #288]	; (8002d40 <HAL_DMA_IRQHandler+0x1f0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d101      	bne.n	8002c26 <HAL_DMA_IRQHandler+0xd6>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_DMA_IRQHandler+0xd8>
 8002c26:	2300      	movs	r3, #0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 842b 	beq.w	8003484 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	2208      	movs	r2, #8
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80a2 	beq.w	8002d88 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a2e      	ldr	r2, [pc, #184]	; (8002d04 <HAL_DMA_IRQHandler+0x1b4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d04a      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x194>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a2d      	ldr	r2, [pc, #180]	; (8002d08 <HAL_DMA_IRQHandler+0x1b8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d045      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x194>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2b      	ldr	r2, [pc, #172]	; (8002d0c <HAL_DMA_IRQHandler+0x1bc>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d040      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x194>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a2a      	ldr	r2, [pc, #168]	; (8002d10 <HAL_DMA_IRQHandler+0x1c0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d03b      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x194>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a28      	ldr	r2, [pc, #160]	; (8002d14 <HAL_DMA_IRQHandler+0x1c4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d036      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x194>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a27      	ldr	r2, [pc, #156]	; (8002d18 <HAL_DMA_IRQHandler+0x1c8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d031      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x194>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a25      	ldr	r2, [pc, #148]	; (8002d1c <HAL_DMA_IRQHandler+0x1cc>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d02c      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x194>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <HAL_DMA_IRQHandler+0x1d0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d027      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x194>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a22      	ldr	r2, [pc, #136]	; (8002d24 <HAL_DMA_IRQHandler+0x1d4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d022      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x194>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <HAL_DMA_IRQHandler+0x1d8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d01d      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x194>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1f      	ldr	r2, [pc, #124]	; (8002d2c <HAL_DMA_IRQHandler+0x1dc>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d018      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x194>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <HAL_DMA_IRQHandler+0x1e0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d013      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x194>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <HAL_DMA_IRQHandler+0x1e4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00e      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x194>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <HAL_DMA_IRQHandler+0x1e8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d009      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x194>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <HAL_DMA_IRQHandler+0x1ec>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d004      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x194>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <HAL_DMA_IRQHandler+0x1f0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d12f      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x1f4>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf14      	ite	ne
 8002cf2:	2301      	movne	r3, #1
 8002cf4:	2300      	moveq	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	e02e      	b.n	8002d58 <HAL_DMA_IRQHandler+0x208>
 8002cfa:	bf00      	nop
 8002cfc:	24000000 	.word	0x24000000
 8002d00:	1b4e81b5 	.word	0x1b4e81b5
 8002d04:	40020010 	.word	0x40020010
 8002d08:	40020028 	.word	0x40020028
 8002d0c:	40020040 	.word	0x40020040
 8002d10:	40020058 	.word	0x40020058
 8002d14:	40020070 	.word	0x40020070
 8002d18:	40020088 	.word	0x40020088
 8002d1c:	400200a0 	.word	0x400200a0
 8002d20:	400200b8 	.word	0x400200b8
 8002d24:	40020410 	.word	0x40020410
 8002d28:	40020428 	.word	0x40020428
 8002d2c:	40020440 	.word	0x40020440
 8002d30:	40020458 	.word	0x40020458
 8002d34:	40020470 	.word	0x40020470
 8002d38:	40020488 	.word	0x40020488
 8002d3c:	400204a0 	.word	0x400204a0
 8002d40:	400204b8 	.word	0x400204b8
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bf14      	ite	ne
 8002d52:	2301      	movne	r3, #1
 8002d54:	2300      	moveq	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d015      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0204 	bic.w	r2, r2, #4
 8002d6a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	2208      	movs	r2, #8
 8002d76:	409a      	lsls	r2, r3
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	fa22 f303 	lsr.w	r3, r2, r3
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d06e      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a69      	ldr	r2, [pc, #420]	; (8002f48 <HAL_DMA_IRQHandler+0x3f8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d04a      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2ee>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a67      	ldr	r2, [pc, #412]	; (8002f4c <HAL_DMA_IRQHandler+0x3fc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d045      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2ee>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a66      	ldr	r2, [pc, #408]	; (8002f50 <HAL_DMA_IRQHandler+0x400>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d040      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2ee>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a64      	ldr	r2, [pc, #400]	; (8002f54 <HAL_DMA_IRQHandler+0x404>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d03b      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2ee>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a63      	ldr	r2, [pc, #396]	; (8002f58 <HAL_DMA_IRQHandler+0x408>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d036      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2ee>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a61      	ldr	r2, [pc, #388]	; (8002f5c <HAL_DMA_IRQHandler+0x40c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d031      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2ee>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a60      	ldr	r2, [pc, #384]	; (8002f60 <HAL_DMA_IRQHandler+0x410>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d02c      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2ee>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a5e      	ldr	r2, [pc, #376]	; (8002f64 <HAL_DMA_IRQHandler+0x414>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d027      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2ee>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a5d      	ldr	r2, [pc, #372]	; (8002f68 <HAL_DMA_IRQHandler+0x418>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d022      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2ee>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a5b      	ldr	r2, [pc, #364]	; (8002f6c <HAL_DMA_IRQHandler+0x41c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d01d      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2ee>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a5a      	ldr	r2, [pc, #360]	; (8002f70 <HAL_DMA_IRQHandler+0x420>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d018      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2ee>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <HAL_DMA_IRQHandler+0x424>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2ee>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a57      	ldr	r2, [pc, #348]	; (8002f78 <HAL_DMA_IRQHandler+0x428>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00e      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2ee>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a55      	ldr	r2, [pc, #340]	; (8002f7c <HAL_DMA_IRQHandler+0x42c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d009      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2ee>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a54      	ldr	r2, [pc, #336]	; (8002f80 <HAL_DMA_IRQHandler+0x430>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d004      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x2ee>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a52      	ldr	r2, [pc, #328]	; (8002f84 <HAL_DMA_IRQHandler+0x434>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d10a      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x304>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e003      	b.n	8002e5c <HAL_DMA_IRQHandler+0x30c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00d      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	2201      	movs	r2, #1
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e74:	f043 0202 	orr.w	r2, r3, #2
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	2204      	movs	r2, #4
 8002e86:	409a      	lsls	r2, r3
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 808f 	beq.w	8002fb0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a2c      	ldr	r2, [pc, #176]	; (8002f48 <HAL_DMA_IRQHandler+0x3f8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d04a      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x3e2>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a2a      	ldr	r2, [pc, #168]	; (8002f4c <HAL_DMA_IRQHandler+0x3fc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d045      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x3e2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a29      	ldr	r2, [pc, #164]	; (8002f50 <HAL_DMA_IRQHandler+0x400>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d040      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x3e2>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_DMA_IRQHandler+0x404>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d03b      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x3e2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a26      	ldr	r2, [pc, #152]	; (8002f58 <HAL_DMA_IRQHandler+0x408>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d036      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x3e2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a24      	ldr	r2, [pc, #144]	; (8002f5c <HAL_DMA_IRQHandler+0x40c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d031      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x3e2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <HAL_DMA_IRQHandler+0x410>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d02c      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x3e2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <HAL_DMA_IRQHandler+0x414>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d027      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x3e2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a20      	ldr	r2, [pc, #128]	; (8002f68 <HAL_DMA_IRQHandler+0x418>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d022      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x3e2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <HAL_DMA_IRQHandler+0x41c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d01d      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x3e2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <HAL_DMA_IRQHandler+0x420>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d018      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x3e2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <HAL_DMA_IRQHandler+0x424>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x3e2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1a      	ldr	r2, [pc, #104]	; (8002f78 <HAL_DMA_IRQHandler+0x428>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00e      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x3e2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a18      	ldr	r2, [pc, #96]	; (8002f7c <HAL_DMA_IRQHandler+0x42c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d009      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x3e2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <HAL_DMA_IRQHandler+0x430>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d004      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x3e2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <HAL_DMA_IRQHandler+0x434>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d12a      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x438>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e023      	b.n	8002f90 <HAL_DMA_IRQHandler+0x440>
 8002f48:	40020010 	.word	0x40020010
 8002f4c:	40020028 	.word	0x40020028
 8002f50:	40020040 	.word	0x40020040
 8002f54:	40020058 	.word	0x40020058
 8002f58:	40020070 	.word	0x40020070
 8002f5c:	40020088 	.word	0x40020088
 8002f60:	400200a0 	.word	0x400200a0
 8002f64:	400200b8 	.word	0x400200b8
 8002f68:	40020410 	.word	0x40020410
 8002f6c:	40020428 	.word	0x40020428
 8002f70:	40020440 	.word	0x40020440
 8002f74:	40020458 	.word	0x40020458
 8002f78:	40020470 	.word	0x40020470
 8002f7c:	40020488 	.word	0x40020488
 8002f80:	400204a0 	.word	0x400204a0
 8002f84:	400204b8 	.word	0x400204b8
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00d      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa8:	f043 0204 	orr.w	r2, r3, #4
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	2210      	movs	r2, #16
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80a6 	beq.w	8003112 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a85      	ldr	r2, [pc, #532]	; (80031e0 <HAL_DMA_IRQHandler+0x690>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d04a      	beq.n	8003066 <HAL_DMA_IRQHandler+0x516>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a83      	ldr	r2, [pc, #524]	; (80031e4 <HAL_DMA_IRQHandler+0x694>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d045      	beq.n	8003066 <HAL_DMA_IRQHandler+0x516>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a82      	ldr	r2, [pc, #520]	; (80031e8 <HAL_DMA_IRQHandler+0x698>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d040      	beq.n	8003066 <HAL_DMA_IRQHandler+0x516>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a80      	ldr	r2, [pc, #512]	; (80031ec <HAL_DMA_IRQHandler+0x69c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d03b      	beq.n	8003066 <HAL_DMA_IRQHandler+0x516>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a7f      	ldr	r2, [pc, #508]	; (80031f0 <HAL_DMA_IRQHandler+0x6a0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d036      	beq.n	8003066 <HAL_DMA_IRQHandler+0x516>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a7d      	ldr	r2, [pc, #500]	; (80031f4 <HAL_DMA_IRQHandler+0x6a4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d031      	beq.n	8003066 <HAL_DMA_IRQHandler+0x516>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a7c      	ldr	r2, [pc, #496]	; (80031f8 <HAL_DMA_IRQHandler+0x6a8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d02c      	beq.n	8003066 <HAL_DMA_IRQHandler+0x516>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a7a      	ldr	r2, [pc, #488]	; (80031fc <HAL_DMA_IRQHandler+0x6ac>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d027      	beq.n	8003066 <HAL_DMA_IRQHandler+0x516>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a79      	ldr	r2, [pc, #484]	; (8003200 <HAL_DMA_IRQHandler+0x6b0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d022      	beq.n	8003066 <HAL_DMA_IRQHandler+0x516>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a77      	ldr	r2, [pc, #476]	; (8003204 <HAL_DMA_IRQHandler+0x6b4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d01d      	beq.n	8003066 <HAL_DMA_IRQHandler+0x516>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a76      	ldr	r2, [pc, #472]	; (8003208 <HAL_DMA_IRQHandler+0x6b8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d018      	beq.n	8003066 <HAL_DMA_IRQHandler+0x516>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a74      	ldr	r2, [pc, #464]	; (800320c <HAL_DMA_IRQHandler+0x6bc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <HAL_DMA_IRQHandler+0x516>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a73      	ldr	r2, [pc, #460]	; (8003210 <HAL_DMA_IRQHandler+0x6c0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00e      	beq.n	8003066 <HAL_DMA_IRQHandler+0x516>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a71      	ldr	r2, [pc, #452]	; (8003214 <HAL_DMA_IRQHandler+0x6c4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d009      	beq.n	8003066 <HAL_DMA_IRQHandler+0x516>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a70      	ldr	r2, [pc, #448]	; (8003218 <HAL_DMA_IRQHandler+0x6c8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d004      	beq.n	8003066 <HAL_DMA_IRQHandler+0x516>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6e      	ldr	r2, [pc, #440]	; (800321c <HAL_DMA_IRQHandler+0x6cc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d10a      	bne.n	800307c <HAL_DMA_IRQHandler+0x52c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf14      	ite	ne
 8003074:	2301      	movne	r3, #1
 8003076:	2300      	moveq	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e009      	b.n	8003090 <HAL_DMA_IRQHandler+0x540>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b00      	cmp	r3, #0
 8003088:	bf14      	ite	ne
 800308a:	2301      	movne	r3, #1
 800308c:	2300      	moveq	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d03e      	beq.n	8003112 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	2210      	movs	r2, #16
 800309e:	409a      	lsls	r2, r3
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d018      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d108      	bne.n	80030d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d024      	beq.n	8003112 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	4798      	blx	r3
 80030d0:	e01f      	b.n	8003112 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01b      	beq.n	8003112 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	4798      	blx	r3
 80030e2:	e016      	b.n	8003112 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d107      	bne.n	8003102 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0208 	bic.w	r2, r2, #8
 8003100:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	2220      	movs	r2, #32
 800311c:	409a      	lsls	r2, r3
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8110 	beq.w	8003348 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a2c      	ldr	r2, [pc, #176]	; (80031e0 <HAL_DMA_IRQHandler+0x690>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d04a      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x678>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a2b      	ldr	r2, [pc, #172]	; (80031e4 <HAL_DMA_IRQHandler+0x694>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d045      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x678>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a29      	ldr	r2, [pc, #164]	; (80031e8 <HAL_DMA_IRQHandler+0x698>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d040      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x678>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a28      	ldr	r2, [pc, #160]	; (80031ec <HAL_DMA_IRQHandler+0x69c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d03b      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x678>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a26      	ldr	r2, [pc, #152]	; (80031f0 <HAL_DMA_IRQHandler+0x6a0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d036      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x678>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a25      	ldr	r2, [pc, #148]	; (80031f4 <HAL_DMA_IRQHandler+0x6a4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d031      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x678>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a23      	ldr	r2, [pc, #140]	; (80031f8 <HAL_DMA_IRQHandler+0x6a8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d02c      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x678>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a22      	ldr	r2, [pc, #136]	; (80031fc <HAL_DMA_IRQHandler+0x6ac>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d027      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x678>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a20      	ldr	r2, [pc, #128]	; (8003200 <HAL_DMA_IRQHandler+0x6b0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d022      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x678>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1f      	ldr	r2, [pc, #124]	; (8003204 <HAL_DMA_IRQHandler+0x6b4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d01d      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x678>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1d      	ldr	r2, [pc, #116]	; (8003208 <HAL_DMA_IRQHandler+0x6b8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d018      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x678>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1c      	ldr	r2, [pc, #112]	; (800320c <HAL_DMA_IRQHandler+0x6bc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d013      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x678>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a1a      	ldr	r2, [pc, #104]	; (8003210 <HAL_DMA_IRQHandler+0x6c0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00e      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x678>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a19      	ldr	r2, [pc, #100]	; (8003214 <HAL_DMA_IRQHandler+0x6c4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d009      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x678>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a17      	ldr	r2, [pc, #92]	; (8003218 <HAL_DMA_IRQHandler+0x6c8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d004      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x678>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a16      	ldr	r2, [pc, #88]	; (800321c <HAL_DMA_IRQHandler+0x6cc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d12b      	bne.n	8003220 <HAL_DMA_IRQHandler+0x6d0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bf14      	ite	ne
 80031d6:	2301      	movne	r3, #1
 80031d8:	2300      	moveq	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	e02a      	b.n	8003234 <HAL_DMA_IRQHandler+0x6e4>
 80031de:	bf00      	nop
 80031e0:	40020010 	.word	0x40020010
 80031e4:	40020028 	.word	0x40020028
 80031e8:	40020040 	.word	0x40020040
 80031ec:	40020058 	.word	0x40020058
 80031f0:	40020070 	.word	0x40020070
 80031f4:	40020088 	.word	0x40020088
 80031f8:	400200a0 	.word	0x400200a0
 80031fc:	400200b8 	.word	0x400200b8
 8003200:	40020410 	.word	0x40020410
 8003204:	40020428 	.word	0x40020428
 8003208:	40020440 	.word	0x40020440
 800320c:	40020458 	.word	0x40020458
 8003210:	40020470 	.word	0x40020470
 8003214:	40020488 	.word	0x40020488
 8003218:	400204a0 	.word	0x400204a0
 800321c:	400204b8 	.word	0x400204b8
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	bf14      	ite	ne
 800322e:	2301      	movne	r3, #1
 8003230:	2300      	moveq	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8087 	beq.w	8003348 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	2220      	movs	r2, #32
 8003244:	409a      	lsls	r2, r3
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b04      	cmp	r3, #4
 8003254:	d139      	bne.n	80032ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0216 	bic.w	r2, r2, #22
 8003264:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003274:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <HAL_DMA_IRQHandler+0x736>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0208 	bic.w	r2, r2, #8
 8003294:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	f003 031f 	and.w	r3, r3, #31
 800329e:	223f      	movs	r2, #63	; 0x3f
 80032a0:	409a      	lsls	r2, r3
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 834a 	beq.w	8003954 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	4798      	blx	r3
          }
          return;
 80032c8:	e344      	b.n	8003954 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d018      	beq.n	800330a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d108      	bne.n	80032f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d02c      	beq.n	8003348 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	4798      	blx	r3
 80032f6:	e027      	b.n	8003348 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d023      	beq.n	8003348 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	4798      	blx	r3
 8003308:	e01e      	b.n	8003348 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10f      	bne.n	8003338 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0210 	bic.w	r2, r2, #16
 8003326:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8306 	beq.w	800395e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8088 	beq.w	8003470 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2204      	movs	r2, #4
 8003364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a7a      	ldr	r2, [pc, #488]	; (8003558 <HAL_DMA_IRQHandler+0xa08>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d04a      	beq.n	8003408 <HAL_DMA_IRQHandler+0x8b8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a79      	ldr	r2, [pc, #484]	; (800355c <HAL_DMA_IRQHandler+0xa0c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d045      	beq.n	8003408 <HAL_DMA_IRQHandler+0x8b8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a77      	ldr	r2, [pc, #476]	; (8003560 <HAL_DMA_IRQHandler+0xa10>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d040      	beq.n	8003408 <HAL_DMA_IRQHandler+0x8b8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a76      	ldr	r2, [pc, #472]	; (8003564 <HAL_DMA_IRQHandler+0xa14>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d03b      	beq.n	8003408 <HAL_DMA_IRQHandler+0x8b8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a74      	ldr	r2, [pc, #464]	; (8003568 <HAL_DMA_IRQHandler+0xa18>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d036      	beq.n	8003408 <HAL_DMA_IRQHandler+0x8b8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a73      	ldr	r2, [pc, #460]	; (800356c <HAL_DMA_IRQHandler+0xa1c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d031      	beq.n	8003408 <HAL_DMA_IRQHandler+0x8b8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a71      	ldr	r2, [pc, #452]	; (8003570 <HAL_DMA_IRQHandler+0xa20>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d02c      	beq.n	8003408 <HAL_DMA_IRQHandler+0x8b8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a70      	ldr	r2, [pc, #448]	; (8003574 <HAL_DMA_IRQHandler+0xa24>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d027      	beq.n	8003408 <HAL_DMA_IRQHandler+0x8b8>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a6e      	ldr	r2, [pc, #440]	; (8003578 <HAL_DMA_IRQHandler+0xa28>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d022      	beq.n	8003408 <HAL_DMA_IRQHandler+0x8b8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a6d      	ldr	r2, [pc, #436]	; (800357c <HAL_DMA_IRQHandler+0xa2c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d01d      	beq.n	8003408 <HAL_DMA_IRQHandler+0x8b8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6b      	ldr	r2, [pc, #428]	; (8003580 <HAL_DMA_IRQHandler+0xa30>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d018      	beq.n	8003408 <HAL_DMA_IRQHandler+0x8b8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a6a      	ldr	r2, [pc, #424]	; (8003584 <HAL_DMA_IRQHandler+0xa34>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <HAL_DMA_IRQHandler+0x8b8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a68      	ldr	r2, [pc, #416]	; (8003588 <HAL_DMA_IRQHandler+0xa38>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00e      	beq.n	8003408 <HAL_DMA_IRQHandler+0x8b8>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a67      	ldr	r2, [pc, #412]	; (800358c <HAL_DMA_IRQHandler+0xa3c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d009      	beq.n	8003408 <HAL_DMA_IRQHandler+0x8b8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a65      	ldr	r2, [pc, #404]	; (8003590 <HAL_DMA_IRQHandler+0xa40>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_DMA_IRQHandler+0x8b8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a64      	ldr	r2, [pc, #400]	; (8003594 <HAL_DMA_IRQHandler+0xa44>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d108      	bne.n	800341a <HAL_DMA_IRQHandler+0x8ca>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e007      	b.n	800342a <HAL_DMA_IRQHandler+0x8da>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3301      	adds	r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003432:	429a      	cmp	r2, r3
 8003434:	d307      	bcc.n	8003446 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f2      	bne.n	800342a <HAL_DMA_IRQHandler+0x8da>
 8003444:	e000      	b.n	8003448 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003446:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d004      	beq.n	8003460 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2203      	movs	r2, #3
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800345e:	e003      	b.n	8003468 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8272 	beq.w	800395e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
 8003482:	e26c      	b.n	800395e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a43      	ldr	r2, [pc, #268]	; (8003598 <HAL_DMA_IRQHandler+0xa48>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d022      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x984>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a42      	ldr	r2, [pc, #264]	; (800359c <HAL_DMA_IRQHandler+0xa4c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d01d      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x984>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a40      	ldr	r2, [pc, #256]	; (80035a0 <HAL_DMA_IRQHandler+0xa50>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d018      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x984>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a3f      	ldr	r2, [pc, #252]	; (80035a4 <HAL_DMA_IRQHandler+0xa54>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x984>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a3d      	ldr	r2, [pc, #244]	; (80035a8 <HAL_DMA_IRQHandler+0xa58>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00e      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x984>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a3c      	ldr	r2, [pc, #240]	; (80035ac <HAL_DMA_IRQHandler+0xa5c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x984>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a3a      	ldr	r2, [pc, #232]	; (80035b0 <HAL_DMA_IRQHandler+0xa60>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x984>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a39      	ldr	r2, [pc, #228]	; (80035b4 <HAL_DMA_IRQHandler+0xa64>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d101      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x988>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <HAL_DMA_IRQHandler+0x98a>
 80034d8:	2300      	movs	r3, #0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 823f 	beq.w	800395e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	2204      	movs	r2, #4
 80034f2:	409a      	lsls	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80cd 	beq.w	8003698 <HAL_DMA_IRQHandler+0xb48>
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80c7 	beq.w	8003698 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	2204      	movs	r2, #4
 8003514:	409a      	lsls	r2, r3
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d049      	beq.n	80035b8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8210 	beq.w	8003958 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003540:	e20a      	b.n	8003958 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8206 	beq.w	8003958 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003554:	e200      	b.n	8003958 <HAL_DMA_IRQHandler+0xe08>
 8003556:	bf00      	nop
 8003558:	40020010 	.word	0x40020010
 800355c:	40020028 	.word	0x40020028
 8003560:	40020040 	.word	0x40020040
 8003564:	40020058 	.word	0x40020058
 8003568:	40020070 	.word	0x40020070
 800356c:	40020088 	.word	0x40020088
 8003570:	400200a0 	.word	0x400200a0
 8003574:	400200b8 	.word	0x400200b8
 8003578:	40020410 	.word	0x40020410
 800357c:	40020428 	.word	0x40020428
 8003580:	40020440 	.word	0x40020440
 8003584:	40020458 	.word	0x40020458
 8003588:	40020470 	.word	0x40020470
 800358c:	40020488 	.word	0x40020488
 8003590:	400204a0 	.word	0x400204a0
 8003594:	400204b8 	.word	0x400204b8
 8003598:	58025408 	.word	0x58025408
 800359c:	5802541c 	.word	0x5802541c
 80035a0:	58025430 	.word	0x58025430
 80035a4:	58025444 	.word	0x58025444
 80035a8:	58025458 	.word	0x58025458
 80035ac:	5802546c 	.word	0x5802546c
 80035b0:	58025480 	.word	0x58025480
 80035b4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d160      	bne.n	8003684 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a7f      	ldr	r2, [pc, #508]	; (80037c4 <HAL_DMA_IRQHandler+0xc74>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d04a      	beq.n	8003662 <HAL_DMA_IRQHandler+0xb12>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a7d      	ldr	r2, [pc, #500]	; (80037c8 <HAL_DMA_IRQHandler+0xc78>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d045      	beq.n	8003662 <HAL_DMA_IRQHandler+0xb12>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a7c      	ldr	r2, [pc, #496]	; (80037cc <HAL_DMA_IRQHandler+0xc7c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d040      	beq.n	8003662 <HAL_DMA_IRQHandler+0xb12>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a7a      	ldr	r2, [pc, #488]	; (80037d0 <HAL_DMA_IRQHandler+0xc80>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d03b      	beq.n	8003662 <HAL_DMA_IRQHandler+0xb12>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a79      	ldr	r2, [pc, #484]	; (80037d4 <HAL_DMA_IRQHandler+0xc84>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d036      	beq.n	8003662 <HAL_DMA_IRQHandler+0xb12>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a77      	ldr	r2, [pc, #476]	; (80037d8 <HAL_DMA_IRQHandler+0xc88>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d031      	beq.n	8003662 <HAL_DMA_IRQHandler+0xb12>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a76      	ldr	r2, [pc, #472]	; (80037dc <HAL_DMA_IRQHandler+0xc8c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d02c      	beq.n	8003662 <HAL_DMA_IRQHandler+0xb12>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a74      	ldr	r2, [pc, #464]	; (80037e0 <HAL_DMA_IRQHandler+0xc90>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d027      	beq.n	8003662 <HAL_DMA_IRQHandler+0xb12>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a73      	ldr	r2, [pc, #460]	; (80037e4 <HAL_DMA_IRQHandler+0xc94>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d022      	beq.n	8003662 <HAL_DMA_IRQHandler+0xb12>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a71      	ldr	r2, [pc, #452]	; (80037e8 <HAL_DMA_IRQHandler+0xc98>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d01d      	beq.n	8003662 <HAL_DMA_IRQHandler+0xb12>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a70      	ldr	r2, [pc, #448]	; (80037ec <HAL_DMA_IRQHandler+0xc9c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d018      	beq.n	8003662 <HAL_DMA_IRQHandler+0xb12>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a6e      	ldr	r2, [pc, #440]	; (80037f0 <HAL_DMA_IRQHandler+0xca0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d013      	beq.n	8003662 <HAL_DMA_IRQHandler+0xb12>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6d      	ldr	r2, [pc, #436]	; (80037f4 <HAL_DMA_IRQHandler+0xca4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00e      	beq.n	8003662 <HAL_DMA_IRQHandler+0xb12>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a6b      	ldr	r2, [pc, #428]	; (80037f8 <HAL_DMA_IRQHandler+0xca8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d009      	beq.n	8003662 <HAL_DMA_IRQHandler+0xb12>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6a      	ldr	r2, [pc, #424]	; (80037fc <HAL_DMA_IRQHandler+0xcac>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d004      	beq.n	8003662 <HAL_DMA_IRQHandler+0xb12>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a68      	ldr	r2, [pc, #416]	; (8003800 <HAL_DMA_IRQHandler+0xcb0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d108      	bne.n	8003674 <HAL_DMA_IRQHandler+0xb24>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0208 	bic.w	r2, r2, #8
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	e007      	b.n	8003684 <HAL_DMA_IRQHandler+0xb34>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0204 	bic.w	r2, r2, #4
 8003682:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8165 	beq.w	8003958 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003696:	e15f      	b.n	8003958 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	2202      	movs	r2, #2
 80036a2:	409a      	lsls	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80c5 	beq.w	8003838 <HAL_DMA_IRQHandler+0xce8>
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80bf 	beq.w	8003838 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2202      	movs	r2, #2
 80036c4:	409a      	lsls	r2, r3
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d018      	beq.n	8003706 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 813a 	beq.w	800395c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036f0:	e134      	b.n	800395c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 8130 	beq.w	800395c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003704:	e12a      	b.n	800395c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	f040 8089 	bne.w	8003824 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a2b      	ldr	r2, [pc, #172]	; (80037c4 <HAL_DMA_IRQHandler+0xc74>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d04a      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xc62>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a29      	ldr	r2, [pc, #164]	; (80037c8 <HAL_DMA_IRQHandler+0xc78>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d045      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xc62>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a28      	ldr	r2, [pc, #160]	; (80037cc <HAL_DMA_IRQHandler+0xc7c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d040      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xc62>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a26      	ldr	r2, [pc, #152]	; (80037d0 <HAL_DMA_IRQHandler+0xc80>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d03b      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xc62>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a25      	ldr	r2, [pc, #148]	; (80037d4 <HAL_DMA_IRQHandler+0xc84>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d036      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xc62>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a23      	ldr	r2, [pc, #140]	; (80037d8 <HAL_DMA_IRQHandler+0xc88>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d031      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xc62>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a22      	ldr	r2, [pc, #136]	; (80037dc <HAL_DMA_IRQHandler+0xc8c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d02c      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xc62>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a20      	ldr	r2, [pc, #128]	; (80037e0 <HAL_DMA_IRQHandler+0xc90>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d027      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xc62>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1f      	ldr	r2, [pc, #124]	; (80037e4 <HAL_DMA_IRQHandler+0xc94>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d022      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xc62>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <HAL_DMA_IRQHandler+0xc98>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d01d      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xc62>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1c      	ldr	r2, [pc, #112]	; (80037ec <HAL_DMA_IRQHandler+0xc9c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d018      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xc62>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1a      	ldr	r2, [pc, #104]	; (80037f0 <HAL_DMA_IRQHandler+0xca0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d013      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xc62>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a19      	ldr	r2, [pc, #100]	; (80037f4 <HAL_DMA_IRQHandler+0xca4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00e      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xc62>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a17      	ldr	r2, [pc, #92]	; (80037f8 <HAL_DMA_IRQHandler+0xca8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d009      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xc62>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a16      	ldr	r2, [pc, #88]	; (80037fc <HAL_DMA_IRQHandler+0xcac>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d004      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xc62>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a14      	ldr	r2, [pc, #80]	; (8003800 <HAL_DMA_IRQHandler+0xcb0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d128      	bne.n	8003804 <HAL_DMA_IRQHandler+0xcb4>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0214 	bic.w	r2, r2, #20
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e027      	b.n	8003814 <HAL_DMA_IRQHandler+0xcc4>
 80037c4:	40020010 	.word	0x40020010
 80037c8:	40020028 	.word	0x40020028
 80037cc:	40020040 	.word	0x40020040
 80037d0:	40020058 	.word	0x40020058
 80037d4:	40020070 	.word	0x40020070
 80037d8:	40020088 	.word	0x40020088
 80037dc:	400200a0 	.word	0x400200a0
 80037e0:	400200b8 	.word	0x400200b8
 80037e4:	40020410 	.word	0x40020410
 80037e8:	40020428 	.word	0x40020428
 80037ec:	40020440 	.word	0x40020440
 80037f0:	40020458 	.word	0x40020458
 80037f4:	40020470 	.word	0x40020470
 80037f8:	40020488 	.word	0x40020488
 80037fc:	400204a0 	.word	0x400204a0
 8003800:	400204b8 	.word	0x400204b8
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 020a 	bic.w	r2, r2, #10
 8003812:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 8097 	beq.w	800395c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003836:	e091      	b.n	800395c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	2208      	movs	r2, #8
 8003842:	409a      	lsls	r2, r3
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	4013      	ands	r3, r2
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8088 	beq.w	800395e <HAL_DMA_IRQHandler+0xe0e>
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8082 	beq.w	800395e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a41      	ldr	r2, [pc, #260]	; (8003964 <HAL_DMA_IRQHandler+0xe14>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d04a      	beq.n	80038fa <HAL_DMA_IRQHandler+0xdaa>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a3f      	ldr	r2, [pc, #252]	; (8003968 <HAL_DMA_IRQHandler+0xe18>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d045      	beq.n	80038fa <HAL_DMA_IRQHandler+0xdaa>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a3e      	ldr	r2, [pc, #248]	; (800396c <HAL_DMA_IRQHandler+0xe1c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d040      	beq.n	80038fa <HAL_DMA_IRQHandler+0xdaa>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a3c      	ldr	r2, [pc, #240]	; (8003970 <HAL_DMA_IRQHandler+0xe20>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d03b      	beq.n	80038fa <HAL_DMA_IRQHandler+0xdaa>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a3b      	ldr	r2, [pc, #236]	; (8003974 <HAL_DMA_IRQHandler+0xe24>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d036      	beq.n	80038fa <HAL_DMA_IRQHandler+0xdaa>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a39      	ldr	r2, [pc, #228]	; (8003978 <HAL_DMA_IRQHandler+0xe28>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d031      	beq.n	80038fa <HAL_DMA_IRQHandler+0xdaa>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a38      	ldr	r2, [pc, #224]	; (800397c <HAL_DMA_IRQHandler+0xe2c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d02c      	beq.n	80038fa <HAL_DMA_IRQHandler+0xdaa>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a36      	ldr	r2, [pc, #216]	; (8003980 <HAL_DMA_IRQHandler+0xe30>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d027      	beq.n	80038fa <HAL_DMA_IRQHandler+0xdaa>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a35      	ldr	r2, [pc, #212]	; (8003984 <HAL_DMA_IRQHandler+0xe34>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d022      	beq.n	80038fa <HAL_DMA_IRQHandler+0xdaa>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a33      	ldr	r2, [pc, #204]	; (8003988 <HAL_DMA_IRQHandler+0xe38>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01d      	beq.n	80038fa <HAL_DMA_IRQHandler+0xdaa>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a32      	ldr	r2, [pc, #200]	; (800398c <HAL_DMA_IRQHandler+0xe3c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d018      	beq.n	80038fa <HAL_DMA_IRQHandler+0xdaa>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a30      	ldr	r2, [pc, #192]	; (8003990 <HAL_DMA_IRQHandler+0xe40>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <HAL_DMA_IRQHandler+0xdaa>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a2f      	ldr	r2, [pc, #188]	; (8003994 <HAL_DMA_IRQHandler+0xe44>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00e      	beq.n	80038fa <HAL_DMA_IRQHandler+0xdaa>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a2d      	ldr	r2, [pc, #180]	; (8003998 <HAL_DMA_IRQHandler+0xe48>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d009      	beq.n	80038fa <HAL_DMA_IRQHandler+0xdaa>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a2c      	ldr	r2, [pc, #176]	; (800399c <HAL_DMA_IRQHandler+0xe4c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_DMA_IRQHandler+0xdaa>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <HAL_DMA_IRQHandler+0xe50>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d108      	bne.n	800390c <HAL_DMA_IRQHandler+0xdbc>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 021c 	bic.w	r2, r2, #28
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	e007      	b.n	800391c <HAL_DMA_IRQHandler+0xdcc>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 020e 	bic.w	r2, r2, #14
 800391a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	2201      	movs	r2, #1
 8003926:	409a      	lsls	r2, r3
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	4798      	blx	r3
 8003952:	e004      	b.n	800395e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003954:	bf00      	nop
 8003956:	e002      	b.n	800395e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003958:	bf00      	nop
 800395a:	e000      	b.n	800395e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800395c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800395e:	3728      	adds	r7, #40	; 0x28
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40020010 	.word	0x40020010
 8003968:	40020028 	.word	0x40020028
 800396c:	40020040 	.word	0x40020040
 8003970:	40020058 	.word	0x40020058
 8003974:	40020070 	.word	0x40020070
 8003978:	40020088 	.word	0x40020088
 800397c:	400200a0 	.word	0x400200a0
 8003980:	400200b8 	.word	0x400200b8
 8003984:	40020410 	.word	0x40020410
 8003988:	40020428 	.word	0x40020428
 800398c:	40020440 	.word	0x40020440
 8003990:	40020458 	.word	0x40020458
 8003994:	40020470 	.word	0x40020470
 8003998:	40020488 	.word	0x40020488
 800399c:	400204a0 	.word	0x400204a0
 80039a0:	400204b8 	.word	0x400204b8

080039a4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a7f      	ldr	r2, [pc, #508]	; (8003bd8 <DMA_SetConfig+0x21c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d072      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a7d      	ldr	r2, [pc, #500]	; (8003bdc <DMA_SetConfig+0x220>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d06d      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a7c      	ldr	r2, [pc, #496]	; (8003be0 <DMA_SetConfig+0x224>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d068      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a7a      	ldr	r2, [pc, #488]	; (8003be4 <DMA_SetConfig+0x228>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d063      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a79      	ldr	r2, [pc, #484]	; (8003be8 <DMA_SetConfig+0x22c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d05e      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a77      	ldr	r2, [pc, #476]	; (8003bec <DMA_SetConfig+0x230>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d059      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a76      	ldr	r2, [pc, #472]	; (8003bf0 <DMA_SetConfig+0x234>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d054      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a74      	ldr	r2, [pc, #464]	; (8003bf4 <DMA_SetConfig+0x238>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d04f      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a73      	ldr	r2, [pc, #460]	; (8003bf8 <DMA_SetConfig+0x23c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d04a      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a71      	ldr	r2, [pc, #452]	; (8003bfc <DMA_SetConfig+0x240>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d045      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a70      	ldr	r2, [pc, #448]	; (8003c00 <DMA_SetConfig+0x244>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d040      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a6e      	ldr	r2, [pc, #440]	; (8003c04 <DMA_SetConfig+0x248>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d03b      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a6d      	ldr	r2, [pc, #436]	; (8003c08 <DMA_SetConfig+0x24c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d036      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a6b      	ldr	r2, [pc, #428]	; (8003c0c <DMA_SetConfig+0x250>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d031      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a6a      	ldr	r2, [pc, #424]	; (8003c10 <DMA_SetConfig+0x254>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d02c      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a68      	ldr	r2, [pc, #416]	; (8003c14 <DMA_SetConfig+0x258>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d027      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a67      	ldr	r2, [pc, #412]	; (8003c18 <DMA_SetConfig+0x25c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d022      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a65      	ldr	r2, [pc, #404]	; (8003c1c <DMA_SetConfig+0x260>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d01d      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a64      	ldr	r2, [pc, #400]	; (8003c20 <DMA_SetConfig+0x264>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d018      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a62      	ldr	r2, [pc, #392]	; (8003c24 <DMA_SetConfig+0x268>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d013      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a61      	ldr	r2, [pc, #388]	; (8003c28 <DMA_SetConfig+0x26c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00e      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a5f      	ldr	r2, [pc, #380]	; (8003c2c <DMA_SetConfig+0x270>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d009      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a5e      	ldr	r2, [pc, #376]	; (8003c30 <DMA_SetConfig+0x274>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d004      	beq.n	8003ac6 <DMA_SetConfig+0x10a>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a5c      	ldr	r2, [pc, #368]	; (8003c34 <DMA_SetConfig+0x278>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d101      	bne.n	8003aca <DMA_SetConfig+0x10e>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <DMA_SetConfig+0x110>
 8003aca:	2300      	movs	r3, #0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00d      	beq.n	8003aec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ad8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003aea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a39      	ldr	r2, [pc, #228]	; (8003bd8 <DMA_SetConfig+0x21c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d04a      	beq.n	8003b8c <DMA_SetConfig+0x1d0>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a38      	ldr	r2, [pc, #224]	; (8003bdc <DMA_SetConfig+0x220>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d045      	beq.n	8003b8c <DMA_SetConfig+0x1d0>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a36      	ldr	r2, [pc, #216]	; (8003be0 <DMA_SetConfig+0x224>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d040      	beq.n	8003b8c <DMA_SetConfig+0x1d0>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a35      	ldr	r2, [pc, #212]	; (8003be4 <DMA_SetConfig+0x228>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d03b      	beq.n	8003b8c <DMA_SetConfig+0x1d0>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a33      	ldr	r2, [pc, #204]	; (8003be8 <DMA_SetConfig+0x22c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d036      	beq.n	8003b8c <DMA_SetConfig+0x1d0>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a32      	ldr	r2, [pc, #200]	; (8003bec <DMA_SetConfig+0x230>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d031      	beq.n	8003b8c <DMA_SetConfig+0x1d0>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a30      	ldr	r2, [pc, #192]	; (8003bf0 <DMA_SetConfig+0x234>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d02c      	beq.n	8003b8c <DMA_SetConfig+0x1d0>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2f      	ldr	r2, [pc, #188]	; (8003bf4 <DMA_SetConfig+0x238>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d027      	beq.n	8003b8c <DMA_SetConfig+0x1d0>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a2d      	ldr	r2, [pc, #180]	; (8003bf8 <DMA_SetConfig+0x23c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d022      	beq.n	8003b8c <DMA_SetConfig+0x1d0>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2c      	ldr	r2, [pc, #176]	; (8003bfc <DMA_SetConfig+0x240>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d01d      	beq.n	8003b8c <DMA_SetConfig+0x1d0>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2a      	ldr	r2, [pc, #168]	; (8003c00 <DMA_SetConfig+0x244>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d018      	beq.n	8003b8c <DMA_SetConfig+0x1d0>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <DMA_SetConfig+0x248>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <DMA_SetConfig+0x1d0>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a27      	ldr	r2, [pc, #156]	; (8003c08 <DMA_SetConfig+0x24c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00e      	beq.n	8003b8c <DMA_SetConfig+0x1d0>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <DMA_SetConfig+0x250>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d009      	beq.n	8003b8c <DMA_SetConfig+0x1d0>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a24      	ldr	r2, [pc, #144]	; (8003c10 <DMA_SetConfig+0x254>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <DMA_SetConfig+0x1d0>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a23      	ldr	r2, [pc, #140]	; (8003c14 <DMA_SetConfig+0x258>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <DMA_SetConfig+0x1d4>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <DMA_SetConfig+0x1d6>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d059      	beq.n	8003c4a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	223f      	movs	r2, #63	; 0x3f
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bb4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	d138      	bne.n	8003c38 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003bd6:	e086      	b.n	8003ce6 <DMA_SetConfig+0x32a>
 8003bd8:	40020010 	.word	0x40020010
 8003bdc:	40020028 	.word	0x40020028
 8003be0:	40020040 	.word	0x40020040
 8003be4:	40020058 	.word	0x40020058
 8003be8:	40020070 	.word	0x40020070
 8003bec:	40020088 	.word	0x40020088
 8003bf0:	400200a0 	.word	0x400200a0
 8003bf4:	400200b8 	.word	0x400200b8
 8003bf8:	40020410 	.word	0x40020410
 8003bfc:	40020428 	.word	0x40020428
 8003c00:	40020440 	.word	0x40020440
 8003c04:	40020458 	.word	0x40020458
 8003c08:	40020470 	.word	0x40020470
 8003c0c:	40020488 	.word	0x40020488
 8003c10:	400204a0 	.word	0x400204a0
 8003c14:	400204b8 	.word	0x400204b8
 8003c18:	58025408 	.word	0x58025408
 8003c1c:	5802541c 	.word	0x5802541c
 8003c20:	58025430 	.word	0x58025430
 8003c24:	58025444 	.word	0x58025444
 8003c28:	58025458 	.word	0x58025458
 8003c2c:	5802546c 	.word	0x5802546c
 8003c30:	58025480 	.word	0x58025480
 8003c34:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	60da      	str	r2, [r3, #12]
}
 8003c48:	e04d      	b.n	8003ce6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a29      	ldr	r2, [pc, #164]	; (8003cf4 <DMA_SetConfig+0x338>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d022      	beq.n	8003c9a <DMA_SetConfig+0x2de>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a27      	ldr	r2, [pc, #156]	; (8003cf8 <DMA_SetConfig+0x33c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01d      	beq.n	8003c9a <DMA_SetConfig+0x2de>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a26      	ldr	r2, [pc, #152]	; (8003cfc <DMA_SetConfig+0x340>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d018      	beq.n	8003c9a <DMA_SetConfig+0x2de>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a24      	ldr	r2, [pc, #144]	; (8003d00 <DMA_SetConfig+0x344>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <DMA_SetConfig+0x2de>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a23      	ldr	r2, [pc, #140]	; (8003d04 <DMA_SetConfig+0x348>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <DMA_SetConfig+0x2de>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a21      	ldr	r2, [pc, #132]	; (8003d08 <DMA_SetConfig+0x34c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <DMA_SetConfig+0x2de>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a20      	ldr	r2, [pc, #128]	; (8003d0c <DMA_SetConfig+0x350>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <DMA_SetConfig+0x2de>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1e      	ldr	r2, [pc, #120]	; (8003d10 <DMA_SetConfig+0x354>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d101      	bne.n	8003c9e <DMA_SetConfig+0x2e2>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <DMA_SetConfig+0x2e4>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d020      	beq.n	8003ce6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	2201      	movs	r2, #1
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b40      	cmp	r3, #64	; 0x40
 8003cc2:	d108      	bne.n	8003cd6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	60da      	str	r2, [r3, #12]
}
 8003cd4:	e007      	b.n	8003ce6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	60da      	str	r2, [r3, #12]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	58025408 	.word	0x58025408
 8003cf8:	5802541c 	.word	0x5802541c
 8003cfc:	58025430 	.word	0x58025430
 8003d00:	58025444 	.word	0x58025444
 8003d04:	58025458 	.word	0x58025458
 8003d08:	5802546c 	.word	0x5802546c
 8003d0c:	58025480 	.word	0x58025480
 8003d10:	58025494 	.word	0x58025494

08003d14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a42      	ldr	r2, [pc, #264]	; (8003e2c <DMA_CalcBaseAndBitshift+0x118>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d04a      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a41      	ldr	r2, [pc, #260]	; (8003e30 <DMA_CalcBaseAndBitshift+0x11c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d045      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a3f      	ldr	r2, [pc, #252]	; (8003e34 <DMA_CalcBaseAndBitshift+0x120>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d040      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a3e      	ldr	r2, [pc, #248]	; (8003e38 <DMA_CalcBaseAndBitshift+0x124>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d03b      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a3c      	ldr	r2, [pc, #240]	; (8003e3c <DMA_CalcBaseAndBitshift+0x128>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d036      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a3b      	ldr	r2, [pc, #236]	; (8003e40 <DMA_CalcBaseAndBitshift+0x12c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d031      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a39      	ldr	r2, [pc, #228]	; (8003e44 <DMA_CalcBaseAndBitshift+0x130>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02c      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a38      	ldr	r2, [pc, #224]	; (8003e48 <DMA_CalcBaseAndBitshift+0x134>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d027      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a36      	ldr	r2, [pc, #216]	; (8003e4c <DMA_CalcBaseAndBitshift+0x138>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d022      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a35      	ldr	r2, [pc, #212]	; (8003e50 <DMA_CalcBaseAndBitshift+0x13c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d01d      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a33      	ldr	r2, [pc, #204]	; (8003e54 <DMA_CalcBaseAndBitshift+0x140>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d018      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a32      	ldr	r2, [pc, #200]	; (8003e58 <DMA_CalcBaseAndBitshift+0x144>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d013      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a30      	ldr	r2, [pc, #192]	; (8003e5c <DMA_CalcBaseAndBitshift+0x148>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00e      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a2f      	ldr	r2, [pc, #188]	; (8003e60 <DMA_CalcBaseAndBitshift+0x14c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d009      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2d      	ldr	r2, [pc, #180]	; (8003e64 <DMA_CalcBaseAndBitshift+0x150>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a2c      	ldr	r2, [pc, #176]	; (8003e68 <DMA_CalcBaseAndBitshift+0x154>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d101      	bne.n	8003dc0 <DMA_CalcBaseAndBitshift+0xac>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <DMA_CalcBaseAndBitshift+0xae>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d024      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	3b10      	subs	r3, #16
 8003dce:	4a27      	ldr	r2, [pc, #156]	; (8003e6c <DMA_CalcBaseAndBitshift+0x158>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	4a24      	ldr	r2, [pc, #144]	; (8003e70 <DMA_CalcBaseAndBitshift+0x15c>)
 8003de0:	5cd3      	ldrb	r3, [r2, r3]
 8003de2:	461a      	mov	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d908      	bls.n	8003e00 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	4b1f      	ldr	r3, [pc, #124]	; (8003e74 <DMA_CalcBaseAndBitshift+0x160>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	1d1a      	adds	r2, r3, #4
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	659a      	str	r2, [r3, #88]	; 0x58
 8003dfe:	e00d      	b.n	8003e1c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b1b      	ldr	r3, [pc, #108]	; (8003e74 <DMA_CalcBaseAndBitshift+0x160>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e0e:	e005      	b.n	8003e1c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40020010 	.word	0x40020010
 8003e30:	40020028 	.word	0x40020028
 8003e34:	40020040 	.word	0x40020040
 8003e38:	40020058 	.word	0x40020058
 8003e3c:	40020070 	.word	0x40020070
 8003e40:	40020088 	.word	0x40020088
 8003e44:	400200a0 	.word	0x400200a0
 8003e48:	400200b8 	.word	0x400200b8
 8003e4c:	40020410 	.word	0x40020410
 8003e50:	40020428 	.word	0x40020428
 8003e54:	40020440 	.word	0x40020440
 8003e58:	40020458 	.word	0x40020458
 8003e5c:	40020470 	.word	0x40020470
 8003e60:	40020488 	.word	0x40020488
 8003e64:	400204a0 	.word	0x400204a0
 8003e68:	400204b8 	.word	0x400204b8
 8003e6c:	aaaaaaab 	.word	0xaaaaaaab
 8003e70:	08010b74 	.word	0x08010b74
 8003e74:	fffffc00 	.word	0xfffffc00

08003e78 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d120      	bne.n	8003ece <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d858      	bhi.n	8003f46 <DMA_CheckFifoParam+0xce>
 8003e94:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <DMA_CheckFifoParam+0x24>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003ead 	.word	0x08003ead
 8003ea0:	08003ebf 	.word	0x08003ebf
 8003ea4:	08003ead 	.word	0x08003ead
 8003ea8:	08003f47 	.word	0x08003f47
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d048      	beq.n	8003f4a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ebc:	e045      	b.n	8003f4a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ec6:	d142      	bne.n	8003f4e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ecc:	e03f      	b.n	8003f4e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed6:	d123      	bne.n	8003f20 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d838      	bhi.n	8003f52 <DMA_CheckFifoParam+0xda>
 8003ee0:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <DMA_CheckFifoParam+0x70>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003ef9 	.word	0x08003ef9
 8003eec:	08003eff 	.word	0x08003eff
 8003ef0:	08003ef9 	.word	0x08003ef9
 8003ef4:	08003f11 	.word	0x08003f11
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
        break;
 8003efc:	e030      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d025      	beq.n	8003f56 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f0e:	e022      	b.n	8003f56 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f18:	d11f      	bne.n	8003f5a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f1e:	e01c      	b.n	8003f5a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d902      	bls.n	8003f2e <DMA_CheckFifoParam+0xb6>
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d003      	beq.n	8003f34 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f2c:	e018      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
        break;
 8003f32:	e015      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00e      	beq.n	8003f5e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
    break;
 8003f44:	e00b      	b.n	8003f5e <DMA_CheckFifoParam+0xe6>
        break;
 8003f46:	bf00      	nop
 8003f48:	e00a      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
        break;
 8003f4a:	bf00      	nop
 8003f4c:	e008      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
        break;
 8003f4e:	bf00      	nop
 8003f50:	e006      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
        break;
 8003f52:	bf00      	nop
 8003f54:	e004      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
        break;
 8003f56:	bf00      	nop
 8003f58:	e002      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
        break;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
    break;
 8003f5e:	bf00      	nop
    }
  }

  return status;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop

08003f70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a38      	ldr	r2, [pc, #224]	; (8004064 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d022      	beq.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a36      	ldr	r2, [pc, #216]	; (8004068 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01d      	beq.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a35      	ldr	r2, [pc, #212]	; (800406c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d018      	beq.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a33      	ldr	r2, [pc, #204]	; (8004070 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d013      	beq.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a32      	ldr	r2, [pc, #200]	; (8004074 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00e      	beq.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a30      	ldr	r2, [pc, #192]	; (8004078 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d009      	beq.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2f      	ldr	r2, [pc, #188]	; (800407c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d004      	beq.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a2d      	ldr	r2, [pc, #180]	; (8004080 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d101      	bne.n	8003fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01a      	beq.n	800400e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	3b08      	subs	r3, #8
 8003fe0:	4a28      	ldr	r2, [pc, #160]	; (8004084 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4b26      	ldr	r3, [pc, #152]	; (8004088 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a24      	ldr	r2, [pc, #144]	; (800408c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003ffc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	2201      	movs	r2, #1
 8004006:	409a      	lsls	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800400c:	e024      	b.n	8004058 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	3b10      	subs	r3, #16
 8004016:	4a1e      	ldr	r2, [pc, #120]	; (8004090 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4a1c      	ldr	r2, [pc, #112]	; (8004094 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d806      	bhi.n	8004036 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4a1b      	ldr	r2, [pc, #108]	; (8004098 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d902      	bls.n	8004036 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3308      	adds	r3, #8
 8004034:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4b18      	ldr	r3, [pc, #96]	; (800409c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	461a      	mov	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a16      	ldr	r2, [pc, #88]	; (80040a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004048:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2201      	movs	r2, #1
 8004052:	409a      	lsls	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	58025408 	.word	0x58025408
 8004068:	5802541c 	.word	0x5802541c
 800406c:	58025430 	.word	0x58025430
 8004070:	58025444 	.word	0x58025444
 8004074:	58025458 	.word	0x58025458
 8004078:	5802546c 	.word	0x5802546c
 800407c:	58025480 	.word	0x58025480
 8004080:	58025494 	.word	0x58025494
 8004084:	cccccccd 	.word	0xcccccccd
 8004088:	16009600 	.word	0x16009600
 800408c:	58025880 	.word	0x58025880
 8004090:	aaaaaaab 	.word	0xaaaaaaab
 8004094:	400204b8 	.word	0x400204b8
 8004098:	4002040f 	.word	0x4002040f
 800409c:	10008200 	.word	0x10008200
 80040a0:	40020880 	.word	0x40020880

080040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d04a      	beq.n	8004150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d847      	bhi.n	8004150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a25      	ldr	r2, [pc, #148]	; (800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d022      	beq.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a24      	ldr	r2, [pc, #144]	; (8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d01d      	beq.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a22      	ldr	r2, [pc, #136]	; (8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d018      	beq.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a21      	ldr	r2, [pc, #132]	; (8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d013      	beq.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1f      	ldr	r2, [pc, #124]	; (800416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00e      	beq.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d009      	beq.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d004      	beq.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1b      	ldr	r2, [pc, #108]	; (8004178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d101      	bne.n	8004114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004114:	2300      	movs	r3, #0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4b17      	ldr	r3, [pc, #92]	; (800417c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	461a      	mov	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a15      	ldr	r2, [pc, #84]	; (8004180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800412c:	671a      	str	r2, [r3, #112]	; 0x70
 800412e:	e009      	b.n	8004144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4b14      	ldr	r3, [pc, #80]	; (8004184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	461a      	mov	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a11      	ldr	r2, [pc, #68]	; (8004188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004142:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3b01      	subs	r3, #1
 8004148:	2201      	movs	r2, #1
 800414a:	409a      	lsls	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	58025408 	.word	0x58025408
 8004160:	5802541c 	.word	0x5802541c
 8004164:	58025430 	.word	0x58025430
 8004168:	58025444 	.word	0x58025444
 800416c:	58025458 	.word	0x58025458
 8004170:	5802546c 	.word	0x5802546c
 8004174:	58025480 	.word	0x58025480
 8004178:	58025494 	.word	0x58025494
 800417c:	1600963f 	.word	0x1600963f
 8004180:	58025940 	.word	0x58025940
 8004184:	1000823f 	.word	0x1000823f
 8004188:	40020940 	.word	0x40020940

0800418c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800418c:	b480      	push	{r7}
 800418e:	b089      	sub	sp, #36	; 0x24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800419a:	4b86      	ldr	r3, [pc, #536]	; (80043b4 <HAL_GPIO_Init+0x228>)
 800419c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800419e:	e18c      	b.n	80044ba <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	2101      	movs	r1, #1
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	4013      	ands	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 817e 	beq.w	80044b4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d005      	beq.n	80041d0 <HAL_GPIO_Init+0x44>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d130      	bne.n	8004232 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	2203      	movs	r2, #3
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004206:	2201      	movs	r2, #1
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43db      	mvns	r3, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4013      	ands	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	f003 0201 	and.w	r2, r3, #1
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b03      	cmp	r3, #3
 800423c:	d017      	beq.n	800426e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	2203      	movs	r2, #3
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4013      	ands	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4313      	orrs	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d123      	bne.n	80042c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	08da      	lsrs	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3208      	adds	r2, #8
 8004282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	220f      	movs	r2, #15
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	08da      	lsrs	r2, r3, #3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3208      	adds	r2, #8
 80042bc:	69b9      	ldr	r1, [r7, #24]
 80042be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	2203      	movs	r2, #3
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43db      	mvns	r3, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4013      	ands	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 0203 	and.w	r2, r3, #3
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 80d8 	beq.w	80044b4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004304:	4b2c      	ldr	r3, [pc, #176]	; (80043b8 <HAL_GPIO_Init+0x22c>)
 8004306:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800430a:	4a2b      	ldr	r2, [pc, #172]	; (80043b8 <HAL_GPIO_Init+0x22c>)
 800430c:	f043 0302 	orr.w	r3, r3, #2
 8004310:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004314:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <HAL_GPIO_Init+0x22c>)
 8004316:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004322:	4a26      	ldr	r2, [pc, #152]	; (80043bc <HAL_GPIO_Init+0x230>)
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	3302      	adds	r3, #2
 800432a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	220f      	movs	r2, #15
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <HAL_GPIO_Init+0x234>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d04a      	beq.n	80043e4 <HAL_GPIO_Init+0x258>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a1c      	ldr	r2, [pc, #112]	; (80043c4 <HAL_GPIO_Init+0x238>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d02b      	beq.n	80043ae <HAL_GPIO_Init+0x222>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a1b      	ldr	r2, [pc, #108]	; (80043c8 <HAL_GPIO_Init+0x23c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d025      	beq.n	80043aa <HAL_GPIO_Init+0x21e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a1a      	ldr	r2, [pc, #104]	; (80043cc <HAL_GPIO_Init+0x240>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d01f      	beq.n	80043a6 <HAL_GPIO_Init+0x21a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a19      	ldr	r2, [pc, #100]	; (80043d0 <HAL_GPIO_Init+0x244>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d019      	beq.n	80043a2 <HAL_GPIO_Init+0x216>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <HAL_GPIO_Init+0x248>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d013      	beq.n	800439e <HAL_GPIO_Init+0x212>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <HAL_GPIO_Init+0x24c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00d      	beq.n	800439a <HAL_GPIO_Init+0x20e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a16      	ldr	r2, [pc, #88]	; (80043dc <HAL_GPIO_Init+0x250>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <HAL_GPIO_Init+0x20a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a15      	ldr	r2, [pc, #84]	; (80043e0 <HAL_GPIO_Init+0x254>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d101      	bne.n	8004392 <HAL_GPIO_Init+0x206>
 800438e:	2309      	movs	r3, #9
 8004390:	e029      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 8004392:	230a      	movs	r3, #10
 8004394:	e027      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 8004396:	2307      	movs	r3, #7
 8004398:	e025      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 800439a:	2306      	movs	r3, #6
 800439c:	e023      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 800439e:	2305      	movs	r3, #5
 80043a0:	e021      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 80043a2:	2304      	movs	r3, #4
 80043a4:	e01f      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 80043a6:	2303      	movs	r3, #3
 80043a8:	e01d      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e01b      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e019      	b.n	80043e6 <HAL_GPIO_Init+0x25a>
 80043b2:	bf00      	nop
 80043b4:	58000080 	.word	0x58000080
 80043b8:	58024400 	.word	0x58024400
 80043bc:	58000400 	.word	0x58000400
 80043c0:	58020000 	.word	0x58020000
 80043c4:	58020400 	.word	0x58020400
 80043c8:	58020800 	.word	0x58020800
 80043cc:	58020c00 	.word	0x58020c00
 80043d0:	58021000 	.word	0x58021000
 80043d4:	58021400 	.word	0x58021400
 80043d8:	58021800 	.word	0x58021800
 80043dc:	58021c00 	.word	0x58021c00
 80043e0:	58022400 	.word	0x58022400
 80043e4:	2300      	movs	r3, #0
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	f002 0203 	and.w	r2, r2, #3
 80043ec:	0092      	lsls	r2, r2, #2
 80043ee:	4093      	lsls	r3, r2
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043f6:	4938      	ldr	r1, [pc, #224]	; (80044d8 <HAL_GPIO_Init+0x34c>)
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	089b      	lsrs	r3, r3, #2
 80043fc:	3302      	adds	r3, #2
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	43db      	mvns	r3, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4013      	ands	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800442a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	43db      	mvns	r3, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4013      	ands	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	3301      	adds	r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f47f ae6b 	bne.w	80041a0 <HAL_GPIO_Init+0x14>
  }
}
 80044ca:	bf00      	nop
 80044cc:	bf00      	nop
 80044ce:	3724      	adds	r7, #36	; 0x24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	58000400 	.word	0x58000400

080044dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	807b      	strh	r3, [r7, #2]
 80044e8:	4613      	mov	r3, r2
 80044ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044ec:	787b      	ldrb	r3, [r7, #1]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044f2:	887a      	ldrh	r2, [r7, #2]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80044f8:	e003      	b.n	8004502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044fa:	887b      	ldrh	r3, [r7, #2]
 80044fc:	041a      	lsls	r2, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	619a      	str	r2, [r3, #24]
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af02      	add	r7, sp, #8
 8004516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800451c:	f7fd fc16 	bl	8001d4c <HAL_GetTick>
 8004520:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d102      	bne.n	800452e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
 800452c:	e0a5      	b.n	800467a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 809e 	bne.w	800467a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fc fee2 	bl	8001308 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004544:	f241 3188 	movw	r1, #5000	; 0x1388
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f89d 	bl	8004688 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	4b4b      	ldr	r3, [pc, #300]	; (8004684 <HAL_OSPI_Init+0x174>)
 8004556:	4013      	ands	r3, r2
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	68d1      	ldr	r1, [r2, #12]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6912      	ldr	r2, [r2, #16]
 8004560:	3a01      	subs	r2, #1
 8004562:	0412      	lsls	r2, r2, #16
 8004564:	4311      	orrs	r1, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6952      	ldr	r2, [r2, #20]
 800456a:	3a01      	subs	r2, #1
 800456c:	0212      	lsls	r2, r2, #8
 800456e:	4311      	orrs	r1, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004574:	4311      	orrs	r1, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	69d2      	ldr	r2, [r2, #28]
 800457a:	4311      	orrs	r1, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	430b      	orrs	r3, r1
 8004582:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1a      	ldr	r2, [r3, #32]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045b4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	021a      	lsls	r2, r3, #8
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2200      	movs	r2, #0
 80045da:	2120      	movs	r1, #32
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fd4b 	bl	8005078 <OSPI_WaitFlagStateUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d146      	bne.n	800467a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	1e5a      	subs	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004622:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0201 	orr.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d107      	bne.n	8004662 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0202 	orr.w	r2, r2, #2
 8004660:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800466a:	d103      	bne.n	8004674 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	651a      	str	r2, [r3, #80]	; 0x50
 8004672:	e002      	b.n	800467a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800467a:	7bfb      	ldrb	r3, [r7, #15]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	f8e0f8f4 	.word	0xf8e0f8f4

08004688 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b094      	sub	sp, #80	; 0x50
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a9d      	ldr	r2, [pc, #628]	; (800493c <HAL_OSPIM_Config+0x294>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d105      	bne.n	80046d6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80046d4:	e004      	b.n	80046e0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80046d6:	2301      	movs	r3, #1
 80046d8:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80046e0:	2300      	movs	r3, #0
 80046e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80046e6:	e01d      	b.n	8004724 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80046e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046ec:	3301      	adds	r3, #1
 80046ee:	b2d8      	uxtb	r0, r3
 80046f0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80046f4:	f107 0114 	add.w	r1, r7, #20
 80046f8:	4613      	mov	r3, r2
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	4413      	add	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	440b      	add	r3, r1
 8004702:	4619      	mov	r1, r3
 8004704:	f000 fcf0 	bl	80050e8 <OSPIM_GetConfig>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2208      	movs	r2, #8
 8004718:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800471a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800471e:	3301      	adds	r3, #1
 8004720:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004724:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004728:	2b01      	cmp	r3, #1
 800472a:	d9dd      	bls.n	80046e8 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800472c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004730:	2b00      	cmp	r3, #0
 8004732:	f040 8495 	bne.w	8005060 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004736:	4b81      	ldr	r3, [pc, #516]	; (800493c <HAL_OSPIM_Config+0x294>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00b      	beq.n	800475a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004742:	4b7e      	ldr	r3, [pc, #504]	; (800493c <HAL_OSPIM_Config+0x294>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7d      	ldr	r2, [pc, #500]	; (800493c <HAL_OSPIM_Config+0x294>)
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800474e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800475a:	4b79      	ldr	r3, [pc, #484]	; (8004940 <HAL_OSPIM_Config+0x298>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00b      	beq.n	800477e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004766:	4b76      	ldr	r3, [pc, #472]	; (8004940 <HAL_OSPIM_Config+0x298>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a75      	ldr	r2, [pc, #468]	; (8004940 <HAL_OSPIM_Config+0x298>)
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004772:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004776:	f043 0302 	orr.w	r3, r3, #2
 800477a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800477e:	4971      	ldr	r1, [pc, #452]	; (8004944 <HAL_OSPIM_Config+0x29c>)
 8004780:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004782:	4613      	mov	r3, r2
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	4413      	add	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	3350      	adds	r3, #80	; 0x50
 800478c:	443b      	add	r3, r7
 800478e:	3b34      	subs	r3, #52	; 0x34
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3b01      	subs	r3, #1
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	6859      	ldr	r1, [r3, #4]
 800479a:	486a      	ldr	r0, [pc, #424]	; (8004944 <HAL_OSPIM_Config+0x29c>)
 800479c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800479e:	4613      	mov	r3, r2
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	4413      	add	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	3350      	adds	r3, #80	; 0x50
 80047a8:	443b      	add	r3, r7
 80047aa:	3b34      	subs	r3, #52	; 0x34
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4403      	add	r3, r0
 80047b8:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80047ba:	4b62      	ldr	r3, [pc, #392]	; (8004944 <HAL_OSPIM_Config+0x29c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80c0 	beq.w	8004948 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80047c8:	4b5e      	ldr	r3, [pc, #376]	; (8004944 <HAL_OSPIM_Config+0x29c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a5d      	ldr	r2, [pc, #372]	; (8004944 <HAL_OSPIM_Config+0x29c>)
 80047ce:	f023 0301 	bic.w	r3, r3, #1
 80047d2:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80047d4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80047d8:	2b01      	cmp	r3, #1
 80047da:	f040 8162 	bne.w	8004aa2 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80047de:	4959      	ldr	r1, [pc, #356]	; (8004944 <HAL_OSPIM_Config+0x29c>)
 80047e0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80047e4:	4613      	mov	r3, r2
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	4413      	add	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	3350      	adds	r3, #80	; 0x50
 80047ee:	443b      	add	r3, r7
 80047f0:	3b3c      	subs	r3, #60	; 0x3c
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	6859      	ldr	r1, [r3, #4]
 80047fc:	4851      	ldr	r0, [pc, #324]	; (8004944 <HAL_OSPIM_Config+0x29c>)
 80047fe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004802:	4613      	mov	r3, r2
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4413      	add	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	3350      	adds	r3, #80	; 0x50
 800480c:	443b      	add	r3, r7
 800480e:	3b3c      	subs	r3, #60	; 0x3c
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3b01      	subs	r3, #1
 8004814:	f041 0202 	orr.w	r2, r1, #2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4403      	add	r3, r0
 800481c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800481e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004822:	4613      	mov	r3, r2
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	4413      	add	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	3350      	adds	r3, #80	; 0x50
 800482c:	443b      	add	r3, r7
 800482e:	3b38      	subs	r3, #56	; 0x38
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01f      	beq.n	8004876 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8004836:	4943      	ldr	r1, [pc, #268]	; (8004944 <HAL_OSPIM_Config+0x29c>)
 8004838:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800483c:	4613      	mov	r3, r2
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	4413      	add	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	3350      	adds	r3, #80	; 0x50
 8004846:	443b      	add	r3, r7
 8004848:	3b38      	subs	r3, #56	; 0x38
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3b01      	subs	r3, #1
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	483b      	ldr	r0, [pc, #236]	; (8004944 <HAL_OSPIM_Config+0x29c>)
 8004856:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800485a:	4613      	mov	r3, r2
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	4413      	add	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	3350      	adds	r3, #80	; 0x50
 8004864:	443b      	add	r3, r7
 8004866:	3b38      	subs	r3, #56	; 0x38
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3b01      	subs	r3, #1
 800486c:	f041 0220 	orr.w	r2, r1, #32
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4403      	add	r3, r0
 8004874:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004876:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800487a:	4613      	mov	r3, r2
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	4413      	add	r3, r2
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	3350      	adds	r3, #80	; 0x50
 8004884:	443b      	add	r3, r7
 8004886:	3b30      	subs	r3, #48	; 0x30
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d023      	beq.n	80048d6 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800488e:	492d      	ldr	r1, [pc, #180]	; (8004944 <HAL_OSPIM_Config+0x29c>)
 8004890:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004894:	4613      	mov	r3, r2
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	4413      	add	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	3350      	adds	r3, #80	; 0x50
 800489e:	443b      	add	r3, r7
 80048a0:	3b30      	subs	r3, #48	; 0x30
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	6859      	ldr	r1, [r3, #4]
 80048b0:	4824      	ldr	r0, [pc, #144]	; (8004944 <HAL_OSPIM_Config+0x29c>)
 80048b2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80048b6:	4613      	mov	r3, r2
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	4413      	add	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	3350      	adds	r3, #80	; 0x50
 80048c0:	443b      	add	r3, r7
 80048c2:	3b30      	subs	r3, #48	; 0x30
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4403      	add	r3, r0
 80048d4:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80048d6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	3350      	adds	r3, #80	; 0x50
 80048e4:	443b      	add	r3, r7
 80048e6:	3b2c      	subs	r3, #44	; 0x2c
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80d9 	beq.w	8004aa2 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80048f0:	4914      	ldr	r1, [pc, #80]	; (8004944 <HAL_OSPIM_Config+0x29c>)
 80048f2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80048f6:	4613      	mov	r3, r2
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	4413      	add	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	3350      	adds	r3, #80	; 0x50
 8004900:	443b      	add	r3, r7
 8004902:	3b2c      	subs	r3, #44	; 0x2c
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3b01      	subs	r3, #1
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	6859      	ldr	r1, [r3, #4]
 8004912:	480c      	ldr	r0, [pc, #48]	; (8004944 <HAL_OSPIM_Config+0x29c>)
 8004914:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004918:	4613      	mov	r3, r2
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	4413      	add	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	3350      	adds	r3, #80	; 0x50
 8004922:	443b      	add	r3, r7
 8004924:	3b2c      	subs	r3, #44	; 0x2c
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3b01      	subs	r3, #1
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4403      	add	r3, r0
 8004936:	605a      	str	r2, [r3, #4]
 8004938:	e0b3      	b.n	8004aa2 <HAL_OSPIM_Config+0x3fa>
 800493a:	bf00      	nop
 800493c:	52005000 	.word	0x52005000
 8004940:	5200a000 	.word	0x5200a000
 8004944:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8004948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800494a:	4613      	mov	r3, r2
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	4413      	add	r3, r2
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	3350      	adds	r3, #80	; 0x50
 8004954:	443b      	add	r3, r7
 8004956:	3b3c      	subs	r3, #60	; 0x3c
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80a1 	beq.w	8004aa2 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004960:	4993      	ldr	r1, [pc, #588]	; (8004bb0 <HAL_OSPIM_Config+0x508>)
 8004962:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004964:	4613      	mov	r3, r2
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	4413      	add	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	3350      	adds	r3, #80	; 0x50
 800496e:	443b      	add	r3, r7
 8004970:	3b3c      	subs	r3, #60	; 0x3c
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3b01      	subs	r3, #1
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	6859      	ldr	r1, [r3, #4]
 800497c:	488c      	ldr	r0, [pc, #560]	; (8004bb0 <HAL_OSPIM_Config+0x508>)
 800497e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004980:	4613      	mov	r3, r2
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	4413      	add	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	3350      	adds	r3, #80	; 0x50
 800498a:	443b      	add	r3, r7
 800498c:	3b3c      	subs	r3, #60	; 0x3c
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3b01      	subs	r3, #1
 8004992:	f021 0201 	bic.w	r2, r1, #1
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4403      	add	r3, r0
 800499a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800499c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800499e:	4613      	mov	r3, r2
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	4413      	add	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	3350      	adds	r3, #80	; 0x50
 80049a8:	443b      	add	r3, r7
 80049aa:	3b38      	subs	r3, #56	; 0x38
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01d      	beq.n	80049ee <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80049b2:	497f      	ldr	r1, [pc, #508]	; (8004bb0 <HAL_OSPIM_Config+0x508>)
 80049b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049b6:	4613      	mov	r3, r2
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	4413      	add	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	3350      	adds	r3, #80	; 0x50
 80049c0:	443b      	add	r3, r7
 80049c2:	3b38      	subs	r3, #56	; 0x38
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	6859      	ldr	r1, [r3, #4]
 80049ce:	4878      	ldr	r0, [pc, #480]	; (8004bb0 <HAL_OSPIM_Config+0x508>)
 80049d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049d2:	4613      	mov	r3, r2
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	4413      	add	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	3350      	adds	r3, #80	; 0x50
 80049dc:	443b      	add	r3, r7
 80049de:	3b38      	subs	r3, #56	; 0x38
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	f021 0210 	bic.w	r2, r1, #16
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4403      	add	r3, r0
 80049ec:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80049ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049f0:	4613      	mov	r3, r2
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	4413      	add	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	3350      	adds	r3, #80	; 0x50
 80049fa:	443b      	add	r3, r7
 80049fc:	3b30      	subs	r3, #48	; 0x30
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d021      	beq.n	8004a48 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004a04:	496a      	ldr	r1, [pc, #424]	; (8004bb0 <HAL_OSPIM_Config+0x508>)
 8004a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a08:	4613      	mov	r3, r2
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	4413      	add	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3350      	adds	r3, #80	; 0x50
 8004a12:	443b      	add	r3, r7
 8004a14:	3b30      	subs	r3, #48	; 0x30
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	6859      	ldr	r1, [r3, #4]
 8004a24:	4862      	ldr	r0, [pc, #392]	; (8004bb0 <HAL_OSPIM_Config+0x508>)
 8004a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a28:	4613      	mov	r3, r2
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	4413      	add	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	3350      	adds	r3, #80	; 0x50
 8004a32:	443b      	add	r3, r7
 8004a34:	3b30      	subs	r3, #48	; 0x30
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4403      	add	r3, r0
 8004a46:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004a48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4413      	add	r3, r2
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	3350      	adds	r3, #80	; 0x50
 8004a54:	443b      	add	r3, r7
 8004a56:	3b2c      	subs	r3, #44	; 0x2c
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d021      	beq.n	8004aa2 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004a5e:	4954      	ldr	r1, [pc, #336]	; (8004bb0 <HAL_OSPIM_Config+0x508>)
 8004a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a62:	4613      	mov	r3, r2
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	4413      	add	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	3350      	adds	r3, #80	; 0x50
 8004a6c:	443b      	add	r3, r7
 8004a6e:	3b2c      	subs	r3, #44	; 0x2c
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	6859      	ldr	r1, [r3, #4]
 8004a7e:	484c      	ldr	r0, [pc, #304]	; (8004bb0 <HAL_OSPIM_Config+0x508>)
 8004a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a82:	4613      	mov	r3, r2
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	4413      	add	r3, r2
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	3350      	adds	r3, #80	; 0x50
 8004a8c:	443b      	add	r3, r7
 8004a8e:	3b2c      	subs	r3, #44	; 0x2c
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4403      	add	r3, r0
 8004aa0:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	6819      	ldr	r1, [r3, #0]
 8004aa6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004aaa:	4613      	mov	r3, r2
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	4413      	add	r3, r2
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	3350      	adds	r3, #80	; 0x50
 8004ab4:	443b      	add	r3, r7
 8004ab6:	3b3c      	subs	r3, #60	; 0x3c
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4299      	cmp	r1, r3
 8004abc:	d038      	beq.n	8004b30 <HAL_OSPIM_Config+0x488>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	6859      	ldr	r1, [r3, #4]
 8004ac2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	4413      	add	r3, r2
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	3350      	adds	r3, #80	; 0x50
 8004ad0:	443b      	add	r3, r7
 8004ad2:	3b38      	subs	r3, #56	; 0x38
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4299      	cmp	r1, r3
 8004ad8:	d02a      	beq.n	8004b30 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	6899      	ldr	r1, [r3, #8]
 8004ade:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4413      	add	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	3350      	adds	r3, #80	; 0x50
 8004aec:	443b      	add	r3, r7
 8004aee:	3b34      	subs	r3, #52	; 0x34
 8004af0:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004af2:	4299      	cmp	r1, r3
 8004af4:	d01c      	beq.n	8004b30 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	68d9      	ldr	r1, [r3, #12]
 8004afa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004afe:	4613      	mov	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	4413      	add	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	3350      	adds	r3, #80	; 0x50
 8004b08:	443b      	add	r3, r7
 8004b0a:	3b30      	subs	r3, #48	; 0x30
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4299      	cmp	r1, r3
 8004b10:	d00e      	beq.n	8004b30 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	6919      	ldr	r1, [r3, #16]
 8004b16:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	4413      	add	r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	3350      	adds	r3, #80	; 0x50
 8004b24:	443b      	add	r3, r7
 8004b26:	3b2c      	subs	r3, #44	; 0x2c
 8004b28:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004b2a:	4299      	cmp	r1, r3
 8004b2c:	f040 810e 	bne.w	8004d4c <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	6819      	ldr	r1, [r3, #0]
 8004b34:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b38:	4613      	mov	r3, r2
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	3350      	adds	r3, #80	; 0x50
 8004b42:	443b      	add	r3, r7
 8004b44:	3b3c      	subs	r3, #60	; 0x3c
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4299      	cmp	r1, r3
 8004b4a:	d133      	bne.n	8004bb4 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	6859      	ldr	r1, [r3, #4]
 8004b50:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b54:	4613      	mov	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	3350      	adds	r3, #80	; 0x50
 8004b5e:	443b      	add	r3, r7
 8004b60:	3b38      	subs	r3, #56	; 0x38
 8004b62:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004b64:	4299      	cmp	r1, r3
 8004b66:	d125      	bne.n	8004bb4 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	68d9      	ldr	r1, [r3, #12]
 8004b6c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b70:	4613      	mov	r3, r2
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	4413      	add	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	3350      	adds	r3, #80	; 0x50
 8004b7a:	443b      	add	r3, r7
 8004b7c:	3b30      	subs	r3, #48	; 0x30
 8004b7e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004b80:	4299      	cmp	r1, r3
 8004b82:	d117      	bne.n	8004bb4 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	6919      	ldr	r1, [r3, #16]
 8004b88:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	4413      	add	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	3350      	adds	r3, #80	; 0x50
 8004b96:	443b      	add	r3, r7
 8004b98:	3b2c      	subs	r3, #44	; 0x2c
 8004b9a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004b9c:	4299      	cmp	r1, r3
 8004b9e:	d109      	bne.n	8004bb4 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004ba0:	4b03      	ldr	r3, [pc, #12]	; (8004bb0 <HAL_OSPIM_Config+0x508>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a02      	ldr	r2, [pc, #8]	; (8004bb0 <HAL_OSPIM_Config+0x508>)
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	6013      	str	r3, [r2, #0]
 8004bac:	e0ce      	b.n	8004d4c <HAL_OSPIM_Config+0x6a4>
 8004bae:	bf00      	nop
 8004bb0:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004bb4:	49bb      	ldr	r1, [pc, #748]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004bb6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004bba:	4613      	mov	r3, r2
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	4413      	add	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	3350      	adds	r3, #80	; 0x50
 8004bc4:	443b      	add	r3, r7
 8004bc6:	3b3c      	subs	r3, #60	; 0x3c
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	6859      	ldr	r1, [r3, #4]
 8004bd2:	48b4      	ldr	r0, [pc, #720]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004bd4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004bd8:	4613      	mov	r3, r2
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	4413      	add	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	3350      	adds	r3, #80	; 0x50
 8004be2:	443b      	add	r3, r7
 8004be4:	3b3c      	subs	r3, #60	; 0x3c
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	f021 0201 	bic.w	r2, r1, #1
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4403      	add	r3, r0
 8004bf2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004bf4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	4413      	add	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	3350      	adds	r3, #80	; 0x50
 8004c02:	443b      	add	r3, r7
 8004c04:	3b38      	subs	r3, #56	; 0x38
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01f      	beq.n	8004c4c <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004c0c:	49a5      	ldr	r1, [pc, #660]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004c0e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004c12:	4613      	mov	r3, r2
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	4413      	add	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	3350      	adds	r3, #80	; 0x50
 8004c1c:	443b      	add	r3, r7
 8004c1e:	3b38      	subs	r3, #56	; 0x38
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	6859      	ldr	r1, [r3, #4]
 8004c2a:	489e      	ldr	r0, [pc, #632]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004c2c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004c30:	4613      	mov	r3, r2
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	4413      	add	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	3350      	adds	r3, #80	; 0x50
 8004c3a:	443b      	add	r3, r7
 8004c3c:	3b38      	subs	r3, #56	; 0x38
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	f021 0210 	bic.w	r2, r1, #16
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4403      	add	r3, r0
 8004c4a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004c4c:	4995      	ldr	r1, [pc, #596]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004c4e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004c52:	4613      	mov	r3, r2
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	4413      	add	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	3350      	adds	r3, #80	; 0x50
 8004c5c:	443b      	add	r3, r7
 8004c5e:	3b34      	subs	r3, #52	; 0x34
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	6859      	ldr	r1, [r3, #4]
 8004c6a:	488e      	ldr	r0, [pc, #568]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004c6c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004c70:	4613      	mov	r3, r2
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	4413      	add	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	3350      	adds	r3, #80	; 0x50
 8004c7a:	443b      	add	r3, r7
 8004c7c:	3b34      	subs	r3, #52	; 0x34
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4403      	add	r3, r0
 8004c8a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004c8c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004c90:	4613      	mov	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	4413      	add	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	3350      	adds	r3, #80	; 0x50
 8004c9a:	443b      	add	r3, r7
 8004c9c:	3b30      	subs	r3, #48	; 0x30
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d023      	beq.n	8004cec <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004ca4:	497f      	ldr	r1, [pc, #508]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004ca6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004caa:	4613      	mov	r3, r2
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	4413      	add	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	3350      	adds	r3, #80	; 0x50
 8004cb4:	443b      	add	r3, r7
 8004cb6:	3b30      	subs	r3, #48	; 0x30
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	6859      	ldr	r1, [r3, #4]
 8004cc6:	4877      	ldr	r0, [pc, #476]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004cc8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004ccc:	4613      	mov	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	4413      	add	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	3350      	adds	r3, #80	; 0x50
 8004cd6:	443b      	add	r3, r7
 8004cd8:	3b30      	subs	r3, #48	; 0x30
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4403      	add	r3, r0
 8004cea:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004cec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	4413      	add	r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	3350      	adds	r3, #80	; 0x50
 8004cfa:	443b      	add	r3, r7
 8004cfc:	3b2c      	subs	r3, #44	; 0x2c
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d023      	beq.n	8004d4c <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d04:	4967      	ldr	r1, [pc, #412]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004d06:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	4413      	add	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	3350      	adds	r3, #80	; 0x50
 8004d14:	443b      	add	r3, r7
 8004d16:	3b2c      	subs	r3, #44	; 0x2c
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	6859      	ldr	r1, [r3, #4]
 8004d26:	485f      	ldr	r0, [pc, #380]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004d28:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	4413      	add	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	3350      	adds	r3, #80	; 0x50
 8004d36:	443b      	add	r3, r7
 8004d38:	3b2c      	subs	r3, #44	; 0x2c
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4403      	add	r3, r0
 8004d4a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004d4c:	4a55      	ldr	r2, [pc, #340]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d60:	025b      	lsls	r3, r3, #9
 8004d62:	431a      	orrs	r2, r3
 8004d64:	494f      	ldr	r1, [pc, #316]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	1e5a      	subs	r2, r3, #1
 8004d7c:	4b49      	ldr	r3, [pc, #292]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d90a      	bls.n	8004d9e <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8004d88:	4b46      	ldr	r3, [pc, #280]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	041b      	lsls	r3, r3, #16
 8004d98:	4942      	ldr	r1, [pc, #264]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8004d9e:	4b41      	ldr	r3, [pc, #260]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 809a 	beq.w	8004ee0 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8004dac:	4a3d      	ldr	r2, [pc, #244]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f023 0203 	bic.w	r2, r3, #3
 8004dbe:	4939      	ldr	r1, [pc, #228]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d011      	beq.n	8004dfc <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8004dd8:	4a32      	ldr	r2, [pc, #200]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dea:	492e      	ldr	r1, [pc, #184]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	f042 0210 	orr.w	r2, r2, #16
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d016      	beq.n	8004e36 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e08:	4a26      	ldr	r2, [pc, #152]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e1e:	4921      	ldr	r1, [pc, #132]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	605a      	str	r2, [r3, #4]
 8004e34:	e019      	b.n	8004e6a <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d015      	beq.n	8004e6a <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e3e:	4a19      	ldr	r2, [pc, #100]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004e54:	4913      	ldr	r1, [pc, #76]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d018      	beq.n	8004ea8 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e76:	4a0b      	ldr	r2, [pc, #44]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e8c:	4905      	ldr	r1, [pc, #20]	; (8004ea4 <HAL_OSPIM_Config+0x7fc>)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	e0c5      	b.n	8005030 <HAL_OSPIM_Config+0x988>
 8004ea4:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 80bf 	beq.w	8005030 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004eb2:	4a6e      	ldr	r2, [pc, #440]	; (800506c <HAL_OSPIM_Config+0x9c4>)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004ec8:	4968      	ldr	r1, [pc, #416]	; (800506c <HAL_OSPIM_Config+0x9c4>)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	605a      	str	r2, [r3, #4]
 8004ede:	e0a7      	b.n	8005030 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004ee0:	4a62      	ldr	r2, [pc, #392]	; (800506c <HAL_OSPIM_Config+0x9c4>)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f023 0203 	bic.w	r2, r3, #3
 8004ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	495c      	ldr	r1, [pc, #368]	; (800506c <HAL_OSPIM_Config+0x9c4>)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	f042 0201 	orr.w	r2, r2, #1
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d014      	beq.n	8004f3c <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004f12:	4a56      	ldr	r2, [pc, #344]	; (800506c <HAL_OSPIM_Config+0x9c4>)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f26:	015b      	lsls	r3, r3, #5
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	4950      	ldr	r1, [pc, #320]	; (800506c <HAL_OSPIM_Config+0x9c4>)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	f042 0210 	orr.w	r2, r2, #16
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d019      	beq.n	8004f7c <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f48:	4a48      	ldr	r2, [pc, #288]	; (800506c <HAL_OSPIM_Config+0x9c4>)
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f60:	049b      	lsls	r3, r3, #18
 8004f62:	431a      	orrs	r2, r3
 8004f64:	4941      	ldr	r1, [pc, #260]	; (800506c <HAL_OSPIM_Config+0x9c4>)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	605a      	str	r2, [r3, #4]
 8004f7a:	e01c      	b.n	8004fb6 <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d018      	beq.n	8004fb6 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f84:	4a39      	ldr	r2, [pc, #228]	; (800506c <HAL_OSPIM_Config+0x9c4>)
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f9c:	069b      	lsls	r3, r3, #26
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	4932      	ldr	r1, [pc, #200]	; (800506c <HAL_OSPIM_Config+0x9c4>)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d019      	beq.n	8004ff6 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004fc2:	4a2a      	ldr	r2, [pc, #168]	; (800506c <HAL_OSPIM_Config+0x9c4>)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fda:	049b      	lsls	r3, r3, #18
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	4923      	ldr	r1, [pc, #140]	; (800506c <HAL_OSPIM_Config+0x9c4>)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	605a      	str	r2, [r3, #4]
 8004ff4:	e01c      	b.n	8005030 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d018      	beq.n	8005030 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004ffe:	4a1b      	ldr	r2, [pc, #108]	; (800506c <HAL_OSPIM_Config+0x9c4>)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	3b01      	subs	r3, #1
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005016:	069b      	lsls	r3, r3, #26
 8005018:	431a      	orrs	r2, r3
 800501a:	4914      	ldr	r1, [pc, #80]	; (800506c <HAL_OSPIM_Config+0x9c4>)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	3b01      	subs	r3, #1
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005030:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800503c:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <HAL_OSPIM_Config+0x9c8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0b      	ldr	r2, [pc, #44]	; (8005070 <HAL_OSPIM_Config+0x9c8>)
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005048:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005054:	4b07      	ldr	r3, [pc, #28]	; (8005074 <HAL_OSPIM_Config+0x9cc>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a06      	ldr	r2, [pc, #24]	; (8005074 <HAL_OSPIM_Config+0x9cc>)
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005060:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005064:	4618      	mov	r0, r3
 8005066:	3750      	adds	r7, #80	; 0x50
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	5200b400 	.word	0x5200b400
 8005070:	52005000 	.word	0x52005000
 8005074:	5200a000 	.word	0x5200a000

08005078 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	4613      	mov	r3, r2
 8005086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005088:	e01a      	b.n	80050c0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005090:	d016      	beq.n	80050c0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005092:	f7fc fe5b 	bl	8001d4c <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d302      	bcc.n	80050a8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10b      	bne.n	80050c0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ae:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b4:	f043 0201 	orr.w	r2, r3, #1
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e00e      	b.n	80050de <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6a1a      	ldr	r2, [r3, #32]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bf14      	ite	ne
 80050ce:	2301      	movne	r3, #1
 80050d0:	2300      	moveq	r3, #0
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d1d6      	bne.n	800508a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	6039      	str	r1, [r7, #0]
 80050f2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80050fc:	79fb      	ldrb	r3, [r7, #7]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <OSPIM_GetConfig+0x26>
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	2b02      	cmp	r3, #2
 8005106:	d802      	bhi.n	800510e <OSPIM_GetConfig+0x26>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d102      	bne.n	8005114 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	75fb      	strb	r3, [r7, #23]
 8005112:	e098      	b.n	8005246 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2200      	movs	r2, #0
 800511e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2200      	movs	r2, #0
 8005124:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2200      	movs	r2, #0
 800512a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2200      	movs	r2, #0
 8005130:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d10b      	bne.n	8005150 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8005138:	4b46      	ldr	r3, [pc, #280]	; (8005254 <OSPIM_GetConfig+0x16c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8005144:	4b44      	ldr	r3, [pc, #272]	; (8005258 <OSPIM_GetConfig+0x170>)
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	e002      	b.n	8005150 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800514a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800514e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005150:	2300      	movs	r3, #0
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	e074      	b.n	8005240 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8005156:	4a3f      	ldr	r2, [pc, #252]	; (8005254 <OSPIM_GetConfig+0x16c>)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	4053      	eors	r3, r2
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4053      	eors	r3, r2
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b00      	cmp	r3, #0
 8005198:	d103      	bne.n	80051a2 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4053      	eors	r3, r2
 80051b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d103      	bne.n	80051c2 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d018      	beq.n	80051fe <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	4053      	eors	r3, r2
 80051d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d111      	bne.n	80051fe <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	3301      	adds	r3, #1
 80051e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	60da      	str	r2, [r3, #12]
 80051f0:	e005      	b.n	80051fe <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3301      	adds	r3, #1
 80051f6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d018      	beq.n	800523a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	4053      	eors	r3, r2
 800520e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d111      	bne.n	800523a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3301      	adds	r3, #1
 8005224:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	611a      	str	r2, [r3, #16]
 800522c:	e005      	b.n	800523a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3301      	adds	r3, #1
 8005232:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3301      	adds	r3, #1
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d987      	bls.n	8005156 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8005246:	7dfb      	ldrb	r3, [r7, #23]
}
 8005248:	4618      	mov	r0, r3
 800524a:	371c      	adds	r7, #28
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	5200b400 	.word	0x5200b400
 8005258:	04040222 	.word	0x04040222

0800525c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af02      	add	r7, sp, #8
 8005262:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e0fe      	b.n	800546c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f00a f984 	bl	800f590 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2203      	movs	r2, #3
 800528c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	f006 fbd4 	bl	800ba42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	7c1a      	ldrb	r2, [r3, #16]
 80052a2:	f88d 2000 	strb.w	r2, [sp]
 80052a6:	3304      	adds	r3, #4
 80052a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052aa:	f006 faa5 	bl	800b7f8 <USB_CoreInit>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e0d5      	b.n	800546c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2100      	movs	r1, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	f006 fbcc 	bl	800ba64 <USB_SetCurrentMode>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e0c6      	b.n	800546c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052de:	2300      	movs	r3, #0
 80052e0:	73fb      	strb	r3, [r7, #15]
 80052e2:	e04a      	b.n	800537a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052e4:	7bfa      	ldrb	r2, [r7, #15]
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	3315      	adds	r3, #21
 80052f4:	2201      	movs	r2, #1
 80052f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052f8:	7bfa      	ldrb	r2, [r7, #15]
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	4613      	mov	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	3314      	adds	r3, #20
 8005308:	7bfa      	ldrb	r2, [r7, #15]
 800530a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800530c:	7bfa      	ldrb	r2, [r7, #15]
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	b298      	uxth	r0, r3
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	332e      	adds	r3, #46	; 0x2e
 8005320:	4602      	mov	r2, r0
 8005322:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005324:	7bfa      	ldrb	r2, [r7, #15]
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	3318      	adds	r3, #24
 8005334:	2200      	movs	r2, #0
 8005336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005338:	7bfa      	ldrb	r2, [r7, #15]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	331c      	adds	r3, #28
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800534c:	7bfa      	ldrb	r2, [r7, #15]
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	3320      	adds	r3, #32
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005360:	7bfa      	ldrb	r2, [r7, #15]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	3324      	adds	r3, #36	; 0x24
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005374:	7bfb      	ldrb	r3, [r7, #15]
 8005376:	3301      	adds	r3, #1
 8005378:	73fb      	strb	r3, [r7, #15]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	791b      	ldrb	r3, [r3, #4]
 800537e:	7bfa      	ldrb	r2, [r7, #15]
 8005380:	429a      	cmp	r2, r3
 8005382:	d3af      	bcc.n	80052e4 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005384:	2300      	movs	r3, #0
 8005386:	73fb      	strb	r3, [r7, #15]
 8005388:	e044      	b.n	8005414 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800538a:	7bfa      	ldrb	r2, [r7, #15]
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	4613      	mov	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	4413      	add	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	f203 2355 	addw	r3, r3, #597	; 0x255
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80053a0:	7bfa      	ldrb	r2, [r7, #15]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4413      	add	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80053b2:	7bfa      	ldrb	r2, [r7, #15]
 80053b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053b6:	7bfa      	ldrb	r2, [r7, #15]
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053cc:	7bfa      	ldrb	r2, [r7, #15]
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	4613      	mov	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053e2:	7bfa      	ldrb	r2, [r7, #15]
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	4413      	add	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	440b      	add	r3, r1
 80053f0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053f8:	7bfa      	ldrb	r2, [r7, #15]
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	4413      	add	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	3301      	adds	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	791b      	ldrb	r3, [r3, #4]
 8005418:	7bfa      	ldrb	r2, [r7, #15]
 800541a:	429a      	cmp	r2, r3
 800541c:	d3b5      	bcc.n	800538a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	7c1a      	ldrb	r2, [r3, #16]
 8005426:	f88d 2000 	strb.w	r2, [sp]
 800542a:	3304      	adds	r3, #4
 800542c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800542e:	f006 fb65 	bl	800bafc <USB_DevInit>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e013      	b.n	800546c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	7b1b      	ldrb	r3, [r3, #12]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d102      	bne.n	8005460 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f001 f946 	bl	80066ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4618      	mov	r0, r3
 8005466:	f007 fac8 	bl	800c9fa <USB_DevDisconnect>

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_PCD_Start+0x1c>
 800548c:	2302      	movs	r3, #2
 800548e:	e022      	b.n	80054d6 <HAL_PCD_Start+0x62>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d009      	beq.n	80054b8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d105      	bne.n	80054b8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f006 faaf 	bl	800ba20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f007 fa76 	bl	800c9b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_PCD_Stop+0x1c>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e028      	b.n	800554c <HAL_PCD_Stop+0x6e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  __HAL_PCD_DISABLE(hpcd);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f006 fa9b 	bl	800ba42 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4618      	mov	r0, r3
 8005512:	f007 fa72 	bl	800c9fa <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2110      	movs	r1, #16
 800551c:	4618      	mov	r0, r3
 800551e:	f006 fc4b 	bl	800bdb8 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005532:	2b01      	cmp	r3, #1
 8005534:	d105      	bne.n	8005542 <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005554:	b590      	push	{r4, r7, lr}
 8005556:	b08d      	sub	sp, #52	; 0x34
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f007 faf9 	bl	800cb62 <USB_GetMode>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	f040 84b9 	bne.w	8005eea <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4618      	mov	r0, r3
 800557e:	f007 fa5d 	bl	800ca3c <USB_ReadInterrupts>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 84af 	beq.w	8005ee8 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f007 fa4a 	bl	800ca3c <USB_ReadInterrupts>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d107      	bne.n	80055c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695a      	ldr	r2, [r3, #20]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f002 0202 	and.w	r2, r2, #2
 80055c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f007 fa38 	bl	800ca3c <USB_ReadInterrupts>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	2b10      	cmp	r3, #16
 80055d4:	d161      	bne.n	800569a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0210 	bic.w	r2, r2, #16
 80055e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f003 020f 	and.w	r2, r3, #15
 80055f2:	4613      	mov	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	4413      	add	r3, r2
 8005602:	3304      	adds	r3, #4
 8005604:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	0c5b      	lsrs	r3, r3, #17
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	2b02      	cmp	r3, #2
 8005610:	d124      	bne.n	800565c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005618:	4013      	ands	r3, r2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d035      	beq.n	800568a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	091b      	lsrs	r3, r3, #4
 8005626:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005628:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800562c:	b29b      	uxth	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	6a38      	ldr	r0, [r7, #32]
 8005632:	f007 f86f 	bl	800c714 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	091b      	lsrs	r3, r3, #4
 800563e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005642:	441a      	add	r2, r3
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	695a      	ldr	r2, [r3, #20]
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	091b      	lsrs	r3, r3, #4
 8005650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005654:	441a      	add	r2, r3
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	615a      	str	r2, [r3, #20]
 800565a:	e016      	b.n	800568a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	0c5b      	lsrs	r3, r3, #17
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	2b06      	cmp	r3, #6
 8005666:	d110      	bne.n	800568a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800566e:	2208      	movs	r2, #8
 8005670:	4619      	mov	r1, r3
 8005672:	6a38      	ldr	r0, [r7, #32]
 8005674:	f007 f84e 	bl	800c714 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	695a      	ldr	r2, [r3, #20]
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005684:	441a      	add	r2, r3
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699a      	ldr	r2, [r3, #24]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0210 	orr.w	r2, r2, #16
 8005698:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f007 f9cc 	bl	800ca3c <USB_ReadInterrupts>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056ae:	f040 80a7 	bne.w	8005800 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f007 f9d1 	bl	800ca62 <USB_ReadDevAllOutEpInterrupt>
 80056c0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80056c2:	e099      	b.n	80057f8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 808e 	beq.w	80057ec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	4611      	mov	r1, r2
 80056da:	4618      	mov	r0, r3
 80056dc:	f007 f9f5 	bl	800caca <USB_ReadDevOutEPInterrupt>
 80056e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00c      	beq.n	8005706 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	461a      	mov	r2, r3
 80056fa:	2301      	movs	r3, #1
 80056fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80056fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fe6d 	bl	80063e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00c      	beq.n	800572a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	461a      	mov	r2, r3
 800571e:	2308      	movs	r3, #8
 8005720:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 ff43 	bl	80065b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005740:	461a      	mov	r2, r3
 8005742:	2310      	movs	r3, #16
 8005744:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d030      	beq.n	80057b2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005758:	2b80      	cmp	r3, #128	; 0x80
 800575a:	d109      	bne.n	8005770 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800576a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800576e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005772:	4613      	mov	r3, r2
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	4413      	add	r3, r2
 8005782:	3304      	adds	r3, #4
 8005784:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	78db      	ldrb	r3, [r3, #3]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d108      	bne.n	80057a0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2200      	movs	r2, #0
 8005792:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	b2db      	uxtb	r3, r3
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f009 fff0 	bl	800f780 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ac:	461a      	mov	r2, r3
 80057ae:	2302      	movs	r3, #2
 80057b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d008      	beq.n	80057ce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	461a      	mov	r2, r3
 80057ca:	2320      	movs	r3, #32
 80057cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d009      	beq.n	80057ec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e4:	461a      	mov	r2, r3
 80057e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	3301      	adds	r3, #1
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	085b      	lsrs	r3, r3, #1
 80057f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f47f af62 	bne.w	80056c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4618      	mov	r0, r3
 8005806:	f007 f919 	bl	800ca3c <USB_ReadInterrupts>
 800580a:	4603      	mov	r3, r0
 800580c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005810:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005814:	f040 80db 	bne.w	80059ce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4618      	mov	r0, r3
 800581e:	f007 f93a 	bl	800ca96 <USB_ReadDevAllInEpInterrupt>
 8005822:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005828:	e0cd      	b.n	80059c6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 80c2 	beq.w	80059ba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	4611      	mov	r1, r2
 8005840:	4618      	mov	r0, r3
 8005842:	f007 f960 	bl	800cb06 <USB_ReadDevInEPInterrupt>
 8005846:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d057      	beq.n	8005902 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	f003 030f 	and.w	r3, r3, #15
 8005858:	2201      	movs	r2, #1
 800585a:	fa02 f303 	lsl.w	r3, r2, r3
 800585e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	43db      	mvns	r3, r3
 800586c:	69f9      	ldr	r1, [r7, #28]
 800586e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005872:	4013      	ands	r3, r2
 8005874:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005882:	461a      	mov	r2, r3
 8005884:	2301      	movs	r3, #1
 8005886:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	799b      	ldrb	r3, [r3, #6]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d132      	bne.n	80058f6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005894:	4613      	mov	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	3320      	adds	r3, #32
 80058a0:	6819      	ldr	r1, [r3, #0]
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a6:	4613      	mov	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4403      	add	r3, r0
 80058b0:	331c      	adds	r3, #28
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4419      	add	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ba:	4613      	mov	r3, r2
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4403      	add	r3, r0
 80058c4:	3320      	adds	r3, #32
 80058c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d113      	bne.n	80058f6 <HAL_PCD_IRQHandler+0x3a2>
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d2:	4613      	mov	r3, r2
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	440b      	add	r3, r1
 80058dc:	3324      	adds	r3, #36	; 0x24
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d108      	bne.n	80058f6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80058ee:	461a      	mov	r2, r3
 80058f0:	2101      	movs	r1, #1
 80058f2:	f007 f969 	bl	800cbc8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f009 feba 	bl	800f676 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f003 0308 	and.w	r3, r3, #8
 8005908:	2b00      	cmp	r3, #0
 800590a:	d008      	beq.n	800591e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005918:	461a      	mov	r2, r3
 800591a:	2308      	movs	r3, #8
 800591c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f003 0310 	and.w	r3, r3, #16
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	461a      	mov	r2, r3
 8005936:	2310      	movs	r3, #16
 8005938:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d008      	beq.n	8005956 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005950:	461a      	mov	r2, r3
 8005952:	2340      	movs	r3, #64	; 0x40
 8005954:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d023      	beq.n	80059a8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005960:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005962:	6a38      	ldr	r0, [r7, #32]
 8005964:	f006 fa28 	bl	800bdb8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596a:	4613      	mov	r3, r2
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	4413      	add	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	3310      	adds	r3, #16
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	4413      	add	r3, r2
 8005978:	3304      	adds	r3, #4
 800597a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	78db      	ldrb	r3, [r3, #3]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d108      	bne.n	8005996 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2200      	movs	r2, #0
 8005988:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	b2db      	uxtb	r3, r3
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f009 ff07 	bl	800f7a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a2:	461a      	mov	r2, r3
 80059a4:	2302      	movs	r3, #2
 80059a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80059b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fc86 	bl	80062c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	3301      	adds	r3, #1
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80059c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c2:	085b      	lsrs	r3, r3, #1
 80059c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f47f af2e 	bne.w	800582a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f007 f832 	bl	800ca3c <USB_ReadInterrupts>
 80059d8:	4603      	mov	r3, r0
 80059da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e2:	d122      	bne.n	8005a2a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059f2:	f023 0301 	bic.w	r3, r3, #1
 80059f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d108      	bne.n	8005a14 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fe91 	bl	8006734 <HAL_PCDEx_LPM_Callback>
 8005a12:	e002      	b.n	8005a1a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f009 fea5 	bl	800f764 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695a      	ldr	r2, [r3, #20]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f007 f804 	bl	800ca3c <USB_ReadInterrupts>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a3e:	d112      	bne.n	8005a66 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d102      	bne.n	8005a56 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f009 fe61 	bl	800f718 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695a      	ldr	r2, [r3, #20]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f006 ffe6 	bl	800ca3c <USB_ReadInterrupts>
 8005a70:	4603      	mov	r3, r0
 8005a72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a7a:	d121      	bne.n	8005ac0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695a      	ldr	r2, [r3, #20]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005a8a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d111      	bne.n	8005aba <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa4:	089b      	lsrs	r3, r3, #2
 8005aa6:	f003 020f 	and.w	r2, r3, #15
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fe3e 	bl	8006734 <HAL_PCDEx_LPM_Callback>
 8005ab8:	e002      	b.n	8005ac0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f009 fe2c 	bl	800f718 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f006 ffb9 	bl	800ca3c <USB_ReadInterrupts>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad4:	f040 80b7 	bne.w	8005c46 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ae6:	f023 0301 	bic.w	r3, r3, #1
 8005aea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2110      	movs	r1, #16
 8005af2:	4618      	mov	r0, r3
 8005af4:	f006 f960 	bl	800bdb8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005af8:	2300      	movs	r3, #0
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005afc:	e046      	b.n	8005b8c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	69fa      	ldr	r2, [r7, #28]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b76:	0151      	lsls	r1, r2, #5
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	440a      	add	r2, r1
 8005b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b84:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	3301      	adds	r3, #1
 8005b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	791b      	ldrb	r3, [r3, #4]
 8005b90:	461a      	mov	r2, r3
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d3b2      	bcc.n	8005afe <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	69fa      	ldr	r2, [r7, #28]
 8005ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005baa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	7bdb      	ldrb	r3, [r3, #15]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d016      	beq.n	8005be2 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bc4:	f043 030b 	orr.w	r3, r3, #11
 8005bc8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bda:	f043 030b 	orr.w	r3, r3, #11
 8005bde:	6453      	str	r3, [r2, #68]	; 0x44
 8005be0:	e015      	b.n	8005c0e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	f242 032b 	movw	r3, #8235	; 0x202b
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c08:	f043 030b 	orr.w	r3, r3, #11
 8005c0c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c1c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c20:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c30:	461a      	mov	r2, r3
 8005c32:	f006 ffc9 	bl	800cbc8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	695a      	ldr	r2, [r3, #20]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f006 fef6 	bl	800ca3c <USB_ReadInterrupts>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5a:	d123      	bne.n	8005ca4 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f006 ff8d 	bl	800cb80 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f006 f91d 	bl	800beaa <USB_GetDevSpeed>
 8005c70:	4603      	mov	r3, r0
 8005c72:	461a      	mov	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681c      	ldr	r4, [r3, #0]
 8005c7c:	f001 fcba 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 8005c80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c86:	461a      	mov	r2, r3
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f005 fe27 	bl	800b8dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f009 fd19 	bl	800f6c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695a      	ldr	r2, [r3, #20]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f006 fec7 	bl	800ca3c <USB_ReadInterrupts>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d10a      	bne.n	8005cce <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f009 fcf6 	bl	800f6aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f002 0208 	and.w	r2, r2, #8
 8005ccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f006 feb2 	bl	800ca3c <USB_ReadInterrupts>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cde:	2b80      	cmp	r3, #128	; 0x80
 8005ce0:	d123      	bne.n	8005d2a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cee:	2301      	movs	r3, #1
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf2:	e014      	b.n	8005d1e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	440b      	add	r3, r1
 8005d02:	f203 2357 	addw	r3, r3, #599	; 0x257
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d105      	bne.n	8005d18 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 faa6 	bl	8006264 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	791b      	ldrb	r3, [r3, #4]
 8005d22:	461a      	mov	r2, r3
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d3e4      	bcc.n	8005cf4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f006 fe84 	bl	800ca3c <USB_ReadInterrupts>
 8005d34:	4603      	mov	r3, r0
 8005d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d3e:	d13c      	bne.n	8005dba <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d40:	2301      	movs	r3, #1
 8005d42:	627b      	str	r3, [r7, #36]	; 0x24
 8005d44:	e02b      	b.n	8005d9e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	3318      	adds	r3, #24
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d115      	bne.n	8005d98 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005d6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	da12      	bge.n	8005d98 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d76:	4613      	mov	r3, r2
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	3317      	adds	r3, #23
 8005d82:	2201      	movs	r2, #1
 8005d84:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fa66 	bl	8006264 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	791b      	ldrb	r3, [r3, #4]
 8005da2:	461a      	mov	r2, r3
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d3cd      	bcc.n	8005d46 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695a      	ldr	r2, [r3, #20]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005db8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f006 fe3c 	bl	800ca3c <USB_ReadInterrupts>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dce:	d156      	bne.n	8005e7e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd4:	e045      	b.n	8005e62 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005de6:	6879      	ldr	r1, [r7, #4]
 8005de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dea:	4613      	mov	r3, r2
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	440b      	add	r3, r1
 8005df4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d12e      	bne.n	8005e5c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005dfe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	da2b      	bge.n	8005e5c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8005e10:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d121      	bne.n	8005e5c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	f203 2357 	addw	r3, r3, #599	; 0x257
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e58:	6053      	str	r3, [r2, #4]
            break;
 8005e5a:	e008      	b.n	8005e6e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	3301      	adds	r3, #1
 8005e60:	627b      	str	r3, [r7, #36]	; 0x24
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	791b      	ldrb	r3, [r3, #4]
 8005e66:	461a      	mov	r2, r3
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d3b3      	bcc.n	8005dd6 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	695a      	ldr	r2, [r3, #20]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005e7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f006 fdda 	bl	800ca3c <USB_ReadInterrupts>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e92:	d10a      	bne.n	8005eaa <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f009 fc97 	bl	800f7c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695a      	ldr	r2, [r3, #20]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f006 fdc4 	bl	800ca3c <USB_ReadInterrupts>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d115      	bne.n	8005eea <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f009 fc87 	bl	800f7e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6859      	ldr	r1, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
 8005ee6:	e000      	b.n	8005eea <HAL_PCD_IRQHandler+0x996>
      return;
 8005ee8:	bf00      	nop
    }
  }
}
 8005eea:	3734      	adds	r7, #52	; 0x34
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd90      	pop	{r4, r7, pc}

08005ef0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_PCD_SetAddress+0x1a>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e012      	b.n	8005f30 <HAL_PCD_SetAddress+0x40>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	78fa      	ldrb	r2, [r7, #3]
 8005f1e:	4611      	mov	r1, r2
 8005f20:	4618      	mov	r0, r3
 8005f22:	f006 fd23 	bl	800c96c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	4608      	mov	r0, r1
 8005f42:	4611      	mov	r1, r2
 8005f44:	461a      	mov	r2, r3
 8005f46:	4603      	mov	r3, r0
 8005f48:	70fb      	strb	r3, [r7, #3]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	803b      	strh	r3, [r7, #0]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da0f      	bge.n	8005f7e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	f003 020f 	and.w	r2, r3, #15
 8005f64:	4613      	mov	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	3310      	adds	r3, #16
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	4413      	add	r3, r2
 8005f72:	3304      	adds	r3, #4
 8005f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	705a      	strb	r2, [r3, #1]
 8005f7c:	e00f      	b.n	8005f9e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f7e:	78fb      	ldrb	r3, [r7, #3]
 8005f80:	f003 020f 	and.w	r2, r3, #15
 8005f84:	4613      	mov	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	4413      	add	r3, r2
 8005f94:	3304      	adds	r3, #4
 8005f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f9e:	78fb      	ldrb	r3, [r7, #3]
 8005fa0:	f003 030f 	and.w	r3, r3, #15
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005faa:	883a      	ldrh	r2, [r7, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	78ba      	ldrb	r2, [r7, #2]
 8005fb4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d004      	beq.n	8005fc8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005fc8:	78bb      	ldrb	r3, [r7, #2]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d102      	bne.n	8005fd4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_PCD_EP_Open+0xaa>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e00e      	b.n	8006000 <HAL_PCD_EP_Open+0xc8>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68f9      	ldr	r1, [r7, #12]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f005 ff7f 	bl	800bef4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8005ffe:	7afb      	ldrb	r3, [r7, #11]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	607a      	str	r2, [r7, #4]
 8006012:	603b      	str	r3, [r7, #0]
 8006014:	460b      	mov	r3, r1
 8006016:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006018:	7afb      	ldrb	r3, [r7, #11]
 800601a:	f003 020f 	and.w	r2, r3, #15
 800601e:	4613      	mov	r3, r2
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4413      	add	r3, r2
 800602e:	3304      	adds	r3, #4
 8006030:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2200      	movs	r2, #0
 8006042:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2200      	movs	r2, #0
 8006048:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800604a:	7afb      	ldrb	r3, [r7, #11]
 800604c:	f003 030f 	and.w	r3, r3, #15
 8006050:	b2da      	uxtb	r2, r3
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	799b      	ldrb	r3, [r3, #6]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d102      	bne.n	8006064 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6818      	ldr	r0, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	799b      	ldrb	r3, [r3, #6]
 800606c:	461a      	mov	r2, r3
 800606e:	6979      	ldr	r1, [r7, #20]
 8006070:	f005 ffc8 	bl	800c004 <USB_EPStartXfer>

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b086      	sub	sp, #24
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	603b      	str	r3, [r7, #0]
 800608a:	460b      	mov	r3, r1
 800608c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800608e:	7afb      	ldrb	r3, [r7, #11]
 8006090:	f003 020f 	and.w	r2, r3, #15
 8006094:	4613      	mov	r3, r2
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	3310      	adds	r3, #16
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4413      	add	r3, r2
 80060a2:	3304      	adds	r3, #4
 80060a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2200      	movs	r2, #0
 80060b6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2201      	movs	r2, #1
 80060bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060be:	7afb      	ldrb	r3, [r7, #11]
 80060c0:	f003 030f 	and.w	r3, r3, #15
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	799b      	ldrb	r3, [r3, #6]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d102      	bne.n	80060d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	799b      	ldrb	r3, [r3, #6]
 80060e0:	461a      	mov	r2, r3
 80060e2:	6979      	ldr	r1, [r7, #20]
 80060e4:	f005 ff8e 	bl	800c004 <USB_EPStartXfer>

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80060fe:	78fb      	ldrb	r3, [r7, #3]
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	7912      	ldrb	r2, [r2, #4]
 8006108:	4293      	cmp	r3, r2
 800610a:	d901      	bls.n	8006110 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e04f      	b.n	80061b0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006114:	2b00      	cmp	r3, #0
 8006116:	da0f      	bge.n	8006138 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	f003 020f 	and.w	r2, r3, #15
 800611e:	4613      	mov	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	3310      	adds	r3, #16
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	4413      	add	r3, r2
 800612c:	3304      	adds	r3, #4
 800612e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2201      	movs	r2, #1
 8006134:	705a      	strb	r2, [r3, #1]
 8006136:	e00d      	b.n	8006154 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	4613      	mov	r3, r2
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	4413      	add	r3, r2
 800614a:	3304      	adds	r3, #4
 800614c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800615a:	78fb      	ldrb	r3, [r7, #3]
 800615c:	f003 030f 	and.w	r3, r3, #15
 8006160:	b2da      	uxtb	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_PCD_EP_SetStall+0x82>
 8006170:	2302      	movs	r3, #2
 8006172:	e01d      	b.n	80061b0 <HAL_PCD_EP_SetStall+0xbe>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68f9      	ldr	r1, [r7, #12]
 8006182:	4618      	mov	r0, r3
 8006184:	f006 fb1e 	bl	800c7c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	2b00      	cmp	r3, #0
 8006190:	d109      	bne.n	80061a6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6818      	ldr	r0, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	7999      	ldrb	r1, [r3, #6]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80061a0:	461a      	mov	r2, r3
 80061a2:	f006 fd11 	bl	800cbc8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	7912      	ldrb	r2, [r2, #4]
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d901      	bls.n	80061d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e042      	b.n	800625c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	da0f      	bge.n	80061fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	f003 020f 	and.w	r2, r3, #15
 80061e4:	4613      	mov	r3, r2
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	3310      	adds	r3, #16
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	4413      	add	r3, r2
 80061f2:	3304      	adds	r3, #4
 80061f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2201      	movs	r2, #1
 80061fa:	705a      	strb	r2, [r3, #1]
 80061fc:	e00f      	b.n	800621e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	f003 020f 	and.w	r2, r3, #15
 8006204:	4613      	mov	r3, r2
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	4413      	add	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	4413      	add	r3, r2
 8006214:	3304      	adds	r3, #4
 8006216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	b2da      	uxtb	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_PCD_EP_ClrStall+0x86>
 800623a:	2302      	movs	r3, #2
 800623c:	e00e      	b.n	800625c <HAL_PCD_EP_ClrStall+0xa4>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68f9      	ldr	r1, [r7, #12]
 800624c:	4618      	mov	r0, r3
 800624e:	f006 fb27 	bl	800c8a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	460b      	mov	r3, r1
 800626e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006274:	2b00      	cmp	r3, #0
 8006276:	da0c      	bge.n	8006292 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	f003 020f 	and.w	r2, r3, #15
 800627e:	4613      	mov	r3, r2
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	3310      	adds	r3, #16
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	4413      	add	r3, r2
 800628c:	3304      	adds	r3, #4
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	e00c      	b.n	80062ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	f003 020f 	and.w	r2, r3, #15
 8006298:	4613      	mov	r3, r2
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	4413      	add	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	4413      	add	r3, r2
 80062a8:	3304      	adds	r3, #4
 80062aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68f9      	ldr	r1, [r7, #12]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f006 f946 	bl	800c544 <USB_EPStopXfer>
 80062b8:	4603      	mov	r3, r0
 80062ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80062bc:	7afb      	ldrb	r3, [r7, #11]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b08a      	sub	sp, #40	; 0x28
 80062ca:	af02      	add	r7, sp, #8
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	4413      	add	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	3310      	adds	r3, #16
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	4413      	add	r3, r2
 80062ea:	3304      	adds	r3, #4
 80062ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	695a      	ldr	r2, [r3, #20]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d901      	bls.n	80062fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e06b      	b.n	80063d6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	429a      	cmp	r2, r3
 8006312:	d902      	bls.n	800631a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	3303      	adds	r3, #3
 800631e:	089b      	lsrs	r3, r3, #2
 8006320:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006322:	e02a      	b.n	800637a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	429a      	cmp	r2, r3
 8006338:	d902      	bls.n	8006340 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	3303      	adds	r3, #3
 8006344:	089b      	lsrs	r3, r3, #2
 8006346:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68d9      	ldr	r1, [r3, #12]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	b2da      	uxtb	r2, r3
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	4603      	mov	r3, r0
 800635c:	6978      	ldr	r0, [r7, #20]
 800635e:	f006 f99b 	bl	800c698 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	441a      	add	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	441a      	add	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	429a      	cmp	r2, r3
 800638e:	d809      	bhi.n	80063a4 <PCD_WriteEmptyTxFifo+0xde>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	695a      	ldr	r2, [r3, #20]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006398:	429a      	cmp	r2, r3
 800639a:	d203      	bcs.n	80063a4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1bf      	bne.n	8006324 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d811      	bhi.n	80063d4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	2201      	movs	r2, #1
 80063b8:	fa02 f303 	lsl.w	r3, r2, r3
 80063bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	43db      	mvns	r3, r3
 80063ca:	6939      	ldr	r1, [r7, #16]
 80063cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063d0:	4013      	ands	r3, r2
 80063d2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3720      	adds	r7, #32
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	333c      	adds	r3, #60	; 0x3c
 80063f8:	3304      	adds	r3, #4
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	799b      	ldrb	r3, [r3, #6]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d17b      	bne.n	800650e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b00      	cmp	r3, #0
 800641e:	d015      	beq.n	800644c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	4a61      	ldr	r2, [pc, #388]	; (80065a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	f240 80b9 	bls.w	800659c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 80b3 	beq.w	800659c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006442:	461a      	mov	r2, r3
 8006444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006448:	6093      	str	r3, [r2, #8]
 800644a:	e0a7      	b.n	800659c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d009      	beq.n	800646a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	4413      	add	r3, r2
 800645e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006462:	461a      	mov	r2, r3
 8006464:	2320      	movs	r3, #32
 8006466:	6093      	str	r3, [r2, #8]
 8006468:	e098      	b.n	800659c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006470:	2b00      	cmp	r3, #0
 8006472:	f040 8093 	bne.w	800659c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	4a4b      	ldr	r2, [pc, #300]	; (80065a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d90f      	bls.n	800649e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006494:	461a      	mov	r2, r3
 8006496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800649a:	6093      	str	r3, [r2, #8]
 800649c:	e07e      	b.n	800659c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	4613      	mov	r3, r2
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	4413      	add	r3, r2
 80064b0:	3304      	adds	r3, #4
 80064b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a1a      	ldr	r2, [r3, #32]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	0159      	lsls	r1, r3, #5
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	440b      	add	r3, r1
 80064c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ca:	1ad2      	subs	r2, r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d114      	bne.n	8006500 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80064e8:	461a      	mov	r2, r3
 80064ea:	2101      	movs	r1, #1
 80064ec:	f006 fb6c 	bl	800cbc8 <USB_EP0_OutStart>
 80064f0:	e006      	b.n	8006500 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	441a      	add	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f009 f89a 	bl	800f640 <HAL_PCD_DataOutStageCallback>
 800650c:	e046      	b.n	800659c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	4a26      	ldr	r2, [pc, #152]	; (80065ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d124      	bne.n	8006560 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00a      	beq.n	8006536 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652c:	461a      	mov	r2, r3
 800652e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006532:	6093      	str	r3, [r2, #8]
 8006534:	e032      	b.n	800659c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654c:	461a      	mov	r2, r3
 800654e:	2320      	movs	r3, #32
 8006550:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f009 f871 	bl	800f640 <HAL_PCD_DataOutStageCallback>
 800655e:	e01d      	b.n	800659c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d114      	bne.n	8006590 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	4613      	mov	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	440b      	add	r3, r1
 8006574:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d108      	bne.n	8006590 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6818      	ldr	r0, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006588:	461a      	mov	r2, r3
 800658a:	2100      	movs	r1, #0
 800658c:	f006 fb1c 	bl	800cbc8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	4619      	mov	r1, r3
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f009 f852 	bl	800f640 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	4f54300a 	.word	0x4f54300a
 80065ac:	4f54310a 	.word	0x4f54310a

080065b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	333c      	adds	r3, #60	; 0x3c
 80065c8:	3304      	adds	r3, #4
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4a15      	ldr	r2, [pc, #84]	; (8006638 <PCD_EP_OutSetupPacket_int+0x88>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d90e      	bls.n	8006604 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d009      	beq.n	8006604 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fc:	461a      	mov	r2, r3
 80065fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006602:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f009 f809 	bl	800f61c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4a0a      	ldr	r2, [pc, #40]	; (8006638 <PCD_EP_OutSetupPacket_int+0x88>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d90c      	bls.n	800662c <PCD_EP_OutSetupPacket_int+0x7c>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	799b      	ldrb	r3, [r3, #6]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d108      	bne.n	800662c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006624:	461a      	mov	r2, r3
 8006626:	2101      	movs	r1, #1
 8006628:	f006 face 	bl	800cbc8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	4f54300a 	.word	0x4f54300a

0800663c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
 8006648:	4613      	mov	r3, r2
 800664a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d107      	bne.n	800666a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800665a:	883b      	ldrh	r3, [r7, #0]
 800665c:	0419      	lsls	r1, r3, #16
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	430a      	orrs	r2, r1
 8006666:	629a      	str	r2, [r3, #40]	; 0x28
 8006668:	e028      	b.n	80066bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006670:	0c1b      	lsrs	r3, r3, #16
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	4413      	add	r3, r2
 8006676:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006678:	2300      	movs	r3, #0
 800667a:	73fb      	strb	r3, [r7, #15]
 800667c:	e00d      	b.n	800669a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	3340      	adds	r3, #64	; 0x40
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	0c1b      	lsrs	r3, r3, #16
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	4413      	add	r3, r2
 8006692:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	3301      	adds	r3, #1
 8006698:	73fb      	strb	r3, [r7, #15]
 800669a:	7bfa      	ldrb	r2, [r7, #15]
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	3b01      	subs	r3, #1
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d3ec      	bcc.n	800667e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80066a4:	883b      	ldrh	r3, [r7, #0]
 80066a6:	0418      	lsls	r0, r3, #16
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6819      	ldr	r1, [r3, #0]
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	4302      	orrs	r2, r0
 80066b4:	3340      	adds	r3, #64	; 0x40
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	440b      	add	r3, r1
 80066ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	460b      	mov	r3, r1
 80066d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	887a      	ldrh	r2, [r7, #2]
 80066dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800671a:	4b05      	ldr	r3, [pc, #20]	; (8006730 <HAL_PCDEx_ActivateLPM+0x44>)
 800671c:	4313      	orrs	r3, r2
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	10000003 	.word	0x10000003

08006734 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006754:	4b19      	ldr	r3, [pc, #100]	; (80067bc <HAL_PWREx_ConfigSupply+0x70>)
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b04      	cmp	r3, #4
 800675e:	d00a      	beq.n	8006776 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006760:	4b16      	ldr	r3, [pc, #88]	; (80067bc <HAL_PWREx_ConfigSupply+0x70>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	429a      	cmp	r2, r3
 800676c:	d001      	beq.n	8006772 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e01f      	b.n	80067b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	e01d      	b.n	80067b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006776:	4b11      	ldr	r3, [pc, #68]	; (80067bc <HAL_PWREx_ConfigSupply+0x70>)
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f023 0207 	bic.w	r2, r3, #7
 800677e:	490f      	ldr	r1, [pc, #60]	; (80067bc <HAL_PWREx_ConfigSupply+0x70>)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4313      	orrs	r3, r2
 8006784:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006786:	f7fb fae1 	bl	8001d4c <HAL_GetTick>
 800678a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800678c:	e009      	b.n	80067a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800678e:	f7fb fadd 	bl	8001d4c <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800679c:	d901      	bls.n	80067a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e007      	b.n	80067b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80067a2:	4b06      	ldr	r3, [pc, #24]	; (80067bc <HAL_PWREx_ConfigSupply+0x70>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ae:	d1ee      	bne.n	800678e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	58024800 	.word	0x58024800

080067c0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	4a04      	ldr	r2, [pc, #16]	; (80067dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80067ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067ce:	60d3      	str	r3, [r2, #12]
}
 80067d0:	bf00      	nop
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	58024800 	.word	0x58024800

080067e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b08c      	sub	sp, #48	; 0x30
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e3c8      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 8087 	beq.w	800690e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006800:	4b88      	ldr	r3, [pc, #544]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006808:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800680a:	4b86      	ldr	r3, [pc, #536]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 800680c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006812:	2b10      	cmp	r3, #16
 8006814:	d007      	beq.n	8006826 <HAL_RCC_OscConfig+0x46>
 8006816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006818:	2b18      	cmp	r3, #24
 800681a:	d110      	bne.n	800683e <HAL_RCC_OscConfig+0x5e>
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d10b      	bne.n	800683e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006826:	4b7f      	ldr	r3, [pc, #508]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d06c      	beq.n	800690c <HAL_RCC_OscConfig+0x12c>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d168      	bne.n	800690c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e3a2      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006846:	d106      	bne.n	8006856 <HAL_RCC_OscConfig+0x76>
 8006848:	4b76      	ldr	r3, [pc, #472]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a75      	ldr	r2, [pc, #468]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 800684e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	e02e      	b.n	80068b4 <HAL_RCC_OscConfig+0xd4>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10c      	bne.n	8006878 <HAL_RCC_OscConfig+0x98>
 800685e:	4b71      	ldr	r3, [pc, #452]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a70      	ldr	r2, [pc, #448]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	4b6e      	ldr	r3, [pc, #440]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a6d      	ldr	r2, [pc, #436]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	e01d      	b.n	80068b4 <HAL_RCC_OscConfig+0xd4>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006880:	d10c      	bne.n	800689c <HAL_RCC_OscConfig+0xbc>
 8006882:	4b68      	ldr	r3, [pc, #416]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a67      	ldr	r2, [pc, #412]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	4b65      	ldr	r3, [pc, #404]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a64      	ldr	r2, [pc, #400]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	e00b      	b.n	80068b4 <HAL_RCC_OscConfig+0xd4>
 800689c:	4b61      	ldr	r3, [pc, #388]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a60      	ldr	r2, [pc, #384]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 80068a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	4b5e      	ldr	r3, [pc, #376]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a5d      	ldr	r2, [pc, #372]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 80068ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d013      	beq.n	80068e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068bc:	f7fb fa46 	bl	8001d4c <HAL_GetTick>
 80068c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068c4:	f7fb fa42 	bl	8001d4c <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b64      	cmp	r3, #100	; 0x64
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e356      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068d6:	4b53      	ldr	r3, [pc, #332]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0f0      	beq.n	80068c4 <HAL_RCC_OscConfig+0xe4>
 80068e2:	e014      	b.n	800690e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e4:	f7fb fa32 	bl	8001d4c <HAL_GetTick>
 80068e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068ea:	e008      	b.n	80068fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068ec:	f7fb fa2e 	bl	8001d4c <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b64      	cmp	r3, #100	; 0x64
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e342      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068fe:	4b49      	ldr	r3, [pc, #292]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1f0      	bne.n	80068ec <HAL_RCC_OscConfig+0x10c>
 800690a:	e000      	b.n	800690e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800690c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 808c 	beq.w	8006a34 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800691c:	4b41      	ldr	r3, [pc, #260]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006924:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006926:	4b3f      	ldr	r3, [pc, #252]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d007      	beq.n	8006942 <HAL_RCC_OscConfig+0x162>
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	2b18      	cmp	r3, #24
 8006936:	d137      	bne.n	80069a8 <HAL_RCC_OscConfig+0x1c8>
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d132      	bne.n	80069a8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006942:	4b38      	ldr	r3, [pc, #224]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <HAL_RCC_OscConfig+0x17a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e314      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800695a:	4b32      	ldr	r3, [pc, #200]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f023 0219 	bic.w	r2, r3, #25
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	492f      	ldr	r1, [pc, #188]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006968:	4313      	orrs	r3, r2
 800696a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696c:	f7fb f9ee 	bl	8001d4c <HAL_GetTick>
 8006970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006974:	f7fb f9ea 	bl	8001d4c <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e2fe      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006986:	4b27      	ldr	r3, [pc, #156]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0f0      	beq.n	8006974 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006992:	4b24      	ldr	r3, [pc, #144]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	061b      	lsls	r3, r3, #24
 80069a0:	4920      	ldr	r1, [pc, #128]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069a6:	e045      	b.n	8006a34 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d026      	beq.n	80069fe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069b0:	4b1c      	ldr	r3, [pc, #112]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f023 0219 	bic.w	r2, r3, #25
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	4919      	ldr	r1, [pc, #100]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c2:	f7fb f9c3 	bl	8001d4c <HAL_GetTick>
 80069c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069c8:	e008      	b.n	80069dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069ca:	f7fb f9bf 	bl	8001d4c <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d901      	bls.n	80069dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e2d3      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069dc:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0f0      	beq.n	80069ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e8:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	061b      	lsls	r3, r3, #24
 80069f6:	490b      	ldr	r1, [pc, #44]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	604b      	str	r3, [r1, #4]
 80069fc:	e01a      	b.n	8006a34 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069fe:	4b09      	ldr	r3, [pc, #36]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a08      	ldr	r2, [pc, #32]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006a04:	f023 0301 	bic.w	r3, r3, #1
 8006a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0a:	f7fb f99f 	bl	8001d4c <HAL_GetTick>
 8006a0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a10:	e00a      	b.n	8006a28 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a12:	f7fb f99b 	bl	8001d4c <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d903      	bls.n	8006a28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e2af      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
 8006a24:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a28:	4b96      	ldr	r3, [pc, #600]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1ee      	bne.n	8006a12 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0310 	and.w	r3, r3, #16
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d06a      	beq.n	8006b16 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a40:	4b90      	ldr	r3, [pc, #576]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a4a:	4b8e      	ldr	r3, [pc, #568]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d007      	beq.n	8006a66 <HAL_RCC_OscConfig+0x286>
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b18      	cmp	r3, #24
 8006a5a:	d11b      	bne.n	8006a94 <HAL_RCC_OscConfig+0x2b4>
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d116      	bne.n	8006a94 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a66:	4b87      	ldr	r3, [pc, #540]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d005      	beq.n	8006a7e <HAL_RCC_OscConfig+0x29e>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	2b80      	cmp	r3, #128	; 0x80
 8006a78:	d001      	beq.n	8006a7e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e282      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a7e:	4b81      	ldr	r3, [pc, #516]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	061b      	lsls	r3, r3, #24
 8006a8c:	497d      	ldr	r1, [pc, #500]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a92:	e040      	b.n	8006b16 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d023      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006a9c:	4b79      	ldr	r3, [pc, #484]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a78      	ldr	r2, [pc, #480]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa8:	f7fb f950 	bl	8001d4c <HAL_GetTick>
 8006aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ab0:	f7fb f94c 	bl	8001d4c <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e260      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ac2:	4b70      	ldr	r3, [pc, #448]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0f0      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ace:	4b6d      	ldr	r3, [pc, #436]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	061b      	lsls	r3, r3, #24
 8006adc:	4969      	ldr	r1, [pc, #420]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60cb      	str	r3, [r1, #12]
 8006ae2:	e018      	b.n	8006b16 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006ae4:	4b67      	ldr	r3, [pc, #412]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a66      	ldr	r2, [pc, #408]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af0:	f7fb f92c 	bl	8001d4c <HAL_GetTick>
 8006af4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006af6:	e008      	b.n	8006b0a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006af8:	f7fb f928 	bl	8001d4c <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e23c      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b0a:	4b5e      	ldr	r3, [pc, #376]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1f0      	bne.n	8006af8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d036      	beq.n	8006b90 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d019      	beq.n	8006b5e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b2a:	4b56      	ldr	r3, [pc, #344]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b2e:	4a55      	ldr	r2, [pc, #340]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006b30:	f043 0301 	orr.w	r3, r3, #1
 8006b34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b36:	f7fb f909 	bl	8001d4c <HAL_GetTick>
 8006b3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b3c:	e008      	b.n	8006b50 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b3e:	f7fb f905 	bl	8001d4c <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e219      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b50:	4b4c      	ldr	r3, [pc, #304]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0f0      	beq.n	8006b3e <HAL_RCC_OscConfig+0x35e>
 8006b5c:	e018      	b.n	8006b90 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b5e:	4b49      	ldr	r3, [pc, #292]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b62:	4a48      	ldr	r2, [pc, #288]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006b64:	f023 0301 	bic.w	r3, r3, #1
 8006b68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6a:	f7fb f8ef 	bl	8001d4c <HAL_GetTick>
 8006b6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b70:	e008      	b.n	8006b84 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b72:	f7fb f8eb 	bl	8001d4c <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e1ff      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b84:	4b3f      	ldr	r3, [pc, #252]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1f0      	bne.n	8006b72 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d036      	beq.n	8006c0a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d019      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ba4:	4b37      	ldr	r3, [pc, #220]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a36      	ldr	r2, [pc, #216]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006baa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006bb0:	f7fb f8cc 	bl	8001d4c <HAL_GetTick>
 8006bb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bb8:	f7fb f8c8 	bl	8001d4c <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e1dc      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006bca:	4b2e      	ldr	r3, [pc, #184]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0f0      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x3d8>
 8006bd6:	e018      	b.n	8006c0a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006bd8:	4b2a      	ldr	r3, [pc, #168]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a29      	ldr	r2, [pc, #164]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006bde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006be2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006be4:	f7fb f8b2 	bl	8001d4c <HAL_GetTick>
 8006be8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bec:	f7fb f8ae 	bl	8001d4c <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e1c2      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bfe:	4b21      	ldr	r3, [pc, #132]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1f0      	bne.n	8006bec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0304 	and.w	r3, r3, #4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 8086 	beq.w	8006d24 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c18:	4b1b      	ldr	r3, [pc, #108]	; (8006c88 <HAL_RCC_OscConfig+0x4a8>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a1a      	ldr	r2, [pc, #104]	; (8006c88 <HAL_RCC_OscConfig+0x4a8>)
 8006c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c24:	f7fb f892 	bl	8001d4c <HAL_GetTick>
 8006c28:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c2c:	f7fb f88e 	bl	8001d4c <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b64      	cmp	r3, #100	; 0x64
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e1a2      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c3e:	4b12      	ldr	r3, [pc, #72]	; (8006c88 <HAL_RCC_OscConfig+0x4a8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0f0      	beq.n	8006c2c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d106      	bne.n	8006c60 <HAL_RCC_OscConfig+0x480>
 8006c52:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c56:	4a0b      	ldr	r2, [pc, #44]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006c58:	f043 0301 	orr.w	r3, r3, #1
 8006c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c5e:	e032      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e6>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d111      	bne.n	8006c8c <HAL_RCC_OscConfig+0x4ac>
 8006c68:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6c:	4a05      	ldr	r2, [pc, #20]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006c6e:	f023 0301 	bic.w	r3, r3, #1
 8006c72:	6713      	str	r3, [r2, #112]	; 0x70
 8006c74:	4b03      	ldr	r3, [pc, #12]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c78:	4a02      	ldr	r2, [pc, #8]	; (8006c84 <HAL_RCC_OscConfig+0x4a4>)
 8006c7a:	f023 0304 	bic.w	r3, r3, #4
 8006c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c80:	e021      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e6>
 8006c82:	bf00      	nop
 8006c84:	58024400 	.word	0x58024400
 8006c88:	58024800 	.word	0x58024800
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	2b05      	cmp	r3, #5
 8006c92:	d10c      	bne.n	8006cae <HAL_RCC_OscConfig+0x4ce>
 8006c94:	4b83      	ldr	r3, [pc, #524]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c98:	4a82      	ldr	r2, [pc, #520]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006c9a:	f043 0304 	orr.w	r3, r3, #4
 8006c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca0:	4b80      	ldr	r3, [pc, #512]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca4:	4a7f      	ldr	r2, [pc, #508]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006ca6:	f043 0301 	orr.w	r3, r3, #1
 8006caa:	6713      	str	r3, [r2, #112]	; 0x70
 8006cac:	e00b      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4e6>
 8006cae:	4b7d      	ldr	r3, [pc, #500]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	4a7c      	ldr	r2, [pc, #496]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006cb4:	f023 0301 	bic.w	r3, r3, #1
 8006cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cba:	4b7a      	ldr	r3, [pc, #488]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbe:	4a79      	ldr	r2, [pc, #484]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006cc0:	f023 0304 	bic.w	r3, r3, #4
 8006cc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d015      	beq.n	8006cfa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cce:	f7fb f83d 	bl	8001d4c <HAL_GetTick>
 8006cd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cd4:	e00a      	b.n	8006cec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd6:	f7fb f839 	bl	8001d4c <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e14b      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cec:	4b6d      	ldr	r3, [pc, #436]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0ee      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x4f6>
 8006cf8:	e014      	b.n	8006d24 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cfa:	f7fb f827 	bl	8001d4c <HAL_GetTick>
 8006cfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d00:	e00a      	b.n	8006d18 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d02:	f7fb f823 	bl	8001d4c <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e135      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d18:	4b62      	ldr	r3, [pc, #392]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1ee      	bne.n	8006d02 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 812a 	beq.w	8006f82 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006d2e:	4b5d      	ldr	r3, [pc, #372]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d36:	2b18      	cmp	r3, #24
 8006d38:	f000 80ba 	beq.w	8006eb0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	f040 8095 	bne.w	8006e70 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d46:	4b57      	ldr	r3, [pc, #348]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a56      	ldr	r2, [pc, #344]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006d4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d52:	f7fa fffb 	bl	8001d4c <HAL_GetTick>
 8006d56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d58:	e008      	b.n	8006d6c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d5a:	f7fa fff7 	bl	8001d4c <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d901      	bls.n	8006d6c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e10b      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d6c:	4b4d      	ldr	r3, [pc, #308]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1f0      	bne.n	8006d5a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d78:	4b4a      	ldr	r3, [pc, #296]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006d7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d7c:	4b4a      	ldr	r3, [pc, #296]	; (8006ea8 <HAL_RCC_OscConfig+0x6c8>)
 8006d7e:	4013      	ands	r3, r2
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006d88:	0112      	lsls	r2, r2, #4
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	4945      	ldr	r1, [pc, #276]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	628b      	str	r3, [r1, #40]	; 0x28
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	3b01      	subs	r3, #1
 8006d98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da0:	3b01      	subs	r3, #1
 8006da2:	025b      	lsls	r3, r3, #9
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	3b01      	subs	r3, #1
 8006dae:	041b      	lsls	r3, r3, #16
 8006db0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	061b      	lsls	r3, r3, #24
 8006dbe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006dc2:	4938      	ldr	r1, [pc, #224]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006dc8:	4b36      	ldr	r3, [pc, #216]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	4a35      	ldr	r2, [pc, #212]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006dce:	f023 0301 	bic.w	r3, r3, #1
 8006dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006dd4:	4b33      	ldr	r3, [pc, #204]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dd8:	4b34      	ldr	r3, [pc, #208]	; (8006eac <HAL_RCC_OscConfig+0x6cc>)
 8006dda:	4013      	ands	r3, r2
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006de0:	00d2      	lsls	r2, r2, #3
 8006de2:	4930      	ldr	r1, [pc, #192]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006de8:	4b2e      	ldr	r3, [pc, #184]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	f023 020c 	bic.w	r2, r3, #12
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df4:	492b      	ldr	r1, [pc, #172]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006dfa:	4b2a      	ldr	r3, [pc, #168]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfe:	f023 0202 	bic.w	r2, r3, #2
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e06:	4927      	ldr	r1, [pc, #156]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e0c:	4b25      	ldr	r3, [pc, #148]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	4a24      	ldr	r2, [pc, #144]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e18:	4b22      	ldr	r3, [pc, #136]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	4a21      	ldr	r2, [pc, #132]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006e24:	4b1f      	ldr	r3, [pc, #124]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	4a1e      	ldr	r2, [pc, #120]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006e2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006e30:	4b1c      	ldr	r3, [pc, #112]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	4a1b      	ldr	r2, [pc, #108]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006e36:	f043 0301 	orr.w	r3, r3, #1
 8006e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e3c:	4b19      	ldr	r3, [pc, #100]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a18      	ldr	r2, [pc, #96]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e48:	f7fa ff80 	bl	8001d4c <HAL_GetTick>
 8006e4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e50:	f7fa ff7c 	bl	8001d4c <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e090      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e62:	4b10      	ldr	r3, [pc, #64]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0f0      	beq.n	8006e50 <HAL_RCC_OscConfig+0x670>
 8006e6e:	e088      	b.n	8006f82 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e70:	4b0c      	ldr	r3, [pc, #48]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a0b      	ldr	r2, [pc, #44]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7c:	f7fa ff66 	bl	8001d4c <HAL_GetTick>
 8006e80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e82:	e008      	b.n	8006e96 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e84:	f7fa ff62 	bl	8001d4c <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d901      	bls.n	8006e96 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e076      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e96:	4b03      	ldr	r3, [pc, #12]	; (8006ea4 <HAL_RCC_OscConfig+0x6c4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1f0      	bne.n	8006e84 <HAL_RCC_OscConfig+0x6a4>
 8006ea2:	e06e      	b.n	8006f82 <HAL_RCC_OscConfig+0x7a2>
 8006ea4:	58024400 	.word	0x58024400
 8006ea8:	fffffc0c 	.word	0xfffffc0c
 8006eac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006eb0:	4b36      	ldr	r3, [pc, #216]	; (8006f8c <HAL_RCC_OscConfig+0x7ac>)
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006eb6:	4b35      	ldr	r3, [pc, #212]	; (8006f8c <HAL_RCC_OscConfig+0x7ac>)
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d031      	beq.n	8006f28 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f003 0203 	and.w	r2, r3, #3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d12a      	bne.n	8006f28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	091b      	lsrs	r3, r3, #4
 8006ed6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d122      	bne.n	8006f28 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d11a      	bne.n	8006f28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	0a5b      	lsrs	r3, r3, #9
 8006ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d111      	bne.n	8006f28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	0c1b      	lsrs	r3, r3, #16
 8006f08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d108      	bne.n	8006f28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	0e1b      	lsrs	r3, r3, #24
 8006f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d001      	beq.n	8006f2c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e02b      	b.n	8006f84 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006f2c:	4b17      	ldr	r3, [pc, #92]	; (8006f8c <HAL_RCC_OscConfig+0x7ac>)
 8006f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f30:	08db      	lsrs	r3, r3, #3
 8006f32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d01f      	beq.n	8006f82 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006f42:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <HAL_RCC_OscConfig+0x7ac>)
 8006f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f46:	4a11      	ldr	r2, [pc, #68]	; (8006f8c <HAL_RCC_OscConfig+0x7ac>)
 8006f48:	f023 0301 	bic.w	r3, r3, #1
 8006f4c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f4e:	f7fa fefd 	bl	8001d4c <HAL_GetTick>
 8006f52:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006f54:	bf00      	nop
 8006f56:	f7fa fef9 	bl	8001d4c <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d0f9      	beq.n	8006f56 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f62:	4b0a      	ldr	r3, [pc, #40]	; (8006f8c <HAL_RCC_OscConfig+0x7ac>)
 8006f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f66:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <HAL_RCC_OscConfig+0x7b0>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f6e:	00d2      	lsls	r2, r2, #3
 8006f70:	4906      	ldr	r1, [pc, #24]	; (8006f8c <HAL_RCC_OscConfig+0x7ac>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006f76:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <HAL_RCC_OscConfig+0x7ac>)
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	4a04      	ldr	r2, [pc, #16]	; (8006f8c <HAL_RCC_OscConfig+0x7ac>)
 8006f7c:	f043 0301 	orr.w	r3, r3, #1
 8006f80:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3730      	adds	r7, #48	; 0x30
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	58024400 	.word	0x58024400
 8006f90:	ffff0007 	.word	0xffff0007

08006f94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e19c      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fa8:	4b8a      	ldr	r3, [pc, #552]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 030f 	and.w	r3, r3, #15
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d910      	bls.n	8006fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fb6:	4b87      	ldr	r3, [pc, #540]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f023 020f 	bic.w	r2, r3, #15
 8006fbe:	4985      	ldr	r1, [pc, #532]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fc6:	4b83      	ldr	r3, [pc, #524]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d001      	beq.n	8006fd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e184      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d010      	beq.n	8007006 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691a      	ldr	r2, [r3, #16]
 8006fe8:	4b7b      	ldr	r3, [pc, #492]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d908      	bls.n	8007006 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ff4:	4b78      	ldr	r3, [pc, #480]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	4975      	ldr	r1, [pc, #468]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007002:	4313      	orrs	r3, r2
 8007004:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0308 	and.w	r3, r3, #8
 800700e:	2b00      	cmp	r3, #0
 8007010:	d010      	beq.n	8007034 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	695a      	ldr	r2, [r3, #20]
 8007016:	4b70      	ldr	r3, [pc, #448]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800701e:	429a      	cmp	r2, r3
 8007020:	d908      	bls.n	8007034 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007022:	4b6d      	ldr	r3, [pc, #436]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	496a      	ldr	r1, [pc, #424]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007030:	4313      	orrs	r3, r2
 8007032:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0310 	and.w	r3, r3, #16
 800703c:	2b00      	cmp	r3, #0
 800703e:	d010      	beq.n	8007062 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699a      	ldr	r2, [r3, #24]
 8007044:	4b64      	ldr	r3, [pc, #400]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800704c:	429a      	cmp	r2, r3
 800704e:	d908      	bls.n	8007062 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007050:	4b61      	ldr	r3, [pc, #388]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	495e      	ldr	r1, [pc, #376]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 800705e:	4313      	orrs	r3, r2
 8007060:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d010      	beq.n	8007090 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	69da      	ldr	r2, [r3, #28]
 8007072:	4b59      	ldr	r3, [pc, #356]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800707a:	429a      	cmp	r2, r3
 800707c:	d908      	bls.n	8007090 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800707e:	4b56      	ldr	r3, [pc, #344]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	4953      	ldr	r1, [pc, #332]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 800708c:	4313      	orrs	r3, r2
 800708e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d010      	beq.n	80070be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	4b4d      	ldr	r3, [pc, #308]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	f003 030f 	and.w	r3, r3, #15
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d908      	bls.n	80070be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070ac:	4b4a      	ldr	r3, [pc, #296]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	f023 020f 	bic.w	r2, r3, #15
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	4947      	ldr	r1, [pc, #284]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d055      	beq.n	8007176 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80070ca:	4b43      	ldr	r3, [pc, #268]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	4940      	ldr	r1, [pc, #256]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d107      	bne.n	80070f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070e4:	4b3c      	ldr	r3, [pc, #240]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d121      	bne.n	8007134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e0f6      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d107      	bne.n	800710c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070fc:	4b36      	ldr	r3, [pc, #216]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d115      	bne.n	8007134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e0ea      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d107      	bne.n	8007124 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007114:	4b30      	ldr	r3, [pc, #192]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711c:	2b00      	cmp	r3, #0
 800711e:	d109      	bne.n	8007134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e0de      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007124:	4b2c      	ldr	r3, [pc, #176]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e0d6      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007134:	4b28      	ldr	r3, [pc, #160]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	f023 0207 	bic.w	r2, r3, #7
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	4925      	ldr	r1, [pc, #148]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007142:	4313      	orrs	r3, r2
 8007144:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007146:	f7fa fe01 	bl	8001d4c <HAL_GetTick>
 800714a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714c:	e00a      	b.n	8007164 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800714e:	f7fa fdfd 	bl	8001d4c <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	f241 3288 	movw	r2, #5000	; 0x1388
 800715c:	4293      	cmp	r3, r2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e0be      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007164:	4b1c      	ldr	r3, [pc, #112]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	429a      	cmp	r2, r3
 8007174:	d1eb      	bne.n	800714e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d010      	beq.n	80071a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	4b14      	ldr	r3, [pc, #80]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	429a      	cmp	r2, r3
 8007190:	d208      	bcs.n	80071a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007192:	4b11      	ldr	r3, [pc, #68]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	f023 020f 	bic.w	r2, r3, #15
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	490e      	ldr	r1, [pc, #56]	; (80071d8 <HAL_RCC_ClockConfig+0x244>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071a4:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 030f 	and.w	r3, r3, #15
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d214      	bcs.n	80071dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071b2:	4b08      	ldr	r3, [pc, #32]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f023 020f 	bic.w	r2, r3, #15
 80071ba:	4906      	ldr	r1, [pc, #24]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	4313      	orrs	r3, r2
 80071c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071c2:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <HAL_RCC_ClockConfig+0x240>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d005      	beq.n	80071dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e086      	b.n	80072e2 <HAL_RCC_ClockConfig+0x34e>
 80071d4:	52002000 	.word	0x52002000
 80071d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d010      	beq.n	800720a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691a      	ldr	r2, [r3, #16]
 80071ec:	4b3f      	ldr	r3, [pc, #252]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d208      	bcs.n	800720a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071f8:	4b3c      	ldr	r3, [pc, #240]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	4939      	ldr	r1, [pc, #228]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007206:	4313      	orrs	r3, r2
 8007208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d010      	beq.n	8007238 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	695a      	ldr	r2, [r3, #20]
 800721a:	4b34      	ldr	r3, [pc, #208]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007222:	429a      	cmp	r2, r3
 8007224:	d208      	bcs.n	8007238 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007226:	4b31      	ldr	r3, [pc, #196]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	492e      	ldr	r1, [pc, #184]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007234:	4313      	orrs	r3, r2
 8007236:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b00      	cmp	r3, #0
 8007242:	d010      	beq.n	8007266 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	699a      	ldr	r2, [r3, #24]
 8007248:	4b28      	ldr	r3, [pc, #160]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007250:	429a      	cmp	r2, r3
 8007252:	d208      	bcs.n	8007266 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007254:	4b25      	ldr	r3, [pc, #148]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	4922      	ldr	r1, [pc, #136]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007262:	4313      	orrs	r3, r2
 8007264:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0320 	and.w	r3, r3, #32
 800726e:	2b00      	cmp	r3, #0
 8007270:	d010      	beq.n	8007294 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	69da      	ldr	r2, [r3, #28]
 8007276:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800727e:	429a      	cmp	r2, r3
 8007280:	d208      	bcs.n	8007294 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007282:	4b1a      	ldr	r3, [pc, #104]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	4917      	ldr	r1, [pc, #92]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 8007290:	4313      	orrs	r3, r2
 8007292:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007294:	f000 f834 	bl	8007300 <HAL_RCC_GetSysClockFreq>
 8007298:	4602      	mov	r2, r0
 800729a:	4b14      	ldr	r3, [pc, #80]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	0a1b      	lsrs	r3, r3, #8
 80072a0:	f003 030f 	and.w	r3, r3, #15
 80072a4:	4912      	ldr	r1, [pc, #72]	; (80072f0 <HAL_RCC_ClockConfig+0x35c>)
 80072a6:	5ccb      	ldrb	r3, [r1, r3]
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	fa22 f303 	lsr.w	r3, r2, r3
 80072b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072b2:	4b0e      	ldr	r3, [pc, #56]	; (80072ec <HAL_RCC_ClockConfig+0x358>)
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	4a0d      	ldr	r2, [pc, #52]	; (80072f0 <HAL_RCC_ClockConfig+0x35c>)
 80072bc:	5cd3      	ldrb	r3, [r2, r3]
 80072be:	f003 031f 	and.w	r3, r3, #31
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	fa22 f303 	lsr.w	r3, r2, r3
 80072c8:	4a0a      	ldr	r2, [pc, #40]	; (80072f4 <HAL_RCC_ClockConfig+0x360>)
 80072ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072cc:	4a0a      	ldr	r2, [pc, #40]	; (80072f8 <HAL_RCC_ClockConfig+0x364>)
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80072d2:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <HAL_RCC_ClockConfig+0x368>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fa fcee 	bl	8001cb8 <HAL_InitTick>
 80072dc:	4603      	mov	r3, r0
 80072de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	58024400 	.word	0x58024400
 80072f0:	08010b64 	.word	0x08010b64
 80072f4:	24000004 	.word	0x24000004
 80072f8:	24000000 	.word	0x24000000
 80072fc:	24000008 	.word	0x24000008

08007300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007300:	b480      	push	{r7}
 8007302:	b089      	sub	sp, #36	; 0x24
 8007304:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007306:	4bb3      	ldr	r3, [pc, #716]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800730e:	2b18      	cmp	r3, #24
 8007310:	f200 8155 	bhi.w	80075be <HAL_RCC_GetSysClockFreq+0x2be>
 8007314:	a201      	add	r2, pc, #4	; (adr r2, 800731c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731a:	bf00      	nop
 800731c:	08007381 	.word	0x08007381
 8007320:	080075bf 	.word	0x080075bf
 8007324:	080075bf 	.word	0x080075bf
 8007328:	080075bf 	.word	0x080075bf
 800732c:	080075bf 	.word	0x080075bf
 8007330:	080075bf 	.word	0x080075bf
 8007334:	080075bf 	.word	0x080075bf
 8007338:	080075bf 	.word	0x080075bf
 800733c:	080073a7 	.word	0x080073a7
 8007340:	080075bf 	.word	0x080075bf
 8007344:	080075bf 	.word	0x080075bf
 8007348:	080075bf 	.word	0x080075bf
 800734c:	080075bf 	.word	0x080075bf
 8007350:	080075bf 	.word	0x080075bf
 8007354:	080075bf 	.word	0x080075bf
 8007358:	080075bf 	.word	0x080075bf
 800735c:	080073ad 	.word	0x080073ad
 8007360:	080075bf 	.word	0x080075bf
 8007364:	080075bf 	.word	0x080075bf
 8007368:	080075bf 	.word	0x080075bf
 800736c:	080075bf 	.word	0x080075bf
 8007370:	080075bf 	.word	0x080075bf
 8007374:	080075bf 	.word	0x080075bf
 8007378:	080075bf 	.word	0x080075bf
 800737c:	080073b3 	.word	0x080073b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007380:	4b94      	ldr	r3, [pc, #592]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d009      	beq.n	80073a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800738c:	4b91      	ldr	r3, [pc, #580]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	08db      	lsrs	r3, r3, #3
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	4a90      	ldr	r2, [pc, #576]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007398:	fa22 f303 	lsr.w	r3, r2, r3
 800739c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800739e:	e111      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80073a0:	4b8d      	ldr	r3, [pc, #564]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073a2:	61bb      	str	r3, [r7, #24]
      break;
 80073a4:	e10e      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80073a6:	4b8d      	ldr	r3, [pc, #564]	; (80075dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073a8:	61bb      	str	r3, [r7, #24]
      break;
 80073aa:	e10b      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80073ac:	4b8c      	ldr	r3, [pc, #560]	; (80075e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80073ae:	61bb      	str	r3, [r7, #24]
      break;
 80073b0:	e108      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073b2:	4b88      	ldr	r3, [pc, #544]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80073bc:	4b85      	ldr	r3, [pc, #532]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c0:	091b      	lsrs	r3, r3, #4
 80073c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80073c8:	4b82      	ldr	r3, [pc, #520]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80073d2:	4b80      	ldr	r3, [pc, #512]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d6:	08db      	lsrs	r3, r3, #3
 80073d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	fb02 f303 	mul.w	r3, r2, r3
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 80e1 	beq.w	80075b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	f000 8083 	beq.w	8007504 <HAL_RCC_GetSysClockFreq+0x204>
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b02      	cmp	r3, #2
 8007402:	f200 80a1 	bhi.w	8007548 <HAL_RCC_GetSysClockFreq+0x248>
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <HAL_RCC_GetSysClockFreq+0x114>
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d056      	beq.n	80074c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007412:	e099      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007414:	4b6f      	ldr	r3, [pc, #444]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0320 	and.w	r3, r3, #32
 800741c:	2b00      	cmp	r3, #0
 800741e:	d02d      	beq.n	800747c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007420:	4b6c      	ldr	r3, [pc, #432]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	08db      	lsrs	r3, r3, #3
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	4a6b      	ldr	r2, [pc, #428]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800742c:	fa22 f303 	lsr.w	r3, r2, r3
 8007430:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	ee07 3a90 	vmov	s15, r3
 8007438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744a:	4b62      	ldr	r3, [pc, #392]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745a:	ed97 6a02 	vldr	s12, [r7, #8]
 800745e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80075e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800746e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007476:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800747a:	e087      	b.n	800758c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007486:	eddf 6a58 	vldr	s13, [pc, #352]	; 80075e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800748a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748e:	4b51      	ldr	r3, [pc, #324]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749e:	ed97 6a02 	vldr	s12, [r7, #8]
 80074a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80075e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80074be:	e065      	b.n	800758c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80075ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80074ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d2:	4b40      	ldr	r3, [pc, #256]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80074e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80075e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007502:	e043      	b.n	800758c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80075f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007516:	4b2f      	ldr	r3, [pc, #188]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007526:	ed97 6a02 	vldr	s12, [r7, #8]
 800752a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80075e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800752e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007542:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007546:	e021      	b.n	800758c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	eddf 6a26 	vldr	s13, [pc, #152]	; 80075ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8007556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755a:	4b1e      	ldr	r3, [pc, #120]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800755c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756a:	ed97 6a02 	vldr	s12, [r7, #8]
 800756e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80075e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007586:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800758a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800758c:	4b11      	ldr	r3, [pc, #68]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800758e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007590:	0a5b      	lsrs	r3, r3, #9
 8007592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007596:	3301      	adds	r3, #1
 8007598:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	ee07 3a90 	vmov	s15, r3
 80075a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075b0:	ee17 3a90 	vmov	r3, s15
 80075b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80075b6:	e005      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	61bb      	str	r3, [r7, #24]
      break;
 80075bc:	e002      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80075be:	4b07      	ldr	r3, [pc, #28]	; (80075dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075c0:	61bb      	str	r3, [r7, #24]
      break;
 80075c2:	bf00      	nop
  }

  return sysclockfreq;
 80075c4:	69bb      	ldr	r3, [r7, #24]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3724      	adds	r7, #36	; 0x24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	58024400 	.word	0x58024400
 80075d8:	03d09000 	.word	0x03d09000
 80075dc:	003d0900 	.word	0x003d0900
 80075e0:	017d7840 	.word	0x017d7840
 80075e4:	46000000 	.word	0x46000000
 80075e8:	4c742400 	.word	0x4c742400
 80075ec:	4a742400 	.word	0x4a742400
 80075f0:	4bbebc20 	.word	0x4bbebc20

080075f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80075fa:	f7ff fe81 	bl	8007300 <HAL_RCC_GetSysClockFreq>
 80075fe:	4602      	mov	r2, r0
 8007600:	4b10      	ldr	r3, [pc, #64]	; (8007644 <HAL_RCC_GetHCLKFreq+0x50>)
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	0a1b      	lsrs	r3, r3, #8
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	490f      	ldr	r1, [pc, #60]	; (8007648 <HAL_RCC_GetHCLKFreq+0x54>)
 800760c:	5ccb      	ldrb	r3, [r1, r3]
 800760e:	f003 031f 	and.w	r3, r3, #31
 8007612:	fa22 f303 	lsr.w	r3, r2, r3
 8007616:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007618:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <HAL_RCC_GetHCLKFreq+0x50>)
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	f003 030f 	and.w	r3, r3, #15
 8007620:	4a09      	ldr	r2, [pc, #36]	; (8007648 <HAL_RCC_GetHCLKFreq+0x54>)
 8007622:	5cd3      	ldrb	r3, [r2, r3]
 8007624:	f003 031f 	and.w	r3, r3, #31
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	fa22 f303 	lsr.w	r3, r2, r3
 800762e:	4a07      	ldr	r2, [pc, #28]	; (800764c <HAL_RCC_GetHCLKFreq+0x58>)
 8007630:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007632:	4a07      	ldr	r2, [pc, #28]	; (8007650 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007638:	4b04      	ldr	r3, [pc, #16]	; (800764c <HAL_RCC_GetHCLKFreq+0x58>)
 800763a:	681b      	ldr	r3, [r3, #0]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	58024400 	.word	0x58024400
 8007648:	08010b64 	.word	0x08010b64
 800764c:	24000004 	.word	0x24000004
 8007650:	24000000 	.word	0x24000000

08007654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007658:	f7ff ffcc 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 800765c:	4602      	mov	r2, r0
 800765e:	4b06      	ldr	r3, [pc, #24]	; (8007678 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	091b      	lsrs	r3, r3, #4
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	4904      	ldr	r1, [pc, #16]	; (800767c <HAL_RCC_GetPCLK1Freq+0x28>)
 800766a:	5ccb      	ldrb	r3, [r1, r3]
 800766c:	f003 031f 	and.w	r3, r3, #31
 8007670:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007674:	4618      	mov	r0, r3
 8007676:	bd80      	pop	{r7, pc}
 8007678:	58024400 	.word	0x58024400
 800767c:	08010b64 	.word	0x08010b64

08007680 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007684:	b0c6      	sub	sp, #280	; 0x118
 8007686:	af00      	add	r7, sp, #0
 8007688:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800768c:	2300      	movs	r3, #0
 800768e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007692:	2300      	movs	r3, #0
 8007694:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80076a4:	2500      	movs	r5, #0
 80076a6:	ea54 0305 	orrs.w	r3, r4, r5
 80076aa:	d049      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80076ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076b6:	d02f      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80076b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076bc:	d828      	bhi.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80076be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076c2:	d01a      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80076c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076c8:	d822      	bhi.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80076ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076d2:	d007      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80076d4:	e01c      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d6:	4bab      	ldr	r3, [pc, #684]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076da:	4aaa      	ldr	r2, [pc, #680]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80076e2:	e01a      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e8:	3308      	adds	r3, #8
 80076ea:	2102      	movs	r1, #2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f002 fa49 	bl	8009b84 <RCCEx_PLL2_Config>
 80076f2:	4603      	mov	r3, r0
 80076f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80076f8:	e00f      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076fe:	3328      	adds	r3, #40	; 0x28
 8007700:	2102      	movs	r1, #2
 8007702:	4618      	mov	r0, r3
 8007704:	f002 faf0 	bl	8009ce8 <RCCEx_PLL3_Config>
 8007708:	4603      	mov	r3, r0
 800770a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800770e:	e004      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007716:	e000      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800771a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10a      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007722:	4b98      	ldr	r3, [pc, #608]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007726:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800772a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800772e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007730:	4a94      	ldr	r2, [pc, #592]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007732:	430b      	orrs	r3, r1
 8007734:	6513      	str	r3, [r2, #80]	; 0x50
 8007736:	e003      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007738:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800773c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007748:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800774c:	f04f 0900 	mov.w	r9, #0
 8007750:	ea58 0309 	orrs.w	r3, r8, r9
 8007754:	d047      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800775a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775c:	2b04      	cmp	r3, #4
 800775e:	d82a      	bhi.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007760:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007766:	bf00      	nop
 8007768:	0800777d 	.word	0x0800777d
 800776c:	0800778b 	.word	0x0800778b
 8007770:	080077a1 	.word	0x080077a1
 8007774:	080077bf 	.word	0x080077bf
 8007778:	080077bf 	.word	0x080077bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800777c:	4b81      	ldr	r3, [pc, #516]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	4a80      	ldr	r2, [pc, #512]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007786:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007788:	e01a      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800778a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800778e:	3308      	adds	r3, #8
 8007790:	2100      	movs	r1, #0
 8007792:	4618      	mov	r0, r3
 8007794:	f002 f9f6 	bl	8009b84 <RCCEx_PLL2_Config>
 8007798:	4603      	mov	r3, r0
 800779a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800779e:	e00f      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a4:	3328      	adds	r3, #40	; 0x28
 80077a6:	2100      	movs	r1, #0
 80077a8:	4618      	mov	r0, r3
 80077aa:	f002 fa9d 	bl	8009ce8 <RCCEx_PLL3_Config>
 80077ae:	4603      	mov	r3, r0
 80077b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077b4:	e004      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80077bc:	e000      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80077be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10a      	bne.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077c8:	4b6e      	ldr	r3, [pc, #440]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80077ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077cc:	f023 0107 	bic.w	r1, r3, #7
 80077d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d6:	4a6b      	ldr	r2, [pc, #428]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80077d8:	430b      	orrs	r3, r1
 80077da:	6513      	str	r3, [r2, #80]	; 0x50
 80077dc:	e003      	b.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80077e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ee:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80077f2:	f04f 0b00 	mov.w	fp, #0
 80077f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80077fa:	d05b      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80077fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007800:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007804:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007808:	d03b      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800780a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800780e:	d834      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007810:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007814:	d037      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007816:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800781a:	d82e      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800781c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007820:	d033      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007822:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007826:	d828      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007828:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800782c:	d01a      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800782e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007832:	d822      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007838:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800783c:	d007      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800783e:	e01c      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007840:	4b50      	ldr	r3, [pc, #320]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	4a4f      	ldr	r2, [pc, #316]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800784a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800784c:	e01e      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800784e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007852:	3308      	adds	r3, #8
 8007854:	2100      	movs	r1, #0
 8007856:	4618      	mov	r0, r3
 8007858:	f002 f994 	bl	8009b84 <RCCEx_PLL2_Config>
 800785c:	4603      	mov	r3, r0
 800785e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007862:	e013      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007868:	3328      	adds	r3, #40	; 0x28
 800786a:	2100      	movs	r1, #0
 800786c:	4618      	mov	r0, r3
 800786e:	f002 fa3b 	bl	8009ce8 <RCCEx_PLL3_Config>
 8007872:	4603      	mov	r3, r0
 8007874:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007878:	e008      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007880:	e004      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007882:	bf00      	nop
 8007884:	e002      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007886:	bf00      	nop
 8007888:	e000      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800788a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800788c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10b      	bne.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007894:	4b3b      	ldr	r3, [pc, #236]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007898:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078a4:	4a37      	ldr	r2, [pc, #220]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80078a6:	430b      	orrs	r3, r1
 80078a8:	6593      	str	r3, [r2, #88]	; 0x58
 80078aa:	e003      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80078b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078bc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80078c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80078c4:	2300      	movs	r3, #0
 80078c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80078ce:	460b      	mov	r3, r1
 80078d0:	4313      	orrs	r3, r2
 80078d2:	d05d      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80078d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80078dc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80078e0:	d03b      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80078e2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80078e6:	d834      	bhi.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80078e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078ec:	d037      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80078ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078f2:	d82e      	bhi.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80078f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80078f8:	d033      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80078fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80078fe:	d828      	bhi.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007900:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007904:	d01a      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800790a:	d822      	bhi.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007914:	d007      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007916:	e01c      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007918:	4b1a      	ldr	r3, [pc, #104]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	4a19      	ldr	r2, [pc, #100]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800791e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007922:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007924:	e01e      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800792a:	3308      	adds	r3, #8
 800792c:	2100      	movs	r1, #0
 800792e:	4618      	mov	r0, r3
 8007930:	f002 f928 	bl	8009b84 <RCCEx_PLL2_Config>
 8007934:	4603      	mov	r3, r0
 8007936:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800793a:	e013      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800793c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007940:	3328      	adds	r3, #40	; 0x28
 8007942:	2100      	movs	r1, #0
 8007944:	4618      	mov	r0, r3
 8007946:	f002 f9cf 	bl	8009ce8 <RCCEx_PLL3_Config>
 800794a:	4603      	mov	r3, r0
 800794c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007950:	e008      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007958:	e004      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800795a:	bf00      	nop
 800795c:	e002      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800795e:	bf00      	nop
 8007960:	e000      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007964:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10d      	bne.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800796c:	4b05      	ldr	r3, [pc, #20]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800796e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007970:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007978:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800797c:	4a01      	ldr	r2, [pc, #4]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800797e:	430b      	orrs	r3, r1
 8007980:	6593      	str	r3, [r2, #88]	; 0x58
 8007982:	e005      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007984:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007988:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800798c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007998:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800799c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80079a0:	2300      	movs	r3, #0
 80079a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80079a6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4313      	orrs	r3, r2
 80079ae:	d03a      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80079b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b6:	2b30      	cmp	r3, #48	; 0x30
 80079b8:	d01f      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80079ba:	2b30      	cmp	r3, #48	; 0x30
 80079bc:	d819      	bhi.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80079be:	2b20      	cmp	r3, #32
 80079c0:	d00c      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80079c2:	2b20      	cmp	r3, #32
 80079c4:	d815      	bhi.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d019      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80079ca:	2b10      	cmp	r3, #16
 80079cc:	d111      	bne.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079ce:	4baa      	ldr	r3, [pc, #680]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	4aa9      	ldr	r2, [pc, #676]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80079da:	e011      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e0:	3308      	adds	r3, #8
 80079e2:	2102      	movs	r1, #2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f002 f8cd 	bl	8009b84 <RCCEx_PLL2_Config>
 80079ea:	4603      	mov	r3, r0
 80079ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80079f0:	e006      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80079f8:	e002      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80079fa:	bf00      	nop
 80079fc:	e000      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80079fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007a08:	4b9b      	ldr	r3, [pc, #620]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a0c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a16:	4a98      	ldr	r2, [pc, #608]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a1c:	e003      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a22:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007a32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a36:	2300      	movs	r3, #0
 8007a38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007a40:	460b      	mov	r3, r1
 8007a42:	4313      	orrs	r3, r2
 8007a44:	d051      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a50:	d035      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007a52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a56:	d82e      	bhi.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007a58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a5c:	d031      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007a5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a62:	d828      	bhi.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a68:	d01a      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a6e:	d822      	bhi.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a78:	d007      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007a7a:	e01c      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a7c:	4b7e      	ldr	r3, [pc, #504]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a80:	4a7d      	ldr	r2, [pc, #500]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007a88:	e01c      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a8e:	3308      	adds	r3, #8
 8007a90:	2100      	movs	r1, #0
 8007a92:	4618      	mov	r0, r3
 8007a94:	f002 f876 	bl	8009b84 <RCCEx_PLL2_Config>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007a9e:	e011      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa4:	3328      	adds	r3, #40	; 0x28
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f002 f91d 	bl	8009ce8 <RCCEx_PLL3_Config>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ab4:	e006      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007abc:	e002      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007abe:	bf00      	nop
 8007ac0:	e000      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10a      	bne.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007acc:	4b6a      	ldr	r3, [pc, #424]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ada:	4a67      	ldr	r2, [pc, #412]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007adc:	430b      	orrs	r3, r1
 8007ade:	6513      	str	r3, [r2, #80]	; 0x50
 8007ae0:	e003      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ae6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007af6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007afa:	2300      	movs	r3, #0
 8007afc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b00:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4313      	orrs	r3, r2
 8007b08:	d053      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b14:	d033      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007b16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b1a:	d82c      	bhi.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007b1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b20:	d02f      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007b22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b26:	d826      	bhi.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007b28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b2c:	d02b      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007b2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b32:	d820      	bhi.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b38:	d012      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007b3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b3e:	d81a      	bhi.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d022      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b48:	d115      	bne.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b4e:	3308      	adds	r3, #8
 8007b50:	2101      	movs	r1, #1
 8007b52:	4618      	mov	r0, r3
 8007b54:	f002 f816 	bl	8009b84 <RCCEx_PLL2_Config>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007b5e:	e015      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b64:	3328      	adds	r3, #40	; 0x28
 8007b66:	2101      	movs	r1, #1
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f002 f8bd 	bl	8009ce8 <RCCEx_PLL3_Config>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007b74:	e00a      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007b7c:	e006      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007b7e:	bf00      	nop
 8007b80:	e004      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007b82:	bf00      	nop
 8007b84:	e002      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007b86:	bf00      	nop
 8007b88:	e000      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007b94:	4b38      	ldr	r3, [pc, #224]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b98:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ba2:	4a35      	ldr	r2, [pc, #212]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	6513      	str	r3, [r2, #80]	; 0x50
 8007ba8:	e003      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007baa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007bc8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	d058      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bde:	d033      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007be4:	d82c      	bhi.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bea:	d02f      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf0:	d826      	bhi.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007bf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bf6:	d02b      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007bf8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bfc:	d820      	bhi.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c02:	d012      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c08:	d81a      	bhi.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d022      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007c0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c12:	d115      	bne.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c18:	3308      	adds	r3, #8
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f001 ffb1 	bl	8009b84 <RCCEx_PLL2_Config>
 8007c22:	4603      	mov	r3, r0
 8007c24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007c28:	e015      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c2e:	3328      	adds	r3, #40	; 0x28
 8007c30:	2101      	movs	r1, #1
 8007c32:	4618      	mov	r0, r3
 8007c34:	f002 f858 	bl	8009ce8 <RCCEx_PLL3_Config>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007c3e:	e00a      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007c46:	e006      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007c48:	bf00      	nop
 8007c4a:	e004      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007c4c:	bf00      	nop
 8007c4e:	e002      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007c50:	bf00      	nop
 8007c52:	e000      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10e      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007c5e:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c62:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c6e:	4a02      	ldr	r2, [pc, #8]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007c70:	430b      	orrs	r3, r1
 8007c72:	6593      	str	r3, [r2, #88]	; 0x58
 8007c74:	e006      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007c76:	bf00      	nop
 8007c78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c94:	2300      	movs	r3, #0
 8007c96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007c9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	d037      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cae:	d00e      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cb4:	d816      	bhi.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d018      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007cba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cbe:	d111      	bne.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc0:	4bc4      	ldr	r3, [pc, #784]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	4ac3      	ldr	r2, [pc, #780]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ccc:	e00f      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f001 ff54 	bl	8009b84 <RCCEx_PLL2_Config>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ce2:	e004      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007cea:	e000      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10a      	bne.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007cf6:	4bb7      	ldr	r3, [pc, #732]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d04:	4ab3      	ldr	r2, [pc, #716]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d06:	430b      	orrs	r3, r1
 8007d08:	6513      	str	r3, [r2, #80]	; 0x50
 8007d0a:	e003      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007d20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d24:	2300      	movs	r3, #0
 8007d26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4313      	orrs	r3, r2
 8007d32:	d039      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d81c      	bhi.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007d3e:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d44:	08007d81 	.word	0x08007d81
 8007d48:	08007d55 	.word	0x08007d55
 8007d4c:	08007d63 	.word	0x08007d63
 8007d50:	08007d81 	.word	0x08007d81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d54:	4b9f      	ldr	r3, [pc, #636]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	4a9e      	ldr	r2, [pc, #632]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007d60:	e00f      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d66:	3308      	adds	r3, #8
 8007d68:	2102      	movs	r1, #2
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f001 ff0a 	bl	8009b84 <RCCEx_PLL2_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007d76:	e004      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007d7e:	e000      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10a      	bne.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007d8a:	4b92      	ldr	r3, [pc, #584]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8e:	f023 0103 	bic.w	r1, r3, #3
 8007d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d98:	4a8e      	ldr	r2, [pc, #568]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d9a:	430b      	orrs	r3, r1
 8007d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d9e:	e003      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007da4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007db4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007db8:	2300      	movs	r3, #0
 8007dba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007dbe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	f000 8099 	beq.w	8007efc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007dca:	4b83      	ldr	r3, [pc, #524]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a82      	ldr	r2, [pc, #520]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007dd6:	f7f9 ffb9 	bl	8001d4c <HAL_GetTick>
 8007dda:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007dde:	e00b      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007de0:	f7f9 ffb4 	bl	8001d4c <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	2b64      	cmp	r3, #100	; 0x64
 8007dee:	d903      	bls.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007df6:	e005      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007df8:	4b77      	ldr	r3, [pc, #476]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d0ed      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007e04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d173      	bne.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007e0c:	4b71      	ldr	r3, [pc, #452]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e18:	4053      	eors	r3, r2
 8007e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d015      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e22:	4b6c      	ldr	r3, [pc, #432]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e2e:	4b69      	ldr	r3, [pc, #420]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e32:	4a68      	ldr	r2, [pc, #416]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e38:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e3a:	4b66      	ldr	r3, [pc, #408]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e3e:	4a65      	ldr	r2, [pc, #404]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e44:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007e46:	4a63      	ldr	r2, [pc, #396]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e4c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e5a:	d118      	bne.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e5c:	f7f9 ff76 	bl	8001d4c <HAL_GetTick>
 8007e60:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e64:	e00d      	b.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e66:	f7f9 ff71 	bl	8001d4c <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e70:	1ad2      	subs	r2, r2, r3
 8007e72:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d903      	bls.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8007e80:	e005      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e82:	4b54      	ldr	r3, [pc, #336]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0eb      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007e8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d129      	bne.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea6:	d10e      	bne.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007ea8:	4b4a      	ldr	r3, [pc, #296]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007eb8:	091a      	lsrs	r2, r3, #4
 8007eba:	4b48      	ldr	r3, [pc, #288]	; (8007fdc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	4a45      	ldr	r2, [pc, #276]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	6113      	str	r3, [r2, #16]
 8007ec4:	e005      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007ec6:	4b43      	ldr	r3, [pc, #268]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	4a42      	ldr	r2, [pc, #264]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ecc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007ed0:	6113      	str	r3, [r2, #16]
 8007ed2:	4b40      	ldr	r3, [pc, #256]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ed4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ee2:	4a3c      	ldr	r2, [pc, #240]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ee8:	e008      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007eea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007eee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8007ef2:	e003      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ef8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	f002 0301 	and.w	r3, r2, #1
 8007f08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007f16:	460b      	mov	r3, r1
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	f000 808f 	beq.w	800803c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f24:	2b28      	cmp	r3, #40	; 0x28
 8007f26:	d871      	bhi.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08008015 	.word	0x08008015
 8007f34:	0800800d 	.word	0x0800800d
 8007f38:	0800800d 	.word	0x0800800d
 8007f3c:	0800800d 	.word	0x0800800d
 8007f40:	0800800d 	.word	0x0800800d
 8007f44:	0800800d 	.word	0x0800800d
 8007f48:	0800800d 	.word	0x0800800d
 8007f4c:	0800800d 	.word	0x0800800d
 8007f50:	08007fe1 	.word	0x08007fe1
 8007f54:	0800800d 	.word	0x0800800d
 8007f58:	0800800d 	.word	0x0800800d
 8007f5c:	0800800d 	.word	0x0800800d
 8007f60:	0800800d 	.word	0x0800800d
 8007f64:	0800800d 	.word	0x0800800d
 8007f68:	0800800d 	.word	0x0800800d
 8007f6c:	0800800d 	.word	0x0800800d
 8007f70:	08007ff7 	.word	0x08007ff7
 8007f74:	0800800d 	.word	0x0800800d
 8007f78:	0800800d 	.word	0x0800800d
 8007f7c:	0800800d 	.word	0x0800800d
 8007f80:	0800800d 	.word	0x0800800d
 8007f84:	0800800d 	.word	0x0800800d
 8007f88:	0800800d 	.word	0x0800800d
 8007f8c:	0800800d 	.word	0x0800800d
 8007f90:	08008015 	.word	0x08008015
 8007f94:	0800800d 	.word	0x0800800d
 8007f98:	0800800d 	.word	0x0800800d
 8007f9c:	0800800d 	.word	0x0800800d
 8007fa0:	0800800d 	.word	0x0800800d
 8007fa4:	0800800d 	.word	0x0800800d
 8007fa8:	0800800d 	.word	0x0800800d
 8007fac:	0800800d 	.word	0x0800800d
 8007fb0:	08008015 	.word	0x08008015
 8007fb4:	0800800d 	.word	0x0800800d
 8007fb8:	0800800d 	.word	0x0800800d
 8007fbc:	0800800d 	.word	0x0800800d
 8007fc0:	0800800d 	.word	0x0800800d
 8007fc4:	0800800d 	.word	0x0800800d
 8007fc8:	0800800d 	.word	0x0800800d
 8007fcc:	0800800d 	.word	0x0800800d
 8007fd0:	08008015 	.word	0x08008015
 8007fd4:	58024400 	.word	0x58024400
 8007fd8:	58024800 	.word	0x58024800
 8007fdc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f001 fdcb 	bl	8009b84 <RCCEx_PLL2_Config>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ff4:	e00f      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ffa:	3328      	adds	r3, #40	; 0x28
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	4618      	mov	r0, r3
 8008000:	f001 fe72 	bl	8009ce8 <RCCEx_PLL3_Config>
 8008004:	4603      	mov	r3, r0
 8008006:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800800a:	e004      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008012:	e000      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008016:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10a      	bne.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800801e:	4bbf      	ldr	r3, [pc, #764]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008022:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800802a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800802c:	4abb      	ldr	r2, [pc, #748]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800802e:	430b      	orrs	r3, r1
 8008030:	6553      	str	r3, [r2, #84]	; 0x54
 8008032:	e003      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008034:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008038:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800803c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	f002 0302 	and.w	r3, r2, #2
 8008048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800804c:	2300      	movs	r3, #0
 800804e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008052:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008056:	460b      	mov	r3, r1
 8008058:	4313      	orrs	r3, r2
 800805a:	d041      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800805c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008062:	2b05      	cmp	r3, #5
 8008064:	d824      	bhi.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008066:	a201      	add	r2, pc, #4	; (adr r2, 800806c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806c:	080080b9 	.word	0x080080b9
 8008070:	08008085 	.word	0x08008085
 8008074:	0800809b 	.word	0x0800809b
 8008078:	080080b9 	.word	0x080080b9
 800807c:	080080b9 	.word	0x080080b9
 8008080:	080080b9 	.word	0x080080b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008088:	3308      	adds	r3, #8
 800808a:	2101      	movs	r1, #1
 800808c:	4618      	mov	r0, r3
 800808e:	f001 fd79 	bl	8009b84 <RCCEx_PLL2_Config>
 8008092:	4603      	mov	r3, r0
 8008094:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008098:	e00f      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800809a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809e:	3328      	adds	r3, #40	; 0x28
 80080a0:	2101      	movs	r1, #1
 80080a2:	4618      	mov	r0, r3
 80080a4:	f001 fe20 	bl	8009ce8 <RCCEx_PLL3_Config>
 80080a8:	4603      	mov	r3, r0
 80080aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80080ae:	e004      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80080b6:	e000      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80080b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80080c2:	4b96      	ldr	r3, [pc, #600]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80080c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c6:	f023 0107 	bic.w	r1, r3, #7
 80080ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080d0:	4a92      	ldr	r2, [pc, #584]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80080d2:	430b      	orrs	r3, r1
 80080d4:	6553      	str	r3, [r2, #84]	; 0x54
 80080d6:	e003      	b.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80080dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80080e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f002 0304 	and.w	r3, r2, #4
 80080ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80080f0:	2300      	movs	r3, #0
 80080f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80080f6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80080fa:	460b      	mov	r3, r1
 80080fc:	4313      	orrs	r3, r2
 80080fe:	d044      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008108:	2b05      	cmp	r3, #5
 800810a:	d825      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800810c:	a201      	add	r2, pc, #4	; (adr r2, 8008114 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800810e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008112:	bf00      	nop
 8008114:	08008161 	.word	0x08008161
 8008118:	0800812d 	.word	0x0800812d
 800811c:	08008143 	.word	0x08008143
 8008120:	08008161 	.word	0x08008161
 8008124:	08008161 	.word	0x08008161
 8008128:	08008161 	.word	0x08008161
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800812c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008130:	3308      	adds	r3, #8
 8008132:	2101      	movs	r1, #1
 8008134:	4618      	mov	r0, r3
 8008136:	f001 fd25 	bl	8009b84 <RCCEx_PLL2_Config>
 800813a:	4603      	mov	r3, r0
 800813c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008140:	e00f      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008146:	3328      	adds	r3, #40	; 0x28
 8008148:	2101      	movs	r1, #1
 800814a:	4618      	mov	r0, r3
 800814c:	f001 fdcc 	bl	8009ce8 <RCCEx_PLL3_Config>
 8008150:	4603      	mov	r3, r0
 8008152:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008156:	e004      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800815e:	e000      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008162:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10b      	bne.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800816a:	4b6c      	ldr	r3, [pc, #432]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800816c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800816e:	f023 0107 	bic.w	r1, r3, #7
 8008172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817a:	4a68      	ldr	r2, [pc, #416]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800817c:	430b      	orrs	r3, r1
 800817e:	6593      	str	r3, [r2, #88]	; 0x58
 8008180:	e003      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008182:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008186:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800818a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	f002 0320 	and.w	r3, r2, #32
 8008196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800819a:	2300      	movs	r3, #0
 800819c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80081a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80081a4:	460b      	mov	r3, r1
 80081a6:	4313      	orrs	r3, r2
 80081a8:	d055      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80081aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081b6:	d033      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80081b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081bc:	d82c      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80081be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c2:	d02f      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80081c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c8:	d826      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80081ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081ce:	d02b      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80081d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081d4:	d820      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80081d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081da:	d012      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80081dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081e0:	d81a      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d022      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80081e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081ea:	d115      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f0:	3308      	adds	r3, #8
 80081f2:	2100      	movs	r1, #0
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 fcc5 	bl	8009b84 <RCCEx_PLL2_Config>
 80081fa:	4603      	mov	r3, r0
 80081fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008200:	e015      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008206:	3328      	adds	r3, #40	; 0x28
 8008208:	2102      	movs	r1, #2
 800820a:	4618      	mov	r0, r3
 800820c:	f001 fd6c 	bl	8009ce8 <RCCEx_PLL3_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008216:	e00a      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800821e:	e006      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008220:	bf00      	nop
 8008222:	e004      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008224:	bf00      	nop
 8008226:	e002      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008228:	bf00      	nop
 800822a:	e000      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800822c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800822e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10b      	bne.n	800824e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008236:	4b39      	ldr	r3, [pc, #228]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800823e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008246:	4a35      	ldr	r2, [pc, #212]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008248:	430b      	orrs	r3, r1
 800824a:	6553      	str	r3, [r2, #84]	; 0x54
 800824c:	e003      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008252:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008262:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008266:	2300      	movs	r3, #0
 8008268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800826c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008270:	460b      	mov	r3, r1
 8008272:	4313      	orrs	r3, r2
 8008274:	d058      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800827a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800827e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008282:	d033      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008284:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008288:	d82c      	bhi.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800828a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800828e:	d02f      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008294:	d826      	bhi.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008296:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800829a:	d02b      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800829c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082a0:	d820      	bhi.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80082a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a6:	d012      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80082a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ac:	d81a      	bhi.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d022      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80082b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082b6:	d115      	bne.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082bc:	3308      	adds	r3, #8
 80082be:	2100      	movs	r1, #0
 80082c0:	4618      	mov	r0, r3
 80082c2:	f001 fc5f 	bl	8009b84 <RCCEx_PLL2_Config>
 80082c6:	4603      	mov	r3, r0
 80082c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80082cc:	e015      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d2:	3328      	adds	r3, #40	; 0x28
 80082d4:	2102      	movs	r1, #2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f001 fd06 	bl	8009ce8 <RCCEx_PLL3_Config>
 80082dc:	4603      	mov	r3, r0
 80082de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80082e2:	e00a      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80082ea:	e006      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80082ec:	bf00      	nop
 80082ee:	e004      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80082f0:	bf00      	nop
 80082f2:	e002      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80082f4:	bf00      	nop
 80082f6:	e000      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80082f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10e      	bne.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008302:	4b06      	ldr	r3, [pc, #24]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008306:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800830a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800830e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008312:	4a02      	ldr	r2, [pc, #8]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008314:	430b      	orrs	r3, r1
 8008316:	6593      	str	r3, [r2, #88]	; 0x58
 8008318:	e006      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800831a:	bf00      	nop
 800831c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008320:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008324:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008330:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008334:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008338:	2300      	movs	r3, #0
 800833a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800833e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008342:	460b      	mov	r3, r1
 8008344:	4313      	orrs	r3, r2
 8008346:	d055      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800834c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008350:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008354:	d033      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008356:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800835a:	d82c      	bhi.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800835c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008360:	d02f      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008366:	d826      	bhi.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008368:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800836c:	d02b      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800836e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008372:	d820      	bhi.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008378:	d012      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800837a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800837e:	d81a      	bhi.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d022      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008388:	d115      	bne.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800838a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800838e:	3308      	adds	r3, #8
 8008390:	2100      	movs	r1, #0
 8008392:	4618      	mov	r0, r3
 8008394:	f001 fbf6 	bl	8009b84 <RCCEx_PLL2_Config>
 8008398:	4603      	mov	r3, r0
 800839a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800839e:	e015      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083a4:	3328      	adds	r3, #40	; 0x28
 80083a6:	2102      	movs	r1, #2
 80083a8:	4618      	mov	r0, r3
 80083aa:	f001 fc9d 	bl	8009ce8 <RCCEx_PLL3_Config>
 80083ae:	4603      	mov	r3, r0
 80083b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80083b4:	e00a      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80083bc:	e006      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80083be:	bf00      	nop
 80083c0:	e004      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80083c2:	bf00      	nop
 80083c4:	e002      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80083c6:	bf00      	nop
 80083c8:	e000      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80083ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10b      	bne.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80083d4:	4ba0      	ldr	r3, [pc, #640]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80083dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083e4:	4a9c      	ldr	r2, [pc, #624]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083e6:	430b      	orrs	r3, r1
 80083e8:	6593      	str	r3, [r2, #88]	; 0x58
 80083ea:	e003      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80083f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80083f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	f002 0308 	and.w	r3, r2, #8
 8008400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008404:	2300      	movs	r3, #0
 8008406:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800840a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800840e:	460b      	mov	r3, r1
 8008410:	4313      	orrs	r3, r2
 8008412:	d01e      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800841c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008420:	d10c      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008426:	3328      	adds	r3, #40	; 0x28
 8008428:	2102      	movs	r1, #2
 800842a:	4618      	mov	r0, r3
 800842c:	f001 fc5c 	bl	8009ce8 <RCCEx_PLL3_Config>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d002      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800843c:	4b86      	ldr	r3, [pc, #536]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800843e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008440:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800844c:	4a82      	ldr	r2, [pc, #520]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800844e:	430b      	orrs	r3, r1
 8008450:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845a:	f002 0310 	and.w	r3, r2, #16
 800845e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008462:	2300      	movs	r3, #0
 8008464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008468:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800846c:	460b      	mov	r3, r1
 800846e:	4313      	orrs	r3, r2
 8008470:	d01e      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800847a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847e:	d10c      	bne.n	800849a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008484:	3328      	adds	r3, #40	; 0x28
 8008486:	2102      	movs	r1, #2
 8008488:	4618      	mov	r0, r3
 800848a:	f001 fc2d 	bl	8009ce8 <RCCEx_PLL3_Config>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d002      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800849a:	4b6f      	ldr	r3, [pc, #444]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800849c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800849e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80084a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084aa:	4a6b      	ldr	r2, [pc, #428]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084ac:	430b      	orrs	r3, r1
 80084ae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80084b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80084bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80084be:	2300      	movs	r3, #0
 80084c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084c2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80084c6:	460b      	mov	r3, r1
 80084c8:	4313      	orrs	r3, r2
 80084ca:	d03e      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80084cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80084d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084d8:	d022      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80084da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084de:	d81b      	bhi.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80084e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084e8:	d00b      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80084ea:	e015      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084f0:	3308      	adds	r3, #8
 80084f2:	2100      	movs	r1, #0
 80084f4:	4618      	mov	r0, r3
 80084f6:	f001 fb45 	bl	8009b84 <RCCEx_PLL2_Config>
 80084fa:	4603      	mov	r3, r0
 80084fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008500:	e00f      	b.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008506:	3328      	adds	r3, #40	; 0x28
 8008508:	2102      	movs	r1, #2
 800850a:	4618      	mov	r0, r3
 800850c:	f001 fbec 	bl	8009ce8 <RCCEx_PLL3_Config>
 8008510:	4603      	mov	r3, r0
 8008512:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008516:	e004      	b.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800851e:	e000      	b.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008522:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10b      	bne.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800852a:	4b4b      	ldr	r3, [pc, #300]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800852c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008536:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800853a:	4a47      	ldr	r2, [pc, #284]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800853c:	430b      	orrs	r3, r1
 800853e:	6593      	str	r3, [r2, #88]	; 0x58
 8008540:	e003      	b.n	800854a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008542:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008546:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800854a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008556:	673b      	str	r3, [r7, #112]	; 0x70
 8008558:	2300      	movs	r3, #0
 800855a:	677b      	str	r3, [r7, #116]	; 0x74
 800855c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008560:	460b      	mov	r3, r1
 8008562:	4313      	orrs	r3, r2
 8008564:	d03b      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800856a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800856e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008572:	d01f      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008574:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008578:	d818      	bhi.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800857a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800857e:	d003      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008580:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008584:	d007      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008586:	e011      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008588:	4b33      	ldr	r3, [pc, #204]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	4a32      	ldr	r2, [pc, #200]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800858e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008592:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008594:	e00f      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800859a:	3328      	adds	r3, #40	; 0x28
 800859c:	2101      	movs	r1, #1
 800859e:	4618      	mov	r0, r3
 80085a0:	f001 fba2 	bl	8009ce8 <RCCEx_PLL3_Config>
 80085a4:	4603      	mov	r3, r0
 80085a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80085aa:	e004      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80085b2:	e000      	b.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80085b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10b      	bne.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085be:	4b26      	ldr	r3, [pc, #152]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80085c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80085c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085ce:	4a22      	ldr	r2, [pc, #136]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80085d0:	430b      	orrs	r3, r1
 80085d2:	6553      	str	r3, [r2, #84]	; 0x54
 80085d4:	e003      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80085da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80085de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80085ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80085ec:	2300      	movs	r3, #0
 80085ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085f0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80085f4:	460b      	mov	r3, r1
 80085f6:	4313      	orrs	r3, r2
 80085f8:	d034      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80085fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008608:	d007      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800860a:	e011      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800860c:	4b12      	ldr	r3, [pc, #72]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800860e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008610:	4a11      	ldr	r2, [pc, #68]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008616:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008618:	e00e      	b.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800861a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800861e:	3308      	adds	r3, #8
 8008620:	2102      	movs	r1, #2
 8008622:	4618      	mov	r0, r3
 8008624:	f001 faae 	bl	8009b84 <RCCEx_PLL2_Config>
 8008628:	4603      	mov	r3, r0
 800862a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800862e:	e003      	b.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008638:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10d      	bne.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008640:	4b05      	ldr	r3, [pc, #20]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008644:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800864c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800864e:	4a02      	ldr	r2, [pc, #8]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008650:	430b      	orrs	r3, r1
 8008652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008654:	e006      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008656:	bf00      	nop
 8008658:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008660:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008670:	663b      	str	r3, [r7, #96]	; 0x60
 8008672:	2300      	movs	r3, #0
 8008674:	667b      	str	r3, [r7, #100]	; 0x64
 8008676:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800867a:	460b      	mov	r3, r1
 800867c:	4313      	orrs	r3, r2
 800867e:	d00c      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008684:	3328      	adds	r3, #40	; 0x28
 8008686:	2102      	movs	r1, #2
 8008688:	4618      	mov	r0, r3
 800868a:	f001 fb2d 	bl	8009ce8 <RCCEx_PLL3_Config>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800869a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80086a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80086a8:	2300      	movs	r3, #0
 80086aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086ac:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80086b0:	460b      	mov	r3, r1
 80086b2:	4313      	orrs	r3, r2
 80086b4:	d036      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80086b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086c0:	d018      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80086c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086c6:	d811      	bhi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80086c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086cc:	d014      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80086ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086d2:	d80b      	bhi.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d011      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80086d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086dc:	d106      	bne.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086de:	4bb7      	ldr	r3, [pc, #732]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80086e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e2:	4ab6      	ldr	r2, [pc, #728]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80086e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80086ea:	e008      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80086f2:	e004      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80086f4:	bf00      	nop
 80086f6:	e002      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80086f8:	bf00      	nop
 80086fa:	e000      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80086fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10a      	bne.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008706:	4bad      	ldr	r3, [pc, #692]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800870e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008714:	4aa9      	ldr	r2, [pc, #676]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008716:	430b      	orrs	r3, r1
 8008718:	6553      	str	r3, [r2, #84]	; 0x54
 800871a:	e003      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800871c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008720:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008730:	653b      	str	r3, [r7, #80]	; 0x50
 8008732:	2300      	movs	r3, #0
 8008734:	657b      	str	r3, [r7, #84]	; 0x54
 8008736:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800873a:	460b      	mov	r3, r1
 800873c:	4313      	orrs	r3, r2
 800873e:	d009      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008740:	4b9e      	ldr	r3, [pc, #632]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008744:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800874c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800874e:	4a9b      	ldr	r2, [pc, #620]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008750:	430b      	orrs	r3, r1
 8008752:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008760:	64bb      	str	r3, [r7, #72]	; 0x48
 8008762:	2300      	movs	r3, #0
 8008764:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008766:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800876a:	460b      	mov	r3, r1
 800876c:	4313      	orrs	r3, r2
 800876e:	d009      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008770:	4b92      	ldr	r3, [pc, #584]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008774:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800877c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800877e:	4a8f      	ldr	r2, [pc, #572]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008780:	430b      	orrs	r3, r1
 8008782:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008790:	643b      	str	r3, [r7, #64]	; 0x40
 8008792:	2300      	movs	r3, #0
 8008794:	647b      	str	r3, [r7, #68]	; 0x44
 8008796:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800879a:	460b      	mov	r3, r1
 800879c:	4313      	orrs	r3, r2
 800879e:	d00e      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087a0:	4b86      	ldr	r3, [pc, #536]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	4a85      	ldr	r2, [pc, #532]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087aa:	6113      	str	r3, [r2, #16]
 80087ac:	4b83      	ldr	r3, [pc, #524]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087ae:	6919      	ldr	r1, [r3, #16]
 80087b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087b8:	4a80      	ldr	r2, [pc, #512]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087ba:	430b      	orrs	r3, r1
 80087bc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80087be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80087ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80087cc:	2300      	movs	r3, #0
 80087ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087d0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80087d4:	460b      	mov	r3, r1
 80087d6:	4313      	orrs	r3, r2
 80087d8:	d009      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80087da:	4b78      	ldr	r3, [pc, #480]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087de:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80087e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e8:	4a74      	ldr	r2, [pc, #464]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80087ea:	430b      	orrs	r3, r1
 80087ec:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80087ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80087fa:	633b      	str	r3, [r7, #48]	; 0x30
 80087fc:	2300      	movs	r3, #0
 80087fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008800:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008804:	460b      	mov	r3, r1
 8008806:	4313      	orrs	r3, r2
 8008808:	d00a      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800880a:	4b6c      	ldr	r3, [pc, #432]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800880c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800880e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800881a:	4a68      	ldr	r2, [pc, #416]	; (80089bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800881c:	430b      	orrs	r3, r1
 800881e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	2100      	movs	r1, #0
 800882a:	62b9      	str	r1, [r7, #40]	; 0x28
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008832:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008836:	460b      	mov	r3, r1
 8008838:	4313      	orrs	r3, r2
 800883a:	d011      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800883c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008840:	3308      	adds	r3, #8
 8008842:	2100      	movs	r1, #0
 8008844:	4618      	mov	r0, r3
 8008846:	f001 f99d 	bl	8009b84 <RCCEx_PLL2_Config>
 800884a:	4603      	mov	r3, r0
 800884c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008850:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008858:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800885c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	2100      	movs	r1, #0
 800886a:	6239      	str	r1, [r7, #32]
 800886c:	f003 0302 	and.w	r3, r3, #2
 8008870:	627b      	str	r3, [r7, #36]	; 0x24
 8008872:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008876:	460b      	mov	r3, r1
 8008878:	4313      	orrs	r3, r2
 800887a:	d011      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800887c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008880:	3308      	adds	r3, #8
 8008882:	2101      	movs	r1, #1
 8008884:	4618      	mov	r0, r3
 8008886:	f001 f97d 	bl	8009b84 <RCCEx_PLL2_Config>
 800888a:	4603      	mov	r3, r0
 800888c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008890:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008894:	2b00      	cmp	r3, #0
 8008896:	d003      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008898:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800889c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80088a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a8:	2100      	movs	r1, #0
 80088aa:	61b9      	str	r1, [r7, #24]
 80088ac:	f003 0304 	and.w	r3, r3, #4
 80088b0:	61fb      	str	r3, [r7, #28]
 80088b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80088b6:	460b      	mov	r3, r1
 80088b8:	4313      	orrs	r3, r2
 80088ba:	d011      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088c0:	3308      	adds	r3, #8
 80088c2:	2102      	movs	r1, #2
 80088c4:	4618      	mov	r0, r3
 80088c6:	f001 f95d 	bl	8009b84 <RCCEx_PLL2_Config>
 80088ca:	4603      	mov	r3, r0
 80088cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80088d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80088dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80088e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e8:	2100      	movs	r1, #0
 80088ea:	6139      	str	r1, [r7, #16]
 80088ec:	f003 0308 	and.w	r3, r3, #8
 80088f0:	617b      	str	r3, [r7, #20]
 80088f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80088f6:	460b      	mov	r3, r1
 80088f8:	4313      	orrs	r3, r2
 80088fa:	d011      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008900:	3328      	adds	r3, #40	; 0x28
 8008902:	2100      	movs	r1, #0
 8008904:	4618      	mov	r0, r3
 8008906:	f001 f9ef 	bl	8009ce8 <RCCEx_PLL3_Config>
 800890a:	4603      	mov	r3, r0
 800890c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8008910:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008914:	2b00      	cmp	r3, #0
 8008916:	d003      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008918:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800891c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	2100      	movs	r1, #0
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	f003 0310 	and.w	r3, r3, #16
 8008930:	60fb      	str	r3, [r7, #12]
 8008932:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008936:	460b      	mov	r3, r1
 8008938:	4313      	orrs	r3, r2
 800893a:	d011      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800893c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008940:	3328      	adds	r3, #40	; 0x28
 8008942:	2101      	movs	r1, #1
 8008944:	4618      	mov	r0, r3
 8008946:	f001 f9cf 	bl	8009ce8 <RCCEx_PLL3_Config>
 800894a:	4603      	mov	r3, r0
 800894c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008950:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008958:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800895c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	2100      	movs	r1, #0
 800896a:	6039      	str	r1, [r7, #0]
 800896c:	f003 0320 	and.w	r3, r3, #32
 8008970:	607b      	str	r3, [r7, #4]
 8008972:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008976:	460b      	mov	r3, r1
 8008978:	4313      	orrs	r3, r2
 800897a:	d011      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800897c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008980:	3328      	adds	r3, #40	; 0x28
 8008982:	2102      	movs	r1, #2
 8008984:	4618      	mov	r0, r3
 8008986:	f001 f9af 	bl	8009ce8 <RCCEx_PLL3_Config>
 800898a:	4603      	mov	r3, r0
 800898c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008990:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008998:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800899c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80089a0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	e000      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80089b4:	46bd      	mov	sp, r7
 80089b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089ba:	bf00      	nop
 80089bc:	58024400 	.word	0x58024400

080089c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b090      	sub	sp, #64	; 0x40
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80089ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ce:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80089d2:	430b      	orrs	r3, r1
 80089d4:	f040 8094 	bne.w	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80089d8:	4b9b      	ldr	r3, [pc, #620]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80089da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089dc:	f003 0307 	and.w	r3, r3, #7
 80089e0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80089e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e4:	2b04      	cmp	r3, #4
 80089e6:	f200 8087 	bhi.w	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80089ea:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a05 	.word	0x08008a05
 80089f4:	08008a2d 	.word	0x08008a2d
 80089f8:	08008a55 	.word	0x08008a55
 80089fc:	08008af1 	.word	0x08008af1
 8008a00:	08008a7d 	.word	0x08008a7d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a04:	4b90      	ldr	r3, [pc, #576]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a10:	d108      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 ff62 	bl	80098e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a20:	f000 bc93 	b.w	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a28:	f000 bc8f 	b.w	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a2c:	4b86      	ldr	r3, [pc, #536]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a38:	d108      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a3a:	f107 0318 	add.w	r3, r7, #24
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fca6 	bl	8009390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a48:	f000 bc7f 	b.w	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a50:	f000 bc7b 	b.w	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a54:	4b7c      	ldr	r3, [pc, #496]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a60:	d108      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a62:	f107 030c 	add.w	r3, r7, #12
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fde6 	bl	8009638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a70:	f000 bc6b 	b.w	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a78:	f000 bc67 	b.w	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a7c:	4b72      	ldr	r3, [pc, #456]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a84:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a86:	4b70      	ldr	r3, [pc, #448]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0304 	and.w	r3, r3, #4
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d10c      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d109      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a98:	4b6b      	ldr	r3, [pc, #428]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	08db      	lsrs	r3, r3, #3
 8008a9e:	f003 0303 	and.w	r3, r3, #3
 8008aa2:	4a6a      	ldr	r2, [pc, #424]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aaa:	e01f      	b.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008aac:	4b66      	ldr	r3, [pc, #408]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ab8:	d106      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008abc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ac0:	d102      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ac2:	4b63      	ldr	r3, [pc, #396]	; (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ac6:	e011      	b.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ac8:	4b5f      	ldr	r3, [pc, #380]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ad4:	d106      	bne.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008adc:	d102      	bne.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ade:	4b5d      	ldr	r3, [pc, #372]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae2:	e003      	b.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008ae8:	f000 bc2f 	b.w	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008aec:	f000 bc2d 	b.w	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008af0:	4b59      	ldr	r3, [pc, #356]	; (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008af4:	f000 bc29 	b.w	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008afc:	f000 bc25 	b.w	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b04:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008b08:	430b      	orrs	r3, r1
 8008b0a:	f040 80a7 	bne.w	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008b0e:	4b4e      	ldr	r3, [pc, #312]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b12:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008b16:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b1e:	d054      	beq.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b26:	f200 808b 	bhi.w	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b30:	f000 8083 	beq.w	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b3a:	f200 8081 	bhi.w	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b44:	d02f      	beq.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b4c:	d878      	bhi.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d004      	beq.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b5a:	d012      	beq.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008b5c:	e070      	b.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b5e:	4b3a      	ldr	r3, [pc, #232]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b6a:	d107      	bne.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 feb5 	bl	80098e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b7a:	e3e6      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b80:	e3e3      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b82:	4b31      	ldr	r3, [pc, #196]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b8e:	d107      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b90:	f107 0318 	add.w	r3, r7, #24
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 fbfb 	bl	8009390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b9e:	e3d4      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ba4:	e3d1      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ba6:	4b28      	ldr	r3, [pc, #160]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bb2:	d107      	bne.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bb4:	f107 030c 	add.w	r3, r7, #12
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 fd3d 	bl	8009638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bc2:	e3c2      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc8:	e3bf      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bca:	4b1f      	ldr	r3, [pc, #124]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bd2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bd4:	4b1c      	ldr	r3, [pc, #112]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0304 	and.w	r3, r3, #4
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	d10c      	bne.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d109      	bne.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008be6:	4b18      	ldr	r3, [pc, #96]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	08db      	lsrs	r3, r3, #3
 8008bec:	f003 0303 	and.w	r3, r3, #3
 8008bf0:	4a16      	ldr	r2, [pc, #88]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bf8:	e01e      	b.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bfa:	4b13      	ldr	r3, [pc, #76]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c06:	d106      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c0e:	d102      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c10:	4b0f      	ldr	r3, [pc, #60]	; (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c14:	e010      	b.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c16:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c22:	d106      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c2a:	d102      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c2c:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c30:	e002      	b.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008c36:	e388      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c38:	e387      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c3a:	4b07      	ldr	r3, [pc, #28]	; (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c3e:	e384      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c44:	e381      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c46:	bf00      	nop
 8008c48:	58024400 	.word	0x58024400
 8008c4c:	03d09000 	.word	0x03d09000
 8008c50:	003d0900 	.word	0x003d0900
 8008c54:	017d7840 	.word	0x017d7840
 8008c58:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c60:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008c64:	430b      	orrs	r3, r1
 8008c66:	f040 809c 	bne.w	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008c6a:	4b9e      	ldr	r3, [pc, #632]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c6e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008c72:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c7a:	d054      	beq.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c82:	f200 808b 	bhi.w	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c8c:	f000 8083 	beq.w	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c96:	f200 8081 	bhi.w	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ca0:	d02f      	beq.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ca8:	d878      	bhi.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d004      	beq.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cb6:	d012      	beq.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008cb8:	e070      	b.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cba:	4b8a      	ldr	r3, [pc, #552]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cc6:	d107      	bne.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 fe07 	bl	80098e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cd6:	e338      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cdc:	e335      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cde:	4b81      	ldr	r3, [pc, #516]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ce6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cea:	d107      	bne.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cec:	f107 0318 	add.w	r3, r7, #24
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 fb4d 	bl	8009390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cfa:	e326      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d00:	e323      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d02:	4b78      	ldr	r3, [pc, #480]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d0e:	d107      	bne.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d10:	f107 030c 	add.w	r3, r7, #12
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 fc8f 	bl	8009638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d1e:	e314      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d24:	e311      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d26:	4b6f      	ldr	r3, [pc, #444]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d2e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d30:	4b6c      	ldr	r3, [pc, #432]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0304 	and.w	r3, r3, #4
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	d10c      	bne.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d109      	bne.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d42:	4b68      	ldr	r3, [pc, #416]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	08db      	lsrs	r3, r3, #3
 8008d48:	f003 0303 	and.w	r3, r3, #3
 8008d4c:	4a66      	ldr	r2, [pc, #408]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d54:	e01e      	b.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d56:	4b63      	ldr	r3, [pc, #396]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d62:	d106      	bne.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d6a:	d102      	bne.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d6c:	4b5f      	ldr	r3, [pc, #380]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d70:	e010      	b.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d72:	4b5c      	ldr	r3, [pc, #368]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d7e:	d106      	bne.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d86:	d102      	bne.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d88:	4b59      	ldr	r3, [pc, #356]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d8c:	e002      	b.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008d92:	e2da      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d94:	e2d9      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d96:	4b57      	ldr	r3, [pc, #348]	; (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d9a:	e2d6      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008da0:	e2d3      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008da6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008daa:	430b      	orrs	r3, r1
 8008dac:	f040 80a7 	bne.w	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008db0:	4b4c      	ldr	r3, [pc, #304]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008db8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dc0:	d055      	beq.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dc8:	f200 8096 	bhi.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dd2:	f000 8084 	beq.w	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ddc:	f200 808c 	bhi.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008de6:	d030      	beq.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dee:	f200 8083 	bhi.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d004      	beq.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dfe:	d012      	beq.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008e00:	e07a      	b.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e02:	4b38      	ldr	r3, [pc, #224]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e0e:	d107      	bne.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e14:	4618      	mov	r0, r3
 8008e16:	f000 fd63 	bl	80098e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e1e:	e294      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e20:	2300      	movs	r3, #0
 8008e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e24:	e291      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e26:	4b2f      	ldr	r3, [pc, #188]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e32:	d107      	bne.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e34:	f107 0318 	add.w	r3, r7, #24
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 faa9 	bl	8009390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e42:	e282      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e48:	e27f      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e4a:	4b26      	ldr	r3, [pc, #152]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e56:	d107      	bne.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e58:	f107 030c 	add.w	r3, r7, #12
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f000 fbeb 	bl	8009638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e66:	e270      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e6c:	e26d      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e6e:	4b1d      	ldr	r3, [pc, #116]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e76:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e78:	4b1a      	ldr	r3, [pc, #104]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0304 	and.w	r3, r3, #4
 8008e80:	2b04      	cmp	r3, #4
 8008e82:	d10c      	bne.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d109      	bne.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e8a:	4b16      	ldr	r3, [pc, #88]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	08db      	lsrs	r3, r3, #3
 8008e90:	f003 0303 	and.w	r3, r3, #3
 8008e94:	4a14      	ldr	r2, [pc, #80]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008e96:	fa22 f303 	lsr.w	r3, r2, r3
 8008e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e9c:	e01e      	b.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e9e:	4b11      	ldr	r3, [pc, #68]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eaa:	d106      	bne.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eb2:	d102      	bne.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008eb4:	4b0d      	ldr	r3, [pc, #52]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb8:	e010      	b.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008eba:	4b0a      	ldr	r3, [pc, #40]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ec6:	d106      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ece:	d102      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed4:	e002      	b.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008eda:	e236      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008edc:	e235      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ede:	4b05      	ldr	r3, [pc, #20]	; (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ee2:	e232      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ee4:	58024400 	.word	0x58024400
 8008ee8:	03d09000 	.word	0x03d09000
 8008eec:	003d0900 	.word	0x003d0900
 8008ef0:	017d7840 	.word	0x017d7840
 8008ef4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008efc:	e225      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008efe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f02:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008f06:	430b      	orrs	r3, r1
 8008f08:	f040 8085 	bne.w	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008f0c:	4b9c      	ldr	r3, [pc, #624]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f10:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008f14:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f1c:	d06b      	beq.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f24:	d874      	bhi.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f2c:	d056      	beq.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f34:	d86c      	bhi.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f3c:	d03b      	beq.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f44:	d864      	bhi.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f4c:	d021      	beq.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f54:	d85c      	bhi.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d004      	beq.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f62:	d004      	beq.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008f64:	e054      	b.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008f66:	f7fe fb75 	bl	8007654 <HAL_RCC_GetPCLK1Freq>
 8008f6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f6c:	e1ed      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f6e:	4b84      	ldr	r3, [pc, #528]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f7a:	d107      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f7c:	f107 0318 	add.w	r3, r7, #24
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fa05 	bl	8009390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f8a:	e1de      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f90:	e1db      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f92:	4b7b      	ldr	r3, [pc, #492]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f9e:	d107      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fa0:	f107 030c 	add.w	r3, r7, #12
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 fb47 	bl	8009638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fae:	e1cc      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fb4:	e1c9      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008fb6:	4b72      	ldr	r3, [pc, #456]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 0304 	and.w	r3, r3, #4
 8008fbe:	2b04      	cmp	r3, #4
 8008fc0:	d109      	bne.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fc2:	4b6f      	ldr	r3, [pc, #444]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	08db      	lsrs	r3, r3, #3
 8008fc8:	f003 0303 	and.w	r3, r3, #3
 8008fcc:	4a6d      	ldr	r2, [pc, #436]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008fce:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fd4:	e1b9      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fda:	e1b6      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008fdc:	4b68      	ldr	r3, [pc, #416]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fe8:	d102      	bne.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008fea:	4b67      	ldr	r3, [pc, #412]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fee:	e1ac      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ff4:	e1a9      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ff6:	4b62      	ldr	r3, [pc, #392]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009002:	d102      	bne.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8009004:	4b61      	ldr	r3, [pc, #388]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009008:	e19f      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800900e:	e19c      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009014:	e199      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800901a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800901e:	430b      	orrs	r3, r1
 8009020:	d173      	bne.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009022:	4b57      	ldr	r3, [pc, #348]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009026:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800902a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009032:	d02f      	beq.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8009034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800903a:	d863      	bhi.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800903c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903e:	2b00      	cmp	r3, #0
 8009040:	d004      	beq.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8009042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009048:	d012      	beq.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800904a:	e05b      	b.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800904c:	4b4c      	ldr	r3, [pc, #304]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009058:	d107      	bne.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800905a:	f107 0318 	add.w	r3, r7, #24
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f996 	bl	8009390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009068:	e16f      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800906e:	e16c      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009070:	4b43      	ldr	r3, [pc, #268]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800907c:	d107      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800907e:	f107 030c 	add.w	r3, r7, #12
 8009082:	4618      	mov	r0, r3
 8009084:	f000 fad8 	bl	8009638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800908c:	e15d      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800908e:	2300      	movs	r3, #0
 8009090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009092:	e15a      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009094:	4b3a      	ldr	r3, [pc, #232]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009098:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800909c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800909e:	4b38      	ldr	r3, [pc, #224]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 0304 	and.w	r3, r3, #4
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	d10c      	bne.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80090aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d109      	bne.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090b0:	4b33      	ldr	r3, [pc, #204]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	08db      	lsrs	r3, r3, #3
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	4a32      	ldr	r2, [pc, #200]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80090bc:	fa22 f303 	lsr.w	r3, r2, r3
 80090c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090c2:	e01e      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090c4:	4b2e      	ldr	r3, [pc, #184]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d0:	d106      	bne.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80090d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090d8:	d102      	bne.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80090da:	4b2b      	ldr	r3, [pc, #172]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80090dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090de:	e010      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090e0:	4b27      	ldr	r3, [pc, #156]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090ec:	d106      	bne.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80090ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090f4:	d102      	bne.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090f6:	4b25      	ldr	r3, [pc, #148]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80090f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090fa:	e002      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009100:	e123      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009102:	e122      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009108:	e11f      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800910a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800910e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009112:	430b      	orrs	r3, r1
 8009114:	d13c      	bne.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009116:	4b1a      	ldr	r3, [pc, #104]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800911a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800911e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009122:	2b00      	cmp	r3, #0
 8009124:	d004      	beq.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800912c:	d012      	beq.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800912e:	e023      	b.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009130:	4b13      	ldr	r3, [pc, #76]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009138:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800913c:	d107      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800913e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009142:	4618      	mov	r0, r3
 8009144:	f000 fbcc 	bl	80098e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800914c:	e0fd      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009152:	e0fa      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009154:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800915c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009160:	d107      	bne.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009162:	f107 0318 	add.w	r3, r7, #24
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f912 	bl	8009390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009170:	e0eb      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009176:	e0e8      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800917c:	e0e5      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800917e:	bf00      	nop
 8009180:	58024400 	.word	0x58024400
 8009184:	03d09000 	.word	0x03d09000
 8009188:	003d0900 	.word	0x003d0900
 800918c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009194:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009198:	430b      	orrs	r3, r1
 800919a:	f040 8085 	bne.w	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800919e:	4b6d      	ldr	r3, [pc, #436]	; (8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80091a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80091a6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80091a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091ae:	d06b      	beq.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80091b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091b6:	d874      	bhi.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80091b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091be:	d056      	beq.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091c6:	d86c      	bhi.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80091c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091ce:	d03b      	beq.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80091d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091d6:	d864      	bhi.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80091d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091de:	d021      	beq.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80091e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091e6:	d85c      	bhi.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80091e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d004      	beq.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80091ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091f4:	d004      	beq.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80091f6:	e054      	b.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80091f8:	f000 f8b4 	bl	8009364 <HAL_RCCEx_GetD3PCLK1Freq>
 80091fc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091fe:	e0a4      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009200:	4b54      	ldr	r3, [pc, #336]	; (8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009208:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800920c:	d107      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800920e:	f107 0318 	add.w	r3, r7, #24
 8009212:	4618      	mov	r0, r3
 8009214:	f000 f8bc 	bl	8009390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800921c:	e095      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009222:	e092      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009224:	4b4b      	ldr	r3, [pc, #300]	; (8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800922c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009230:	d107      	bne.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009232:	f107 030c 	add.w	r3, r7, #12
 8009236:	4618      	mov	r0, r3
 8009238:	f000 f9fe 	bl	8009638 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009240:	e083      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009246:	e080      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009248:	4b42      	ldr	r3, [pc, #264]	; (8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0304 	and.w	r3, r3, #4
 8009250:	2b04      	cmp	r3, #4
 8009252:	d109      	bne.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009254:	4b3f      	ldr	r3, [pc, #252]	; (8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	08db      	lsrs	r3, r3, #3
 800925a:	f003 0303 	and.w	r3, r3, #3
 800925e:	4a3e      	ldr	r2, [pc, #248]	; (8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009260:	fa22 f303 	lsr.w	r3, r2, r3
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009266:	e070      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009268:	2300      	movs	r3, #0
 800926a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800926c:	e06d      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800926e:	4b39      	ldr	r3, [pc, #228]	; (8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800927a:	d102      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800927c:	4b37      	ldr	r3, [pc, #220]	; (800935c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800927e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009280:	e063      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009286:	e060      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009288:	4b32      	ldr	r3, [pc, #200]	; (8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009290:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009294:	d102      	bne.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8009296:	4b32      	ldr	r3, [pc, #200]	; (8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009298:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800929a:	e056      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800929c:	2300      	movs	r3, #0
 800929e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092a0:	e053      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092a6:	e050      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80092a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ac:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80092b0:	430b      	orrs	r3, r1
 80092b2:	d148      	bne.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80092b4:	4b27      	ldr	r3, [pc, #156]	; (8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092bc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092c4:	d02a      	beq.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80092c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092cc:	d838      	bhi.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80092ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d004      	beq.n	80092de <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80092d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092da:	d00d      	beq.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80092dc:	e030      	b.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80092de:	4b1d      	ldr	r3, [pc, #116]	; (8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092ea:	d102      	bne.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80092ec:	4b1c      	ldr	r3, [pc, #112]	; (8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80092ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092f0:	e02b      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092f6:	e028      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092f8:	4b16      	ldr	r3, [pc, #88]	; (8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009304:	d107      	bne.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800930a:	4618      	mov	r0, r3
 800930c:	f000 fae8 	bl	80098e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009314:	e019      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800931a:	e016      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800931c:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009328:	d107      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800932a:	f107 0318 	add.w	r3, r7, #24
 800932e:	4618      	mov	r0, r3
 8009330:	f000 f82e 	bl	8009390 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009338:	e007      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800933a:	2300      	movs	r3, #0
 800933c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800933e:	e004      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009344:	e001      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800934a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800934c:	4618      	mov	r0, r3
 800934e:	3740      	adds	r7, #64	; 0x40
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	58024400 	.word	0x58024400
 8009358:	03d09000 	.word	0x03d09000
 800935c:	003d0900 	.word	0x003d0900
 8009360:	017d7840 	.word	0x017d7840

08009364 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009368:	f7fe f944 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 800936c:	4602      	mov	r2, r0
 800936e:	4b06      	ldr	r3, [pc, #24]	; (8009388 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	091b      	lsrs	r3, r3, #4
 8009374:	f003 0307 	and.w	r3, r3, #7
 8009378:	4904      	ldr	r1, [pc, #16]	; (800938c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800937a:	5ccb      	ldrb	r3, [r1, r3]
 800937c:	f003 031f 	and.w	r3, r3, #31
 8009380:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009384:	4618      	mov	r0, r3
 8009386:	bd80      	pop	{r7, pc}
 8009388:	58024400 	.word	0x58024400
 800938c:	08010b64 	.word	0x08010b64

08009390 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009390:	b480      	push	{r7}
 8009392:	b089      	sub	sp, #36	; 0x24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009398:	4ba1      	ldr	r3, [pc, #644]	; (8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800939a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939c:	f003 0303 	and.w	r3, r3, #3
 80093a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80093a2:	4b9f      	ldr	r3, [pc, #636]	; (8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a6:	0b1b      	lsrs	r3, r3, #12
 80093a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80093ae:	4b9c      	ldr	r3, [pc, #624]	; (8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b2:	091b      	lsrs	r3, r3, #4
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80093ba:	4b99      	ldr	r3, [pc, #612]	; (8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093be:	08db      	lsrs	r3, r3, #3
 80093c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	fb02 f303 	mul.w	r3, r2, r3
 80093ca:	ee07 3a90 	vmov	s15, r3
 80093ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 8111 	beq.w	8009600 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	f000 8083 	beq.w	80094ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	f200 80a1 	bhi.w	8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d003      	beq.n	80093fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d056      	beq.n	80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80093fa:	e099      	b.n	8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093fc:	4b88      	ldr	r3, [pc, #544]	; (8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0320 	and.w	r3, r3, #32
 8009404:	2b00      	cmp	r3, #0
 8009406:	d02d      	beq.n	8009464 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009408:	4b85      	ldr	r3, [pc, #532]	; (8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	08db      	lsrs	r3, r3, #3
 800940e:	f003 0303 	and.w	r3, r3, #3
 8009412:	4a84      	ldr	r2, [pc, #528]	; (8009624 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009414:	fa22 f303 	lsr.w	r3, r2, r3
 8009418:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	ee07 3a90 	vmov	s15, r3
 8009420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009432:	4b7b      	ldr	r3, [pc, #492]	; (8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943a:	ee07 3a90 	vmov	s15, r3
 800943e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009442:	ed97 6a03 	vldr	s12, [r7, #12]
 8009446:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800944a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800944e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800945e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009462:	e087      	b.n	8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	ee07 3a90 	vmov	s15, r3
 800946a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800962c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009476:	4b6a      	ldr	r3, [pc, #424]	; (8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009486:	ed97 6a03 	vldr	s12, [r7, #12]
 800948a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800948e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800949a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800949e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094a6:	e065      	b.n	8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80094b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ba:	4b59      	ldr	r3, [pc, #356]	; (8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c2:	ee07 3a90 	vmov	s15, r3
 80094c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094ea:	e043      	b.n	8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80094fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094fe:	4b48      	ldr	r3, [pc, #288]	; (8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009506:	ee07 3a90 	vmov	s15, r3
 800950a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800950e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009512:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800951a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800951e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800952a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800952e:	e021      	b.n	8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	ee07 3a90 	vmov	s15, r3
 8009536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800953e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009542:	4b37      	ldr	r3, [pc, #220]	; (8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800954a:	ee07 3a90 	vmov	s15, r3
 800954e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009552:	ed97 6a03 	vldr	s12, [r7, #12]
 8009556:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009628 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800955a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800955e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800956a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800956e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009572:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009574:	4b2a      	ldr	r3, [pc, #168]	; (8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	0a5b      	lsrs	r3, r3, #9
 800957a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800958a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800958e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800959a:	ee17 2a90 	vmov	r2, s15
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80095a2:	4b1f      	ldr	r3, [pc, #124]	; (8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a6:	0c1b      	lsrs	r3, r3, #16
 80095a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ac:	ee07 3a90 	vmov	s15, r3
 80095b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80095c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095c8:	ee17 2a90 	vmov	r2, s15
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80095d0:	4b13      	ldr	r3, [pc, #76]	; (8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d4:	0e1b      	lsrs	r3, r3, #24
 80095d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80095ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095f6:	ee17 2a90 	vmov	r2, s15
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80095fe:	e008      	b.n	8009612 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	609a      	str	r2, [r3, #8]
}
 8009612:	bf00      	nop
 8009614:	3724      	adds	r7, #36	; 0x24
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	58024400 	.word	0x58024400
 8009624:	03d09000 	.word	0x03d09000
 8009628:	46000000 	.word	0x46000000
 800962c:	4c742400 	.word	0x4c742400
 8009630:	4a742400 	.word	0x4a742400
 8009634:	4bbebc20 	.word	0x4bbebc20

08009638 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009638:	b480      	push	{r7}
 800963a:	b089      	sub	sp, #36	; 0x24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009640:	4ba1      	ldr	r3, [pc, #644]	; (80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009644:	f003 0303 	and.w	r3, r3, #3
 8009648:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800964a:	4b9f      	ldr	r3, [pc, #636]	; (80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800964c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800964e:	0d1b      	lsrs	r3, r3, #20
 8009650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009654:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009656:	4b9c      	ldr	r3, [pc, #624]	; (80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965a:	0a1b      	lsrs	r3, r3, #8
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009662:	4b99      	ldr	r3, [pc, #612]	; (80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009666:	08db      	lsrs	r3, r3, #3
 8009668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	fb02 f303 	mul.w	r3, r2, r3
 8009672:	ee07 3a90 	vmov	s15, r3
 8009676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 8111 	beq.w	80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	2b02      	cmp	r3, #2
 800968a:	f000 8083 	beq.w	8009794 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	2b02      	cmp	r3, #2
 8009692:	f200 80a1 	bhi.w	80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d003      	beq.n	80096a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d056      	beq.n	8009750 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80096a2:	e099      	b.n	80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096a4:	4b88      	ldr	r3, [pc, #544]	; (80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0320 	and.w	r3, r3, #32
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d02d      	beq.n	800970c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096b0:	4b85      	ldr	r3, [pc, #532]	; (80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	08db      	lsrs	r3, r3, #3
 80096b6:	f003 0303 	and.w	r3, r3, #3
 80096ba:	4a84      	ldr	r2, [pc, #528]	; (80098cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80096bc:	fa22 f303 	lsr.w	r3, r2, r3
 80096c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	ee07 3a90 	vmov	s15, r3
 80096c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	ee07 3a90 	vmov	s15, r3
 80096d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096da:	4b7b      	ldr	r3, [pc, #492]	; (80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e2:	ee07 3a90 	vmov	s15, r3
 80096e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80098d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009706:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800970a:	e087      	b.n	800981c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	ee07 3a90 	vmov	s15, r3
 8009712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009716:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80098d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800971a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800971e:	4b6a      	ldr	r3, [pc, #424]	; (80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009726:	ee07 3a90 	vmov	s15, r3
 800972a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800972e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009732:	eddf 5a67 	vldr	s11, [pc, #412]	; 80098d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800973a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800973e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800974a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800974e:	e065      	b.n	800981c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	ee07 3a90 	vmov	s15, r3
 8009756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800975e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009762:	4b59      	ldr	r3, [pc, #356]	; (80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800976a:	ee07 3a90 	vmov	s15, r3
 800976e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009772:	ed97 6a03 	vldr	s12, [r7, #12]
 8009776:	eddf 5a56 	vldr	s11, [pc, #344]	; 80098d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800977a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800977e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800978a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800978e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009792:	e043      	b.n	800981c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	ee07 3a90 	vmov	s15, r3
 800979a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80098dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80097a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097a6:	4b48      	ldr	r3, [pc, #288]	; (80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ae:	ee07 3a90 	vmov	s15, r3
 80097b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80097ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80098d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097d6:	e021      	b.n	800981c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	ee07 3a90 	vmov	s15, r3
 80097de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80097e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ea:	4b37      	ldr	r3, [pc, #220]	; (80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097f2:	ee07 3a90 	vmov	s15, r3
 80097f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80097fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80098d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800980a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800980e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800981a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800981c:	4b2a      	ldr	r3, [pc, #168]	; (80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800981e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009820:	0a5b      	lsrs	r3, r3, #9
 8009822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009826:	ee07 3a90 	vmov	s15, r3
 800982a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800982e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009832:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009836:	edd7 6a07 	vldr	s13, [r7, #28]
 800983a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800983e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009842:	ee17 2a90 	vmov	r2, s15
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800984a:	4b1f      	ldr	r3, [pc, #124]	; (80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800984c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984e:	0c1b      	lsrs	r3, r3, #16
 8009850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009854:	ee07 3a90 	vmov	s15, r3
 8009858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009860:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009864:	edd7 6a07 	vldr	s13, [r7, #28]
 8009868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800986c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009870:	ee17 2a90 	vmov	r2, s15
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009878:	4b13      	ldr	r3, [pc, #76]	; (80098c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800987a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987c:	0e1b      	lsrs	r3, r3, #24
 800987e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009882:	ee07 3a90 	vmov	s15, r3
 8009886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800988a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800988e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009892:	edd7 6a07 	vldr	s13, [r7, #28]
 8009896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800989a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800989e:	ee17 2a90 	vmov	r2, s15
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80098a6:	e008      	b.n	80098ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	609a      	str	r2, [r3, #8]
}
 80098ba:	bf00      	nop
 80098bc:	3724      	adds	r7, #36	; 0x24
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	58024400 	.word	0x58024400
 80098cc:	03d09000 	.word	0x03d09000
 80098d0:	46000000 	.word	0x46000000
 80098d4:	4c742400 	.word	0x4c742400
 80098d8:	4a742400 	.word	0x4a742400
 80098dc:	4bbebc20 	.word	0x4bbebc20

080098e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b089      	sub	sp, #36	; 0x24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098e8:	4ba0      	ldr	r3, [pc, #640]	; (8009b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ec:	f003 0303 	and.w	r3, r3, #3
 80098f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80098f2:	4b9e      	ldr	r3, [pc, #632]	; (8009b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f6:	091b      	lsrs	r3, r3, #4
 80098f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80098fe:	4b9b      	ldr	r3, [pc, #620]	; (8009b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009908:	4b98      	ldr	r3, [pc, #608]	; (8009b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800990a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990c:	08db      	lsrs	r3, r3, #3
 800990e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	fb02 f303 	mul.w	r3, r2, r3
 8009918:	ee07 3a90 	vmov	s15, r3
 800991c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009920:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 8111 	beq.w	8009b4e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	2b02      	cmp	r3, #2
 8009930:	f000 8083 	beq.w	8009a3a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	2b02      	cmp	r3, #2
 8009938:	f200 80a1 	bhi.w	8009a7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d056      	beq.n	80099f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009948:	e099      	b.n	8009a7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800994a:	4b88      	ldr	r3, [pc, #544]	; (8009b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0320 	and.w	r3, r3, #32
 8009952:	2b00      	cmp	r3, #0
 8009954:	d02d      	beq.n	80099b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009956:	4b85      	ldr	r3, [pc, #532]	; (8009b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	08db      	lsrs	r3, r3, #3
 800995c:	f003 0303 	and.w	r3, r3, #3
 8009960:	4a83      	ldr	r2, [pc, #524]	; (8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009962:	fa22 f303 	lsr.w	r3, r2, r3
 8009966:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	ee07 3a90 	vmov	s15, r3
 8009978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009980:	4b7a      	ldr	r3, [pc, #488]	; (8009b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009988:	ee07 3a90 	vmov	s15, r3
 800998c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009990:	ed97 6a03 	vldr	s12, [r7, #12]
 8009994:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009b74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009998:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800999c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80099b0:	e087      	b.n	8009ac2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	ee07 3a90 	vmov	s15, r3
 80099b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099bc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009b78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80099c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099c4:	4b69      	ldr	r3, [pc, #420]	; (8009b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099cc:	ee07 3a90 	vmov	s15, r3
 80099d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80099d8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009b74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099f4:	e065      	b.n	8009ac2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	ee07 3a90 	vmov	s15, r3
 80099fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a00:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a08:	4b58      	ldr	r3, [pc, #352]	; (8009b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a10:	ee07 3a90 	vmov	s15, r3
 8009a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a18:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a1c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009b74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a38:	e043      	b.n	8009ac2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	ee07 3a90 	vmov	s15, r3
 8009a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a44:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009b80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009a48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a4c:	4b47      	ldr	r3, [pc, #284]	; (8009b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a54:	ee07 3a90 	vmov	s15, r3
 8009a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a60:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009b74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a7c:	e021      	b.n	8009ac2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	ee07 3a90 	vmov	s15, r3
 8009a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a88:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009b78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a90:	4b36      	ldr	r3, [pc, #216]	; (8009b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a98:	ee07 3a90 	vmov	s15, r3
 8009a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aa4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009b74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009aa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ab0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009abc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ac0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009ac2:	4b2a      	ldr	r3, [pc, #168]	; (8009b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac6:	0a5b      	lsrs	r3, r3, #9
 8009ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009acc:	ee07 3a90 	vmov	s15, r3
 8009ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ad8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009adc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ae8:	ee17 2a90 	vmov	r2, s15
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009af0:	4b1e      	ldr	r3, [pc, #120]	; (8009b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af4:	0c1b      	lsrs	r3, r3, #16
 8009af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009afa:	ee07 3a90 	vmov	s15, r3
 8009afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b16:	ee17 2a90 	vmov	r2, s15
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009b1e:	4b13      	ldr	r3, [pc, #76]	; (8009b6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b22:	0e1b      	lsrs	r3, r3, #24
 8009b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b28:	ee07 3a90 	vmov	s15, r3
 8009b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b44:	ee17 2a90 	vmov	r2, s15
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009b4c:	e008      	b.n	8009b60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	609a      	str	r2, [r3, #8]
}
 8009b60:	bf00      	nop
 8009b62:	3724      	adds	r7, #36	; 0x24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	58024400 	.word	0x58024400
 8009b70:	03d09000 	.word	0x03d09000
 8009b74:	46000000 	.word	0x46000000
 8009b78:	4c742400 	.word	0x4c742400
 8009b7c:	4a742400 	.word	0x4a742400
 8009b80:	4bbebc20 	.word	0x4bbebc20

08009b84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b92:	4b53      	ldr	r3, [pc, #332]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b96:	f003 0303 	and.w	r3, r3, #3
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d101      	bne.n	8009ba2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e099      	b.n	8009cd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ba2:	4b4f      	ldr	r3, [pc, #316]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a4e      	ldr	r2, [pc, #312]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009ba8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bae:	f7f8 f8cd 	bl	8001d4c <HAL_GetTick>
 8009bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009bb4:	e008      	b.n	8009bc8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009bb6:	f7f8 f8c9 	bl	8001d4c <HAL_GetTick>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d901      	bls.n	8009bc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e086      	b.n	8009cd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009bc8:	4b45      	ldr	r3, [pc, #276]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1f0      	bne.n	8009bb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009bd4:	4b42      	ldr	r3, [pc, #264]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	031b      	lsls	r3, r3, #12
 8009be2:	493f      	ldr	r1, [pc, #252]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	628b      	str	r3, [r1, #40]	; 0x28
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	3b01      	subs	r3, #1
 8009bee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	025b      	lsls	r3, r3, #9
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	3b01      	subs	r3, #1
 8009c04:	041b      	lsls	r3, r3, #16
 8009c06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	3b01      	subs	r3, #1
 8009c12:	061b      	lsls	r3, r3, #24
 8009c14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c18:	4931      	ldr	r1, [pc, #196]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009c1e:	4b30      	ldr	r3, [pc, #192]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	492d      	ldr	r1, [pc, #180]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009c30:	4b2b      	ldr	r3, [pc, #172]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c34:	f023 0220 	bic.w	r2, r3, #32
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	4928      	ldr	r1, [pc, #160]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009c42:	4b27      	ldr	r3, [pc, #156]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c46:	4a26      	ldr	r2, [pc, #152]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c48:	f023 0310 	bic.w	r3, r3, #16
 8009c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009c4e:	4b24      	ldr	r3, [pc, #144]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c52:	4b24      	ldr	r3, [pc, #144]	; (8009ce4 <RCCEx_PLL2_Config+0x160>)
 8009c54:	4013      	ands	r3, r2
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	69d2      	ldr	r2, [r2, #28]
 8009c5a:	00d2      	lsls	r2, r2, #3
 8009c5c:	4920      	ldr	r1, [pc, #128]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009c62:	4b1f      	ldr	r3, [pc, #124]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c66:	4a1e      	ldr	r2, [pc, #120]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c68:	f043 0310 	orr.w	r3, r3, #16
 8009c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d106      	bne.n	8009c82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009c74:	4b1a      	ldr	r3, [pc, #104]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c78:	4a19      	ldr	r2, [pc, #100]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c80:	e00f      	b.n	8009ca2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d106      	bne.n	8009c96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009c88:	4b15      	ldr	r3, [pc, #84]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8c:	4a14      	ldr	r2, [pc, #80]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c94:	e005      	b.n	8009ca2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009c96:	4b12      	ldr	r3, [pc, #72]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9a:	4a11      	ldr	r2, [pc, #68]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009c9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ca0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009ca2:	4b0f      	ldr	r3, [pc, #60]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a0e      	ldr	r2, [pc, #56]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009ca8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cae:	f7f8 f84d 	bl	8001d4c <HAL_GetTick>
 8009cb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009cb4:	e008      	b.n	8009cc8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009cb6:	f7f8 f849 	bl	8001d4c <HAL_GetTick>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	1ad3      	subs	r3, r2, r3
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d901      	bls.n	8009cc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	e006      	b.n	8009cd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009cc8:	4b05      	ldr	r3, [pc, #20]	; (8009ce0 <RCCEx_PLL2_Config+0x15c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d0f0      	beq.n	8009cb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	58024400 	.word	0x58024400
 8009ce4:	ffff0007 	.word	0xffff0007

08009ce8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009cf6:	4b53      	ldr	r3, [pc, #332]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfa:	f003 0303 	and.w	r3, r3, #3
 8009cfe:	2b03      	cmp	r3, #3
 8009d00:	d101      	bne.n	8009d06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e099      	b.n	8009e3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009d06:	4b4f      	ldr	r3, [pc, #316]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a4e      	ldr	r2, [pc, #312]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d12:	f7f8 f81b 	bl	8001d4c <HAL_GetTick>
 8009d16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d18:	e008      	b.n	8009d2c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d1a:	f7f8 f817 	bl	8001d4c <HAL_GetTick>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d901      	bls.n	8009d2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e086      	b.n	8009e3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d2c:	4b45      	ldr	r3, [pc, #276]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1f0      	bne.n	8009d1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009d38:	4b42      	ldr	r3, [pc, #264]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	051b      	lsls	r3, r3, #20
 8009d46:	493f      	ldr	r1, [pc, #252]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	628b      	str	r3, [r1, #40]	; 0x28
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	3b01      	subs	r3, #1
 8009d52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	025b      	lsls	r3, r3, #9
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	431a      	orrs	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	041b      	lsls	r3, r3, #16
 8009d6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d6e:	431a      	orrs	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	3b01      	subs	r3, #1
 8009d76:	061b      	lsls	r3, r3, #24
 8009d78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d7c:	4931      	ldr	r1, [pc, #196]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d82:	4b30      	ldr	r3, [pc, #192]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	492d      	ldr	r1, [pc, #180]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009d90:	4313      	orrs	r3, r2
 8009d92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009d94:	4b2b      	ldr	r3, [pc, #172]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	4928      	ldr	r1, [pc, #160]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009da2:	4313      	orrs	r3, r2
 8009da4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009da6:	4b27      	ldr	r3, [pc, #156]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009daa:	4a26      	ldr	r2, [pc, #152]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009db0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009db2:	4b24      	ldr	r3, [pc, #144]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009db6:	4b24      	ldr	r3, [pc, #144]	; (8009e48 <RCCEx_PLL3_Config+0x160>)
 8009db8:	4013      	ands	r3, r2
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	69d2      	ldr	r2, [r2, #28]
 8009dbe:	00d2      	lsls	r2, r2, #3
 8009dc0:	4920      	ldr	r1, [pc, #128]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009dc6:	4b1f      	ldr	r3, [pc, #124]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dca:	4a1e      	ldr	r2, [pc, #120]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d106      	bne.n	8009de6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009dd8:	4b1a      	ldr	r3, [pc, #104]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ddc:	4a19      	ldr	r2, [pc, #100]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009dde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009de2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009de4:	e00f      	b.n	8009e06 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d106      	bne.n	8009dfa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009dec:	4b15      	ldr	r3, [pc, #84]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df0:	4a14      	ldr	r2, [pc, #80]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009df2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009df6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009df8:	e005      	b.n	8009e06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009dfa:	4b12      	ldr	r3, [pc, #72]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfe:	4a11      	ldr	r2, [pc, #68]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009e00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009e06:	4b0f      	ldr	r3, [pc, #60]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a0e      	ldr	r2, [pc, #56]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e12:	f7f7 ff9b 	bl	8001d4c <HAL_GetTick>
 8009e16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e18:	e008      	b.n	8009e2c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e1a:	f7f7 ff97 	bl	8001d4c <HAL_GetTick>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d901      	bls.n	8009e2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	e006      	b.n	8009e3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e2c:	4b05      	ldr	r3, [pc, #20]	; (8009e44 <RCCEx_PLL3_Config+0x15c>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d0f0      	beq.n	8009e1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	58024400 	.word	0x58024400
 8009e48:	ffff0007 	.word	0xffff0007

08009e4c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d904      	bls.n	8009e6a <HAL_SAI_InitProtocol+0x1e>
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	3b03      	subs	r3, #3
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d812      	bhi.n	8009e8e <HAL_SAI_InitProtocol+0x42>
 8009e68:	e008      	b.n	8009e7c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	68b9      	ldr	r1, [r7, #8]
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f000 fb8b 	bl	800a58c <SAI_InitI2S>
 8009e76:	4603      	mov	r3, r0
 8009e78:	75fb      	strb	r3, [r7, #23]
      break;
 8009e7a:	e00b      	b.n	8009e94 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	68b9      	ldr	r1, [r7, #8]
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f000 fc34 	bl	800a6f0 <SAI_InitPCM>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e8c:	e002      	b.n	8009e94 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	75fb      	strb	r3, [r7, #23]
      break;
 8009e92:	bf00      	nop
  }

  if (status == HAL_OK)
 8009e94:	7dfb      	ldrb	r3, [r7, #23]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d104      	bne.n	8009ea4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f000 f808 	bl	8009eb0 <HAL_SAI_Init>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
	...

08009eb0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08a      	sub	sp, #40	; 0x28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e201      	b.n	800a2c6 <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d113      	bne.n	8009ef4 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a99      	ldr	r2, [pc, #612]	; (800a138 <HAL_SAI_Init+0x288>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d004      	beq.n	8009ee0 <HAL_SAI_Init+0x30>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a98      	ldr	r2, [pc, #608]	; (800a13c <HAL_SAI_Init+0x28c>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d107      	bne.n	8009ef0 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d103      	bne.n	8009ef0 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d001      	beq.n	8009ef4 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e1e8      	b.n	800a2c6 <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a8f      	ldr	r2, [pc, #572]	; (800a138 <HAL_SAI_Init+0x288>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d004      	beq.n	8009f08 <HAL_SAI_Init+0x58>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a8f      	ldr	r2, [pc, #572]	; (800a140 <HAL_SAI_Init+0x290>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d102      	bne.n	8009f0e <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8009f08:	4b8e      	ldr	r3, [pc, #568]	; (800a144 <HAL_SAI_Init+0x294>)
 8009f0a:	61bb      	str	r3, [r7, #24]
 8009f0c:	e00e      	b.n	8009f2c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a8a      	ldr	r2, [pc, #552]	; (800a13c <HAL_SAI_Init+0x28c>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d004      	beq.n	8009f22 <HAL_SAI_Init+0x72>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a8a      	ldr	r2, [pc, #552]	; (800a148 <HAL_SAI_Init+0x298>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d102      	bne.n	8009f28 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8009f22:	4b8a      	ldr	r3, [pc, #552]	; (800a14c <HAL_SAI_Init+0x29c>)
 8009f24:	61bb      	str	r3, [r7, #24]
 8009f26:	e001      	b.n	8009f2c <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e1cc      	b.n	800a2c6 <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d106      	bne.n	8009f46 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7f7 fb0b 	bl	800155c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fc8c 	bl	800a864 <SAI_Disable>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e1b7      	b.n	800a2c6 <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2202      	movs	r2, #2
 8009f5a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	2b02      	cmp	r3, #2
 8009f64:	d00c      	beq.n	8009f80 <HAL_SAI_Init+0xd0>
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d80d      	bhi.n	8009f86 <HAL_SAI_Init+0xd6>
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d002      	beq.n	8009f74 <HAL_SAI_Init+0xc4>
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d003      	beq.n	8009f7a <HAL_SAI_Init+0xca>
 8009f72:	e008      	b.n	8009f86 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009f74:	2300      	movs	r3, #0
 8009f76:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009f78:	e008      	b.n	8009f8c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009f7a:	2310      	movs	r3, #16
 8009f7c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009f7e:	e005      	b.n	8009f8c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009f80:	2320      	movs	r3, #32
 8009f82:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009f84:	e002      	b.n	8009f8c <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8009f86:	2300      	movs	r3, #0
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009f8a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	2b05      	cmp	r3, #5
 8009f92:	d822      	bhi.n	8009fda <HAL_SAI_Init+0x12a>
 8009f94:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <HAL_SAI_Init+0xec>)
 8009f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9a:	bf00      	nop
 8009f9c:	08009fb5 	.word	0x08009fb5
 8009fa0:	08009fbb 	.word	0x08009fbb
 8009fa4:	08009fc3 	.word	0x08009fc3
 8009fa8:	08009fdb 	.word	0x08009fdb
 8009fac:	08009fdb 	.word	0x08009fdb
 8009fb0:	08009fcb 	.word	0x08009fcb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	61fb      	str	r3, [r7, #28]
      break;
 8009fb8:	e012      	b.n	8009fe0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fbe:	61fb      	str	r3, [r7, #28]
      break;
 8009fc0:	e00e      	b.n	8009fe0 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009fc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fc6:	61fb      	str	r3, [r7, #28]
      break;
 8009fc8:	e00a      	b.n	8009fe0 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009fca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fce:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd2:	f043 0303 	orr.w	r3, r3, #3
 8009fd6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009fd8:	e002      	b.n	8009fe0 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	61fb      	str	r3, [r7, #28]
      break;
 8009fde:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fe4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f000 808a 	beq.w	800a104 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a4f      	ldr	r2, [pc, #316]	; (800a138 <HAL_SAI_Init+0x288>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d004      	beq.n	800a008 <HAL_SAI_Init+0x158>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a4f      	ldr	r2, [pc, #316]	; (800a140 <HAL_SAI_Init+0x290>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d106      	bne.n	800a016 <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a008:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a00c:	f04f 0100 	mov.w	r1, #0
 800a010:	f7fe fcd6 	bl	80089c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a014:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a48      	ldr	r2, [pc, #288]	; (800a13c <HAL_SAI_Init+0x28c>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d106      	bne.n	800a02e <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a020:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a024:	f04f 0100 	mov.w	r1, #0
 800a028:	f7fe fcca 	bl	80089c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a02c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a45      	ldr	r2, [pc, #276]	; (800a148 <HAL_SAI_Init+0x298>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d106      	bne.n	800a046 <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a038:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a03c:	f04f 0100 	mov.w	r1, #0
 800a040:	f7fe fcbe 	bl	80089c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a044:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a04e:	d120      	bne.n	800a092 <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a054:	2b04      	cmp	r3, #4
 800a056:	d102      	bne.n	800a05e <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a058:	2340      	movs	r3, #64	; 0x40
 800a05a:	60fb      	str	r3, [r7, #12]
 800a05c:	e00a      	b.n	800a074 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a062:	2b08      	cmp	r3, #8
 800a064:	d103      	bne.n	800a06e <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a066:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a06a:	60fb      	str	r3, [r7, #12]
 800a06c:	e002      	b.n	800a074 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a072:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	005b      	lsls	r3, r3, #1
 800a07e:	4619      	mov	r1, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a1b      	ldr	r3, [r3, #32]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	fb02 f303 	mul.w	r3, r2, r3
 800a08a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a08e:	613b      	str	r3, [r7, #16]
 800a090:	e017      	b.n	800a0c2 <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a096:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a09a:	d101      	bne.n	800a0a0 <HAL_SAI_Init+0x1f0>
 800a09c:	2302      	movs	r3, #2
 800a09e:	e000      	b.n	800a0a2 <HAL_SAI_Init+0x1f2>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a0a4:	697a      	ldr	r2, [r7, #20]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	005b      	lsls	r3, r3, #1
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a1b      	ldr	r3, [r3, #32]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ba:	021b      	lsls	r3, r3, #8
 800a0bc:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0c0:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	4a22      	ldr	r2, [pc, #136]	; (800a150 <HAL_SAI_Init+0x2a0>)
 800a0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ca:	08da      	lsrs	r2, r3, #3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a0d0:	6939      	ldr	r1, [r7, #16]
 800a0d2:	4b1f      	ldr	r3, [pc, #124]	; (800a150 <HAL_SAI_Init+0x2a0>)
 800a0d4:	fba3 2301 	umull	r2, r3, r3, r1
 800a0d8:	08da      	lsrs	r2, r3, #3
 800a0da:	4613      	mov	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	005b      	lsls	r3, r3, #1
 800a0e2:	1aca      	subs	r2, r1, r3
 800a0e4:	2a08      	cmp	r2, #8
 800a0e6:	d904      	bls.n	800a0f2 <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ec:	1c5a      	adds	r2, r3, #1
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f6:	2b04      	cmp	r3, #4
 800a0f8:	d104      	bne.n	800a104 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fe:	085a      	lsrs	r2, r3, #1
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d003      	beq.n	800a114 <HAL_SAI_Init+0x264>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	2b02      	cmp	r3, #2
 800a112:	d109      	bne.n	800a128 <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d101      	bne.n	800a120 <HAL_SAI_Init+0x270>
 800a11c:	2300      	movs	r3, #0
 800a11e:	e001      	b.n	800a124 <HAL_SAI_Init+0x274>
 800a120:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a124:	623b      	str	r3, [r7, #32]
 800a126:	e017      	b.n	800a158 <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d111      	bne.n	800a154 <HAL_SAI_Init+0x2a4>
 800a130:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a134:	e00f      	b.n	800a156 <HAL_SAI_Init+0x2a6>
 800a136:	bf00      	nop
 800a138:	40015804 	.word	0x40015804
 800a13c:	58005404 	.word	0x58005404
 800a140:	40015824 	.word	0x40015824
 800a144:	40015800 	.word	0x40015800
 800a148:	58005424 	.word	0x58005424
 800a14c:	58005400 	.word	0x58005400
 800a150:	cccccccd 	.word	0xcccccccd
 800a154:	2300      	movs	r3, #0
 800a156:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6819      	ldr	r1, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	4b5b      	ldr	r3, [pc, #364]	; (800a2d0 <HAL_SAI_Init+0x420>)
 800a164:	400b      	ands	r3, r1
 800a166:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6819      	ldr	r1, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685a      	ldr	r2, [r3, #4]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a176:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a17c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a182:	431a      	orrs	r2, r3
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800a190:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	695b      	ldr	r3, [r3, #20]
 800a196:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a19c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a2:	051b      	lsls	r3, r3, #20
 800a1a4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a1aa:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6859      	ldr	r1, [r3, #4]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	4b43      	ldr	r3, [pc, #268]	; (800a2d4 <HAL_SAI_Init+0x424>)
 800a1c6:	400b      	ands	r3, r1
 800a1c8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	6859      	ldr	r1, [r3, #4]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	69da      	ldr	r2, [r3, #28]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d8:	431a      	orrs	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1de:	431a      	orrs	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	430a      	orrs	r2, r1
 800a1e6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6899      	ldr	r1, [r3, #8]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	4b39      	ldr	r3, [pc, #228]	; (800a2d8 <HAL_SAI_Init+0x428>)
 800a1f4:	400b      	ands	r3, r1
 800a1f6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	6899      	ldr	r1, [r3, #8]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a202:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a208:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a20e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a214:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a21a:	3b01      	subs	r3, #1
 800a21c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a21e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	430a      	orrs	r2, r1
 800a226:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68d9      	ldr	r1, [r3, #12]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a236:	400b      	ands	r3, r1
 800a238:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68d9      	ldr	r1, [r3, #12]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a248:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a24e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a250:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a256:	3b01      	subs	r3, #1
 800a258:	021b      	lsls	r3, r3, #8
 800a25a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	430a      	orrs	r2, r1
 800a262:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a1c      	ldr	r2, [pc, #112]	; (800a2dc <HAL_SAI_Init+0x42c>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d004      	beq.n	800a278 <HAL_SAI_Init+0x3c8>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a1b      	ldr	r2, [pc, #108]	; (800a2e0 <HAL_SAI_Init+0x430>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d119      	bne.n	800a2ac <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a27c:	f023 0201 	bic.w	r2, r3, #1
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d10e      	bne.n	800a2ac <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a296:	3b01      	subs	r3, #1
 800a298:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a29a:	431a      	orrs	r2, r3
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a4:	f043 0201 	orr.w	r2, r3, #1
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3728      	adds	r7, #40	; 0x28
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	f005c010 	.word	0xf005c010
 800a2d4:	ffff1ff0 	.word	0xffff1ff0
 800a2d8:	fff88000 	.word	0xfff88000
 800a2dc:	40015804 	.word	0x40015804
 800a2e0:	58005404 	.word	0x58005404

0800a2e4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800a2f2:	f7f7 fd2b 	bl	8001d4c <HAL_GetTick>
 800a2f6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d002      	beq.n	800a304 <HAL_SAI_Transmit_DMA+0x20>
 800a2fe:	88fb      	ldrh	r3, [r7, #6]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d101      	bne.n	800a308 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e098      	b.n	800a43a <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	2b01      	cmp	r3, #1
 800a312:	f040 8091 	bne.w	800a438 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d101      	bne.n	800a324 <HAL_SAI_Transmit_DMA+0x40>
 800a320:	2302      	movs	r3, #2
 800a322:	e08a      	b.n	800a43a <HAL_SAI_Transmit_DMA+0x156>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	88fa      	ldrh	r2, [r7, #6]
 800a336:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	88fa      	ldrh	r2, [r7, #6]
 800a33e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2212      	movs	r2, #18
 800a34e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a358:	4a3a      	ldr	r2, [pc, #232]	; (800a444 <HAL_SAI_Transmit_DMA+0x160>)
 800a35a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a362:	4a39      	ldr	r2, [pc, #228]	; (800a448 <HAL_SAI_Transmit_DMA+0x164>)
 800a364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a36c:	4a37      	ldr	r2, [pc, #220]	; (800a44c <HAL_SAI_Transmit_DMA+0x168>)
 800a36e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a376:	2200      	movs	r2, #0
 800a378:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a384:	4619      	mov	r1, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	331c      	adds	r3, #28
 800a38c:	461a      	mov	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800a394:	f7f8 f972 	bl	800267c <HAL_DMA_Start_IT>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d005      	beq.n	800a3aa <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e047      	b.n	800a43a <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f000 fa21 	bl	800a7f4 <SAI_InterruptFlag>
 800a3b2:	4601      	mov	r1, r0
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	691a      	ldr	r2, [r3, #16]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a3d0:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a3d2:	e015      	b.n	800a400 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800a3d4:	f7f7 fcba 	bl	8001d4c <HAL_GetTick>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3e2:	d90d      	bls.n	800a400 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e01c      	b.n	800a43a <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	695b      	ldr	r3, [r3, #20]
 800a406:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d0e2      	beq.n	800a3d4 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d107      	bne.n	800a42c <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a42a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	e000      	b.n	800a43a <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800a438:	2302      	movs	r3, #2
  }
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3718      	adds	r7, #24
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	0800a939 	.word	0x0800a939
 800a448:	0800a8d9 	.word	0x0800a8d9
 800a44c:	0800a9d1 	.word	0x0800a9d1

0800a450 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	4613      	mov	r3, r2
 800a45c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <HAL_SAI_Receive_DMA+0x1a>
 800a464:	88fb      	ldrh	r3, [r7, #6]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e079      	b.n	800a562 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b01      	cmp	r3, #1
 800a478:	d172      	bne.n	800a560 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a480:	2b01      	cmp	r3, #1
 800a482:	d101      	bne.n	800a488 <HAL_SAI_Receive_DMA+0x38>
 800a484:	2302      	movs	r3, #2
 800a486:	e06c      	b.n	800a562 <HAL_SAI_Receive_DMA+0x112>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	88fa      	ldrh	r2, [r7, #6]
 800a49a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	88fa      	ldrh	r2, [r7, #6]
 800a4a2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2222      	movs	r2, #34	; 0x22
 800a4b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4bc:	4a2b      	ldr	r2, [pc, #172]	; (800a56c <HAL_SAI_Receive_DMA+0x11c>)
 800a4be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4c6:	4a2a      	ldr	r2, [pc, #168]	; (800a570 <HAL_SAI_Receive_DMA+0x120>)
 800a4c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4d0:	4a28      	ldr	r2, [pc, #160]	; (800a574 <HAL_SAI_Receive_DMA+0x124>)
 800a4d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4da:	2200      	movs	r2, #0
 800a4dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	331c      	adds	r3, #28
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800a4f8:	f7f8 f8c0 	bl	800267c <HAL_DMA_Start_IT>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d005      	beq.n	800a50e <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e029      	b.n	800a562 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a50e:	2100      	movs	r1, #0
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f000 f96f 	bl	800a7f4 <SAI_InterruptFlag>
 800a516:	4601      	mov	r1, r0
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	691a      	ldr	r2, [r3, #16]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a534:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a540:	2b00      	cmp	r3, #0
 800a542:	d107      	bne.n	800a554 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a552:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	e000      	b.n	800a562 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800a560:	2302      	movs	r3, #2
  }
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	0800a9b5 	.word	0x0800a9b5
 800a570:	0800a955 	.word	0x0800a955
 800a574:	0800a9d1 	.word	0x0800a9d1

0800a578 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b087      	sub	sp, #28
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <SAI_InitI2S+0x2e>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d103      	bne.n	800a5c2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	651a      	str	r2, [r3, #80]	; 0x50
 800a5c0:	e002      	b.n	800a5c8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a5ce:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5d6:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	f003 0301 	and.w	r3, r3, #1
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e077      	b.n	800a6e2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d107      	bne.n	800a608 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a604:	665a      	str	r2, [r3, #100]	; 0x64
 800a606:	e006      	b.n	800a616 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a60e:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2b03      	cmp	r3, #3
 800a61a:	d84f      	bhi.n	800a6bc <SAI_InitI2S+0x130>
 800a61c:	a201      	add	r2, pc, #4	; (adr r2, 800a624 <SAI_InitI2S+0x98>)
 800a61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a622:	bf00      	nop
 800a624:	0800a635 	.word	0x0800a635
 800a628:	0800a657 	.word	0x0800a657
 800a62c:	0800a679 	.word	0x0800a679
 800a630:	0800a69b 	.word	0x0800a69b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2280      	movs	r2, #128	; 0x80
 800a638:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	085b      	lsrs	r3, r3, #1
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	085b      	lsrs	r3, r3, #1
 800a648:	011a      	lsls	r2, r3, #4
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2240      	movs	r2, #64	; 0x40
 800a652:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a654:	e035      	b.n	800a6c2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2280      	movs	r2, #128	; 0x80
 800a65a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	085b      	lsrs	r3, r3, #1
 800a660:	019a      	lsls	r2, r3, #6
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	085b      	lsrs	r3, r3, #1
 800a66a:	015a      	lsls	r2, r3, #5
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2280      	movs	r2, #128	; 0x80
 800a674:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a676:	e024      	b.n	800a6c2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	22c0      	movs	r2, #192	; 0xc0
 800a67c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	085b      	lsrs	r3, r3, #1
 800a682:	019a      	lsls	r2, r3, #6
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	085b      	lsrs	r3, r3, #1
 800a68c:	015a      	lsls	r2, r3, #5
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2280      	movs	r2, #128	; 0x80
 800a696:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a698:	e013      	b.n	800a6c2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	22e0      	movs	r2, #224	; 0xe0
 800a69e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	085b      	lsrs	r3, r3, #1
 800a6a4:	019a      	lsls	r2, r3, #6
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	085b      	lsrs	r3, r3, #1
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2280      	movs	r2, #128	; 0x80
 800a6b8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a6ba:	e002      	b.n	800a6c2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	75fb      	strb	r3, [r7, #23]
      break;
 800a6c0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d10b      	bne.n	800a6e0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d102      	bne.n	800a6d4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2210      	movs	r2, #16
 800a6d2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d102      	bne.n	800a6e0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2208      	movs	r2, #8
 800a6de:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800a6e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	371c      	adds	r7, #28
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop

0800a6f0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
 800a6fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <SAI_InitPCM+0x2e>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d103      	bne.n	800a726 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2201      	movs	r2, #1
 800a722:	651a      	str	r2, [r3, #80]	; 0x50
 800a724:	e002      	b.n	800a72c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a738:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a740:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a754:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	2b04      	cmp	r3, #4
 800a75a:	d103      	bne.n	800a764 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2201      	movs	r2, #1
 800a760:	659a      	str	r2, [r3, #88]	; 0x58
 800a762:	e002      	b.n	800a76a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	220d      	movs	r2, #13
 800a768:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d837      	bhi.n	800a7e0 <SAI_InitPCM+0xf0>
 800a770:	a201      	add	r2, pc, #4	; (adr r2, 800a778 <SAI_InitPCM+0x88>)
 800a772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a776:	bf00      	nop
 800a778:	0800a789 	.word	0x0800a789
 800a77c:	0800a79f 	.word	0x0800a79f
 800a780:	0800a7b5 	.word	0x0800a7b5
 800a784:	0800a7cb 	.word	0x0800a7cb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2280      	movs	r2, #128	; 0x80
 800a78c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	011a      	lsls	r2, r3, #4
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2240      	movs	r2, #64	; 0x40
 800a79a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a79c:	e023      	b.n	800a7e6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2280      	movs	r2, #128	; 0x80
 800a7a2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	015a      	lsls	r2, r3, #5
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2280      	movs	r2, #128	; 0x80
 800a7b0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a7b2:	e018      	b.n	800a7e6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	22c0      	movs	r2, #192	; 0xc0
 800a7b8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	015a      	lsls	r2, r3, #5
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2280      	movs	r2, #128	; 0x80
 800a7c6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a7c8:	e00d      	b.n	800a7e6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	22e0      	movs	r2, #224	; 0xe0
 800a7ce:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2280      	movs	r2, #128	; 0x80
 800a7dc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a7de:	e002      	b.n	800a7e6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a7e4:	bf00      	nop
  }

  return status;
 800a7e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	371c      	adds	r7, #28
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800a800:	2301      	movs	r3, #1
 800a802:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800a804:	78fb      	ldrb	r3, [r7, #3]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d103      	bne.n	800a812 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f043 0308 	orr.w	r3, r3, #8
 800a810:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a816:	2b08      	cmp	r3, #8
 800a818:	d10b      	bne.n	800a832 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d003      	beq.n	800a82a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	2b01      	cmp	r3, #1
 800a828:	d103      	bne.n	800a832 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f043 0310 	orr.w	r3, r3, #16
 800a830:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	2b03      	cmp	r3, #3
 800a838:	d003      	beq.n	800a842 <SAI_InterruptFlag+0x4e>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d104      	bne.n	800a84c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a848:	60fb      	str	r3, [r7, #12]
 800a84a:	e003      	b.n	800a854 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f043 0304 	orr.w	r3, r3, #4
 800a852:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800a854:	68fb      	ldr	r3, [r7, #12]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
	...

0800a864 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a86c:	4b18      	ldr	r3, [pc, #96]	; (800a8d0 <SAI_Disable+0x6c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a18      	ldr	r2, [pc, #96]	; (800a8d4 <SAI_Disable+0x70>)
 800a872:	fba2 2303 	umull	r2, r3, r2, r3
 800a876:	0b1b      	lsrs	r3, r3, #12
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a88e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10a      	bne.n	800a8ac <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a89c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	72fb      	strb	r3, [r7, #11]
      break;
 800a8aa:	e009      	b.n	800a8c0 <SAI_Disable+0x5c>
    }
    count--;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d1e7      	bne.n	800a890 <SAI_Disable+0x2c>

  return status;
 800a8c0:	7afb      	ldrb	r3, [r7, #11]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3714      	adds	r7, #20
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	24000000 	.word	0x24000000
 800a8d4:	95cbec1b 	.word	0x95cbec1b

0800a8d8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ee:	d01c      	beq.n	800a92a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a906:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a908:	2100      	movs	r1, #0
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f7ff ff72 	bl	800a7f4 <SAI_InterruptFlag>
 800a910:	4603      	mov	r3, r0
 800a912:	43d9      	mvns	r1, r3
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	691a      	ldr	r2, [r3, #16]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	400a      	ands	r2, r1
 800a920:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2201      	movs	r2, #1
 800a926:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f7f6 f92c 	bl	8000b88 <HAL_SAI_TxCpltCallback>
#endif
}
 800a930:	bf00      	nop
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a944:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f7f6 f980 	bl	8000c4c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800a94c:	bf00      	nop
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a960:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	69db      	ldr	r3, [r3, #28]
 800a966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a96a:	d01c      	beq.n	800a9a6 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a97a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a984:	2100      	movs	r1, #0
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7ff ff34 	bl	800a7f4 <SAI_InterruptFlag>
 800a98c:	4603      	mov	r3, r0
 800a98e:	43d9      	mvns	r1, r3
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	691a      	ldr	r2, [r3, #16]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	400a      	ands	r2, r1
 800a99c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f7f6 f9b2 	bl	8000d10 <HAL_SAI_RxCpltCallback>
#endif
}
 800a9ac:	bf00      	nop
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f7f6 fa5a 	bl	8000e7c <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800a9c8:	bf00      	nop
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9dc:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7f8 ffe0 	bl	80039a4 <HAL_DMA_GetError>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d01d      	beq.n	800aa26 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800aa08:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f7ff ff2a 	bl	800a864 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f7ff fda9 	bl	800a578 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800aa26:	bf00      	nop
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
	...

0800aa30 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	e02b      	b.n	800aa9c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d106      	bne.n	800aa5e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7f5 feef 	bl	800083c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2202      	movs	r2, #2
 800aa62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	3304      	adds	r3, #4
 800aa6e:	4619      	mov	r1, r3
 800aa70:	4610      	mov	r0, r2
 800aa72:	f000 fdbf 	bl	800b5f4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6818      	ldr	r0, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	f000 fe13 	bl	800b6ac <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800aa86:	4b07      	ldr	r3, [pc, #28]	; (800aaa4 <HAL_SDRAM_Init+0x74>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a06      	ldr	r2, [pc, #24]	; (800aaa4 <HAL_SDRAM_Init+0x74>)
 800aa8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa90:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2201      	movs	r2, #1
 800aa96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	52004000 	.word	0x52004000

0800aaa8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b086      	sub	sp, #24
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aaba:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800aabc:	7dfb      	ldrb	r3, [r7, #23]
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d101      	bne.n	800aac6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800aac2:	2302      	movs	r3, #2
 800aac4:	e021      	b.n	800ab0a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800aac6:	7dfb      	ldrb	r3, [r7, #23]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d002      	beq.n	800aad2 <HAL_SDRAM_SendCommand+0x2a>
 800aacc:	7dfb      	ldrb	r3, [r7, #23]
 800aace:	2b05      	cmp	r3, #5
 800aad0:	d118      	bne.n	800ab04 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2202      	movs	r2, #2
 800aad6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	68b9      	ldr	r1, [r7, #8]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 fe4c 	bl	800b780 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d104      	bne.n	800aafa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2205      	movs	r2, #5
 800aaf4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800aaf8:	e006      	b.n	800ab08 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ab02:	e001      	b.n	800ab08 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e000      	b.n	800ab0a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3718      	adds	r7, #24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b082      	sub	sp, #8
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d101      	bne.n	800ab2c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800ab28:	2302      	movs	r3, #2
 800ab2a:	e016      	b.n	800ab5a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d10f      	bne.n	800ab58 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2202      	movs	r2, #2
 800ab3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 fe3e 	bl	800b7c8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	e000      	b.n	800ab5a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
	...

0800ab64 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	e10f      	b.n	800ad96 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a87      	ldr	r2, [pc, #540]	; (800ada0 <HAL_SPI_Init+0x23c>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d00f      	beq.n	800aba6 <HAL_SPI_Init+0x42>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a86      	ldr	r2, [pc, #536]	; (800ada4 <HAL_SPI_Init+0x240>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d00a      	beq.n	800aba6 <HAL_SPI_Init+0x42>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a84      	ldr	r2, [pc, #528]	; (800ada8 <HAL_SPI_Init+0x244>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d005      	beq.n	800aba6 <HAL_SPI_Init+0x42>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	2b0f      	cmp	r3, #15
 800aba0:	d901      	bls.n	800aba6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e0f7      	b.n	800ad96 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fd08 	bl	800b5bc <SPI_GetPacketSize>
 800abac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a7b      	ldr	r2, [pc, #492]	; (800ada0 <HAL_SPI_Init+0x23c>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d00c      	beq.n	800abd2 <HAL_SPI_Init+0x6e>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a79      	ldr	r2, [pc, #484]	; (800ada4 <HAL_SPI_Init+0x240>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d007      	beq.n	800abd2 <HAL_SPI_Init+0x6e>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a78      	ldr	r2, [pc, #480]	; (800ada8 <HAL_SPI_Init+0x244>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d002      	beq.n	800abd2 <HAL_SPI_Init+0x6e>
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2b08      	cmp	r3, #8
 800abd0:	d811      	bhi.n	800abf6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800abd6:	4a72      	ldr	r2, [pc, #456]	; (800ada0 <HAL_SPI_Init+0x23c>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d009      	beq.n	800abf0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a70      	ldr	r2, [pc, #448]	; (800ada4 <HAL_SPI_Init+0x240>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d004      	beq.n	800abf0 <HAL_SPI_Init+0x8c>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a6f      	ldr	r2, [pc, #444]	; (800ada8 <HAL_SPI_Init+0x244>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d104      	bne.n	800abfa <HAL_SPI_Init+0x96>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2b10      	cmp	r3, #16
 800abf4:	d901      	bls.n	800abfa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e0cd      	b.n	800ad96 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d106      	bne.n	800ac14 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7f6 fde0 	bl	80017d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2202      	movs	r2, #2
 800ac18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f022 0201 	bic.w	r2, r2, #1
 800ac2a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ac36:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	699b      	ldr	r3, [r3, #24]
 800ac3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac40:	d119      	bne.n	800ac76 <HAL_SPI_Init+0x112>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac4a:	d103      	bne.n	800ac54 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d008      	beq.n	800ac66 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10c      	bne.n	800ac76 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ac60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac64:	d107      	bne.n	800ac76 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ac74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00f      	beq.n	800aca2 <HAL_SPI_Init+0x13e>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	2b06      	cmp	r3, #6
 800ac88:	d90b      	bls.n	800aca2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	430a      	orrs	r2, r1
 800ac9e:	601a      	str	r2, [r3, #0]
 800aca0:	e007      	b.n	800acb2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800acb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	69da      	ldr	r2, [r3, #28]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acba:	431a      	orrs	r2, r3
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	431a      	orrs	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc4:	ea42 0103 	orr.w	r1, r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68da      	ldr	r2, [r3, #12]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	430a      	orrs	r2, r1
 800acd2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acdc:	431a      	orrs	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace2:	431a      	orrs	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	431a      	orrs	r2, r3
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	431a      	orrs	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	695b      	ldr	r3, [r3, #20]
 800acf4:	431a      	orrs	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a1b      	ldr	r3, [r3, #32]
 800acfa:	431a      	orrs	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	431a      	orrs	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad06:	431a      	orrs	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	431a      	orrs	r2, r3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad12:	ea42 0103 	orr.w	r1, r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d113      	bne.n	800ad52 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad3c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ad50:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f022 0201 	bic.w	r2, r2, #1
 800ad60:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00a      	beq.n	800ad84 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	430a      	orrs	r2, r1
 800ad82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	40013000 	.word	0x40013000
 800ada4:	40003800 	.word	0x40003800
 800ada8:	40003c00 	.word	0x40003c00

0800adac <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b08e      	sub	sp, #56	; 0x38
 800adb0:	af02      	add	r7, sp, #8
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3320      	adds	r3, #32
 800adc0:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	3330      	adds	r3, #48	; 0x30
 800adc8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adce:	095b      	lsrs	r3, r3, #5
 800add0:	b29b      	uxth	r3, r3
 800add2:	3301      	adds	r3, #1
 800add4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800add6:	f7f6 ffb9 	bl	8001d4c <HAL_GetTick>
 800adda:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800addc:	887b      	ldrh	r3, [r7, #2]
 800adde:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800ade0:	887b      	ldrh	r3, [r7, #2]
 800ade2:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800adea:	b2db      	uxtb	r3, r3
 800adec:	2b01      	cmp	r3, #1
 800adee:	d001      	beq.n	800adf4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800adf0:	2302      	movs	r3, #2
 800adf2:	e310      	b.n	800b416 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d005      	beq.n	800ae06 <HAL_SPI_TransmitReceive+0x5a>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d002      	beq.n	800ae06 <HAL_SPI_TransmitReceive+0x5a>
 800ae00:	887b      	ldrh	r3, [r7, #2]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e305      	b.n	800b416 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d101      	bne.n	800ae18 <HAL_SPI_TransmitReceive+0x6c>
 800ae14:	2302      	movs	r3, #2
 800ae16:	e2fe      	b.n	800b416 <HAL_SPI_TransmitReceive+0x66a>
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2205      	movs	r2, #5
 800ae24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	887a      	ldrh	r2, [r7, #2]
 800ae3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	887a      	ldrh	r2, [r7, #2]
 800ae42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	887a      	ldrh	r2, [r7, #2]
 800ae50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	887a      	ldrh	r2, [r7, #2]
 800ae58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68da      	ldr	r2, [r3, #12]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800ae76:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a70      	ldr	r2, [pc, #448]	; (800b040 <HAL_SPI_TransmitReceive+0x294>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d009      	beq.n	800ae96 <HAL_SPI_TransmitReceive+0xea>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a6f      	ldr	r2, [pc, #444]	; (800b044 <HAL_SPI_TransmitReceive+0x298>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d004      	beq.n	800ae96 <HAL_SPI_TransmitReceive+0xea>
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a6d      	ldr	r2, [pc, #436]	; (800b048 <HAL_SPI_TransmitReceive+0x29c>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d102      	bne.n	800ae9c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800ae96:	2310      	movs	r3, #16
 800ae98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae9a:	e001      	b.n	800aea0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800ae9c:	2308      	movs	r3, #8
 800ae9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	685a      	ldr	r2, [r3, #4]
 800aea6:	4b69      	ldr	r3, [pc, #420]	; (800b04c <HAL_SPI_TransmitReceive+0x2a0>)
 800aea8:	4013      	ands	r3, r2
 800aeaa:	8879      	ldrh	r1, [r7, #2]
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	6812      	ldr	r2, [r2, #0]
 800aeb0:	430b      	orrs	r3, r1
 800aeb2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f042 0201 	orr.w	r2, r2, #1
 800aec2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aecc:	d107      	bne.n	800aede <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aedc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	2b0f      	cmp	r3, #15
 800aee4:	f240 80a2 	bls.w	800b02c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800aee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeea:	089b      	lsrs	r3, r3, #2
 800aeec:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aeee:	e094      	b.n	800b01a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	f003 0302 	and.w	r3, r3, #2
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d120      	bne.n	800af40 <HAL_SPI_TransmitReceive+0x194>
 800aefe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800af00:	2b00      	cmp	r3, #0
 800af02:	d01d      	beq.n	800af40 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800af04:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800af06:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800af08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d217      	bcs.n	800af40 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	6812      	ldr	r2, [r2, #0]
 800af1a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af20:	1d1a      	adds	r2, r3, #4
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	3b01      	subs	r3, #1
 800af30:	b29a      	uxth	r2, r3
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800af3e:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800af48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d065      	beq.n	800b01a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	f003 0301 	and.w	r3, r3, #1
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d118      	bne.n	800af8e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800af66:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af6c:	1d1a      	adds	r2, r3, #4
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af78:	b29b      	uxth	r3, r3
 800af7a:	3b01      	subs	r3, #1
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af8a:	853b      	strh	r3, [r7, #40]	; 0x28
 800af8c:	e045      	b.n	800b01a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800af8e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800af90:	8bfb      	ldrh	r3, [r7, #30]
 800af92:	429a      	cmp	r2, r3
 800af94:	d21d      	bcs.n	800afd2 <HAL_SPI_TransmitReceive+0x226>
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d018      	beq.n	800afd2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afa8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800afaa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afb0:	1d1a      	adds	r2, r3, #4
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	3b01      	subs	r3, #1
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800afce:	853b      	strh	r3, [r7, #40]	; 0x28
 800afd0:	e023      	b.n	800b01a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800afd2:	f7f6 febb 	bl	8001d4c <HAL_GetTick>
 800afd6:	4602      	mov	r2, r0
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afde:	429a      	cmp	r2, r3
 800afe0:	d803      	bhi.n	800afea <HAL_SPI_TransmitReceive+0x23e>
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe8:	d102      	bne.n	800aff0 <HAL_SPI_TransmitReceive+0x244>
 800afea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afec:	2b00      	cmp	r3, #0
 800afee:	d114      	bne.n	800b01a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f000 fa15 	bl	800b420 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800affc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2201      	movs	r2, #1
 800b00a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800b016:	2303      	movs	r3, #3
 800b018:	e1fd      	b.n	800b416 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b01a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f47f af67 	bne.w	800aef0 <HAL_SPI_TransmitReceive+0x144>
 800b022:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b024:	2b00      	cmp	r3, #0
 800b026:	f47f af63 	bne.w	800aef0 <HAL_SPI_TransmitReceive+0x144>
 800b02a:	e1ce      	b.n	800b3ca <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	2b07      	cmp	r3, #7
 800b032:	f240 81c2 	bls.w	800b3ba <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800b036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b038:	085b      	lsrs	r3, r3, #1
 800b03a:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b03c:	e0c9      	b.n	800b1d2 <HAL_SPI_TransmitReceive+0x426>
 800b03e:	bf00      	nop
 800b040:	40013000 	.word	0x40013000
 800b044:	40003800 	.word	0x40003800
 800b048:	40003c00 	.word	0x40003c00
 800b04c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	f003 0302 	and.w	r3, r3, #2
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d11f      	bne.n	800b09e <HAL_SPI_TransmitReceive+0x2f2>
 800b05e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b060:	2b00      	cmp	r3, #0
 800b062:	d01c      	beq.n	800b09e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b064:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b066:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800b068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d216      	bcs.n	800b09e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b074:	881a      	ldrh	r2, [r3, #0]
 800b076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b078:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b07e:	1c9a      	adds	r2, r3, #2
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	3b01      	subs	r3, #1
 800b08e:	b29a      	uxth	r2, r3
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b09c:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	695b      	ldr	r3, [r3, #20]
 800b0a4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b0a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 8092 	beq.w	800b1d2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	f003 0301 	and.w	r3, r3, #1
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d118      	bne.n	800b0ee <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0c0:	6a3a      	ldr	r2, [r7, #32]
 800b0c2:	8812      	ldrh	r2, [r2, #0]
 800b0c4:	b292      	uxth	r2, r2
 800b0c6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0cc:	1c9a      	adds	r2, r3, #2
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b0ea:	853b      	strh	r3, [r7, #40]	; 0x28
 800b0ec:	e071      	b.n	800b1d2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b0ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b0f0:	8bfb      	ldrh	r3, [r7, #30]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d228      	bcs.n	800b148 <HAL_SPI_TransmitReceive+0x39c>
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d023      	beq.n	800b148 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b104:	6a3a      	ldr	r2, [r7, #32]
 800b106:	8812      	ldrh	r2, [r2, #0]
 800b108:	b292      	uxth	r2, r2
 800b10a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b110:	1c9a      	adds	r2, r3, #2
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b11a:	6a3a      	ldr	r2, [r7, #32]
 800b11c:	8812      	ldrh	r2, [r2, #0]
 800b11e:	b292      	uxth	r2, r2
 800b120:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b126:	1c9a      	adds	r2, r3, #2
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b132:	b29b      	uxth	r3, r3
 800b134:	3b02      	subs	r3, #2
 800b136:	b29a      	uxth	r2, r3
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b144:	853b      	strh	r3, [r7, #40]	; 0x28
 800b146:	e044      	b.n	800b1d2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b148:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d11d      	bne.n	800b18a <HAL_SPI_TransmitReceive+0x3de>
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b154:	2b00      	cmp	r3, #0
 800b156:	d018      	beq.n	800b18a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b15c:	6a3a      	ldr	r2, [r7, #32]
 800b15e:	8812      	ldrh	r2, [r2, #0]
 800b160:	b292      	uxth	r2, r2
 800b162:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b168:	1c9a      	adds	r2, r3, #2
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b174:	b29b      	uxth	r3, r3
 800b176:	3b01      	subs	r3, #1
 800b178:	b29a      	uxth	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b186:	853b      	strh	r3, [r7, #40]	; 0x28
 800b188:	e023      	b.n	800b1d2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b18a:	f7f6 fddf 	bl	8001d4c <HAL_GetTick>
 800b18e:	4602      	mov	r2, r0
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b196:	429a      	cmp	r2, r3
 800b198:	d803      	bhi.n	800b1a2 <HAL_SPI_TransmitReceive+0x3f6>
 800b19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a0:	d102      	bne.n	800b1a8 <HAL_SPI_TransmitReceive+0x3fc>
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d114      	bne.n	800b1d2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b1a8:	68f8      	ldr	r0, [r7, #12]
 800b1aa:	f000 f939 	bl	800b420 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800b1ce:	2303      	movs	r3, #3
 800b1d0:	e121      	b.n	800b416 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b1d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f47f af3b 	bne.w	800b050 <HAL_SPI_TransmitReceive+0x2a4>
 800b1da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f47f af37 	bne.w	800b050 <HAL_SPI_TransmitReceive+0x2a4>
 800b1e2:	e0f2      	b.n	800b3ca <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	695b      	ldr	r3, [r3, #20]
 800b1ea:	f003 0302 	and.w	r3, r3, #2
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d121      	bne.n	800b236 <HAL_SPI_TransmitReceive+0x48a>
 800b1f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d01e      	beq.n	800b236 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b1f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b1fa:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800b1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fe:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b200:	429a      	cmp	r2, r3
 800b202:	d218      	bcs.n	800b236 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	3320      	adds	r3, #32
 800b20e:	7812      	ldrb	r2, [r2, #0]
 800b210:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b216:	1c5a      	adds	r2, r3, #1
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b222:	b29b      	uxth	r3, r3
 800b224:	3b01      	subs	r3, #1
 800b226:	b29a      	uxth	r2, r3
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b234:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b23e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b240:	2b00      	cmp	r3, #0
 800b242:	f000 80ba 	beq.w	800b3ba <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	695b      	ldr	r3, [r3, #20]
 800b24c:	f003 0301 	and.w	r3, r3, #1
 800b250:	2b01      	cmp	r3, #1
 800b252:	d11b      	bne.n	800b28c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b260:	7812      	ldrb	r2, [r2, #0]
 800b262:	b2d2      	uxtb	r2, r2
 800b264:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b276:	b29b      	uxth	r3, r3
 800b278:	3b01      	subs	r3, #1
 800b27a:	b29a      	uxth	r2, r3
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b288:	853b      	strh	r3, [r7, #40]	; 0x28
 800b28a:	e096      	b.n	800b3ba <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b28c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b28e:	8bfb      	ldrh	r3, [r7, #30]
 800b290:	429a      	cmp	r2, r3
 800b292:	d24a      	bcs.n	800b32a <HAL_SPI_TransmitReceive+0x57e>
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d045      	beq.n	800b32a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2aa:	7812      	ldrb	r2, [r2, #0]
 800b2ac:	b2d2      	uxtb	r2, r2
 800b2ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2b4:	1c5a      	adds	r2, r3, #1
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2c6:	7812      	ldrb	r2, [r2, #0]
 800b2c8:	b2d2      	uxtb	r2, r2
 800b2ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2d0:	1c5a      	adds	r2, r3, #1
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2e2:	7812      	ldrb	r2, [r2, #0]
 800b2e4:	b2d2      	uxtb	r2, r2
 800b2e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2ec:	1c5a      	adds	r2, r3, #1
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2fe:	7812      	ldrb	r2, [r2, #0]
 800b300:	b2d2      	uxtb	r2, r2
 800b302:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b308:	1c5a      	adds	r2, r3, #1
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b314:	b29b      	uxth	r3, r3
 800b316:	3b04      	subs	r3, #4
 800b318:	b29a      	uxth	r2, r3
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b326:	853b      	strh	r3, [r7, #40]	; 0x28
 800b328:	e047      	b.n	800b3ba <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b32a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	d820      	bhi.n	800b372 <HAL_SPI_TransmitReceive+0x5c6>
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b336:	2b00      	cmp	r3, #0
 800b338:	d01b      	beq.n	800b372 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b346:	7812      	ldrb	r2, [r2, #0]
 800b348:	b2d2      	uxtb	r2, r2
 800b34a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	3b01      	subs	r3, #1
 800b360:	b29a      	uxth	r2, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b36e:	853b      	strh	r3, [r7, #40]	; 0x28
 800b370:	e023      	b.n	800b3ba <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b372:	f7f6 fceb 	bl	8001d4c <HAL_GetTick>
 800b376:	4602      	mov	r2, r0
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b37e:	429a      	cmp	r2, r3
 800b380:	d803      	bhi.n	800b38a <HAL_SPI_TransmitReceive+0x5de>
 800b382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b388:	d102      	bne.n	800b390 <HAL_SPI_TransmitReceive+0x5e4>
 800b38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d114      	bne.n	800b3ba <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f000 f845 	bl	800b420 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b39c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800b3b6:	2303      	movs	r3, #3
 800b3b8:	e02d      	b.n	800b416 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b3ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f47f af11 	bne.w	800b1e4 <HAL_SPI_TransmitReceive+0x438>
 800b3c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f47f af0d 	bne.w	800b1e4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	2108      	movs	r1, #8
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f000 f8c3 	bl	800b560 <SPI_WaitOnFlagUntilTimeout>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d007      	beq.n	800b3f0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3e6:	f043 0220 	orr.w	r2, r3, #32
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f000 f815 	bl	800b420 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d001      	beq.n	800b414 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800b410:	2301      	movs	r3, #1
 800b412:	e000      	b.n	800b416 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800b414:	2300      	movs	r3, #0
  }
}
 800b416:	4618      	mov	r0, r3
 800b418:	3730      	adds	r7, #48	; 0x30
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop

0800b420 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	699a      	ldr	r2, [r3, #24]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f042 0208 	orr.w	r2, r2, #8
 800b43e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	699a      	ldr	r2, [r3, #24]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f042 0210 	orr.w	r2, r2, #16
 800b44e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f022 0201 	bic.w	r2, r2, #1
 800b45e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	6919      	ldr	r1, [r3, #16]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	4b3c      	ldr	r3, [pc, #240]	; (800b55c <SPI_CloseTransfer+0x13c>)
 800b46c:	400b      	ands	r3, r1
 800b46e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	689a      	ldr	r2, [r3, #8]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b47e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b486:	b2db      	uxtb	r3, r3
 800b488:	2b04      	cmp	r3, #4
 800b48a:	d014      	beq.n	800b4b6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f003 0320 	and.w	r3, r3, #32
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00f      	beq.n	800b4b6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b49c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	699a      	ldr	r2, [r3, #24]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f042 0220 	orr.w	r2, r2, #32
 800b4b4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	d014      	beq.n	800b4ec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00f      	beq.n	800b4ec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4d2:	f043 0204 	orr.w	r2, r3, #4
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	699a      	ldr	r2, [r3, #24]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4ea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00f      	beq.n	800b516 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4fc:	f043 0201 	orr.w	r2, r3, #1
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	699a      	ldr	r2, [r3, #24]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b514:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00f      	beq.n	800b540 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b526:	f043 0208 	orr.w	r2, r3, #8
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	699a      	ldr	r2, [r3, #24]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b53e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b550:	bf00      	nop
 800b552:	3714      	adds	r7, #20
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	fffffc90 	.word	0xfffffc90

0800b560 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	603b      	str	r3, [r7, #0]
 800b56c:	4613      	mov	r3, r2
 800b56e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b570:	e010      	b.n	800b594 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b572:	f7f6 fbeb 	bl	8001d4c <HAL_GetTick>
 800b576:	4602      	mov	r2, r0
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	1ad3      	subs	r3, r2, r3
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d803      	bhi.n	800b58a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b588:	d102      	bne.n	800b590 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d101      	bne.n	800b594 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b590:	2303      	movs	r3, #3
 800b592:	e00f      	b.n	800b5b4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	695a      	ldr	r2, [r3, #20]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	4013      	ands	r3, r2
 800b59e:	68ba      	ldr	r2, [r7, #8]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	bf0c      	ite	eq
 800b5a4:	2301      	moveq	r3, #1
 800b5a6:	2300      	movne	r3, #0
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	79fb      	ldrb	r3, [r7, #7]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d0df      	beq.n	800b572 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b085      	sub	sp, #20
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5c8:	095b      	lsrs	r3, r3, #5
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	3307      	adds	r3, #7
 800b5da:	08db      	lsrs	r3, r3, #3
 800b5dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	fb02 f303 	mul.w	r3, r2, r3
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
	...

0800b5f4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d121      	bne.n	800b64a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	4b27      	ldr	r3, [pc, #156]	; (800b6a8 <FMC_SDRAM_Init+0xb4>)
 800b60c:	4013      	ands	r3, r2
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	6851      	ldr	r1, [r2, #4]
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	6892      	ldr	r2, [r2, #8]
 800b616:	4311      	orrs	r1, r2
 800b618:	683a      	ldr	r2, [r7, #0]
 800b61a:	68d2      	ldr	r2, [r2, #12]
 800b61c:	4311      	orrs	r1, r2
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	6912      	ldr	r2, [r2, #16]
 800b622:	4311      	orrs	r1, r2
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	6952      	ldr	r2, [r2, #20]
 800b628:	4311      	orrs	r1, r2
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	6992      	ldr	r2, [r2, #24]
 800b62e:	4311      	orrs	r1, r2
 800b630:	683a      	ldr	r2, [r7, #0]
 800b632:	69d2      	ldr	r2, [r2, #28]
 800b634:	4311      	orrs	r1, r2
 800b636:	683a      	ldr	r2, [r7, #0]
 800b638:	6a12      	ldr	r2, [r2, #32]
 800b63a:	4311      	orrs	r1, r2
 800b63c:	683a      	ldr	r2, [r7, #0]
 800b63e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b640:	430a      	orrs	r2, r1
 800b642:	431a      	orrs	r2, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	601a      	str	r2, [r3, #0]
 800b648:	e026      	b.n	800b698 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	69d9      	ldr	r1, [r3, #28]
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	6a1b      	ldr	r3, [r3, #32]
 800b65a:	4319      	orrs	r1, r3
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b660:	430b      	orrs	r3, r1
 800b662:	431a      	orrs	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	685a      	ldr	r2, [r3, #4]
 800b66c:	4b0e      	ldr	r3, [pc, #56]	; (800b6a8 <FMC_SDRAM_Init+0xb4>)
 800b66e:	4013      	ands	r3, r2
 800b670:	683a      	ldr	r2, [r7, #0]
 800b672:	6851      	ldr	r1, [r2, #4]
 800b674:	683a      	ldr	r2, [r7, #0]
 800b676:	6892      	ldr	r2, [r2, #8]
 800b678:	4311      	orrs	r1, r2
 800b67a:	683a      	ldr	r2, [r7, #0]
 800b67c:	68d2      	ldr	r2, [r2, #12]
 800b67e:	4311      	orrs	r1, r2
 800b680:	683a      	ldr	r2, [r7, #0]
 800b682:	6912      	ldr	r2, [r2, #16]
 800b684:	4311      	orrs	r1, r2
 800b686:	683a      	ldr	r2, [r7, #0]
 800b688:	6952      	ldr	r2, [r2, #20]
 800b68a:	4311      	orrs	r1, r2
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	6992      	ldr	r2, [r2, #24]
 800b690:	430a      	orrs	r2, r1
 800b692:	431a      	orrs	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	ffff8000 	.word	0xffff8000

0800b6ac <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d128      	bne.n	800b710 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	1e59      	subs	r1, r3, #1
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	011b      	lsls	r3, r3, #4
 800b6d4:	4319      	orrs	r1, r3
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	021b      	lsls	r3, r3, #8
 800b6de:	4319      	orrs	r1, r3
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	031b      	lsls	r3, r3, #12
 800b6e8:	4319      	orrs	r1, r3
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	691b      	ldr	r3, [r3, #16]
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	041b      	lsls	r3, r3, #16
 800b6f2:	4319      	orrs	r1, r3
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	695b      	ldr	r3, [r3, #20]
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	051b      	lsls	r3, r3, #20
 800b6fc:	4319      	orrs	r1, r3
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	699b      	ldr	r3, [r3, #24]
 800b702:	3b01      	subs	r3, #1
 800b704:	061b      	lsls	r3, r3, #24
 800b706:	430b      	orrs	r3, r1
 800b708:	431a      	orrs	r2, r3
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	609a      	str	r2, [r3, #8]
 800b70e:	e02d      	b.n	800b76c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	689a      	ldr	r2, [r3, #8]
 800b714:	4b19      	ldr	r3, [pc, #100]	; (800b77c <FMC_SDRAM_Timing_Init+0xd0>)
 800b716:	4013      	ands	r3, r2
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	68d2      	ldr	r2, [r2, #12]
 800b71c:	3a01      	subs	r2, #1
 800b71e:	0311      	lsls	r1, r2, #12
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	6952      	ldr	r2, [r2, #20]
 800b724:	3a01      	subs	r2, #1
 800b726:	0512      	lsls	r2, r2, #20
 800b728:	430a      	orrs	r2, r1
 800b72a:	431a      	orrs	r2, r3
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	1e59      	subs	r1, r3, #1
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	3b01      	subs	r3, #1
 800b744:	011b      	lsls	r3, r3, #4
 800b746:	4319      	orrs	r1, r3
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	3b01      	subs	r3, #1
 800b74e:	021b      	lsls	r3, r3, #8
 800b750:	4319      	orrs	r1, r3
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	3b01      	subs	r3, #1
 800b758:	041b      	lsls	r3, r3, #16
 800b75a:	4319      	orrs	r1, r3
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	699b      	ldr	r3, [r3, #24]
 800b760:	3b01      	subs	r3, #1
 800b762:	061b      	lsls	r3, r3, #24
 800b764:	430b      	orrs	r3, r1
 800b766:	431a      	orrs	r2, r3
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3714      	adds	r7, #20
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	ff0f0fff 	.word	0xff0f0fff

0800b780 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	691a      	ldr	r2, [r3, #16]
 800b790:	4b0c      	ldr	r3, [pc, #48]	; (800b7c4 <FMC_SDRAM_SendCommand+0x44>)
 800b792:	4013      	ands	r3, r2
 800b794:	68ba      	ldr	r2, [r7, #8]
 800b796:	6811      	ldr	r1, [r2, #0]
 800b798:	68ba      	ldr	r2, [r7, #8]
 800b79a:	6852      	ldr	r2, [r2, #4]
 800b79c:	4311      	orrs	r1, r2
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	6892      	ldr	r2, [r2, #8]
 800b7a2:	3a01      	subs	r2, #1
 800b7a4:	0152      	lsls	r2, r2, #5
 800b7a6:	4311      	orrs	r1, r2
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	68d2      	ldr	r2, [r2, #12]
 800b7ac:	0252      	lsls	r2, r2, #9
 800b7ae:	430a      	orrs	r2, r1
 800b7b0:	431a      	orrs	r2, r3
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	ffc00000 	.word	0xffc00000

0800b7c8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	695a      	ldr	r2, [r3, #20]
 800b7d6:	4b07      	ldr	r3, [pc, #28]	; (800b7f4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b7d8:	4013      	ands	r3, r2
 800b7da:	683a      	ldr	r2, [r7, #0]
 800b7dc:	0052      	lsls	r2, r2, #1
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	ffffc001 	.word	0xffffc001

0800b7f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b7f8:	b084      	sub	sp, #16
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b084      	sub	sp, #16
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	f107 001c 	add.w	r0, r7, #28
 800b806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b80a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d121      	bne.n	800b856 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b816:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	68da      	ldr	r2, [r3, #12]
 800b822:	4b2c      	ldr	r3, [pc, #176]	; (800b8d4 <USB_CoreInit+0xdc>)
 800b824:	4013      	ands	r3, r2
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b836:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d105      	bne.n	800b84a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f001 fa1a 	bl	800cc84 <USB_CoreReset>
 800b850:	4603      	mov	r3, r0
 800b852:	73fb      	strb	r3, [r7, #15]
 800b854:	e01b      	b.n	800b88e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f001 fa0e 	bl	800cc84 <USB_CoreReset>
 800b868:	4603      	mov	r3, r0
 800b86a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b86c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b870:	2b00      	cmp	r3, #0
 800b872:	d106      	bne.n	800b882 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b878:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	639a      	str	r2, [r3, #56]	; 0x38
 800b880:	e005      	b.n	800b88e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b886:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b88e:	7fbb      	ldrb	r3, [r7, #30]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d116      	bne.n	800b8c2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b898:	b29a      	uxth	r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b8a2:	4b0d      	ldr	r3, [pc, #52]	; (800b8d8 <USB_CoreInit+0xe0>)
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	f043 0206 	orr.w	r2, r3, #6
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	f043 0220 	orr.w	r2, r3, #32
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b8ce:	b004      	add	sp, #16
 800b8d0:	4770      	bx	lr
 800b8d2:	bf00      	nop
 800b8d4:	ffbdffbf 	.word	0xffbdffbf
 800b8d8:	03ee0000 	.word	0x03ee0000

0800b8dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b8ea:	79fb      	ldrb	r3, [r7, #7]
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d165      	bne.n	800b9bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	4a41      	ldr	r2, [pc, #260]	; (800b9f8 <USB_SetTurnaroundTime+0x11c>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d906      	bls.n	800b906 <USB_SetTurnaroundTime+0x2a>
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	4a40      	ldr	r2, [pc, #256]	; (800b9fc <USB_SetTurnaroundTime+0x120>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d202      	bcs.n	800b906 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b900:	230f      	movs	r3, #15
 800b902:	617b      	str	r3, [r7, #20]
 800b904:	e062      	b.n	800b9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	4a3c      	ldr	r2, [pc, #240]	; (800b9fc <USB_SetTurnaroundTime+0x120>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d306      	bcc.n	800b91c <USB_SetTurnaroundTime+0x40>
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	4a3b      	ldr	r2, [pc, #236]	; (800ba00 <USB_SetTurnaroundTime+0x124>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d202      	bcs.n	800b91c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b916:	230e      	movs	r3, #14
 800b918:	617b      	str	r3, [r7, #20]
 800b91a:	e057      	b.n	800b9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	4a38      	ldr	r2, [pc, #224]	; (800ba00 <USB_SetTurnaroundTime+0x124>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d306      	bcc.n	800b932 <USB_SetTurnaroundTime+0x56>
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	4a37      	ldr	r2, [pc, #220]	; (800ba04 <USB_SetTurnaroundTime+0x128>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d202      	bcs.n	800b932 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b92c:	230d      	movs	r3, #13
 800b92e:	617b      	str	r3, [r7, #20]
 800b930:	e04c      	b.n	800b9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	4a33      	ldr	r2, [pc, #204]	; (800ba04 <USB_SetTurnaroundTime+0x128>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d306      	bcc.n	800b948 <USB_SetTurnaroundTime+0x6c>
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	4a32      	ldr	r2, [pc, #200]	; (800ba08 <USB_SetTurnaroundTime+0x12c>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d802      	bhi.n	800b948 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b942:	230c      	movs	r3, #12
 800b944:	617b      	str	r3, [r7, #20]
 800b946:	e041      	b.n	800b9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	4a2f      	ldr	r2, [pc, #188]	; (800ba08 <USB_SetTurnaroundTime+0x12c>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d906      	bls.n	800b95e <USB_SetTurnaroundTime+0x82>
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	4a2e      	ldr	r2, [pc, #184]	; (800ba0c <USB_SetTurnaroundTime+0x130>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d802      	bhi.n	800b95e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b958:	230b      	movs	r3, #11
 800b95a:	617b      	str	r3, [r7, #20]
 800b95c:	e036      	b.n	800b9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	4a2a      	ldr	r2, [pc, #168]	; (800ba0c <USB_SetTurnaroundTime+0x130>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d906      	bls.n	800b974 <USB_SetTurnaroundTime+0x98>
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	4a29      	ldr	r2, [pc, #164]	; (800ba10 <USB_SetTurnaroundTime+0x134>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d802      	bhi.n	800b974 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b96e:	230a      	movs	r3, #10
 800b970:	617b      	str	r3, [r7, #20]
 800b972:	e02b      	b.n	800b9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	4a26      	ldr	r2, [pc, #152]	; (800ba10 <USB_SetTurnaroundTime+0x134>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d906      	bls.n	800b98a <USB_SetTurnaroundTime+0xae>
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	4a25      	ldr	r2, [pc, #148]	; (800ba14 <USB_SetTurnaroundTime+0x138>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d202      	bcs.n	800b98a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b984:	2309      	movs	r3, #9
 800b986:	617b      	str	r3, [r7, #20]
 800b988:	e020      	b.n	800b9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	4a21      	ldr	r2, [pc, #132]	; (800ba14 <USB_SetTurnaroundTime+0x138>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d306      	bcc.n	800b9a0 <USB_SetTurnaroundTime+0xc4>
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	4a20      	ldr	r2, [pc, #128]	; (800ba18 <USB_SetTurnaroundTime+0x13c>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d802      	bhi.n	800b9a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b99a:	2308      	movs	r3, #8
 800b99c:	617b      	str	r3, [r7, #20]
 800b99e:	e015      	b.n	800b9cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	4a1d      	ldr	r2, [pc, #116]	; (800ba18 <USB_SetTurnaroundTime+0x13c>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d906      	bls.n	800b9b6 <USB_SetTurnaroundTime+0xda>
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	4a1c      	ldr	r2, [pc, #112]	; (800ba1c <USB_SetTurnaroundTime+0x140>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d202      	bcs.n	800b9b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b9b0:	2307      	movs	r3, #7
 800b9b2:	617b      	str	r3, [r7, #20]
 800b9b4:	e00a      	b.n	800b9cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b9b6:	2306      	movs	r3, #6
 800b9b8:	617b      	str	r3, [r7, #20]
 800b9ba:	e007      	b.n	800b9cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b9bc:	79fb      	ldrb	r3, [r7, #7]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d102      	bne.n	800b9c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b9c2:	2309      	movs	r3, #9
 800b9c4:	617b      	str	r3, [r7, #20]
 800b9c6:	e001      	b.n	800b9cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b9c8:	2309      	movs	r3, #9
 800b9ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	68da      	ldr	r2, [r3, #12]
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	029b      	lsls	r3, r3, #10
 800b9e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b9e4:	431a      	orrs	r2, r3
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	371c      	adds	r7, #28
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	00d8acbf 	.word	0x00d8acbf
 800b9fc:	00e4e1c0 	.word	0x00e4e1c0
 800ba00:	00f42400 	.word	0x00f42400
 800ba04:	01067380 	.word	0x01067380
 800ba08:	011a499f 	.word	0x011a499f
 800ba0c:	01312cff 	.word	0x01312cff
 800ba10:	014ca43f 	.word	0x014ca43f
 800ba14:	016e3600 	.word	0x016e3600
 800ba18:	01a6ab1f 	.word	0x01a6ab1f
 800ba1c:	01e84800 	.word	0x01e84800

0800ba20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	f043 0201 	orr.w	r2, r3, #1
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba34:	2300      	movs	r3, #0
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	370c      	adds	r7, #12
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b083      	sub	sp, #12
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	f023 0201 	bic.w	r2, r3, #1
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ba70:	2300      	movs	r3, #0
 800ba72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d115      	bne.n	800bab2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ba92:	200a      	movs	r0, #10
 800ba94:	f7f6 f966 	bl	8001d64 <HAL_Delay>
      ms += 10U;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	330a      	adds	r3, #10
 800ba9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f001 f85f 	bl	800cb62 <USB_GetMode>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d01e      	beq.n	800bae8 <USB_SetCurrentMode+0x84>
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2bc7      	cmp	r3, #199	; 0xc7
 800baae:	d9f0      	bls.n	800ba92 <USB_SetCurrentMode+0x2e>
 800bab0:	e01a      	b.n	800bae8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bab2:	78fb      	ldrb	r3, [r7, #3]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d115      	bne.n	800bae4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bac4:	200a      	movs	r0, #10
 800bac6:	f7f6 f94d 	bl	8001d64 <HAL_Delay>
      ms += 10U;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	330a      	adds	r3, #10
 800bace:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f001 f846 	bl	800cb62 <USB_GetMode>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d005      	beq.n	800bae8 <USB_SetCurrentMode+0x84>
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2bc7      	cmp	r3, #199	; 0xc7
 800bae0:	d9f0      	bls.n	800bac4 <USB_SetCurrentMode+0x60>
 800bae2:	e001      	b.n	800bae8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e005      	b.n	800baf4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2bc8      	cmp	r3, #200	; 0xc8
 800baec:	d101      	bne.n	800baf2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e000      	b.n	800baf4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800baf2:	2300      	movs	r3, #0
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3710      	adds	r7, #16
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bafc:	b084      	sub	sp, #16
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b086      	sub	sp, #24
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bb0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bb16:	2300      	movs	r3, #0
 800bb18:	613b      	str	r3, [r7, #16]
 800bb1a:	e009      	b.n	800bb30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	3340      	adds	r3, #64	; 0x40
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	4413      	add	r3, r2
 800bb26:	2200      	movs	r2, #0
 800bb28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	613b      	str	r3, [r7, #16]
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	2b0e      	cmp	r3, #14
 800bb34:	d9f2      	bls.n	800bb1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bb36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d11c      	bne.n	800bb78 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb4c:	f043 0302 	orr.w	r3, r3, #2
 800bb50:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb56:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	601a      	str	r2, [r3, #0]
 800bb76:	e005      	b.n	800bb84 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bb90:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d10d      	bne.n	800bbb4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bb98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d104      	bne.n	800bbaa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bba0:	2100      	movs	r1, #0
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f968 	bl	800be78 <USB_SetDevSpeed>
 800bba8:	e008      	b.n	800bbbc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bbaa:	2101      	movs	r1, #1
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 f963 	bl	800be78 <USB_SetDevSpeed>
 800bbb2:	e003      	b.n	800bbbc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bbb4:	2103      	movs	r1, #3
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 f95e 	bl	800be78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bbbc:	2110      	movs	r1, #16
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 f8fa 	bl	800bdb8 <USB_FlushTxFifo>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 f924 	bl	800be1c <USB_FlushRxFifo>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d001      	beq.n	800bbde <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	2300      	movs	r3, #0
 800bc00:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc02:	2300      	movs	r3, #0
 800bc04:	613b      	str	r3, [r7, #16]
 800bc06:	e043      	b.n	800bc90 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	015a      	lsls	r2, r3, #5
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	4413      	add	r3, r2
 800bc10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc1e:	d118      	bne.n	800bc52 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10a      	bne.n	800bc3c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	015a      	lsls	r2, r3, #5
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc32:	461a      	mov	r2, r3
 800bc34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc38:	6013      	str	r3, [r2, #0]
 800bc3a:	e013      	b.n	800bc64 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	015a      	lsls	r2, r3, #5
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	4413      	add	r3, r2
 800bc44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc48:	461a      	mov	r2, r3
 800bc4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bc4e:	6013      	str	r3, [r2, #0]
 800bc50:	e008      	b.n	800bc64 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	015a      	lsls	r2, r3, #5
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	4413      	add	r3, r2
 800bc5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc5e:	461a      	mov	r2, r3
 800bc60:	2300      	movs	r3, #0
 800bc62:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	015a      	lsls	r2, r3, #5
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc70:	461a      	mov	r2, r3
 800bc72:	2300      	movs	r3, #0
 800bc74:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	015a      	lsls	r2, r3, #5
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc82:	461a      	mov	r2, r3
 800bc84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bc88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	613b      	str	r3, [r7, #16]
 800bc90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bc94:	461a      	mov	r2, r3
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d3b5      	bcc.n	800bc08 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	613b      	str	r3, [r7, #16]
 800bca0:	e043      	b.n	800bd2a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	015a      	lsls	r2, r3, #5
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	4413      	add	r3, r2
 800bcaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcb8:	d118      	bne.n	800bcec <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10a      	bne.n	800bcd6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	015a      	lsls	r2, r3, #5
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bccc:	461a      	mov	r2, r3
 800bcce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bcd2:	6013      	str	r3, [r2, #0]
 800bcd4:	e013      	b.n	800bcfe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	015a      	lsls	r2, r3, #5
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	4413      	add	r3, r2
 800bcde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce2:	461a      	mov	r2, r3
 800bce4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bce8:	6013      	str	r3, [r2, #0]
 800bcea:	e008      	b.n	800bcfe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	015a      	lsls	r2, r3, #5
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	015a      	lsls	r2, r3, #5
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	4413      	add	r3, r2
 800bd06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	015a      	lsls	r2, r3, #5
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	4413      	add	r3, r2
 800bd18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	3301      	adds	r3, #1
 800bd28:	613b      	str	r3, [r7, #16]
 800bd2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd2e:	461a      	mov	r2, r3
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d3b5      	bcc.n	800bca2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd3c:	691b      	ldr	r3, [r3, #16]
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd48:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bd56:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bd58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d105      	bne.n	800bd6c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	f043 0210 	orr.w	r2, r3, #16
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	699a      	ldr	r2, [r3, #24]
 800bd70:	4b0f      	ldr	r3, [pc, #60]	; (800bdb0 <USB_DevInit+0x2b4>)
 800bd72:	4313      	orrs	r3, r2
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bd78:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d005      	beq.n	800bd8c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	699b      	ldr	r3, [r3, #24]
 800bd84:	f043 0208 	orr.w	r2, r3, #8
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bd8c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d105      	bne.n	800bda0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	699a      	ldr	r2, [r3, #24]
 800bd98:	4b06      	ldr	r3, [pc, #24]	; (800bdb4 <USB_DevInit+0x2b8>)
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bda0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3718      	adds	r7, #24
 800bda6:	46bd      	mov	sp, r7
 800bda8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bdac:	b004      	add	sp, #16
 800bdae:	4770      	bx	lr
 800bdb0:	803c3800 	.word	0x803c3800
 800bdb4:	40000004 	.word	0x40000004

0800bdb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bdd2:	d901      	bls.n	800bdd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	e01b      	b.n	800be10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	691b      	ldr	r3, [r3, #16]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	daf2      	bge.n	800bdc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bde0:	2300      	movs	r3, #0
 800bde2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	019b      	lsls	r3, r3, #6
 800bde8:	f043 0220 	orr.w	r2, r3, #32
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bdfc:	d901      	bls.n	800be02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bdfe:	2303      	movs	r3, #3
 800be00:	e006      	b.n	800be10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	f003 0320 	and.w	r3, r3, #32
 800be0a:	2b20      	cmp	r3, #32
 800be0c:	d0f0      	beq.n	800bdf0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be24:	2300      	movs	r3, #0
 800be26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	3301      	adds	r3, #1
 800be2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800be34:	d901      	bls.n	800be3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800be36:	2303      	movs	r3, #3
 800be38:	e018      	b.n	800be6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	daf2      	bge.n	800be28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800be42:	2300      	movs	r3, #0
 800be44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2210      	movs	r2, #16
 800be4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	3301      	adds	r3, #1
 800be50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800be58:	d901      	bls.n	800be5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800be5a:	2303      	movs	r3, #3
 800be5c:	e006      	b.n	800be6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	f003 0310 	and.w	r3, r3, #16
 800be66:	2b10      	cmp	r3, #16
 800be68:	d0f0      	beq.n	800be4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	460b      	mov	r3, r1
 800be82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	78fb      	ldrb	r3, [r7, #3]
 800be92:	68f9      	ldr	r1, [r7, #12]
 800be94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be98:	4313      	orrs	r3, r2
 800be9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3714      	adds	r7, #20
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr

0800beaa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800beaa:	b480      	push	{r7}
 800beac:	b087      	sub	sp, #28
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	f003 0306 	and.w	r3, r3, #6
 800bec2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d102      	bne.n	800bed0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800beca:	2300      	movs	r3, #0
 800becc:	75fb      	strb	r3, [r7, #23]
 800bece:	e00a      	b.n	800bee6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2b02      	cmp	r3, #2
 800bed4:	d002      	beq.n	800bedc <USB_GetDevSpeed+0x32>
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2b06      	cmp	r3, #6
 800beda:	d102      	bne.n	800bee2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bedc:	2302      	movs	r3, #2
 800bede:	75fb      	strb	r3, [r7, #23]
 800bee0:	e001      	b.n	800bee6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bee2:	230f      	movs	r3, #15
 800bee4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bee6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	371c      	adds	r7, #28
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	785b      	ldrb	r3, [r3, #1]
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d139      	bne.n	800bf84 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf16:	69da      	ldr	r2, [r3, #28]
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	f003 030f 	and.w	r3, r3, #15
 800bf20:	2101      	movs	r1, #1
 800bf22:	fa01 f303 	lsl.w	r3, r1, r3
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	68f9      	ldr	r1, [r7, #12]
 800bf2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	015a      	lsls	r2, r3, #5
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	4413      	add	r3, r2
 800bf3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d153      	bne.n	800bff0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	015a      	lsls	r2, r3, #5
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	4413      	add	r3, r2
 800bf50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	791b      	ldrb	r3, [r3, #4]
 800bf62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	059b      	lsls	r3, r3, #22
 800bf6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf6c:	431a      	orrs	r2, r3
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	0159      	lsls	r1, r3, #5
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	440b      	add	r3, r1
 800bf76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4b20      	ldr	r3, [pc, #128]	; (800c000 <USB_ActivateEndpoint+0x10c>)
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	600b      	str	r3, [r1, #0]
 800bf82:	e035      	b.n	800bff0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf8a:	69da      	ldr	r2, [r3, #28]
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	f003 030f 	and.w	r3, r3, #15
 800bf94:	2101      	movs	r1, #1
 800bf96:	fa01 f303 	lsl.w	r3, r1, r3
 800bf9a:	041b      	lsls	r3, r3, #16
 800bf9c:	68f9      	ldr	r1, [r7, #12]
 800bf9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	015a      	lsls	r2, r3, #5
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	4413      	add	r3, r2
 800bfae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d119      	bne.n	800bff0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	015a      	lsls	r2, r3, #5
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	791b      	ldrb	r3, [r3, #4]
 800bfd6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bfd8:	430b      	orrs	r3, r1
 800bfda:	431a      	orrs	r2, r3
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	0159      	lsls	r1, r3, #5
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	440b      	add	r3, r1
 800bfe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfe8:	4619      	mov	r1, r3
 800bfea:	4b05      	ldr	r3, [pc, #20]	; (800c000 <USB_ActivateEndpoint+0x10c>)
 800bfec:	4313      	orrs	r3, r2
 800bfee:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bff0:	2300      	movs	r3, #0
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3714      	adds	r7, #20
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	10008000 	.word	0x10008000

0800c004 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b08a      	sub	sp, #40	; 0x28
 800c008:	af02      	add	r7, sp, #8
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	4613      	mov	r3, r2
 800c010:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	785b      	ldrb	r3, [r3, #1]
 800c020:	2b01      	cmp	r3, #1
 800c022:	f040 8181 	bne.w	800c328 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d132      	bne.n	800c094 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	015a      	lsls	r2, r3, #5
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	4413      	add	r3, r2
 800c036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c03a:	691a      	ldr	r2, [r3, #16]
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	0159      	lsls	r1, r3, #5
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	440b      	add	r3, r1
 800c044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c048:	4619      	mov	r1, r3
 800c04a:	4ba5      	ldr	r3, [pc, #660]	; (800c2e0 <USB_EPStartXfer+0x2dc>)
 800c04c:	4013      	ands	r3, r2
 800c04e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	015a      	lsls	r2, r3, #5
 800c054:	69fb      	ldr	r3, [r7, #28]
 800c056:	4413      	add	r3, r2
 800c058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c05c:	691b      	ldr	r3, [r3, #16]
 800c05e:	69ba      	ldr	r2, [r7, #24]
 800c060:	0151      	lsls	r1, r2, #5
 800c062:	69fa      	ldr	r2, [r7, #28]
 800c064:	440a      	add	r2, r1
 800c066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c06a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c06e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	015a      	lsls	r2, r3, #5
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	4413      	add	r3, r2
 800c078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c07c:	691a      	ldr	r2, [r3, #16]
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	0159      	lsls	r1, r3, #5
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	440b      	add	r3, r1
 800c086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c08a:	4619      	mov	r1, r3
 800c08c:	4b95      	ldr	r3, [pc, #596]	; (800c2e4 <USB_EPStartXfer+0x2e0>)
 800c08e:	4013      	ands	r3, r2
 800c090:	610b      	str	r3, [r1, #16]
 800c092:	e092      	b.n	800c1ba <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	015a      	lsls	r2, r3, #5
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	4413      	add	r3, r2
 800c09c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0a0:	691a      	ldr	r2, [r3, #16]
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	0159      	lsls	r1, r3, #5
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	440b      	add	r3, r1
 800c0aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	4b8c      	ldr	r3, [pc, #560]	; (800c2e4 <USB_EPStartXfer+0x2e0>)
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	015a      	lsls	r2, r3, #5
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	4413      	add	r3, r2
 800c0be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c2:	691a      	ldr	r2, [r3, #16]
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	0159      	lsls	r1, r3, #5
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	440b      	add	r3, r1
 800c0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	4b83      	ldr	r3, [pc, #524]	; (800c2e0 <USB_EPStartXfer+0x2dc>)
 800c0d4:	4013      	ands	r3, r2
 800c0d6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d11a      	bne.n	800c114 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	691a      	ldr	r2, [r3, #16]
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d903      	bls.n	800c0f2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	689a      	ldr	r2, [r3, #8]
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	015a      	lsls	r2, r3, #5
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0fe:	691b      	ldr	r3, [r3, #16]
 800c100:	69ba      	ldr	r2, [r7, #24]
 800c102:	0151      	lsls	r1, r2, #5
 800c104:	69fa      	ldr	r2, [r7, #28]
 800c106:	440a      	add	r2, r1
 800c108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c10c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c110:	6113      	str	r3, [r2, #16]
 800c112:	e01b      	b.n	800c14c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	015a      	lsls	r2, r3, #5
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	4413      	add	r3, r2
 800c11c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c120:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	6919      	ldr	r1, [r3, #16]
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	440b      	add	r3, r1
 800c12c:	1e59      	subs	r1, r3, #1
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	fbb1 f3f3 	udiv	r3, r1, r3
 800c136:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c138:	4b6b      	ldr	r3, [pc, #428]	; (800c2e8 <USB_EPStartXfer+0x2e4>)
 800c13a:	400b      	ands	r3, r1
 800c13c:	69b9      	ldr	r1, [r7, #24]
 800c13e:	0148      	lsls	r0, r1, #5
 800c140:	69f9      	ldr	r1, [r7, #28]
 800c142:	4401      	add	r1, r0
 800c144:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c148:	4313      	orrs	r3, r2
 800c14a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	015a      	lsls	r2, r3, #5
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	4413      	add	r3, r2
 800c154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c158:	691a      	ldr	r2, [r3, #16]
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	691b      	ldr	r3, [r3, #16]
 800c15e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c162:	69b9      	ldr	r1, [r7, #24]
 800c164:	0148      	lsls	r0, r1, #5
 800c166:	69f9      	ldr	r1, [r7, #28]
 800c168:	4401      	add	r1, r0
 800c16a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c16e:	4313      	orrs	r3, r2
 800c170:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	791b      	ldrb	r3, [r3, #4]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d11f      	bne.n	800c1ba <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	015a      	lsls	r2, r3, #5
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	4413      	add	r3, r2
 800c182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c186:	691b      	ldr	r3, [r3, #16]
 800c188:	69ba      	ldr	r2, [r7, #24]
 800c18a:	0151      	lsls	r1, r2, #5
 800c18c:	69fa      	ldr	r2, [r7, #28]
 800c18e:	440a      	add	r2, r1
 800c190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c194:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c198:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	015a      	lsls	r2, r3, #5
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	69ba      	ldr	r2, [r7, #24]
 800c1aa:	0151      	lsls	r1, r2, #5
 800c1ac:	69fa      	ldr	r2, [r7, #28]
 800c1ae:	440a      	add	r2, r1
 800c1b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c1b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c1ba:	79fb      	ldrb	r3, [r7, #7]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d14b      	bne.n	800c258 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	69db      	ldr	r3, [r3, #28]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d009      	beq.n	800c1dc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	015a      	lsls	r2, r3, #5
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	69db      	ldr	r3, [r3, #28]
 800c1da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	791b      	ldrb	r3, [r3, #4]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d128      	bne.n	800c236 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c1e4:	69fb      	ldr	r3, [r7, #28]
 800c1e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d110      	bne.n	800c216 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	015a      	lsls	r2, r3, #5
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	69ba      	ldr	r2, [r7, #24]
 800c204:	0151      	lsls	r1, r2, #5
 800c206:	69fa      	ldr	r2, [r7, #28]
 800c208:	440a      	add	r2, r1
 800c20a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c20e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c212:	6013      	str	r3, [r2, #0]
 800c214:	e00f      	b.n	800c236 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	015a      	lsls	r2, r3, #5
 800c21a:	69fb      	ldr	r3, [r7, #28]
 800c21c:	4413      	add	r3, r2
 800c21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	69ba      	ldr	r2, [r7, #24]
 800c226:	0151      	lsls	r1, r2, #5
 800c228:	69fa      	ldr	r2, [r7, #28]
 800c22a:	440a      	add	r2, r1
 800c22c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c234:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	015a      	lsls	r2, r3, #5
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	4413      	add	r3, r2
 800c23e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	69ba      	ldr	r2, [r7, #24]
 800c246:	0151      	lsls	r1, r2, #5
 800c248:	69fa      	ldr	r2, [r7, #28]
 800c24a:	440a      	add	r2, r1
 800c24c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c250:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c254:	6013      	str	r3, [r2, #0]
 800c256:	e16a      	b.n	800c52e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	015a      	lsls	r2, r3, #5
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	4413      	add	r3, r2
 800c260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	69ba      	ldr	r2, [r7, #24]
 800c268:	0151      	lsls	r1, r2, #5
 800c26a:	69fa      	ldr	r2, [r7, #28]
 800c26c:	440a      	add	r2, r1
 800c26e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c272:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c276:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	791b      	ldrb	r3, [r3, #4]
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d015      	beq.n	800c2ac <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	2b00      	cmp	r3, #0
 800c286:	f000 8152 	beq.w	800c52e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	f003 030f 	and.w	r3, r3, #15
 800c29a:	2101      	movs	r1, #1
 800c29c:	fa01 f303 	lsl.w	r3, r1, r3
 800c2a0:	69f9      	ldr	r1, [r7, #28]
 800c2a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	634b      	str	r3, [r1, #52]	; 0x34
 800c2aa:	e140      	b.n	800c52e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d117      	bne.n	800c2ec <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	015a      	lsls	r2, r3, #5
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	69ba      	ldr	r2, [r7, #24]
 800c2cc:	0151      	lsls	r1, r2, #5
 800c2ce:	69fa      	ldr	r2, [r7, #28]
 800c2d0:	440a      	add	r2, r1
 800c2d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c2da:	6013      	str	r3, [r2, #0]
 800c2dc:	e016      	b.n	800c30c <USB_EPStartXfer+0x308>
 800c2de:	bf00      	nop
 800c2e0:	e007ffff 	.word	0xe007ffff
 800c2e4:	fff80000 	.word	0xfff80000
 800c2e8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	015a      	lsls	r2, r3, #5
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	69ba      	ldr	r2, [r7, #24]
 800c2fc:	0151      	lsls	r1, r2, #5
 800c2fe:	69fa      	ldr	r2, [r7, #28]
 800c300:	440a      	add	r2, r1
 800c302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c30a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	68d9      	ldr	r1, [r3, #12]
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	781a      	ldrb	r2, [r3, #0]
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	b298      	uxth	r0, r3
 800c31a:	79fb      	ldrb	r3, [r7, #7]
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	4603      	mov	r3, r0
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	f000 f9b9 	bl	800c698 <USB_WritePacket>
 800c326:	e102      	b.n	800c52e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	015a      	lsls	r2, r3, #5
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	4413      	add	r3, r2
 800c330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c334:	691a      	ldr	r2, [r3, #16]
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	0159      	lsls	r1, r3, #5
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	440b      	add	r3, r1
 800c33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c342:	4619      	mov	r1, r3
 800c344:	4b7c      	ldr	r3, [pc, #496]	; (800c538 <USB_EPStartXfer+0x534>)
 800c346:	4013      	ands	r3, r2
 800c348:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	015a      	lsls	r2, r3, #5
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	4413      	add	r3, r2
 800c352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c356:	691a      	ldr	r2, [r3, #16]
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	0159      	lsls	r1, r3, #5
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	440b      	add	r3, r1
 800c360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c364:	4619      	mov	r1, r3
 800c366:	4b75      	ldr	r3, [pc, #468]	; (800c53c <USB_EPStartXfer+0x538>)
 800c368:	4013      	ands	r3, r2
 800c36a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d12f      	bne.n	800c3d2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d003      	beq.n	800c382 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	689a      	ldr	r2, [r3, #8]
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	689a      	ldr	r2, [r3, #8]
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	015a      	lsls	r2, r3, #5
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	4413      	add	r3, r2
 800c392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c396:	691a      	ldr	r2, [r3, #16]
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	6a1b      	ldr	r3, [r3, #32]
 800c39c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3a0:	69b9      	ldr	r1, [r7, #24]
 800c3a2:	0148      	lsls	r0, r1, #5
 800c3a4:	69f9      	ldr	r1, [r7, #28]
 800c3a6:	4401      	add	r1, r0
 800c3a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	015a      	lsls	r2, r3, #5
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3bc:	691b      	ldr	r3, [r3, #16]
 800c3be:	69ba      	ldr	r2, [r7, #24]
 800c3c0:	0151      	lsls	r1, r2, #5
 800c3c2:	69fa      	ldr	r2, [r7, #28]
 800c3c4:	440a      	add	r2, r1
 800c3c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3ce:	6113      	str	r3, [r2, #16]
 800c3d0:	e05f      	b.n	800c492 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d123      	bne.n	800c422 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	015a      	lsls	r2, r3, #5
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e6:	691a      	ldr	r2, [r3, #16]
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3f0:	69b9      	ldr	r1, [r7, #24]
 800c3f2:	0148      	lsls	r0, r1, #5
 800c3f4:	69f9      	ldr	r1, [r7, #28]
 800c3f6:	4401      	add	r1, r0
 800c3f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	015a      	lsls	r2, r3, #5
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	4413      	add	r3, r2
 800c408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	69ba      	ldr	r2, [r7, #24]
 800c410:	0151      	lsls	r1, r2, #5
 800c412:	69fa      	ldr	r2, [r7, #28]
 800c414:	440a      	add	r2, r1
 800c416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c41a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c41e:	6113      	str	r3, [r2, #16]
 800c420:	e037      	b.n	800c492 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	691a      	ldr	r2, [r3, #16]
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	4413      	add	r3, r2
 800c42c:	1e5a      	subs	r2, r3, #1
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	fbb2 f3f3 	udiv	r3, r2, r3
 800c436:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	8afa      	ldrh	r2, [r7, #22]
 800c43e:	fb03 f202 	mul.w	r2, r3, r2
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c446:	69bb      	ldr	r3, [r7, #24]
 800c448:	015a      	lsls	r2, r3, #5
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	4413      	add	r3, r2
 800c44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c452:	691a      	ldr	r2, [r3, #16]
 800c454:	8afb      	ldrh	r3, [r7, #22]
 800c456:	04d9      	lsls	r1, r3, #19
 800c458:	4b39      	ldr	r3, [pc, #228]	; (800c540 <USB_EPStartXfer+0x53c>)
 800c45a:	400b      	ands	r3, r1
 800c45c:	69b9      	ldr	r1, [r7, #24]
 800c45e:	0148      	lsls	r0, r1, #5
 800c460:	69f9      	ldr	r1, [r7, #28]
 800c462:	4401      	add	r1, r0
 800c464:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c468:	4313      	orrs	r3, r2
 800c46a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	015a      	lsls	r2, r3, #5
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	4413      	add	r3, r2
 800c474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c478:	691a      	ldr	r2, [r3, #16]
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	6a1b      	ldr	r3, [r3, #32]
 800c47e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c482:	69b9      	ldr	r1, [r7, #24]
 800c484:	0148      	lsls	r0, r1, #5
 800c486:	69f9      	ldr	r1, [r7, #28]
 800c488:	4401      	add	r1, r0
 800c48a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c48e:	4313      	orrs	r3, r2
 800c490:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c492:	79fb      	ldrb	r3, [r7, #7]
 800c494:	2b01      	cmp	r3, #1
 800c496:	d10d      	bne.n	800c4b4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d009      	beq.n	800c4b4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	68d9      	ldr	r1, [r3, #12]
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	015a      	lsls	r2, r3, #5
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4b0:	460a      	mov	r2, r1
 800c4b2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	791b      	ldrb	r3, [r3, #4]
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d128      	bne.n	800c50e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d110      	bne.n	800c4ee <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c4cc:	69bb      	ldr	r3, [r7, #24]
 800c4ce:	015a      	lsls	r2, r3, #5
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	69ba      	ldr	r2, [r7, #24]
 800c4dc:	0151      	lsls	r1, r2, #5
 800c4de:	69fa      	ldr	r2, [r7, #28]
 800c4e0:	440a      	add	r2, r1
 800c4e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c4ea:	6013      	str	r3, [r2, #0]
 800c4ec:	e00f      	b.n	800c50e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	015a      	lsls	r2, r3, #5
 800c4f2:	69fb      	ldr	r3, [r7, #28]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	69ba      	ldr	r2, [r7, #24]
 800c4fe:	0151      	lsls	r1, r2, #5
 800c500:	69fa      	ldr	r2, [r7, #28]
 800c502:	440a      	add	r2, r1
 800c504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c50c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	015a      	lsls	r2, r3, #5
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	4413      	add	r3, r2
 800c516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	69ba      	ldr	r2, [r7, #24]
 800c51e:	0151      	lsls	r1, r2, #5
 800c520:	69fa      	ldr	r2, [r7, #28]
 800c522:	440a      	add	r2, r1
 800c524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c528:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c52c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c52e:	2300      	movs	r3, #0
}
 800c530:	4618      	mov	r0, r3
 800c532:	3720      	adds	r7, #32
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	fff80000 	.word	0xfff80000
 800c53c:	e007ffff 	.word	0xe007ffff
 800c540:	1ff80000 	.word	0x1ff80000

0800c544 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c544:	b480      	push	{r7}
 800c546:	b087      	sub	sp, #28
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c54e:	2300      	movs	r3, #0
 800c550:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	785b      	ldrb	r3, [r3, #1]
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d14a      	bne.n	800c5f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	015a      	lsls	r2, r3, #5
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	4413      	add	r3, r2
 800c56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c57a:	f040 8086 	bne.w	800c68a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	015a      	lsls	r2, r3, #5
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	4413      	add	r3, r2
 800c588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	683a      	ldr	r2, [r7, #0]
 800c590:	7812      	ldrb	r2, [r2, #0]
 800c592:	0151      	lsls	r1, r2, #5
 800c594:	693a      	ldr	r2, [r7, #16]
 800c596:	440a      	add	r2, r1
 800c598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c59c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c5a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	015a      	lsls	r2, r3, #5
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	7812      	ldrb	r2, [r2, #0]
 800c5b6:	0151      	lsls	r1, r2, #5
 800c5b8:	693a      	ldr	r2, [r7, #16]
 800c5ba:	440a      	add	r2, r1
 800c5bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c5c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f242 7210 	movw	r2, #10000	; 0x2710
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d902      	bls.n	800c5dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	75fb      	strb	r3, [r7, #23]
          break;
 800c5da:	e056      	b.n	800c68a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	015a      	lsls	r2, r3, #5
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5f4:	d0e7      	beq.n	800c5c6 <USB_EPStopXfer+0x82>
 800c5f6:	e048      	b.n	800c68a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	015a      	lsls	r2, r3, #5
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	4413      	add	r3, r2
 800c602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c60c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c610:	d13b      	bne.n	800c68a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	015a      	lsls	r2, r3, #5
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	4413      	add	r3, r2
 800c61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	7812      	ldrb	r2, [r2, #0]
 800c626:	0151      	lsls	r1, r2, #5
 800c628:	693a      	ldr	r2, [r7, #16]
 800c62a:	440a      	add	r2, r1
 800c62c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c630:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c634:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	015a      	lsls	r2, r3, #5
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	4413      	add	r3, r2
 800c640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	683a      	ldr	r2, [r7, #0]
 800c648:	7812      	ldrb	r2, [r2, #0]
 800c64a:	0151      	lsls	r1, r2, #5
 800c64c:	693a      	ldr	r2, [r7, #16]
 800c64e:	440a      	add	r2, r1
 800c650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c658:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	3301      	adds	r3, #1
 800c65e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f242 7210 	movw	r2, #10000	; 0x2710
 800c666:	4293      	cmp	r3, r2
 800c668:	d902      	bls.n	800c670 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c66a:	2301      	movs	r3, #1
 800c66c:	75fb      	strb	r3, [r7, #23]
          break;
 800c66e:	e00c      	b.n	800c68a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	015a      	lsls	r2, r3, #5
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	4413      	add	r3, r2
 800c67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c688:	d0e7      	beq.n	800c65a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c68a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	371c      	adds	r7, #28
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c698:	b480      	push	{r7}
 800c69a:	b089      	sub	sp, #36	; 0x24
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	4611      	mov	r1, r2
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	71fb      	strb	r3, [r7, #7]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c6b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d123      	bne.n	800c706 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c6be:	88bb      	ldrh	r3, [r7, #4]
 800c6c0:	3303      	adds	r3, #3
 800c6c2:	089b      	lsrs	r3, r3, #2
 800c6c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	61bb      	str	r3, [r7, #24]
 800c6ca:	e018      	b.n	800c6fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c6cc:	79fb      	ldrb	r3, [r7, #7]
 800c6ce:	031a      	lsls	r2, r3, #12
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6d8:	461a      	mov	r2, r3
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	61bb      	str	r3, [r7, #24]
 800c6fe:	69ba      	ldr	r2, [r7, #24]
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	429a      	cmp	r2, r3
 800c704:	d3e2      	bcc.n	800c6cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c706:	2300      	movs	r3, #0
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3724      	adds	r7, #36	; 0x24
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c714:	b480      	push	{r7}
 800c716:	b08b      	sub	sp, #44	; 0x2c
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	4613      	mov	r3, r2
 800c720:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c72a:	88fb      	ldrh	r3, [r7, #6]
 800c72c:	089b      	lsrs	r3, r3, #2
 800c72e:	b29b      	uxth	r3, r3
 800c730:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c732:	88fb      	ldrh	r3, [r7, #6]
 800c734:	f003 0303 	and.w	r3, r3, #3
 800c738:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c73a:	2300      	movs	r3, #0
 800c73c:	623b      	str	r3, [r7, #32]
 800c73e:	e014      	b.n	800c76a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74a:	601a      	str	r2, [r3, #0]
    pDest++;
 800c74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74e:	3301      	adds	r3, #1
 800c750:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c754:	3301      	adds	r3, #1
 800c756:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75a:	3301      	adds	r3, #1
 800c75c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c760:	3301      	adds	r3, #1
 800c762:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c764:	6a3b      	ldr	r3, [r7, #32]
 800c766:	3301      	adds	r3, #1
 800c768:	623b      	str	r3, [r7, #32]
 800c76a:	6a3a      	ldr	r2, [r7, #32]
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d3e6      	bcc.n	800c740 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c772:	8bfb      	ldrh	r3, [r7, #30]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d01e      	beq.n	800c7b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c778:	2300      	movs	r3, #0
 800c77a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c782:	461a      	mov	r2, r3
 800c784:	f107 0310 	add.w	r3, r7, #16
 800c788:	6812      	ldr	r2, [r2, #0]
 800c78a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	6a3b      	ldr	r3, [r7, #32]
 800c790:	b2db      	uxtb	r3, r3
 800c792:	00db      	lsls	r3, r3, #3
 800c794:	fa22 f303 	lsr.w	r3, r2, r3
 800c798:	b2da      	uxtb	r2, r3
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	701a      	strb	r2, [r3, #0]
      i++;
 800c79e:	6a3b      	ldr	r3, [r7, #32]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	623b      	str	r3, [r7, #32]
      pDest++;
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c7aa:	8bfb      	ldrh	r3, [r7, #30]
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c7b0:	8bfb      	ldrh	r3, [r7, #30]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1ea      	bne.n	800c78c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	372c      	adds	r7, #44	; 0x2c
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	785b      	ldrb	r3, [r3, #1]
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d12c      	bne.n	800c83a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	015a      	lsls	r2, r3, #5
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	4413      	add	r3, r2
 800c7e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	db12      	blt.n	800c818 <USB_EPSetStall+0x54>
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00f      	beq.n	800c818 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	015a      	lsls	r2, r3, #5
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	4413      	add	r3, r2
 800c800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	0151      	lsls	r1, r2, #5
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	440a      	add	r2, r1
 800c80e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c812:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c816:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	015a      	lsls	r2, r3, #5
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	4413      	add	r3, r2
 800c820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	68ba      	ldr	r2, [r7, #8]
 800c828:	0151      	lsls	r1, r2, #5
 800c82a:	68fa      	ldr	r2, [r7, #12]
 800c82c:	440a      	add	r2, r1
 800c82e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c836:	6013      	str	r3, [r2, #0]
 800c838:	e02b      	b.n	800c892 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	015a      	lsls	r2, r3, #5
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	4413      	add	r3, r2
 800c842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	db12      	blt.n	800c872 <USB_EPSetStall+0xae>
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00f      	beq.n	800c872 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	015a      	lsls	r2, r3, #5
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	4413      	add	r3, r2
 800c85a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	0151      	lsls	r1, r2, #5
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	440a      	add	r2, r1
 800c868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c86c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c870:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	015a      	lsls	r2, r3, #5
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	4413      	add	r3, r2
 800c87a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68ba      	ldr	r2, [r7, #8]
 800c882:	0151      	lsls	r1, r2, #5
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	440a      	add	r2, r1
 800c888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c88c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c890:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c892:	2300      	movs	r3, #0
}
 800c894:	4618      	mov	r0, r3
 800c896:	3714      	adds	r7, #20
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	785b      	ldrb	r3, [r3, #1]
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d128      	bne.n	800c90e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	015a      	lsls	r2, r3, #5
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	68ba      	ldr	r2, [r7, #8]
 800c8cc:	0151      	lsls	r1, r2, #5
 800c8ce:	68fa      	ldr	r2, [r7, #12]
 800c8d0:	440a      	add	r2, r1
 800c8d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c8da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	791b      	ldrb	r3, [r3, #4]
 800c8e0:	2b03      	cmp	r3, #3
 800c8e2:	d003      	beq.n	800c8ec <USB_EPClearStall+0x4c>
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	791b      	ldrb	r3, [r3, #4]
 800c8e8:	2b02      	cmp	r3, #2
 800c8ea:	d138      	bne.n	800c95e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	015a      	lsls	r2, r3, #5
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	68ba      	ldr	r2, [r7, #8]
 800c8fc:	0151      	lsls	r1, r2, #5
 800c8fe:	68fa      	ldr	r2, [r7, #12]
 800c900:	440a      	add	r2, r1
 800c902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c90a:	6013      	str	r3, [r2, #0]
 800c90c:	e027      	b.n	800c95e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	015a      	lsls	r2, r3, #5
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	4413      	add	r3, r2
 800c916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68ba      	ldr	r2, [r7, #8]
 800c91e:	0151      	lsls	r1, r2, #5
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	440a      	add	r2, r1
 800c924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c928:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c92c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	791b      	ldrb	r3, [r3, #4]
 800c932:	2b03      	cmp	r3, #3
 800c934:	d003      	beq.n	800c93e <USB_EPClearStall+0x9e>
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	791b      	ldrb	r3, [r3, #4]
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d10f      	bne.n	800c95e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	015a      	lsls	r2, r3, #5
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	4413      	add	r3, r2
 800c946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	0151      	lsls	r1, r2, #5
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	440a      	add	r2, r1
 800c954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c95c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3714      	adds	r7, #20
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	460b      	mov	r3, r1
 800c976:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68fa      	ldr	r2, [r7, #12]
 800c986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c98a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c98e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	78fb      	ldrb	r3, [r7, #3]
 800c99a:	011b      	lsls	r3, r3, #4
 800c99c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c9a0:	68f9      	ldr	r1, [r7, #12]
 800c9a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3714      	adds	r7, #20
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9d2:	f023 0303 	bic.w	r3, r3, #3
 800c9d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9e6:	f023 0302 	bic.w	r3, r3, #2
 800c9ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3714      	adds	r7, #20
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr

0800c9fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c9fa:	b480      	push	{r7}
 800c9fc:	b085      	sub	sp, #20
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca14:	f023 0303 	bic.w	r3, r3, #3
 800ca18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca28:	f043 0302 	orr.w	r3, r3, #2
 800ca2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca2e:	2300      	movs	r3, #0
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3714      	adds	r7, #20
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b085      	sub	sp, #20
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	695b      	ldr	r3, [r3, #20]
 800ca48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	4013      	ands	r3, r2
 800ca52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ca54:	68fb      	ldr	r3, [r7, #12]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3714      	adds	r7, #20
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr

0800ca62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca62:	b480      	push	{r7}
 800ca64:	b085      	sub	sp, #20
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca74:	699b      	ldr	r3, [r3, #24]
 800ca76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca7e:	69db      	ldr	r3, [r3, #28]
 800ca80:	68ba      	ldr	r2, [r7, #8]
 800ca82:	4013      	ands	r3, r2
 800ca84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	0c1b      	lsrs	r3, r3, #16
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3714      	adds	r7, #20
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr

0800ca96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca96:	b480      	push	{r7}
 800ca98:	b085      	sub	sp, #20
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caa8:	699b      	ldr	r3, [r3, #24]
 800caaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cab2:	69db      	ldr	r3, [r3, #28]
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	4013      	ands	r3, r2
 800cab8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	b29b      	uxth	r3, r3
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3714      	adds	r7, #20
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr

0800caca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800caca:	b480      	push	{r7}
 800cacc:	b085      	sub	sp, #20
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
 800cad2:	460b      	mov	r3, r1
 800cad4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cada:	78fb      	ldrb	r3, [r7, #3]
 800cadc:	015a      	lsls	r2, r3, #5
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	4413      	add	r3, r2
 800cae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caf0:	695b      	ldr	r3, [r3, #20]
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	4013      	ands	r3, r2
 800caf6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800caf8:	68bb      	ldr	r3, [r7, #8]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr

0800cb06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cb06:	b480      	push	{r7}
 800cb08:	b087      	sub	sp, #28
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
 800cb0e:	460b      	mov	r3, r1
 800cb10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb1c:	691b      	ldr	r3, [r3, #16]
 800cb1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cb2a:	78fb      	ldrb	r3, [r7, #3]
 800cb2c:	f003 030f 	and.w	r3, r3, #15
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	fa22 f303 	lsr.w	r3, r2, r3
 800cb36:	01db      	lsls	r3, r3, #7
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	693a      	ldr	r2, [r7, #16]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cb40:	78fb      	ldrb	r3, [r7, #3]
 800cb42:	015a      	lsls	r2, r3, #5
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	4413      	add	r3, r2
 800cb48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	693a      	ldr	r2, [r7, #16]
 800cb50:	4013      	ands	r3, r2
 800cb52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cb54:	68bb      	ldr	r3, [r7, #8]
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	371c      	adds	r7, #28
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr

0800cb62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb62:	b480      	push	{r7}
 800cb64:	b083      	sub	sp, #12
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	695b      	ldr	r3, [r3, #20]
 800cb6e:	f003 0301 	and.w	r3, r3, #1
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	370c      	adds	r7, #12
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
	...

0800cb80 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b085      	sub	sp, #20
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	4b09      	ldr	r3, [pc, #36]	; (800cbc4 <USB_ActivateSetup+0x44>)
 800cb9e:	4013      	ands	r3, r2
 800cba0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	68fa      	ldr	r2, [r7, #12]
 800cbac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cbb6:	2300      	movs	r3, #0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3714      	adds	r7, #20
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr
 800cbc4:	fffff800 	.word	0xfffff800

0800cbc8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b087      	sub	sp, #28
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	607a      	str	r2, [r7, #4]
 800cbd4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	333c      	adds	r3, #60	; 0x3c
 800cbde:	3304      	adds	r3, #4
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	4a26      	ldr	r2, [pc, #152]	; (800cc80 <USB_EP0_OutStart+0xb8>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d90a      	bls.n	800cc02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbfc:	d101      	bne.n	800cc02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	e037      	b.n	800cc72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc08:	461a      	mov	r2, r3
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	697a      	ldr	r2, [r7, #20]
 800cc18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	697a      	ldr	r2, [r7, #20]
 800cc2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc30:	f043 0318 	orr.w	r3, r3, #24
 800cc34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc3c:	691b      	ldr	r3, [r3, #16]
 800cc3e:	697a      	ldr	r2, [r7, #20]
 800cc40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cc48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cc4a:	7afb      	ldrb	r3, [r7, #11]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d10f      	bne.n	800cc70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc56:	461a      	mov	r2, r3
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	697a      	ldr	r2, [r7, #20]
 800cc66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc6a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cc6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc70:	2300      	movs	r3, #0
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	371c      	adds	r7, #28
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	4f54300a 	.word	0x4f54300a

0800cc84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b085      	sub	sp, #20
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	3301      	adds	r3, #1
 800cc94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800cc9c:	d901      	bls.n	800cca2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc9e:	2303      	movs	r3, #3
 800cca0:	e01b      	b.n	800ccda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	daf2      	bge.n	800cc90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	691b      	ldr	r3, [r3, #16]
 800ccb2:	f043 0201 	orr.w	r2, r3, #1
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ccc6:	d901      	bls.n	800cccc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	e006      	b.n	800ccda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	691b      	ldr	r3, [r3, #16]
 800ccd0:	f003 0301 	and.w	r3, r3, #1
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d0f0      	beq.n	800ccba <USB_CoreReset+0x36>

  return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3714      	adds	r7, #20
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr
	...

0800cce8 <__NVIC_SystemReset>:
{
 800cce8:	b480      	push	{r7}
 800ccea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800ccec:	f3bf 8f4f 	dsb	sy
}
 800ccf0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ccf2:	4b06      	ldr	r3, [pc, #24]	; (800cd0c <__NVIC_SystemReset+0x24>)
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ccfa:	4904      	ldr	r1, [pc, #16]	; (800cd0c <__NVIC_SystemReset+0x24>)
 800ccfc:	4b04      	ldr	r3, [pc, #16]	; (800cd10 <__NVIC_SystemReset+0x28>)
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800cd02:	f3bf 8f4f 	dsb	sy
}
 800cd06:	bf00      	nop
    __NOP();
 800cd08:	bf00      	nop
 800cd0a:	e7fd      	b.n	800cd08 <__NVIC_SystemReset+0x20>
 800cd0c:	e000ed00 	.word	0xe000ed00
 800cd10:	05fa0004 	.word	0x05fa0004

0800cd14 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800cd20:	f44f 6084 	mov.w	r0, #1056	; 0x420
 800cd24:	f002 fee6 	bl	800faf4 <USBD_static_malloc>
 800cd28:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d109      	bne.n	800cd44 <USBD_DFU_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	32b0      	adds	r2, #176	; 0xb0
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cd40:	2302      	movs	r3, #2
 800cd42:	e052      	b.n	800cdea <USBD_DFU_Init+0xd6>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	32b0      	adds	r2, #176	; 0xb0
 800cd4e:	68f9      	ldr	r1, [r7, #12]
 800cd50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	32b0      	adds	r2, #176	; 0xb0
 800cd5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cd76:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2200      	movs	r2, #0
 800cd86:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
  hdfu->dev_state = DFU_STATE_IDLE;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2202      	movs	r2, #2
 800cd96:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[1] = 0U;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2200      	movs	r2, #0
 800cda6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
  hdfu->dev_status[2] = 0U;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2200      	movs	r2, #0
 800cdae:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
  hdfu->dev_status[3] = 0U;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2202      	movs	r2, #2
 800cdbe:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[5] = 0U;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	33b0      	adds	r3, #176	; 0xb0
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	4413      	add	r3, r2
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	4798      	blx	r3
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d001      	beq.n	800cde8 <USBD_DFU_Init+0xd4>
  {
    return (uint8_t)USBD_FAIL;
 800cde4:	2303      	movs	r3, #3
 800cde6:	e000      	b.n	800cdea <USBD_DFU_Init+0xd6>
  }

  return (uint8_t)USBD_OK;
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b084      	sub	sp, #16
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	32b0      	adds	r2, #176	; 0xb0
 800ce08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d101      	bne.n	800ce14 <USBD_DFU_DeInit+0x22>
  {
    return (uint8_t)USBD_EMEM;
 800ce10:	2302      	movs	r3, #2
 800ce12:	e03c      	b.n	800ce8e <USBD_DFU_DeInit+0x9c>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	32b0      	adds	r2, #176	; 0xb0
 800ce1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce22:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2200      	movs	r2, #0
 800ce28:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2202      	movs	r2, #2
 800ce38:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2202      	movs	r2, #2
 800ce48:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	33b0      	adds	r3, #176	; 0xb0
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	4413      	add	r3, r2
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	32b0      	adds	r2, #176	; 0xb0
 800ce6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f002 fe4e 	bl	800fb10 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	32b0      	adds	r2, #176	; 0xb0
 800ce7e:	2100      	movs	r1, #0
 800ce80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = NULL;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 800ce8c:	2300      	movs	r3, #0
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
	...

0800ce98 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	32b0      	adds	r2, #176	; 0xb0
 800ceac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceb0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pbuf;
  uint16_t len;
  uint16_t status_info = 0U;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	813b      	strh	r3, [r7, #8]

  if (hdfu == NULL)
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d101      	bne.n	800cec4 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800cec0:	2303      	movs	r3, #3
 800cec2:	e0e8      	b.n	800d096 <USBD_DFU_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d03e      	beq.n	800cf4e <USBD_DFU_Setup+0xb6>
 800ced0:	2b20      	cmp	r3, #32
 800ced2:	f040 80d8 	bne.w	800d086 <USBD_DFU_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	785b      	ldrb	r3, [r3, #1]
 800ceda:	2b06      	cmp	r3, #6
 800cedc:	d82f      	bhi.n	800cf3e <USBD_DFU_Setup+0xa6>
 800cede:	a201      	add	r2, pc, #4	; (adr r2, 800cee4 <USBD_DFU_Setup+0x4c>)
 800cee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee4:	0800cf35 	.word	0x0800cf35
 800cee8:	0800cf01 	.word	0x0800cf01
 800ceec:	0800cf0b 	.word	0x0800cf0b
 800cef0:	0800cf15 	.word	0x0800cf15
 800cef4:	0800cf1d 	.word	0x0800cf1d
 800cef8:	0800cf25 	.word	0x0800cf25
 800cefc:	0800cf2d 	.word	0x0800cf2d
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800cf00:	6839      	ldr	r1, [r7, #0]
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 fac2 	bl	800d48c <DFU_Download>
          break;
 800cf08:	e020      	b.n	800cf4c <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800cf0a:	6839      	ldr	r1, [r7, #0]
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f000 fb33 	bl	800d578 <DFU_Upload>
          break;
 800cf12:	e01b      	b.n	800cf4c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fc37 	bl	800d788 <DFU_GetStatus>
          break;
 800cf1a:	e017      	b.n	800cf4c <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f000 fcff 	bl	800d920 <DFU_ClearStatus>
          break;
 800cf22:	e013      	b.n	800cf4c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 fd53 	bl	800d9d0 <DFU_GetState>
          break;
 800cf2a:	e00f      	b.n	800cf4c <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 fd6b 	bl	800da08 <DFU_Abort>
          break;
 800cf32:	e00b      	b.n	800cf4c <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800cf34:	6839      	ldr	r1, [r7, #0]
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f000 fa38 	bl	800d3ac <DFU_Detach>
          break;
 800cf3c:	e006      	b.n	800cf4c <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800cf3e:	6839      	ldr	r1, [r7, #0]
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f002 f8a0 	bl	800f086 <USBD_CtlError>
          ret = USBD_FAIL;
 800cf46:	2303      	movs	r3, #3
 800cf48:	75fb      	strb	r3, [r7, #23]
          break;
 800cf4a:	bf00      	nop
      }
      break;
 800cf4c:	e0a2      	b.n	800d094 <USBD_DFU_Setup+0x1fc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	785b      	ldrb	r3, [r3, #1]
 800cf52:	2b0b      	cmp	r3, #11
 800cf54:	f200 808c 	bhi.w	800d070 <USBD_DFU_Setup+0x1d8>
 800cf58:	a201      	add	r2, pc, #4	; (adr r2, 800cf60 <USBD_DFU_Setup+0xc8>)
 800cf5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf5e:	bf00      	nop
 800cf60:	0800cf91 	.word	0x0800cf91
 800cf64:	0800d07f 	.word	0x0800d07f
 800cf68:	0800d071 	.word	0x0800d071
 800cf6c:	0800d071 	.word	0x0800d071
 800cf70:	0800d071 	.word	0x0800d071
 800cf74:	0800d071 	.word	0x0800d071
 800cf78:	0800cfbb 	.word	0x0800cfbb
 800cf7c:	0800d071 	.word	0x0800d071
 800cf80:	0800d071 	.word	0x0800d071
 800cf84:	0800d071 	.word	0x0800d071
 800cf88:	0800d003 	.word	0x0800d003
 800cf8c:	0800d02f 	.word	0x0800d02f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	2b03      	cmp	r3, #3
 800cf9a:	d107      	bne.n	800cfac <USBD_DFU_Setup+0x114>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cf9c:	f107 0308 	add.w	r3, r7, #8
 800cfa0:	2202      	movs	r2, #2
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f002 f8eb 	bl	800f180 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cfaa:	e06b      	b.n	800d084 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800cfac:	6839      	ldr	r1, [r7, #0]
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f002 f869 	bl	800f086 <USBD_CtlError>
            ret = USBD_FAIL;
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	75fb      	strb	r3, [r7, #23]
          break;
 800cfb8:	e064      	b.n	800d084 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	885b      	ldrh	r3, [r3, #2]
 800cfbe:	0a1b      	lsrs	r3, r3, #8
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	2b21      	cmp	r3, #33	; 0x21
 800cfc4:	d15d      	bne.n	800d082 <USBD_DFU_Setup+0x1ea>
          {
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f000 fdd5 	bl	800db7c <USBD_DFU_GetDfuFuncDesc>
 800cfd2:	60f8      	str	r0, [r7, #12]

            if (pbuf != NULL)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00c      	beq.n	800cff4 <USBD_DFU_Setup+0x15c>
            {
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	88db      	ldrh	r3, [r3, #6]
 800cfde:	2b09      	cmp	r3, #9
 800cfe0:	bf28      	it	cs
 800cfe2:	2309      	movcs	r3, #9
 800cfe4:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800cfe6:	897b      	ldrh	r3, [r7, #10]
 800cfe8:	461a      	mov	r2, r3
 800cfea:	68f9      	ldr	r1, [r7, #12]
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f002 f8c7 	bl	800f180 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800cff2:	e046      	b.n	800d082 <USBD_DFU_Setup+0x1ea>
              USBD_CtlError(pdev, req);
 800cff4:	6839      	ldr	r1, [r7, #0]
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f002 f845 	bl	800f086 <USBD_CtlError>
              ret = USBD_FAIL;
 800cffc:	2303      	movs	r3, #3
 800cffe:	75fb      	strb	r3, [r7, #23]
          break;
 800d000:	e03f      	b.n	800d082 <USBD_DFU_Setup+0x1ea>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	2b03      	cmp	r3, #3
 800d00c:	d108      	bne.n	800d020 <USBD_DFU_Setup+0x188>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800d014:	2201      	movs	r2, #1
 800d016:	4619      	mov	r1, r3
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f002 f8b1 	bl	800f180 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d01e:	e031      	b.n	800d084 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800d020:	6839      	ldr	r1, [r7, #0]
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f002 f82f 	bl	800f086 <USBD_CtlError>
            ret = USBD_FAIL;
 800d028:	2303      	movs	r3, #3
 800d02a:	75fb      	strb	r3, [r7, #23]
          break;
 800d02c:	e02a      	b.n	800d084 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	885b      	ldrh	r3, [r3, #2]
 800d032:	b2db      	uxtb	r3, r3
 800d034:	2b00      	cmp	r3, #0
 800d036:	d114      	bne.n	800d062 <USBD_DFU_Setup+0x1ca>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	2b03      	cmp	r3, #3
 800d042:	d107      	bne.n	800d054 <USBD_DFU_Setup+0x1bc>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	885b      	ldrh	r3, [r3, #2]
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	461a      	mov	r2, r3
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d052:	e017      	b.n	800d084 <USBD_DFU_Setup+0x1ec>
              USBD_CtlError(pdev, req);
 800d054:	6839      	ldr	r1, [r7, #0]
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f002 f815 	bl	800f086 <USBD_CtlError>
              ret = USBD_FAIL;
 800d05c:	2303      	movs	r3, #3
 800d05e:	75fb      	strb	r3, [r7, #23]
          break;
 800d060:	e010      	b.n	800d084 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800d062:	6839      	ldr	r1, [r7, #0]
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f002 f80e 	bl	800f086 <USBD_CtlError>
            ret = USBD_FAIL;
 800d06a:	2303      	movs	r3, #3
 800d06c:	75fb      	strb	r3, [r7, #23]
          break;
 800d06e:	e009      	b.n	800d084 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d070:	6839      	ldr	r1, [r7, #0]
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f002 f807 	bl	800f086 <USBD_CtlError>
          ret = USBD_FAIL;
 800d078:	2303      	movs	r3, #3
 800d07a:	75fb      	strb	r3, [r7, #23]
          break;
 800d07c:	e002      	b.n	800d084 <USBD_DFU_Setup+0x1ec>
          break;
 800d07e:	bf00      	nop
 800d080:	e008      	b.n	800d094 <USBD_DFU_Setup+0x1fc>
          break;
 800d082:	bf00      	nop
      }
      break;
 800d084:	e006      	b.n	800d094 <USBD_DFU_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800d086:	6839      	ldr	r1, [r7, #0]
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f001 fffc 	bl	800f086 <USBD_CtlError>
      ret = USBD_FAIL;
 800d08e:	2303      	movs	r3, #3
 800d090:	75fb      	strb	r3, [r7, #23]
      break;
 800d092:	bf00      	nop
  }

  return (uint8_t)ret;
 800d094:	7dfb      	ldrb	r3, [r7, #23]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3718      	adds	r7, #24
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop

0800d0a0 <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b083      	sub	sp, #12
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	221b      	movs	r2, #27
 800d0ac:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800d0ae:	4b03      	ldr	r3, [pc, #12]	; (800d0bc <USBD_DFU_GetCfgDesc+0x1c>)
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr
 800d0bc:	2400004c 	.word	0x2400004c

0800d0c0 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	370c      	adds	r7, #12
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr

0800d0d6 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b088      	sub	sp, #32
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t app_addr_ptr;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	32b0      	adds	r2, #176	; 0xb0
 800d0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ec:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d0f4:	687a      	ldr	r2, [r7, #4]
 800d0f6:	33b0      	adds	r3, #176	; 0xb0
 800d0f8:	009b      	lsls	r3, r3, #2
 800d0fa:	4413      	add	r3, r2
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	61bb      	str	r3, [r7, #24]
#if (USBD_DFU_VENDOR_CMD_ENABLED == 1U) || (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d101      	bne.n	800d10a <USBD_DFU_EP0_TxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800d106:	2303      	movs	r3, #3
 800d108:	e0f1      	b.n	800d2ee <USBD_DFU_EP0_TxReady+0x218>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d110:	2b04      	cmp	r3, #4
 800d112:	f040 80e0 	bne.w	800d2d6 <USBD_DFU_EP0_TxReady+0x200>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	f040 8085 	bne.w	800d22c <USBD_DFU_EP0_TxReady+0x156>
    {
      if (hdfu->wlength == 1U)
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d128:	2b01      	cmp	r3, #1
 800d12a:	f000 80b5 	beq.w	800d298 <USBD_DFU_EP0_TxReady+0x1c2>
            return (uint8_t)USBD_FAIL;
          }
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
      }
      else if (hdfu->wlength == 5U)
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d134:	2b05      	cmp	r3, #5
 800d136:	d166      	bne.n	800d206 <USBD_DFU_EP0_TxReady+0x130>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	2b21      	cmp	r3, #33	; 0x21
 800d13e:	d124      	bne.n	800d18a <USBD_DFU_EP0_TxReady+0xb4>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          hdfu->data_ptr = hdfu->buffer.d8[1];
 800d140:	69fb      	ldr	r3, [r7, #28]
 800d142:	785b      	ldrb	r3, [r3, #1]
 800d144:	461a      	mov	r2, r3
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800d152:	69fb      	ldr	r3, [r7, #28]
 800d154:	789b      	ldrb	r3, [r3, #2]
 800d156:	021b      	lsls	r3, r3, #8
 800d158:	441a      	add	r2, r3
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800d166:	69fb      	ldr	r3, [r7, #28]
 800d168:	78db      	ldrb	r3, [r3, #3]
 800d16a:	041b      	lsls	r3, r3, #16
 800d16c:	441a      	add	r2, r3
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	791b      	ldrb	r3, [r3, #4]
 800d17e:	061b      	lsls	r3, r3, #24
 800d180:	441a      	add	r2, r3
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800d188:	e086      	b.n	800d298 <USBD_DFU_EP0_TxReady+0x1c2>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	2b41      	cmp	r3, #65	; 0x41
 800d190:	d137      	bne.n	800d202 <USBD_DFU_EP0_TxReady+0x12c>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          app_addr_ptr = hdfu->buffer.d8[1];
 800d192:	69fb      	ldr	r3, [r7, #28]
 800d194:	785b      	ldrb	r3, [r3, #1]
 800d196:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	789b      	ldrb	r3, [r3, #2]
 800d19c:	021b      	lsls	r3, r3, #8
 800d19e:	693a      	ldr	r2, [r7, #16]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	78db      	ldrb	r3, [r3, #3]
 800d1a8:	041b      	lsls	r3, r3, #16
 800d1aa:	693a      	ldr	r2, [r7, #16]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	791b      	ldrb	r3, [r3, #4]
 800d1b4:	061b      	lsls	r3, r3, #24
 800d1b6:	693a      	ldr	r2, [r7, #16]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	613b      	str	r3, [r7, #16]

          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	6938      	ldr	r0, [r7, #16]
 800d1c2:	4798      	blx	r3
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d066      	beq.n	800d298 <USBD_DFU_EP0_TxReady+0x1c2>
          {
            /* Update the state machine */
            hdfu->dev_state = DFU_STATE_ERROR;
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	220a      	movs	r2, #10
 800d1ce:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	220b      	movs	r2, #11
 800d1d6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            hdfu->dev_status[1] = 0U;
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
            hdfu->dev_status[2] = 0U;
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
            hdfu->dev_status[3] = 0U;
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d1f8:	69fb      	ldr	r3, [r7, #28]
 800d1fa:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            return (uint8_t)USBD_FAIL;
 800d1fe:	2303      	movs	r3, #3
 800d200:	e075      	b.n	800d2ee <USBD_DFU_EP0_TxReady+0x218>
          }
        }
#else
        else
        {
          return (uint8_t)USBD_FAIL;
 800d202:	2303      	movs	r3, #3
 800d204:	e073      	b.n	800d2ee <USBD_DFU_EP0_TxReady+0x218>
          req.wLength = 1U;
          USBD_CtlError(pdev, &req);
        }
#else
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800d206:	69fb      	ldr	r3, [r7, #28]
 800d208:	2200      	movs	r2, #0
 800d20a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	2200      	movs	r2, #0
 800d212:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800d216:	2300      	movs	r3, #0
 800d218:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 800d21a:	2301      	movs	r3, #1
 800d21c:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 800d21e:	f107 0308 	add.w	r3, r7, #8
 800d222:	4619      	mov	r1, r3
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f001 ff2e 	bl	800f086 <USBD_CtlError>
 800d22a:	e035      	b.n	800d298 <USBD_DFU_EP0_TxReady+0x1c2>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d232:	2b01      	cmp	r3, #1
 800d234:	d930      	bls.n	800d298 <USBD_DFU_EP0_TxReady+0x1c2>
          return (uint8_t)USBD_FAIL;
        }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d23c:	3b02      	subs	r3, #2
 800d23e:	029a      	lsls	r2, r3, #10
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800d246:	4413      	add	r3, r2
 800d248:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	69f8      	ldr	r0, [r7, #28]
 800d250:	6979      	ldr	r1, [r7, #20]
 800d252:	69fa      	ldr	r2, [r7, #28]
 800d254:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800d258:	4798      	blx	r3
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d01b      	beq.n	800d298 <USBD_DFU_EP0_TxReady+0x1c2>
        {
          /* Update the state machine */
          hdfu->dev_state = DFU_STATE_ERROR;
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	220a      	movs	r2, #10
 800d264:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	220b      	movs	r2, #11
 800d26c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
          hdfu->dev_status[1] = 0U;
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	2200      	movs	r2, #0
 800d274:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
          hdfu->dev_status[2] = 0U;
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	2200      	movs	r2, #0
 800d27c:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
          hdfu->dev_status[3] = 0U;
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	2200      	movs	r2, #0
 800d284:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          return (uint8_t)USBD_FAIL;
 800d294:	2303      	movs	r3, #3
 800d296:	e02a      	b.n	800d2ee <USBD_DFU_EP0_TxReady+0x218>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	2200      	movs	r2, #0
 800d29c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	2203      	movs	r2, #3
 800d2ac:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800d2d4:	e00a      	b.n	800d2ec <USBD_DFU_EP0_TxReady+0x216>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800d2d6:	69fb      	ldr	r3, [r7, #28]
 800d2d8:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d2dc:	2b07      	cmp	r3, #7
 800d2de:	d103      	bne.n	800d2e8 <USBD_DFU_EP0_TxReady+0x212>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 fbe6 	bl	800dab2 <DFU_Leave>
 800d2e6:	e001      	b.n	800d2ec <USBD_DFU_EP0_TxReady+0x216>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800d2e8:	2303      	movs	r3, #3
 800d2ea:	e000      	b.n	800d2ee <USBD_DFU_EP0_TxReady+0x218>
  }

  return (uint8_t)USBD_OK;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3720      	adds	r7, #32
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}

0800d2f6 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800d2f6:	b480      	push	{r7}
 800d2f8:	b083      	sub	sp, #12
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	220a      	movs	r2, #10
 800d318:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800d31a:	4b03      	ldr	r3, [pc, #12]	; (800d328 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr
 800d328:	24000068 	.word	0x24000068

0800d32c <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b086      	sub	sp, #24
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	460b      	mov	r3, r1
 800d336:	607a      	str	r2, [r7, #4]
 800d338:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d340:	68fa      	ldr	r2, [r7, #12]
 800d342:	33b0      	adds	r3, #176	; 0xb0
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	4413      	add	r3, r2
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800d34c:	7afb      	ldrb	r3, [r7, #11]
 800d34e:	2b06      	cmp	r3, #6
 800d350:	d808      	bhi.n	800d364 <USBD_DFU_GetUsrStringDesc+0x38>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	4906      	ldr	r1, [pc, #24]	; (800d374 <USBD_DFU_GetUsrStringDesc+0x48>)
 800d35a:	4618      	mov	r0, r3
 800d35c:	f001 fea4 	bl	800f0a8 <USBD_GetString>
    return USBD_StrDesc;
 800d360:	4b04      	ldr	r3, [pc, #16]	; (800d374 <USBD_DFU_GetUsrStringDesc+0x48>)
 800d362:	e003      	b.n	800d36c <USBD_DFU_GetUsrStringDesc+0x40>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    *length = 0U;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	801a      	strh	r2, [r3, #0]
    return NULL;
 800d36a:	2300      	movs	r3, #0
  }
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3718      	adds	r7, #24
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	24000544 	.word	0x24000544

0800d378 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d101      	bne.n	800d38c <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d388:	2303      	movs	r3, #3
 800d38a:	e009      	b.n	800d3a0 <USBD_DFU_RegisterMedia+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	33b0      	adds	r3, #176	; 0xb0
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	683a      	ldr	r2, [r7, #0]
 800d39c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	370c      	adds	r7, #12
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	32b0      	adds	r2, #176	; 0xb0
 800d3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c4:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f000 fbd5 	bl	800db7c <USBD_DFU_GetDfuFuncDesc>
 800d3d2:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d054      	beq.n	800d484 <DFU_Detach+0xd8>
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d051      	beq.n	800d484 <DFU_Detach+0xd8>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d3e6:	2b02      	cmp	r3, #2
 800d3e8:	d013      	beq.n	800d412 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800d3f0:	2b03      	cmp	r3, #3
 800d3f2:	d00e      	beq.n	800d412 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800d3fa:	2b05      	cmp	r3, #5
 800d3fc:	d009      	beq.n	800d412 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800d404:	2b06      	cmp	r3, #6
 800d406:	d004      	beq.n	800d412 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800d40e:	2b09      	cmp	r3, #9
 800d410:	d125      	bne.n	800d45e <DFU_Detach+0xb2>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2202      	movs	r2, #2
 800d416:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2200      	movs	r2, #0
 800d41e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2200      	movs	r2, #0
 800d426:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2200      	movs	r2, #0
 800d42e:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2200      	movs	r2, #0
 800d436:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /*iString*/
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2200      	movs	r2, #0
 800d44a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->wblock_num = 0U;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2200      	movs	r2, #0
 800d452:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2200      	movs	r2, #0
 800d45a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	789b      	ldrb	r3, [r3, #2]
 800d462:	f003 0308 	and.w	r3, r3, #8
 800d466:	2b00      	cmp	r3, #0
 800d468:	d006      	beq.n	800d478 <DFU_Detach+0xcc>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 fc44 	bl	800dcf8 <USBD_Stop>
    (void)USBD_Start(pdev);
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fc35 	bl	800dce0 <USBD_Start>
 800d476:	e006      	b.n	800d486 <DFU_Detach+0xda>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	885b      	ldrh	r3, [r3, #2]
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7f4 fc71 	bl	8001d64 <HAL_Delay>
 800d482:	e000      	b.n	800d486 <DFU_Detach+0xda>
    return;
 800d484:	bf00      	nop
  }
}
 800d486:	3710      	adds	r7, #16
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	32b0      	adds	r2, #176	; 0xb0
 800d4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4a4:	60fb      	str	r3, [r7, #12]
#if (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

  if (hdfu == NULL)
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d061      	beq.n	800d570 <DFU_Download+0xe4>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	88db      	ldrh	r3, [r3, #6]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d033      	beq.n	800d51c <DFU_Download+0x90>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	d004      	beq.n	800d4c8 <DFU_Download+0x3c>
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d4c4:	2b05      	cmp	r3, #5
 800d4c6:	d124      	bne.n	800d512 <DFU_Download+0x86>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	885b      	ldrh	r3, [r3, #2]
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	88db      	ldrh	r3, [r3, #6]
 800d4d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4dc:	bf28      	it	cs
 800d4de:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2203      	movs	r2, #3
 800d4f0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800d500:	68f9      	ldr	r1, [r7, #12]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d508:	461a      	mov	r2, r3
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f001 fe64 	bl	800f1d8 <USBD_CtlPrepareRx>
 800d510:	e02f      	b.n	800d572 <DFU_Download+0xe6>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800d512:	6839      	ldr	r1, [r7, #0]
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f001 fdb6 	bl	800f086 <USBD_CtlError>
 800d51a:	e02a      	b.n	800d572 <DFU_Download+0xe6>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation */
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d522:	2b05      	cmp	r3, #5
 800d524:	d004      	beq.n	800d530 <DFU_Download+0xa4>
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d52c:	2b02      	cmp	r3, #2
 800d52e:	d11a      	bne.n	800d566 <DFU_Download+0xda>
        hdfu->dev_status[4] = hdfu->dev_state;
      }
      else
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */
      {
        hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2201      	movs	r2, #1
 800d534:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2206      	movs	r2, #6
 800d53c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2200      	movs	r2, #0
 800d544:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2200      	movs	r2, #0
 800d554:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800d564:	e005      	b.n	800d572 <DFU_Download+0xe6>
      }
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800d566:	6839      	ldr	r1, [r7, #0]
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f001 fd8c 	bl	800f086 <USBD_CtlError>
 800d56e:	e000      	b.n	800d572 <DFU_Download+0xe6>
    return;
 800d570:	bf00      	nop
    }
  }
}
 800d572:	3710      	adds	r7, #16
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b088      	sub	sp, #32
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	32b0      	adds	r2, #176	; 0xb0
 800d58c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d590:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	33b0      	adds	r3, #176	; 0xb0
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4413      	add	r3, r2
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	61bb      	str	r3, [r7, #24]
  uint8_t VendorCmdLength = 0U;
  uint8_t VendorCmdBuffer[DFU_VENDOR_CMD_MAX];
  uint8_t idx;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	f000 80ea 	beq.w	800d780 <DFU_Upload+0x208>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	88db      	ldrh	r3, [r3, #6]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	f000 80ce 	beq.w	800d752 <DFU_Upload+0x1da>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	d005      	beq.n	800d5cc <DFU_Upload+0x54>
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d5c6:	2b09      	cmp	r3, #9
 800d5c8:	f040 80b6 	bne.w	800d738 <DFU_Upload+0x1c0>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	885b      	ldrh	r3, [r3, #2]
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	88db      	ldrh	r3, [r3, #6]
 800d5dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5e0:	bf28      	it	cs
 800d5e2:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d12e      	bne.n	800d658 <DFU_Upload+0xe0>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d600:	2b03      	cmp	r3, #3
 800d602:	d901      	bls.n	800d608 <DFU_Upload+0x90>
 800d604:	2202      	movs	r2, #2
 800d606:	e000      	b.n	800d60a <DFU_Upload+0x92>
 800d608:	2209      	movs	r2, #9
 800d60a:	69fb      	ldr	r3, [r7, #28]
 800d60c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

        hdfu->dev_status[1] = 0U;
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	2200      	movs	r2, #0
 800d614:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	2200      	movs	r2, #0
 800d61c:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	2200      	movs	r2, #0
 800d624:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d62e:	69fb      	ldr	r3, [r7, #28]
 800d630:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	2200      	movs	r2, #0
 800d638:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	2221      	movs	r2, #33	; 0x21
 800d63e:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	2241      	movs	r2, #65	; 0x41
 800d644:	709a      	strb	r2, [r3, #2]

        CmdLength = 3U;
 800d646:	2303      	movs	r3, #3
 800d648:	60fb      	str	r3, [r7, #12]
          CmdLength += MIN(VendorCmdLength, DFU_VENDOR_CMD_MAX);
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	68fa      	ldr	r2, [r7, #12]
 800d64e:	4619      	mov	r1, r3
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f001 fd95 	bl	800f180 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800d656:	e094      	b.n	800d782 <DFU_Upload+0x20a>
      }
      else if (hdfu->wblock_num > 1U)
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d94f      	bls.n	800d702 <DFU_Upload+0x18a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	2209      	movs	r2, #9
 800d666:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

        hdfu->dev_status[1] = 0U;
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	2200      	movs	r2, #0
 800d66e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	2200      	movs	r2, #0
 800d676:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800d67a:	69fb      	ldr	r3, [r7, #28]
 800d67c:	2200      	movs	r2, #0
 800d67e:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        }

        if (VendorStatus == IS_DFU_PHY_ADDRESS)
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
        {
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d694:	3b02      	subs	r3, #2
 800d696:	029a      	lsls	r2, r3, #10
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800d69e:	4413      	add	r3, r2
 800d6a0:	617b      	str	r3, [r7, #20]

          /* Return the physical address where data are stored */
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	695b      	ldr	r3, [r3, #20]
 800d6a6:	6978      	ldr	r0, [r7, #20]
 800d6a8:	69f9      	ldr	r1, [r7, #28]
 800d6aa:	69fa      	ldr	r2, [r7, #28]
 800d6ac:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800d6b0:	4798      	blx	r3
 800d6b2:	6138      	str	r0, [r7, #16]

          if (phaddr == NULL)
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d11a      	bne.n	800d6f0 <DFU_Upload+0x178>
          {
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	220f      	movs	r2, #15
 800d6be:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

            hdfu->dev_status[1] = 0U;
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
            hdfu->dev_status[2] = 0U;
 800d6ca:	69fb      	ldr	r3, [r7, #28]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
            hdfu->dev_status[3] = 0U;
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

            /* Call the error management function (command will be NAKed) */
            USBD_CtlError(pdev, req);
 800d6e6:	6839      	ldr	r1, [r7, #0]
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f001 fccc 	bl	800f086 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800d6ee:	e048      	b.n	800d782 <DFU_Upload+0x20a>
          }
          else
          {
            /* Send the status data over EP0 */
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800d6f0:	69fb      	ldr	r3, [r7, #28]
 800d6f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	6939      	ldr	r1, [r7, #16]
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f001 fd40 	bl	800f180 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800d700:	e03f      	b.n	800d782 <DFU_Upload+0x20a>
          }
        }
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	220f      	movs	r2, #15
 800d706:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

        hdfu->dev_status[1] = 0U;
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	2200      	movs	r2, #0
 800d70e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	2200      	movs	r2, #0
 800d716:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	2200      	movs	r2, #0
 800d71e:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        /* Call the error management function (command will be NAKed) */
        USBD_CtlError(pdev, req);
 800d72e:	6839      	ldr	r1, [r7, #0]
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f001 fca8 	bl	800f086 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800d736:	e024      	b.n	800d782 <DFU_Upload+0x20a>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	2200      	movs	r2, #0
 800d73c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	2200      	movs	r2, #0
 800d744:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed) */
      USBD_CtlError(pdev, req);
 800d748:	6839      	ldr	r1, [r7, #0]
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f001 fc9b 	bl	800f086 <USBD_CtlError>
 800d750:	e017      	b.n	800d782 <DFU_Upload+0x20a>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800d752:	69fb      	ldr	r3, [r7, #28]
 800d754:	2202      	movs	r2, #2
 800d756:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	2200      	movs	r2, #0
 800d75e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	2200      	movs	r2, #0
 800d766:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	2200      	movs	r2, #0
 800d76e:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800d77e:	e000      	b.n	800d782 <DFU_Upload+0x20a>
    return;
 800d780:	bf00      	nop
  }
}
 800d782:	3720      	adds	r7, #32
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b086      	sub	sp, #24
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	32b0      	adds	r2, #176	; 0xb0
 800d79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d79e:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	33b0      	adds	r3, #176	; 0xb0
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	4413      	add	r3, r2
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f000 f9df 	bl	800db7c <USBD_DFU_GetDfuFuncDesc>
 800d7be:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	f000 80a8 	beq.w	800d918 <DFU_GetStatus+0x190>
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	f000 80a4 	beq.w	800d918 <DFU_GetStatus+0x190>
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f000 80a0 	beq.w	800d918 <DFU_GetStatus+0x190>
  {
    return;
  }

  switch (hdfu->dev_state)
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d7de:	2b03      	cmp	r3, #3
 800d7e0:	d002      	beq.n	800d7e8 <DFU_GetStatus+0x60>
 800d7e2:	2b06      	cmp	r3, #6
 800d7e4:	d051      	beq.n	800d88a <DFU_GetStatus+0x102>
        }
      }
      break;

    default:
      break;
 800d7e6:	e08e      	b.n	800d906 <DFU_GetStatus+0x17e>
      if (hdfu->wlength != 0U)
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d034      	beq.n	800d85c <DFU_GetStatus+0xd4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	2204      	movs	r2, #4
 800d7f6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	2200      	movs	r2, #0
 800d806:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	2200      	movs	r2, #0
 800d80e:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800d824:	2b00      	cmp	r3, #0
 800d826:	d10e      	bne.n	800d846 <DFU_GetStatus+0xbe>
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	2b41      	cmp	r3, #65	; 0x41
 800d82e:	d10a      	bne.n	800d846 <DFU_GetStatus+0xbe>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	699b      	ldr	r3, [r3, #24]
 800d834:	697a      	ldr	r2, [r7, #20]
 800d836:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800d83a:	697a      	ldr	r2, [r7, #20]
 800d83c:	f202 4214 	addw	r2, r2, #1044	; 0x414
 800d840:	2100      	movs	r1, #0
 800d842:	4798      	blx	r3
      break;
 800d844:	e05f      	b.n	800d906 <DFU_GetStatus+0x17e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	699b      	ldr	r3, [r3, #24]
 800d84a:	697a      	ldr	r2, [r7, #20]
 800d84c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800d850:	697a      	ldr	r2, [r7, #20]
 800d852:	f202 4214 	addw	r2, r2, #1044	; 0x414
 800d856:	2101      	movs	r1, #1
 800d858:	4798      	blx	r3
      break;
 800d85a:	e054      	b.n	800d906 <DFU_GetStatus+0x17e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	2205      	movs	r2, #5
 800d860:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	2200      	movs	r2, #0
 800d868:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	2200      	movs	r2, #0
 800d870:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	2200      	movs	r2, #0
 800d878:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      break;
 800d888:	e03d      	b.n	800d906 <DFU_GetStatus+0x17e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800d890:	2b01      	cmp	r3, #1
 800d892:	d116      	bne.n	800d8c2 <DFU_GetStatus+0x13a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	2207      	movs	r2, #7
 800d898:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      break;
 800d8c0:	e020      	b.n	800d904 <DFU_GetStatus+0x17c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d11b      	bne.n	800d904 <DFU_GetStatus+0x17c>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	789b      	ldrb	r3, [r3, #2]
 800d8d0:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d015      	beq.n	800d904 <DFU_GetStatus+0x17c>
          hdfu->dev_state = DFU_STATE_IDLE;
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	2202      	movs	r2, #2
 800d8dc:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
          hdfu->dev_status[1] = 0U;
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
          hdfu->dev_status[2] = 0U;
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
          hdfu->dev_status[3] = 0U;
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      break;
 800d904:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800d90c:	2206      	movs	r2, #6
 800d90e:	4619      	mov	r1, r3
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f001 fc35 	bl	800f180 <USBD_CtlSendData>
 800d916:	e000      	b.n	800d91a <DFU_GetStatus+0x192>
    return;
 800d918:	bf00      	nop
}
 800d91a:	3718      	adds	r7, #24
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800d920:	b480      	push	{r7}
 800d922:	b085      	sub	sp, #20
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	32b0      	adds	r2, #176	; 0xb0
 800d932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d936:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d042      	beq.n	800d9c4 <DFU_ClearStatus+0xa4>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d944:	2b0a      	cmp	r3, #10
 800d946:	d11e      	bne.n	800d986 <DFU_ClearStatus+0x66>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2202      	movs	r2, #2
 800d94c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2200      	movs	r2, #0
 800d954:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2200      	movs	r2, #0
 800d95c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2200      	movs	r2, #0
 800d964:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2200      	movs	r2, #0
 800d96c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2200      	movs	r2, #0
 800d980:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 800d984:	e01f      	b.n	800d9c6 <DFU_ClearStatus+0xa6>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	220a      	movs	r2, #10
 800d98a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	220e      	movs	r2, #14
 800d992:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2200      	movs	r2, #0
 800d99a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 800d9c2:	e000      	b.n	800d9c6 <DFU_ClearStatus+0xa6>
    return;
 800d9c4:	bf00      	nop
  }
}
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	32b0      	adds	r2, #176	; 0xb0
 800d9e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9e6:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d008      	beq.n	800da00 <DFU_GetState+0x30>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f001 fbc1 	bl	800f180 <USBD_CtlSendData>
 800d9fe:	e000      	b.n	800da02 <DFU_GetState+0x32>
    return;
 800da00:	bf00      	nop
}
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800da08:	b480      	push	{r7}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	32b0      	adds	r2, #176	; 0xb0
 800da1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da1e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d03f      	beq.n	800daa6 <DFU_Abort+0x9e>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800da2c:	2b02      	cmp	r3, #2
 800da2e:	d013      	beq.n	800da58 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800da36:	2b03      	cmp	r3, #3
 800da38:	d00e      	beq.n	800da58 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800da40:	2b05      	cmp	r3, #5
 800da42:	d009      	beq.n	800da58 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800da4a:	2b06      	cmp	r3, #6
 800da4c:	d004      	beq.n	800da58 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800da54:	2b09      	cmp	r3, #9
 800da56:	d127      	bne.n	800daa8 <DFU_Abort+0xa0>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2202      	movs	r2, #2
 800da5c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2200      	movs	r2, #0
 800da64:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2200      	movs	r2, #0
 800da6c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2200      	movs	r2, #0
 800da74:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2200      	movs	r2, #0
 800da7c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2200      	movs	r2, #0
 800da90:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->wblock_num = 0U;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	2200      	movs	r2, #0
 800da98:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800daa4:	e000      	b.n	800daa8 <DFU_Abort+0xa0>
    return;
 800daa6:	bf00      	nop
  }
}
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr

0800dab2 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b086      	sub	sp, #24
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	32b0      	adds	r2, #176	; 0xb0
 800dac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dac8:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	33b0      	adds	r3, #176	; 0xb0
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	4413      	add	r3, r2
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800dae2:	4618      	mov	r0, r3
 800dae4:	f000 f84a 	bl	800db7c <USBD_DFU_GetDfuFuncDesc>
 800dae8:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d041      	beq.n	800db74 <DFU_Leave+0xc2>
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d03e      	beq.n	800db74 <DFU_Leave+0xc2>
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d03b      	beq.n	800db74 <DFU_Leave+0xc2>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	2200      	movs	r2, #0
 800db00:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d

  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	789b      	ldrb	r3, [r3, #2]
 800db08:	f003 0304 	and.w	r3, r3, #4
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d016      	beq.n	800db3e <DFU_Leave+0x8c>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	2206      	movs	r2, #6
 800db14:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	2200      	movs	r2, #0
 800db1c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	2200      	movs	r2, #0
 800db24:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	2200      	movs	r2, #0
 800db2c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    return;
 800db3c:	e01b      	b.n	800db76 <DFU_Leave+0xc4>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	2208      	movs	r2, #8
 800db42:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	2200      	movs	r2, #0
 800db4a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	2200      	movs	r2, #0
 800db52:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	2200      	movs	r2, #0
 800db5a:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 f8c4 	bl	800dcf8 <USBD_Stop>
#if (USBD_DFU_VENDOR_EXIT_ENABLED == 1U)
    /* Jump should be ensured by user application */
    DfuInterface->LeaveDFU(hdfu->data_ptr);
#else
    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800db70:	f7ff f8ba 	bl	800cce8 <__NVIC_SystemReset>
    return;
 800db74:	bf00      	nop
#endif /* USBD_DFU_VENDOR_EXIT_ENABLED */

    /* The next instructions will not be reached (system reset) */
  }
}
 800db76:	3718      	adds	r7, #24
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b086      	sub	sp, #24
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	617b      	str	r3, [r7, #20]
  uint8_t *pDfuDesc = NULL;
 800db8c:	2300      	movs	r3, #0
 800db8e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	885b      	ldrh	r3, [r3, #2]
 800db94:	b29a      	uxth	r2, r3
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d918      	bls.n	800dbd2 <USBD_DFU_GetDfuFuncDesc+0x56>
  {
    ptr = desc->bLength;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dba8:	e00d      	b.n	800dbc6 <USBD_DFU_GetDfuFuncDesc+0x4a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dbaa:	f107 030a 	add.w	r3, r7, #10
 800dbae:	4619      	mov	r1, r3
 800dbb0:	6978      	ldr	r0, [r7, #20]
 800dbb2:	f000 fc19 	bl	800e3e8 <USBD_GetNextDesc>
 800dbb6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	785b      	ldrb	r3, [r3, #1]
 800dbbc:	2b21      	cmp	r3, #33	; 0x21
 800dbbe:	d102      	bne.n	800dbc6 <USBD_DFU_GetDfuFuncDesc+0x4a>
      {
        pDfuDesc = (uint8_t *)pdesc;
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	613b      	str	r3, [r7, #16]
        break;
 800dbc4:	e005      	b.n	800dbd2 <USBD_DFU_GetDfuFuncDesc+0x56>
    while (ptr < desc->wTotalLength)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	885b      	ldrh	r3, [r3, #2]
 800dbca:	b29a      	uxth	r2, r3
 800dbcc:	897b      	ldrh	r3, [r7, #10]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d8eb      	bhi.n	800dbaa <USBD_DFU_GetDfuFuncDesc+0x2e>
      }
    }
  }
  return pDfuDesc;
 800dbd2:	693b      	ldr	r3, [r7, #16]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3718      	adds	r7, #24
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b086      	sub	sp, #24
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d10a      	bne.n	800dc06 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800dbf0:	4817      	ldr	r0, [pc, #92]	; (800dc50 <USBD_Init+0x74>)
 800dbf2:	f002 f885 	bl	800fd00 <iprintf>
 800dbf6:	4817      	ldr	r0, [pc, #92]	; (800dc54 <USBD_Init+0x78>)
 800dbf8:	f002 f882 	bl	800fd00 <iprintf>
 800dbfc:	200a      	movs	r0, #10
 800dbfe:	f002 f891 	bl	800fd24 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dc02:	2303      	movs	r3, #3
 800dc04:	e01f      	b.n	800dc46 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d003      	beq.n	800dc2c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	68ba      	ldr	r2, [r7, #8]
 800dc28:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2201      	movs	r2, #1
 800dc30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	79fa      	ldrb	r2, [r7, #7]
 800dc38:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	f001 fde0 	bl	800f800 <USBD_LL_Init>
 800dc40:	4603      	mov	r3, r0
 800dc42:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dc44:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3718      	adds	r7, #24
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	08010a7c 	.word	0x08010a7c
 800dc54:	08010a84 	.word	0x08010a84

0800dc58 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dc62:	2300      	movs	r3, #0
 800dc64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10a      	bne.n	800dc82 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800dc6c:	481a      	ldr	r0, [pc, #104]	; (800dcd8 <USBD_RegisterClass+0x80>)
 800dc6e:	f002 f847 	bl	800fd00 <iprintf>
 800dc72:	481a      	ldr	r0, [pc, #104]	; (800dcdc <USBD_RegisterClass+0x84>)
 800dc74:	f002 f844 	bl	800fd00 <iprintf>
 800dc78:	200a      	movs	r0, #10
 800dc7a:	f002 f853 	bl	800fd24 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dc7e:	2303      	movs	r3, #3
 800dc80:	e025      	b.n	800dcce <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	683a      	ldr	r2, [r7, #0]
 800dc86:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	32ae      	adds	r2, #174	; 0xae
 800dc94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00f      	beq.n	800dcbe <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	32ae      	adds	r2, #174	; 0xae
 800dca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcae:	f107 020e 	add.w	r2, r7, #14
 800dcb2:	4610      	mov	r0, r2
 800dcb4:	4798      	blx	r3
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dcc4:	1c5a      	adds	r2, r3, #1
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800dccc:	2300      	movs	r3, #0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	08010a7c 	.word	0x08010a7c
 800dcdc:	08010a9c 	.word	0x08010a9c

0800dce0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f001 fddb 	bl	800f8a4 <USBD_LL_Start>
 800dcee:	4603      	mov	r3, r0
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3708      	adds	r7, #8
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f001 fdea 	bl	800f8da <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d009      	beq.n	800dd24 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	6852      	ldr	r2, [r2, #4]
 800dd1c:	b2d2      	uxtb	r2, r2
 800dd1e:	4611      	mov	r1, r2
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dd2e:	b480      	push	{r7}
 800dd30:	b083      	sub	sp, #12
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dd36:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd50:	2300      	movs	r3, #0
 800dd52:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d009      	beq.n	800dd72 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	78fa      	ldrb	r2, [r7, #3]
 800dd68:	4611      	mov	r1, r2
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	4798      	blx	r3
 800dd6e:	4603      	mov	r3, r0
 800dd70:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dd72:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3710      	adds	r7, #16
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	460b      	mov	r3, r1
 800dd86:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	78fa      	ldrb	r2, [r7, #3]
 800dd96:	4611      	mov	r1, r2
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	4798      	blx	r3
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800dda2:	2303      	movs	r3, #3
 800dda4:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3710      	adds	r7, #16
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ddc0:	6839      	ldr	r1, [r7, #0]
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f001 f925 	bl	800f012 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dde4:	f003 031f 	and.w	r3, r3, #31
 800dde8:	2b02      	cmp	r3, #2
 800ddea:	d01a      	beq.n	800de22 <USBD_LL_SetupStage+0x72>
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	d822      	bhi.n	800de36 <USBD_LL_SetupStage+0x86>
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d002      	beq.n	800ddfa <USBD_LL_SetupStage+0x4a>
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d00a      	beq.n	800de0e <USBD_LL_SetupStage+0x5e>
 800ddf8:	e01d      	b.n	800de36 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de00:	4619      	mov	r1, r3
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 fb2c 	bl	800e460 <USBD_StdDevReq>
 800de08:	4603      	mov	r3, r0
 800de0a:	73fb      	strb	r3, [r7, #15]
      break;
 800de0c:	e020      	b.n	800de50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de14:	4619      	mov	r1, r3
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 fb94 	bl	800e544 <USBD_StdItfReq>
 800de1c:	4603      	mov	r3, r0
 800de1e:	73fb      	strb	r3, [r7, #15]
      break;
 800de20:	e016      	b.n	800de50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de28:	4619      	mov	r1, r3
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 fbf6 	bl	800e61c <USBD_StdEPReq>
 800de30:	4603      	mov	r3, r0
 800de32:	73fb      	strb	r3, [r7, #15]
      break;
 800de34:	e00c      	b.n	800de50 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800de3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800de40:	b2db      	uxtb	r3, r3
 800de42:	4619      	mov	r1, r3
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f001 fd89 	bl	800f95c <USBD_LL_StallEP>
 800de4a:	4603      	mov	r3, r0
 800de4c:	73fb      	strb	r3, [r7, #15]
      break;
 800de4e:	bf00      	nop
  }

  return ret;
 800de50:	7bfb      	ldrb	r3, [r7, #15]
}
 800de52:	4618      	mov	r0, r3
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}

0800de5a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800de5a:	b580      	push	{r7, lr}
 800de5c:	b086      	sub	sp, #24
 800de5e:	af00      	add	r7, sp, #0
 800de60:	60f8      	str	r0, [r7, #12]
 800de62:	460b      	mov	r3, r1
 800de64:	607a      	str	r2, [r7, #4]
 800de66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800de68:	2300      	movs	r3, #0
 800de6a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800de6c:	7afb      	ldrb	r3, [r7, #11]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d16e      	bne.n	800df50 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800de78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800de80:	2b03      	cmp	r3, #3
 800de82:	f040 8098 	bne.w	800dfb6 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	689a      	ldr	r2, [r3, #8]
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d913      	bls.n	800deba <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	689a      	ldr	r2, [r3, #8]
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	1ad2      	subs	r2, r2, r3
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	68da      	ldr	r2, [r3, #12]
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	4293      	cmp	r3, r2
 800deaa:	bf28      	it	cs
 800deac:	4613      	movcs	r3, r2
 800deae:	461a      	mov	r2, r3
 800deb0:	6879      	ldr	r1, [r7, #4]
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f001 f9ad 	bl	800f212 <USBD_CtlContinueRx>
 800deb8:	e07d      	b.n	800dfb6 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dec0:	f003 031f 	and.w	r3, r3, #31
 800dec4:	2b02      	cmp	r3, #2
 800dec6:	d014      	beq.n	800def2 <USBD_LL_DataOutStage+0x98>
 800dec8:	2b02      	cmp	r3, #2
 800deca:	d81d      	bhi.n	800df08 <USBD_LL_DataOutStage+0xae>
 800decc:	2b00      	cmp	r3, #0
 800dece:	d002      	beq.n	800ded6 <USBD_LL_DataOutStage+0x7c>
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d003      	beq.n	800dedc <USBD_LL_DataOutStage+0x82>
 800ded4:	e018      	b.n	800df08 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ded6:	2300      	movs	r3, #0
 800ded8:	75bb      	strb	r3, [r7, #22]
            break;
 800deda:	e018      	b.n	800df0e <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	4619      	mov	r1, r3
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f000 fa64 	bl	800e3b4 <USBD_CoreFindIF>
 800deec:	4603      	mov	r3, r0
 800deee:	75bb      	strb	r3, [r7, #22]
            break;
 800def0:	e00d      	b.n	800df0e <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800def8:	b2db      	uxtb	r3, r3
 800defa:	4619      	mov	r1, r3
 800defc:	68f8      	ldr	r0, [r7, #12]
 800defe:	f000 fa66 	bl	800e3ce <USBD_CoreFindEP>
 800df02:	4603      	mov	r3, r0
 800df04:	75bb      	strb	r3, [r7, #22]
            break;
 800df06:	e002      	b.n	800df0e <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800df08:	2300      	movs	r3, #0
 800df0a:	75bb      	strb	r3, [r7, #22]
            break;
 800df0c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800df0e:	7dbb      	ldrb	r3, [r7, #22]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d119      	bne.n	800df48 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	2b03      	cmp	r3, #3
 800df1e:	d113      	bne.n	800df48 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800df20:	7dba      	ldrb	r2, [r7, #22]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	32ae      	adds	r2, #174	; 0xae
 800df26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df2a:	691b      	ldr	r3, [r3, #16]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00b      	beq.n	800df48 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800df30:	7dba      	ldrb	r2, [r7, #22]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800df38:	7dba      	ldrb	r2, [r7, #22]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	32ae      	adds	r2, #174	; 0xae
 800df3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f001 f973 	bl	800f234 <USBD_CtlSendStatus>
 800df4e:	e032      	b.n	800dfb6 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800df50:	7afb      	ldrb	r3, [r7, #11]
 800df52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df56:	b2db      	uxtb	r3, r3
 800df58:	4619      	mov	r1, r3
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f000 fa37 	bl	800e3ce <USBD_CoreFindEP>
 800df60:	4603      	mov	r3, r0
 800df62:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df64:	7dbb      	ldrb	r3, [r7, #22]
 800df66:	2bff      	cmp	r3, #255	; 0xff
 800df68:	d025      	beq.n	800dfb6 <USBD_LL_DataOutStage+0x15c>
 800df6a:	7dbb      	ldrb	r3, [r7, #22]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d122      	bne.n	800dfb6 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df76:	b2db      	uxtb	r3, r3
 800df78:	2b03      	cmp	r3, #3
 800df7a:	d117      	bne.n	800dfac <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800df7c:	7dba      	ldrb	r2, [r7, #22]
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	32ae      	adds	r2, #174	; 0xae
 800df82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df86:	699b      	ldr	r3, [r3, #24]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00f      	beq.n	800dfac <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800df8c:	7dba      	ldrb	r2, [r7, #22]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800df94:	7dba      	ldrb	r2, [r7, #22]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	32ae      	adds	r2, #174	; 0xae
 800df9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df9e:	699b      	ldr	r3, [r3, #24]
 800dfa0:	7afa      	ldrb	r2, [r7, #11]
 800dfa2:	4611      	mov	r1, r2
 800dfa4:	68f8      	ldr	r0, [r7, #12]
 800dfa6:	4798      	blx	r3
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dfac:	7dfb      	ldrb	r3, [r7, #23]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d001      	beq.n	800dfb6 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dfb2:	7dfb      	ldrb	r3, [r7, #23]
 800dfb4:	e000      	b.n	800dfb8 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dfb6:	2300      	movs	r3, #0
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3718      	adds	r7, #24
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b086      	sub	sp, #24
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	460b      	mov	r3, r1
 800dfca:	607a      	str	r2, [r7, #4]
 800dfcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dfce:	7afb      	ldrb	r3, [r7, #11]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d16f      	bne.n	800e0b4 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	3314      	adds	r3, #20
 800dfd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d15a      	bne.n	800e09a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	689a      	ldr	r2, [r3, #8]
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d914      	bls.n	800e01a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	689a      	ldr	r2, [r3, #8]
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	1ad2      	subs	r2, r2, r3
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	461a      	mov	r2, r3
 800e004:	6879      	ldr	r1, [r7, #4]
 800e006:	68f8      	ldr	r0, [r7, #12]
 800e008:	f001 f8d5 	bl	800f1b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e00c:	2300      	movs	r3, #0
 800e00e:	2200      	movs	r2, #0
 800e010:	2100      	movs	r1, #0
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	f001 fd4c 	bl	800fab0 <USBD_LL_PrepareReceive>
 800e018:	e03f      	b.n	800e09a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	68da      	ldr	r2, [r3, #12]
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	689b      	ldr	r3, [r3, #8]
 800e022:	429a      	cmp	r2, r3
 800e024:	d11c      	bne.n	800e060 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	685a      	ldr	r2, [r3, #4]
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e02e:	429a      	cmp	r2, r3
 800e030:	d316      	bcc.n	800e060 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	685a      	ldr	r2, [r3, #4]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d20f      	bcs.n	800e060 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e040:	2200      	movs	r2, #0
 800e042:	2100      	movs	r1, #0
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f001 f8b6 	bl	800f1b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2200      	movs	r2, #0
 800e04e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e052:	2300      	movs	r3, #0
 800e054:	2200      	movs	r2, #0
 800e056:	2100      	movs	r1, #0
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f001 fd29 	bl	800fab0 <USBD_LL_PrepareReceive>
 800e05e:	e01c      	b.n	800e09a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b03      	cmp	r3, #3
 800e06a:	d10f      	bne.n	800e08c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d009      	beq.n	800e08c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2200      	movs	r2, #0
 800e07c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e086:	68db      	ldr	r3, [r3, #12]
 800e088:	68f8      	ldr	r0, [r7, #12]
 800e08a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e08c:	2180      	movs	r1, #128	; 0x80
 800e08e:	68f8      	ldr	r0, [r7, #12]
 800e090:	f001 fc64 	bl	800f95c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e094:	68f8      	ldr	r0, [r7, #12]
 800e096:	f001 f8e0 	bl	800f25a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d03a      	beq.n	800e11a <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e0a4:	68f8      	ldr	r0, [r7, #12]
 800e0a6:	f7ff fe42 	bl	800dd2e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e0b2:	e032      	b.n	800e11a <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e0b4:	7afb      	ldrb	r3, [r7, #11]
 800e0b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	4619      	mov	r1, r3
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	f000 f985 	bl	800e3ce <USBD_CoreFindEP>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e0c8:	7dfb      	ldrb	r3, [r7, #23]
 800e0ca:	2bff      	cmp	r3, #255	; 0xff
 800e0cc:	d025      	beq.n	800e11a <USBD_LL_DataInStage+0x15a>
 800e0ce:	7dfb      	ldrb	r3, [r7, #23]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d122      	bne.n	800e11a <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	2b03      	cmp	r3, #3
 800e0de:	d11c      	bne.n	800e11a <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e0e0:	7dfa      	ldrb	r2, [r7, #23]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	32ae      	adds	r2, #174	; 0xae
 800e0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ea:	695b      	ldr	r3, [r3, #20]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d014      	beq.n	800e11a <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e0f0:	7dfa      	ldrb	r2, [r7, #23]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e0f8:	7dfa      	ldrb	r2, [r7, #23]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	32ae      	adds	r2, #174	; 0xae
 800e0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e102:	695b      	ldr	r3, [r3, #20]
 800e104:	7afa      	ldrb	r2, [r7, #11]
 800e106:	4611      	mov	r1, r2
 800e108:	68f8      	ldr	r0, [r7, #12]
 800e10a:	4798      	blx	r3
 800e10c:	4603      	mov	r3, r0
 800e10e:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e110:	7dbb      	ldrb	r3, [r7, #22]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d001      	beq.n	800e11a <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e116:	7dbb      	ldrb	r3, [r7, #22]
 800e118:	e000      	b.n	800e11c <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e11a:	2300      	movs	r3, #0
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3718      	adds	r7, #24
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e12c:	2300      	movs	r3, #0
 800e12e:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2201      	movs	r2, #1
 800e134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2200      	movs	r2, #0
 800e13c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2200      	movs	r2, #0
 800e144:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2200      	movs	r2, #0
 800e14a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d014      	beq.n	800e18a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d00e      	beq.n	800e18a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	687a      	ldr	r2, [r7, #4]
 800e176:	6852      	ldr	r2, [r2, #4]
 800e178:	b2d2      	uxtb	r2, r2
 800e17a:	4611      	mov	r1, r2
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	4798      	blx	r3
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d001      	beq.n	800e18a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e186:	2303      	movs	r3, #3
 800e188:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e18a:	2340      	movs	r3, #64	; 0x40
 800e18c:	2200      	movs	r2, #0
 800e18e:	2100      	movs	r1, #0
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f001 fbbd 	bl	800f910 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2201      	movs	r2, #1
 800e19a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2240      	movs	r2, #64	; 0x40
 800e1a2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e1a6:	2340      	movs	r3, #64	; 0x40
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	2180      	movs	r1, #128	; 0x80
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f001 fbaf 	bl	800f910 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2240      	movs	r2, #64	; 0x40
 800e1bc:	621a      	str	r2, [r3, #32]

  return ret;
 800e1be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3710      	adds	r7, #16
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b083      	sub	sp, #12
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	78fa      	ldrb	r2, [r7, #3]
 800e1d8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e1da:	2300      	movs	r3, #0
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	370c      	adds	r7, #12
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	2b04      	cmp	r3, #4
 800e1fa:	d006      	beq.n	800e20a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e202:	b2da      	uxtb	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2204      	movs	r2, #4
 800e20e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e212:	2300      	movs	r3, #0
}
 800e214:	4618      	mov	r0, r3
 800e216:	370c      	adds	r7, #12
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e220:	b480      	push	{r7}
 800e222:	b083      	sub	sp, #12
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	2b04      	cmp	r3, #4
 800e232:	d106      	bne.n	800e242 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e23a:	b2da      	uxtb	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e242:	2300      	movs	r3, #0
}
 800e244:	4618      	mov	r0, r3
 800e246:	370c      	adds	r7, #12
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr

0800e250 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	2b03      	cmp	r3, #3
 800e262:	d110      	bne.n	800e286 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d00b      	beq.n	800e286 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e274:	69db      	ldr	r3, [r3, #28]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d005      	beq.n	800e286 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e280:	69db      	ldr	r3, [r3, #28]
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e286:	2300      	movs	r3, #0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3708      	adds	r7, #8
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	460b      	mov	r3, r1
 800e29a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	32ae      	adds	r2, #174	; 0xae
 800e2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d101      	bne.n	800e2b2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e2ae:	2303      	movs	r3, #3
 800e2b0:	e01c      	b.n	800e2ec <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2b8:	b2db      	uxtb	r3, r3
 800e2ba:	2b03      	cmp	r3, #3
 800e2bc:	d115      	bne.n	800e2ea <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	32ae      	adds	r2, #174	; 0xae
 800e2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2cc:	6a1b      	ldr	r3, [r3, #32]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d00b      	beq.n	800e2ea <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	32ae      	adds	r2, #174	; 0xae
 800e2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2e0:	6a1b      	ldr	r3, [r3, #32]
 800e2e2:	78fa      	ldrb	r2, [r7, #3]
 800e2e4:	4611      	mov	r1, r2
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e2ea:	2300      	movs	r3, #0
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3708      	adds	r7, #8
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	32ae      	adds	r2, #174	; 0xae
 800e30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d101      	bne.n	800e316 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e312:	2303      	movs	r3, #3
 800e314:	e01c      	b.n	800e350 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	2b03      	cmp	r3, #3
 800e320:	d115      	bne.n	800e34e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	32ae      	adds	r2, #174	; 0xae
 800e32c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00b      	beq.n	800e34e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	32ae      	adds	r2, #174	; 0xae
 800e340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e346:	78fa      	ldrb	r2, [r7, #3]
 800e348:	4611      	mov	r1, r2
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e34e:	2300      	movs	r3, #0
}
 800e350:	4618      	mov	r0, r3
 800e352:	3708      	adds	r7, #8
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e360:	2300      	movs	r3, #0
}
 800e362:	4618      	mov	r0, r3
 800e364:	370c      	adds	r7, #12
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr

0800e36e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e36e:	b580      	push	{r7, lr}
 800e370:	b084      	sub	sp, #16
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e376:	2300      	movs	r3, #0
 800e378:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2201      	movs	r2, #1
 800e37e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00e      	beq.n	800e3aa <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	6852      	ldr	r2, [r2, #4]
 800e398:	b2d2      	uxtb	r2, r2
 800e39a:	4611      	mov	r1, r2
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	4798      	blx	r3
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d001      	beq.n	800e3aa <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e3a6:	2303      	movs	r3, #3
 800e3a8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	460b      	mov	r3, r1
 800e3be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e3c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	370c      	adds	r7, #12
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3cc:	4770      	bx	lr

0800e3ce <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e3ce:	b480      	push	{r7}
 800e3d0:	b083      	sub	sp, #12
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e3da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	370c      	adds	r7, #12
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr

0800e3e8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b085      	sub	sp, #20
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	881a      	ldrh	r2, [r3, #0]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	4413      	add	r3, r2
 800e402:	b29a      	uxth	r2, r3
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	461a      	mov	r2, r3
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	4413      	add	r3, r2
 800e412:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e414:	68fb      	ldr	r3, [r7, #12]
}
 800e416:	4618      	mov	r0, r3
 800e418:	3714      	adds	r7, #20
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr

0800e422 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e422:	b480      	push	{r7}
 800e424:	b087      	sub	sp, #28
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	3301      	adds	r3, #1
 800e438:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e440:	8a3b      	ldrh	r3, [r7, #16]
 800e442:	021b      	lsls	r3, r3, #8
 800e444:	b21a      	sxth	r2, r3
 800e446:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e44a:	4313      	orrs	r3, r2
 800e44c:	b21b      	sxth	r3, r3
 800e44e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e450:	89fb      	ldrh	r3, [r7, #14]
}
 800e452:	4618      	mov	r0, r3
 800e454:	371c      	adds	r7, #28
 800e456:	46bd      	mov	sp, r7
 800e458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45c:	4770      	bx	lr
	...

0800e460 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b084      	sub	sp, #16
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e46a:	2300      	movs	r3, #0
 800e46c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e476:	2b40      	cmp	r3, #64	; 0x40
 800e478:	d005      	beq.n	800e486 <USBD_StdDevReq+0x26>
 800e47a:	2b40      	cmp	r3, #64	; 0x40
 800e47c:	d857      	bhi.n	800e52e <USBD_StdDevReq+0xce>
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d00f      	beq.n	800e4a2 <USBD_StdDevReq+0x42>
 800e482:	2b20      	cmp	r3, #32
 800e484:	d153      	bne.n	800e52e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	32ae      	adds	r2, #174	; 0xae
 800e490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e494:	689b      	ldr	r3, [r3, #8]
 800e496:	6839      	ldr	r1, [r7, #0]
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	4798      	blx	r3
 800e49c:	4603      	mov	r3, r0
 800e49e:	73fb      	strb	r3, [r7, #15]
      break;
 800e4a0:	e04a      	b.n	800e538 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	785b      	ldrb	r3, [r3, #1]
 800e4a6:	2b09      	cmp	r3, #9
 800e4a8:	d83b      	bhi.n	800e522 <USBD_StdDevReq+0xc2>
 800e4aa:	a201      	add	r2, pc, #4	; (adr r2, 800e4b0 <USBD_StdDevReq+0x50>)
 800e4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b0:	0800e505 	.word	0x0800e505
 800e4b4:	0800e519 	.word	0x0800e519
 800e4b8:	0800e523 	.word	0x0800e523
 800e4bc:	0800e50f 	.word	0x0800e50f
 800e4c0:	0800e523 	.word	0x0800e523
 800e4c4:	0800e4e3 	.word	0x0800e4e3
 800e4c8:	0800e4d9 	.word	0x0800e4d9
 800e4cc:	0800e523 	.word	0x0800e523
 800e4d0:	0800e4fb 	.word	0x0800e4fb
 800e4d4:	0800e4ed 	.word	0x0800e4ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e4d8:	6839      	ldr	r1, [r7, #0]
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 fa3c 	bl	800e958 <USBD_GetDescriptor>
          break;
 800e4e0:	e024      	b.n	800e52c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e4e2:	6839      	ldr	r1, [r7, #0]
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f000 fbf1 	bl	800eccc <USBD_SetAddress>
          break;
 800e4ea:	e01f      	b.n	800e52c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e4ec:	6839      	ldr	r1, [r7, #0]
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f000 fc30 	bl	800ed54 <USBD_SetConfig>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	73fb      	strb	r3, [r7, #15]
          break;
 800e4f8:	e018      	b.n	800e52c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e4fa:	6839      	ldr	r1, [r7, #0]
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f000 fcd3 	bl	800eea8 <USBD_GetConfig>
          break;
 800e502:	e013      	b.n	800e52c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e504:	6839      	ldr	r1, [r7, #0]
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 fd04 	bl	800ef14 <USBD_GetStatus>
          break;
 800e50c:	e00e      	b.n	800e52c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e50e:	6839      	ldr	r1, [r7, #0]
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 fd33 	bl	800ef7c <USBD_SetFeature>
          break;
 800e516:	e009      	b.n	800e52c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e518:	6839      	ldr	r1, [r7, #0]
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 fd57 	bl	800efce <USBD_ClrFeature>
          break;
 800e520:	e004      	b.n	800e52c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e522:	6839      	ldr	r1, [r7, #0]
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f000 fdae 	bl	800f086 <USBD_CtlError>
          break;
 800e52a:	bf00      	nop
      }
      break;
 800e52c:	e004      	b.n	800e538 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e52e:	6839      	ldr	r1, [r7, #0]
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 fda8 	bl	800f086 <USBD_CtlError>
      break;
 800e536:	bf00      	nop
  }

  return ret;
 800e538:	7bfb      	ldrb	r3, [r7, #15]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3710      	adds	r7, #16
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop

0800e544 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e54e:	2300      	movs	r3, #0
 800e550:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e55a:	2b40      	cmp	r3, #64	; 0x40
 800e55c:	d005      	beq.n	800e56a <USBD_StdItfReq+0x26>
 800e55e:	2b40      	cmp	r3, #64	; 0x40
 800e560:	d852      	bhi.n	800e608 <USBD_StdItfReq+0xc4>
 800e562:	2b00      	cmp	r3, #0
 800e564:	d001      	beq.n	800e56a <USBD_StdItfReq+0x26>
 800e566:	2b20      	cmp	r3, #32
 800e568:	d14e      	bne.n	800e608 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e570:	b2db      	uxtb	r3, r3
 800e572:	3b01      	subs	r3, #1
 800e574:	2b02      	cmp	r3, #2
 800e576:	d840      	bhi.n	800e5fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	889b      	ldrh	r3, [r3, #4]
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d836      	bhi.n	800e5f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	889b      	ldrh	r3, [r3, #4]
 800e586:	b2db      	uxtb	r3, r3
 800e588:	4619      	mov	r1, r3
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f7ff ff12 	bl	800e3b4 <USBD_CoreFindIF>
 800e590:	4603      	mov	r3, r0
 800e592:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e594:	7bbb      	ldrb	r3, [r7, #14]
 800e596:	2bff      	cmp	r3, #255	; 0xff
 800e598:	d01d      	beq.n	800e5d6 <USBD_StdItfReq+0x92>
 800e59a:	7bbb      	ldrb	r3, [r7, #14]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d11a      	bne.n	800e5d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e5a0:	7bba      	ldrb	r2, [r7, #14]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	32ae      	adds	r2, #174	; 0xae
 800e5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00f      	beq.n	800e5d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e5b0:	7bba      	ldrb	r2, [r7, #14]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e5b8:	7bba      	ldrb	r2, [r7, #14]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	32ae      	adds	r2, #174	; 0xae
 800e5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5c2:	689b      	ldr	r3, [r3, #8]
 800e5c4:	6839      	ldr	r1, [r7, #0]
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	4798      	blx	r3
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e5ce:	e004      	b.n	800e5da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e5d0:	2303      	movs	r3, #3
 800e5d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e5d4:	e001      	b.n	800e5da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e5d6:	2303      	movs	r3, #3
 800e5d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	88db      	ldrh	r3, [r3, #6]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d110      	bne.n	800e604 <USBD_StdItfReq+0xc0>
 800e5e2:	7bfb      	ldrb	r3, [r7, #15]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d10d      	bne.n	800e604 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 fe23 	bl	800f234 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e5ee:	e009      	b.n	800e604 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e5f0:	6839      	ldr	r1, [r7, #0]
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 fd47 	bl	800f086 <USBD_CtlError>
          break;
 800e5f8:	e004      	b.n	800e604 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e5fa:	6839      	ldr	r1, [r7, #0]
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f000 fd42 	bl	800f086 <USBD_CtlError>
          break;
 800e602:	e000      	b.n	800e606 <USBD_StdItfReq+0xc2>
          break;
 800e604:	bf00      	nop
      }
      break;
 800e606:	e004      	b.n	800e612 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e608:	6839      	ldr	r1, [r7, #0]
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 fd3b 	bl	800f086 <USBD_CtlError>
      break;
 800e610:	bf00      	nop
  }

  return ret;
 800e612:	7bfb      	ldrb	r3, [r7, #15]
}
 800e614:	4618      	mov	r0, r3
 800e616:	3710      	adds	r7, #16
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e626:	2300      	movs	r3, #0
 800e628:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	889b      	ldrh	r3, [r3, #4]
 800e62e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e638:	2b40      	cmp	r3, #64	; 0x40
 800e63a:	d007      	beq.n	800e64c <USBD_StdEPReq+0x30>
 800e63c:	2b40      	cmp	r3, #64	; 0x40
 800e63e:	f200 817f 	bhi.w	800e940 <USBD_StdEPReq+0x324>
 800e642:	2b00      	cmp	r3, #0
 800e644:	d02a      	beq.n	800e69c <USBD_StdEPReq+0x80>
 800e646:	2b20      	cmp	r3, #32
 800e648:	f040 817a 	bne.w	800e940 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e64c:	7bbb      	ldrb	r3, [r7, #14]
 800e64e:	4619      	mov	r1, r3
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f7ff febc 	bl	800e3ce <USBD_CoreFindEP>
 800e656:	4603      	mov	r3, r0
 800e658:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e65a:	7b7b      	ldrb	r3, [r7, #13]
 800e65c:	2bff      	cmp	r3, #255	; 0xff
 800e65e:	f000 8174 	beq.w	800e94a <USBD_StdEPReq+0x32e>
 800e662:	7b7b      	ldrb	r3, [r7, #13]
 800e664:	2b00      	cmp	r3, #0
 800e666:	f040 8170 	bne.w	800e94a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e66a:	7b7a      	ldrb	r2, [r7, #13]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e672:	7b7a      	ldrb	r2, [r7, #13]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	32ae      	adds	r2, #174	; 0xae
 800e678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	f000 8163 	beq.w	800e94a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e684:	7b7a      	ldrb	r2, [r7, #13]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	32ae      	adds	r2, #174	; 0xae
 800e68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e68e:	689b      	ldr	r3, [r3, #8]
 800e690:	6839      	ldr	r1, [r7, #0]
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	4798      	blx	r3
 800e696:	4603      	mov	r3, r0
 800e698:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e69a:	e156      	b.n	800e94a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	785b      	ldrb	r3, [r3, #1]
 800e6a0:	2b03      	cmp	r3, #3
 800e6a2:	d008      	beq.n	800e6b6 <USBD_StdEPReq+0x9a>
 800e6a4:	2b03      	cmp	r3, #3
 800e6a6:	f300 8145 	bgt.w	800e934 <USBD_StdEPReq+0x318>
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f000 809b 	beq.w	800e7e6 <USBD_StdEPReq+0x1ca>
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d03c      	beq.n	800e72e <USBD_StdEPReq+0x112>
 800e6b4:	e13e      	b.n	800e934 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	d002      	beq.n	800e6c8 <USBD_StdEPReq+0xac>
 800e6c2:	2b03      	cmp	r3, #3
 800e6c4:	d016      	beq.n	800e6f4 <USBD_StdEPReq+0xd8>
 800e6c6:	e02c      	b.n	800e722 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e6c8:	7bbb      	ldrb	r3, [r7, #14]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d00d      	beq.n	800e6ea <USBD_StdEPReq+0xce>
 800e6ce:	7bbb      	ldrb	r3, [r7, #14]
 800e6d0:	2b80      	cmp	r3, #128	; 0x80
 800e6d2:	d00a      	beq.n	800e6ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e6d4:	7bbb      	ldrb	r3, [r7, #14]
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f001 f93f 	bl	800f95c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e6de:	2180      	movs	r1, #128	; 0x80
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f001 f93b 	bl	800f95c <USBD_LL_StallEP>
 800e6e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e6e8:	e020      	b.n	800e72c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e6ea:	6839      	ldr	r1, [r7, #0]
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 fcca 	bl	800f086 <USBD_CtlError>
              break;
 800e6f2:	e01b      	b.n	800e72c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	885b      	ldrh	r3, [r3, #2]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d10e      	bne.n	800e71a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e6fc:	7bbb      	ldrb	r3, [r7, #14]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d00b      	beq.n	800e71a <USBD_StdEPReq+0xfe>
 800e702:	7bbb      	ldrb	r3, [r7, #14]
 800e704:	2b80      	cmp	r3, #128	; 0x80
 800e706:	d008      	beq.n	800e71a <USBD_StdEPReq+0xfe>
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	88db      	ldrh	r3, [r3, #6]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d104      	bne.n	800e71a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e710:	7bbb      	ldrb	r3, [r7, #14]
 800e712:	4619      	mov	r1, r3
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f001 f921 	bl	800f95c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f000 fd8a 	bl	800f234 <USBD_CtlSendStatus>

              break;
 800e720:	e004      	b.n	800e72c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e722:	6839      	ldr	r1, [r7, #0]
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f000 fcae 	bl	800f086 <USBD_CtlError>
              break;
 800e72a:	bf00      	nop
          }
          break;
 800e72c:	e107      	b.n	800e93e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e734:	b2db      	uxtb	r3, r3
 800e736:	2b02      	cmp	r3, #2
 800e738:	d002      	beq.n	800e740 <USBD_StdEPReq+0x124>
 800e73a:	2b03      	cmp	r3, #3
 800e73c:	d016      	beq.n	800e76c <USBD_StdEPReq+0x150>
 800e73e:	e04b      	b.n	800e7d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e740:	7bbb      	ldrb	r3, [r7, #14]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00d      	beq.n	800e762 <USBD_StdEPReq+0x146>
 800e746:	7bbb      	ldrb	r3, [r7, #14]
 800e748:	2b80      	cmp	r3, #128	; 0x80
 800e74a:	d00a      	beq.n	800e762 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e74c:	7bbb      	ldrb	r3, [r7, #14]
 800e74e:	4619      	mov	r1, r3
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f001 f903 	bl	800f95c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e756:	2180      	movs	r1, #128	; 0x80
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f001 f8ff 	bl	800f95c <USBD_LL_StallEP>
 800e75e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e760:	e040      	b.n	800e7e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e762:	6839      	ldr	r1, [r7, #0]
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 fc8e 	bl	800f086 <USBD_CtlError>
              break;
 800e76a:	e03b      	b.n	800e7e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	885b      	ldrh	r3, [r3, #2]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d136      	bne.n	800e7e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e774:	7bbb      	ldrb	r3, [r7, #14]
 800e776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d004      	beq.n	800e788 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e77e:	7bbb      	ldrb	r3, [r7, #14]
 800e780:	4619      	mov	r1, r3
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f001 f909 	bl	800f99a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f000 fd53 	bl	800f234 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e78e:	7bbb      	ldrb	r3, [r7, #14]
 800e790:	4619      	mov	r1, r3
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f7ff fe1b 	bl	800e3ce <USBD_CoreFindEP>
 800e798:	4603      	mov	r3, r0
 800e79a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e79c:	7b7b      	ldrb	r3, [r7, #13]
 800e79e:	2bff      	cmp	r3, #255	; 0xff
 800e7a0:	d01f      	beq.n	800e7e2 <USBD_StdEPReq+0x1c6>
 800e7a2:	7b7b      	ldrb	r3, [r7, #13]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d11c      	bne.n	800e7e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e7a8:	7b7a      	ldrb	r2, [r7, #13]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e7b0:	7b7a      	ldrb	r2, [r7, #13]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	32ae      	adds	r2, #174	; 0xae
 800e7b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d010      	beq.n	800e7e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e7c0:	7b7a      	ldrb	r2, [r7, #13]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	32ae      	adds	r2, #174	; 0xae
 800e7c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7ca:	689b      	ldr	r3, [r3, #8]
 800e7cc:	6839      	ldr	r1, [r7, #0]
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	4798      	blx	r3
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e7d6:	e004      	b.n	800e7e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e7d8:	6839      	ldr	r1, [r7, #0]
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 fc53 	bl	800f086 <USBD_CtlError>
              break;
 800e7e0:	e000      	b.n	800e7e4 <USBD_StdEPReq+0x1c8>
              break;
 800e7e2:	bf00      	nop
          }
          break;
 800e7e4:	e0ab      	b.n	800e93e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7ec:	b2db      	uxtb	r3, r3
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	d002      	beq.n	800e7f8 <USBD_StdEPReq+0x1dc>
 800e7f2:	2b03      	cmp	r3, #3
 800e7f4:	d032      	beq.n	800e85c <USBD_StdEPReq+0x240>
 800e7f6:	e097      	b.n	800e928 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e7f8:	7bbb      	ldrb	r3, [r7, #14]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d007      	beq.n	800e80e <USBD_StdEPReq+0x1f2>
 800e7fe:	7bbb      	ldrb	r3, [r7, #14]
 800e800:	2b80      	cmp	r3, #128	; 0x80
 800e802:	d004      	beq.n	800e80e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e804:	6839      	ldr	r1, [r7, #0]
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 fc3d 	bl	800f086 <USBD_CtlError>
                break;
 800e80c:	e091      	b.n	800e932 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e80e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e812:	2b00      	cmp	r3, #0
 800e814:	da0b      	bge.n	800e82e <USBD_StdEPReq+0x212>
 800e816:	7bbb      	ldrb	r3, [r7, #14]
 800e818:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e81c:	4613      	mov	r3, r2
 800e81e:	009b      	lsls	r3, r3, #2
 800e820:	4413      	add	r3, r2
 800e822:	009b      	lsls	r3, r3, #2
 800e824:	3310      	adds	r3, #16
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	4413      	add	r3, r2
 800e82a:	3304      	adds	r3, #4
 800e82c:	e00b      	b.n	800e846 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e82e:	7bbb      	ldrb	r3, [r7, #14]
 800e830:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e834:	4613      	mov	r3, r2
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	4413      	add	r3, r2
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	4413      	add	r3, r2
 800e844:	3304      	adds	r3, #4
 800e846:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	2200      	movs	r2, #0
 800e84c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	2202      	movs	r2, #2
 800e852:	4619      	mov	r1, r3
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f000 fc93 	bl	800f180 <USBD_CtlSendData>
              break;
 800e85a:	e06a      	b.n	800e932 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e85c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e860:	2b00      	cmp	r3, #0
 800e862:	da11      	bge.n	800e888 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e864:	7bbb      	ldrb	r3, [r7, #14]
 800e866:	f003 020f 	and.w	r2, r3, #15
 800e86a:	6879      	ldr	r1, [r7, #4]
 800e86c:	4613      	mov	r3, r2
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	4413      	add	r3, r2
 800e872:	009b      	lsls	r3, r3, #2
 800e874:	440b      	add	r3, r1
 800e876:	3324      	adds	r3, #36	; 0x24
 800e878:	881b      	ldrh	r3, [r3, #0]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d117      	bne.n	800e8ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e87e:	6839      	ldr	r1, [r7, #0]
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 fc00 	bl	800f086 <USBD_CtlError>
                  break;
 800e886:	e054      	b.n	800e932 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e888:	7bbb      	ldrb	r3, [r7, #14]
 800e88a:	f003 020f 	and.w	r2, r3, #15
 800e88e:	6879      	ldr	r1, [r7, #4]
 800e890:	4613      	mov	r3, r2
 800e892:	009b      	lsls	r3, r3, #2
 800e894:	4413      	add	r3, r2
 800e896:	009b      	lsls	r3, r3, #2
 800e898:	440b      	add	r3, r1
 800e89a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e89e:	881b      	ldrh	r3, [r3, #0]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d104      	bne.n	800e8ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e8a4:	6839      	ldr	r1, [r7, #0]
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f000 fbed 	bl	800f086 <USBD_CtlError>
                  break;
 800e8ac:	e041      	b.n	800e932 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	da0b      	bge.n	800e8ce <USBD_StdEPReq+0x2b2>
 800e8b6:	7bbb      	ldrb	r3, [r7, #14]
 800e8b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8bc:	4613      	mov	r3, r2
 800e8be:	009b      	lsls	r3, r3, #2
 800e8c0:	4413      	add	r3, r2
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	3310      	adds	r3, #16
 800e8c6:	687a      	ldr	r2, [r7, #4]
 800e8c8:	4413      	add	r3, r2
 800e8ca:	3304      	adds	r3, #4
 800e8cc:	e00b      	b.n	800e8e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e8ce:	7bbb      	ldrb	r3, [r7, #14]
 800e8d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e8d4:	4613      	mov	r3, r2
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	4413      	add	r3, r2
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	4413      	add	r3, r2
 800e8e4:	3304      	adds	r3, #4
 800e8e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e8e8:	7bbb      	ldrb	r3, [r7, #14]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d002      	beq.n	800e8f4 <USBD_StdEPReq+0x2d8>
 800e8ee:	7bbb      	ldrb	r3, [r7, #14]
 800e8f0:	2b80      	cmp	r3, #128	; 0x80
 800e8f2:	d103      	bne.n	800e8fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	601a      	str	r2, [r3, #0]
 800e8fa:	e00e      	b.n	800e91a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e8fc:	7bbb      	ldrb	r3, [r7, #14]
 800e8fe:	4619      	mov	r1, r3
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f001 f869 	bl	800f9d8 <USBD_LL_IsStallEP>
 800e906:	4603      	mov	r3, r0
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d003      	beq.n	800e914 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	2201      	movs	r2, #1
 800e910:	601a      	str	r2, [r3, #0]
 800e912:	e002      	b.n	800e91a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	2200      	movs	r2, #0
 800e918:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	2202      	movs	r2, #2
 800e91e:	4619      	mov	r1, r3
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 fc2d 	bl	800f180 <USBD_CtlSendData>
              break;
 800e926:	e004      	b.n	800e932 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e928:	6839      	ldr	r1, [r7, #0]
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 fbab 	bl	800f086 <USBD_CtlError>
              break;
 800e930:	bf00      	nop
          }
          break;
 800e932:	e004      	b.n	800e93e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e934:	6839      	ldr	r1, [r7, #0]
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f000 fba5 	bl	800f086 <USBD_CtlError>
          break;
 800e93c:	bf00      	nop
      }
      break;
 800e93e:	e005      	b.n	800e94c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e940:	6839      	ldr	r1, [r7, #0]
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 fb9f 	bl	800f086 <USBD_CtlError>
      break;
 800e948:	e000      	b.n	800e94c <USBD_StdEPReq+0x330>
      break;
 800e94a:	bf00      	nop
  }

  return ret;
 800e94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3710      	adds	r7, #16
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
	...

0800e958 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b086      	sub	sp, #24
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e962:	2300      	movs	r3, #0
 800e964:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 800e966:	2300      	movs	r3, #0
 800e968:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 800e96a:	2300      	movs	r3, #0
 800e96c:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	885b      	ldrh	r3, [r3, #2]
 800e972:	0a1b      	lsrs	r3, r3, #8
 800e974:	b29b      	uxth	r3, r3
 800e976:	3b01      	subs	r3, #1
 800e978:	2b0e      	cmp	r3, #14
 800e97a:	f200 8179 	bhi.w	800ec70 <USBD_GetDescriptor+0x318>
 800e97e:	a201      	add	r2, pc, #4	; (adr r2, 800e984 <USBD_GetDescriptor+0x2c>)
 800e980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e984:	0800e9f5 	.word	0x0800e9f5
 800e988:	0800ea0d 	.word	0x0800ea0d
 800e98c:	0800ea4d 	.word	0x0800ea4d
 800e990:	0800ec71 	.word	0x0800ec71
 800e994:	0800ec71 	.word	0x0800ec71
 800e998:	0800ec11 	.word	0x0800ec11
 800e99c:	0800ec3d 	.word	0x0800ec3d
 800e9a0:	0800ec71 	.word	0x0800ec71
 800e9a4:	0800ec71 	.word	0x0800ec71
 800e9a8:	0800ec71 	.word	0x0800ec71
 800e9ac:	0800ec71 	.word	0x0800ec71
 800e9b0:	0800ec71 	.word	0x0800ec71
 800e9b4:	0800ec71 	.word	0x0800ec71
 800e9b8:	0800ec71 	.word	0x0800ec71
 800e9bc:	0800e9c1 	.word	0x0800e9c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9c6:	69db      	ldr	r3, [r3, #28]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d00b      	beq.n	800e9e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9d2:	69db      	ldr	r3, [r3, #28]
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	7c12      	ldrb	r2, [r2, #16]
 800e9d8:	f107 010a 	add.w	r1, r7, #10
 800e9dc:	4610      	mov	r0, r2
 800e9de:	4798      	blx	r3
 800e9e0:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9e2:	e14d      	b.n	800ec80 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 800e9e4:	6839      	ldr	r1, [r7, #0]
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f000 fb4d 	bl	800f086 <USBD_CtlError>
        err++;
 800e9ec:	7cfb      	ldrb	r3, [r7, #19]
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	74fb      	strb	r3, [r7, #19]
      break;
 800e9f2:	e145      	b.n	800ec80 <USBD_GetDescriptor+0x328>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	7c12      	ldrb	r2, [r2, #16]
 800ea00:	f107 010a 	add.w	r1, r7, #10
 800ea04:	4610      	mov	r0, r2
 800ea06:	4798      	blx	r3
 800ea08:	6178      	str	r0, [r7, #20]
      break;
 800ea0a:	e139      	b.n	800ec80 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	7c1b      	ldrb	r3, [r3, #16]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d10d      	bne.n	800ea30 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea1c:	f107 020a 	add.w	r2, r7, #10
 800ea20:	4610      	mov	r0, r2
 800ea22:	4798      	blx	r3
 800ea24:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	2202      	movs	r2, #2
 800ea2c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ea2e:	e127      	b.n	800ec80 <USBD_GetDescriptor+0x328>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea38:	f107 020a 	add.w	r2, r7, #10
 800ea3c:	4610      	mov	r0, r2
 800ea3e:	4798      	blx	r3
 800ea40:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	3301      	adds	r3, #1
 800ea46:	2202      	movs	r2, #2
 800ea48:	701a      	strb	r2, [r3, #0]
      break;
 800ea4a:	e119      	b.n	800ec80 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	885b      	ldrh	r3, [r3, #2]
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	2b05      	cmp	r3, #5
 800ea54:	f200 80ac 	bhi.w	800ebb0 <USBD_GetDescriptor+0x258>
 800ea58:	a201      	add	r2, pc, #4	; (adr r2, 800ea60 <USBD_GetDescriptor+0x108>)
 800ea5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea5e:	bf00      	nop
 800ea60:	0800ea79 	.word	0x0800ea79
 800ea64:	0800eaad 	.word	0x0800eaad
 800ea68:	0800eae1 	.word	0x0800eae1
 800ea6c:	0800eb15 	.word	0x0800eb15
 800ea70:	0800eb49 	.word	0x0800eb49
 800ea74:	0800eb7d 	.word	0x0800eb7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d00b      	beq.n	800ea9c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	7c12      	ldrb	r2, [r2, #16]
 800ea90:	f107 010a 	add.w	r1, r7, #10
 800ea94:	4610      	mov	r0, r2
 800ea96:	4798      	blx	r3
 800ea98:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea9a:	e0b8      	b.n	800ec0e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800ea9c:	6839      	ldr	r1, [r7, #0]
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f000 faf1 	bl	800f086 <USBD_CtlError>
            err++;
 800eaa4:	7cfb      	ldrb	r3, [r7, #19]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	74fb      	strb	r3, [r7, #19]
          break;
 800eaaa:	e0b0      	b.n	800ec0e <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eab2:	689b      	ldr	r3, [r3, #8]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d00b      	beq.n	800ead0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	7c12      	ldrb	r2, [r2, #16]
 800eac4:	f107 010a 	add.w	r1, r7, #10
 800eac8:	4610      	mov	r0, r2
 800eaca:	4798      	blx	r3
 800eacc:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eace:	e09e      	b.n	800ec0e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800ead0:	6839      	ldr	r1, [r7, #0]
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f000 fad7 	bl	800f086 <USBD_CtlError>
            err++;
 800ead8:	7cfb      	ldrb	r3, [r7, #19]
 800eada:	3301      	adds	r3, #1
 800eadc:	74fb      	strb	r3, [r7, #19]
          break;
 800eade:	e096      	b.n	800ec0e <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eae6:	68db      	ldr	r3, [r3, #12]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d00b      	beq.n	800eb04 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	7c12      	ldrb	r2, [r2, #16]
 800eaf8:	f107 010a 	add.w	r1, r7, #10
 800eafc:	4610      	mov	r0, r2
 800eafe:	4798      	blx	r3
 800eb00:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb02:	e084      	b.n	800ec0e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800eb04:	6839      	ldr	r1, [r7, #0]
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 fabd 	bl	800f086 <USBD_CtlError>
            err++;
 800eb0c:	7cfb      	ldrb	r3, [r7, #19]
 800eb0e:	3301      	adds	r3, #1
 800eb10:	74fb      	strb	r3, [r7, #19]
          break;
 800eb12:	e07c      	b.n	800ec0e <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb1a:	691b      	ldr	r3, [r3, #16]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d00b      	beq.n	800eb38 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb26:	691b      	ldr	r3, [r3, #16]
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	7c12      	ldrb	r2, [r2, #16]
 800eb2c:	f107 010a 	add.w	r1, r7, #10
 800eb30:	4610      	mov	r0, r2
 800eb32:	4798      	blx	r3
 800eb34:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb36:	e06a      	b.n	800ec0e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800eb38:	6839      	ldr	r1, [r7, #0]
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f000 faa3 	bl	800f086 <USBD_CtlError>
            err++;
 800eb40:	7cfb      	ldrb	r3, [r7, #19]
 800eb42:	3301      	adds	r3, #1
 800eb44:	74fb      	strb	r3, [r7, #19]
          break;
 800eb46:	e062      	b.n	800ec0e <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb4e:	695b      	ldr	r3, [r3, #20]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d00b      	beq.n	800eb6c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb5a:	695b      	ldr	r3, [r3, #20]
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	7c12      	ldrb	r2, [r2, #16]
 800eb60:	f107 010a 	add.w	r1, r7, #10
 800eb64:	4610      	mov	r0, r2
 800eb66:	4798      	blx	r3
 800eb68:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb6a:	e050      	b.n	800ec0e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800eb6c:	6839      	ldr	r1, [r7, #0]
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 fa89 	bl	800f086 <USBD_CtlError>
            err++;
 800eb74:	7cfb      	ldrb	r3, [r7, #19]
 800eb76:	3301      	adds	r3, #1
 800eb78:	74fb      	strb	r3, [r7, #19]
          break;
 800eb7a:	e048      	b.n	800ec0e <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb82:	699b      	ldr	r3, [r3, #24]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00b      	beq.n	800eba0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb8e:	699b      	ldr	r3, [r3, #24]
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	7c12      	ldrb	r2, [r2, #16]
 800eb94:	f107 010a 	add.w	r1, r7, #10
 800eb98:	4610      	mov	r0, r2
 800eb9a:	4798      	blx	r3
 800eb9c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eb9e:	e036      	b.n	800ec0e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800eba0:	6839      	ldr	r1, [r7, #0]
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 fa6f 	bl	800f086 <USBD_CtlError>
            err++;
 800eba8:	7cfb      	ldrb	r3, [r7, #19]
 800ebaa:	3301      	adds	r3, #1
 800ebac:	74fb      	strb	r3, [r7, #19]
          break;
 800ebae:	e02e      	b.n	800ec0e <USBD_GetDescriptor+0x2b6>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	617b      	str	r3, [r7, #20]

          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	60fb      	str	r3, [r7, #12]
 800ebb8:	e020      	b.n	800ebfc <USBD_GetDescriptor+0x2a4>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	68fa      	ldr	r2, [r7, #12]
 800ebbe:	32ae      	adds	r2, #174	; 0xae
 800ebc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d015      	beq.n	800ebf6 <USBD_GetDescriptor+0x29e>
            {
              pdev->classId = idx;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	68fa      	ldr	r2, [r7, #12]
 800ebd6:	32ae      	adds	r2, #174	; 0xae
 800ebd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebde:	683a      	ldr	r2, [r7, #0]
 800ebe0:	8852      	ldrh	r2, [r2, #2]
 800ebe2:	b2d1      	uxtb	r1, r2
 800ebe4:	f107 020a 	add.w	r2, r7, #10
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	4798      	blx	r3
 800ebec:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d10a      	bne.n	800ec0a <USBD_GetDescriptor+0x2b2>
              {
                continue;
 800ebf4:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	60fb      	str	r3, [r7, #12]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ec02:	68fa      	ldr	r2, [r7, #12]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d3d8      	bcc.n	800ebba <USBD_GetDescriptor+0x262>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ec08:	e000      	b.n	800ec0c <USBD_GetDescriptor+0x2b4>
                break;
 800ec0a:	bf00      	nop
          break;
 800ec0c:	bf00      	nop
      }
      break;
 800ec0e:	e037      	b.n	800ec80 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	7c1b      	ldrb	r3, [r3, #16]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d109      	bne.n	800ec2c <USBD_GetDescriptor+0x2d4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec20:	f107 020a 	add.w	r2, r7, #10
 800ec24:	4610      	mov	r0, r2
 800ec26:	4798      	blx	r3
 800ec28:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec2a:	e029      	b.n	800ec80 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 800ec2c:	6839      	ldr	r1, [r7, #0]
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 fa29 	bl	800f086 <USBD_CtlError>
        err++;
 800ec34:	7cfb      	ldrb	r3, [r7, #19]
 800ec36:	3301      	adds	r3, #1
 800ec38:	74fb      	strb	r3, [r7, #19]
      break;
 800ec3a:	e021      	b.n	800ec80 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	7c1b      	ldrb	r3, [r3, #16]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d10d      	bne.n	800ec60 <USBD_GetDescriptor+0x308>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec4c:	f107 020a 	add.w	r2, r7, #10
 800ec50:	4610      	mov	r0, r2
 800ec52:	4798      	blx	r3
 800ec54:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	2207      	movs	r2, #7
 800ec5c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ec5e:	e00f      	b.n	800ec80 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 800ec60:	6839      	ldr	r1, [r7, #0]
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 fa0f 	bl	800f086 <USBD_CtlError>
        err++;
 800ec68:	7cfb      	ldrb	r3, [r7, #19]
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	74fb      	strb	r3, [r7, #19]
      break;
 800ec6e:	e007      	b.n	800ec80 <USBD_GetDescriptor+0x328>

    default:
      USBD_CtlError(pdev, req);
 800ec70:	6839      	ldr	r1, [r7, #0]
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f000 fa07 	bl	800f086 <USBD_CtlError>
      err++;
 800ec78:	7cfb      	ldrb	r3, [r7, #19]
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	74fb      	strb	r3, [r7, #19]
      break;
 800ec7e:	bf00      	nop
  }

  if (err != 0U)
 800ec80:	7cfb      	ldrb	r3, [r7, #19]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d11e      	bne.n	800ecc4 <USBD_GetDescriptor+0x36c>
  {
    return;
  }

  if (req->wLength != 0U)
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	88db      	ldrh	r3, [r3, #6]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d016      	beq.n	800ecbc <USBD_GetDescriptor+0x364>
  {
    if (len != 0U)
 800ec8e:	897b      	ldrh	r3, [r7, #10]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d00e      	beq.n	800ecb2 <USBD_GetDescriptor+0x35a>
    {
      len = MIN(len, req->wLength);
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	88da      	ldrh	r2, [r3, #6]
 800ec98:	897b      	ldrh	r3, [r7, #10]
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	bf28      	it	cs
 800ec9e:	4613      	movcs	r3, r2
 800eca0:	b29b      	uxth	r3, r3
 800eca2:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800eca4:	897b      	ldrh	r3, [r7, #10]
 800eca6:	461a      	mov	r2, r3
 800eca8:	6979      	ldr	r1, [r7, #20]
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 fa68 	bl	800f180 <USBD_CtlSendData>
 800ecb0:	e009      	b.n	800ecc6 <USBD_GetDescriptor+0x36e>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ecb2:	6839      	ldr	r1, [r7, #0]
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 f9e6 	bl	800f086 <USBD_CtlError>
 800ecba:	e004      	b.n	800ecc6 <USBD_GetDescriptor+0x36e>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f000 fab9 	bl	800f234 <USBD_CtlSendStatus>
 800ecc2:	e000      	b.n	800ecc6 <USBD_GetDescriptor+0x36e>
    return;
 800ecc4:	bf00      	nop
  }
}
 800ecc6:	3718      	adds	r7, #24
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	889b      	ldrh	r3, [r3, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d131      	bne.n	800ed42 <USBD_SetAddress+0x76>
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	88db      	ldrh	r3, [r3, #6]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d12d      	bne.n	800ed42 <USBD_SetAddress+0x76>
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	885b      	ldrh	r3, [r3, #2]
 800ecea:	2b7f      	cmp	r3, #127	; 0x7f
 800ecec:	d829      	bhi.n	800ed42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	885b      	ldrh	r3, [r3, #2]
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed00:	b2db      	uxtb	r3, r3
 800ed02:	2b03      	cmp	r3, #3
 800ed04:	d104      	bne.n	800ed10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ed06:	6839      	ldr	r1, [r7, #0]
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f000 f9bc 	bl	800f086 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed0e:	e01d      	b.n	800ed4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	7bfa      	ldrb	r2, [r7, #15]
 800ed14:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ed18:	7bfb      	ldrb	r3, [r7, #15]
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f000 fe87 	bl	800fa30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f000 fa86 	bl	800f234 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ed28:	7bfb      	ldrb	r3, [r7, #15]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d004      	beq.n	800ed38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2202      	movs	r2, #2
 800ed32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed36:	e009      	b.n	800ed4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed40:	e004      	b.n	800ed4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ed42:	6839      	ldr	r1, [r7, #0]
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f000 f99e 	bl	800f086 <USBD_CtlError>
  }
}
 800ed4a:	bf00      	nop
 800ed4c:	bf00      	nop
 800ed4e:	3710      	adds	r7, #16
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	885b      	ldrh	r3, [r3, #2]
 800ed66:	b2da      	uxtb	r2, r3
 800ed68:	4b4e      	ldr	r3, [pc, #312]	; (800eea4 <USBD_SetConfig+0x150>)
 800ed6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ed6c:	4b4d      	ldr	r3, [pc, #308]	; (800eea4 <USBD_SetConfig+0x150>)
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d905      	bls.n	800ed80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ed74:	6839      	ldr	r1, [r7, #0]
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 f985 	bl	800f086 <USBD_CtlError>
    return USBD_FAIL;
 800ed7c:	2303      	movs	r3, #3
 800ed7e:	e08c      	b.n	800ee9a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	2b02      	cmp	r3, #2
 800ed8a:	d002      	beq.n	800ed92 <USBD_SetConfig+0x3e>
 800ed8c:	2b03      	cmp	r3, #3
 800ed8e:	d029      	beq.n	800ede4 <USBD_SetConfig+0x90>
 800ed90:	e075      	b.n	800ee7e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ed92:	4b44      	ldr	r3, [pc, #272]	; (800eea4 <USBD_SetConfig+0x150>)
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d020      	beq.n	800eddc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ed9a:	4b42      	ldr	r3, [pc, #264]	; (800eea4 <USBD_SetConfig+0x150>)
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	461a      	mov	r2, r3
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eda4:	4b3f      	ldr	r3, [pc, #252]	; (800eea4 <USBD_SetConfig+0x150>)
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	4619      	mov	r1, r3
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f7fe ffca 	bl	800dd44 <USBD_SetClassConfig>
 800edb0:	4603      	mov	r3, r0
 800edb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800edb4:	7bfb      	ldrb	r3, [r7, #15]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d008      	beq.n	800edcc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800edba:	6839      	ldr	r1, [r7, #0]
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 f962 	bl	800f086 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2202      	movs	r2, #2
 800edc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800edca:	e065      	b.n	800ee98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 fa31 	bl	800f234 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2203      	movs	r2, #3
 800edd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800edda:	e05d      	b.n	800ee98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 fa29 	bl	800f234 <USBD_CtlSendStatus>
      break;
 800ede2:	e059      	b.n	800ee98 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ede4:	4b2f      	ldr	r3, [pc, #188]	; (800eea4 <USBD_SetConfig+0x150>)
 800ede6:	781b      	ldrb	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d112      	bne.n	800ee12 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2202      	movs	r2, #2
 800edf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800edf4:	4b2b      	ldr	r3, [pc, #172]	; (800eea4 <USBD_SetConfig+0x150>)
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	461a      	mov	r2, r3
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800edfe:	4b29      	ldr	r3, [pc, #164]	; (800eea4 <USBD_SetConfig+0x150>)
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	4619      	mov	r1, r3
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f7fe ffb9 	bl	800dd7c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f000 fa12 	bl	800f234 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ee10:	e042      	b.n	800ee98 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ee12:	4b24      	ldr	r3, [pc, #144]	; (800eea4 <USBD_SetConfig+0x150>)
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	461a      	mov	r2, r3
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d02a      	beq.n	800ee76 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	4619      	mov	r1, r3
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f7fe ffa7 	bl	800dd7c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ee2e:	4b1d      	ldr	r3, [pc, #116]	; (800eea4 <USBD_SetConfig+0x150>)
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	461a      	mov	r2, r3
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ee38:	4b1a      	ldr	r3, [pc, #104]	; (800eea4 <USBD_SetConfig+0x150>)
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f7fe ff80 	bl	800dd44 <USBD_SetClassConfig>
 800ee44:	4603      	mov	r3, r0
 800ee46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ee48:	7bfb      	ldrb	r3, [r7, #15]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00f      	beq.n	800ee6e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ee4e:	6839      	ldr	r1, [r7, #0]
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f000 f918 	bl	800f086 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7fe ff8c 	bl	800dd7c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2202      	movs	r2, #2
 800ee68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ee6c:	e014      	b.n	800ee98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 f9e0 	bl	800f234 <USBD_CtlSendStatus>
      break;
 800ee74:	e010      	b.n	800ee98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f000 f9dc 	bl	800f234 <USBD_CtlSendStatus>
      break;
 800ee7c:	e00c      	b.n	800ee98 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ee7e:	6839      	ldr	r1, [r7, #0]
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f000 f900 	bl	800f086 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee86:	4b07      	ldr	r3, [pc, #28]	; (800eea4 <USBD_SetConfig+0x150>)
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f7fe ff75 	bl	800dd7c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ee92:	2303      	movs	r3, #3
 800ee94:	73fb      	strb	r3, [r7, #15]
      break;
 800ee96:	bf00      	nop
  }

  return ret;
 800ee98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3710      	adds	r7, #16
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	24000643 	.word	0x24000643

0800eea8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	88db      	ldrh	r3, [r3, #6]
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d004      	beq.n	800eec4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800eeba:	6839      	ldr	r1, [r7, #0]
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 f8e2 	bl	800f086 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800eec2:	e023      	b.n	800ef0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	2b02      	cmp	r3, #2
 800eece:	dc02      	bgt.n	800eed6 <USBD_GetConfig+0x2e>
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	dc03      	bgt.n	800eedc <USBD_GetConfig+0x34>
 800eed4:	e015      	b.n	800ef02 <USBD_GetConfig+0x5a>
 800eed6:	2b03      	cmp	r3, #3
 800eed8:	d00b      	beq.n	800eef2 <USBD_GetConfig+0x4a>
 800eeda:	e012      	b.n	800ef02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2200      	movs	r2, #0
 800eee0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	3308      	adds	r3, #8
 800eee6:	2201      	movs	r2, #1
 800eee8:	4619      	mov	r1, r3
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f000 f948 	bl	800f180 <USBD_CtlSendData>
        break;
 800eef0:	e00c      	b.n	800ef0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	3304      	adds	r3, #4
 800eef6:	2201      	movs	r2, #1
 800eef8:	4619      	mov	r1, r3
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f000 f940 	bl	800f180 <USBD_CtlSendData>
        break;
 800ef00:	e004      	b.n	800ef0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ef02:	6839      	ldr	r1, [r7, #0]
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f000 f8be 	bl	800f086 <USBD_CtlError>
        break;
 800ef0a:	bf00      	nop
}
 800ef0c:	bf00      	nop
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	3b01      	subs	r3, #1
 800ef28:	2b02      	cmp	r3, #2
 800ef2a:	d81e      	bhi.n	800ef6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	88db      	ldrh	r3, [r3, #6]
 800ef30:	2b02      	cmp	r3, #2
 800ef32:	d004      	beq.n	800ef3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ef34:	6839      	ldr	r1, [r7, #0]
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 f8a5 	bl	800f086 <USBD_CtlError>
        break;
 800ef3c:	e01a      	b.n	800ef74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2201      	movs	r2, #1
 800ef42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d005      	beq.n	800ef5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	f043 0202 	orr.w	r2, r3, #2
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	330c      	adds	r3, #12
 800ef5e:	2202      	movs	r2, #2
 800ef60:	4619      	mov	r1, r3
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f000 f90c 	bl	800f180 <USBD_CtlSendData>
      break;
 800ef68:	e004      	b.n	800ef74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ef6a:	6839      	ldr	r1, [r7, #0]
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f000 f88a 	bl	800f086 <USBD_CtlError>
      break;
 800ef72:	bf00      	nop
  }
}
 800ef74:	bf00      	nop
 800ef76:	3708      	adds	r7, #8
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}

0800ef7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b082      	sub	sp, #8
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	885b      	ldrh	r3, [r3, #2]
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	d107      	bne.n	800ef9e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2201      	movs	r2, #1
 800ef92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f000 f94c 	bl	800f234 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ef9c:	e013      	b.n	800efc6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	885b      	ldrh	r3, [r3, #2]
 800efa2:	2b02      	cmp	r3, #2
 800efa4:	d10b      	bne.n	800efbe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	889b      	ldrh	r3, [r3, #4]
 800efaa:	0a1b      	lsrs	r3, r3, #8
 800efac:	b29b      	uxth	r3, r3
 800efae:	b2da      	uxtb	r2, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f000 f93c 	bl	800f234 <USBD_CtlSendStatus>
}
 800efbc:	e003      	b.n	800efc6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800efbe:	6839      	ldr	r1, [r7, #0]
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f000 f860 	bl	800f086 <USBD_CtlError>
}
 800efc6:	bf00      	nop
 800efc8:	3708      	adds	r7, #8
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efce:	b580      	push	{r7, lr}
 800efd0:	b082      	sub	sp, #8
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
 800efd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	3b01      	subs	r3, #1
 800efe2:	2b02      	cmp	r3, #2
 800efe4:	d80b      	bhi.n	800effe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	885b      	ldrh	r3, [r3, #2]
 800efea:	2b01      	cmp	r3, #1
 800efec:	d10c      	bne.n	800f008 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2200      	movs	r2, #0
 800eff2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f000 f91c 	bl	800f234 <USBD_CtlSendStatus>
      }
      break;
 800effc:	e004      	b.n	800f008 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800effe:	6839      	ldr	r1, [r7, #0]
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f000 f840 	bl	800f086 <USBD_CtlError>
      break;
 800f006:	e000      	b.n	800f00a <USBD_ClrFeature+0x3c>
      break;
 800f008:	bf00      	nop
  }
}
 800f00a:	bf00      	nop
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f012:	b580      	push	{r7, lr}
 800f014:	b084      	sub	sp, #16
 800f016:	af00      	add	r7, sp, #0
 800f018:	6078      	str	r0, [r7, #4]
 800f01a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	781a      	ldrb	r2, [r3, #0]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	3301      	adds	r3, #1
 800f02c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	781a      	ldrb	r2, [r3, #0]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	3301      	adds	r3, #1
 800f03a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f03c:	68f8      	ldr	r0, [r7, #12]
 800f03e:	f7ff f9f0 	bl	800e422 <SWAPBYTE>
 800f042:	4603      	mov	r3, r0
 800f044:	461a      	mov	r2, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	3301      	adds	r3, #1
 800f04e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	3301      	adds	r3, #1
 800f054:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f7ff f9e3 	bl	800e422 <SWAPBYTE>
 800f05c:	4603      	mov	r3, r0
 800f05e:	461a      	mov	r2, r3
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	3301      	adds	r3, #1
 800f068:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	3301      	adds	r3, #1
 800f06e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f070:	68f8      	ldr	r0, [r7, #12]
 800f072:	f7ff f9d6 	bl	800e422 <SWAPBYTE>
 800f076:	4603      	mov	r3, r0
 800f078:	461a      	mov	r2, r3
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	80da      	strh	r2, [r3, #6]
}
 800f07e:	bf00      	nop
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}

0800f086 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b082      	sub	sp, #8
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
 800f08e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f090:	2180      	movs	r1, #128	; 0x80
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 fc62 	bl	800f95c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f098:	2100      	movs	r1, #0
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f000 fc5e 	bl	800f95c <USBD_LL_StallEP>
}
 800f0a0:	bf00      	nop
 800f0a2:	3708      	adds	r7, #8
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b086      	sub	sp, #24
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	60f8      	str	r0, [r7, #12]
 800f0b0:	60b9      	str	r1, [r7, #8]
 800f0b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d042      	beq.n	800f144 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f0c2:	6938      	ldr	r0, [r7, #16]
 800f0c4:	f000 f842 	bl	800f14c <USBD_GetLen>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	005b      	lsls	r3, r3, #1
 800f0ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0d2:	d808      	bhi.n	800f0e6 <USBD_GetString+0x3e>
 800f0d4:	6938      	ldr	r0, [r7, #16]
 800f0d6:	f000 f839 	bl	800f14c <USBD_GetLen>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	3301      	adds	r3, #1
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	005b      	lsls	r3, r3, #1
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	e001      	b.n	800f0ea <USBD_GetString+0x42>
 800f0e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f0ee:	7dfb      	ldrb	r3, [r7, #23]
 800f0f0:	68ba      	ldr	r2, [r7, #8]
 800f0f2:	4413      	add	r3, r2
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	7812      	ldrb	r2, [r2, #0]
 800f0f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800f0fa:	7dfb      	ldrb	r3, [r7, #23]
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f100:	7dfb      	ldrb	r3, [r7, #23]
 800f102:	68ba      	ldr	r2, [r7, #8]
 800f104:	4413      	add	r3, r2
 800f106:	2203      	movs	r2, #3
 800f108:	701a      	strb	r2, [r3, #0]
  idx++;
 800f10a:	7dfb      	ldrb	r3, [r7, #23]
 800f10c:	3301      	adds	r3, #1
 800f10e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f110:	e013      	b.n	800f13a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f112:	7dfb      	ldrb	r3, [r7, #23]
 800f114:	68ba      	ldr	r2, [r7, #8]
 800f116:	4413      	add	r3, r2
 800f118:	693a      	ldr	r2, [r7, #16]
 800f11a:	7812      	ldrb	r2, [r2, #0]
 800f11c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	3301      	adds	r3, #1
 800f122:	613b      	str	r3, [r7, #16]
    idx++;
 800f124:	7dfb      	ldrb	r3, [r7, #23]
 800f126:	3301      	adds	r3, #1
 800f128:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f12a:	7dfb      	ldrb	r3, [r7, #23]
 800f12c:	68ba      	ldr	r2, [r7, #8]
 800f12e:	4413      	add	r3, r2
 800f130:	2200      	movs	r2, #0
 800f132:	701a      	strb	r2, [r3, #0]
    idx++;
 800f134:	7dfb      	ldrb	r3, [r7, #23]
 800f136:	3301      	adds	r3, #1
 800f138:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d1e7      	bne.n	800f112 <USBD_GetString+0x6a>
 800f142:	e000      	b.n	800f146 <USBD_GetString+0x9e>
    return;
 800f144:	bf00      	nop
  }
}
 800f146:	3718      	adds	r7, #24
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b085      	sub	sp, #20
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f154:	2300      	movs	r3, #0
 800f156:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f15c:	e005      	b.n	800f16a <USBD_GetLen+0x1e>
  {
    len++;
 800f15e:	7bfb      	ldrb	r3, [r7, #15]
 800f160:	3301      	adds	r3, #1
 800f162:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	3301      	adds	r3, #1
 800f168:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d1f5      	bne.n	800f15e <USBD_GetLen+0x12>
  }

  return len;
 800f172:	7bfb      	ldrb	r3, [r7, #15]
}
 800f174:	4618      	mov	r0, r3
 800f176:	3714      	adds	r7, #20
 800f178:	46bd      	mov	sp, r7
 800f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17e:	4770      	bx	lr

0800f180 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	60b9      	str	r1, [r7, #8]
 800f18a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	2202      	movs	r2, #2
 800f190:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	687a      	ldr	r2, [r7, #4]
 800f198:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	68ba      	ldr	r2, [r7, #8]
 800f1a4:	2100      	movs	r1, #0
 800f1a6:	68f8      	ldr	r0, [r7, #12]
 800f1a8:	f000 fc61 	bl	800fa6e <USBD_LL_Transmit>

  return USBD_OK;
 800f1ac:	2300      	movs	r3, #0
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3710      	adds	r7, #16
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}

0800f1b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f1b6:	b580      	push	{r7, lr}
 800f1b8:	b084      	sub	sp, #16
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	60f8      	str	r0, [r7, #12]
 800f1be:	60b9      	str	r1, [r7, #8]
 800f1c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	68ba      	ldr	r2, [r7, #8]
 800f1c6:	2100      	movs	r1, #0
 800f1c8:	68f8      	ldr	r0, [r7, #12]
 800f1ca:	f000 fc50 	bl	800fa6e <USBD_LL_Transmit>

  return USBD_OK;
 800f1ce:	2300      	movs	r3, #0
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3710      	adds	r7, #16
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}

0800f1d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2203      	movs	r2, #3
 800f1e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	687a      	ldr	r2, [r7, #4]
 800f1f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	687a      	ldr	r2, [r7, #4]
 800f1f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	68ba      	ldr	r2, [r7, #8]
 800f200:	2100      	movs	r1, #0
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	f000 fc54 	bl	800fab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f208:	2300      	movs	r3, #0
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3710      	adds	r7, #16
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b084      	sub	sp, #16
 800f216:	af00      	add	r7, sp, #0
 800f218:	60f8      	str	r0, [r7, #12]
 800f21a:	60b9      	str	r1, [r7, #8]
 800f21c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	68ba      	ldr	r2, [r7, #8]
 800f222:	2100      	movs	r1, #0
 800f224:	68f8      	ldr	r0, [r7, #12]
 800f226:	f000 fc43 	bl	800fab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f22a:	2300      	movs	r3, #0
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	3710      	adds	r7, #16
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2204      	movs	r2, #4
 800f240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f244:	2300      	movs	r3, #0
 800f246:	2200      	movs	r2, #0
 800f248:	2100      	movs	r1, #0
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 fc0f 	bl	800fa6e <USBD_LL_Transmit>

  return USBD_OK;
 800f250:	2300      	movs	r3, #0
}
 800f252:	4618      	mov	r0, r3
 800f254:	3708      	adds	r7, #8
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}

0800f25a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b082      	sub	sp, #8
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2205      	movs	r2, #5
 800f266:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f26a:	2300      	movs	r3, #0
 800f26c:	2200      	movs	r2, #0
 800f26e:	2100      	movs	r1, #0
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 fc1d 	bl	800fab0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f276:	2300      	movs	r3, #0
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800f284:	2201      	movs	r2, #1
 800f286:	4913      	ldr	r1, [pc, #76]	; (800f2d4 <MX_USB_DEVICE_Init+0x54>)
 800f288:	4813      	ldr	r0, [pc, #76]	; (800f2d8 <MX_USB_DEVICE_Init+0x58>)
 800f28a:	f7fe fca7 	bl	800dbdc <USBD_Init>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d001      	beq.n	800f298 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f294:	f7f1 ffd3 	bl	800123e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_DFU) != USBD_OK)
 800f298:	4910      	ldr	r1, [pc, #64]	; (800f2dc <MX_USB_DEVICE_Init+0x5c>)
 800f29a:	480f      	ldr	r0, [pc, #60]	; (800f2d8 <MX_USB_DEVICE_Init+0x58>)
 800f29c:	f7fe fcdc 	bl	800dc58 <USBD_RegisterClass>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d001      	beq.n	800f2aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f2a6:	f7f1 ffca 	bl	800123e <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceHS, &USBD_DFU_fops_HS) != USBD_OK)
 800f2aa:	490d      	ldr	r1, [pc, #52]	; (800f2e0 <MX_USB_DEVICE_Init+0x60>)
 800f2ac:	480a      	ldr	r0, [pc, #40]	; (800f2d8 <MX_USB_DEVICE_Init+0x58>)
 800f2ae:	f7fe f863 	bl	800d378 <USBD_DFU_RegisterMedia>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d001      	beq.n	800f2bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f2b8:	f7f1 ffc1 	bl	800123e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800f2bc:	4806      	ldr	r0, [pc, #24]	; (800f2d8 <MX_USB_DEVICE_Init+0x58>)
 800f2be:	f7fe fd0f 	bl	800dce0 <USBD_Start>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d001      	beq.n	800f2cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f2c8:	f7f1 ffb9 	bl	800123e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f2cc:	f7f7 fa78 	bl	80067c0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f2d0:	bf00      	nop
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	24000074 	.word	0x24000074
 800f2d8:	24000644 	.word	0x24000644
 800f2dc:	24000010 	.word	0x24000010
 800f2e0:	240000c8 	.word	0x240000c8

0800f2e4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	6039      	str	r1, [r7, #0]
 800f2ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	2212      	movs	r2, #18
 800f2f4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800f2f6:	4b03      	ldr	r3, [pc, #12]	; (800f304 <USBD_HS_DeviceDescriptor+0x20>)
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	370c      	adds	r7, #12
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr
 800f304:	24000094 	.word	0x24000094

0800f308 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	4603      	mov	r3, r0
 800f310:	6039      	str	r1, [r7, #0]
 800f312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	2204      	movs	r2, #4
 800f318:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f31a:	4b03      	ldr	r3, [pc, #12]	; (800f328 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr
 800f328:	240000a8 	.word	0x240000a8

0800f32c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	4603      	mov	r3, r0
 800f334:	6039      	str	r1, [r7, #0]
 800f336:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f338:	79fb      	ldrb	r3, [r7, #7]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d105      	bne.n	800f34a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	4907      	ldr	r1, [pc, #28]	; (800f360 <USBD_HS_ProductStrDescriptor+0x34>)
 800f342:	4808      	ldr	r0, [pc, #32]	; (800f364 <USBD_HS_ProductStrDescriptor+0x38>)
 800f344:	f7ff feb0 	bl	800f0a8 <USBD_GetString>
 800f348:	e004      	b.n	800f354 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f34a:	683a      	ldr	r2, [r7, #0]
 800f34c:	4904      	ldr	r1, [pc, #16]	; (800f360 <USBD_HS_ProductStrDescriptor+0x34>)
 800f34e:	4805      	ldr	r0, [pc, #20]	; (800f364 <USBD_HS_ProductStrDescriptor+0x38>)
 800f350:	f7ff feaa 	bl	800f0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f354:	4b02      	ldr	r3, [pc, #8]	; (800f360 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800f356:	4618      	mov	r0, r3
 800f358:	3708      	adds	r7, #8
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	24000920 	.word	0x24000920
 800f364:	08010ab4 	.word	0x08010ab4

0800f368 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	4603      	mov	r3, r0
 800f370:	6039      	str	r1, [r7, #0]
 800f372:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f374:	683a      	ldr	r2, [r7, #0]
 800f376:	4904      	ldr	r1, [pc, #16]	; (800f388 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800f378:	4804      	ldr	r0, [pc, #16]	; (800f38c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800f37a:	f7ff fe95 	bl	800f0a8 <USBD_GetString>
  return USBD_StrDesc;
 800f37e:	4b02      	ldr	r3, [pc, #8]	; (800f388 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800f380:	4618      	mov	r0, r3
 800f382:	3708      	adds	r7, #8
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	24000920 	.word	0x24000920
 800f38c:	08010ad4 	.word	0x08010ad4

0800f390 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	4603      	mov	r3, r0
 800f398:	6039      	str	r1, [r7, #0]
 800f39a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	221a      	movs	r2, #26
 800f3a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f3a2:	f000 f843 	bl	800f42c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f3a6:	4b02      	ldr	r3, [pc, #8]	; (800f3b0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3708      	adds	r7, #8
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	240000ac 	.word	0x240000ac

0800f3b4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	6039      	str	r1, [r7, #0]
 800f3be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f3c0:	79fb      	ldrb	r3, [r7, #7]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d105      	bne.n	800f3d2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f3c6:	683a      	ldr	r2, [r7, #0]
 800f3c8:	4907      	ldr	r1, [pc, #28]	; (800f3e8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f3ca:	4808      	ldr	r0, [pc, #32]	; (800f3ec <USBD_HS_ConfigStrDescriptor+0x38>)
 800f3cc:	f7ff fe6c 	bl	800f0a8 <USBD_GetString>
 800f3d0:	e004      	b.n	800f3dc <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f3d2:	683a      	ldr	r2, [r7, #0]
 800f3d4:	4904      	ldr	r1, [pc, #16]	; (800f3e8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f3d6:	4805      	ldr	r0, [pc, #20]	; (800f3ec <USBD_HS_ConfigStrDescriptor+0x38>)
 800f3d8:	f7ff fe66 	bl	800f0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f3dc:	4b02      	ldr	r3, [pc, #8]	; (800f3e8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3708      	adds	r7, #8
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	24000920 	.word	0x24000920
 800f3ec:	08010ae8 	.word	0x08010ae8

0800f3f0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	6039      	str	r1, [r7, #0]
 800f3fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f3fc:	79fb      	ldrb	r3, [r7, #7]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d105      	bne.n	800f40e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f402:	683a      	ldr	r2, [r7, #0]
 800f404:	4907      	ldr	r1, [pc, #28]	; (800f424 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f406:	4808      	ldr	r0, [pc, #32]	; (800f428 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f408:	f7ff fe4e 	bl	800f0a8 <USBD_GetString>
 800f40c:	e004      	b.n	800f418 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f40e:	683a      	ldr	r2, [r7, #0]
 800f410:	4904      	ldr	r1, [pc, #16]	; (800f424 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f412:	4805      	ldr	r0, [pc, #20]	; (800f428 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f414:	f7ff fe48 	bl	800f0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f418:	4b02      	ldr	r3, [pc, #8]	; (800f424 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3708      	adds	r7, #8
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	24000920 	.word	0x24000920
 800f428:	08010af4 	.word	0x08010af4

0800f42c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f432:	4b0f      	ldr	r3, [pc, #60]	; (800f470 <Get_SerialNum+0x44>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f438:	4b0e      	ldr	r3, [pc, #56]	; (800f474 <Get_SerialNum+0x48>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f43e:	4b0e      	ldr	r3, [pc, #56]	; (800f478 <Get_SerialNum+0x4c>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f444:	68fa      	ldr	r2, [r7, #12]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4413      	add	r3, r2
 800f44a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d009      	beq.n	800f466 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f452:	2208      	movs	r2, #8
 800f454:	4909      	ldr	r1, [pc, #36]	; (800f47c <Get_SerialNum+0x50>)
 800f456:	68f8      	ldr	r0, [r7, #12]
 800f458:	f000 f814 	bl	800f484 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f45c:	2204      	movs	r2, #4
 800f45e:	4908      	ldr	r1, [pc, #32]	; (800f480 <Get_SerialNum+0x54>)
 800f460:	68b8      	ldr	r0, [r7, #8]
 800f462:	f000 f80f 	bl	800f484 <IntToUnicode>
  }
}
 800f466:	bf00      	nop
 800f468:	3710      	adds	r7, #16
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	1ff1e800 	.word	0x1ff1e800
 800f474:	1ff1e804 	.word	0x1ff1e804
 800f478:	1ff1e808 	.word	0x1ff1e808
 800f47c:	240000ae 	.word	0x240000ae
 800f480:	240000be 	.word	0x240000be

0800f484 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f484:	b480      	push	{r7}
 800f486:	b087      	sub	sp, #28
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	4613      	mov	r3, r2
 800f490:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f492:	2300      	movs	r3, #0
 800f494:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f496:	2300      	movs	r3, #0
 800f498:	75fb      	strb	r3, [r7, #23]
 800f49a:	e027      	b.n	800f4ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	0f1b      	lsrs	r3, r3, #28
 800f4a0:	2b09      	cmp	r3, #9
 800f4a2:	d80b      	bhi.n	800f4bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	0f1b      	lsrs	r3, r3, #28
 800f4a8:	b2da      	uxtb	r2, r3
 800f4aa:	7dfb      	ldrb	r3, [r7, #23]
 800f4ac:	005b      	lsls	r3, r3, #1
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	440b      	add	r3, r1
 800f4b4:	3230      	adds	r2, #48	; 0x30
 800f4b6:	b2d2      	uxtb	r2, r2
 800f4b8:	701a      	strb	r2, [r3, #0]
 800f4ba:	e00a      	b.n	800f4d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	0f1b      	lsrs	r3, r3, #28
 800f4c0:	b2da      	uxtb	r2, r3
 800f4c2:	7dfb      	ldrb	r3, [r7, #23]
 800f4c4:	005b      	lsls	r3, r3, #1
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	440b      	add	r3, r1
 800f4cc:	3237      	adds	r2, #55	; 0x37
 800f4ce:	b2d2      	uxtb	r2, r2
 800f4d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	011b      	lsls	r3, r3, #4
 800f4d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f4d8:	7dfb      	ldrb	r3, [r7, #23]
 800f4da:	005b      	lsls	r3, r3, #1
 800f4dc:	3301      	adds	r3, #1
 800f4de:	68ba      	ldr	r2, [r7, #8]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f4e6:	7dfb      	ldrb	r3, [r7, #23]
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	75fb      	strb	r3, [r7, #23]
 800f4ec:	7dfa      	ldrb	r2, [r7, #23]
 800f4ee:	79fb      	ldrb	r3, [r7, #7]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d3d3      	bcc.n	800f49c <IntToUnicode+0x18>
  }
}
 800f4f4:	bf00      	nop
 800f4f6:	bf00      	nop
 800f4f8:	371c      	adds	r7, #28
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr

0800f502 <MEM_If_Init_HS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_HS(void)
{
 800f502:	b480      	push	{r7}
 800f504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800f506:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f508:	4618      	mov	r0, r3
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr

0800f512 <MEM_If_DeInit_HS>:
/**
  * @brief  De-Initializes Memory.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_DeInit_HS(void)
{
 800f512:	b480      	push	{r7}
 800f514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800f516:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800f518:	4618      	mov	r0, r3
 800f51a:	46bd      	mov	sp, r7
 800f51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f520:	4770      	bx	lr

0800f522 <MEM_If_Erase_HS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_HS(uint32_t Add)
{
 800f522:	b480      	push	{r7}
 800f524:	b083      	sub	sp, #12
 800f526:	af00      	add	r7, sp, #0
 800f528:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 8 */
  UNUSED(Add);

  return (USBD_OK);
 800f52a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	370c      	adds	r7, #12
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr

0800f538 <MEM_If_Write_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800f538:	b480      	push	{r7}
 800f53a:	b085      	sub	sp, #20
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	60f8      	str	r0, [r7, #12]
 800f540:	60b9      	str	r1, [r7, #8]
 800f542:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 9 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (USBD_OK);
 800f544:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800f546:	4618      	mov	r0, r3
 800f548:	3714      	adds	r7, #20
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr

0800f552 <MEM_If_Read_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800f552:	b480      	push	{r7}
 800f554:	b085      	sub	sp, #20
 800f556:	af00      	add	r7, sp, #0
 800f558:	60f8      	str	r0, [r7, #12]
 800f55a:	60b9      	str	r1, [r7, #8]
 800f55c:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 10 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (uint8_t*)(USBD_OK);
 800f55e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800f560:	4618      	mov	r0, r3
 800f562:	3714      	adds	r7, #20
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr

0800f56c <MEM_If_GetStatus_HS>:
  * @param  Cmd: Number of data to be read (in bytes).
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval 0 if operation is successful
  */
uint16_t MEM_If_GetStatus_HS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b085      	sub	sp, #20
 800f570:	af00      	add	r7, sp, #0
 800f572:	60f8      	str	r0, [r7, #12]
 800f574:	460b      	mov	r3, r1
 800f576:	607a      	str	r2, [r7, #4]
 800f578:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 11 */
  UNUSED(Add);
  UNUSED(buffer);

  switch(Cmd)
 800f57a:	7afb      	ldrb	r3, [r7, #11]
 800f57c:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800f57e:	bf00      	nop
  }
  return  (USBD_OK);
 800f580:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800f582:	4618      	mov	r0, r3
 800f584:	3714      	adds	r7, #20
 800f586:	46bd      	mov	sp, r7
 800f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58c:	4770      	bx	lr
	...

0800f590 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b0b2      	sub	sp, #200	; 0xc8
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f598:	f107 0310 	add.w	r3, r7, #16
 800f59c:	22b8      	movs	r2, #184	; 0xb8
 800f59e:	2100      	movs	r1, #0
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f000 fc0a 	bl	800fdba <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4a1a      	ldr	r2, [pc, #104]	; (800f614 <HAL_PCD_MspInit+0x84>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d12c      	bne.n	800f60a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f5b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800f5b4:	f04f 0300 	mov.w	r3, #0
 800f5b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f5bc:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800f5c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f5c4:	f107 0310 	add.w	r3, r7, #16
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7f8 f859 	bl	8007680 <HAL_RCCEx_PeriphCLKConfig>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d001      	beq.n	800f5d8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 800f5d4:	f7f1 fe33 	bl	800123e <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f5d8:	f7f7 f8f2 	bl	80067c0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800f5dc:	4b0e      	ldr	r3, [pc, #56]	; (800f618 <HAL_PCD_MspInit+0x88>)
 800f5de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f5e2:	4a0d      	ldr	r2, [pc, #52]	; (800f618 <HAL_PCD_MspInit+0x88>)
 800f5e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f5e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f5ec:	4b0a      	ldr	r3, [pc, #40]	; (800f618 <HAL_PCD_MspInit+0x88>)
 800f5ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f5f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f5f6:	60fb      	str	r3, [r7, #12]
 800f5f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	2100      	movs	r1, #0
 800f5fe:	204d      	movs	r0, #77	; 0x4d
 800f600:	f7f2 fcaf 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800f604:	204d      	movs	r0, #77	; 0x4d
 800f606:	f7f2 fcc6 	bl	8001f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800f60a:	bf00      	nop
 800f60c:	37c8      	adds	r7, #200	; 0xc8
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	40040000 	.word	0x40040000
 800f618:	58024400 	.word	0x58024400

0800f61c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800f630:	4619      	mov	r1, r3
 800f632:	4610      	mov	r0, r2
 800f634:	f7fe fbbc 	bl	800ddb0 <USBD_LL_SetupStage>
}
 800f638:	bf00      	nop
 800f63a:	3708      	adds	r7, #8
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	460b      	mov	r3, r1
 800f64a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f652:	78fa      	ldrb	r2, [r7, #3]
 800f654:	6879      	ldr	r1, [r7, #4]
 800f656:	4613      	mov	r3, r2
 800f658:	00db      	lsls	r3, r3, #3
 800f65a:	4413      	add	r3, r2
 800f65c:	009b      	lsls	r3, r3, #2
 800f65e:	440b      	add	r3, r1
 800f660:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f664:	681a      	ldr	r2, [r3, #0]
 800f666:	78fb      	ldrb	r3, [r7, #3]
 800f668:	4619      	mov	r1, r3
 800f66a:	f7fe fbf6 	bl	800de5a <USBD_LL_DataOutStage>
}
 800f66e:	bf00      	nop
 800f670:	3708      	adds	r7, #8
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}

0800f676 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f676:	b580      	push	{r7, lr}
 800f678:	b082      	sub	sp, #8
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	6078      	str	r0, [r7, #4]
 800f67e:	460b      	mov	r3, r1
 800f680:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f688:	78fa      	ldrb	r2, [r7, #3]
 800f68a:	6879      	ldr	r1, [r7, #4]
 800f68c:	4613      	mov	r3, r2
 800f68e:	00db      	lsls	r3, r3, #3
 800f690:	4413      	add	r3, r2
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	440b      	add	r3, r1
 800f696:	3320      	adds	r3, #32
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	78fb      	ldrb	r3, [r7, #3]
 800f69c:	4619      	mov	r1, r3
 800f69e:	f7fe fc8f 	bl	800dfc0 <USBD_LL_DataInStage>
}
 800f6a2:	bf00      	nop
 800f6a4:	3708      	adds	r7, #8
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}

0800f6aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6aa:	b580      	push	{r7, lr}
 800f6ac:	b082      	sub	sp, #8
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7fe fdc9 	bl	800e250 <USBD_LL_SOF>
}
 800f6be:	bf00      	nop
 800f6c0:	3708      	adds	r7, #8
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}

0800f6c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6c6:	b580      	push	{r7, lr}
 800f6c8:	b084      	sub	sp, #16
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	79db      	ldrb	r3, [r3, #7]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d102      	bne.n	800f6e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	73fb      	strb	r3, [r7, #15]
 800f6de:	e008      	b.n	800f6f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	79db      	ldrb	r3, [r3, #7]
 800f6e4:	2b02      	cmp	r3, #2
 800f6e6:	d102      	bne.n	800f6ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	73fb      	strb	r3, [r7, #15]
 800f6ec:	e001      	b.n	800f6f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f6ee:	f7f1 fda6 	bl	800123e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f6f8:	7bfa      	ldrb	r2, [r7, #15]
 800f6fa:	4611      	mov	r1, r2
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fe fd63 	bl	800e1c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f708:	4618      	mov	r0, r3
 800f70a:	f7fe fd0b 	bl	800e124 <USBD_LL_Reset>
}
 800f70e:	bf00      	nop
 800f710:	3710      	adds	r7, #16
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
	...

0800f718 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f726:	4618      	mov	r0, r3
 800f728:	f7fe fd5e 	bl	800e1e8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	687a      	ldr	r2, [r7, #4]
 800f738:	6812      	ldr	r2, [r2, #0]
 800f73a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f73e:	f043 0301 	orr.w	r3, r3, #1
 800f742:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	7adb      	ldrb	r3, [r3, #11]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d005      	beq.n	800f758 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f74c:	4b04      	ldr	r3, [pc, #16]	; (800f760 <HAL_PCD_SuspendCallback+0x48>)
 800f74e:	691b      	ldr	r3, [r3, #16]
 800f750:	4a03      	ldr	r2, [pc, #12]	; (800f760 <HAL_PCD_SuspendCallback+0x48>)
 800f752:	f043 0306 	orr.w	r3, r3, #6
 800f756:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f758:	bf00      	nop
 800f75a:	3708      	adds	r7, #8
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	e000ed00 	.word	0xe000ed00

0800f764 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f772:	4618      	mov	r0, r3
 800f774:	f7fe fd54 	bl	800e220 <USBD_LL_Resume>
}
 800f778:	bf00      	nop
 800f77a:	3708      	adds	r7, #8
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	460b      	mov	r3, r1
 800f78a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f792:	78fa      	ldrb	r2, [r7, #3]
 800f794:	4611      	mov	r1, r2
 800f796:	4618      	mov	r0, r3
 800f798:	f7fe fdac 	bl	800e2f4 <USBD_LL_IsoOUTIncomplete>
}
 800f79c:	bf00      	nop
 800f79e:	3708      	adds	r7, #8
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f7b6:	78fa      	ldrb	r2, [r7, #3]
 800f7b8:	4611      	mov	r1, r2
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7fe fd68 	bl	800e290 <USBD_LL_IsoINIncomplete>
}
 800f7c0:	bf00      	nop
 800f7c2:	3708      	adds	r7, #8
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b082      	sub	sp, #8
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fe fdbe 	bl	800e358 <USBD_LL_DevConnected>
}
 800f7dc:	bf00      	nop
 800f7de:	3708      	adds	r7, #8
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b082      	sub	sp, #8
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7fe fdbb 	bl	800e36e <USBD_LL_DevDisconnected>
}
 800f7f8:	bf00      	nop
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d140      	bne.n	800f892 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800f810:	4a22      	ldr	r2, [pc, #136]	; (800f89c <USBD_LL_Init+0x9c>)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	4a20      	ldr	r2, [pc, #128]	; (800f89c <USBD_LL_Init+0x9c>)
 800f81c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800f820:	4b1e      	ldr	r3, [pc, #120]	; (800f89c <USBD_LL_Init+0x9c>)
 800f822:	4a1f      	ldr	r2, [pc, #124]	; (800f8a0 <USBD_LL_Init+0xa0>)
 800f824:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800f826:	4b1d      	ldr	r3, [pc, #116]	; (800f89c <USBD_LL_Init+0x9c>)
 800f828:	2209      	movs	r2, #9
 800f82a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800f82c:	4b1b      	ldr	r3, [pc, #108]	; (800f89c <USBD_LL_Init+0x9c>)
 800f82e:	2202      	movs	r2, #2
 800f830:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800f832:	4b1a      	ldr	r3, [pc, #104]	; (800f89c <USBD_LL_Init+0x9c>)
 800f834:	2200      	movs	r2, #0
 800f836:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800f838:	4b18      	ldr	r3, [pc, #96]	; (800f89c <USBD_LL_Init+0x9c>)
 800f83a:	2202      	movs	r2, #2
 800f83c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800f83e:	4b17      	ldr	r3, [pc, #92]	; (800f89c <USBD_LL_Init+0x9c>)
 800f840:	2200      	movs	r2, #0
 800f842:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800f844:	4b15      	ldr	r3, [pc, #84]	; (800f89c <USBD_LL_Init+0x9c>)
 800f846:	2200      	movs	r2, #0
 800f848:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800f84a:	4b14      	ldr	r3, [pc, #80]	; (800f89c <USBD_LL_Init+0x9c>)
 800f84c:	2200      	movs	r2, #0
 800f84e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800f850:	4b12      	ldr	r3, [pc, #72]	; (800f89c <USBD_LL_Init+0x9c>)
 800f852:	2200      	movs	r2, #0
 800f854:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800f856:	4b11      	ldr	r3, [pc, #68]	; (800f89c <USBD_LL_Init+0x9c>)
 800f858:	2200      	movs	r2, #0
 800f85a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800f85c:	4b0f      	ldr	r3, [pc, #60]	; (800f89c <USBD_LL_Init+0x9c>)
 800f85e:	2200      	movs	r2, #0
 800f860:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800f862:	480e      	ldr	r0, [pc, #56]	; (800f89c <USBD_LL_Init+0x9c>)
 800f864:	f7f5 fcfa 	bl	800525c <HAL_PCD_Init>
 800f868:	4603      	mov	r3, r0
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d001      	beq.n	800f872 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f86e:	f7f1 fce6 	bl	800123e <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800f872:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f876:	4809      	ldr	r0, [pc, #36]	; (800f89c <USBD_LL_Init+0x9c>)
 800f878:	f7f6 ff27 	bl	80066ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800f87c:	2280      	movs	r2, #128	; 0x80
 800f87e:	2100      	movs	r1, #0
 800f880:	4806      	ldr	r0, [pc, #24]	; (800f89c <USBD_LL_Init+0x9c>)
 800f882:	f7f6 fedb 	bl	800663c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800f886:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800f88a:	2101      	movs	r1, #1
 800f88c:	4803      	ldr	r0, [pc, #12]	; (800f89c <USBD_LL_Init+0x9c>)
 800f88e:	f7f6 fed5 	bl	800663c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800f892:	2300      	movs	r3, #0
}
 800f894:	4618      	mov	r0, r3
 800f896:	3708      	adds	r7, #8
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	24000b20 	.word	0x24000b20
 800f8a0:	40040000 	.word	0x40040000

0800f8a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7f5 fdda 	bl	8005474 <HAL_PCD_Start>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8c4:	7bfb      	ldrb	r3, [r7, #15]
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f000 f92c 	bl	800fb24 <USBD_Get_USB_Status>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3710      	adds	r7, #16
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}

0800f8da <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800f8da:	b580      	push	{r7, lr}
 800f8dc:	b084      	sub	sp, #16
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7f5 fdf4 	bl	80054de <HAL_PCD_Stop>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8fa:	7bfb      	ldrb	r3, [r7, #15]
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f000 f911 	bl	800fb24 <USBD_Get_USB_Status>
 800f902:	4603      	mov	r3, r0
 800f904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f906:	7bbb      	ldrb	r3, [r7, #14]
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3710      	adds	r7, #16
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	4608      	mov	r0, r1
 800f91a:	4611      	mov	r1, r2
 800f91c:	461a      	mov	r2, r3
 800f91e:	4603      	mov	r3, r0
 800f920:	70fb      	strb	r3, [r7, #3]
 800f922:	460b      	mov	r3, r1
 800f924:	70bb      	strb	r3, [r7, #2]
 800f926:	4613      	mov	r3, r2
 800f928:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f92a:	2300      	movs	r3, #0
 800f92c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f92e:	2300      	movs	r3, #0
 800f930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f938:	78bb      	ldrb	r3, [r7, #2]
 800f93a:	883a      	ldrh	r2, [r7, #0]
 800f93c:	78f9      	ldrb	r1, [r7, #3]
 800f93e:	f7f6 fafb 	bl	8005f38 <HAL_PCD_EP_Open>
 800f942:	4603      	mov	r3, r0
 800f944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f946:	7bfb      	ldrb	r3, [r7, #15]
 800f948:	4618      	mov	r0, r3
 800f94a:	f000 f8eb 	bl	800fb24 <USBD_Get_USB_Status>
 800f94e:	4603      	mov	r3, r0
 800f950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f952:	7bbb      	ldrb	r3, [r7, #14]
}
 800f954:	4618      	mov	r0, r3
 800f956:	3710      	adds	r7, #16
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	460b      	mov	r3, r1
 800f966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f968:	2300      	movs	r3, #0
 800f96a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f96c:	2300      	movs	r3, #0
 800f96e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f976:	78fa      	ldrb	r2, [r7, #3]
 800f978:	4611      	mov	r1, r2
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7f6 fbb9 	bl	80060f2 <HAL_PCD_EP_SetStall>
 800f980:	4603      	mov	r3, r0
 800f982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f984:	7bfb      	ldrb	r3, [r7, #15]
 800f986:	4618      	mov	r0, r3
 800f988:	f000 f8cc 	bl	800fb24 <USBD_Get_USB_Status>
 800f98c:	4603      	mov	r3, r0
 800f98e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f990:	7bbb      	ldrb	r3, [r7, #14]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3710      	adds	r7, #16
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}

0800f99a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f99a:	b580      	push	{r7, lr}
 800f99c:	b084      	sub	sp, #16
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
 800f9a2:	460b      	mov	r3, r1
 800f9a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f9b4:	78fa      	ldrb	r2, [r7, #3]
 800f9b6:	4611      	mov	r1, r2
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7f6 fbfd 	bl	80061b8 <HAL_PCD_EP_ClrStall>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9c2:	7bfb      	ldrb	r3, [r7, #15]
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f000 f8ad 	bl	800fb24 <USBD_Get_USB_Status>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3710      	adds	r7, #16
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b085      	sub	sp, #20
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f9ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f9ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	da0b      	bge.n	800fa0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f9f4:	78fb      	ldrb	r3, [r7, #3]
 800f9f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f9fa:	68f9      	ldr	r1, [r7, #12]
 800f9fc:	4613      	mov	r3, r2
 800f9fe:	00db      	lsls	r3, r3, #3
 800fa00:	4413      	add	r3, r2
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	440b      	add	r3, r1
 800fa06:	3316      	adds	r3, #22
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	e00b      	b.n	800fa24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fa0c:	78fb      	ldrb	r3, [r7, #3]
 800fa0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa12:	68f9      	ldr	r1, [r7, #12]
 800fa14:	4613      	mov	r3, r2
 800fa16:	00db      	lsls	r3, r3, #3
 800fa18:	4413      	add	r3, r2
 800fa1a:	009b      	lsls	r3, r3, #2
 800fa1c:	440b      	add	r3, r1
 800fa1e:	f203 2356 	addw	r3, r3, #598	; 0x256
 800fa22:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3714      	adds	r7, #20
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	460b      	mov	r3, r1
 800fa3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa40:	2300      	movs	r3, #0
 800fa42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa4a:	78fa      	ldrb	r2, [r7, #3]
 800fa4c:	4611      	mov	r1, r2
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7f6 fa4e 	bl	8005ef0 <HAL_PCD_SetAddress>
 800fa54:	4603      	mov	r3, r0
 800fa56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa58:	7bfb      	ldrb	r3, [r7, #15]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f000 f862 	bl	800fb24 <USBD_Get_USB_Status>
 800fa60:	4603      	mov	r3, r0
 800fa62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa64:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}

0800fa6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fa6e:	b580      	push	{r7, lr}
 800fa70:	b086      	sub	sp, #24
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	60f8      	str	r0, [r7, #12]
 800fa76:	607a      	str	r2, [r7, #4]
 800fa78:	603b      	str	r3, [r7, #0]
 800fa7a:	460b      	mov	r3, r1
 800fa7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa82:	2300      	movs	r3, #0
 800fa84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fa8c:	7af9      	ldrb	r1, [r7, #11]
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	f7f6 faf4 	bl	800607e <HAL_PCD_EP_Transmit>
 800fa96:	4603      	mov	r3, r0
 800fa98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa9a:	7dfb      	ldrb	r3, [r7, #23]
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f000 f841 	bl	800fb24 <USBD_Get_USB_Status>
 800faa2:	4603      	mov	r3, r0
 800faa4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800faa6:	7dbb      	ldrb	r3, [r7, #22]
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3718      	adds	r7, #24
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b086      	sub	sp, #24
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	60f8      	str	r0, [r7, #12]
 800fab8:	607a      	str	r2, [r7, #4]
 800faba:	603b      	str	r3, [r7, #0]
 800fabc:	460b      	mov	r3, r1
 800fabe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fac0:	2300      	movs	r3, #0
 800fac2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fac4:	2300      	movs	r3, #0
 800fac6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800face:	7af9      	ldrb	r1, [r7, #11]
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	687a      	ldr	r2, [r7, #4]
 800fad4:	f7f6 fa98 	bl	8006008 <HAL_PCD_EP_Receive>
 800fad8:	4603      	mov	r3, r0
 800fada:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fadc:	7dfb      	ldrb	r3, [r7, #23]
 800fade:	4618      	mov	r0, r3
 800fae0:	f000 f820 	bl	800fb24 <USBD_Get_USB_Status>
 800fae4:	4603      	mov	r3, r0
 800fae6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fae8:	7dbb      	ldrb	r3, [r7, #22]
}
 800faea:	4618      	mov	r0, r3
 800faec:	3718      	adds	r7, #24
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
	...

0800faf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800faf4:	b480      	push	{r7}
 800faf6:	b083      	sub	sp, #12
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fafc:	4b03      	ldr	r3, [pc, #12]	; (800fb0c <USBD_static_malloc+0x18>)
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	370c      	adds	r7, #12
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr
 800fb0a:	bf00      	nop
 800fb0c:	24001004 	.word	0x24001004

0800fb10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fb10:	b480      	push	{r7}
 800fb12:	b083      	sub	sp, #12
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800fb18:	bf00      	nop
 800fb1a:	370c      	adds	r7, #12
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr

0800fb24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b085      	sub	sp, #20
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fb32:	79fb      	ldrb	r3, [r7, #7]
 800fb34:	2b03      	cmp	r3, #3
 800fb36:	d817      	bhi.n	800fb68 <USBD_Get_USB_Status+0x44>
 800fb38:	a201      	add	r2, pc, #4	; (adr r2, 800fb40 <USBD_Get_USB_Status+0x1c>)
 800fb3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb3e:	bf00      	nop
 800fb40:	0800fb51 	.word	0x0800fb51
 800fb44:	0800fb57 	.word	0x0800fb57
 800fb48:	0800fb5d 	.word	0x0800fb5d
 800fb4c:	0800fb63 	.word	0x0800fb63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fb50:	2300      	movs	r3, #0
 800fb52:	73fb      	strb	r3, [r7, #15]
    break;
 800fb54:	e00b      	b.n	800fb6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fb56:	2303      	movs	r3, #3
 800fb58:	73fb      	strb	r3, [r7, #15]
    break;
 800fb5a:	e008      	b.n	800fb6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	73fb      	strb	r3, [r7, #15]
    break;
 800fb60:	e005      	b.n	800fb6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fb62:	2303      	movs	r3, #3
 800fb64:	73fb      	strb	r3, [r7, #15]
    break;
 800fb66:	e002      	b.n	800fb6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fb68:	2303      	movs	r3, #3
 800fb6a:	73fb      	strb	r3, [r7, #15]
    break;
 800fb6c:	bf00      	nop
  }
  return usb_status;
 800fb6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3714      	adds	r7, #20
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <std>:
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	b510      	push	{r4, lr}
 800fb80:	4604      	mov	r4, r0
 800fb82:	e9c0 3300 	strd	r3, r3, [r0]
 800fb86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb8a:	6083      	str	r3, [r0, #8]
 800fb8c:	8181      	strh	r1, [r0, #12]
 800fb8e:	6643      	str	r3, [r0, #100]	; 0x64
 800fb90:	81c2      	strh	r2, [r0, #14]
 800fb92:	6183      	str	r3, [r0, #24]
 800fb94:	4619      	mov	r1, r3
 800fb96:	2208      	movs	r2, #8
 800fb98:	305c      	adds	r0, #92	; 0x5c
 800fb9a:	f000 f90e 	bl	800fdba <memset>
 800fb9e:	4b0d      	ldr	r3, [pc, #52]	; (800fbd4 <std+0x58>)
 800fba0:	6263      	str	r3, [r4, #36]	; 0x24
 800fba2:	4b0d      	ldr	r3, [pc, #52]	; (800fbd8 <std+0x5c>)
 800fba4:	62a3      	str	r3, [r4, #40]	; 0x28
 800fba6:	4b0d      	ldr	r3, [pc, #52]	; (800fbdc <std+0x60>)
 800fba8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fbaa:	4b0d      	ldr	r3, [pc, #52]	; (800fbe0 <std+0x64>)
 800fbac:	6323      	str	r3, [r4, #48]	; 0x30
 800fbae:	4b0d      	ldr	r3, [pc, #52]	; (800fbe4 <std+0x68>)
 800fbb0:	6224      	str	r4, [r4, #32]
 800fbb2:	429c      	cmp	r4, r3
 800fbb4:	d006      	beq.n	800fbc4 <std+0x48>
 800fbb6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800fbba:	4294      	cmp	r4, r2
 800fbbc:	d002      	beq.n	800fbc4 <std+0x48>
 800fbbe:	33d0      	adds	r3, #208	; 0xd0
 800fbc0:	429c      	cmp	r4, r3
 800fbc2:	d105      	bne.n	800fbd0 <std+0x54>
 800fbc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fbc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbcc:	f000 b96e 	b.w	800feac <__retarget_lock_init_recursive>
 800fbd0:	bd10      	pop	{r4, pc}
 800fbd2:	bf00      	nop
 800fbd4:	0800fd35 	.word	0x0800fd35
 800fbd8:	0800fd57 	.word	0x0800fd57
 800fbdc:	0800fd8f 	.word	0x0800fd8f
 800fbe0:	0800fdb3 	.word	0x0800fdb3
 800fbe4:	24001428 	.word	0x24001428

0800fbe8 <stdio_exit_handler>:
 800fbe8:	4a02      	ldr	r2, [pc, #8]	; (800fbf4 <stdio_exit_handler+0xc>)
 800fbea:	4903      	ldr	r1, [pc, #12]	; (800fbf8 <stdio_exit_handler+0x10>)
 800fbec:	4803      	ldr	r0, [pc, #12]	; (800fbfc <stdio_exit_handler+0x14>)
 800fbee:	f000 b869 	b.w	800fcc4 <_fwalk_sglue>
 800fbf2:	bf00      	nop
 800fbf4:	240000e4 	.word	0x240000e4
 800fbf8:	08010759 	.word	0x08010759
 800fbfc:	240000f0 	.word	0x240000f0

0800fc00 <cleanup_stdio>:
 800fc00:	6841      	ldr	r1, [r0, #4]
 800fc02:	4b0c      	ldr	r3, [pc, #48]	; (800fc34 <cleanup_stdio+0x34>)
 800fc04:	4299      	cmp	r1, r3
 800fc06:	b510      	push	{r4, lr}
 800fc08:	4604      	mov	r4, r0
 800fc0a:	d001      	beq.n	800fc10 <cleanup_stdio+0x10>
 800fc0c:	f000 fda4 	bl	8010758 <_fflush_r>
 800fc10:	68a1      	ldr	r1, [r4, #8]
 800fc12:	4b09      	ldr	r3, [pc, #36]	; (800fc38 <cleanup_stdio+0x38>)
 800fc14:	4299      	cmp	r1, r3
 800fc16:	d002      	beq.n	800fc1e <cleanup_stdio+0x1e>
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f000 fd9d 	bl	8010758 <_fflush_r>
 800fc1e:	68e1      	ldr	r1, [r4, #12]
 800fc20:	4b06      	ldr	r3, [pc, #24]	; (800fc3c <cleanup_stdio+0x3c>)
 800fc22:	4299      	cmp	r1, r3
 800fc24:	d004      	beq.n	800fc30 <cleanup_stdio+0x30>
 800fc26:	4620      	mov	r0, r4
 800fc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc2c:	f000 bd94 	b.w	8010758 <_fflush_r>
 800fc30:	bd10      	pop	{r4, pc}
 800fc32:	bf00      	nop
 800fc34:	24001428 	.word	0x24001428
 800fc38:	24001490 	.word	0x24001490
 800fc3c:	240014f8 	.word	0x240014f8

0800fc40 <global_stdio_init.part.0>:
 800fc40:	b510      	push	{r4, lr}
 800fc42:	4b0b      	ldr	r3, [pc, #44]	; (800fc70 <global_stdio_init.part.0+0x30>)
 800fc44:	4c0b      	ldr	r4, [pc, #44]	; (800fc74 <global_stdio_init.part.0+0x34>)
 800fc46:	4a0c      	ldr	r2, [pc, #48]	; (800fc78 <global_stdio_init.part.0+0x38>)
 800fc48:	601a      	str	r2, [r3, #0]
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	2104      	movs	r1, #4
 800fc50:	f7ff ff94 	bl	800fb7c <std>
 800fc54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fc58:	2201      	movs	r2, #1
 800fc5a:	2109      	movs	r1, #9
 800fc5c:	f7ff ff8e 	bl	800fb7c <std>
 800fc60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fc64:	2202      	movs	r2, #2
 800fc66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc6a:	2112      	movs	r1, #18
 800fc6c:	f7ff bf86 	b.w	800fb7c <std>
 800fc70:	24001560 	.word	0x24001560
 800fc74:	24001428 	.word	0x24001428
 800fc78:	0800fbe9 	.word	0x0800fbe9

0800fc7c <__sfp_lock_acquire>:
 800fc7c:	4801      	ldr	r0, [pc, #4]	; (800fc84 <__sfp_lock_acquire+0x8>)
 800fc7e:	f000 b916 	b.w	800feae <__retarget_lock_acquire_recursive>
 800fc82:	bf00      	nop
 800fc84:	24001569 	.word	0x24001569

0800fc88 <__sfp_lock_release>:
 800fc88:	4801      	ldr	r0, [pc, #4]	; (800fc90 <__sfp_lock_release+0x8>)
 800fc8a:	f000 b911 	b.w	800feb0 <__retarget_lock_release_recursive>
 800fc8e:	bf00      	nop
 800fc90:	24001569 	.word	0x24001569

0800fc94 <__sinit>:
 800fc94:	b510      	push	{r4, lr}
 800fc96:	4604      	mov	r4, r0
 800fc98:	f7ff fff0 	bl	800fc7c <__sfp_lock_acquire>
 800fc9c:	6a23      	ldr	r3, [r4, #32]
 800fc9e:	b11b      	cbz	r3, 800fca8 <__sinit+0x14>
 800fca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fca4:	f7ff bff0 	b.w	800fc88 <__sfp_lock_release>
 800fca8:	4b04      	ldr	r3, [pc, #16]	; (800fcbc <__sinit+0x28>)
 800fcaa:	6223      	str	r3, [r4, #32]
 800fcac:	4b04      	ldr	r3, [pc, #16]	; (800fcc0 <__sinit+0x2c>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d1f5      	bne.n	800fca0 <__sinit+0xc>
 800fcb4:	f7ff ffc4 	bl	800fc40 <global_stdio_init.part.0>
 800fcb8:	e7f2      	b.n	800fca0 <__sinit+0xc>
 800fcba:	bf00      	nop
 800fcbc:	0800fc01 	.word	0x0800fc01
 800fcc0:	24001560 	.word	0x24001560

0800fcc4 <_fwalk_sglue>:
 800fcc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcc8:	4607      	mov	r7, r0
 800fcca:	4688      	mov	r8, r1
 800fccc:	4614      	mov	r4, r2
 800fcce:	2600      	movs	r6, #0
 800fcd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fcd4:	f1b9 0901 	subs.w	r9, r9, #1
 800fcd8:	d505      	bpl.n	800fce6 <_fwalk_sglue+0x22>
 800fcda:	6824      	ldr	r4, [r4, #0]
 800fcdc:	2c00      	cmp	r4, #0
 800fcde:	d1f7      	bne.n	800fcd0 <_fwalk_sglue+0xc>
 800fce0:	4630      	mov	r0, r6
 800fce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fce6:	89ab      	ldrh	r3, [r5, #12]
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d907      	bls.n	800fcfc <_fwalk_sglue+0x38>
 800fcec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	d003      	beq.n	800fcfc <_fwalk_sglue+0x38>
 800fcf4:	4629      	mov	r1, r5
 800fcf6:	4638      	mov	r0, r7
 800fcf8:	47c0      	blx	r8
 800fcfa:	4306      	orrs	r6, r0
 800fcfc:	3568      	adds	r5, #104	; 0x68
 800fcfe:	e7e9      	b.n	800fcd4 <_fwalk_sglue+0x10>

0800fd00 <iprintf>:
 800fd00:	b40f      	push	{r0, r1, r2, r3}
 800fd02:	b507      	push	{r0, r1, r2, lr}
 800fd04:	4906      	ldr	r1, [pc, #24]	; (800fd20 <iprintf+0x20>)
 800fd06:	ab04      	add	r3, sp, #16
 800fd08:	6808      	ldr	r0, [r1, #0]
 800fd0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd0e:	6881      	ldr	r1, [r0, #8]
 800fd10:	9301      	str	r3, [sp, #4]
 800fd12:	f000 f9f1 	bl	80100f8 <_vfiprintf_r>
 800fd16:	b003      	add	sp, #12
 800fd18:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd1c:	b004      	add	sp, #16
 800fd1e:	4770      	bx	lr
 800fd20:	2400013c 	.word	0x2400013c

0800fd24 <putchar>:
 800fd24:	4b02      	ldr	r3, [pc, #8]	; (800fd30 <putchar+0xc>)
 800fd26:	4601      	mov	r1, r0
 800fd28:	6818      	ldr	r0, [r3, #0]
 800fd2a:	6882      	ldr	r2, [r0, #8]
 800fd2c:	f000 bd3c 	b.w	80107a8 <_putc_r>
 800fd30:	2400013c 	.word	0x2400013c

0800fd34 <__sread>:
 800fd34:	b510      	push	{r4, lr}
 800fd36:	460c      	mov	r4, r1
 800fd38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd3c:	f000 f868 	bl	800fe10 <_read_r>
 800fd40:	2800      	cmp	r0, #0
 800fd42:	bfab      	itete	ge
 800fd44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fd46:	89a3      	ldrhlt	r3, [r4, #12]
 800fd48:	181b      	addge	r3, r3, r0
 800fd4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fd4e:	bfac      	ite	ge
 800fd50:	6563      	strge	r3, [r4, #84]	; 0x54
 800fd52:	81a3      	strhlt	r3, [r4, #12]
 800fd54:	bd10      	pop	{r4, pc}

0800fd56 <__swrite>:
 800fd56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd5a:	461f      	mov	r7, r3
 800fd5c:	898b      	ldrh	r3, [r1, #12]
 800fd5e:	05db      	lsls	r3, r3, #23
 800fd60:	4605      	mov	r5, r0
 800fd62:	460c      	mov	r4, r1
 800fd64:	4616      	mov	r6, r2
 800fd66:	d505      	bpl.n	800fd74 <__swrite+0x1e>
 800fd68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd6c:	2302      	movs	r3, #2
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f000 f83c 	bl	800fdec <_lseek_r>
 800fd74:	89a3      	ldrh	r3, [r4, #12]
 800fd76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd7e:	81a3      	strh	r3, [r4, #12]
 800fd80:	4632      	mov	r2, r6
 800fd82:	463b      	mov	r3, r7
 800fd84:	4628      	mov	r0, r5
 800fd86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd8a:	f000 b853 	b.w	800fe34 <_write_r>

0800fd8e <__sseek>:
 800fd8e:	b510      	push	{r4, lr}
 800fd90:	460c      	mov	r4, r1
 800fd92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd96:	f000 f829 	bl	800fdec <_lseek_r>
 800fd9a:	1c43      	adds	r3, r0, #1
 800fd9c:	89a3      	ldrh	r3, [r4, #12]
 800fd9e:	bf15      	itete	ne
 800fda0:	6560      	strne	r0, [r4, #84]	; 0x54
 800fda2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fda6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fdaa:	81a3      	strheq	r3, [r4, #12]
 800fdac:	bf18      	it	ne
 800fdae:	81a3      	strhne	r3, [r4, #12]
 800fdb0:	bd10      	pop	{r4, pc}

0800fdb2 <__sclose>:
 800fdb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdb6:	f000 b809 	b.w	800fdcc <_close_r>

0800fdba <memset>:
 800fdba:	4402      	add	r2, r0
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	d100      	bne.n	800fdc4 <memset+0xa>
 800fdc2:	4770      	bx	lr
 800fdc4:	f803 1b01 	strb.w	r1, [r3], #1
 800fdc8:	e7f9      	b.n	800fdbe <memset+0x4>
	...

0800fdcc <_close_r>:
 800fdcc:	b538      	push	{r3, r4, r5, lr}
 800fdce:	4d06      	ldr	r5, [pc, #24]	; (800fde8 <_close_r+0x1c>)
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	4604      	mov	r4, r0
 800fdd4:	4608      	mov	r0, r1
 800fdd6:	602b      	str	r3, [r5, #0]
 800fdd8:	f7f1 fe25 	bl	8001a26 <_close>
 800fddc:	1c43      	adds	r3, r0, #1
 800fdde:	d102      	bne.n	800fde6 <_close_r+0x1a>
 800fde0:	682b      	ldr	r3, [r5, #0]
 800fde2:	b103      	cbz	r3, 800fde6 <_close_r+0x1a>
 800fde4:	6023      	str	r3, [r4, #0]
 800fde6:	bd38      	pop	{r3, r4, r5, pc}
 800fde8:	24001564 	.word	0x24001564

0800fdec <_lseek_r>:
 800fdec:	b538      	push	{r3, r4, r5, lr}
 800fdee:	4d07      	ldr	r5, [pc, #28]	; (800fe0c <_lseek_r+0x20>)
 800fdf0:	4604      	mov	r4, r0
 800fdf2:	4608      	mov	r0, r1
 800fdf4:	4611      	mov	r1, r2
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	602a      	str	r2, [r5, #0]
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	f7f1 fe3a 	bl	8001a74 <_lseek>
 800fe00:	1c43      	adds	r3, r0, #1
 800fe02:	d102      	bne.n	800fe0a <_lseek_r+0x1e>
 800fe04:	682b      	ldr	r3, [r5, #0]
 800fe06:	b103      	cbz	r3, 800fe0a <_lseek_r+0x1e>
 800fe08:	6023      	str	r3, [r4, #0]
 800fe0a:	bd38      	pop	{r3, r4, r5, pc}
 800fe0c:	24001564 	.word	0x24001564

0800fe10 <_read_r>:
 800fe10:	b538      	push	{r3, r4, r5, lr}
 800fe12:	4d07      	ldr	r5, [pc, #28]	; (800fe30 <_read_r+0x20>)
 800fe14:	4604      	mov	r4, r0
 800fe16:	4608      	mov	r0, r1
 800fe18:	4611      	mov	r1, r2
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	602a      	str	r2, [r5, #0]
 800fe1e:	461a      	mov	r2, r3
 800fe20:	f7f1 fdc8 	bl	80019b4 <_read>
 800fe24:	1c43      	adds	r3, r0, #1
 800fe26:	d102      	bne.n	800fe2e <_read_r+0x1e>
 800fe28:	682b      	ldr	r3, [r5, #0]
 800fe2a:	b103      	cbz	r3, 800fe2e <_read_r+0x1e>
 800fe2c:	6023      	str	r3, [r4, #0]
 800fe2e:	bd38      	pop	{r3, r4, r5, pc}
 800fe30:	24001564 	.word	0x24001564

0800fe34 <_write_r>:
 800fe34:	b538      	push	{r3, r4, r5, lr}
 800fe36:	4d07      	ldr	r5, [pc, #28]	; (800fe54 <_write_r+0x20>)
 800fe38:	4604      	mov	r4, r0
 800fe3a:	4608      	mov	r0, r1
 800fe3c:	4611      	mov	r1, r2
 800fe3e:	2200      	movs	r2, #0
 800fe40:	602a      	str	r2, [r5, #0]
 800fe42:	461a      	mov	r2, r3
 800fe44:	f7f1 fdd3 	bl	80019ee <_write>
 800fe48:	1c43      	adds	r3, r0, #1
 800fe4a:	d102      	bne.n	800fe52 <_write_r+0x1e>
 800fe4c:	682b      	ldr	r3, [r5, #0]
 800fe4e:	b103      	cbz	r3, 800fe52 <_write_r+0x1e>
 800fe50:	6023      	str	r3, [r4, #0]
 800fe52:	bd38      	pop	{r3, r4, r5, pc}
 800fe54:	24001564 	.word	0x24001564

0800fe58 <__errno>:
 800fe58:	4b01      	ldr	r3, [pc, #4]	; (800fe60 <__errno+0x8>)
 800fe5a:	6818      	ldr	r0, [r3, #0]
 800fe5c:	4770      	bx	lr
 800fe5e:	bf00      	nop
 800fe60:	2400013c 	.word	0x2400013c

0800fe64 <__libc_init_array>:
 800fe64:	b570      	push	{r4, r5, r6, lr}
 800fe66:	4d0d      	ldr	r5, [pc, #52]	; (800fe9c <__libc_init_array+0x38>)
 800fe68:	4c0d      	ldr	r4, [pc, #52]	; (800fea0 <__libc_init_array+0x3c>)
 800fe6a:	1b64      	subs	r4, r4, r5
 800fe6c:	10a4      	asrs	r4, r4, #2
 800fe6e:	2600      	movs	r6, #0
 800fe70:	42a6      	cmp	r6, r4
 800fe72:	d109      	bne.n	800fe88 <__libc_init_array+0x24>
 800fe74:	4d0b      	ldr	r5, [pc, #44]	; (800fea4 <__libc_init_array+0x40>)
 800fe76:	4c0c      	ldr	r4, [pc, #48]	; (800fea8 <__libc_init_array+0x44>)
 800fe78:	f000 fdf4 	bl	8010a64 <_init>
 800fe7c:	1b64      	subs	r4, r4, r5
 800fe7e:	10a4      	asrs	r4, r4, #2
 800fe80:	2600      	movs	r6, #0
 800fe82:	42a6      	cmp	r6, r4
 800fe84:	d105      	bne.n	800fe92 <__libc_init_array+0x2e>
 800fe86:	bd70      	pop	{r4, r5, r6, pc}
 800fe88:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe8c:	4798      	blx	r3
 800fe8e:	3601      	adds	r6, #1
 800fe90:	e7ee      	b.n	800fe70 <__libc_init_array+0xc>
 800fe92:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe96:	4798      	blx	r3
 800fe98:	3601      	adds	r6, #1
 800fe9a:	e7f2      	b.n	800fe82 <__libc_init_array+0x1e>
 800fe9c:	08010bb0 	.word	0x08010bb0
 800fea0:	08010bb0 	.word	0x08010bb0
 800fea4:	08010bb0 	.word	0x08010bb0
 800fea8:	08010bb4 	.word	0x08010bb4

0800feac <__retarget_lock_init_recursive>:
 800feac:	4770      	bx	lr

0800feae <__retarget_lock_acquire_recursive>:
 800feae:	4770      	bx	lr

0800feb0 <__retarget_lock_release_recursive>:
 800feb0:	4770      	bx	lr
	...

0800feb4 <_free_r>:
 800feb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800feb6:	2900      	cmp	r1, #0
 800feb8:	d044      	beq.n	800ff44 <_free_r+0x90>
 800feba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800febe:	9001      	str	r0, [sp, #4]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	f1a1 0404 	sub.w	r4, r1, #4
 800fec6:	bfb8      	it	lt
 800fec8:	18e4      	addlt	r4, r4, r3
 800feca:	f000 f8df 	bl	801008c <__malloc_lock>
 800fece:	4a1e      	ldr	r2, [pc, #120]	; (800ff48 <_free_r+0x94>)
 800fed0:	9801      	ldr	r0, [sp, #4]
 800fed2:	6813      	ldr	r3, [r2, #0]
 800fed4:	b933      	cbnz	r3, 800fee4 <_free_r+0x30>
 800fed6:	6063      	str	r3, [r4, #4]
 800fed8:	6014      	str	r4, [r2, #0]
 800feda:	b003      	add	sp, #12
 800fedc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fee0:	f000 b8da 	b.w	8010098 <__malloc_unlock>
 800fee4:	42a3      	cmp	r3, r4
 800fee6:	d908      	bls.n	800fefa <_free_r+0x46>
 800fee8:	6825      	ldr	r5, [r4, #0]
 800feea:	1961      	adds	r1, r4, r5
 800feec:	428b      	cmp	r3, r1
 800feee:	bf01      	itttt	eq
 800fef0:	6819      	ldreq	r1, [r3, #0]
 800fef2:	685b      	ldreq	r3, [r3, #4]
 800fef4:	1949      	addeq	r1, r1, r5
 800fef6:	6021      	streq	r1, [r4, #0]
 800fef8:	e7ed      	b.n	800fed6 <_free_r+0x22>
 800fefa:	461a      	mov	r2, r3
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	b10b      	cbz	r3, 800ff04 <_free_r+0x50>
 800ff00:	42a3      	cmp	r3, r4
 800ff02:	d9fa      	bls.n	800fefa <_free_r+0x46>
 800ff04:	6811      	ldr	r1, [r2, #0]
 800ff06:	1855      	adds	r5, r2, r1
 800ff08:	42a5      	cmp	r5, r4
 800ff0a:	d10b      	bne.n	800ff24 <_free_r+0x70>
 800ff0c:	6824      	ldr	r4, [r4, #0]
 800ff0e:	4421      	add	r1, r4
 800ff10:	1854      	adds	r4, r2, r1
 800ff12:	42a3      	cmp	r3, r4
 800ff14:	6011      	str	r1, [r2, #0]
 800ff16:	d1e0      	bne.n	800feda <_free_r+0x26>
 800ff18:	681c      	ldr	r4, [r3, #0]
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	6053      	str	r3, [r2, #4]
 800ff1e:	440c      	add	r4, r1
 800ff20:	6014      	str	r4, [r2, #0]
 800ff22:	e7da      	b.n	800feda <_free_r+0x26>
 800ff24:	d902      	bls.n	800ff2c <_free_r+0x78>
 800ff26:	230c      	movs	r3, #12
 800ff28:	6003      	str	r3, [r0, #0]
 800ff2a:	e7d6      	b.n	800feda <_free_r+0x26>
 800ff2c:	6825      	ldr	r5, [r4, #0]
 800ff2e:	1961      	adds	r1, r4, r5
 800ff30:	428b      	cmp	r3, r1
 800ff32:	bf04      	itt	eq
 800ff34:	6819      	ldreq	r1, [r3, #0]
 800ff36:	685b      	ldreq	r3, [r3, #4]
 800ff38:	6063      	str	r3, [r4, #4]
 800ff3a:	bf04      	itt	eq
 800ff3c:	1949      	addeq	r1, r1, r5
 800ff3e:	6021      	streq	r1, [r4, #0]
 800ff40:	6054      	str	r4, [r2, #4]
 800ff42:	e7ca      	b.n	800feda <_free_r+0x26>
 800ff44:	b003      	add	sp, #12
 800ff46:	bd30      	pop	{r4, r5, pc}
 800ff48:	2400156c 	.word	0x2400156c

0800ff4c <sbrk_aligned>:
 800ff4c:	b570      	push	{r4, r5, r6, lr}
 800ff4e:	4e0e      	ldr	r6, [pc, #56]	; (800ff88 <sbrk_aligned+0x3c>)
 800ff50:	460c      	mov	r4, r1
 800ff52:	6831      	ldr	r1, [r6, #0]
 800ff54:	4605      	mov	r5, r0
 800ff56:	b911      	cbnz	r1, 800ff5e <sbrk_aligned+0x12>
 800ff58:	f000 fcf0 	bl	801093c <_sbrk_r>
 800ff5c:	6030      	str	r0, [r6, #0]
 800ff5e:	4621      	mov	r1, r4
 800ff60:	4628      	mov	r0, r5
 800ff62:	f000 fceb 	bl	801093c <_sbrk_r>
 800ff66:	1c43      	adds	r3, r0, #1
 800ff68:	d00a      	beq.n	800ff80 <sbrk_aligned+0x34>
 800ff6a:	1cc4      	adds	r4, r0, #3
 800ff6c:	f024 0403 	bic.w	r4, r4, #3
 800ff70:	42a0      	cmp	r0, r4
 800ff72:	d007      	beq.n	800ff84 <sbrk_aligned+0x38>
 800ff74:	1a21      	subs	r1, r4, r0
 800ff76:	4628      	mov	r0, r5
 800ff78:	f000 fce0 	bl	801093c <_sbrk_r>
 800ff7c:	3001      	adds	r0, #1
 800ff7e:	d101      	bne.n	800ff84 <sbrk_aligned+0x38>
 800ff80:	f04f 34ff 	mov.w	r4, #4294967295
 800ff84:	4620      	mov	r0, r4
 800ff86:	bd70      	pop	{r4, r5, r6, pc}
 800ff88:	24001570 	.word	0x24001570

0800ff8c <_malloc_r>:
 800ff8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff90:	1ccd      	adds	r5, r1, #3
 800ff92:	f025 0503 	bic.w	r5, r5, #3
 800ff96:	3508      	adds	r5, #8
 800ff98:	2d0c      	cmp	r5, #12
 800ff9a:	bf38      	it	cc
 800ff9c:	250c      	movcc	r5, #12
 800ff9e:	2d00      	cmp	r5, #0
 800ffa0:	4607      	mov	r7, r0
 800ffa2:	db01      	blt.n	800ffa8 <_malloc_r+0x1c>
 800ffa4:	42a9      	cmp	r1, r5
 800ffa6:	d905      	bls.n	800ffb4 <_malloc_r+0x28>
 800ffa8:	230c      	movs	r3, #12
 800ffaa:	603b      	str	r3, [r7, #0]
 800ffac:	2600      	movs	r6, #0
 800ffae:	4630      	mov	r0, r6
 800ffb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010088 <_malloc_r+0xfc>
 800ffb8:	f000 f868 	bl	801008c <__malloc_lock>
 800ffbc:	f8d8 3000 	ldr.w	r3, [r8]
 800ffc0:	461c      	mov	r4, r3
 800ffc2:	bb5c      	cbnz	r4, 801001c <_malloc_r+0x90>
 800ffc4:	4629      	mov	r1, r5
 800ffc6:	4638      	mov	r0, r7
 800ffc8:	f7ff ffc0 	bl	800ff4c <sbrk_aligned>
 800ffcc:	1c43      	adds	r3, r0, #1
 800ffce:	4604      	mov	r4, r0
 800ffd0:	d155      	bne.n	801007e <_malloc_r+0xf2>
 800ffd2:	f8d8 4000 	ldr.w	r4, [r8]
 800ffd6:	4626      	mov	r6, r4
 800ffd8:	2e00      	cmp	r6, #0
 800ffda:	d145      	bne.n	8010068 <_malloc_r+0xdc>
 800ffdc:	2c00      	cmp	r4, #0
 800ffde:	d048      	beq.n	8010072 <_malloc_r+0xe6>
 800ffe0:	6823      	ldr	r3, [r4, #0]
 800ffe2:	4631      	mov	r1, r6
 800ffe4:	4638      	mov	r0, r7
 800ffe6:	eb04 0903 	add.w	r9, r4, r3
 800ffea:	f000 fca7 	bl	801093c <_sbrk_r>
 800ffee:	4581      	cmp	r9, r0
 800fff0:	d13f      	bne.n	8010072 <_malloc_r+0xe6>
 800fff2:	6821      	ldr	r1, [r4, #0]
 800fff4:	1a6d      	subs	r5, r5, r1
 800fff6:	4629      	mov	r1, r5
 800fff8:	4638      	mov	r0, r7
 800fffa:	f7ff ffa7 	bl	800ff4c <sbrk_aligned>
 800fffe:	3001      	adds	r0, #1
 8010000:	d037      	beq.n	8010072 <_malloc_r+0xe6>
 8010002:	6823      	ldr	r3, [r4, #0]
 8010004:	442b      	add	r3, r5
 8010006:	6023      	str	r3, [r4, #0]
 8010008:	f8d8 3000 	ldr.w	r3, [r8]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d038      	beq.n	8010082 <_malloc_r+0xf6>
 8010010:	685a      	ldr	r2, [r3, #4]
 8010012:	42a2      	cmp	r2, r4
 8010014:	d12b      	bne.n	801006e <_malloc_r+0xe2>
 8010016:	2200      	movs	r2, #0
 8010018:	605a      	str	r2, [r3, #4]
 801001a:	e00f      	b.n	801003c <_malloc_r+0xb0>
 801001c:	6822      	ldr	r2, [r4, #0]
 801001e:	1b52      	subs	r2, r2, r5
 8010020:	d41f      	bmi.n	8010062 <_malloc_r+0xd6>
 8010022:	2a0b      	cmp	r2, #11
 8010024:	d917      	bls.n	8010056 <_malloc_r+0xca>
 8010026:	1961      	adds	r1, r4, r5
 8010028:	42a3      	cmp	r3, r4
 801002a:	6025      	str	r5, [r4, #0]
 801002c:	bf18      	it	ne
 801002e:	6059      	strne	r1, [r3, #4]
 8010030:	6863      	ldr	r3, [r4, #4]
 8010032:	bf08      	it	eq
 8010034:	f8c8 1000 	streq.w	r1, [r8]
 8010038:	5162      	str	r2, [r4, r5]
 801003a:	604b      	str	r3, [r1, #4]
 801003c:	4638      	mov	r0, r7
 801003e:	f104 060b 	add.w	r6, r4, #11
 8010042:	f000 f829 	bl	8010098 <__malloc_unlock>
 8010046:	f026 0607 	bic.w	r6, r6, #7
 801004a:	1d23      	adds	r3, r4, #4
 801004c:	1af2      	subs	r2, r6, r3
 801004e:	d0ae      	beq.n	800ffae <_malloc_r+0x22>
 8010050:	1b9b      	subs	r3, r3, r6
 8010052:	50a3      	str	r3, [r4, r2]
 8010054:	e7ab      	b.n	800ffae <_malloc_r+0x22>
 8010056:	42a3      	cmp	r3, r4
 8010058:	6862      	ldr	r2, [r4, #4]
 801005a:	d1dd      	bne.n	8010018 <_malloc_r+0x8c>
 801005c:	f8c8 2000 	str.w	r2, [r8]
 8010060:	e7ec      	b.n	801003c <_malloc_r+0xb0>
 8010062:	4623      	mov	r3, r4
 8010064:	6864      	ldr	r4, [r4, #4]
 8010066:	e7ac      	b.n	800ffc2 <_malloc_r+0x36>
 8010068:	4634      	mov	r4, r6
 801006a:	6876      	ldr	r6, [r6, #4]
 801006c:	e7b4      	b.n	800ffd8 <_malloc_r+0x4c>
 801006e:	4613      	mov	r3, r2
 8010070:	e7cc      	b.n	801000c <_malloc_r+0x80>
 8010072:	230c      	movs	r3, #12
 8010074:	603b      	str	r3, [r7, #0]
 8010076:	4638      	mov	r0, r7
 8010078:	f000 f80e 	bl	8010098 <__malloc_unlock>
 801007c:	e797      	b.n	800ffae <_malloc_r+0x22>
 801007e:	6025      	str	r5, [r4, #0]
 8010080:	e7dc      	b.n	801003c <_malloc_r+0xb0>
 8010082:	605b      	str	r3, [r3, #4]
 8010084:	deff      	udf	#255	; 0xff
 8010086:	bf00      	nop
 8010088:	2400156c 	.word	0x2400156c

0801008c <__malloc_lock>:
 801008c:	4801      	ldr	r0, [pc, #4]	; (8010094 <__malloc_lock+0x8>)
 801008e:	f7ff bf0e 	b.w	800feae <__retarget_lock_acquire_recursive>
 8010092:	bf00      	nop
 8010094:	24001568 	.word	0x24001568

08010098 <__malloc_unlock>:
 8010098:	4801      	ldr	r0, [pc, #4]	; (80100a0 <__malloc_unlock+0x8>)
 801009a:	f7ff bf09 	b.w	800feb0 <__retarget_lock_release_recursive>
 801009e:	bf00      	nop
 80100a0:	24001568 	.word	0x24001568

080100a4 <__sfputc_r>:
 80100a4:	6893      	ldr	r3, [r2, #8]
 80100a6:	3b01      	subs	r3, #1
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	b410      	push	{r4}
 80100ac:	6093      	str	r3, [r2, #8]
 80100ae:	da08      	bge.n	80100c2 <__sfputc_r+0x1e>
 80100b0:	6994      	ldr	r4, [r2, #24]
 80100b2:	42a3      	cmp	r3, r4
 80100b4:	db01      	blt.n	80100ba <__sfputc_r+0x16>
 80100b6:	290a      	cmp	r1, #10
 80100b8:	d103      	bne.n	80100c2 <__sfputc_r+0x1e>
 80100ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100be:	f000 bba7 	b.w	8010810 <__swbuf_r>
 80100c2:	6813      	ldr	r3, [r2, #0]
 80100c4:	1c58      	adds	r0, r3, #1
 80100c6:	6010      	str	r0, [r2, #0]
 80100c8:	7019      	strb	r1, [r3, #0]
 80100ca:	4608      	mov	r0, r1
 80100cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100d0:	4770      	bx	lr

080100d2 <__sfputs_r>:
 80100d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100d4:	4606      	mov	r6, r0
 80100d6:	460f      	mov	r7, r1
 80100d8:	4614      	mov	r4, r2
 80100da:	18d5      	adds	r5, r2, r3
 80100dc:	42ac      	cmp	r4, r5
 80100de:	d101      	bne.n	80100e4 <__sfputs_r+0x12>
 80100e0:	2000      	movs	r0, #0
 80100e2:	e007      	b.n	80100f4 <__sfputs_r+0x22>
 80100e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100e8:	463a      	mov	r2, r7
 80100ea:	4630      	mov	r0, r6
 80100ec:	f7ff ffda 	bl	80100a4 <__sfputc_r>
 80100f0:	1c43      	adds	r3, r0, #1
 80100f2:	d1f3      	bne.n	80100dc <__sfputs_r+0xa>
 80100f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080100f8 <_vfiprintf_r>:
 80100f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100fc:	460d      	mov	r5, r1
 80100fe:	b09d      	sub	sp, #116	; 0x74
 8010100:	4614      	mov	r4, r2
 8010102:	4698      	mov	r8, r3
 8010104:	4606      	mov	r6, r0
 8010106:	b118      	cbz	r0, 8010110 <_vfiprintf_r+0x18>
 8010108:	6a03      	ldr	r3, [r0, #32]
 801010a:	b90b      	cbnz	r3, 8010110 <_vfiprintf_r+0x18>
 801010c:	f7ff fdc2 	bl	800fc94 <__sinit>
 8010110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010112:	07d9      	lsls	r1, r3, #31
 8010114:	d405      	bmi.n	8010122 <_vfiprintf_r+0x2a>
 8010116:	89ab      	ldrh	r3, [r5, #12]
 8010118:	059a      	lsls	r2, r3, #22
 801011a:	d402      	bmi.n	8010122 <_vfiprintf_r+0x2a>
 801011c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801011e:	f7ff fec6 	bl	800feae <__retarget_lock_acquire_recursive>
 8010122:	89ab      	ldrh	r3, [r5, #12]
 8010124:	071b      	lsls	r3, r3, #28
 8010126:	d501      	bpl.n	801012c <_vfiprintf_r+0x34>
 8010128:	692b      	ldr	r3, [r5, #16]
 801012a:	b99b      	cbnz	r3, 8010154 <_vfiprintf_r+0x5c>
 801012c:	4629      	mov	r1, r5
 801012e:	4630      	mov	r0, r6
 8010130:	f000 fbac 	bl	801088c <__swsetup_r>
 8010134:	b170      	cbz	r0, 8010154 <_vfiprintf_r+0x5c>
 8010136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010138:	07dc      	lsls	r4, r3, #31
 801013a:	d504      	bpl.n	8010146 <_vfiprintf_r+0x4e>
 801013c:	f04f 30ff 	mov.w	r0, #4294967295
 8010140:	b01d      	add	sp, #116	; 0x74
 8010142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010146:	89ab      	ldrh	r3, [r5, #12]
 8010148:	0598      	lsls	r0, r3, #22
 801014a:	d4f7      	bmi.n	801013c <_vfiprintf_r+0x44>
 801014c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801014e:	f7ff feaf 	bl	800feb0 <__retarget_lock_release_recursive>
 8010152:	e7f3      	b.n	801013c <_vfiprintf_r+0x44>
 8010154:	2300      	movs	r3, #0
 8010156:	9309      	str	r3, [sp, #36]	; 0x24
 8010158:	2320      	movs	r3, #32
 801015a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801015e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010162:	2330      	movs	r3, #48	; 0x30
 8010164:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010318 <_vfiprintf_r+0x220>
 8010168:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801016c:	f04f 0901 	mov.w	r9, #1
 8010170:	4623      	mov	r3, r4
 8010172:	469a      	mov	sl, r3
 8010174:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010178:	b10a      	cbz	r2, 801017e <_vfiprintf_r+0x86>
 801017a:	2a25      	cmp	r2, #37	; 0x25
 801017c:	d1f9      	bne.n	8010172 <_vfiprintf_r+0x7a>
 801017e:	ebba 0b04 	subs.w	fp, sl, r4
 8010182:	d00b      	beq.n	801019c <_vfiprintf_r+0xa4>
 8010184:	465b      	mov	r3, fp
 8010186:	4622      	mov	r2, r4
 8010188:	4629      	mov	r1, r5
 801018a:	4630      	mov	r0, r6
 801018c:	f7ff ffa1 	bl	80100d2 <__sfputs_r>
 8010190:	3001      	adds	r0, #1
 8010192:	f000 80a9 	beq.w	80102e8 <_vfiprintf_r+0x1f0>
 8010196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010198:	445a      	add	r2, fp
 801019a:	9209      	str	r2, [sp, #36]	; 0x24
 801019c:	f89a 3000 	ldrb.w	r3, [sl]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	f000 80a1 	beq.w	80102e8 <_vfiprintf_r+0x1f0>
 80101a6:	2300      	movs	r3, #0
 80101a8:	f04f 32ff 	mov.w	r2, #4294967295
 80101ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101b0:	f10a 0a01 	add.w	sl, sl, #1
 80101b4:	9304      	str	r3, [sp, #16]
 80101b6:	9307      	str	r3, [sp, #28]
 80101b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101bc:	931a      	str	r3, [sp, #104]	; 0x68
 80101be:	4654      	mov	r4, sl
 80101c0:	2205      	movs	r2, #5
 80101c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101c6:	4854      	ldr	r0, [pc, #336]	; (8010318 <_vfiprintf_r+0x220>)
 80101c8:	f7f0 f8a2 	bl	8000310 <memchr>
 80101cc:	9a04      	ldr	r2, [sp, #16]
 80101ce:	b9d8      	cbnz	r0, 8010208 <_vfiprintf_r+0x110>
 80101d0:	06d1      	lsls	r1, r2, #27
 80101d2:	bf44      	itt	mi
 80101d4:	2320      	movmi	r3, #32
 80101d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101da:	0713      	lsls	r3, r2, #28
 80101dc:	bf44      	itt	mi
 80101de:	232b      	movmi	r3, #43	; 0x2b
 80101e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101e4:	f89a 3000 	ldrb.w	r3, [sl]
 80101e8:	2b2a      	cmp	r3, #42	; 0x2a
 80101ea:	d015      	beq.n	8010218 <_vfiprintf_r+0x120>
 80101ec:	9a07      	ldr	r2, [sp, #28]
 80101ee:	4654      	mov	r4, sl
 80101f0:	2000      	movs	r0, #0
 80101f2:	f04f 0c0a 	mov.w	ip, #10
 80101f6:	4621      	mov	r1, r4
 80101f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101fc:	3b30      	subs	r3, #48	; 0x30
 80101fe:	2b09      	cmp	r3, #9
 8010200:	d94d      	bls.n	801029e <_vfiprintf_r+0x1a6>
 8010202:	b1b0      	cbz	r0, 8010232 <_vfiprintf_r+0x13a>
 8010204:	9207      	str	r2, [sp, #28]
 8010206:	e014      	b.n	8010232 <_vfiprintf_r+0x13a>
 8010208:	eba0 0308 	sub.w	r3, r0, r8
 801020c:	fa09 f303 	lsl.w	r3, r9, r3
 8010210:	4313      	orrs	r3, r2
 8010212:	9304      	str	r3, [sp, #16]
 8010214:	46a2      	mov	sl, r4
 8010216:	e7d2      	b.n	80101be <_vfiprintf_r+0xc6>
 8010218:	9b03      	ldr	r3, [sp, #12]
 801021a:	1d19      	adds	r1, r3, #4
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	9103      	str	r1, [sp, #12]
 8010220:	2b00      	cmp	r3, #0
 8010222:	bfbb      	ittet	lt
 8010224:	425b      	neglt	r3, r3
 8010226:	f042 0202 	orrlt.w	r2, r2, #2
 801022a:	9307      	strge	r3, [sp, #28]
 801022c:	9307      	strlt	r3, [sp, #28]
 801022e:	bfb8      	it	lt
 8010230:	9204      	strlt	r2, [sp, #16]
 8010232:	7823      	ldrb	r3, [r4, #0]
 8010234:	2b2e      	cmp	r3, #46	; 0x2e
 8010236:	d10c      	bne.n	8010252 <_vfiprintf_r+0x15a>
 8010238:	7863      	ldrb	r3, [r4, #1]
 801023a:	2b2a      	cmp	r3, #42	; 0x2a
 801023c:	d134      	bne.n	80102a8 <_vfiprintf_r+0x1b0>
 801023e:	9b03      	ldr	r3, [sp, #12]
 8010240:	1d1a      	adds	r2, r3, #4
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	9203      	str	r2, [sp, #12]
 8010246:	2b00      	cmp	r3, #0
 8010248:	bfb8      	it	lt
 801024a:	f04f 33ff 	movlt.w	r3, #4294967295
 801024e:	3402      	adds	r4, #2
 8010250:	9305      	str	r3, [sp, #20]
 8010252:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010328 <_vfiprintf_r+0x230>
 8010256:	7821      	ldrb	r1, [r4, #0]
 8010258:	2203      	movs	r2, #3
 801025a:	4650      	mov	r0, sl
 801025c:	f7f0 f858 	bl	8000310 <memchr>
 8010260:	b138      	cbz	r0, 8010272 <_vfiprintf_r+0x17a>
 8010262:	9b04      	ldr	r3, [sp, #16]
 8010264:	eba0 000a 	sub.w	r0, r0, sl
 8010268:	2240      	movs	r2, #64	; 0x40
 801026a:	4082      	lsls	r2, r0
 801026c:	4313      	orrs	r3, r2
 801026e:	3401      	adds	r4, #1
 8010270:	9304      	str	r3, [sp, #16]
 8010272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010276:	4829      	ldr	r0, [pc, #164]	; (801031c <_vfiprintf_r+0x224>)
 8010278:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801027c:	2206      	movs	r2, #6
 801027e:	f7f0 f847 	bl	8000310 <memchr>
 8010282:	2800      	cmp	r0, #0
 8010284:	d03f      	beq.n	8010306 <_vfiprintf_r+0x20e>
 8010286:	4b26      	ldr	r3, [pc, #152]	; (8010320 <_vfiprintf_r+0x228>)
 8010288:	bb1b      	cbnz	r3, 80102d2 <_vfiprintf_r+0x1da>
 801028a:	9b03      	ldr	r3, [sp, #12]
 801028c:	3307      	adds	r3, #7
 801028e:	f023 0307 	bic.w	r3, r3, #7
 8010292:	3308      	adds	r3, #8
 8010294:	9303      	str	r3, [sp, #12]
 8010296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010298:	443b      	add	r3, r7
 801029a:	9309      	str	r3, [sp, #36]	; 0x24
 801029c:	e768      	b.n	8010170 <_vfiprintf_r+0x78>
 801029e:	fb0c 3202 	mla	r2, ip, r2, r3
 80102a2:	460c      	mov	r4, r1
 80102a4:	2001      	movs	r0, #1
 80102a6:	e7a6      	b.n	80101f6 <_vfiprintf_r+0xfe>
 80102a8:	2300      	movs	r3, #0
 80102aa:	3401      	adds	r4, #1
 80102ac:	9305      	str	r3, [sp, #20]
 80102ae:	4619      	mov	r1, r3
 80102b0:	f04f 0c0a 	mov.w	ip, #10
 80102b4:	4620      	mov	r0, r4
 80102b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102ba:	3a30      	subs	r2, #48	; 0x30
 80102bc:	2a09      	cmp	r2, #9
 80102be:	d903      	bls.n	80102c8 <_vfiprintf_r+0x1d0>
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d0c6      	beq.n	8010252 <_vfiprintf_r+0x15a>
 80102c4:	9105      	str	r1, [sp, #20]
 80102c6:	e7c4      	b.n	8010252 <_vfiprintf_r+0x15a>
 80102c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80102cc:	4604      	mov	r4, r0
 80102ce:	2301      	movs	r3, #1
 80102d0:	e7f0      	b.n	80102b4 <_vfiprintf_r+0x1bc>
 80102d2:	ab03      	add	r3, sp, #12
 80102d4:	9300      	str	r3, [sp, #0]
 80102d6:	462a      	mov	r2, r5
 80102d8:	4b12      	ldr	r3, [pc, #72]	; (8010324 <_vfiprintf_r+0x22c>)
 80102da:	a904      	add	r1, sp, #16
 80102dc:	4630      	mov	r0, r6
 80102de:	f3af 8000 	nop.w
 80102e2:	4607      	mov	r7, r0
 80102e4:	1c78      	adds	r0, r7, #1
 80102e6:	d1d6      	bne.n	8010296 <_vfiprintf_r+0x19e>
 80102e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80102ea:	07d9      	lsls	r1, r3, #31
 80102ec:	d405      	bmi.n	80102fa <_vfiprintf_r+0x202>
 80102ee:	89ab      	ldrh	r3, [r5, #12]
 80102f0:	059a      	lsls	r2, r3, #22
 80102f2:	d402      	bmi.n	80102fa <_vfiprintf_r+0x202>
 80102f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102f6:	f7ff fddb 	bl	800feb0 <__retarget_lock_release_recursive>
 80102fa:	89ab      	ldrh	r3, [r5, #12]
 80102fc:	065b      	lsls	r3, r3, #25
 80102fe:	f53f af1d 	bmi.w	801013c <_vfiprintf_r+0x44>
 8010302:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010304:	e71c      	b.n	8010140 <_vfiprintf_r+0x48>
 8010306:	ab03      	add	r3, sp, #12
 8010308:	9300      	str	r3, [sp, #0]
 801030a:	462a      	mov	r2, r5
 801030c:	4b05      	ldr	r3, [pc, #20]	; (8010324 <_vfiprintf_r+0x22c>)
 801030e:	a904      	add	r1, sp, #16
 8010310:	4630      	mov	r0, r6
 8010312:	f000 f879 	bl	8010408 <_printf_i>
 8010316:	e7e4      	b.n	80102e2 <_vfiprintf_r+0x1ea>
 8010318:	08010b7c 	.word	0x08010b7c
 801031c:	08010b86 	.word	0x08010b86
 8010320:	00000000 	.word	0x00000000
 8010324:	080100d3 	.word	0x080100d3
 8010328:	08010b82 	.word	0x08010b82

0801032c <_printf_common>:
 801032c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010330:	4616      	mov	r6, r2
 8010332:	4699      	mov	r9, r3
 8010334:	688a      	ldr	r2, [r1, #8]
 8010336:	690b      	ldr	r3, [r1, #16]
 8010338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801033c:	4293      	cmp	r3, r2
 801033e:	bfb8      	it	lt
 8010340:	4613      	movlt	r3, r2
 8010342:	6033      	str	r3, [r6, #0]
 8010344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010348:	4607      	mov	r7, r0
 801034a:	460c      	mov	r4, r1
 801034c:	b10a      	cbz	r2, 8010352 <_printf_common+0x26>
 801034e:	3301      	adds	r3, #1
 8010350:	6033      	str	r3, [r6, #0]
 8010352:	6823      	ldr	r3, [r4, #0]
 8010354:	0699      	lsls	r1, r3, #26
 8010356:	bf42      	ittt	mi
 8010358:	6833      	ldrmi	r3, [r6, #0]
 801035a:	3302      	addmi	r3, #2
 801035c:	6033      	strmi	r3, [r6, #0]
 801035e:	6825      	ldr	r5, [r4, #0]
 8010360:	f015 0506 	ands.w	r5, r5, #6
 8010364:	d106      	bne.n	8010374 <_printf_common+0x48>
 8010366:	f104 0a19 	add.w	sl, r4, #25
 801036a:	68e3      	ldr	r3, [r4, #12]
 801036c:	6832      	ldr	r2, [r6, #0]
 801036e:	1a9b      	subs	r3, r3, r2
 8010370:	42ab      	cmp	r3, r5
 8010372:	dc26      	bgt.n	80103c2 <_printf_common+0x96>
 8010374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010378:	1e13      	subs	r3, r2, #0
 801037a:	6822      	ldr	r2, [r4, #0]
 801037c:	bf18      	it	ne
 801037e:	2301      	movne	r3, #1
 8010380:	0692      	lsls	r2, r2, #26
 8010382:	d42b      	bmi.n	80103dc <_printf_common+0xb0>
 8010384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010388:	4649      	mov	r1, r9
 801038a:	4638      	mov	r0, r7
 801038c:	47c0      	blx	r8
 801038e:	3001      	adds	r0, #1
 8010390:	d01e      	beq.n	80103d0 <_printf_common+0xa4>
 8010392:	6823      	ldr	r3, [r4, #0]
 8010394:	6922      	ldr	r2, [r4, #16]
 8010396:	f003 0306 	and.w	r3, r3, #6
 801039a:	2b04      	cmp	r3, #4
 801039c:	bf02      	ittt	eq
 801039e:	68e5      	ldreq	r5, [r4, #12]
 80103a0:	6833      	ldreq	r3, [r6, #0]
 80103a2:	1aed      	subeq	r5, r5, r3
 80103a4:	68a3      	ldr	r3, [r4, #8]
 80103a6:	bf0c      	ite	eq
 80103a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80103ac:	2500      	movne	r5, #0
 80103ae:	4293      	cmp	r3, r2
 80103b0:	bfc4      	itt	gt
 80103b2:	1a9b      	subgt	r3, r3, r2
 80103b4:	18ed      	addgt	r5, r5, r3
 80103b6:	2600      	movs	r6, #0
 80103b8:	341a      	adds	r4, #26
 80103ba:	42b5      	cmp	r5, r6
 80103bc:	d11a      	bne.n	80103f4 <_printf_common+0xc8>
 80103be:	2000      	movs	r0, #0
 80103c0:	e008      	b.n	80103d4 <_printf_common+0xa8>
 80103c2:	2301      	movs	r3, #1
 80103c4:	4652      	mov	r2, sl
 80103c6:	4649      	mov	r1, r9
 80103c8:	4638      	mov	r0, r7
 80103ca:	47c0      	blx	r8
 80103cc:	3001      	adds	r0, #1
 80103ce:	d103      	bne.n	80103d8 <_printf_common+0xac>
 80103d0:	f04f 30ff 	mov.w	r0, #4294967295
 80103d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103d8:	3501      	adds	r5, #1
 80103da:	e7c6      	b.n	801036a <_printf_common+0x3e>
 80103dc:	18e1      	adds	r1, r4, r3
 80103de:	1c5a      	adds	r2, r3, #1
 80103e0:	2030      	movs	r0, #48	; 0x30
 80103e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80103e6:	4422      	add	r2, r4
 80103e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80103ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80103f0:	3302      	adds	r3, #2
 80103f2:	e7c7      	b.n	8010384 <_printf_common+0x58>
 80103f4:	2301      	movs	r3, #1
 80103f6:	4622      	mov	r2, r4
 80103f8:	4649      	mov	r1, r9
 80103fa:	4638      	mov	r0, r7
 80103fc:	47c0      	blx	r8
 80103fe:	3001      	adds	r0, #1
 8010400:	d0e6      	beq.n	80103d0 <_printf_common+0xa4>
 8010402:	3601      	adds	r6, #1
 8010404:	e7d9      	b.n	80103ba <_printf_common+0x8e>
	...

08010408 <_printf_i>:
 8010408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801040c:	7e0f      	ldrb	r7, [r1, #24]
 801040e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010410:	2f78      	cmp	r7, #120	; 0x78
 8010412:	4691      	mov	r9, r2
 8010414:	4680      	mov	r8, r0
 8010416:	460c      	mov	r4, r1
 8010418:	469a      	mov	sl, r3
 801041a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801041e:	d807      	bhi.n	8010430 <_printf_i+0x28>
 8010420:	2f62      	cmp	r7, #98	; 0x62
 8010422:	d80a      	bhi.n	801043a <_printf_i+0x32>
 8010424:	2f00      	cmp	r7, #0
 8010426:	f000 80d4 	beq.w	80105d2 <_printf_i+0x1ca>
 801042a:	2f58      	cmp	r7, #88	; 0x58
 801042c:	f000 80c0 	beq.w	80105b0 <_printf_i+0x1a8>
 8010430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010438:	e03a      	b.n	80104b0 <_printf_i+0xa8>
 801043a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801043e:	2b15      	cmp	r3, #21
 8010440:	d8f6      	bhi.n	8010430 <_printf_i+0x28>
 8010442:	a101      	add	r1, pc, #4	; (adr r1, 8010448 <_printf_i+0x40>)
 8010444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010448:	080104a1 	.word	0x080104a1
 801044c:	080104b5 	.word	0x080104b5
 8010450:	08010431 	.word	0x08010431
 8010454:	08010431 	.word	0x08010431
 8010458:	08010431 	.word	0x08010431
 801045c:	08010431 	.word	0x08010431
 8010460:	080104b5 	.word	0x080104b5
 8010464:	08010431 	.word	0x08010431
 8010468:	08010431 	.word	0x08010431
 801046c:	08010431 	.word	0x08010431
 8010470:	08010431 	.word	0x08010431
 8010474:	080105b9 	.word	0x080105b9
 8010478:	080104e1 	.word	0x080104e1
 801047c:	08010573 	.word	0x08010573
 8010480:	08010431 	.word	0x08010431
 8010484:	08010431 	.word	0x08010431
 8010488:	080105db 	.word	0x080105db
 801048c:	08010431 	.word	0x08010431
 8010490:	080104e1 	.word	0x080104e1
 8010494:	08010431 	.word	0x08010431
 8010498:	08010431 	.word	0x08010431
 801049c:	0801057b 	.word	0x0801057b
 80104a0:	682b      	ldr	r3, [r5, #0]
 80104a2:	1d1a      	adds	r2, r3, #4
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	602a      	str	r2, [r5, #0]
 80104a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80104ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80104b0:	2301      	movs	r3, #1
 80104b2:	e09f      	b.n	80105f4 <_printf_i+0x1ec>
 80104b4:	6820      	ldr	r0, [r4, #0]
 80104b6:	682b      	ldr	r3, [r5, #0]
 80104b8:	0607      	lsls	r7, r0, #24
 80104ba:	f103 0104 	add.w	r1, r3, #4
 80104be:	6029      	str	r1, [r5, #0]
 80104c0:	d501      	bpl.n	80104c6 <_printf_i+0xbe>
 80104c2:	681e      	ldr	r6, [r3, #0]
 80104c4:	e003      	b.n	80104ce <_printf_i+0xc6>
 80104c6:	0646      	lsls	r6, r0, #25
 80104c8:	d5fb      	bpl.n	80104c2 <_printf_i+0xba>
 80104ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80104ce:	2e00      	cmp	r6, #0
 80104d0:	da03      	bge.n	80104da <_printf_i+0xd2>
 80104d2:	232d      	movs	r3, #45	; 0x2d
 80104d4:	4276      	negs	r6, r6
 80104d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104da:	485a      	ldr	r0, [pc, #360]	; (8010644 <_printf_i+0x23c>)
 80104dc:	230a      	movs	r3, #10
 80104de:	e012      	b.n	8010506 <_printf_i+0xfe>
 80104e0:	682b      	ldr	r3, [r5, #0]
 80104e2:	6820      	ldr	r0, [r4, #0]
 80104e4:	1d19      	adds	r1, r3, #4
 80104e6:	6029      	str	r1, [r5, #0]
 80104e8:	0605      	lsls	r5, r0, #24
 80104ea:	d501      	bpl.n	80104f0 <_printf_i+0xe8>
 80104ec:	681e      	ldr	r6, [r3, #0]
 80104ee:	e002      	b.n	80104f6 <_printf_i+0xee>
 80104f0:	0641      	lsls	r1, r0, #25
 80104f2:	d5fb      	bpl.n	80104ec <_printf_i+0xe4>
 80104f4:	881e      	ldrh	r6, [r3, #0]
 80104f6:	4853      	ldr	r0, [pc, #332]	; (8010644 <_printf_i+0x23c>)
 80104f8:	2f6f      	cmp	r7, #111	; 0x6f
 80104fa:	bf0c      	ite	eq
 80104fc:	2308      	moveq	r3, #8
 80104fe:	230a      	movne	r3, #10
 8010500:	2100      	movs	r1, #0
 8010502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010506:	6865      	ldr	r5, [r4, #4]
 8010508:	60a5      	str	r5, [r4, #8]
 801050a:	2d00      	cmp	r5, #0
 801050c:	bfa2      	ittt	ge
 801050e:	6821      	ldrge	r1, [r4, #0]
 8010510:	f021 0104 	bicge.w	r1, r1, #4
 8010514:	6021      	strge	r1, [r4, #0]
 8010516:	b90e      	cbnz	r6, 801051c <_printf_i+0x114>
 8010518:	2d00      	cmp	r5, #0
 801051a:	d04b      	beq.n	80105b4 <_printf_i+0x1ac>
 801051c:	4615      	mov	r5, r2
 801051e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010522:	fb03 6711 	mls	r7, r3, r1, r6
 8010526:	5dc7      	ldrb	r7, [r0, r7]
 8010528:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801052c:	4637      	mov	r7, r6
 801052e:	42bb      	cmp	r3, r7
 8010530:	460e      	mov	r6, r1
 8010532:	d9f4      	bls.n	801051e <_printf_i+0x116>
 8010534:	2b08      	cmp	r3, #8
 8010536:	d10b      	bne.n	8010550 <_printf_i+0x148>
 8010538:	6823      	ldr	r3, [r4, #0]
 801053a:	07de      	lsls	r6, r3, #31
 801053c:	d508      	bpl.n	8010550 <_printf_i+0x148>
 801053e:	6923      	ldr	r3, [r4, #16]
 8010540:	6861      	ldr	r1, [r4, #4]
 8010542:	4299      	cmp	r1, r3
 8010544:	bfde      	ittt	le
 8010546:	2330      	movle	r3, #48	; 0x30
 8010548:	f805 3c01 	strble.w	r3, [r5, #-1]
 801054c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010550:	1b52      	subs	r2, r2, r5
 8010552:	6122      	str	r2, [r4, #16]
 8010554:	f8cd a000 	str.w	sl, [sp]
 8010558:	464b      	mov	r3, r9
 801055a:	aa03      	add	r2, sp, #12
 801055c:	4621      	mov	r1, r4
 801055e:	4640      	mov	r0, r8
 8010560:	f7ff fee4 	bl	801032c <_printf_common>
 8010564:	3001      	adds	r0, #1
 8010566:	d14a      	bne.n	80105fe <_printf_i+0x1f6>
 8010568:	f04f 30ff 	mov.w	r0, #4294967295
 801056c:	b004      	add	sp, #16
 801056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010572:	6823      	ldr	r3, [r4, #0]
 8010574:	f043 0320 	orr.w	r3, r3, #32
 8010578:	6023      	str	r3, [r4, #0]
 801057a:	4833      	ldr	r0, [pc, #204]	; (8010648 <_printf_i+0x240>)
 801057c:	2778      	movs	r7, #120	; 0x78
 801057e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010582:	6823      	ldr	r3, [r4, #0]
 8010584:	6829      	ldr	r1, [r5, #0]
 8010586:	061f      	lsls	r7, r3, #24
 8010588:	f851 6b04 	ldr.w	r6, [r1], #4
 801058c:	d402      	bmi.n	8010594 <_printf_i+0x18c>
 801058e:	065f      	lsls	r7, r3, #25
 8010590:	bf48      	it	mi
 8010592:	b2b6      	uxthmi	r6, r6
 8010594:	07df      	lsls	r7, r3, #31
 8010596:	bf48      	it	mi
 8010598:	f043 0320 	orrmi.w	r3, r3, #32
 801059c:	6029      	str	r1, [r5, #0]
 801059e:	bf48      	it	mi
 80105a0:	6023      	strmi	r3, [r4, #0]
 80105a2:	b91e      	cbnz	r6, 80105ac <_printf_i+0x1a4>
 80105a4:	6823      	ldr	r3, [r4, #0]
 80105a6:	f023 0320 	bic.w	r3, r3, #32
 80105aa:	6023      	str	r3, [r4, #0]
 80105ac:	2310      	movs	r3, #16
 80105ae:	e7a7      	b.n	8010500 <_printf_i+0xf8>
 80105b0:	4824      	ldr	r0, [pc, #144]	; (8010644 <_printf_i+0x23c>)
 80105b2:	e7e4      	b.n	801057e <_printf_i+0x176>
 80105b4:	4615      	mov	r5, r2
 80105b6:	e7bd      	b.n	8010534 <_printf_i+0x12c>
 80105b8:	682b      	ldr	r3, [r5, #0]
 80105ba:	6826      	ldr	r6, [r4, #0]
 80105bc:	6961      	ldr	r1, [r4, #20]
 80105be:	1d18      	adds	r0, r3, #4
 80105c0:	6028      	str	r0, [r5, #0]
 80105c2:	0635      	lsls	r5, r6, #24
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	d501      	bpl.n	80105cc <_printf_i+0x1c4>
 80105c8:	6019      	str	r1, [r3, #0]
 80105ca:	e002      	b.n	80105d2 <_printf_i+0x1ca>
 80105cc:	0670      	lsls	r0, r6, #25
 80105ce:	d5fb      	bpl.n	80105c8 <_printf_i+0x1c0>
 80105d0:	8019      	strh	r1, [r3, #0]
 80105d2:	2300      	movs	r3, #0
 80105d4:	6123      	str	r3, [r4, #16]
 80105d6:	4615      	mov	r5, r2
 80105d8:	e7bc      	b.n	8010554 <_printf_i+0x14c>
 80105da:	682b      	ldr	r3, [r5, #0]
 80105dc:	1d1a      	adds	r2, r3, #4
 80105de:	602a      	str	r2, [r5, #0]
 80105e0:	681d      	ldr	r5, [r3, #0]
 80105e2:	6862      	ldr	r2, [r4, #4]
 80105e4:	2100      	movs	r1, #0
 80105e6:	4628      	mov	r0, r5
 80105e8:	f7ef fe92 	bl	8000310 <memchr>
 80105ec:	b108      	cbz	r0, 80105f2 <_printf_i+0x1ea>
 80105ee:	1b40      	subs	r0, r0, r5
 80105f0:	6060      	str	r0, [r4, #4]
 80105f2:	6863      	ldr	r3, [r4, #4]
 80105f4:	6123      	str	r3, [r4, #16]
 80105f6:	2300      	movs	r3, #0
 80105f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105fc:	e7aa      	b.n	8010554 <_printf_i+0x14c>
 80105fe:	6923      	ldr	r3, [r4, #16]
 8010600:	462a      	mov	r2, r5
 8010602:	4649      	mov	r1, r9
 8010604:	4640      	mov	r0, r8
 8010606:	47d0      	blx	sl
 8010608:	3001      	adds	r0, #1
 801060a:	d0ad      	beq.n	8010568 <_printf_i+0x160>
 801060c:	6823      	ldr	r3, [r4, #0]
 801060e:	079b      	lsls	r3, r3, #30
 8010610:	d413      	bmi.n	801063a <_printf_i+0x232>
 8010612:	68e0      	ldr	r0, [r4, #12]
 8010614:	9b03      	ldr	r3, [sp, #12]
 8010616:	4298      	cmp	r0, r3
 8010618:	bfb8      	it	lt
 801061a:	4618      	movlt	r0, r3
 801061c:	e7a6      	b.n	801056c <_printf_i+0x164>
 801061e:	2301      	movs	r3, #1
 8010620:	4632      	mov	r2, r6
 8010622:	4649      	mov	r1, r9
 8010624:	4640      	mov	r0, r8
 8010626:	47d0      	blx	sl
 8010628:	3001      	adds	r0, #1
 801062a:	d09d      	beq.n	8010568 <_printf_i+0x160>
 801062c:	3501      	adds	r5, #1
 801062e:	68e3      	ldr	r3, [r4, #12]
 8010630:	9903      	ldr	r1, [sp, #12]
 8010632:	1a5b      	subs	r3, r3, r1
 8010634:	42ab      	cmp	r3, r5
 8010636:	dcf2      	bgt.n	801061e <_printf_i+0x216>
 8010638:	e7eb      	b.n	8010612 <_printf_i+0x20a>
 801063a:	2500      	movs	r5, #0
 801063c:	f104 0619 	add.w	r6, r4, #25
 8010640:	e7f5      	b.n	801062e <_printf_i+0x226>
 8010642:	bf00      	nop
 8010644:	08010b8d 	.word	0x08010b8d
 8010648:	08010b9e 	.word	0x08010b9e

0801064c <__sflush_r>:
 801064c:	898a      	ldrh	r2, [r1, #12]
 801064e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010652:	4605      	mov	r5, r0
 8010654:	0710      	lsls	r0, r2, #28
 8010656:	460c      	mov	r4, r1
 8010658:	d458      	bmi.n	801070c <__sflush_r+0xc0>
 801065a:	684b      	ldr	r3, [r1, #4]
 801065c:	2b00      	cmp	r3, #0
 801065e:	dc05      	bgt.n	801066c <__sflush_r+0x20>
 8010660:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010662:	2b00      	cmp	r3, #0
 8010664:	dc02      	bgt.n	801066c <__sflush_r+0x20>
 8010666:	2000      	movs	r0, #0
 8010668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801066c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801066e:	2e00      	cmp	r6, #0
 8010670:	d0f9      	beq.n	8010666 <__sflush_r+0x1a>
 8010672:	2300      	movs	r3, #0
 8010674:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010678:	682f      	ldr	r7, [r5, #0]
 801067a:	6a21      	ldr	r1, [r4, #32]
 801067c:	602b      	str	r3, [r5, #0]
 801067e:	d032      	beq.n	80106e6 <__sflush_r+0x9a>
 8010680:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010682:	89a3      	ldrh	r3, [r4, #12]
 8010684:	075a      	lsls	r2, r3, #29
 8010686:	d505      	bpl.n	8010694 <__sflush_r+0x48>
 8010688:	6863      	ldr	r3, [r4, #4]
 801068a:	1ac0      	subs	r0, r0, r3
 801068c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801068e:	b10b      	cbz	r3, 8010694 <__sflush_r+0x48>
 8010690:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010692:	1ac0      	subs	r0, r0, r3
 8010694:	2300      	movs	r3, #0
 8010696:	4602      	mov	r2, r0
 8010698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801069a:	6a21      	ldr	r1, [r4, #32]
 801069c:	4628      	mov	r0, r5
 801069e:	47b0      	blx	r6
 80106a0:	1c43      	adds	r3, r0, #1
 80106a2:	89a3      	ldrh	r3, [r4, #12]
 80106a4:	d106      	bne.n	80106b4 <__sflush_r+0x68>
 80106a6:	6829      	ldr	r1, [r5, #0]
 80106a8:	291d      	cmp	r1, #29
 80106aa:	d82b      	bhi.n	8010704 <__sflush_r+0xb8>
 80106ac:	4a29      	ldr	r2, [pc, #164]	; (8010754 <__sflush_r+0x108>)
 80106ae:	410a      	asrs	r2, r1
 80106b0:	07d6      	lsls	r6, r2, #31
 80106b2:	d427      	bmi.n	8010704 <__sflush_r+0xb8>
 80106b4:	2200      	movs	r2, #0
 80106b6:	6062      	str	r2, [r4, #4]
 80106b8:	04d9      	lsls	r1, r3, #19
 80106ba:	6922      	ldr	r2, [r4, #16]
 80106bc:	6022      	str	r2, [r4, #0]
 80106be:	d504      	bpl.n	80106ca <__sflush_r+0x7e>
 80106c0:	1c42      	adds	r2, r0, #1
 80106c2:	d101      	bne.n	80106c8 <__sflush_r+0x7c>
 80106c4:	682b      	ldr	r3, [r5, #0]
 80106c6:	b903      	cbnz	r3, 80106ca <__sflush_r+0x7e>
 80106c8:	6560      	str	r0, [r4, #84]	; 0x54
 80106ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106cc:	602f      	str	r7, [r5, #0]
 80106ce:	2900      	cmp	r1, #0
 80106d0:	d0c9      	beq.n	8010666 <__sflush_r+0x1a>
 80106d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106d6:	4299      	cmp	r1, r3
 80106d8:	d002      	beq.n	80106e0 <__sflush_r+0x94>
 80106da:	4628      	mov	r0, r5
 80106dc:	f7ff fbea 	bl	800feb4 <_free_r>
 80106e0:	2000      	movs	r0, #0
 80106e2:	6360      	str	r0, [r4, #52]	; 0x34
 80106e4:	e7c0      	b.n	8010668 <__sflush_r+0x1c>
 80106e6:	2301      	movs	r3, #1
 80106e8:	4628      	mov	r0, r5
 80106ea:	47b0      	blx	r6
 80106ec:	1c41      	adds	r1, r0, #1
 80106ee:	d1c8      	bne.n	8010682 <__sflush_r+0x36>
 80106f0:	682b      	ldr	r3, [r5, #0]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d0c5      	beq.n	8010682 <__sflush_r+0x36>
 80106f6:	2b1d      	cmp	r3, #29
 80106f8:	d001      	beq.n	80106fe <__sflush_r+0xb2>
 80106fa:	2b16      	cmp	r3, #22
 80106fc:	d101      	bne.n	8010702 <__sflush_r+0xb6>
 80106fe:	602f      	str	r7, [r5, #0]
 8010700:	e7b1      	b.n	8010666 <__sflush_r+0x1a>
 8010702:	89a3      	ldrh	r3, [r4, #12]
 8010704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010708:	81a3      	strh	r3, [r4, #12]
 801070a:	e7ad      	b.n	8010668 <__sflush_r+0x1c>
 801070c:	690f      	ldr	r7, [r1, #16]
 801070e:	2f00      	cmp	r7, #0
 8010710:	d0a9      	beq.n	8010666 <__sflush_r+0x1a>
 8010712:	0793      	lsls	r3, r2, #30
 8010714:	680e      	ldr	r6, [r1, #0]
 8010716:	bf08      	it	eq
 8010718:	694b      	ldreq	r3, [r1, #20]
 801071a:	600f      	str	r7, [r1, #0]
 801071c:	bf18      	it	ne
 801071e:	2300      	movne	r3, #0
 8010720:	eba6 0807 	sub.w	r8, r6, r7
 8010724:	608b      	str	r3, [r1, #8]
 8010726:	f1b8 0f00 	cmp.w	r8, #0
 801072a:	dd9c      	ble.n	8010666 <__sflush_r+0x1a>
 801072c:	6a21      	ldr	r1, [r4, #32]
 801072e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010730:	4643      	mov	r3, r8
 8010732:	463a      	mov	r2, r7
 8010734:	4628      	mov	r0, r5
 8010736:	47b0      	blx	r6
 8010738:	2800      	cmp	r0, #0
 801073a:	dc06      	bgt.n	801074a <__sflush_r+0xfe>
 801073c:	89a3      	ldrh	r3, [r4, #12]
 801073e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010742:	81a3      	strh	r3, [r4, #12]
 8010744:	f04f 30ff 	mov.w	r0, #4294967295
 8010748:	e78e      	b.n	8010668 <__sflush_r+0x1c>
 801074a:	4407      	add	r7, r0
 801074c:	eba8 0800 	sub.w	r8, r8, r0
 8010750:	e7e9      	b.n	8010726 <__sflush_r+0xda>
 8010752:	bf00      	nop
 8010754:	dfbffffe 	.word	0xdfbffffe

08010758 <_fflush_r>:
 8010758:	b538      	push	{r3, r4, r5, lr}
 801075a:	690b      	ldr	r3, [r1, #16]
 801075c:	4605      	mov	r5, r0
 801075e:	460c      	mov	r4, r1
 8010760:	b913      	cbnz	r3, 8010768 <_fflush_r+0x10>
 8010762:	2500      	movs	r5, #0
 8010764:	4628      	mov	r0, r5
 8010766:	bd38      	pop	{r3, r4, r5, pc}
 8010768:	b118      	cbz	r0, 8010772 <_fflush_r+0x1a>
 801076a:	6a03      	ldr	r3, [r0, #32]
 801076c:	b90b      	cbnz	r3, 8010772 <_fflush_r+0x1a>
 801076e:	f7ff fa91 	bl	800fc94 <__sinit>
 8010772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d0f3      	beq.n	8010762 <_fflush_r+0xa>
 801077a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801077c:	07d0      	lsls	r0, r2, #31
 801077e:	d404      	bmi.n	801078a <_fflush_r+0x32>
 8010780:	0599      	lsls	r1, r3, #22
 8010782:	d402      	bmi.n	801078a <_fflush_r+0x32>
 8010784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010786:	f7ff fb92 	bl	800feae <__retarget_lock_acquire_recursive>
 801078a:	4628      	mov	r0, r5
 801078c:	4621      	mov	r1, r4
 801078e:	f7ff ff5d 	bl	801064c <__sflush_r>
 8010792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010794:	07da      	lsls	r2, r3, #31
 8010796:	4605      	mov	r5, r0
 8010798:	d4e4      	bmi.n	8010764 <_fflush_r+0xc>
 801079a:	89a3      	ldrh	r3, [r4, #12]
 801079c:	059b      	lsls	r3, r3, #22
 801079e:	d4e1      	bmi.n	8010764 <_fflush_r+0xc>
 80107a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107a2:	f7ff fb85 	bl	800feb0 <__retarget_lock_release_recursive>
 80107a6:	e7dd      	b.n	8010764 <_fflush_r+0xc>

080107a8 <_putc_r>:
 80107a8:	b570      	push	{r4, r5, r6, lr}
 80107aa:	460d      	mov	r5, r1
 80107ac:	4614      	mov	r4, r2
 80107ae:	4606      	mov	r6, r0
 80107b0:	b118      	cbz	r0, 80107ba <_putc_r+0x12>
 80107b2:	6a03      	ldr	r3, [r0, #32]
 80107b4:	b90b      	cbnz	r3, 80107ba <_putc_r+0x12>
 80107b6:	f7ff fa6d 	bl	800fc94 <__sinit>
 80107ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80107bc:	07d8      	lsls	r0, r3, #31
 80107be:	d405      	bmi.n	80107cc <_putc_r+0x24>
 80107c0:	89a3      	ldrh	r3, [r4, #12]
 80107c2:	0599      	lsls	r1, r3, #22
 80107c4:	d402      	bmi.n	80107cc <_putc_r+0x24>
 80107c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107c8:	f7ff fb71 	bl	800feae <__retarget_lock_acquire_recursive>
 80107cc:	68a3      	ldr	r3, [r4, #8]
 80107ce:	3b01      	subs	r3, #1
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	60a3      	str	r3, [r4, #8]
 80107d4:	da05      	bge.n	80107e2 <_putc_r+0x3a>
 80107d6:	69a2      	ldr	r2, [r4, #24]
 80107d8:	4293      	cmp	r3, r2
 80107da:	db12      	blt.n	8010802 <_putc_r+0x5a>
 80107dc:	b2eb      	uxtb	r3, r5
 80107de:	2b0a      	cmp	r3, #10
 80107e0:	d00f      	beq.n	8010802 <_putc_r+0x5a>
 80107e2:	6823      	ldr	r3, [r4, #0]
 80107e4:	1c5a      	adds	r2, r3, #1
 80107e6:	6022      	str	r2, [r4, #0]
 80107e8:	701d      	strb	r5, [r3, #0]
 80107ea:	b2ed      	uxtb	r5, r5
 80107ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80107ee:	07da      	lsls	r2, r3, #31
 80107f0:	d405      	bmi.n	80107fe <_putc_r+0x56>
 80107f2:	89a3      	ldrh	r3, [r4, #12]
 80107f4:	059b      	lsls	r3, r3, #22
 80107f6:	d402      	bmi.n	80107fe <_putc_r+0x56>
 80107f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107fa:	f7ff fb59 	bl	800feb0 <__retarget_lock_release_recursive>
 80107fe:	4628      	mov	r0, r5
 8010800:	bd70      	pop	{r4, r5, r6, pc}
 8010802:	4629      	mov	r1, r5
 8010804:	4622      	mov	r2, r4
 8010806:	4630      	mov	r0, r6
 8010808:	f000 f802 	bl	8010810 <__swbuf_r>
 801080c:	4605      	mov	r5, r0
 801080e:	e7ed      	b.n	80107ec <_putc_r+0x44>

08010810 <__swbuf_r>:
 8010810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010812:	460e      	mov	r6, r1
 8010814:	4614      	mov	r4, r2
 8010816:	4605      	mov	r5, r0
 8010818:	b118      	cbz	r0, 8010822 <__swbuf_r+0x12>
 801081a:	6a03      	ldr	r3, [r0, #32]
 801081c:	b90b      	cbnz	r3, 8010822 <__swbuf_r+0x12>
 801081e:	f7ff fa39 	bl	800fc94 <__sinit>
 8010822:	69a3      	ldr	r3, [r4, #24]
 8010824:	60a3      	str	r3, [r4, #8]
 8010826:	89a3      	ldrh	r3, [r4, #12]
 8010828:	071a      	lsls	r2, r3, #28
 801082a:	d525      	bpl.n	8010878 <__swbuf_r+0x68>
 801082c:	6923      	ldr	r3, [r4, #16]
 801082e:	b31b      	cbz	r3, 8010878 <__swbuf_r+0x68>
 8010830:	6823      	ldr	r3, [r4, #0]
 8010832:	6922      	ldr	r2, [r4, #16]
 8010834:	1a98      	subs	r0, r3, r2
 8010836:	6963      	ldr	r3, [r4, #20]
 8010838:	b2f6      	uxtb	r6, r6
 801083a:	4283      	cmp	r3, r0
 801083c:	4637      	mov	r7, r6
 801083e:	dc04      	bgt.n	801084a <__swbuf_r+0x3a>
 8010840:	4621      	mov	r1, r4
 8010842:	4628      	mov	r0, r5
 8010844:	f7ff ff88 	bl	8010758 <_fflush_r>
 8010848:	b9e0      	cbnz	r0, 8010884 <__swbuf_r+0x74>
 801084a:	68a3      	ldr	r3, [r4, #8]
 801084c:	3b01      	subs	r3, #1
 801084e:	60a3      	str	r3, [r4, #8]
 8010850:	6823      	ldr	r3, [r4, #0]
 8010852:	1c5a      	adds	r2, r3, #1
 8010854:	6022      	str	r2, [r4, #0]
 8010856:	701e      	strb	r6, [r3, #0]
 8010858:	6962      	ldr	r2, [r4, #20]
 801085a:	1c43      	adds	r3, r0, #1
 801085c:	429a      	cmp	r2, r3
 801085e:	d004      	beq.n	801086a <__swbuf_r+0x5a>
 8010860:	89a3      	ldrh	r3, [r4, #12]
 8010862:	07db      	lsls	r3, r3, #31
 8010864:	d506      	bpl.n	8010874 <__swbuf_r+0x64>
 8010866:	2e0a      	cmp	r6, #10
 8010868:	d104      	bne.n	8010874 <__swbuf_r+0x64>
 801086a:	4621      	mov	r1, r4
 801086c:	4628      	mov	r0, r5
 801086e:	f7ff ff73 	bl	8010758 <_fflush_r>
 8010872:	b938      	cbnz	r0, 8010884 <__swbuf_r+0x74>
 8010874:	4638      	mov	r0, r7
 8010876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010878:	4621      	mov	r1, r4
 801087a:	4628      	mov	r0, r5
 801087c:	f000 f806 	bl	801088c <__swsetup_r>
 8010880:	2800      	cmp	r0, #0
 8010882:	d0d5      	beq.n	8010830 <__swbuf_r+0x20>
 8010884:	f04f 37ff 	mov.w	r7, #4294967295
 8010888:	e7f4      	b.n	8010874 <__swbuf_r+0x64>
	...

0801088c <__swsetup_r>:
 801088c:	b538      	push	{r3, r4, r5, lr}
 801088e:	4b2a      	ldr	r3, [pc, #168]	; (8010938 <__swsetup_r+0xac>)
 8010890:	4605      	mov	r5, r0
 8010892:	6818      	ldr	r0, [r3, #0]
 8010894:	460c      	mov	r4, r1
 8010896:	b118      	cbz	r0, 80108a0 <__swsetup_r+0x14>
 8010898:	6a03      	ldr	r3, [r0, #32]
 801089a:	b90b      	cbnz	r3, 80108a0 <__swsetup_r+0x14>
 801089c:	f7ff f9fa 	bl	800fc94 <__sinit>
 80108a0:	89a3      	ldrh	r3, [r4, #12]
 80108a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80108a6:	0718      	lsls	r0, r3, #28
 80108a8:	d422      	bmi.n	80108f0 <__swsetup_r+0x64>
 80108aa:	06d9      	lsls	r1, r3, #27
 80108ac:	d407      	bmi.n	80108be <__swsetup_r+0x32>
 80108ae:	2309      	movs	r3, #9
 80108b0:	602b      	str	r3, [r5, #0]
 80108b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80108b6:	81a3      	strh	r3, [r4, #12]
 80108b8:	f04f 30ff 	mov.w	r0, #4294967295
 80108bc:	e034      	b.n	8010928 <__swsetup_r+0x9c>
 80108be:	0758      	lsls	r0, r3, #29
 80108c0:	d512      	bpl.n	80108e8 <__swsetup_r+0x5c>
 80108c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108c4:	b141      	cbz	r1, 80108d8 <__swsetup_r+0x4c>
 80108c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108ca:	4299      	cmp	r1, r3
 80108cc:	d002      	beq.n	80108d4 <__swsetup_r+0x48>
 80108ce:	4628      	mov	r0, r5
 80108d0:	f7ff faf0 	bl	800feb4 <_free_r>
 80108d4:	2300      	movs	r3, #0
 80108d6:	6363      	str	r3, [r4, #52]	; 0x34
 80108d8:	89a3      	ldrh	r3, [r4, #12]
 80108da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80108de:	81a3      	strh	r3, [r4, #12]
 80108e0:	2300      	movs	r3, #0
 80108e2:	6063      	str	r3, [r4, #4]
 80108e4:	6923      	ldr	r3, [r4, #16]
 80108e6:	6023      	str	r3, [r4, #0]
 80108e8:	89a3      	ldrh	r3, [r4, #12]
 80108ea:	f043 0308 	orr.w	r3, r3, #8
 80108ee:	81a3      	strh	r3, [r4, #12]
 80108f0:	6923      	ldr	r3, [r4, #16]
 80108f2:	b94b      	cbnz	r3, 8010908 <__swsetup_r+0x7c>
 80108f4:	89a3      	ldrh	r3, [r4, #12]
 80108f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80108fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108fe:	d003      	beq.n	8010908 <__swsetup_r+0x7c>
 8010900:	4621      	mov	r1, r4
 8010902:	4628      	mov	r0, r5
 8010904:	f000 f850 	bl	80109a8 <__smakebuf_r>
 8010908:	89a0      	ldrh	r0, [r4, #12]
 801090a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801090e:	f010 0301 	ands.w	r3, r0, #1
 8010912:	d00a      	beq.n	801092a <__swsetup_r+0x9e>
 8010914:	2300      	movs	r3, #0
 8010916:	60a3      	str	r3, [r4, #8]
 8010918:	6963      	ldr	r3, [r4, #20]
 801091a:	425b      	negs	r3, r3
 801091c:	61a3      	str	r3, [r4, #24]
 801091e:	6923      	ldr	r3, [r4, #16]
 8010920:	b943      	cbnz	r3, 8010934 <__swsetup_r+0xa8>
 8010922:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010926:	d1c4      	bne.n	80108b2 <__swsetup_r+0x26>
 8010928:	bd38      	pop	{r3, r4, r5, pc}
 801092a:	0781      	lsls	r1, r0, #30
 801092c:	bf58      	it	pl
 801092e:	6963      	ldrpl	r3, [r4, #20]
 8010930:	60a3      	str	r3, [r4, #8]
 8010932:	e7f4      	b.n	801091e <__swsetup_r+0x92>
 8010934:	2000      	movs	r0, #0
 8010936:	e7f7      	b.n	8010928 <__swsetup_r+0x9c>
 8010938:	2400013c 	.word	0x2400013c

0801093c <_sbrk_r>:
 801093c:	b538      	push	{r3, r4, r5, lr}
 801093e:	4d06      	ldr	r5, [pc, #24]	; (8010958 <_sbrk_r+0x1c>)
 8010940:	2300      	movs	r3, #0
 8010942:	4604      	mov	r4, r0
 8010944:	4608      	mov	r0, r1
 8010946:	602b      	str	r3, [r5, #0]
 8010948:	f7f1 f8a2 	bl	8001a90 <_sbrk>
 801094c:	1c43      	adds	r3, r0, #1
 801094e:	d102      	bne.n	8010956 <_sbrk_r+0x1a>
 8010950:	682b      	ldr	r3, [r5, #0]
 8010952:	b103      	cbz	r3, 8010956 <_sbrk_r+0x1a>
 8010954:	6023      	str	r3, [r4, #0]
 8010956:	bd38      	pop	{r3, r4, r5, pc}
 8010958:	24001564 	.word	0x24001564

0801095c <__swhatbuf_r>:
 801095c:	b570      	push	{r4, r5, r6, lr}
 801095e:	460c      	mov	r4, r1
 8010960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010964:	2900      	cmp	r1, #0
 8010966:	b096      	sub	sp, #88	; 0x58
 8010968:	4615      	mov	r5, r2
 801096a:	461e      	mov	r6, r3
 801096c:	da0d      	bge.n	801098a <__swhatbuf_r+0x2e>
 801096e:	89a3      	ldrh	r3, [r4, #12]
 8010970:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010974:	f04f 0100 	mov.w	r1, #0
 8010978:	bf0c      	ite	eq
 801097a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801097e:	2340      	movne	r3, #64	; 0x40
 8010980:	2000      	movs	r0, #0
 8010982:	6031      	str	r1, [r6, #0]
 8010984:	602b      	str	r3, [r5, #0]
 8010986:	b016      	add	sp, #88	; 0x58
 8010988:	bd70      	pop	{r4, r5, r6, pc}
 801098a:	466a      	mov	r2, sp
 801098c:	f000 f848 	bl	8010a20 <_fstat_r>
 8010990:	2800      	cmp	r0, #0
 8010992:	dbec      	blt.n	801096e <__swhatbuf_r+0x12>
 8010994:	9901      	ldr	r1, [sp, #4]
 8010996:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801099a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801099e:	4259      	negs	r1, r3
 80109a0:	4159      	adcs	r1, r3
 80109a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109a6:	e7eb      	b.n	8010980 <__swhatbuf_r+0x24>

080109a8 <__smakebuf_r>:
 80109a8:	898b      	ldrh	r3, [r1, #12]
 80109aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80109ac:	079d      	lsls	r5, r3, #30
 80109ae:	4606      	mov	r6, r0
 80109b0:	460c      	mov	r4, r1
 80109b2:	d507      	bpl.n	80109c4 <__smakebuf_r+0x1c>
 80109b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80109b8:	6023      	str	r3, [r4, #0]
 80109ba:	6123      	str	r3, [r4, #16]
 80109bc:	2301      	movs	r3, #1
 80109be:	6163      	str	r3, [r4, #20]
 80109c0:	b002      	add	sp, #8
 80109c2:	bd70      	pop	{r4, r5, r6, pc}
 80109c4:	ab01      	add	r3, sp, #4
 80109c6:	466a      	mov	r2, sp
 80109c8:	f7ff ffc8 	bl	801095c <__swhatbuf_r>
 80109cc:	9900      	ldr	r1, [sp, #0]
 80109ce:	4605      	mov	r5, r0
 80109d0:	4630      	mov	r0, r6
 80109d2:	f7ff fadb 	bl	800ff8c <_malloc_r>
 80109d6:	b948      	cbnz	r0, 80109ec <__smakebuf_r+0x44>
 80109d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109dc:	059a      	lsls	r2, r3, #22
 80109de:	d4ef      	bmi.n	80109c0 <__smakebuf_r+0x18>
 80109e0:	f023 0303 	bic.w	r3, r3, #3
 80109e4:	f043 0302 	orr.w	r3, r3, #2
 80109e8:	81a3      	strh	r3, [r4, #12]
 80109ea:	e7e3      	b.n	80109b4 <__smakebuf_r+0xc>
 80109ec:	89a3      	ldrh	r3, [r4, #12]
 80109ee:	6020      	str	r0, [r4, #0]
 80109f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109f4:	81a3      	strh	r3, [r4, #12]
 80109f6:	9b00      	ldr	r3, [sp, #0]
 80109f8:	6163      	str	r3, [r4, #20]
 80109fa:	9b01      	ldr	r3, [sp, #4]
 80109fc:	6120      	str	r0, [r4, #16]
 80109fe:	b15b      	cbz	r3, 8010a18 <__smakebuf_r+0x70>
 8010a00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a04:	4630      	mov	r0, r6
 8010a06:	f000 f81d 	bl	8010a44 <_isatty_r>
 8010a0a:	b128      	cbz	r0, 8010a18 <__smakebuf_r+0x70>
 8010a0c:	89a3      	ldrh	r3, [r4, #12]
 8010a0e:	f023 0303 	bic.w	r3, r3, #3
 8010a12:	f043 0301 	orr.w	r3, r3, #1
 8010a16:	81a3      	strh	r3, [r4, #12]
 8010a18:	89a3      	ldrh	r3, [r4, #12]
 8010a1a:	431d      	orrs	r5, r3
 8010a1c:	81a5      	strh	r5, [r4, #12]
 8010a1e:	e7cf      	b.n	80109c0 <__smakebuf_r+0x18>

08010a20 <_fstat_r>:
 8010a20:	b538      	push	{r3, r4, r5, lr}
 8010a22:	4d07      	ldr	r5, [pc, #28]	; (8010a40 <_fstat_r+0x20>)
 8010a24:	2300      	movs	r3, #0
 8010a26:	4604      	mov	r4, r0
 8010a28:	4608      	mov	r0, r1
 8010a2a:	4611      	mov	r1, r2
 8010a2c:	602b      	str	r3, [r5, #0]
 8010a2e:	f7f1 f806 	bl	8001a3e <_fstat>
 8010a32:	1c43      	adds	r3, r0, #1
 8010a34:	d102      	bne.n	8010a3c <_fstat_r+0x1c>
 8010a36:	682b      	ldr	r3, [r5, #0]
 8010a38:	b103      	cbz	r3, 8010a3c <_fstat_r+0x1c>
 8010a3a:	6023      	str	r3, [r4, #0]
 8010a3c:	bd38      	pop	{r3, r4, r5, pc}
 8010a3e:	bf00      	nop
 8010a40:	24001564 	.word	0x24001564

08010a44 <_isatty_r>:
 8010a44:	b538      	push	{r3, r4, r5, lr}
 8010a46:	4d06      	ldr	r5, [pc, #24]	; (8010a60 <_isatty_r+0x1c>)
 8010a48:	2300      	movs	r3, #0
 8010a4a:	4604      	mov	r4, r0
 8010a4c:	4608      	mov	r0, r1
 8010a4e:	602b      	str	r3, [r5, #0]
 8010a50:	f7f1 f805 	bl	8001a5e <_isatty>
 8010a54:	1c43      	adds	r3, r0, #1
 8010a56:	d102      	bne.n	8010a5e <_isatty_r+0x1a>
 8010a58:	682b      	ldr	r3, [r5, #0]
 8010a5a:	b103      	cbz	r3, 8010a5e <_isatty_r+0x1a>
 8010a5c:	6023      	str	r3, [r4, #0]
 8010a5e:	bd38      	pop	{r3, r4, r5, pc}
 8010a60:	24001564 	.word	0x24001564

08010a64 <_init>:
 8010a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a66:	bf00      	nop
 8010a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a6a:	bc08      	pop	{r3}
 8010a6c:	469e      	mov	lr, r3
 8010a6e:	4770      	bx	lr

08010a70 <_fini>:
 8010a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a72:	bf00      	nop
 8010a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a76:	bc08      	pop	{r3}
 8010a78:	469e      	mov	lr, r3
 8010a7a:	4770      	bx	lr
