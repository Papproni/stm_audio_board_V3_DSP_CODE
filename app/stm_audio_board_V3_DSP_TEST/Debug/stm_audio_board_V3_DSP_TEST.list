
stm_audio_board_V3_DSP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .sdram_section 000bb840  c0000000  c0000000  00040000  2**2
                  ALLOC
  2 .text         00012858  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000310  08012b28  08012b28  00022b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012e38  08012e38  00022e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012e3c  08012e3c  00022e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004d0  24000000  08012e40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000c450  240004d0  08013310  000304d0  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  2400c920  08013310  0003c920  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000304d0  2**0
                  CONTENTS, READONLY
 10 .comment      000000b8  00000000  00000000  000304fe  2**0
                  CONTENTS, READONLY
 11 .debug_info   00026e0c  00000000  00000000  000305b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000063c0  00000000  00000000  000573c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000019e0  00000000  00000000  0005d788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000012d3  00000000  00000000  0005f168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039b08  00000000  00000000  0006043b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000296a5  00000000  00000000  00099f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00150cf7  00000000  00000000  000c35e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000708c  00000000  00000000  002142e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000082  00000000  00000000  0021b36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000017a3  00000000  00000000  0021b3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000070  00000000  00000000  0021cb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240004d0 	.word	0x240004d0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012b10 	.word	0x08012b10

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240004d4 	.word	0x240004d4
 800030c:	08012b10 	.word	0x08012b10

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <ad1939_write_reg>:
#include "AD1939_driver.h"


// send bytes
int ad1939_write_reg(uint8_t reg_address, uint8_t data){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af02      	add	r7, sp, #8
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
	int8_t retval = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	73fb      	strb	r3, [r7, #15]
	TXdata[0] = AD1939_Global_Address_Write;
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <ad1939_write_reg+0x4c>)
 80003c6:	2208      	movs	r2, #8
 80003c8:	701a      	strb	r2, [r3, #0]
	TXdata[1] = reg_address;
 80003ca:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <ad1939_write_reg+0x4c>)
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	7053      	strb	r3, [r2, #1]
	TXdata[2] = data;
 80003d0:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <ad1939_write_reg+0x4c>)
 80003d2:	79bb      	ldrb	r3, [r7, #6]
 80003d4:	7093      	strb	r3, [r2, #2]

//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <ad1939_write_reg+0x50>)
 80003d8:	6818      	ldr	r0, [r3, #0]
 80003da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003de:	9300      	str	r3, [sp, #0]
 80003e0:	2303      	movs	r3, #3
 80003e2:	4a08      	ldr	r2, [pc, #32]	; (8000404 <ad1939_write_reg+0x54>)
 80003e4:	4905      	ldr	r1, [pc, #20]	; (80003fc <ad1939_write_reg+0x4c>)
 80003e6:	f00b fbb1 	bl	800bb4c <HAL_SPI_TransmitReceive>
 80003ea:	4603      	mov	r3, r0
 80003ec:	73fb      	strb	r3, [r7, #15]
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 //HAL_Delay(10);
	return retval;
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3710      	adds	r7, #16
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	240004f0 	.word	0x240004f0
 8000400:	240004ec 	.word	0x240004ec
 8000404:	240004f4 	.word	0x240004f4

08000408 <ad1939_pll_locked>:

	return retval;
}

int ad1939_pll_locked()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af02      	add	r7, sp, #8
	TXdata[0] = AD1939_Global_Address_Read;
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <ad1939_pll_locked+0x3c>)
 8000410:	2209      	movs	r2, #9
 8000412:	701a      	strb	r2, [r3, #0]
	TXdata[1] = AD1939_PLL_Control_1;
 8000414:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <ad1939_pll_locked+0x3c>)
 8000416:	2201      	movs	r2, #1
 8000418:	705a      	strb	r2, [r3, #1]
	TXdata[2] = 0b00000100;
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <ad1939_pll_locked+0x3c>)
 800041c:	2204      	movs	r2, #4
 800041e:	709a      	strb	r2, [r3, #2]
	HAL_Delay(10);
 8000420:	200a      	movs	r0, #10
 8000422:	f002 fb6f 	bl	8002b04 <HAL_Delay>
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <ad1939_pll_locked+0x40>)
 8000428:	6818      	ldr	r0, [r3, #0]
 800042a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2303      	movs	r3, #3
 8000432:	4a06      	ldr	r2, [pc, #24]	; (800044c <ad1939_pll_locked+0x44>)
 8000434:	4903      	ldr	r1, [pc, #12]	; (8000444 <ad1939_pll_locked+0x3c>)
 8000436:	f00b fb89 	bl	800bb4c <HAL_SPI_TransmitReceive>
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 return 0;
 800043a:	2300      	movs	r3, #0
}
 800043c:	4618      	mov	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	240004f0 	.word	0x240004f0
 8000448:	240004ec 	.word	0x240004ec
 800044c:	240004f4 	.word	0x240004f4

08000450 <ad1939_init>:

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
    AD1939_spi = hspi_codec;
 8000458:	4a3d      	ldr	r2, [pc, #244]	; (8000550 <ad1939_init+0x100>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6013      	str	r3, [r2, #0]

    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 800045e:	21be      	movs	r1, #190	; 0xbe
 8000460:	2000      	movs	r0, #0
 8000462:	f7ff ffa5 	bl	80003b0 <ad1939_write_reg>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d002      	beq.n	8000472 <ad1939_init+0x22>
 800046c:	f04f 33ff 	mov.w	r3, #4294967295
 8000470:	e069      	b.n	8000546 <ad1939_init+0xf6>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 8000472:	2104      	movs	r1, #4
 8000474:	2001      	movs	r0, #1
 8000476:	f7ff ff9b 	bl	80003b0 <ad1939_write_reg>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d002      	beq.n	8000486 <ad1939_init+0x36>
 8000480:	f04f 33ff 	mov.w	r3, #4294967295
 8000484:	e05f      	b.n	8000546 <ad1939_init+0xf6>





    HAL_Delay(100);
 8000486:	2064      	movs	r0, #100	; 0x64
 8000488:	f002 fb3c 	bl	8002b04 <HAL_Delay>

    if(ad1939_pll_locked()){
 800048c:	f7ff ffbc 	bl	8000408 <ad1939_pll_locked>
    // 192 khz
    //    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000100)) return -1;
    // 96 khz
//            if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000010)) return -1;
    // 48 Khz
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b01000000)) return -1;
 8000490:	2140      	movs	r1, #64	; 0x40
 8000492:	2002      	movs	r0, #2
 8000494:	f7ff ff8c 	bl	80003b0 <ad1939_write_reg>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d002      	beq.n	80004a4 <ad1939_init+0x54>
 800049e:	f04f 33ff 	mov.w	r3, #4294967295
 80004a2:	e050      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000100)) return -1; // Slave setup
 80004a4:	2104      	movs	r1, #4
 80004a6:	2003      	movs	r0, #3
 80004a8:	f7ff ff82 	bl	80003b0 <ad1939_write_reg>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d002      	beq.n	80004b8 <ad1939_init+0x68>
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295
 80004b6:	e046      	b.n	8000546 <ad1939_init+0xf6>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 80004b8:	2100      	movs	r1, #0
 80004ba:	2004      	movs	r0, #4
 80004bc:	f7ff ff78 	bl	80003b0 <ad1939_write_reg>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d002      	beq.n	80004cc <ad1939_init+0x7c>
 80004c6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ca:	e03c      	b.n	8000546 <ad1939_init+0xf6>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 80004cc:	2100      	movs	r1, #0
 80004ce:	2005      	movs	r0, #5
 80004d0:	f7ff ff6e 	bl	80003b0 <ad1939_write_reg>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d002      	beq.n	80004e0 <ad1939_init+0x90>
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	e032      	b.n	8000546 <ad1939_init+0xf6>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 80004e0:	2100      	movs	r1, #0
 80004e2:	2008      	movs	r0, #8
 80004e4:	f7ff ff64 	bl	80003b0 <ad1939_write_reg>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d002      	beq.n	80004f4 <ad1939_init+0xa4>
 80004ee:	f04f 33ff 	mov.w	r3, #4294967295
 80004f2:	e028      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 80004f4:	2100      	movs	r1, #0
 80004f6:	2009      	movs	r0, #9
 80004f8:	f7ff ff5a 	bl	80003b0 <ad1939_write_reg>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d002      	beq.n	8000508 <ad1939_init+0xb8>
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	e01e      	b.n	8000546 <ad1939_init+0xf6>
    // 192 khz
	//    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b10000000)) return -1;
    // 96khz
//        if (ad1939_write_reg(AD1939_ADC_Control_0, 0b01000000)) return -1;
        // 48 Khz
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 8000508:	2100      	movs	r1, #0
 800050a:	200e      	movs	r0, #14
 800050c:	f7ff ff50 	bl	80003b0 <ad1939_write_reg>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <ad1939_init+0xcc>
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
 800051a:	e014      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0b00100000 )) return -1;
 800051c:	2120      	movs	r1, #32
 800051e:	200f      	movs	r0, #15
 8000520:	f7ff ff46 	bl	80003b0 <ad1939_write_reg>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <ad1939_init+0xe0>
 800052a:	f04f 33ff 	mov.w	r3, #4294967295
 800052e:	e00a      	b.n	8000546 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 8000530:	2100      	movs	r1, #0
 8000532:	2010      	movs	r0, #16
 8000534:	f7ff ff3c 	bl	80003b0 <ad1939_write_reg>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d002      	beq.n	8000544 <ad1939_init+0xf4>
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	e000      	b.n	8000546 <ad1939_init+0xf6>



    return 0; // Return 0 if all writes are successful
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	240004ec 	.word	0x240004ec

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <MX_DMA_Init+0x6c>)
 800055c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000560:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <MX_DMA_Init+0x6c>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_DMA_Init+0x6c>)
 800056c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_DMA_Init+0x6c>)
 800057a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800057e:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <MX_DMA_Init+0x6c>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <MX_DMA_Init+0x6c>)
 800058a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	200b      	movs	r0, #11
 800059c:	f002 fbb1 	bl	8002d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005a0:	200b      	movs	r0, #11
 80005a2:	f002 fbc8 	bl	8002d36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2038      	movs	r0, #56	; 0x38
 80005ac:	f002 fba9 	bl	8002d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005b0:	2038      	movs	r0, #56	; 0x38
 80005b2:	f002 fbc0 	bl	8002d36 <HAL_NVIC_EnableIRQ>

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	58024400 	.word	0x58024400

080005c4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b090      	sub	sp, #64	; 0x40
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80005ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80005de:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <MX_FMC_Init+0xcc>)
 80005e0:	4a2c      	ldr	r2, [pc, #176]	; (8000694 <MX_FMC_Init+0xd0>)
 80005e2:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <MX_FMC_Init+0xcc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80005ea:	4b29      	ldr	r3, [pc, #164]	; (8000690 <MX_FMC_Init+0xcc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <MX_FMC_Init+0xcc>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80005f6:	4b26      	ldr	r3, [pc, #152]	; (8000690 <MX_FMC_Init+0xcc>)
 80005f8:	2210      	movs	r2, #16
 80005fa:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <MX_FMC_Init+0xcc>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000602:	4b23      	ldr	r3, [pc, #140]	; (8000690 <MX_FMC_Init+0xcc>)
 8000604:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000608:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <MX_FMC_Init+0xcc>)
 800060c:	2200      	movs	r2, #0
 800060e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <MX_FMC_Init+0xcc>)
 8000612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000616:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000618:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_FMC_Init+0xcc>)
 800061a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_FMC_Init+0xcc>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000626:	2310      	movs	r3, #16
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 16;
 800062a:	2310      	movs	r3, #16
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 16;
 800062e:	2310      	movs	r3, #16
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
  SdramTiming.RowCycleDelay = 16;
 8000632:	2310      	movs	r3, #16
 8000634:	633b      	str	r3, [r7, #48]	; 0x30
  SdramTiming.WriteRecoveryTime = 16;
 8000636:	2310      	movs	r3, #16
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
  SdramTiming.RPDelay = 16;
 800063a:	2310      	movs	r3, #16
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  SdramTiming.RCDDelay = 16;
 800063e:	2310      	movs	r3, #16
 8000640:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000646:	4619      	mov	r1, r3
 8000648:	4811      	ldr	r0, [pc, #68]	; (8000690 <MX_FMC_Init+0xcc>)
 800064a:	f00b f8c1 	bl	800b7d0 <HAL_SDRAM_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8000654:	f001 fcc3 	bl	8001fde <Error_Handler>

//    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 2500);


    IS42S16800J_Context_t my_sdram;
    my_sdram.TargetBank  = FMC_SDRAM_CMD_TARGET_BANK1;
 8000658:	2310      	movs	r3, #16
 800065a:	607b      	str	r3, [r7, #4]
    my_sdram.RefreshMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800065c:	2303      	movs	r3, #3
 800065e:	60bb      	str	r3, [r7, #8]
    my_sdram.RefreshRate = REFRESH_COUNT;
 8000660:	f240 63d6 	movw	r3, #1750	; 0x6d6
 8000664:	60fb      	str	r3, [r7, #12]
    my_sdram.CASLatency  = IS42S16800J_CAS_LATENCY_3;
 8000666:	2330      	movs	r3, #48	; 0x30
 8000668:	61bb      	str	r3, [r7, #24]
    my_sdram.OperationMode = IS42S16800J_OPERATING_MODE_STANDARD;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
    my_sdram.WriteBurstMode = IS42S16800J_WRITEBURST_MODE_SINGLE;
 800066e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000672:	623b      	str	r3, [r7, #32]
    my_sdram.BurstType 		= IS42S16800J_BURST_TYPE_SEQUENTIAL;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
    my_sdram.BurstLength 	= IS42S16800J_BURST_LENGTH_1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]

    IS42S16800J_Init(&hsdram1, &my_sdram);
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4619      	mov	r1, r3
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <MX_FMC_Init+0xcc>)
 8000682:	f000 fe7b 	bl	800137c <IS42S16800J_Init>
  /* USER CODE END FMC_Init 2 */
}
 8000686:	bf00      	nop
 8000688:	3740      	adds	r7, #64	; 0x40
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	240004f8 	.word	0x240004f8
 8000694:	52004140 	.word	0x52004140

08000698 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	b0b6      	sub	sp, #216	; 0xd8
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006ae:	4b5b      	ldr	r3, [pc, #364]	; (800081c <HAL_FMC_MspInit+0x184>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f040 80ae 	bne.w	8000814 <HAL_FMC_MspInit+0x17c>
    return;
  }
  FMC_Initialized = 1;
 80006b8:	4b58      	ldr	r3, [pc, #352]	; (800081c <HAL_FMC_MspInit+0x184>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	22b8      	movs	r2, #184	; 0xb8
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f010 fdbd 	bl	8011246 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80006cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80006d8:	2300      	movs	r3, #0
 80006da:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	4618      	mov	r0, r3
 80006e2:	f007 fe9d 	bl	8008420 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80006ec:	f001 fc77 	bl	8001fde <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006f0:	4b4b      	ldr	r3, [pc, #300]	; (8000820 <HAL_FMC_MspInit+0x188>)
 80006f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80006f6:	4a4a      	ldr	r2, [pc, #296]	; (8000820 <HAL_FMC_MspInit+0x188>)
 80006f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006fc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000700:	4b47      	ldr	r3, [pc, #284]	; (8000820 <HAL_FMC_MspInit+0x188>)
 8000702:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800070e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000712:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000728:	230c      	movs	r3, #12
 800072a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800072e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000732:	4619      	mov	r1, r3
 8000734:	483b      	ldr	r0, [pc, #236]	; (8000824 <HAL_FMC_MspInit+0x18c>)
 8000736:	f004 fbf9 	bl	8004f2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800073a:	230d      	movs	r3, #13
 800073c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000752:	230c      	movs	r3, #12
 8000754:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000758:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800075c:	4619      	mov	r1, r3
 800075e:	4832      	ldr	r0, [pc, #200]	; (8000828 <HAL_FMC_MspInit+0x190>)
 8000760:	f004 fbe4 	bl	8004f2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000764:	2310      	movs	r3, #16
 8000766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800077c:	230c      	movs	r3, #12
 800077e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000786:	4619      	mov	r1, r3
 8000788:	4828      	ldr	r0, [pc, #160]	; (800082c <HAL_FMC_MspInit+0x194>)
 800078a:	f004 fbcf 	bl	8004f2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 800078e:	f248 1311 	movw	r3, #33041	; 0x8111
 8000792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007a8:	230c      	movs	r3, #12
 80007aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007b2:	4619      	mov	r1, r3
 80007b4:	481e      	ldr	r0, [pc, #120]	; (8000830 <HAL_FMC_MspInit+0x198>)
 80007b6:	f004 fbb9 	bl	8004f2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80007ba:	f24f 7383 	movw	r3, #63363	; 0xf783
 80007be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007d4:	230c      	movs	r3, #12
 80007d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007de:	4619      	mov	r1, r3
 80007e0:	4814      	ldr	r0, [pc, #80]	; (8000834 <HAL_FMC_MspInit+0x19c>)
 80007e2:	f004 fba3 	bl	8004f2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80007e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80007ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000800:	230c      	movs	r3, #12
 8000802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000806:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800080a:	4619      	mov	r1, r3
 800080c:	480a      	ldr	r0, [pc, #40]	; (8000838 <HAL_FMC_MspInit+0x1a0>)
 800080e:	f004 fb8d 	bl	8004f2c <HAL_GPIO_Init>
 8000812:	e000      	b.n	8000816 <HAL_FMC_MspInit+0x17e>
    return;
 8000814:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000816:	37d8      	adds	r7, #216	; 0xd8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2400052c 	.word	0x2400052c
 8000820:	58024400 	.word	0x58024400
 8000824:	58021400 	.word	0x58021400
 8000828:	58020800 	.word	0x58020800
 800082c:	58020000 	.word	0x58020000
 8000830:	58021800 	.word	0x58021800
 8000834:	58021000 	.word	0x58021000
 8000838:	58020c00 	.word	0x58020c00

0800083c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000844:	f7ff ff28 	bl	8000698 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000866:	4b40      	ldr	r3, [pc, #256]	; (8000968 <MX_GPIO_Init+0x118>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	4a3e      	ldr	r2, [pc, #248]	; (8000968 <MX_GPIO_Init+0x118>)
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000876:	4b3c      	ldr	r3, [pc, #240]	; (8000968 <MX_GPIO_Init+0x118>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087c:	f003 0310 	and.w	r3, r3, #16
 8000880:	61bb      	str	r3, [r7, #24]
 8000882:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000884:	4b38      	ldr	r3, [pc, #224]	; (8000968 <MX_GPIO_Init+0x118>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088a:	4a37      	ldr	r2, [pc, #220]	; (8000968 <MX_GPIO_Init+0x118>)
 800088c:	f043 0320 	orr.w	r3, r3, #32
 8000890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000894:	4b34      	ldr	r3, [pc, #208]	; (8000968 <MX_GPIO_Init+0x118>)
 8000896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089a:	f003 0320 	and.w	r3, r3, #32
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	4b31      	ldr	r3, [pc, #196]	; (8000968 <MX_GPIO_Init+0x118>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <MX_GPIO_Init+0x118>)
 80008aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b2:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <MX_GPIO_Init+0x118>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c0:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_GPIO_Init+0x118>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c6:	4a28      	ldr	r2, [pc, #160]	; (8000968 <MX_GPIO_Init+0x118>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d0:	4b25      	ldr	r3, [pc, #148]	; (8000968 <MX_GPIO_Init+0x118>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b22      	ldr	r3, [pc, #136]	; (8000968 <MX_GPIO_Init+0x118>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	4a20      	ldr	r2, [pc, #128]	; (8000968 <MX_GPIO_Init+0x118>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_GPIO_Init+0x118>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_GPIO_Init+0x118>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000902:	4a19      	ldr	r2, [pc, #100]	; (8000968 <MX_GPIO_Init+0x118>)
 8000904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000908:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_GPIO_Init+0x118>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_GPIO_Init+0x118>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	4a11      	ldr	r2, [pc, #68]	; (8000968 <MX_GPIO_Init+0x118>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_GPIO_Init+0x118>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	f003 0308 	and.w	r3, r3, #8
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2120      	movs	r1, #32
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <MX_GPIO_Init+0x11c>)
 800093e:	f004 fc9d 	bl	800527c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000942:	2320      	movs	r3, #32
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094a:	2301      	movs	r3, #1
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_GPIO_Init+0x11c>)
 800095a:	f004 fae7 	bl	8004f2c <HAL_GPIO_Init>

}
 800095e:	bf00      	nop
 8000960:	3730      	adds	r7, #48	; 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	58024400 	.word	0x58024400
 800096c:	58021800 	.word	0x58021800

08000970 <calculate_buffer_location>:
 * 		calculate_buffer_location()
 * DESC:
 * 		calculates the position in the buffer where the delayed signal should be read from
 * 		For now this will only use the time_buffer_u32
 */
static void calculate_buffer_location(struct delay_effects_st* self){
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	// current_pointer + buffer[time]
	self->delayed_counter_u32 = self->current_counter_u32 + self->parameters_st.time_in_buffer_u32;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 800097e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000988:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 800098c:	4413      	add	r3, r2
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	f502 22ba 	add.w	r2, r2, #380928	; 0x5d000
 8000994:	f8c2 3c0c 	str.w	r3, [r2, #3084]	; 0xc0c

	// if delay sample is bigger than the buffer go back
	if(self->delayed_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 800099e:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <calculate_buffer_location+0x5c>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d90b      	bls.n	80009c0 <calculate_buffer_location+0x50>
		self->delayed_counter_u32 = self->delayed_counter_u32- (DELAY_BUFFER_LENGTH-1);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 80009ae:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <calculate_buffer_location+0x60>)
 80009b4:	4413      	add	r3, r2
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	f502 22ba 	add.w	r2, r2, #380928	; 0x5d000
 80009bc:	f8c2 3c0c 	str.w	r3, [r2, #3084]	; 0xc0c
	}
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	000176ff 	.word	0x000176ff
 80009d0:	fffe8901 	.word	0xfffe8901

080009d4 <increment_current_sample_counter>:
 * FUNC:
 * 		increment_current_sample_counter()
 * DESC:
 * 		Increments the current sample counter
 */
static void increment_current_sample_counter(struct delay_effects_st* self){
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	self->current_counter_u32++;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 80009e2:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
 80009e6:	3301      	adds	r3, #1
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	f502 22ba 	add.w	r2, r2, #380928	; 0x5d000
 80009ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
	if(self->current_counter_u32 > (DELAY_BUFFER_LENGTH-1) ){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 80009f8:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <increment_current_sample_counter+0x48>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d906      	bls.n	8000a10 <increment_current_sample_counter+0x3c>
		self->current_counter_u32 = 0;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000a08:	461a      	mov	r2, r3
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
	}
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	000176ff 	.word	0x000176ff

08000a20 <get_delayed_signal>:
 * FUNC:
 * 		get_delayed_signal()
 * DESC:
 * 		Returns the delayed signal value stored in buffer
 */
static int32_t get_delayed_signal(struct delay_effects_st* self){
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	return self->buffer_ai32[self->delayed_counter_u32];
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000a2e:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3202      	adds	r2, #2
 8000a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <callback>:
 * FUNC:
 * 		callback()
 * DESC:
 * 		Delay algorithm
 */
static int32_t callback(struct delay_effects_st* self,int32_t input_signal_i32){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	ed2d 8b04 	vpush	{d8-d9}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]

	self->input_i32 = input_signal_i32;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	601a      	str	r2, [r3, #0]
	calculate_buffer_location(self);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ff87 	bl	8000970 <calculate_buffer_location>

	// delay effect
	int32_t delayed_sample_i32 = get_delayed_signal(self);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff ffdc 	bl	8000a20 <get_delayed_signal>
 8000a68:	60f8      	str	r0, [r7, #12]

	// feedback calculation input,delayed,feedback
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000a70:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3202      	adds	r2, #2
 8000a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a7c:	ee07 3a90 	vmov	s15, r3
 8000a80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000a8a:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 8000a8e:	edd3 7a00 	vldr	s15, [r3]
 8000a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a9a:	ee17 0a90 	vmov	r0, s15
													(int32_t)( (float)self->input_i32 * (1.0 - self->parameters_st.feedback_gain_f32));
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	ee07 3a90 	vmov	s15, r3
 8000aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aaa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000ab4:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 8000ab8:	edd3 7a00 	vldr	s15, [r3]
 8000abc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac0:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000ac4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000ac8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000acc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ad0:	ee17 1a90 	vmov	r1, s15
	self->buffer_ai32[self->current_counter_u32] = 	(int32_t)( (float)self->buffer_ai32[self->delayed_counter_u32] * self->parameters_st.feedback_gain_f32) +
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000ada:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8000ade:	4401      	add	r1, r0
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3202      	adds	r2, #2
 8000ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000af8:	f603 432c 	addw	r3, r3, #3116	; 0xc2c
 8000afc:	edd3 7a00 	vldr	s15, [r3]
 8000b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b04:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						(float)self->input_i32*(1.0 - self->parameters_st.mix_f32);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	ee07 3a90 	vmov	s15, r3
 8000b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b14:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000b1e:	f603 432c 	addw	r3, r3, #3116	; 0xc2c
 8000b22:	edd3 7a00 	vldr	s15, [r3]
 8000b26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b2a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8000b2e:	ee34 7b47 	vsub.f64	d7, d4, d7
 8000b32:	ee25 7b07 	vmul.f64	d7, d5, d7
	self->output_i32 = (float)delayed_sample_i32*self->parameters_st.mix_f32 +
 8000b36:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b3a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b3e:	ee17 2a90 	vmov	r2, s15
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	605a      	str	r2, [r3, #4]

	increment_current_sample_counter(self);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff44 	bl	80009d4 <increment_current_sample_counter>

	// modulation
	if( self->modulation_on_u8 ){
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000b52:	f893 3c10 	ldrb.w	r3, [r3, #3088]	; 0xc10
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d04b      	beq.n	8000bf2 <callback+0x1aa>
		self->parameters_st.time_in_buffer_u32 = DELAY_BUFFER_LENGTH - self->parameters_st.modulation_base_u32 + self->parameters_st.modulation_amplitude_i32*sin((float)self->parameters_st.modulation_counter_u32/(float)self->parameters_st.modulation_in_buffer_u32*6.28);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000b60:	f8d3 2c28 	ldr.w	r2, [r3, #3112]	; 0xc28
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <callback+0x1c8>)
 8000b66:	1a9b      	subs	r3, r3, r2
 8000b68:	ee07 3a90 	vmov	s15, r3
 8000b6c:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000b76:	f8d3 3c24 	ldr.w	r3, [r3, #3108]	; 0xc24
 8000b7a:	ee07 3a90 	vmov	s15, r3
 8000b7e:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000b88:	f8d3 3c20 	ldr.w	r3, [r3, #3104]	; 0xc20
 8000b8c:	ee07 3a90 	vmov	s15, r3
 8000b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000b9a:	f8d3 3c1c 	ldr.w	r3, [r3, #3100]	; 0xc1c
 8000b9e:	ee07 3a90 	vmov	s15, r3
 8000ba2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000baa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bae:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000c08 <callback+0x1c0>
 8000bb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bb6:	eeb0 0b47 	vmov.f64	d0, d7
 8000bba:	f011 f999 	bl	8011ef0 <sin>
 8000bbe:	eeb0 7b40 	vmov.f64	d7, d0
 8000bc2:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000bc6:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000bca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bce:	ee17 2a90 	vmov	r2, s15
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000bd8:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18
		self->parameters_st.modulation_counter_u32++;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000be2:	f8d3 3c20 	ldr.w	r3, [r3, #3104]	; 0xc20
 8000be6:	3301      	adds	r3, #1
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	f502 22ba 	add.w	r2, r2, #380928	; 0x5d000
 8000bee:	f8c2 3c20 	str.w	r3, [r2, #3104]	; 0xc20
	}

	return self->output_i32;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	ecbd 8b04 	vpop	{d8-d9}
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	f3af 8000 	nop.w
 8000c08:	51eb851f 	.word	0x51eb851f
 8000c0c:	40191eb8 	.word	0x40191eb8
 8000c10:	00017700 	.word	0x00017700

08000c14 <init_guitar_effect_delay>:
 * FUNC:
 * 		init_guitar_effect_delay()
 * DESC:
 * 		Sets basic paramters and function pointers to the struct
 */
void init_guitar_effect_delay(struct delay_effects_st* self){
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

	// set basic parameters
	self->parameters_st.time_in_buffer_u32 			= 80000;	// 12ms delay
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <init_guitar_effect_delay+0xc4>)
 8000c26:	f8c2 3c18 	str.w	r3, [r2, #3096]	; 0xc18
	self->modulation_on_u8 							= 0;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000c30:	2200      	movs	r2, #0
 8000c32:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
	self->parameters_st.modulation_counter_u32 		= 0;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f8c2 3c20 	str.w	r3, [r2, #3104]	; 0xc20
	self->parameters_st.modulation_in_buffer_u32 	= 25000;						// 1ms
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000c50:	f8c2 3c1c 	str.w	r3, [r2, #3100]	; 0xc1c
	self->parameters_st.modulation_amplitude_i32	= 20;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2314      	movs	r3, #20
 8000c5e:	f8c2 3c24 	str.w	r3, [r2, #3108]	; 0xc24
	self->parameters_st.modulation_base_u32			= 50;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000c68:	461a      	mov	r2, r3
 8000c6a:	2332      	movs	r3, #50	; 0x32
 8000c6c:	f8c2 3c28 	str.w	r3, [r2, #3112]	; 0xc28
	self->parameters_st.mix_f32						= 0.3; 		// 50%
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000c76:	f603 432c 	addw	r3, r3, #3116	; 0xc2c
 8000c7a:	4a18      	ldr	r2, [pc, #96]	; (8000cdc <init_guitar_effect_delay+0xc8>)
 8000c7c:	601a      	str	r2, [r3, #0]
	self->parameters_st.feedback_gain_f32			= 0.5; 		// 50%
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000c84:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 8000c88:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000c8c:	601a      	str	r2, [r3, #0]


	self->current_counter_u32 = 0;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000c94:	461a      	mov	r2, r3
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08

	for(int i = 0; i<DELAY_BUFFER_LENGTH;i++){
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	e008      	b.n	8000cb4 <init_guitar_effect_delay+0xa0>
		self->buffer_ai32[i] = 0;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	3202      	adds	r2, #2
 8000ca8:	2100      	movs	r1, #0
 8000caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i<DELAY_BUFFER_LENGTH;i++){
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <init_guitar_effect_delay+0xcc>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	ddf2      	ble.n	8000ca2 <init_guitar_effect_delay+0x8e>
	}
	// add function pointers
	self->callback = callback;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <init_guitar_effect_delay+0xd0>)
 8000cc6:	f8c2 3c38 	str.w	r3, [r2, #3128]	; 0xc38
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	00013880 	.word	0x00013880
 8000cdc:	3e99999a 	.word	0x3e99999a
 8000ce0:	000176ff 	.word	0x000176ff
 8000ce4:	08000a49 	.word	0x08000a49

08000ce8 <set_volumes>:
 		-0.00544064948788215
 };



static void set_volumes(struct octave_effects_st* self){
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	// reset output
	self->output_f32 = 0;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f04f 0200 	mov.w	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]

	// calculate the new output defined by the voluem params
	self->output_f32 += self->input_f32 		* self->volumes_st.clean_f32;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	ed93 7a06 	vldr	s14, [r3, #24]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	edd3 6a05 	vldr	s13, [r3, #20]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	edc3 7a06 	vstr	s15, [r3, #24]
	self->output_f32 += self->octave_up_1_f32 	* self->volumes_st.up_1_f32;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	ed93 7a06 	vldr	s14, [r3, #24]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	edd3 6a07 	vldr	s13, [r3, #28]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	edc3 7a06 	vstr	s15, [r3, #24]
	self->output_f32 += self->octave_down_1_f32 * self->volumes_st.sub_1_f32;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	ed93 7a06 	vldr	s14, [r3, #24]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <subbandfilter_calculation>:


// SUBBAND FILTER FUNCTION - DIRECT FORM 2 - normalfunction exectime: ~6us
static void subbandfilter_calculation(struct octave_effects_st* self){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  float32_t input_f32=self->input_f32;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	60fb      	str	r3, [r7, #12]
  // set d[n], d[n-1], d[n-2]
  for(int i=0;i<numberofsubbands;i++){
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	e024      	b.n	8000dc2 <subbandfilter_calculation+0x5e>
//			  subbandfilter_input[i]	= input_f32;
	  self->subbandfilter_dn2[i]		= self->subbandfilter_dn1[i];
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	33b6      	adds	r3, #182	; 0xb6
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	33ec      	adds	r3, #236	; 0xec
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	3304      	adds	r3, #4
 8000d90:	601a      	str	r2, [r3, #0]
	  self->subbandfilter_dn1[i]		= self->subbandfilter_dn[i];
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	337e      	adds	r3, #126	; 0x7e
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	33b6      	adds	r3, #182	; 0xb6
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	440b      	add	r3, r1
 8000daa:	601a      	str	r2, [r3, #0]
	  self->subbandfilter_dn[i]		= input_f32;
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	337e      	adds	r3, #126	; 0x7e
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	3304      	adds	r3, #4
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	601a      	str	r2, [r3, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2b36      	cmp	r3, #54	; 0x36
 8000dc6:	ddd7      	ble.n	8000d78 <subbandfilter_calculation+0x14>

  }
  // A1 = a1*y[n-1]
  arm_mult_f32(subbandfilter_a1, self->subbandfilter_yn1, self->subbandfilter_A1, numberofsubbands);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f503 6192 	add.w	r1, r3, #1168	; 0x490
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f603 2294 	addw	r2, r3, #2708	; 0xa94
 8000dd4:	2337      	movs	r3, #55	; 0x37
 8000dd6:	4842      	ldr	r0, [pc, #264]	; (8000ee0 <subbandfilter_calculation+0x17c>)
 8000dd8:	f00f ffc2 	bl	8010d60 <arm_mult_f32>
  // A2 = a2*y[n-2]
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_yn2, self->subbandfilter_A2, numberofsubbands);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f203 516c 	addw	r1, r3, #1388	; 0x56c
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f503 6237 	add.w	r2, r3, #2928	; 0xb70
 8000de8:	2337      	movs	r3, #55	; 0x37
 8000dea:	483e      	ldr	r0, [pc, #248]	; (8000ee4 <subbandfilter_calculation+0x180>)
 8000dec:	f00f ffb8 	bl	8010d60 <arm_mult_f32>

  // A = A1+A2
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f603 2094 	addw	r0, r3, #2708	; 0xa94
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f503 6137 	add.w	r1, r3, #2928	; 0xb70
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f603 424c 	addw	r2, r3, #3148	; 0xc4c
 8000e02:	2337      	movs	r3, #55	; 0x37
 8000e04:	f010 f862 	bl	8010ecc <arm_add_f32>

  // y_n=b0*d[n]+b1*d[n-1]+b2*d[n-2]

  // B1 = b1*x[n-1]
  arm_mult_f32(subbandfilter_b1, self->subbandfilter_dn1, self->subbandfilter_B1, numberofsubbands);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f503 7136 	add.w	r1, r3, #728	; 0x2d8
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f603 6204 	addw	r2, r3, #3588	; 0xe04
 8000e14:	2337      	movs	r3, #55	; 0x37
 8000e16:	4834      	ldr	r0, [pc, #208]	; (8000ee8 <subbandfilter_calculation+0x184>)
 8000e18:	f00f ffa2 	bl	8010d60 <arm_mult_f32>
  // B2 = b2*x[n-2]
  arm_mult_f32(subbandfilter_b2, self->subbandfilter_dn2, self->subbandfilter_B2, numberofsubbands);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f503 716d 	add.w	r1, r3, #948	; 0x3b4
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f503 626e 	add.w	r2, r3, #3808	; 0xee0
 8000e28:	2337      	movs	r3, #55	; 0x37
 8000e2a:	4830      	ldr	r0, [pc, #192]	; (8000eec <subbandfilter_calculation+0x188>)
 8000e2c:	f00f ff98 	bl	8010d60 <arm_mult_f32>
  // B1+B2
  arm_add_f32(self->subbandfilter_B1, self->subbandfilter_B2, self->subbandfilter_B, numberofsubbands);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f603 6004 	addw	r0, r3, #3588	; 0xe04
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f503 616e 	add.w	r1, r3, #3808	; 0xee0
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f603 72bc 	addw	r2, r3, #4028	; 0xfbc
 8000e42:	2337      	movs	r3, #55	; 0x37
 8000e44:	f010 f842 	bl	8010ecc <arm_add_f32>

  // B0 = b0*x[n]
  arm_mult_f32(subbandfilter_b0, self->subbandfilter_dn, self->subbandfilter_B0, numberofsubbands);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f603 5228 	addw	r2, r3, #3368	; 0xd28
 8000e54:	2337      	movs	r3, #55	; 0x37
 8000e56:	4826      	ldr	r0, [pc, #152]	; (8000ef0 <subbandfilter_calculation+0x18c>)
 8000e58:	f00f ff82 	bl	8010d60 <arm_mult_f32>

  // y=B0+B1+B2
  arm_add_f32(self->subbandfilter_B, self->subbandfilter_B0, self->subbandfilter_B, numberofsubbands);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f603 70bc 	addw	r0, r3, #4028	; 0xfbc
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f603 5128 	addw	r1, r3, #3368	; 0xd28
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f603 72bc 	addw	r2, r3, #4028	; 0xfbc
 8000e6e:	2337      	movs	r3, #55	; 0x37
 8000e70:	f010 f82c 	bl	8010ecc <arm_add_f32>

  // y[n]= B - A
  arm_sub_f32(self->subbandfilter_B,self->subbandfilter_A, self->subbandfilter_output, numberofsubbands);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f603 70bc 	addw	r0, r3, #4028	; 0xfbc
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f603 414c 	addw	r1, r3, #3148	; 0xc4c
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8000e86:	2337      	movs	r3, #55	; 0x37
 8000e88:	f00f ff10 	bl	8010cac <arm_sub_f32>
  for(int i=0;i<numberofsubbands;i++){
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	e01e      	b.n	8000ed0 <subbandfilter_calculation+0x16c>
	  self->subbandfilter_yn2[i]		= self->subbandfilter_yn1[i];
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	f503 73ad 	add.w	r3, r3, #346	; 0x15a
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	440b      	add	r3, r1
 8000eac:	3304      	adds	r3, #4
 8000eae:	601a      	str	r2, [r3, #0]
	  self->subbandfilter_yn1[i]		= self->subbandfilter_output[i];
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	3348      	adds	r3, #72	; 0x48
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	601a      	str	r2, [r3, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	2b36      	cmp	r3, #54	; 0x36
 8000ed4:	dddd      	ble.n	8000e92 <subbandfilter_calculation+0x12e>
   }
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	24000000 	.word	0x24000000
 8000ee4:	240000dc 	.word	0x240000dc
 8000ee8:	24000530 	.word	0x24000530
 8000eec:	24000294 	.word	0x24000294
 8000ef0:	240001b8 	.word	0x240001b8

08000ef4 <subbandfilter_octave2_calculation>:


void subbandfilter_octave2_calculation(struct octave_effects_st* self){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  float32_t input_f32=self->input_f32;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	60fb      	str	r3, [r7, #12]
  // set d[n], d[n-1], d[n-2]
  for(int i=0;i<numberofsubbands;i++){
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	e028      	b.n	8000f5a <subbandfilter_octave2_calculation+0x66>
	  self->subbandfilter_octave2_dn2[i]=self->subbandfilter_octave2_dn1[i];
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	3304      	adds	r3, #4
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	440b      	add	r3, r1
 8000f24:	601a      	str	r2, [r3, #0]
	  self->subbandfilter_octave2_dn1[i]=self->subbandfilter_octave2_dn[i];
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	3304      	adds	r3, #4
 8000f42:	601a      	str	r2, [r3, #0]
	  self->subbandfilter_octave2_dn[i] = input_f32;
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	601a      	str	r2, [r3, #0]
  for(int i=0;i<numberofsubbands;i++){
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	2b36      	cmp	r3, #54	; 0x36
 8000f5e:	ddd3      	ble.n	8000f08 <subbandfilter_octave2_calculation+0x14>
  }
  // A1 = a1*y[n-1]
  arm_mult_f32(subbandfilter_a1, self->subbandfilter_octave2_yn1, self->subbandfilter_A1, numberofsubbands);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f603 01dc 	addw	r1, r3, #2268	; 0x8dc
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f603 2294 	addw	r2, r3, #2708	; 0xa94
 8000f6c:	2337      	movs	r3, #55	; 0x37
 8000f6e:	4843      	ldr	r0, [pc, #268]	; (800107c <subbandfilter_octave2_calculation+0x188>)
 8000f70:	f00f fef6 	bl	8010d60 <arm_mult_f32>
  // A2 = a2*y[n-2]
  arm_mult_f32(subbandfilter_a2, self->subbandfilter_octave2_yn2, self->subbandfilter_A2, numberofsubbands);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f603 11b8 	addw	r1, r3, #2488	; 0x9b8
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f503 6237 	add.w	r2, r3, #2928	; 0xb70
 8000f80:	2337      	movs	r3, #55	; 0x37
 8000f82:	483f      	ldr	r0, [pc, #252]	; (8001080 <subbandfilter_octave2_calculation+0x18c>)
 8000f84:	f00f feec 	bl	8010d60 <arm_mult_f32>

  // A = A1+A2
  arm_add_f32(self->subbandfilter_A1, self->subbandfilter_A2, self->subbandfilter_A, numberofsubbands);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f603 2094 	addw	r0, r3, #2708	; 0xa94
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f503 6137 	add.w	r1, r3, #2928	; 0xb70
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f603 424c 	addw	r2, r3, #3148	; 0xc4c
 8000f9a:	2337      	movs	r3, #55	; 0x37
 8000f9c:	f00f ff96 	bl	8010ecc <arm_add_f32>

  // y_n=b0*d[n]+b1*d[n-1]+b2*d[n-2]

  // B1 = b1*x[n-1]
  arm_mult_f32(subbandfilter_b1, self->subbandfilter_octave2_dn1, self->subbandfilter_B1, numberofsubbands);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f203 7124 	addw	r1, r3, #1828	; 0x724
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f603 6204 	addw	r2, r3, #3588	; 0xe04
 8000fac:	2337      	movs	r3, #55	; 0x37
 8000fae:	4835      	ldr	r0, [pc, #212]	; (8001084 <subbandfilter_octave2_calculation+0x190>)
 8000fb0:	f00f fed6 	bl	8010d60 <arm_mult_f32>
  // B2 = b2*x[n-2]
  arm_mult_f32(subbandfilter_b2, self->subbandfilter_octave2_dn2, self->subbandfilter_B2, numberofsubbands);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f503 626e 	add.w	r2, r3, #3808	; 0xee0
 8000fc0:	2337      	movs	r3, #55	; 0x37
 8000fc2:	4831      	ldr	r0, [pc, #196]	; (8001088 <subbandfilter_octave2_calculation+0x194>)
 8000fc4:	f00f fecc 	bl	8010d60 <arm_mult_f32>
  // B1+B2
  arm_add_f32(self->subbandfilter_B1, self->subbandfilter_B2, self->subbandfilter_B, numberofsubbands);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f603 6004 	addw	r0, r3, #3588	; 0xe04
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f503 616e 	add.w	r1, r3, #3808	; 0xee0
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f603 72bc 	addw	r2, r3, #4028	; 0xfbc
 8000fda:	2337      	movs	r3, #55	; 0x37
 8000fdc:	f00f ff76 	bl	8010ecc <arm_add_f32>

  // B0 = b0*x[n]
  arm_mult_f32(subbandfilter_b0, self->subbandfilter_octave2_dn, self->subbandfilter_B0, numberofsubbands);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f503 61c9 	add.w	r1, r3, #1608	; 0x648
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f603 5228 	addw	r2, r3, #3368	; 0xd28
 8000fec:	2337      	movs	r3, #55	; 0x37
 8000fee:	4827      	ldr	r0, [pc, #156]	; (800108c <subbandfilter_octave2_calculation+0x198>)
 8000ff0:	f00f feb6 	bl	8010d60 <arm_mult_f32>

  // y=B0+B1+B2
  arm_add_f32(self->subbandfilter_B, self->subbandfilter_B0, self->subbandfilter_B, numberofsubbands);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f603 70bc 	addw	r0, r3, #4028	; 0xfbc
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f603 5128 	addw	r1, r3, #3368	; 0xd28
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f603 72bc 	addw	r2, r3, #4028	; 0xfbc
 8001006:	2337      	movs	r3, #55	; 0x37
 8001008:	f00f ff60 	bl	8010ecc <arm_add_f32>

  // y[n]= B - A
  arm_sub_f32(self->subbandfilter_B,self->subbandfilter_A, self->subbandfilter_output, numberofsubbands);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f603 70bc 	addw	r0, r3, #4028	; 0xfbc
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f603 414c 	addw	r1, r3, #3148	; 0xc4c
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f503 7290 	add.w	r2, r3, #288	; 0x120
 800101e:	2337      	movs	r3, #55	; 0x37
 8001020:	f00f fe44 	bl	8010cac <arm_sub_f32>
  for(int i=0;i<numberofsubbands;i++){
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	e01f      	b.n	800106a <subbandfilter_octave2_calculation+0x176>
	  self->subbandfilter_octave2_yn2[i] 	= self->subbandfilter_octave2_yn1[i];
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	f203 2336 	addw	r3, r3, #566	; 0x236
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	3304      	adds	r3, #4
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	f203 236e 	addw	r3, r3, #622	; 0x26e
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	601a      	str	r2, [r3, #0]
	  self->subbandfilter_octave2_yn1[i]  = self->subbandfilter_output[i];
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3348      	adds	r3, #72	; 0x48
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	f203 2336 	addw	r3, r3, #566	; 0x236
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	3304      	adds	r3, #4
 8001062:	601a      	str	r2, [r3, #0]
  for(int i=0;i<numberofsubbands;i++){
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	3301      	adds	r3, #1
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	2b36      	cmp	r3, #54	; 0x36
 800106e:	dddc      	ble.n	800102a <subbandfilter_octave2_calculation+0x136>
   }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	24000000 	.word	0x24000000
 8001080:	240000dc 	.word	0x240000dc
 8001084:	24000530 	.word	0x24000530
 8001088:	24000294 	.word	0x24000294
 800108c:	240001b8 	.word	0x240001b8

08001090 <algorithm_octave_1_up>:

// Calculate the octave 1 HIGHER
static void algorithm_octave_1_up(struct octave_effects_st* self){
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	// TODO
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <algorithm_octave_1_down>:

// Calculate the octave 1 LOWER
static void algorithm_octave_1_down(struct octave_effects_st* self){
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	// TODO
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <octave1up>:
static arm_biquad_cascade_df2T_instance_f32 highpass_iir_50hz_octave2;
static volatile float32_t highpass_coeff[5]={0.99538200, -1.99076399, 0.99538200, 1.99074267, -0.99078531};
static volatile float32_t highpass_state[10];


static void octave1up(struct octave_effects_st* self){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	// get absolute values of subbands
	arm_abs_f32(self->subbandfilter_output, subband_absolute_value, numberofsubbands);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80010c6:	2237      	movs	r2, #55	; 0x37
 80010c8:	4909      	ldr	r1, [pc, #36]	; (80010f0 <octave1up+0x38>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f00f ff58 	bl	8010f80 <arm_abs_f32>


	// add the octave subbands together
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up_1);
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <octave1up+0x3c>)
 80010d2:	2237      	movs	r2, #55	; 0x37
 80010d4:	4908      	ldr	r1, [pc, #32]	; (80010f8 <octave1up+0x40>)
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <octave1up+0x38>)
 80010d8:	f00f fe9c 	bl	8010e14 <arm_dot_prod_f32>

	// filter the DC component out
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz, &octave1_up_1, &octave1_up_filtered, 1);
 80010dc:	2301      	movs	r3, #1
 80010de:	4a07      	ldr	r2, [pc, #28]	; (80010fc <octave1up+0x44>)
 80010e0:	4904      	ldr	r1, [pc, #16]	; (80010f4 <octave1up+0x3c>)
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <octave1up+0x48>)
 80010e4:	f00f fc1a 	bl	801091c <arm_biquad_cascade_df2T_f32>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	240006e8 	.word	0x240006e8
 80010f4:	240007c4 	.word	0x240007c4
 80010f8:	2400060c 	.word	0x2400060c
 80010fc:	240007c8 	.word	0x240007c8
 8001100:	240007cc 	.word	0x240007cc

08001104 <octave2up>:

static void octave2up(struct octave_effects_st* self){
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	// get absolute values of subbands
	arm_abs_f32(self->subbandfilter_output, subband_absolute_value, numberofsubbands);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001112:	2237      	movs	r2, #55	; 0x37
 8001114:	4909      	ldr	r1, [pc, #36]	; (800113c <octave2up+0x38>)
 8001116:	4618      	mov	r0, r3
 8001118:	f00f ff32 	bl	8010f80 <arm_abs_f32>


	// add the octave subbands together
	arm_dot_prod_f32(subband_absolute_value, subband_ones, numberofsubbands, &octave1_up_1);
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <octave2up+0x3c>)
 800111e:	2237      	movs	r2, #55	; 0x37
 8001120:	4908      	ldr	r1, [pc, #32]	; (8001144 <octave2up+0x40>)
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <octave2up+0x38>)
 8001124:	f00f fe76 	bl	8010e14 <arm_dot_prod_f32>

	// filter the DC component out
	arm_biquad_cascade_df2T_f32(&highpass_iir_50hz_octave2, &octave1_up_1, &octave1_up_filtered, 1);
 8001128:	2301      	movs	r3, #1
 800112a:	4a07      	ldr	r2, [pc, #28]	; (8001148 <octave2up+0x44>)
 800112c:	4904      	ldr	r1, [pc, #16]	; (8001140 <octave2up+0x3c>)
 800112e:	4807      	ldr	r0, [pc, #28]	; (800114c <octave2up+0x48>)
 8001130:	f00f fbf4 	bl	801091c <arm_biquad_cascade_df2T_f32>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	240006e8 	.word	0x240006e8
 8001140:	240007c4 	.word	0x240007c4
 8001144:	2400060c 	.word	0x2400060c
 8001148:	240007c8 	.word	0x240007c8
 800114c:	240007d8 	.word	0x240007d8

08001150 <callback_octave_effect>:
static int32_t callback_octave_effect(struct octave_effects_st* self,int32_t input_i32){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]

	// 3. return value


	// LEGACY CODE
	self->input_f32 = (float32_t)input_i32;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edc3 7a05 	vstr	s15, [r3, #20]
	// +1 octave
	subbandfilter_calculation(self);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fdfa 	bl	8000d64 <subbandfilter_calculation>
	octave1up(self);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ffa1 	bl	80010b8 <octave1up>
	// save result
	self->octave_up_1_f32 = octave1_up_filtered;
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <callback_octave_effect+0xb0>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	61da      	str	r2, [r3, #28]
//
	// +2 octave
	subbandfilter_octave2_calculation(self);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff feb8 	bl	8000ef4 <subbandfilter_octave2_calculation>
	octave2up(self);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ffbd 	bl	8001104 <octave2up>
	//		 save result
	self->octave_up_2_f32 = octave1_up_filtered;
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <callback_octave_effect+0xb0>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	621a      	str	r2, [r3, #32]

	// Write to DAC
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	edd3 7a07 	vldr	s15, [r3, #28]
 8001198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80011a6:	ee27 7a27 	vmul.f32	s14, s14, s15
						(int32_t)self->octave_up_2_f32*self->volumes_st.up_2_f32 +
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80011b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80011be:	ee66 7aa7 	vmul.f32	s15, s13, s15
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 80011c2:	ee37 7a27 	vadd.f32	s14, s14, s15
						(int32_t)(self->input_f32*self->volumes_st.clean_f32);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	edd3 6a05 	vldr	s13, [r3, #20]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80011d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
						(int32_t)self->octave_up_2_f32*self->volumes_st.up_2_f32 +
 80011da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011de:	ee77 7a27 	vadd.f32	s15, s14, s15
	self->output_f32 =	(int32_t)self->octave_up_1_f32*self->volumes_st.up_1_f32 +
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edc3 7a06 	vstr	s15, [r3, #24]

	return self->output_f32;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80011ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f2:	ee17 3a90 	vmov	r3, s15
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	240007c8 	.word	0x240007c8

08001204 <init_guitar_effect_octave>:


void init_guitar_effect_octave(octave_effects_tst* self){
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

	  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz, 1, &highpass_coeff, &highpass_state);
 800120c:	4b52      	ldr	r3, [pc, #328]	; (8001358 <init_guitar_effect_octave+0x154>)
 800120e:	4a53      	ldr	r2, [pc, #332]	; (800135c <init_guitar_effect_octave+0x158>)
 8001210:	2101      	movs	r1, #1
 8001212:	4853      	ldr	r0, [pc, #332]	; (8001360 <init_guitar_effect_octave+0x15c>)
 8001214:	f00f fd3e 	bl	8010c94 <arm_biquad_cascade_df2T_init_f32>
	  arm_biquad_cascade_df2T_init_f32(&highpass_iir_50hz_octave2, 1, &highpass_coeff, &highpass_state);
 8001218:	4b4f      	ldr	r3, [pc, #316]	; (8001358 <init_guitar_effect_octave+0x154>)
 800121a:	4a50      	ldr	r2, [pc, #320]	; (800135c <init_guitar_effect_octave+0x158>)
 800121c:	2101      	movs	r1, #1
 800121e:	4851      	ldr	r0, [pc, #324]	; (8001364 <init_guitar_effect_octave+0x160>)
 8001220:	f00f fd38 	bl	8010c94 <arm_biquad_cascade_df2T_init_f32>
	// assign function pointers
	self->set_volumes			= set_volumes;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800122a:	461a      	mov	r2, r3
 800122c:	4b4e      	ldr	r3, [pc, #312]	; (8001368 <init_guitar_effect_octave+0x164>)
 800122e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	self->calc_octave_1_up 		= algorithm_octave_1_down;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001238:	461a      	mov	r2, r3
 800123a:	4b4c      	ldr	r3, [pc, #304]	; (800136c <init_guitar_effect_octave+0x168>)
 800123c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	self->calc_octave_1_down 	= algorithm_octave_1_up;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001246:	461a      	mov	r2, r3
 8001248:	4b49      	ldr	r3, [pc, #292]	; (8001370 <init_guitar_effect_octave+0x16c>)
 800124a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	self->callback 				= callback_octave_effect;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001254:	461a      	mov	r2, r3
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <init_guitar_effect_octave+0x170>)
 8001258:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

	self->volumes_st.up_1_f32 = 1;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001262:	60da      	str	r2, [r3, #12]
	self->volumes_st.up_2_f32 = 1;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800126a:	611a      	str	r2, [r3, #16]
	self->volumes_st.clean_f32      = 1;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001272:	609a      	str	r2, [r3, #8]
	for(int i=0; i<numberofsubbands;i++){
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	e065      	b.n	8001346 <init_guitar_effect_octave+0x142>
		subband_ones[i] = 1;
 800127a:	4a3f      	ldr	r2, [pc, #252]	; (8001378 <init_guitar_effect_octave+0x174>)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001286:	601a      	str	r2, [r3, #0]
		self->subbandfilter_dn2[i]		=	0;
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	33ec      	adds	r3, #236	; 0xec
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	3304      	adds	r3, #4
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
		self->subbandfilter_dn1[i]		=	0;
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	33b6      	adds	r3, #182	; 0xb6
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
		self->subbandfilter_dn[i]		=	0;
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	337e      	adds	r3, #126	; 0x7e
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	3304      	adds	r3, #4
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
		self->subbandfilter_yn1[i] 		= 	0;
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
		self->subbandfilter_yn2[i] 		= 	0;
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f503 73ad 	add.w	r3, r3, #346	; 0x15a
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	3304      	adds	r3, #4
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]

		self->subbandfilter_octave2_dn[i]		=	0;
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f503 73c9 	add.w	r3, r3, #402	; 0x192
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
		self->subbandfilter_octave2_dn1[i]		=	0;
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	3304      	adds	r3, #4
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
		self->subbandfilter_octave2_dn2[i]		=	0;
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
		self->subbandfilter_octave2_yn1[i] 		= 	0;
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f203 2336 	addw	r3, r3, #566	; 0x236
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	3304      	adds	r3, #4
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
		self->subbandfilter_octave2_yn2[i] 		= 	0;
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f203 236e 	addw	r3, r3, #622	; 0x26e
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
	for(int i=0; i<numberofsubbands;i++){
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3301      	adds	r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b36      	cmp	r3, #54	; 0x36
 800134a:	dd96      	ble.n	800127a <init_guitar_effect_octave+0x76>
	}

	// zero out the IIR filter states


}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	240007e4 	.word	0x240007e4
 800135c:	24000370 	.word	0x24000370
 8001360:	240007cc 	.word	0x240007cc
 8001364:	240007d8 	.word	0x240007d8
 8001368:	08000ce9 	.word	0x08000ce9
 800136c:	080010a5 	.word	0x080010a5
 8001370:	08001091 	.word	0x08001091
 8001374:	08001151 	.word	0x08001151
 8001378:	2400060c 	.word	0x2400060c

0800137c <IS42S16800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S16800J_ERROR;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S16800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f832 	bl	80013fc <IS42S16800J_ClockEnable>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d128      	bne.n	80013f0 <IS42S16800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S16800J_Delay(1);
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 f8e2 	bl	8001568 <IS42S16800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S16800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f84a 	bl	8001444 <IS42S16800J_Precharge>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d11c      	bne.n	80013f0 <IS42S16800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S16800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S16800J_OK)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	6819      	ldr	r1, [r3, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	461a      	mov	r2, r3
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f897 	bl	80014f4 <IS42S16800J_RefreshMode>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d111      	bne.n	80013f0 <IS42S16800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S16800J_ModeRegConfig(Ctx, pRegMode) == IS42S16800J_OK)
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f85c 	bl	800148c <IS42S16800J_ModeRegConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10a      	bne.n	80013f0 <IS42S16800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S16800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S16800J_OK)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	4619      	mov	r1, r3
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f8ad 	bl	8001540 <IS42S16800J_RefreshRate>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <IS42S16800J_Init+0x74>
          {
            ret = IS42S16800J_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 80013f0:	68fb      	ldr	r3, [r7, #12]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <IS42S16800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_CLK_ENABLE_CMD;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <IS42S16800J_ClockEnable+0x44>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800140c:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <IS42S16800J_ClockEnable+0x44>)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <IS42S16800J_ClockEnable+0x44>)
 8001414:	2201      	movs	r2, #1
 8001416:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <IS42S16800J_ClockEnable+0x44>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 800141e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001422:	4907      	ldr	r1, [pc, #28]	; (8001440 <IS42S16800J_ClockEnable+0x44>)
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f00a fa0f 	bl	800b848 <HAL_SDRAM_SendCommand>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <IS42S16800J_ClockEnable+0x3a>
  {
    return IS42S16800J_ERROR;
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	e000      	b.n	8001438 <IS42S16800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 8001436:	2300      	movs	r3, #0
  }
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	2400080c 	.word	0x2400080c

08001444 <IS42S16800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_PALL_CMD;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <IS42S16800J_Precharge+0x44>)
 8001450:	2202      	movs	r2, #2
 8001452:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001454:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <IS42S16800J_Precharge+0x44>)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <IS42S16800J_Precharge+0x44>)
 800145c:	2201      	movs	r2, #1
 800145e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <IS42S16800J_Precharge+0x44>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8001466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800146a:	4907      	ldr	r1, [pc, #28]	; (8001488 <IS42S16800J_Precharge+0x44>)
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f00a f9eb 	bl	800b848 <HAL_SDRAM_SendCommand>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <IS42S16800J_Precharge+0x3a>
  {
    return IS42S16800J_ERROR;
 8001478:	f04f 33ff 	mov.w	r3, #4294967295
 800147c:	e000      	b.n	8001480 <IS42S16800J_Precharge+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 800147e:	2300      	movs	r3, #0
  }
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2400080c 	.word	0x2400080c

0800148c <IS42S16800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800149e:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80014a4:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80014aa:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80014b0:	4313      	orrs	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S16800J_LOAD_MODE_CMD;
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <IS42S16800J_ModeRegConfig+0x64>)
 80014b6:	2204      	movs	r2, #4
 80014b8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <IS42S16800J_ModeRegConfig+0x64>)
 80014c0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <IS42S16800J_ModeRegConfig+0x64>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80014c8:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <IS42S16800J_ModeRegConfig+0x64>)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 80014ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d2:	4907      	ldr	r1, [pc, #28]	; (80014f0 <IS42S16800J_ModeRegConfig+0x64>)
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f00a f9b7 	bl	800b848 <HAL_SDRAM_SendCommand>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <IS42S16800J_ModeRegConfig+0x5a>
  {
    return IS42S16800J_ERROR;
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
 80014e4:	e000      	b.n	80014e8 <IS42S16800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S16800J_OK;
 80014e6:	2300      	movs	r3, #0
  }
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2400080c 	.word	0x2400080c

080014f4 <IS42S16800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S16800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S16800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S16800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8001500:	4a0e      	ldr	r2, [pc, #56]	; (800153c <IS42S16800J_RefreshMode+0x48>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8001506:	4a0d      	ldr	r2, [pc, #52]	; (800153c <IS42S16800J_RefreshMode+0x48>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <IS42S16800J_RefreshMode+0x48>)
 800150e:	2208      	movs	r2, #8
 8001510:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <IS42S16800J_RefreshMode+0x48>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8001518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800151c:	4907      	ldr	r1, [pc, #28]	; (800153c <IS42S16800J_RefreshMode+0x48>)
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f00a f992 	bl	800b848 <HAL_SDRAM_SendCommand>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <IS42S16800J_RefreshMode+0x3c>
  {
    return IS42S16800J_ERROR;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	e000      	b.n	8001532 <IS42S16800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S16800J_OK;
 8001530:	2300      	movs	r3, #0
  }
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2400080c 	.word	0x2400080c

08001540 <IS42S16800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S16800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800154a:	6839      	ldr	r1, [r7, #0]
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f00a f9b0 	bl	800b8b2 <HAL_SDRAM_ProgramRefreshRate>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <IS42S16800J_RefreshRate+0x1e>
  {
    return IS42S16800J_ERROR;
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
 800155c:	e000      	b.n	8001560 <IS42S16800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S16800J_OK;
 800155e:	2300      	movs	r3, #0
  }
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <IS42S16800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval IS42S16800J_OK
  */
static int32_t IS42S16800J_Delay(uint32_t Delay)
{  
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8001570:	f001 fabc 	bl	8002aec <HAL_GetTick>
 8001574:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8001576:	bf00      	nop
 8001578:	f001 fab8 	bl	8002aec <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	d8f7      	bhi.n	8001578 <IS42S16800J_Delay+0x10>
  {
  }
  return IS42S16800J_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_SAI_TxCpltCallback>:
	int32_t out2_i32;
	int32_t out3_i32;
	int32_t out4_i32;
}effects_io_port;

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
 8001594:	b480      	push	{r7}
 8001596:	b08b      	sub	sp, #44	; 0x2c
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 0;
 800159c:	4b34      	ldr	r3, [pc, #208]	; (8001670 <HAL_SAI_TxCpltCallback+0xdc>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_SAI_TxCpltCallback+0xe0>)
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	2340      	movs	r3, #64	; 0x40
 80015a8:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	dd1d      	ble.n	80015ec <HAL_SAI_TxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f003 021f 	and.w	r2, r3, #31
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4413      	add	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015c0:	f3bf 8f4f 	dsb	sy
}
 80015c4:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80015c6:	4a2c      	ldr	r2, [pc, #176]	; (8001678 <HAL_SAI_TxCpltCallback+0xe4>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	3320      	adds	r3, #32
 80015d2:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3b20      	subs	r3, #32
 80015d8:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	dcf2      	bgt.n	80015c6 <HAL_SAI_TxCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 80015e0:	f3bf 8f4f 	dsb	sy
}
 80015e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015e6:	f3bf 8f6f 	isb	sy
}
 80015ea:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80015ec:	bf00      	nop
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <HAL_SAI_TxCpltCallback+0xe8>)
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
 80015f2:	2340      	movs	r3, #64	; 0x40
 80015f4:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	dd1d      	ble.n	8001638 <HAL_SAI_TxCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	f003 021f 	and.w	r2, r3, #31
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	4413      	add	r3, r2
 8001606:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 800160c:	f3bf 8f4f 	dsb	sy
}
 8001610:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001612:	4a19      	ldr	r2, [pc, #100]	; (8001678 <HAL_SAI_TxCpltCallback+0xe4>)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	3320      	adds	r3, #32
 800161e:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	3b20      	subs	r3, #32
 8001624:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	2b00      	cmp	r3, #0
 800162a:	dcf2      	bgt.n	8001612 <HAL_SAI_TxCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 800162c:	f3bf 8f4f 	dsb	sy
}
 8001630:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001632:	f3bf 8f6f 	isb	sy
}
 8001636:	bf00      	nop
}
 8001638:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));

	output_i2s_buffer_au32[8+OUT1_DAC_NUM] = effects_io_port.out1_i32;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_SAI_TxCpltCallback+0xec>)
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	461a      	mov	r2, r3
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_SAI_TxCpltCallback+0xe8>)
 8001642:	635a      	str	r2, [r3, #52]	; 0x34
	output_i2s_buffer_au32[8+OUT2_DAC_NUM] = effects_io_port.out2_i32;
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_SAI_TxCpltCallback+0xec>)
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	461a      	mov	r2, r3
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_SAI_TxCpltCallback+0xe8>)
 800164c:	63da      	str	r2, [r3, #60]	; 0x3c
	output_i2s_buffer_au32[8+OUT3_DAC_NUM] = effects_io_port.out3_i32;
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <HAL_SAI_TxCpltCallback+0xec>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	461a      	mov	r2, r3
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_SAI_TxCpltCallback+0xe8>)
 8001656:	639a      	str	r2, [r3, #56]	; 0x38
	output_i2s_buffer_au32[8+OUT4_DAC_NUM] = effects_io_port.out4_i32;
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_SAI_TxCpltCallback+0xec>)
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	461a      	mov	r2, r3
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <HAL_SAI_TxCpltCallback+0xe8>)
 8001660:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001662:	bf00      	nop
 8001664:	372c      	adds	r7, #44	; 0x2c
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	2400081d 	.word	0x2400081d
 8001674:	24000820 	.word	0x24000820
 8001678:	e000ed00 	.word	0xe000ed00
 800167c:	24000860 	.word	0x24000860
 8001680:	240008a0 	.word	0x240008a0

08001684 <HAL_SAI_TxHalfCpltCallback>:
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8001684:	b480      	push	{r7}
 8001686:	b08b      	sub	sp, #44	; 0x2c
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 1;
 800168c:	4b34      	ldr	r3, [pc, #208]	; (8001760 <HAL_SAI_TxHalfCpltCallback+0xdc>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
 8001692:	4b34      	ldr	r3, [pc, #208]	; (8001764 <HAL_SAI_TxHalfCpltCallback+0xe0>)
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	2340      	movs	r3, #64	; 0x40
 8001698:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	2b00      	cmp	r3, #0
 800169e:	dd1d      	ble.n	80016dc <HAL_SAI_TxHalfCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f003 021f 	and.w	r2, r3, #31
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4413      	add	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80016b0:	f3bf 8f4f 	dsb	sy
}
 80016b4:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80016b6:	4a2c      	ldr	r2, [pc, #176]	; (8001768 <HAL_SAI_TxHalfCpltCallback+0xe4>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3320      	adds	r3, #32
 80016c2:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3b20      	subs	r3, #32
 80016c8:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	dcf2      	bgt.n	80016b6 <HAL_SAI_TxHalfCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 80016d0:	f3bf 8f4f 	dsb	sy
}
 80016d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016d6:	f3bf 8f6f 	isb	sy
}
 80016da:	bf00      	nop
}
 80016dc:	bf00      	nop
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <HAL_SAI_TxHalfCpltCallback+0xe8>)
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
 80016e2:	2340      	movs	r3, #64	; 0x40
 80016e4:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	dd1d      	ble.n	8001728 <HAL_SAI_TxHalfCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	f003 021f 	and.w	r2, r3, #31
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	4413      	add	r3, r2
 80016f6:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 80016fc:	f3bf 8f4f 	dsb	sy
}
 8001700:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001702:	4a19      	ldr	r2, [pc, #100]	; (8001768 <HAL_SAI_TxHalfCpltCallback+0xe4>)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	3320      	adds	r3, #32
 800170e:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	3b20      	subs	r3, #32
 8001714:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	2b00      	cmp	r3, #0
 800171a:	dcf2      	bgt.n	8001702 <HAL_SAI_TxHalfCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 800171c:	f3bf 8f4f 	dsb	sy
}
 8001720:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001722:	f3bf 8f6f 	isb	sy
}
 8001726:	bf00      	nop
}
 8001728:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));

	output_i2s_buffer_au32[OUT1_DAC_NUM] = effects_io_port.out1_i32;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_SAI_TxHalfCpltCallback+0xec>)
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	461a      	mov	r2, r3
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_SAI_TxHalfCpltCallback+0xe8>)
 8001732:	615a      	str	r2, [r3, #20]
	output_i2s_buffer_au32[OUT2_DAC_NUM] = effects_io_port.out2_i32;
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_SAI_TxHalfCpltCallback+0xec>)
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	461a      	mov	r2, r3
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_SAI_TxHalfCpltCallback+0xe8>)
 800173c:	61da      	str	r2, [r3, #28]
	output_i2s_buffer_au32[OUT3_DAC_NUM] = effects_io_port.out3_i32;
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_SAI_TxHalfCpltCallback+0xec>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	461a      	mov	r2, r3
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_SAI_TxHalfCpltCallback+0xe8>)
 8001746:	619a      	str	r2, [r3, #24]
	output_i2s_buffer_au32[OUT4_DAC_NUM] = effects_io_port.out4_i32;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_SAI_TxHalfCpltCallback+0xec>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	461a      	mov	r2, r3
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <HAL_SAI_TxHalfCpltCallback+0xe8>)
 8001750:	611a      	str	r2, [r3, #16]
}
 8001752:	bf00      	nop
 8001754:	372c      	adds	r7, #44	; 0x2c
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	2400081d 	.word	0x2400081d
 8001764:	24000820 	.word	0x24000820
 8001768:	e000ed00 	.word	0xe000ed00
 800176c:	24000860 	.word	0x24000860
 8001770:	240008a0 	.word	0x240008a0

08001774 <HAL_SAI_RxCpltCallback>:

volatile uint8_t 			ADC_READY_FLAG = 0;

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8001774:	b480      	push	{r7}
 8001776:	b093      	sub	sp, #76	; 0x4c
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 0;
 800177c:	4b5b      	ldr	r3, [pc, #364]	; (80018ec <HAL_SAI_RxCpltCallback+0x178>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
	ADC_READY_FLAG = 1;
 8001782:	4b5b      	ldr	r3, [pc, #364]	; (80018f0 <HAL_SAI_RxCpltCallback+0x17c>)
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	4b5a      	ldr	r3, [pc, #360]	; (80018f4 <HAL_SAI_RxCpltCallback+0x180>)
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	2340      	movs	r3, #64	; 0x40
 800178e:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	2b00      	cmp	r3, #0
 8001794:	dd1d      	ble.n	80017d2 <HAL_SAI_RxCpltCallback+0x5e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f003 021f 	and.w	r2, r3, #31
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80017a6:	f3bf 8f4f 	dsb	sy
}
 80017aa:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80017ac:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <HAL_SAI_RxCpltCallback+0x184>)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	3320      	adds	r3, #32
 80017b8:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	3b20      	subs	r3, #32
 80017be:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	dcf2      	bgt.n	80017ac <HAL_SAI_RxCpltCallback+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 80017c6:	f3bf 8f4f 	dsb	sy
}
 80017ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017cc:	f3bf 8f6f 	isb	sy
}
 80017d0:	bf00      	nop
}
 80017d2:	bf00      	nop
 80017d4:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_SAI_RxCpltCallback+0x188>)
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
 80017d8:	2340      	movs	r3, #64	; 0x40
 80017da:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	dd1d      	ble.n	800181e <HAL_SAI_RxCpltCallback+0xaa>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	4413      	add	r3, r2
 80017ec:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 80017f2:	f3bf 8f4f 	dsb	sy
}
 80017f6:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80017f8:	4a3f      	ldr	r2, [pc, #252]	; (80018f8 <HAL_SAI_RxCpltCallback+0x184>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	3320      	adds	r3, #32
 8001804:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b20      	subs	r3, #32
 800180a:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	2b00      	cmp	r3, #0
 8001810:	dcf2      	bgt.n	80017f8 <HAL_SAI_RxCpltCallback+0x84>
  __ASM volatile ("dsb 0xF":::"memory");
 8001812:	f3bf 8f4f 	dsb	sy
}
 8001816:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001818:	f3bf 8f6f 	isb	sy
}
 800181c:	bf00      	nop
}
 800181e:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));

	effects_io_port.in1_i32 = input_i2s_buffer_au32[8+IN1_ADC_NUM];
 8001820:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <HAL_SAI_RxCpltCallback+0x180>)
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	461a      	mov	r2, r3
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_SAI_RxCpltCallback+0x18c>)
 8001828:	601a      	str	r2, [r3, #0]
	effects_io_port.in2_i32 = input_i2s_buffer_au32[8+IN2_ADC_NUM];
 800182a:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <HAL_SAI_RxCpltCallback+0x180>)
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	461a      	mov	r2, r3
 8001830:	4b33      	ldr	r3, [pc, #204]	; (8001900 <HAL_SAI_RxCpltCallback+0x18c>)
 8001832:	605a      	str	r2, [r3, #4]
	effects_io_port.in3_i32 = input_i2s_buffer_au32[8+IN3_ADC_NUM];
 8001834:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <HAL_SAI_RxCpltCallback+0x180>)
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	461a      	mov	r2, r3
 800183a:	4b31      	ldr	r3, [pc, #196]	; (8001900 <HAL_SAI_RxCpltCallback+0x18c>)
 800183c:	609a      	str	r2, [r3, #8]
	effects_io_port.in4_i32 = input_i2s_buffer_au32[8+IN4_ADC_NUM];
 800183e:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <HAL_SAI_RxCpltCallback+0x180>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	461a      	mov	r2, r3
 8001844:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_SAI_RxCpltCallback+0x18c>)
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <HAL_SAI_RxCpltCallback+0x180>)
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
 800184c:	2340      	movs	r3, #64	; 0x40
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 8001850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001852:	2b00      	cmp	r3, #0
 8001854:	dd1d      	ble.n	8001892 <HAL_SAI_RxCpltCallback+0x11e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001858:	f003 021f 	and.w	r2, r3, #31
 800185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185e:	4413      	add	r3, r2
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 8001866:	f3bf 8f4f 	dsb	sy
}
 800186a:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800186c:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <HAL_SAI_RxCpltCallback+0x184>)
 800186e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001870:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001876:	3320      	adds	r3, #32
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	3b20      	subs	r3, #32
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8001880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001882:	2b00      	cmp	r3, #0
 8001884:	dcf2      	bgt.n	800186c <HAL_SAI_RxCpltCallback+0xf8>
  __ASM volatile ("dsb 0xF":::"memory");
 8001886:	f3bf 8f4f 	dsb	sy
}
 800188a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800188c:	f3bf 8f6f 	isb	sy
}
 8001890:	bf00      	nop
}
 8001892:	bf00      	nop
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_SAI_RxCpltCallback+0x188>)
 8001896:	647b      	str	r3, [r7, #68]	; 0x44
 8001898:	2340      	movs	r3, #64	; 0x40
 800189a:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 800189c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800189e:	2b00      	cmp	r3, #0
 80018a0:	dd1d      	ble.n	80018de <HAL_SAI_RxCpltCallback+0x16a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80018a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018aa:	4413      	add	r3, r2
 80018ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80018ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 80018b2:	f3bf 8f4f 	dsb	sy
}
 80018b6:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <HAL_SAI_RxCpltCallback+0x184>)
 80018ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018bc:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80018c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c2:	3320      	adds	r3, #32
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80018c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c8:	3b20      	subs	r3, #32
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 80018cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	dcf2      	bgt.n	80018b8 <HAL_SAI_RxCpltCallback+0x144>
  __ASM volatile ("dsb 0xF":::"memory");
 80018d2:	f3bf 8f4f 	dsb	sy
}
 80018d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d8:	f3bf 8f6f 	isb	sy
}
 80018dc:	bf00      	nop
}
 80018de:	bf00      	nop

	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 80018e0:	bf00      	nop
 80018e2:	374c      	adds	r7, #76	; 0x4c
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	2400081c 	.word	0x2400081c
 80018f0:	240008c0 	.word	0x240008c0
 80018f4:	24000820 	.word	0x24000820
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	24000860 	.word	0x24000860
 8001900:	240008a0 	.word	0x240008a0

08001904 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8001904:	b480      	push	{r7}
 8001906:	b093      	sub	sp, #76	; 0x4c
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 1;
 800190c:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <HAL_SAI_RxHalfCpltCallback+0x178>)
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
	ADC_READY_FLAG = 1;
 8001912:	4b5b      	ldr	r3, [pc, #364]	; (8001a80 <HAL_SAI_RxHalfCpltCallback+0x17c>)
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
 8001918:	4b5a      	ldr	r3, [pc, #360]	; (8001a84 <HAL_SAI_RxHalfCpltCallback+0x180>)
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	2340      	movs	r3, #64	; 0x40
 800191e:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	2b00      	cmp	r3, #0
 8001924:	dd1d      	ble.n	8001962 <HAL_SAI_RxHalfCpltCallback+0x5e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001936:	f3bf 8f4f 	dsb	sy
}
 800193a:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800193c:	4a52      	ldr	r2, [pc, #328]	; (8001a88 <HAL_SAI_RxHalfCpltCallback+0x184>)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	3320      	adds	r3, #32
 8001948:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3b20      	subs	r3, #32
 800194e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	dcf2      	bgt.n	800193c <HAL_SAI_RxHalfCpltCallback+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8001956:	f3bf 8f4f 	dsb	sy
}
 800195a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195c:	f3bf 8f6f 	isb	sy
}
 8001960:	bf00      	nop
}
 8001962:	bf00      	nop
 8001964:	4b49      	ldr	r3, [pc, #292]	; (8001a8c <HAL_SAI_RxHalfCpltCallback+0x188>)
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
 8001968:	2340      	movs	r3, #64	; 0x40
 800196a:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	2b00      	cmp	r3, #0
 8001970:	dd1d      	ble.n	80019ae <HAL_SAI_RxHalfCpltCallback+0xaa>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	4413      	add	r3, r2
 800197c:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8001982:	f3bf 8f4f 	dsb	sy
}
 8001986:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001988:	4a3f      	ldr	r2, [pc, #252]	; (8001a88 <HAL_SAI_RxHalfCpltCallback+0x184>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	3320      	adds	r3, #32
 8001994:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b20      	subs	r3, #32
 800199a:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	dcf2      	bgt.n	8001988 <HAL_SAI_RxHalfCpltCallback+0x84>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a2:	f3bf 8f4f 	dsb	sy
}
 80019a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019a8:	f3bf 8f6f 	isb	sy
}
 80019ac:	bf00      	nop
}
 80019ae:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));

	effects_io_port.in1_i32 = input_i2s_buffer_au32[IN1_ADC_NUM];
 80019b0:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <HAL_SAI_RxHalfCpltCallback+0x180>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <HAL_SAI_RxHalfCpltCallback+0x18c>)
 80019b8:	601a      	str	r2, [r3, #0]
	effects_io_port.in2_i32 = input_i2s_buffer_au32[IN2_ADC_NUM];
 80019ba:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <HAL_SAI_RxHalfCpltCallback+0x180>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	461a      	mov	r2, r3
 80019c0:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <HAL_SAI_RxHalfCpltCallback+0x18c>)
 80019c2:	605a      	str	r2, [r3, #4]
	effects_io_port.in3_i32 = input_i2s_buffer_au32[IN3_ADC_NUM];
 80019c4:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <HAL_SAI_RxHalfCpltCallback+0x180>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_SAI_RxHalfCpltCallback+0x18c>)
 80019cc:	609a      	str	r2, [r3, #8]
	effects_io_port.in4_i32 = input_i2s_buffer_au32[IN4_ADC_NUM];
 80019ce:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <HAL_SAI_RxHalfCpltCallback+0x180>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <HAL_SAI_RxHalfCpltCallback+0x18c>)
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <HAL_SAI_RxHalfCpltCallback+0x188>)
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
 80019dc:	2340      	movs	r3, #64	; 0x40
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 80019e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	dd1d      	ble.n	8001a22 <HAL_SAI_RxHalfCpltCallback+0x11e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80019e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ee:	4413      	add	r3, r2
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80019f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 80019f6:	f3bf 8f4f 	dsb	sy
}
 80019fa:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80019fc:	4a22      	ldr	r2, [pc, #136]	; (8001a88 <HAL_SAI_RxHalfCpltCallback+0x184>)
 80019fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a00:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a06:	3320      	adds	r3, #32
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0c:	3b20      	subs	r3, #32
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8001a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	dcf2      	bgt.n	80019fc <HAL_SAI_RxHalfCpltCallback+0xf8>
  __ASM volatile ("dsb 0xF":::"memory");
 8001a16:	f3bf 8f4f 	dsb	sy
}
 8001a1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a1c:	f3bf 8f6f 	isb	sy
}
 8001a20:	bf00      	nop
}
 8001a22:	bf00      	nop
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <HAL_SAI_RxHalfCpltCallback+0x180>)
 8001a26:	647b      	str	r3, [r7, #68]	; 0x44
 8001a28:	2340      	movs	r3, #64	; 0x40
 8001a2a:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8001a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	dd1d      	ble.n	8001a6e <HAL_SAI_RxHalfCpltCallback+0x16a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a3a:	4413      	add	r3, r2
 8001a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a40:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8001a42:	f3bf 8f4f 	dsb	sy
}
 8001a46:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001a48:	4a0f      	ldr	r2, [pc, #60]	; (8001a88 <HAL_SAI_RxHalfCpltCallback+0x184>)
 8001a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a4c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a52:	3320      	adds	r3, #32
 8001a54:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a58:	3b20      	subs	r3, #32
 8001a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 8001a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	dcf2      	bgt.n	8001a48 <HAL_SAI_RxHalfCpltCallback+0x144>
  __ASM volatile ("dsb 0xF":::"memory");
 8001a62:	f3bf 8f4f 	dsb	sy
}
 8001a66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a68:	f3bf 8f6f 	isb	sy
}
 8001a6c:	bf00      	nop
}
 8001a6e:	bf00      	nop

	SCB_CleanDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
}
 8001a70:	bf00      	nop
 8001a72:	374c      	adds	r7, #76	; 0x4c
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	2400081c 	.word	0x2400081c
 8001a80:	240008c0 	.word	0x240008c0
 8001a84:	24000820 	.word	0x24000820
 8001a88:	e000ed00 	.word	0xe000ed00
 8001a8c:	24000860 	.word	0x24000860
 8001a90:	240008a0 	.word	0x240008a0

08001a94 <Do_HighPass>:
volatile int WtrP;
volatile float Rd_P;
volatile float CrossFade;
float a0, a1, a2, b1, b2, hp_in_z1, hp_in_z2, hp_out_z1, hp_out_z2;

int Do_HighPass (int inSample) {
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	//	500hz high-pass, 48k
		a0 = 0.9547676565107223;
 8001a9c:	4b30      	ldr	r3, [pc, #192]	; (8001b60 <Do_HighPass+0xcc>)
 8001a9e:	4a31      	ldr	r2, [pc, #196]	; (8001b64 <Do_HighPass+0xd0>)
 8001aa0:	601a      	str	r2, [r3, #0]
		a1 = -1.9095353130214445;
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <Do_HighPass+0xd4>)
 8001aa4:	4a31      	ldr	r2, [pc, #196]	; (8001b6c <Do_HighPass+0xd8>)
 8001aa6:	601a      	str	r2, [r3, #0]
		a2 = 0.9547676565107223;
 8001aa8:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <Do_HighPass+0xdc>)
 8001aaa:	4a2e      	ldr	r2, [pc, #184]	; (8001b64 <Do_HighPass+0xd0>)
 8001aac:	601a      	str	r2, [r3, #0]
		b1 =-1.9074888914066748;
 8001aae:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <Do_HighPass+0xe0>)
 8001ab0:	4a31      	ldr	r2, [pc, #196]	; (8001b78 <Do_HighPass+0xe4>)
 8001ab2:	601a      	str	r2, [r3, #0]
		b2 =0.9115817346362142;
 8001ab4:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <Do_HighPass+0xe8>)
 8001ab6:	4a32      	ldr	r2, [pc, #200]	; (8001b80 <Do_HighPass+0xec>)
 8001ab8:	601a      	str	r2, [r3, #0]
//	a2 = 0.22018120452501466;
//	b1 = -0.3075475090293954;
//	b2 = 0.18827232712945405;


	float inSampleF = (float)inSample;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	ee07 3a90 	vmov	s15, r3
 8001ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac4:	edc7 7a03 	vstr	s15, [r7, #12]
	float outSampleF =
			a0 * inSampleF
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <Do_HighPass+0xcc>)
 8001aca:	ed93 7a00 	vldr	s14, [r3]
 8001ace:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ad2:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ a1 * hp_in_z1
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <Do_HighPass+0xd4>)
 8001ad8:	edd3 6a00 	vldr	s13, [r3]
 8001adc:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <Do_HighPass+0xf0>)
 8001ade:	edd3 7a00 	vldr	s15, [r3]
 8001ae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae6:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ a2 * hp_in_z2
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <Do_HighPass+0xdc>)
 8001aec:	edd3 6a00 	vldr	s13, [r3]
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <Do_HighPass+0xf4>)
 8001af2:	edd3 7a00 	vldr	s15, [r3]
 8001af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afa:	ee37 7a27 	vadd.f32	s14, s14, s15
			- b1 * hp_out_z1
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <Do_HighPass+0xe0>)
 8001b00:	edd3 6a00 	vldr	s13, [r3]
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <Do_HighPass+0xf8>)
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b0e:	ee37 7a67 	vsub.f32	s14, s14, s15
			- b2 * hp_out_z2;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <Do_HighPass+0xe8>)
 8001b14:	edd3 6a00 	vldr	s13, [r3]
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <Do_HighPass+0xfc>)
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float outSampleF =
 8001b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b26:	edc7 7a02 	vstr	s15, [r7, #8]
	hp_in_z2 = hp_in_z1;
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <Do_HighPass+0xf0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a16      	ldr	r2, [pc, #88]	; (8001b88 <Do_HighPass+0xf4>)
 8001b30:	6013      	str	r3, [r2, #0]
	hp_in_z1 = inSampleF;
 8001b32:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <Do_HighPass+0xf0>)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6013      	str	r3, [r2, #0]
	hp_out_z2 = hp_out_z1;
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <Do_HighPass+0xf8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <Do_HighPass+0xfc>)
 8001b3e:	6013      	str	r3, [r2, #0]
	hp_out_z1 = outSampleF;
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <Do_HighPass+0xf8>)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	6013      	str	r3, [r2, #0]

	return (int) outSampleF;
 8001b46:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4e:	ee17 3a90 	vmov	r3, s15
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	2400a510 	.word	0x2400a510
 8001b64:	3f746ba7 	.word	0x3f746ba7
 8001b68:	2400a514 	.word	0x2400a514
 8001b6c:	bff46ba7 	.word	0xbff46ba7
 8001b70:	2400a518 	.word	0x2400a518
 8001b74:	2400a51c 	.word	0x2400a51c
 8001b78:	bff42899 	.word	0xbff42899
 8001b7c:	2400a520 	.word	0x2400a520
 8001b80:	3f695d6c 	.word	0x3f695d6c
 8001b84:	2400a524 	.word	0x2400a524
 8001b88:	2400a528 	.word	0x2400a528
 8001b8c:	2400a52c 	.word	0x2400a52c
 8001b90:	2400a530 	.word	0x2400a530

08001b94 <Do_PitchShift>:
float Shift = 1.5;//1.189207115002721;
int Do_PitchShift(int sample) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

	int sum = Do_HighPass(sample);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff79 	bl	8001a94 <Do_HighPass>
 8001ba2:	6238      	str	r0, [r7, #32]
//	 sum = sample;
	//sum up and do high-pass


	//write to ringbuffer
	Buf[WtrP] = sum;
 8001ba4:	4b85      	ldr	r3, [pc, #532]	; (8001dbc <Do_PitchShift+0x228>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4985      	ldr	r1, [pc, #532]	; (8001dc0 <Do_PitchShift+0x22c>)
 8001baa:	6a3a      	ldr	r2, [r7, #32]
 8001bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//read fractional readpointer and generate 0° and 180° read-pointer in integer
	int RdPtr_Int = roundf(Rd_P);
 8001bb0:	4b84      	ldr	r3, [pc, #528]	; (8001dc4 <Do_PitchShift+0x230>)
 8001bb2:	edd3 7a00 	vldr	s15, [r3]
 8001bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bba:	f010 f9e5 	bl	8011f88 <roundf>
 8001bbe:	eef0 7a40 	vmov.f32	s15, s0
 8001bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc6:	ee17 3a90 	vmov	r3, s15
 8001bca:	61fb      	str	r3, [r7, #28]
	int RdPtr_Int2 = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
	if (RdPtr_Int >= BufSize/2) RdPtr_Int2 = RdPtr_Int - (BufSize/2);
 8001bd0:	4b7d      	ldr	r3, [pc, #500]	; (8001dc8 <Do_PitchShift+0x234>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	da00      	bge.n	8001bda <Do_PitchShift+0x46>
 8001bd8:	3301      	adds	r3, #1
 8001bda:	105b      	asrs	r3, r3, #1
 8001bdc:	461a      	mov	r2, r3
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	4293      	cmp	r3, r2
 8001be2:	db0b      	blt.n	8001bfc <Do_PitchShift+0x68>
 8001be4:	4b78      	ldr	r3, [pc, #480]	; (8001dc8 <Do_PitchShift+0x234>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	da00      	bge.n	8001bee <Do_PitchShift+0x5a>
 8001bec:	3301      	adds	r3, #1
 8001bee:	105b      	asrs	r3, r3, #1
 8001bf0:	425b      	negs	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfa:	e009      	b.n	8001c10 <Do_PitchShift+0x7c>
	else RdPtr_Int2 = RdPtr_Int + (BufSize/2);
 8001bfc:	4b72      	ldr	r3, [pc, #456]	; (8001dc8 <Do_PitchShift+0x234>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da00      	bge.n	8001c06 <Do_PitchShift+0x72>
 8001c04:	3301      	adds	r3, #1
 8001c06:	105b      	asrs	r3, r3, #1
 8001c08:	461a      	mov	r2, r3
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24

	//read the two samples...
	float Rd0 = (float) Buf[RdPtr_Int];
 8001c10:	4a6b      	ldr	r2, [pc, #428]	; (8001dc0 <Do_PitchShift+0x22c>)
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c20:	edc7 7a06 	vstr	s15, [r7, #24]
	float Rd1 = (float) Buf[RdPtr_Int2];
 8001c24:	4a66      	ldr	r2, [pc, #408]	; (8001dc0 <Do_PitchShift+0x22c>)
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c34:	edc7 7a05 	vstr	s15, [r7, #20]

	//Check if first readpointer starts overlap with write pointer?
	// if yes -> do cross-fade to second read-pointer
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8001c38:	4b60      	ldr	r3, [pc, #384]	; (8001dbc <Do_PitchShift+0x228>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	1ad2      	subs	r2, r2, r3
 8001c40:	4b62      	ldr	r3, [pc, #392]	; (8001dcc <Do_PitchShift+0x238>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dc25      	bgt.n	8001c94 <Do_PitchShift+0x100>
 8001c48:	4b5c      	ldr	r3, [pc, #368]	; (8001dbc <Do_PitchShift+0x228>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db1f      	blt.n	8001c94 <Do_PitchShift+0x100>
 8001c54:	4b5e      	ldr	r3, [pc, #376]	; (8001dd0 <Do_PitchShift+0x23c>)
 8001c56:	edd3 7a00 	vldr	s15, [r3]
 8001c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c5e:	eef4 7a47 	vcmp.f32	s15, s14
 8001c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c66:	d015      	beq.n	8001c94 <Do_PitchShift+0x100>
		int rel = WtrP-RdPtr_Int;
 8001c68:	4b54      	ldr	r3, [pc, #336]	; (8001dbc <Do_PitchShift+0x228>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	613b      	str	r3, [r7, #16]
		CrossFade = ((float)rel)/(float)Overlap;
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c7c:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <Do_PitchShift+0x238>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	ee07 3a90 	vmov	s15, r3
 8001c84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c8c:	4b51      	ldr	r3, [pc, #324]	; (8001dd4 <Do_PitchShift+0x240>)
 8001c8e:	edc3 7a00 	vstr	s15, [r3]
	if (Overlap >= (WtrP-RdPtr_Int) && (WtrP-RdPtr_Int) >= 0 && Shift!=1.0f) {
 8001c92:	e008      	b.n	8001ca6 <Do_PitchShift+0x112>
	}
	else if (WtrP-RdPtr_Int == 0) CrossFade = 0.0f;
 8001c94:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <Do_PitchShift+0x228>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d103      	bne.n	8001ca6 <Do_PitchShift+0x112>
 8001c9e:	4b4d      	ldr	r3, [pc, #308]	; (8001dd4 <Do_PitchShift+0x240>)
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]

	//Check if second readpointer starts overlap with write pointer?
	// if yes -> do cross-fade to first read-pointer
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 8001ca6:	4b45      	ldr	r3, [pc, #276]	; (8001dbc <Do_PitchShift+0x228>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	1ad2      	subs	r2, r2, r3
 8001cae:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <Do_PitchShift+0x238>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	dc29      	bgt.n	8001d0a <Do_PitchShift+0x176>
 8001cb6:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <Do_PitchShift+0x228>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db23      	blt.n	8001d0a <Do_PitchShift+0x176>
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <Do_PitchShift+0x23c>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ccc:	eef4 7a47 	vcmp.f32	s15, s14
 8001cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd4:	d019      	beq.n	8001d0a <Do_PitchShift+0x176>
			int rel = WtrP-RdPtr_Int2;
 8001cd6:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <Do_PitchShift+0x228>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	60fb      	str	r3, [r7, #12]
			CrossFade = 1.0f - ((float)rel)/(float)Overlap;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cea:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <Do_PitchShift+0x238>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d02:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <Do_PitchShift+0x240>)
 8001d04:	edc3 7a00 	vstr	s15, [r3]
	if (Overlap >= (WtrP-RdPtr_Int2) && (WtrP-RdPtr_Int2) >= 0 && Shift!=1.0f) {
 8001d08:	e008      	b.n	8001d1c <Do_PitchShift+0x188>
		}
	else if (WtrP-RdPtr_Int2 == 0) CrossFade = 1.0f;
 8001d0a:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <Do_PitchShift+0x228>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d103      	bne.n	8001d1c <Do_PitchShift+0x188>
 8001d14:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <Do_PitchShift+0x240>)
 8001d16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d1a:	601a      	str	r2, [r3, #0]


	//do cross-fading and sum up
	sum = (Rd0*CrossFade + Rd1*(1.0f-CrossFade));
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <Do_PitchShift+0x240>)
 8001d1e:	ed93 7a00 	vldr	s14, [r3]
 8001d22:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <Do_PitchShift+0x240>)
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d34:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d38:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d48:	ee17 3a90 	vmov	r3, s15
 8001d4c:	623b      	str	r3, [r7, #32]

	//increment fractional read-pointer and write-pointer
	Rd_P += Shift;
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <Do_PitchShift+0x230>)
 8001d50:	ed93 7a00 	vldr	s14, [r3]
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <Do_PitchShift+0x23c>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5e:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <Do_PitchShift+0x230>)
 8001d60:	edc3 7a00 	vstr	s15, [r3]
	WtrP++;
 8001d64:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <Do_PitchShift+0x228>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <Do_PitchShift+0x228>)
 8001d6c:	6013      	str	r3, [r2, #0]
	if (WtrP == BufSize) WtrP = 0;
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <Do_PitchShift+0x228>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <Do_PitchShift+0x234>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d102      	bne.n	8001d80 <Do_PitchShift+0x1ec>
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <Do_PitchShift+0x228>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
	if (roundf(Rd_P) >= BufSize) Rd_P = 0.0f;
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <Do_PitchShift+0x230>)
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8a:	f010 f8fd 	bl	8011f88 <roundf>
 8001d8e:	eeb0 7a40 	vmov.f32	s14, s0
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <Do_PitchShift+0x234>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	db03      	blt.n	8001db0 <Do_PitchShift+0x21c>
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <Do_PitchShift+0x230>)
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

	return sum;
 8001db0:	6a3b      	ldr	r3, [r7, #32]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3728      	adds	r7, #40	; 0x28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	2400a504 	.word	0x2400a504
 8001dc0:	240008c4 	.word	0x240008c4
 8001dc4:	2400a508 	.word	0x2400a508
 8001dc8:	24000384 	.word	0x24000384
 8001dcc:	24000388 	.word	0x24000388
 8001dd0:	2400038c 	.word	0x2400038c
 8001dd4:	2400a50c 	.word	0x2400a50c

08001dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ddc:	f000 fe00 	bl	80029e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001de0:	f000 f85a 	bl	8001e98 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001de4:	f000 f8c8 	bl	8001f78 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001de8:	f7fe fd32 	bl	8000850 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dec:	f7fe fbb2 	bl	8000554 <MX_DMA_Init>
  MX_SAI1_Init();
 8001df0:	f000 fa24 	bl	800223c <MX_SAI1_Init>
  MX_SPI1_Init();
 8001df4:	f000 fb68 	bl	80024c8 <MX_SPI1_Init>
  MX_FMC_Init();
 8001df8:	f7fe fbe4 	bl	80005c4 <MX_FMC_Init>
  MX_OCTOSPI1_Init();
 8001dfc:	f000 f8f4 	bl	8001fe8 <MX_OCTOSPI1_Init>
  MX_USB_DEVICE_Init();
 8001e00:	f00e f90e 	bl	8010020 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // init SAI interface
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, output_i2s_buffer_au32, 	16);
 8001e04:	2210      	movs	r2, #16
 8001e06:	491c      	ldr	r1, [pc, #112]	; (8001e78 <main+0xa0>)
 8001e08:	481c      	ldr	r0, [pc, #112]	; (8001e7c <main+0xa4>)
 8001e0a:	f009 f93b 	bl	800b084 <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, input_i2s_buffer_au32, 	16);
 8001e0e:	2210      	movs	r2, #16
 8001e10:	491b      	ldr	r1, [pc, #108]	; (8001e80 <main+0xa8>)
 8001e12:	481c      	ldr	r0, [pc, #112]	; (8001e84 <main+0xac>)
 8001e14:	f009 f9ec 	bl	800b1f0 <HAL_SAI_Receive_DMA>

  // init CODEC
	ad1939_init(&hspi1);
 8001e18:	481b      	ldr	r0, [pc, #108]	; (8001e88 <main+0xb0>)
 8001e1a:	f7fe fb19 	bl	8000450 <ad1939_init>

	init_guitar_effect_delay(&delay_effect);
 8001e1e:	481b      	ldr	r0, [pc, #108]	; (8001e8c <main+0xb4>)
 8001e20:	f7fe fef8 	bl	8000c14 <init_guitar_effect_delay>

	init_guitar_effect_octave(&octave_effects_st);
 8001e24:	481a      	ldr	r0, [pc, #104]	; (8001e90 <main+0xb8>)
 8001e26:	f7ff f9ed 	bl	8001204 <init_guitar_effect_octave>
//	JumpToBootloader();
		// FLASH TESTING END
  while (1)
  {
	  // LOOP1
	  effects_io_port.out1_i32 = octave_effects_st.callback(&octave_effects_st,effects_io_port.in1_i32);
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <main+0xb8>)
 8001e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001e34:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <main+0xbc>)
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4815      	ldr	r0, [pc, #84]	; (8001e90 <main+0xb8>)
 8001e3c:	4798      	blx	r3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <main+0xbc>)
 8001e42:	6113      	str	r3, [r2, #16]
	  effects_io_port.out1_i32= Do_PitchShift(effects_io_port.in1_i32) + effects_io_port.out1_i32;
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <main+0xbc>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fea3 	bl	8001b94 <Do_PitchShift>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <main+0xbc>)
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <main+0xbc>)
 8001e58:	6113      	str	r3, [r2, #16]

	  // LOOP2
	  effects_io_port.out2_i32 = delay_effect.callback(&delay_effect,effects_io_port.in2_i32);
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <main+0xb4>)
 8001e5c:	f503 23ba 	add.w	r3, r3, #380928	; 0x5d000
 8001e60:	f8d3 3c38 	ldr.w	r3, [r3, #3128]	; 0xc38
 8001e64:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <main+0xbc>)
 8001e66:	6852      	ldr	r2, [r2, #4]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4808      	ldr	r0, [pc, #32]	; (8001e8c <main+0xb4>)
 8001e6c:	4798      	blx	r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <main+0xbc>)
 8001e72:	6153      	str	r3, [r2, #20]
	  effects_io_port.out1_i32 = octave_effects_st.callback(&octave_effects_st,effects_io_port.in1_i32);
 8001e74:	e7d9      	b.n	8001e2a <main+0x52>
 8001e76:	bf00      	nop
 8001e78:	24000860 	.word	0x24000860
 8001e7c:	2400b63c 	.word	0x2400b63c
 8001e80:	24000820 	.word	0x24000820
 8001e84:	2400b6d4 	.word	0x2400b6d4
 8001e88:	2400b860 	.word	0x2400b860
 8001e8c:	c005dc04 	.word	0xc005dc04
 8001e90:	2400a534 	.word	0x2400a534
 8001e94:	240008a0 	.word	0x240008a0

08001e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b09c      	sub	sp, #112	; 0x70
 8001e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea2:	224c      	movs	r2, #76	; 0x4c
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f00f f9cd 	bl	8011246 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	2220      	movs	r2, #32
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f00f f9c7 	bl	8011246 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001eb8:	2002      	movs	r0, #2
 8001eba:	f005 fb17 	bl	80074ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <SystemClock_Config+0xdc>)
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	4a2b      	ldr	r2, [pc, #172]	; (8001f74 <SystemClock_Config+0xdc>)
 8001ec8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ecc:	6193      	str	r3, [r2, #24]
 8001ece:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <SystemClock_Config+0xdc>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001eda:	bf00      	nop
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <SystemClock_Config+0xdc>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ee8:	d1f8      	bne.n	8001edc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001eea:	2321      	movs	r3, #33	; 0x21
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001efc:	2302      	movs	r3, #2
 8001efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001f00:	2302      	movs	r3, #2
 8001f02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001f04:	232c      	movs	r3, #44	; 0x2c
 8001f06:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f10:	2302      	movs	r3, #2
 8001f12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f14:	230c      	movs	r3, #12
 8001f16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f24:	4618      	mov	r0, r3
 8001f26:	f005 fb2b 	bl	8007580 <HAL_RCC_OscConfig>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001f30:	f000 f855 	bl	8001fde <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f34:	233f      	movs	r3, #63	; 0x3f
 8001f36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001f40:	2308      	movs	r3, #8
 8001f42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001f44:	2340      	movs	r3, #64	; 0x40
 8001f46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f48:	2340      	movs	r3, #64	; 0x40
 8001f4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001f52:	2340      	movs	r3, #64	; 0x40
 8001f54:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2103      	movs	r1, #3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f005 feea 	bl	8007d34 <HAL_RCC_ClockConfig>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001f66:	f000 f83a 	bl	8001fde <Error_Handler>
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	3770      	adds	r7, #112	; 0x70
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	58024800 	.word	0x58024800

08001f78 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b0ae      	sub	sp, #184	; 0xb8
 8001f7c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f7e:	463b      	mov	r3, r7
 8001f80:	22b8      	movs	r2, #184	; 0xb8
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f00f f95e 	bl	8011246 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 8001f8a:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8001f96:	2302      	movs	r3, #2
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 8001f9a:	230f      	movs	r3, #15
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001faa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 8001fb4:	f640 3386 	movw	r3, #2950	; 0xb86
 8001fb8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f006 fa2a 	bl	8008420 <HAL_RCCEx_PeriphCLKConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8001fd2:	f000 f804 	bl	8001fde <Error_Handler>
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	37b8      	adds	r7, #184	; 0xb8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe2:	b672      	cpsid	i
}
 8001fe4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe6:	e7fe      	b.n	8001fe6 <Error_Handler+0x8>

08001fe8 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001fee:	463b      	mov	r3, r7
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
 8001ffc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8001ffe:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 8002000:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <MX_OCTOSPI1_Init+0xbc>)
 8002002:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8002004:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 8002006:	2204      	movs	r2, #4
 8002008:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8002010:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 8002016:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 8002018:	2218      	movs	r2, #24
 800201a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800201c:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 800201e:	2201      	movs	r2, #1
 8002020:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8002022:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 8002030:	2200      	movs	r2, #0
 8002032:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 4;
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 8002036:	2204      	movs	r2, #4
 8002038:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 800203c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 8002044:	2200      	movs	r2, #0
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 800204a:	2200      	movs	r2, #0
 800204c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 8002050:	2208      	movs	r2, #8
 8002052:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 8002056:	2200      	movs	r2, #0
 8002058:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 800205c:	2200      	movs	r2, #0
 800205e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8002060:	480f      	ldr	r0, [pc, #60]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 8002062:	f003 f925 	bl	80052b0 <HAL_OSPI_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 800206c:	f7ff ffb7 	bl	8001fde <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8002070:	2301      	movs	r3, #1
 8002072:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8002074:	2301      	movs	r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8002078:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800207c:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800207e:	463b      	mov	r3, r7
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4619      	mov	r1, r3
 8002086:	4806      	ldr	r0, [pc, #24]	; (80020a0 <MX_OCTOSPI1_Init+0xb8>)
 8002088:	f003 f9de 	bl	8005448 <HAL_OSPIM_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 8002092:	f7ff ffa4 	bl	8001fde <Error_Handler>
//	sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
//
//	HAL_OSPI_Command(&hospi1, &sCommand, 1000);
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2400b5e0 	.word	0x2400b5e0
 80020a4:	52005000 	.word	0x52005000

080020a8 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b0ba      	sub	sp, #232	; 0xe8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c0:	f107 0318 	add.w	r3, r7, #24
 80020c4:	22b8      	movs	r2, #184	; 0xb8
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f00f f8bc 	bl	8011246 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a56      	ldr	r2, [pc, #344]	; (800222c <HAL_OSPI_MspInit+0x184>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	f040 80a5 	bne.w	8002224 <HAL_OSPI_MspInit+0x17c>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80020da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ea:	f107 0318 	add.w	r3, r7, #24
 80020ee:	4618      	mov	r0, r3
 80020f0:	f006 f996 	bl	8008420 <HAL_RCCEx_PeriphCLKConfig>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 80020fa:	f7ff ff70 	bl	8001fde <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80020fe:	4b4c      	ldr	r3, [pc, #304]	; (8002230 <HAL_OSPI_MspInit+0x188>)
 8002100:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002104:	4a4a      	ldr	r2, [pc, #296]	; (8002230 <HAL_OSPI_MspInit+0x188>)
 8002106:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800210a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800210e:	4b48      	ldr	r3, [pc, #288]	; (8002230 <HAL_OSPI_MspInit+0x188>)
 8002110:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800211c:	4b44      	ldr	r3, [pc, #272]	; (8002230 <HAL_OSPI_MspInit+0x188>)
 800211e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002122:	4a43      	ldr	r2, [pc, #268]	; (8002230 <HAL_OSPI_MspInit+0x188>)
 8002124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002128:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800212c:	4b40      	ldr	r3, [pc, #256]	; (8002230 <HAL_OSPI_MspInit+0x188>)
 800212e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800213a:	4b3d      	ldr	r3, [pc, #244]	; (8002230 <HAL_OSPI_MspInit+0x188>)
 800213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002140:	4a3b      	ldr	r2, [pc, #236]	; (8002230 <HAL_OSPI_MspInit+0x188>)
 8002142:	f043 0310 	orr.w	r3, r3, #16
 8002146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <HAL_OSPI_MspInit+0x188>)
 800214c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002158:	4b35      	ldr	r3, [pc, #212]	; (8002230 <HAL_OSPI_MspInit+0x188>)
 800215a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215e:	4a34      	ldr	r2, [pc, #208]	; (8002230 <HAL_OSPI_MspInit+0x188>)
 8002160:	f043 0320 	orr.w	r3, r3, #32
 8002164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002168:	4b31      	ldr	r3, [pc, #196]	; (8002230 <HAL_OSPI_MspInit+0x188>)
 800216a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> OCTOSPIM_P1_IO0
    PF9     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002176:	2304      	movs	r3, #4
 8002178:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002188:	2303      	movs	r3, #3
 800218a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800218e:	2309      	movs	r3, #9
 8002190:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002194:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002198:	4619      	mov	r1, r3
 800219a:	4826      	ldr	r0, [pc, #152]	; (8002234 <HAL_OSPI_MspInit+0x18c>)
 800219c:	f002 fec6 	bl	8004f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80021a0:	f44f 7350 	mov.w	r3, #832	; 0x340
 80021a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80021ba:	230a      	movs	r3, #10
 80021bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021c4:	4619      	mov	r1, r3
 80021c6:	481c      	ldr	r0, [pc, #112]	; (8002238 <HAL_OSPI_MspInit+0x190>)
 80021c8:	f002 feb0 	bl	8004f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80021e6:	2309      	movs	r3, #9
 80021e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021f0:	4619      	mov	r1, r3
 80021f2:	4811      	ldr	r0, [pc, #68]	; (8002238 <HAL_OSPI_MspInit+0x190>)
 80021f4:	f002 fe9a 	bl	8004f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80021f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220c:	2303      	movs	r3, #3
 800220e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8002212:	230b      	movs	r3, #11
 8002214:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002218:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800221c:	4619      	mov	r1, r3
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <HAL_OSPI_MspInit+0x18c>)
 8002220:	f002 fe84 	bl	8004f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8002224:	bf00      	nop
 8002226:	37e8      	adds	r7, #232	; 0xe8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	52005000 	.word	0x52005000
 8002230:	58024400 	.word	0x58024400
 8002234:	58021000 	.word	0x58021000
 8002238:	58021400 	.word	0x58021400

0800223c <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002240:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <MX_SAI1_Init+0xb0>)
 8002242:	4a2b      	ldr	r2, [pc, #172]	; (80022f0 <MX_SAI1_Init+0xb4>)
 8002244:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002246:	4b29      	ldr	r3, [pc, #164]	; (80022ec <MX_SAI1_Init+0xb0>)
 8002248:	2200      	movs	r2, #0
 800224a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <MX_SAI1_Init+0xb0>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002252:	4b26      	ldr	r3, [pc, #152]	; (80022ec <MX_SAI1_Init+0xb0>)
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002258:	4b24      	ldr	r3, [pc, #144]	; (80022ec <MX_SAI1_Init+0xb0>)
 800225a:	2200      	movs	r2, #0
 800225c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800225e:	4b23      	ldr	r3, [pc, #140]	; (80022ec <MX_SAI1_Init+0xb0>)
 8002260:	2200      	movs	r2, #0
 8002262:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002264:	4b21      	ldr	r3, [pc, #132]	; (80022ec <MX_SAI1_Init+0xb0>)
 8002266:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800226a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800226c:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <MX_SAI1_Init+0xb0>)
 800226e:	2200      	movs	r2, #0
 8002270:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002272:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <MX_SAI1_Init+0xb0>)
 8002274:	2200      	movs	r2, #0
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002278:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <MX_SAI1_Init+0xb0>)
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <MX_SAI1_Init+0xb0>)
 8002280:	2200      	movs	r2, #0
 8002282:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8002284:	2308      	movs	r3, #8
 8002286:	2202      	movs	r2, #2
 8002288:	2100      	movs	r1, #0
 800228a:	4818      	ldr	r0, [pc, #96]	; (80022ec <MX_SAI1_Init+0xb0>)
 800228c:	f008 fcae 	bl	800abec <HAL_SAI_InitProtocol>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8002296:	f7ff fea2 	bl	8001fde <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <MX_SAI1_Init+0xb8>)
 800229c:	4a16      	ldr	r2, [pc, #88]	; (80022f8 <MX_SAI1_Init+0xbc>)
 800229e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <MX_SAI1_Init+0xb8>)
 80022a2:	2203      	movs	r2, #3
 80022a4:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <MX_SAI1_Init+0xb8>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <MX_SAI1_Init+0xb8>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <MX_SAI1_Init+0xb8>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <MX_SAI1_Init+0xb8>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <MX_SAI1_Init+0xb8>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <MX_SAI1_Init+0xb8>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <MX_SAI1_Init+0xb8>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 80022d0:	2308      	movs	r3, #8
 80022d2:	2202      	movs	r2, #2
 80022d4:	2100      	movs	r1, #0
 80022d6:	4807      	ldr	r0, [pc, #28]	; (80022f4 <MX_SAI1_Init+0xb8>)
 80022d8:	f008 fc88 	bl	800abec <HAL_SAI_InitProtocol>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 80022e2:	f7ff fe7c 	bl	8001fde <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2400b63c 	.word	0x2400b63c
 80022f0:	40015804 	.word	0x40015804
 80022f4:	2400b6d4 	.word	0x2400b6d4
 80022f8:	40015824 	.word	0x40015824

080022fc <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a66      	ldr	r2, [pc, #408]	; (80024a4 <HAL_SAI_MspInit+0x1a8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d160      	bne.n	80023d0 <HAL_SAI_MspInit+0xd4>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800230e:	4b66      	ldr	r3, [pc, #408]	; (80024a8 <HAL_SAI_MspInit+0x1ac>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10e      	bne.n	8002334 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002316:	4b65      	ldr	r3, [pc, #404]	; (80024ac <HAL_SAI_MspInit+0x1b0>)
 8002318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800231c:	4a63      	ldr	r2, [pc, #396]	; (80024ac <HAL_SAI_MspInit+0x1b0>)
 800231e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002322:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002326:	4b61      	ldr	r3, [pc, #388]	; (80024ac <HAL_SAI_MspInit+0x1b0>)
 8002328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800232c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002334:	4b5c      	ldr	r3, [pc, #368]	; (80024a8 <HAL_SAI_MspInit+0x1ac>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	4a5b      	ldr	r2, [pc, #364]	; (80024a8 <HAL_SAI_MspInit+0x1ac>)
 800233c:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800233e:	2370      	movs	r3, #112	; 0x70
 8002340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800234e:	2306      	movs	r3, #6
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	4619      	mov	r1, r3
 8002358:	4855      	ldr	r0, [pc, #340]	; (80024b0 <HAL_SAI_MspInit+0x1b4>)
 800235a:	f002 fde7 	bl	8004f2c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 800235e:	4b55      	ldr	r3, [pc, #340]	; (80024b4 <HAL_SAI_MspInit+0x1b8>)
 8002360:	4a55      	ldr	r2, [pc, #340]	; (80024b8 <HAL_SAI_MspInit+0x1bc>)
 8002362:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002364:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <HAL_SAI_MspInit+0x1b8>)
 8002366:	2257      	movs	r2, #87	; 0x57
 8002368:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800236a:	4b52      	ldr	r3, [pc, #328]	; (80024b4 <HAL_SAI_MspInit+0x1b8>)
 800236c:	2240      	movs	r2, #64	; 0x40
 800236e:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002370:	4b50      	ldr	r3, [pc, #320]	; (80024b4 <HAL_SAI_MspInit+0x1b8>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002376:	4b4f      	ldr	r3, [pc, #316]	; (80024b4 <HAL_SAI_MspInit+0x1b8>)
 8002378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800237c:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800237e:	4b4d      	ldr	r3, [pc, #308]	; (80024b4 <HAL_SAI_MspInit+0x1b8>)
 8002380:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002384:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002386:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <HAL_SAI_MspInit+0x1b8>)
 8002388:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800238c:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800238e:	4b49      	ldr	r3, [pc, #292]	; (80024b4 <HAL_SAI_MspInit+0x1b8>)
 8002390:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002394:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002396:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <HAL_SAI_MspInit+0x1b8>)
 8002398:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800239c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800239e:	4b45      	ldr	r3, [pc, #276]	; (80024b4 <HAL_SAI_MspInit+0x1b8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80023a4:	4843      	ldr	r0, [pc, #268]	; (80024b4 <HAL_SAI_MspInit+0x1b8>)
 80023a6:	f000 fce1 	bl	8002d6c <HAL_DMA_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 80023b0:	f7ff fe15 	bl	8001fde <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3f      	ldr	r2, [pc, #252]	; (80024b4 <HAL_SAI_MspInit+0x1b8>)
 80023b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80023bc:	4a3d      	ldr	r2, [pc, #244]	; (80024b4 <HAL_SAI_MspInit+0x1b8>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a3b      	ldr	r2, [pc, #236]	; (80024b4 <HAL_SAI_MspInit+0x1b8>)
 80023c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80023ca:	4a3a      	ldr	r2, [pc, #232]	; (80024b4 <HAL_SAI_MspInit+0x1b8>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a39      	ldr	r2, [pc, #228]	; (80024bc <HAL_SAI_MspInit+0x1c0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d160      	bne.n	800249c <HAL_SAI_MspInit+0x1a0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80023da:	4b33      	ldr	r3, [pc, #204]	; (80024a8 <HAL_SAI_MspInit+0x1ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10e      	bne.n	8002400 <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80023e2:	4b32      	ldr	r3, [pc, #200]	; (80024ac <HAL_SAI_MspInit+0x1b0>)
 80023e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023e8:	4a30      	ldr	r2, [pc, #192]	; (80024ac <HAL_SAI_MspInit+0x1b0>)
 80023ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023f2:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <HAL_SAI_MspInit+0x1b0>)
 80023f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002400:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <HAL_SAI_MspInit+0x1ac>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <HAL_SAI_MspInit+0x1ac>)
 8002408:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800240a:	2308      	movs	r3, #8
 800240c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800241a:	2306      	movs	r3, #6
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	4822      	ldr	r0, [pc, #136]	; (80024b0 <HAL_SAI_MspInit+0x1b4>)
 8002426:	f002 fd81 	bl	8004f2c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream0;
 800242a:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <HAL_SAI_MspInit+0x1c4>)
 800242c:	4a25      	ldr	r2, [pc, #148]	; (80024c4 <HAL_SAI_MspInit+0x1c8>)
 800242e:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002430:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <HAL_SAI_MspInit+0x1c4>)
 8002432:	2258      	movs	r2, #88	; 0x58
 8002434:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002436:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <HAL_SAI_MspInit+0x1c4>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800243c:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_SAI_MspInit+0x1c4>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8002442:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <HAL_SAI_MspInit+0x1c4>)
 8002444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002448:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800244a:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <HAL_SAI_MspInit+0x1c4>)
 800244c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002450:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002452:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <HAL_SAI_MspInit+0x1c4>)
 8002454:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002458:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_SAI_MspInit+0x1c4>)
 800245c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002460:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <HAL_SAI_MspInit+0x1c4>)
 8002464:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002468:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_SAI_MspInit+0x1c4>)
 800246c:	2200      	movs	r2, #0
 800246e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002470:	4813      	ldr	r0, [pc, #76]	; (80024c0 <HAL_SAI_MspInit+0x1c4>)
 8002472:	f000 fc7b 	bl	8002d6c <HAL_DMA_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 800247c:	f7ff fdaf 	bl	8001fde <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <HAL_SAI_MspInit+0x1c4>)
 8002484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <HAL_SAI_MspInit+0x1c4>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <HAL_SAI_MspInit+0x1c4>)
 8002492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <HAL_SAI_MspInit+0x1c4>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 800249c:	bf00      	nop
 800249e:	3728      	adds	r7, #40	; 0x28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40015804 	.word	0x40015804
 80024a8:	2400b85c 	.word	0x2400b85c
 80024ac:	58024400 	.word	0x58024400
 80024b0:	58021000 	.word	0x58021000
 80024b4:	2400b76c 	.word	0x2400b76c
 80024b8:	40020010 	.word	0x40020010
 80024bc:	40015824 	.word	0x40015824
 80024c0:	2400b7e4 	.word	0x2400b7e4
 80024c4:	40020410 	.word	0x40020410

080024c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024cc:	4b27      	ldr	r3, [pc, #156]	; (800256c <MX_SPI1_Init+0xa4>)
 80024ce:	4a28      	ldr	r2, [pc, #160]	; (8002570 <MX_SPI1_Init+0xa8>)
 80024d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024d2:	4b26      	ldr	r3, [pc, #152]	; (800256c <MX_SPI1_Init+0xa4>)
 80024d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80024d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024da:	4b24      	ldr	r3, [pc, #144]	; (800256c <MX_SPI1_Init+0xa4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <MX_SPI1_Init+0xa4>)
 80024e2:	2207      	movs	r2, #7
 80024e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024e6:	4b21      	ldr	r3, [pc, #132]	; (800256c <MX_SPI1_Init+0xa4>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <MX_SPI1_Init+0xa4>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <MX_SPI1_Init+0xa4>)
 80024f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80024f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80024fa:	4b1c      	ldr	r3, [pc, #112]	; (800256c <MX_SPI1_Init+0xa4>)
 80024fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002500:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002502:	4b1a      	ldr	r3, [pc, #104]	; (800256c <MX_SPI1_Init+0xa4>)
 8002504:	2200      	movs	r2, #0
 8002506:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002508:	4b18      	ldr	r3, [pc, #96]	; (800256c <MX_SPI1_Init+0xa4>)
 800250a:	2200      	movs	r2, #0
 800250c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800250e:	4b17      	ldr	r3, [pc, #92]	; (800256c <MX_SPI1_Init+0xa4>)
 8002510:	2200      	movs	r2, #0
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <MX_SPI1_Init+0xa4>)
 8002516:	2200      	movs	r2, #0
 8002518:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <MX_SPI1_Init+0xa4>)
 800251c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002520:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <MX_SPI1_Init+0xa4>)
 8002524:	2200      	movs	r2, #0
 8002526:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002528:	4b10      	ldr	r3, [pc, #64]	; (800256c <MX_SPI1_Init+0xa4>)
 800252a:	2200      	movs	r2, #0
 800252c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_SPI1_Init+0xa4>)
 8002530:	2200      	movs	r2, #0
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002534:	4b0d      	ldr	r3, [pc, #52]	; (800256c <MX_SPI1_Init+0xa4>)
 8002536:	2200      	movs	r2, #0
 8002538:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <MX_SPI1_Init+0xa4>)
 800253c:	2200      	movs	r2, #0
 800253e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <MX_SPI1_Init+0xa4>)
 8002542:	2200      	movs	r2, #0
 8002544:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_SPI1_Init+0xa4>)
 8002548:	2200      	movs	r2, #0
 800254a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <MX_SPI1_Init+0xa4>)
 800254e:	2200      	movs	r2, #0
 8002550:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_SPI1_Init+0xa4>)
 8002554:	2200      	movs	r2, #0
 8002556:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002558:	4804      	ldr	r0, [pc, #16]	; (800256c <MX_SPI1_Init+0xa4>)
 800255a:	f009 f9d3 	bl	800b904 <HAL_SPI_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002564:	f7ff fd3b 	bl	8001fde <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	2400b860 	.word	0x2400b860
 8002570:	40013000 	.word	0x40013000

08002574 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	; 0x30
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a3a      	ldr	r2, [pc, #232]	; (800267c <HAL_SPI_MspInit+0x108>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d16d      	bne.n	8002672 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002596:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <HAL_SPI_MspInit+0x10c>)
 8002598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800259c:	4a38      	ldr	r2, [pc, #224]	; (8002680 <HAL_SPI_MspInit+0x10c>)
 800259e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025a6:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_SPI_MspInit+0x10c>)
 80025a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b4:	4b32      	ldr	r3, [pc, #200]	; (8002680 <HAL_SPI_MspInit+0x10c>)
 80025b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ba:	4a31      	ldr	r2, [pc, #196]	; (8002680 <HAL_SPI_MspInit+0x10c>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025c4:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <HAL_SPI_MspInit+0x10c>)
 80025c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d2:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_SPI_MspInit+0x10c>)
 80025d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d8:	4a29      	ldr	r2, [pc, #164]	; (8002680 <HAL_SPI_MspInit+0x10c>)
 80025da:	f043 0308 	orr.w	r3, r3, #8
 80025de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025e2:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_SPI_MspInit+0x10c>)
 80025e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025f0:	4b23      	ldr	r3, [pc, #140]	; (8002680 <HAL_SPI_MspInit+0x10c>)
 80025f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f6:	4a22      	ldr	r2, [pc, #136]	; (8002680 <HAL_SPI_MspInit+0x10c>)
 80025f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_SPI_MspInit+0x10c>)
 8002602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> SPI1_MISO
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 800260e:	f248 0340 	movw	r3, #32832	; 0x8040
 8002612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002620:	2305      	movs	r3, #5
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	4619      	mov	r1, r3
 800262a:	4816      	ldr	r0, [pc, #88]	; (8002684 <HAL_SPI_MspInit+0x110>)
 800262c:	f002 fc7e 	bl	8004f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002640:	2305      	movs	r3, #5
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	4619      	mov	r1, r3
 800264a:	480f      	ldr	r0, [pc, #60]	; (8002688 <HAL_SPI_MspInit+0x114>)
 800264c:	f002 fc6e 	bl	8004f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002650:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002662:	2305      	movs	r3, #5
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002666:	f107 031c 	add.w	r3, r7, #28
 800266a:	4619      	mov	r1, r3
 800266c:	4807      	ldr	r0, [pc, #28]	; (800268c <HAL_SPI_MspInit+0x118>)
 800266e:	f002 fc5d 	bl	8004f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002672:	bf00      	nop
 8002674:	3730      	adds	r7, #48	; 0x30
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40013000 	.word	0x40013000
 8002680:	58024400 	.word	0x58024400
 8002684:	58020000 	.word	0x58020000
 8002688:	58020c00 	.word	0x58020c00
 800268c:	58021800 	.word	0x58021800

08002690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_MspInit+0x30>)
 8002698:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800269c:	4a08      	ldr	r2, [pc, #32]	; (80026c0 <HAL_MspInit+0x30>)
 800269e:	f043 0302 	orr.w	r3, r3, #2
 80026a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_MspInit+0x30>)
 80026a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	58024400 	.word	0x58024400

080026c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026c8:	e7fe      	b.n	80026c8 <NMI_Handler+0x4>

080026ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ce:	e7fe      	b.n	80026ce <HardFault_Handler+0x4>

080026d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <MemManage_Handler+0x4>

080026d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026da:	e7fe      	b.n	80026da <BusFault_Handler+0x4>

080026dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e0:	e7fe      	b.n	80026e0 <UsageFault_Handler+0x4>

080026e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002710:	f000 f9d8 	bl	8002ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}

08002718 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <DMA1_Stream0_IRQHandler+0x10>)
 800271e:	f001 f8e7 	bl	80038f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	2400b76c 	.word	0x2400b76c

0800272c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <DMA2_Stream0_IRQHandler+0x10>)
 8002732:	f001 f8dd 	bl	80038f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	2400b7e4 	.word	0x2400b7e4

08002740 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <OTG_HS_IRQHandler+0x10>)
 8002746:	f003 fdd5 	bl	80062f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2400becc 	.word	0x2400becc

08002754 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	e00a      	b.n	800277c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002766:	f3af 8000 	nop.w
 800276a:	4601      	mov	r1, r0
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	60ba      	str	r2, [r7, #8]
 8002772:	b2ca      	uxtb	r2, r1
 8002774:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3301      	adds	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	dbf0      	blt.n	8002766 <_read+0x12>
  }

  return len;
 8002784:	687b      	ldr	r3, [r7, #4]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	e009      	b.n	80027b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	60ba      	str	r2, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3301      	adds	r3, #1
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	dbf1      	blt.n	80027a0 <_write+0x12>
  }
  return len;
 80027bc:	687b      	ldr	r3, [r7, #4]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <_close>:

int _close(int file)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027ee:	605a      	str	r2, [r3, #4]
  return 0;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <_isatty>:

int _isatty(int file)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002806:	2301      	movs	r3, #1
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002838:	4a14      	ldr	r2, [pc, #80]	; (800288c <_sbrk+0x5c>)
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <_sbrk+0x60>)
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <_sbrk+0x64>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <_sbrk+0x64>)
 800284e:	4a12      	ldr	r2, [pc, #72]	; (8002898 <_sbrk+0x68>)
 8002850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <_sbrk+0x64>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	429a      	cmp	r2, r3
 800285e:	d207      	bcs.n	8002870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002860:	f00e fd40 	bl	80112e4 <__errno>
 8002864:	4603      	mov	r3, r0
 8002866:	220c      	movs	r2, #12
 8002868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
 800286e:	e009      	b.n	8002884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <_sbrk+0x64>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <_sbrk+0x64>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <_sbrk+0x64>)
 8002880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002882:	68fb      	ldr	r3, [r7, #12]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	24050000 	.word	0x24050000
 8002890:	00004000 	.word	0x00004000
 8002894:	2400b8e8 	.word	0x2400b8e8
 8002898:	2400c920 	.word	0x2400c920

0800289c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028a0:	4b32      	ldr	r3, [pc, #200]	; (800296c <SystemInit+0xd0>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	4a31      	ldr	r2, [pc, #196]	; (800296c <SystemInit+0xd0>)
 80028a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028b0:	4b2f      	ldr	r3, [pc, #188]	; (8002970 <SystemInit+0xd4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	2b06      	cmp	r3, #6
 80028ba:	d807      	bhi.n	80028cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028bc:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <SystemInit+0xd4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 030f 	bic.w	r3, r3, #15
 80028c4:	4a2a      	ldr	r2, [pc, #168]	; (8002970 <SystemInit+0xd4>)
 80028c6:	f043 0307 	orr.w	r3, r3, #7
 80028ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028cc:	4b29      	ldr	r3, [pc, #164]	; (8002974 <SystemInit+0xd8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a28      	ldr	r2, [pc, #160]	; (8002974 <SystemInit+0xd8>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028d8:	4b26      	ldr	r3, [pc, #152]	; (8002974 <SystemInit+0xd8>)
 80028da:	2200      	movs	r2, #0
 80028dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80028de:	4b25      	ldr	r3, [pc, #148]	; (8002974 <SystemInit+0xd8>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4924      	ldr	r1, [pc, #144]	; (8002974 <SystemInit+0xd8>)
 80028e4:	4b24      	ldr	r3, [pc, #144]	; (8002978 <SystemInit+0xdc>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028ea:	4b21      	ldr	r3, [pc, #132]	; (8002970 <SystemInit+0xd4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028f6:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <SystemInit+0xd4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 030f 	bic.w	r3, r3, #15
 80028fe:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <SystemInit+0xd4>)
 8002900:	f043 0307 	orr.w	r3, r3, #7
 8002904:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <SystemInit+0xd8>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <SystemInit+0xd8>)
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002912:	4b18      	ldr	r3, [pc, #96]	; (8002974 <SystemInit+0xd8>)
 8002914:	2200      	movs	r2, #0
 8002916:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002918:	4b16      	ldr	r3, [pc, #88]	; (8002974 <SystemInit+0xd8>)
 800291a:	4a18      	ldr	r2, [pc, #96]	; (800297c <SystemInit+0xe0>)
 800291c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <SystemInit+0xd8>)
 8002920:	4a17      	ldr	r2, [pc, #92]	; (8002980 <SystemInit+0xe4>)
 8002922:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <SystemInit+0xd8>)
 8002926:	4a17      	ldr	r2, [pc, #92]	; (8002984 <SystemInit+0xe8>)
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <SystemInit+0xd8>)
 800292c:	2200      	movs	r2, #0
 800292e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002930:	4b10      	ldr	r3, [pc, #64]	; (8002974 <SystemInit+0xd8>)
 8002932:	4a14      	ldr	r2, [pc, #80]	; (8002984 <SystemInit+0xe8>)
 8002934:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002936:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <SystemInit+0xd8>)
 8002938:	2200      	movs	r2, #0
 800293a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800293c:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <SystemInit+0xd8>)
 800293e:	4a11      	ldr	r2, [pc, #68]	; (8002984 <SystemInit+0xe8>)
 8002940:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002942:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <SystemInit+0xd8>)
 8002944:	2200      	movs	r2, #0
 8002946:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <SystemInit+0xd8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a09      	ldr	r2, [pc, #36]	; (8002974 <SystemInit+0xd8>)
 800294e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002952:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <SystemInit+0xd8>)
 8002956:	2200      	movs	r2, #0
 8002958:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <SystemInit+0xec>)
 800295c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002960:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002962:	bf00      	nop
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00
 8002970:	52002000 	.word	0x52002000
 8002974:	58024400 	.word	0x58024400
 8002978:	eaf6ed7f 	.word	0xeaf6ed7f
 800297c:	02020200 	.word	0x02020200
 8002980:	01ff0000 	.word	0x01ff0000
 8002984:	01010280 	.word	0x01010280
 8002988:	52004000 	.word	0x52004000

0800298c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800298c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002990:	f7ff ff84 	bl	800289c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002996:	490d      	ldr	r1, [pc, #52]	; (80029cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800299c:	e002      	b.n	80029a4 <LoopCopyDataInit>

0800299e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800299e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029a2:	3304      	adds	r3, #4

080029a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a8:	d3f9      	bcc.n	800299e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029aa:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029ac:	4c0a      	ldr	r4, [pc, #40]	; (80029d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b0:	e001      	b.n	80029b6 <LoopFillZerobss>

080029b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b4:	3204      	adds	r2, #4

080029b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b8:	d3fb      	bcc.n	80029b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ba:	f00e fc99 	bl	80112f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029be:	f7ff fa0b 	bl	8001dd8 <main>
  bx  lr
 80029c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029c4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80029c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80029cc:	240004d0 	.word	0x240004d0
  ldr r2, =_sidata
 80029d0:	08012e40 	.word	0x08012e40
  ldr r2, =_sbss
 80029d4:	240004d0 	.word	0x240004d0
  ldr r4, =_ebss
 80029d8:	2400c920 	.word	0x2400c920

080029dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029dc:	e7fe      	b.n	80029dc <ADC3_IRQHandler>
	...

080029e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e6:	2003      	movs	r0, #3
 80029e8:	f000 f980 	bl	8002cec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029ec:	f005 fb58 	bl	80080a0 <HAL_RCC_GetSysClockFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_Init+0x68>)
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	4913      	ldr	r1, [pc, #76]	; (8002a4c <HAL_Init+0x6c>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
 8002a08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <HAL_Init+0x68>)
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <HAL_Init+0x6c>)
 8002a14:	5cd3      	ldrb	r3, [r2, r3]
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a20:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <HAL_Init+0x70>)
 8002a22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a24:	4a0b      	ldr	r2, [pc, #44]	; (8002a54 <HAL_Init+0x74>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a2a:	200f      	movs	r0, #15
 8002a2c:	f000 f814 	bl	8002a58 <HAL_InitTick>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e002      	b.n	8002a40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a3a:	f7ff fe29 	bl	8002690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	08012c10 	.word	0x08012c10
 8002a50:	24000394 	.word	0x24000394
 8002a54:	24000390 	.word	0x24000390

08002a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <HAL_InitTick+0x60>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e021      	b.n	8002ab0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_InitTick+0x64>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_InitTick+0x60>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f965 	bl	8002d52 <HAL_SYSTICK_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00e      	b.n	8002ab0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b0f      	cmp	r3, #15
 8002a96:	d80a      	bhi.n	8002aae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa0:	f000 f92f 	bl	8002d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aa4:	4a06      	ldr	r2, [pc, #24]	; (8002ac0 <HAL_InitTick+0x68>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	2400039c 	.word	0x2400039c
 8002abc:	24000390 	.word	0x24000390
 8002ac0:	24000398 	.word	0x24000398

08002ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_IncTick+0x20>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_IncTick+0x24>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <HAL_IncTick+0x24>)
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	2400039c 	.word	0x2400039c
 8002ae8:	2400b8ec 	.word	0x2400b8ec

08002aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return uwTick;
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <HAL_GetTick+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	2400b8ec 	.word	0x2400b8ec

08002b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b0c:	f7ff ffee 	bl	8002aec <HAL_GetTick>
 8002b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d005      	beq.n	8002b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <HAL_Delay+0x44>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4413      	add	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b2a:	bf00      	nop
 8002b2c:	f7ff ffde 	bl	8002aec <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d8f7      	bhi.n	8002b2c <HAL_Delay+0x28>
  {
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	2400039c 	.word	0x2400039c

08002b4c <__NVIC_SetPriorityGrouping>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <__NVIC_SetPriorityGrouping+0x40>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b7a:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <__NVIC_SetPriorityGrouping+0x40>)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	60d3      	str	r3, [r2, #12]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000ed00 	.word	0xe000ed00
 8002b90:	05fa0000 	.word	0x05fa0000

08002b94 <__NVIC_GetPriorityGrouping>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b98:	4b04      	ldr	r3, [pc, #16]	; (8002bac <__NVIC_GetPriorityGrouping+0x18>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <__NVIC_EnableIRQ>:
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	db0b      	blt.n	8002bda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4907      	ldr	r1, [pc, #28]	; (8002be8 <__NVIC_EnableIRQ+0x38>)
 8002bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000e100 	.word	0xe000e100

08002bec <__NVIC_SetPriority>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	6039      	str	r1, [r7, #0]
 8002bf6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	db0a      	blt.n	8002c16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	490c      	ldr	r1, [pc, #48]	; (8002c38 <__NVIC_SetPriority+0x4c>)
 8002c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c0a:	0112      	lsls	r2, r2, #4
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c14:	e00a      	b.n	8002c2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4908      	ldr	r1, [pc, #32]	; (8002c3c <__NVIC_SetPriority+0x50>)
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	3b04      	subs	r3, #4
 8002c24:	0112      	lsls	r2, r2, #4
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	440b      	add	r3, r1
 8002c2a:	761a      	strb	r2, [r3, #24]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000e100 	.word	0xe000e100
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <NVIC_EncodePriority>:
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	; 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f1c3 0307 	rsb	r3, r3, #7
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	bf28      	it	cs
 8002c5e:	2304      	movcs	r3, #4
 8002c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3304      	adds	r3, #4
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d902      	bls.n	8002c70 <NVIC_EncodePriority+0x30>
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3b03      	subs	r3, #3
 8002c6e:	e000      	b.n	8002c72 <NVIC_EncodePriority+0x32>
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	401a      	ands	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c88:	f04f 31ff 	mov.w	r1, #4294967295
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	43d9      	mvns	r1, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c98:	4313      	orrs	r3, r2
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3724      	adds	r7, #36	; 0x24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb8:	d301      	bcc.n	8002cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00f      	b.n	8002cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <SysTick_Config+0x40>)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cc6:	210f      	movs	r1, #15
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	f7ff ff8e 	bl	8002bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <SysTick_Config+0x40>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cd6:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <SysTick_Config+0x40>)
 8002cd8:	2207      	movs	r2, #7
 8002cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	e000e010 	.word	0xe000e010

08002cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ff29 	bl	8002b4c <__NVIC_SetPriorityGrouping>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b086      	sub	sp, #24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	4603      	mov	r3, r0
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d10:	f7ff ff40 	bl	8002b94 <__NVIC_GetPriorityGrouping>
 8002d14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	6978      	ldr	r0, [r7, #20]
 8002d1c:	f7ff ff90 	bl	8002c40 <NVIC_EncodePriority>
 8002d20:	4602      	mov	r2, r0
 8002d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff5f 	bl	8002bec <__NVIC_SetPriority>
}
 8002d2e:	bf00      	nop
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff33 	bl	8002bb0 <__NVIC_EnableIRQ>
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff ffa4 	bl	8002ca8 <SysTick_Config>
 8002d60:	4603      	mov	r3, r0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d74:	f7ff feba 	bl	8002aec <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e312      	b.n	80033aa <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a66      	ldr	r2, [pc, #408]	; (8002f24 <HAL_DMA_Init+0x1b8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d04a      	beq.n	8002e24 <HAL_DMA_Init+0xb8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a65      	ldr	r2, [pc, #404]	; (8002f28 <HAL_DMA_Init+0x1bc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d045      	beq.n	8002e24 <HAL_DMA_Init+0xb8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a63      	ldr	r2, [pc, #396]	; (8002f2c <HAL_DMA_Init+0x1c0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d040      	beq.n	8002e24 <HAL_DMA_Init+0xb8>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a62      	ldr	r2, [pc, #392]	; (8002f30 <HAL_DMA_Init+0x1c4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d03b      	beq.n	8002e24 <HAL_DMA_Init+0xb8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a60      	ldr	r2, [pc, #384]	; (8002f34 <HAL_DMA_Init+0x1c8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d036      	beq.n	8002e24 <HAL_DMA_Init+0xb8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a5f      	ldr	r2, [pc, #380]	; (8002f38 <HAL_DMA_Init+0x1cc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d031      	beq.n	8002e24 <HAL_DMA_Init+0xb8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a5d      	ldr	r2, [pc, #372]	; (8002f3c <HAL_DMA_Init+0x1d0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d02c      	beq.n	8002e24 <HAL_DMA_Init+0xb8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a5c      	ldr	r2, [pc, #368]	; (8002f40 <HAL_DMA_Init+0x1d4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d027      	beq.n	8002e24 <HAL_DMA_Init+0xb8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a5a      	ldr	r2, [pc, #360]	; (8002f44 <HAL_DMA_Init+0x1d8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d022      	beq.n	8002e24 <HAL_DMA_Init+0xb8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a59      	ldr	r2, [pc, #356]	; (8002f48 <HAL_DMA_Init+0x1dc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d01d      	beq.n	8002e24 <HAL_DMA_Init+0xb8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a57      	ldr	r2, [pc, #348]	; (8002f4c <HAL_DMA_Init+0x1e0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d018      	beq.n	8002e24 <HAL_DMA_Init+0xb8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a56      	ldr	r2, [pc, #344]	; (8002f50 <HAL_DMA_Init+0x1e4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d013      	beq.n	8002e24 <HAL_DMA_Init+0xb8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a54      	ldr	r2, [pc, #336]	; (8002f54 <HAL_DMA_Init+0x1e8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00e      	beq.n	8002e24 <HAL_DMA_Init+0xb8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a53      	ldr	r2, [pc, #332]	; (8002f58 <HAL_DMA_Init+0x1ec>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d009      	beq.n	8002e24 <HAL_DMA_Init+0xb8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a51      	ldr	r2, [pc, #324]	; (8002f5c <HAL_DMA_Init+0x1f0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d004      	beq.n	8002e24 <HAL_DMA_Init+0xb8>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a50      	ldr	r2, [pc, #320]	; (8002f60 <HAL_DMA_Init+0x1f4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d101      	bne.n	8002e28 <HAL_DMA_Init+0xbc>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_DMA_Init+0xbe>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 813c 	beq.w	80030a8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a37      	ldr	r2, [pc, #220]	; (8002f24 <HAL_DMA_Init+0x1b8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d04a      	beq.n	8002ee0 <HAL_DMA_Init+0x174>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a36      	ldr	r2, [pc, #216]	; (8002f28 <HAL_DMA_Init+0x1bc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d045      	beq.n	8002ee0 <HAL_DMA_Init+0x174>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a34      	ldr	r2, [pc, #208]	; (8002f2c <HAL_DMA_Init+0x1c0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d040      	beq.n	8002ee0 <HAL_DMA_Init+0x174>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a33      	ldr	r2, [pc, #204]	; (8002f30 <HAL_DMA_Init+0x1c4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d03b      	beq.n	8002ee0 <HAL_DMA_Init+0x174>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a31      	ldr	r2, [pc, #196]	; (8002f34 <HAL_DMA_Init+0x1c8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d036      	beq.n	8002ee0 <HAL_DMA_Init+0x174>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a30      	ldr	r2, [pc, #192]	; (8002f38 <HAL_DMA_Init+0x1cc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d031      	beq.n	8002ee0 <HAL_DMA_Init+0x174>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a2e      	ldr	r2, [pc, #184]	; (8002f3c <HAL_DMA_Init+0x1d0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d02c      	beq.n	8002ee0 <HAL_DMA_Init+0x174>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a2d      	ldr	r2, [pc, #180]	; (8002f40 <HAL_DMA_Init+0x1d4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d027      	beq.n	8002ee0 <HAL_DMA_Init+0x174>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a2b      	ldr	r2, [pc, #172]	; (8002f44 <HAL_DMA_Init+0x1d8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d022      	beq.n	8002ee0 <HAL_DMA_Init+0x174>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a2a      	ldr	r2, [pc, #168]	; (8002f48 <HAL_DMA_Init+0x1dc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d01d      	beq.n	8002ee0 <HAL_DMA_Init+0x174>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a28      	ldr	r2, [pc, #160]	; (8002f4c <HAL_DMA_Init+0x1e0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d018      	beq.n	8002ee0 <HAL_DMA_Init+0x174>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a27      	ldr	r2, [pc, #156]	; (8002f50 <HAL_DMA_Init+0x1e4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d013      	beq.n	8002ee0 <HAL_DMA_Init+0x174>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a25      	ldr	r2, [pc, #148]	; (8002f54 <HAL_DMA_Init+0x1e8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00e      	beq.n	8002ee0 <HAL_DMA_Init+0x174>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a24      	ldr	r2, [pc, #144]	; (8002f58 <HAL_DMA_Init+0x1ec>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d009      	beq.n	8002ee0 <HAL_DMA_Init+0x174>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a22      	ldr	r2, [pc, #136]	; (8002f5c <HAL_DMA_Init+0x1f0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d004      	beq.n	8002ee0 <HAL_DMA_Init+0x174>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <HAL_DMA_Init+0x1f4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d108      	bne.n	8002ef2 <HAL_DMA_Init+0x186>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	e007      	b.n	8002f02 <HAL_DMA_Init+0x196>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f02:	e02f      	b.n	8002f64 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f04:	f7ff fdf2 	bl	8002aec <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	d928      	bls.n	8002f64 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e242      	b.n	80033aa <HAL_DMA_Init+0x63e>
 8002f24:	40020010 	.word	0x40020010
 8002f28:	40020028 	.word	0x40020028
 8002f2c:	40020040 	.word	0x40020040
 8002f30:	40020058 	.word	0x40020058
 8002f34:	40020070 	.word	0x40020070
 8002f38:	40020088 	.word	0x40020088
 8002f3c:	400200a0 	.word	0x400200a0
 8002f40:	400200b8 	.word	0x400200b8
 8002f44:	40020410 	.word	0x40020410
 8002f48:	40020428 	.word	0x40020428
 8002f4c:	40020440 	.word	0x40020440
 8002f50:	40020458 	.word	0x40020458
 8002f54:	40020470 	.word	0x40020470
 8002f58:	40020488 	.word	0x40020488
 8002f5c:	400204a0 	.word	0x400204a0
 8002f60:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1c8      	bne.n	8002f04 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4b83      	ldr	r3, [pc, #524]	; (800318c <HAL_DMA_Init+0x420>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002f8a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f96:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d107      	bne.n	8002fc8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b28      	cmp	r3, #40	; 0x28
 8002fce:	d903      	bls.n	8002fd8 <HAL_DMA_Init+0x26c>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8002fd6:	d91f      	bls.n	8003018 <HAL_DMA_Init+0x2ac>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b3e      	cmp	r3, #62	; 0x3e
 8002fde:	d903      	bls.n	8002fe8 <HAL_DMA_Init+0x27c>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b42      	cmp	r3, #66	; 0x42
 8002fe6:	d917      	bls.n	8003018 <HAL_DMA_Init+0x2ac>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b46      	cmp	r3, #70	; 0x46
 8002fee:	d903      	bls.n	8002ff8 <HAL_DMA_Init+0x28c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b48      	cmp	r3, #72	; 0x48
 8002ff6:	d90f      	bls.n	8003018 <HAL_DMA_Init+0x2ac>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b4e      	cmp	r3, #78	; 0x4e
 8002ffe:	d903      	bls.n	8003008 <HAL_DMA_Init+0x29c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b52      	cmp	r3, #82	; 0x52
 8003006:	d907      	bls.n	8003018 <HAL_DMA_Init+0x2ac>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b73      	cmp	r3, #115	; 0x73
 800300e:	d905      	bls.n	800301c <HAL_DMA_Init+0x2b0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b77      	cmp	r3, #119	; 0x77
 8003016:	d801      	bhi.n	800301c <HAL_DMA_Init+0x2b0>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <HAL_DMA_Init+0x2b2>
 800301c:	2300      	movs	r3, #0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003028:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f023 0307 	bic.w	r3, r3, #7
 8003040:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	2b04      	cmp	r3, #4
 8003052:	d117      	bne.n	8003084 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00e      	beq.n	8003084 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f001 fdd6 	bl	8004c18 <DMA_CheckFifoParam>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2240      	movs	r2, #64	; 0x40
 8003076:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e192      	b.n	80033aa <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f001 fd11 	bl	8004ab4 <DMA_CalcBaseAndBitshift>
 8003092:	4603      	mov	r3, r0
 8003094:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	223f      	movs	r2, #63	; 0x3f
 80030a0:	409a      	lsls	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	609a      	str	r2, [r3, #8]
 80030a6:	e0c8      	b.n	800323a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a38      	ldr	r2, [pc, #224]	; (8003190 <HAL_DMA_Init+0x424>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d022      	beq.n	80030f8 <HAL_DMA_Init+0x38c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a37      	ldr	r2, [pc, #220]	; (8003194 <HAL_DMA_Init+0x428>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d01d      	beq.n	80030f8 <HAL_DMA_Init+0x38c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a35      	ldr	r2, [pc, #212]	; (8003198 <HAL_DMA_Init+0x42c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d018      	beq.n	80030f8 <HAL_DMA_Init+0x38c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a34      	ldr	r2, [pc, #208]	; (800319c <HAL_DMA_Init+0x430>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d013      	beq.n	80030f8 <HAL_DMA_Init+0x38c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a32      	ldr	r2, [pc, #200]	; (80031a0 <HAL_DMA_Init+0x434>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00e      	beq.n	80030f8 <HAL_DMA_Init+0x38c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <HAL_DMA_Init+0x438>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d009      	beq.n	80030f8 <HAL_DMA_Init+0x38c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a2f      	ldr	r2, [pc, #188]	; (80031a8 <HAL_DMA_Init+0x43c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d004      	beq.n	80030f8 <HAL_DMA_Init+0x38c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2e      	ldr	r2, [pc, #184]	; (80031ac <HAL_DMA_Init+0x440>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_DMA_Init+0x390>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <HAL_DMA_Init+0x392>
 80030fc:	2300      	movs	r3, #0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8092 	beq.w	8003228 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a21      	ldr	r2, [pc, #132]	; (8003190 <HAL_DMA_Init+0x424>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d021      	beq.n	8003152 <HAL_DMA_Init+0x3e6>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a20      	ldr	r2, [pc, #128]	; (8003194 <HAL_DMA_Init+0x428>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d01c      	beq.n	8003152 <HAL_DMA_Init+0x3e6>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <HAL_DMA_Init+0x42c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d017      	beq.n	8003152 <HAL_DMA_Init+0x3e6>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1d      	ldr	r2, [pc, #116]	; (800319c <HAL_DMA_Init+0x430>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d012      	beq.n	8003152 <HAL_DMA_Init+0x3e6>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <HAL_DMA_Init+0x434>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00d      	beq.n	8003152 <HAL_DMA_Init+0x3e6>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <HAL_DMA_Init+0x438>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d008      	beq.n	8003152 <HAL_DMA_Init+0x3e6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <HAL_DMA_Init+0x43c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d003      	beq.n	8003152 <HAL_DMA_Init+0x3e6>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a17      	ldr	r2, [pc, #92]	; (80031ac <HAL_DMA_Init+0x440>)
 8003150:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_DMA_Init+0x444>)
 800316e:	4013      	ands	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b40      	cmp	r3, #64	; 0x40
 8003178:	d01c      	beq.n	80031b4 <HAL_DMA_Init+0x448>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b80      	cmp	r3, #128	; 0x80
 8003180:	d102      	bne.n	8003188 <HAL_DMA_Init+0x41c>
 8003182:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003186:	e016      	b.n	80031b6 <HAL_DMA_Init+0x44a>
 8003188:	2300      	movs	r3, #0
 800318a:	e014      	b.n	80031b6 <HAL_DMA_Init+0x44a>
 800318c:	fe10803f 	.word	0xfe10803f
 8003190:	58025408 	.word	0x58025408
 8003194:	5802541c 	.word	0x5802541c
 8003198:	58025430 	.word	0x58025430
 800319c:	58025444 	.word	0x58025444
 80031a0:	58025458 	.word	0x58025458
 80031a4:	5802546c 	.word	0x5802546c
 80031a8:	58025480 	.word	0x58025480
 80031ac:	58025494 	.word	0x58025494
 80031b0:	fffe000f 	.word	0xfffe000f
 80031b4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68d2      	ldr	r2, [r2, #12]
 80031ba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031e4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b6e      	ldr	r3, [pc, #440]	; (80033b4 <HAL_DMA_Init+0x648>)
 80031fc:	4413      	add	r3, r2
 80031fe:	4a6e      	ldr	r2, [pc, #440]	; (80033b8 <HAL_DMA_Init+0x64c>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	009a      	lsls	r2, r3, #2
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f001 fc51 	bl	8004ab4 <DMA_CalcBaseAndBitshift>
 8003212:	4603      	mov	r3, r0
 8003214:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2201      	movs	r2, #1
 8003220:	409a      	lsls	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	e008      	b.n	800323a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2240      	movs	r2, #64	; 0x40
 800322c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2203      	movs	r2, #3
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0b7      	b.n	80033aa <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a5f      	ldr	r2, [pc, #380]	; (80033bc <HAL_DMA_Init+0x650>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d072      	beq.n	800332a <HAL_DMA_Init+0x5be>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a5d      	ldr	r2, [pc, #372]	; (80033c0 <HAL_DMA_Init+0x654>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d06d      	beq.n	800332a <HAL_DMA_Init+0x5be>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a5c      	ldr	r2, [pc, #368]	; (80033c4 <HAL_DMA_Init+0x658>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d068      	beq.n	800332a <HAL_DMA_Init+0x5be>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a5a      	ldr	r2, [pc, #360]	; (80033c8 <HAL_DMA_Init+0x65c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d063      	beq.n	800332a <HAL_DMA_Init+0x5be>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a59      	ldr	r2, [pc, #356]	; (80033cc <HAL_DMA_Init+0x660>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d05e      	beq.n	800332a <HAL_DMA_Init+0x5be>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a57      	ldr	r2, [pc, #348]	; (80033d0 <HAL_DMA_Init+0x664>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d059      	beq.n	800332a <HAL_DMA_Init+0x5be>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a56      	ldr	r2, [pc, #344]	; (80033d4 <HAL_DMA_Init+0x668>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d054      	beq.n	800332a <HAL_DMA_Init+0x5be>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a54      	ldr	r2, [pc, #336]	; (80033d8 <HAL_DMA_Init+0x66c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d04f      	beq.n	800332a <HAL_DMA_Init+0x5be>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a53      	ldr	r2, [pc, #332]	; (80033dc <HAL_DMA_Init+0x670>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d04a      	beq.n	800332a <HAL_DMA_Init+0x5be>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a51      	ldr	r2, [pc, #324]	; (80033e0 <HAL_DMA_Init+0x674>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d045      	beq.n	800332a <HAL_DMA_Init+0x5be>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a50      	ldr	r2, [pc, #320]	; (80033e4 <HAL_DMA_Init+0x678>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d040      	beq.n	800332a <HAL_DMA_Init+0x5be>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a4e      	ldr	r2, [pc, #312]	; (80033e8 <HAL_DMA_Init+0x67c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d03b      	beq.n	800332a <HAL_DMA_Init+0x5be>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a4d      	ldr	r2, [pc, #308]	; (80033ec <HAL_DMA_Init+0x680>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d036      	beq.n	800332a <HAL_DMA_Init+0x5be>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a4b      	ldr	r2, [pc, #300]	; (80033f0 <HAL_DMA_Init+0x684>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d031      	beq.n	800332a <HAL_DMA_Init+0x5be>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a4a      	ldr	r2, [pc, #296]	; (80033f4 <HAL_DMA_Init+0x688>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d02c      	beq.n	800332a <HAL_DMA_Init+0x5be>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a48      	ldr	r2, [pc, #288]	; (80033f8 <HAL_DMA_Init+0x68c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d027      	beq.n	800332a <HAL_DMA_Init+0x5be>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a47      	ldr	r2, [pc, #284]	; (80033fc <HAL_DMA_Init+0x690>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d022      	beq.n	800332a <HAL_DMA_Init+0x5be>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a45      	ldr	r2, [pc, #276]	; (8003400 <HAL_DMA_Init+0x694>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01d      	beq.n	800332a <HAL_DMA_Init+0x5be>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a44      	ldr	r2, [pc, #272]	; (8003404 <HAL_DMA_Init+0x698>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d018      	beq.n	800332a <HAL_DMA_Init+0x5be>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a42      	ldr	r2, [pc, #264]	; (8003408 <HAL_DMA_Init+0x69c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d013      	beq.n	800332a <HAL_DMA_Init+0x5be>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a41      	ldr	r2, [pc, #260]	; (800340c <HAL_DMA_Init+0x6a0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d00e      	beq.n	800332a <HAL_DMA_Init+0x5be>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a3f      	ldr	r2, [pc, #252]	; (8003410 <HAL_DMA_Init+0x6a4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d009      	beq.n	800332a <HAL_DMA_Init+0x5be>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a3e      	ldr	r2, [pc, #248]	; (8003414 <HAL_DMA_Init+0x6a8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d004      	beq.n	800332a <HAL_DMA_Init+0x5be>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a3c      	ldr	r2, [pc, #240]	; (8003418 <HAL_DMA_Init+0x6ac>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <HAL_DMA_Init+0x5c2>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_DMA_Init+0x5c4>
 800332e:	2300      	movs	r3, #0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d032      	beq.n	800339a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f001 fceb 	bl	8004d10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b80      	cmp	r3, #128	; 0x80
 8003340:	d102      	bne.n	8003348 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800335c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d010      	beq.n	8003388 <HAL_DMA_Init+0x61c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b08      	cmp	r3, #8
 800336c:	d80c      	bhi.n	8003388 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f001 fd68 	bl	8004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	e008      	b.n	800339a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	a7fdabf8 	.word	0xa7fdabf8
 80033b8:	cccccccd 	.word	0xcccccccd
 80033bc:	40020010 	.word	0x40020010
 80033c0:	40020028 	.word	0x40020028
 80033c4:	40020040 	.word	0x40020040
 80033c8:	40020058 	.word	0x40020058
 80033cc:	40020070 	.word	0x40020070
 80033d0:	40020088 	.word	0x40020088
 80033d4:	400200a0 	.word	0x400200a0
 80033d8:	400200b8 	.word	0x400200b8
 80033dc:	40020410 	.word	0x40020410
 80033e0:	40020428 	.word	0x40020428
 80033e4:	40020440 	.word	0x40020440
 80033e8:	40020458 	.word	0x40020458
 80033ec:	40020470 	.word	0x40020470
 80033f0:	40020488 	.word	0x40020488
 80033f4:	400204a0 	.word	0x400204a0
 80033f8:	400204b8 	.word	0x400204b8
 80033fc:	58025408 	.word	0x58025408
 8003400:	5802541c 	.word	0x5802541c
 8003404:	58025430 	.word	0x58025430
 8003408:	58025444 	.word	0x58025444
 800340c:	58025458 	.word	0x58025458
 8003410:	5802546c 	.word	0x5802546c
 8003414:	58025480 	.word	0x58025480
 8003418:	58025494 	.word	0x58025494

0800341c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e226      	b.n	8003886 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_DMA_Start_IT+0x2a>
 8003442:	2302      	movs	r3, #2
 8003444:	e21f      	b.n	8003886 <HAL_DMA_Start_IT+0x46a>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	f040 820a 	bne.w	8003870 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a68      	ldr	r2, [pc, #416]	; (8003610 <HAL_DMA_Start_IT+0x1f4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d04a      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a66      	ldr	r2, [pc, #408]	; (8003614 <HAL_DMA_Start_IT+0x1f8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d045      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a65      	ldr	r2, [pc, #404]	; (8003618 <HAL_DMA_Start_IT+0x1fc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d040      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a63      	ldr	r2, [pc, #396]	; (800361c <HAL_DMA_Start_IT+0x200>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d03b      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a62      	ldr	r2, [pc, #392]	; (8003620 <HAL_DMA_Start_IT+0x204>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d036      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a60      	ldr	r2, [pc, #384]	; (8003624 <HAL_DMA_Start_IT+0x208>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d031      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a5f      	ldr	r2, [pc, #380]	; (8003628 <HAL_DMA_Start_IT+0x20c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d02c      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a5d      	ldr	r2, [pc, #372]	; (800362c <HAL_DMA_Start_IT+0x210>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d027      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a5c      	ldr	r2, [pc, #368]	; (8003630 <HAL_DMA_Start_IT+0x214>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a5a      	ldr	r2, [pc, #360]	; (8003634 <HAL_DMA_Start_IT+0x218>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01d      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a59      	ldr	r2, [pc, #356]	; (8003638 <HAL_DMA_Start_IT+0x21c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a57      	ldr	r2, [pc, #348]	; (800363c <HAL_DMA_Start_IT+0x220>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a56      	ldr	r2, [pc, #344]	; (8003640 <HAL_DMA_Start_IT+0x224>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a54      	ldr	r2, [pc, #336]	; (8003644 <HAL_DMA_Start_IT+0x228>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a53      	ldr	r2, [pc, #332]	; (8003648 <HAL_DMA_Start_IT+0x22c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a51      	ldr	r2, [pc, #324]	; (800364c <HAL_DMA_Start_IT+0x230>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d108      	bne.n	800351c <HAL_DMA_Start_IT+0x100>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0201 	bic.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e007      	b.n	800352c <HAL_DMA_Start_IT+0x110>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f001 f912 	bl	800475c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a34      	ldr	r2, [pc, #208]	; (8003610 <HAL_DMA_Start_IT+0x1f4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d04a      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a33      	ldr	r2, [pc, #204]	; (8003614 <HAL_DMA_Start_IT+0x1f8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d045      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a31      	ldr	r2, [pc, #196]	; (8003618 <HAL_DMA_Start_IT+0x1fc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d040      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a30      	ldr	r2, [pc, #192]	; (800361c <HAL_DMA_Start_IT+0x200>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d03b      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a2e      	ldr	r2, [pc, #184]	; (8003620 <HAL_DMA_Start_IT+0x204>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d036      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a2d      	ldr	r2, [pc, #180]	; (8003624 <HAL_DMA_Start_IT+0x208>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d031      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <HAL_DMA_Start_IT+0x20c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d02c      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2a      	ldr	r2, [pc, #168]	; (800362c <HAL_DMA_Start_IT+0x210>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d027      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a28      	ldr	r2, [pc, #160]	; (8003630 <HAL_DMA_Start_IT+0x214>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d022      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a27      	ldr	r2, [pc, #156]	; (8003634 <HAL_DMA_Start_IT+0x218>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d01d      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a25      	ldr	r2, [pc, #148]	; (8003638 <HAL_DMA_Start_IT+0x21c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d018      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a24      	ldr	r2, [pc, #144]	; (800363c <HAL_DMA_Start_IT+0x220>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a22      	ldr	r2, [pc, #136]	; (8003640 <HAL_DMA_Start_IT+0x224>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00e      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a21      	ldr	r2, [pc, #132]	; (8003644 <HAL_DMA_Start_IT+0x228>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d009      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <HAL_DMA_Start_IT+0x22c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1e      	ldr	r2, [pc, #120]	; (800364c <HAL_DMA_Start_IT+0x230>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <HAL_DMA_Start_IT+0x1c0>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_DMA_Start_IT+0x1c2>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d036      	beq.n	8003650 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 021e 	bic.w	r2, r3, #30
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0216 	orr.w	r2, r2, #22
 80035f4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d03e      	beq.n	800367c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0208 	orr.w	r2, r2, #8
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e035      	b.n	800367c <HAL_DMA_Start_IT+0x260>
 8003610:	40020010 	.word	0x40020010
 8003614:	40020028 	.word	0x40020028
 8003618:	40020040 	.word	0x40020040
 800361c:	40020058 	.word	0x40020058
 8003620:	40020070 	.word	0x40020070
 8003624:	40020088 	.word	0x40020088
 8003628:	400200a0 	.word	0x400200a0
 800362c:	400200b8 	.word	0x400200b8
 8003630:	40020410 	.word	0x40020410
 8003634:	40020428 	.word	0x40020428
 8003638:	40020440 	.word	0x40020440
 800363c:	40020458 	.word	0x40020458
 8003640:	40020470 	.word	0x40020470
 8003644:	40020488 	.word	0x40020488
 8003648:	400204a0 	.word	0x400204a0
 800364c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 020e 	bic.w	r2, r3, #14
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 020a 	orr.w	r2, r2, #10
 8003662:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0204 	orr.w	r2, r2, #4
 800367a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a83      	ldr	r2, [pc, #524]	; (8003890 <HAL_DMA_Start_IT+0x474>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d072      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a82      	ldr	r2, [pc, #520]	; (8003894 <HAL_DMA_Start_IT+0x478>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d06d      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a80      	ldr	r2, [pc, #512]	; (8003898 <HAL_DMA_Start_IT+0x47c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d068      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a7f      	ldr	r2, [pc, #508]	; (800389c <HAL_DMA_Start_IT+0x480>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d063      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a7d      	ldr	r2, [pc, #500]	; (80038a0 <HAL_DMA_Start_IT+0x484>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d05e      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a7c      	ldr	r2, [pc, #496]	; (80038a4 <HAL_DMA_Start_IT+0x488>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d059      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a7a      	ldr	r2, [pc, #488]	; (80038a8 <HAL_DMA_Start_IT+0x48c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d054      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a79      	ldr	r2, [pc, #484]	; (80038ac <HAL_DMA_Start_IT+0x490>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d04f      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a77      	ldr	r2, [pc, #476]	; (80038b0 <HAL_DMA_Start_IT+0x494>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d04a      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a76      	ldr	r2, [pc, #472]	; (80038b4 <HAL_DMA_Start_IT+0x498>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d045      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a74      	ldr	r2, [pc, #464]	; (80038b8 <HAL_DMA_Start_IT+0x49c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d040      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a73      	ldr	r2, [pc, #460]	; (80038bc <HAL_DMA_Start_IT+0x4a0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d03b      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a71      	ldr	r2, [pc, #452]	; (80038c0 <HAL_DMA_Start_IT+0x4a4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d036      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a70      	ldr	r2, [pc, #448]	; (80038c4 <HAL_DMA_Start_IT+0x4a8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d031      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a6e      	ldr	r2, [pc, #440]	; (80038c8 <HAL_DMA_Start_IT+0x4ac>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d02c      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a6d      	ldr	r2, [pc, #436]	; (80038cc <HAL_DMA_Start_IT+0x4b0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d027      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a6b      	ldr	r2, [pc, #428]	; (80038d0 <HAL_DMA_Start_IT+0x4b4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d022      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a6a      	ldr	r2, [pc, #424]	; (80038d4 <HAL_DMA_Start_IT+0x4b8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d01d      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a68      	ldr	r2, [pc, #416]	; (80038d8 <HAL_DMA_Start_IT+0x4bc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d018      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a67      	ldr	r2, [pc, #412]	; (80038dc <HAL_DMA_Start_IT+0x4c0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a65      	ldr	r2, [pc, #404]	; (80038e0 <HAL_DMA_Start_IT+0x4c4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00e      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a64      	ldr	r2, [pc, #400]	; (80038e4 <HAL_DMA_Start_IT+0x4c8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d009      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a62      	ldr	r2, [pc, #392]	; (80038e8 <HAL_DMA_Start_IT+0x4cc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d004      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a61      	ldr	r2, [pc, #388]	; (80038ec <HAL_DMA_Start_IT+0x4d0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_DMA_Start_IT+0x354>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <HAL_DMA_Start_IT+0x356>
 8003770:	2300      	movs	r3, #0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01a      	beq.n	80037ac <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003792:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037aa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a37      	ldr	r2, [pc, #220]	; (8003890 <HAL_DMA_Start_IT+0x474>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d04a      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a36      	ldr	r2, [pc, #216]	; (8003894 <HAL_DMA_Start_IT+0x478>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d045      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a34      	ldr	r2, [pc, #208]	; (8003898 <HAL_DMA_Start_IT+0x47c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d040      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a33      	ldr	r2, [pc, #204]	; (800389c <HAL_DMA_Start_IT+0x480>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d03b      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a31      	ldr	r2, [pc, #196]	; (80038a0 <HAL_DMA_Start_IT+0x484>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d036      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a30      	ldr	r2, [pc, #192]	; (80038a4 <HAL_DMA_Start_IT+0x488>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d031      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2e      	ldr	r2, [pc, #184]	; (80038a8 <HAL_DMA_Start_IT+0x48c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d02c      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a2d      	ldr	r2, [pc, #180]	; (80038ac <HAL_DMA_Start_IT+0x490>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d027      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a2b      	ldr	r2, [pc, #172]	; (80038b0 <HAL_DMA_Start_IT+0x494>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d022      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2a      	ldr	r2, [pc, #168]	; (80038b4 <HAL_DMA_Start_IT+0x498>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d01d      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a28      	ldr	r2, [pc, #160]	; (80038b8 <HAL_DMA_Start_IT+0x49c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d018      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a27      	ldr	r2, [pc, #156]	; (80038bc <HAL_DMA_Start_IT+0x4a0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a25      	ldr	r2, [pc, #148]	; (80038c0 <HAL_DMA_Start_IT+0x4a4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00e      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a24      	ldr	r2, [pc, #144]	; (80038c4 <HAL_DMA_Start_IT+0x4a8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <HAL_DMA_Start_IT+0x4ac>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a21      	ldr	r2, [pc, #132]	; (80038cc <HAL_DMA_Start_IT+0x4b0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d108      	bne.n	800385e <HAL_DMA_Start_IT+0x442>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e012      	b.n	8003884 <HAL_DMA_Start_IT+0x468>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e009      	b.n	8003884 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003876:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003884:	7dfb      	ldrb	r3, [r7, #23]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40020010 	.word	0x40020010
 8003894:	40020028 	.word	0x40020028
 8003898:	40020040 	.word	0x40020040
 800389c:	40020058 	.word	0x40020058
 80038a0:	40020070 	.word	0x40020070
 80038a4:	40020088 	.word	0x40020088
 80038a8:	400200a0 	.word	0x400200a0
 80038ac:	400200b8 	.word	0x400200b8
 80038b0:	40020410 	.word	0x40020410
 80038b4:	40020428 	.word	0x40020428
 80038b8:	40020440 	.word	0x40020440
 80038bc:	40020458 	.word	0x40020458
 80038c0:	40020470 	.word	0x40020470
 80038c4:	40020488 	.word	0x40020488
 80038c8:	400204a0 	.word	0x400204a0
 80038cc:	400204b8 	.word	0x400204b8
 80038d0:	58025408 	.word	0x58025408
 80038d4:	5802541c 	.word	0x5802541c
 80038d8:	58025430 	.word	0x58025430
 80038dc:	58025444 	.word	0x58025444
 80038e0:	58025458 	.word	0x58025458
 80038e4:	5802546c 	.word	0x5802546c
 80038e8:	58025480 	.word	0x58025480
 80038ec:	58025494 	.word	0x58025494

080038f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	; 0x28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038fc:	4b67      	ldr	r3, [pc, #412]	; (8003a9c <HAL_DMA_IRQHandler+0x1ac>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a67      	ldr	r2, [pc, #412]	; (8003aa0 <HAL_DMA_IRQHandler+0x1b0>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	0a9b      	lsrs	r3, r3, #10
 8003908:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a5f      	ldr	r2, [pc, #380]	; (8003aa4 <HAL_DMA_IRQHandler+0x1b4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d04a      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xd2>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a5d      	ldr	r2, [pc, #372]	; (8003aa8 <HAL_DMA_IRQHandler+0x1b8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d045      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xd2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a5c      	ldr	r2, [pc, #368]	; (8003aac <HAL_DMA_IRQHandler+0x1bc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d040      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xd2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a5a      	ldr	r2, [pc, #360]	; (8003ab0 <HAL_DMA_IRQHandler+0x1c0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d03b      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xd2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a59      	ldr	r2, [pc, #356]	; (8003ab4 <HAL_DMA_IRQHandler+0x1c4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d036      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xd2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a57      	ldr	r2, [pc, #348]	; (8003ab8 <HAL_DMA_IRQHandler+0x1c8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d031      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xd2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a56      	ldr	r2, [pc, #344]	; (8003abc <HAL_DMA_IRQHandler+0x1cc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d02c      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xd2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a54      	ldr	r2, [pc, #336]	; (8003ac0 <HAL_DMA_IRQHandler+0x1d0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d027      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xd2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a53      	ldr	r2, [pc, #332]	; (8003ac4 <HAL_DMA_IRQHandler+0x1d4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d022      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xd2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a51      	ldr	r2, [pc, #324]	; (8003ac8 <HAL_DMA_IRQHandler+0x1d8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01d      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xd2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a50      	ldr	r2, [pc, #320]	; (8003acc <HAL_DMA_IRQHandler+0x1dc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d018      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xd2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a4e      	ldr	r2, [pc, #312]	; (8003ad0 <HAL_DMA_IRQHandler+0x1e0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xd2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a4d      	ldr	r2, [pc, #308]	; (8003ad4 <HAL_DMA_IRQHandler+0x1e4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00e      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xd2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a4b      	ldr	r2, [pc, #300]	; (8003ad8 <HAL_DMA_IRQHandler+0x1e8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d009      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xd2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a4a      	ldr	r2, [pc, #296]	; (8003adc <HAL_DMA_IRQHandler+0x1ec>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d004      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xd2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a48      	ldr	r2, [pc, #288]	; (8003ae0 <HAL_DMA_IRQHandler+0x1f0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <HAL_DMA_IRQHandler+0xd6>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <HAL_DMA_IRQHandler+0xd8>
 80039c6:	2300      	movs	r3, #0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 842b 	beq.w	8004224 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	2208      	movs	r2, #8
 80039d8:	409a      	lsls	r2, r3
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 80a2 	beq.w	8003b28 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a2e      	ldr	r2, [pc, #184]	; (8003aa4 <HAL_DMA_IRQHandler+0x1b4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d04a      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x194>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2d      	ldr	r2, [pc, #180]	; (8003aa8 <HAL_DMA_IRQHandler+0x1b8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d045      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x194>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a2b      	ldr	r2, [pc, #172]	; (8003aac <HAL_DMA_IRQHandler+0x1bc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d040      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x194>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2a      	ldr	r2, [pc, #168]	; (8003ab0 <HAL_DMA_IRQHandler+0x1c0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d03b      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x194>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a28      	ldr	r2, [pc, #160]	; (8003ab4 <HAL_DMA_IRQHandler+0x1c4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d036      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x194>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a27      	ldr	r2, [pc, #156]	; (8003ab8 <HAL_DMA_IRQHandler+0x1c8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d031      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x194>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a25      	ldr	r2, [pc, #148]	; (8003abc <HAL_DMA_IRQHandler+0x1cc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d02c      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x194>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a24      	ldr	r2, [pc, #144]	; (8003ac0 <HAL_DMA_IRQHandler+0x1d0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d027      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x194>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a22      	ldr	r2, [pc, #136]	; (8003ac4 <HAL_DMA_IRQHandler+0x1d4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d022      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x194>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a21      	ldr	r2, [pc, #132]	; (8003ac8 <HAL_DMA_IRQHandler+0x1d8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d01d      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x194>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <HAL_DMA_IRQHandler+0x1dc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d018      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x194>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <HAL_DMA_IRQHandler+0x1e0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d013      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x194>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <HAL_DMA_IRQHandler+0x1e4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00e      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x194>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1b      	ldr	r2, [pc, #108]	; (8003ad8 <HAL_DMA_IRQHandler+0x1e8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d009      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x194>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a19      	ldr	r2, [pc, #100]	; (8003adc <HAL_DMA_IRQHandler+0x1ec>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d004      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x194>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <HAL_DMA_IRQHandler+0x1f0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d12f      	bne.n	8003ae4 <HAL_DMA_IRQHandler+0x1f4>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	e02e      	b.n	8003af8 <HAL_DMA_IRQHandler+0x208>
 8003a9a:	bf00      	nop
 8003a9c:	24000390 	.word	0x24000390
 8003aa0:	1b4e81b5 	.word	0x1b4e81b5
 8003aa4:	40020010 	.word	0x40020010
 8003aa8:	40020028 	.word	0x40020028
 8003aac:	40020040 	.word	0x40020040
 8003ab0:	40020058 	.word	0x40020058
 8003ab4:	40020070 	.word	0x40020070
 8003ab8:	40020088 	.word	0x40020088
 8003abc:	400200a0 	.word	0x400200a0
 8003ac0:	400200b8 	.word	0x400200b8
 8003ac4:	40020410 	.word	0x40020410
 8003ac8:	40020428 	.word	0x40020428
 8003acc:	40020440 	.word	0x40020440
 8003ad0:	40020458 	.word	0x40020458
 8003ad4:	40020470 	.word	0x40020470
 8003ad8:	40020488 	.word	0x40020488
 8003adc:	400204a0 	.word	0x400204a0
 8003ae0:	400204b8 	.word	0x400204b8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	bf14      	ite	ne
 8003af2:	2301      	movne	r3, #1
 8003af4:	2300      	moveq	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d015      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0204 	bic.w	r2, r2, #4
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2208      	movs	r2, #8
 8003b16:	409a      	lsls	r2, r3
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	f043 0201 	orr.w	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	fa22 f303 	lsr.w	r3, r2, r3
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d06e      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a69      	ldr	r2, [pc, #420]	; (8003ce8 <HAL_DMA_IRQHandler+0x3f8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d04a      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2ee>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a67      	ldr	r2, [pc, #412]	; (8003cec <HAL_DMA_IRQHandler+0x3fc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d045      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2ee>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a66      	ldr	r2, [pc, #408]	; (8003cf0 <HAL_DMA_IRQHandler+0x400>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d040      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2ee>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a64      	ldr	r2, [pc, #400]	; (8003cf4 <HAL_DMA_IRQHandler+0x404>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d03b      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2ee>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a63      	ldr	r2, [pc, #396]	; (8003cf8 <HAL_DMA_IRQHandler+0x408>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d036      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2ee>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a61      	ldr	r2, [pc, #388]	; (8003cfc <HAL_DMA_IRQHandler+0x40c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d031      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2ee>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a60      	ldr	r2, [pc, #384]	; (8003d00 <HAL_DMA_IRQHandler+0x410>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d02c      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2ee>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a5e      	ldr	r2, [pc, #376]	; (8003d04 <HAL_DMA_IRQHandler+0x414>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d027      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2ee>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a5d      	ldr	r2, [pc, #372]	; (8003d08 <HAL_DMA_IRQHandler+0x418>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d022      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2ee>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a5b      	ldr	r2, [pc, #364]	; (8003d0c <HAL_DMA_IRQHandler+0x41c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d01d      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2ee>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a5a      	ldr	r2, [pc, #360]	; (8003d10 <HAL_DMA_IRQHandler+0x420>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d018      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2ee>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a58      	ldr	r2, [pc, #352]	; (8003d14 <HAL_DMA_IRQHandler+0x424>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d013      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2ee>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a57      	ldr	r2, [pc, #348]	; (8003d18 <HAL_DMA_IRQHandler+0x428>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00e      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2ee>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a55      	ldr	r2, [pc, #340]	; (8003d1c <HAL_DMA_IRQHandler+0x42c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d009      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2ee>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a54      	ldr	r2, [pc, #336]	; (8003d20 <HAL_DMA_IRQHandler+0x430>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_DMA_IRQHandler+0x2ee>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a52      	ldr	r2, [pc, #328]	; (8003d24 <HAL_DMA_IRQHandler+0x434>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d10a      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0x304>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bf14      	ite	ne
 8003bec:	2301      	movne	r3, #1
 8003bee:	2300      	moveq	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	e003      	b.n	8003bfc <HAL_DMA_IRQHandler+0x30c>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00d      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2201      	movs	r2, #1
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	f043 0202 	orr.w	r2, r3, #2
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2204      	movs	r2, #4
 8003c26:	409a      	lsls	r2, r3
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 808f 	beq.w	8003d50 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2c      	ldr	r2, [pc, #176]	; (8003ce8 <HAL_DMA_IRQHandler+0x3f8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d04a      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x3e2>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a2a      	ldr	r2, [pc, #168]	; (8003cec <HAL_DMA_IRQHandler+0x3fc>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d045      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x3e2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a29      	ldr	r2, [pc, #164]	; (8003cf0 <HAL_DMA_IRQHandler+0x400>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d040      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x3e2>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a27      	ldr	r2, [pc, #156]	; (8003cf4 <HAL_DMA_IRQHandler+0x404>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d03b      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x3e2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a26      	ldr	r2, [pc, #152]	; (8003cf8 <HAL_DMA_IRQHandler+0x408>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d036      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x3e2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <HAL_DMA_IRQHandler+0x40c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d031      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x3e2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a23      	ldr	r2, [pc, #140]	; (8003d00 <HAL_DMA_IRQHandler+0x410>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d02c      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x3e2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a21      	ldr	r2, [pc, #132]	; (8003d04 <HAL_DMA_IRQHandler+0x414>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d027      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x3e2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a20      	ldr	r2, [pc, #128]	; (8003d08 <HAL_DMA_IRQHandler+0x418>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d022      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x3e2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1e      	ldr	r2, [pc, #120]	; (8003d0c <HAL_DMA_IRQHandler+0x41c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d01d      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x3e2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1d      	ldr	r2, [pc, #116]	; (8003d10 <HAL_DMA_IRQHandler+0x420>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d018      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x3e2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1b      	ldr	r2, [pc, #108]	; (8003d14 <HAL_DMA_IRQHandler+0x424>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x3e2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1a      	ldr	r2, [pc, #104]	; (8003d18 <HAL_DMA_IRQHandler+0x428>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x3e2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a18      	ldr	r2, [pc, #96]	; (8003d1c <HAL_DMA_IRQHandler+0x42c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d009      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x3e2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a17      	ldr	r2, [pc, #92]	; (8003d20 <HAL_DMA_IRQHandler+0x430>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x3e2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <HAL_DMA_IRQHandler+0x434>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d12a      	bne.n	8003d28 <HAL_DMA_IRQHandler+0x438>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	e023      	b.n	8003d30 <HAL_DMA_IRQHandler+0x440>
 8003ce8:	40020010 	.word	0x40020010
 8003cec:	40020028 	.word	0x40020028
 8003cf0:	40020040 	.word	0x40020040
 8003cf4:	40020058 	.word	0x40020058
 8003cf8:	40020070 	.word	0x40020070
 8003cfc:	40020088 	.word	0x40020088
 8003d00:	400200a0 	.word	0x400200a0
 8003d04:	400200b8 	.word	0x400200b8
 8003d08:	40020410 	.word	0x40020410
 8003d0c:	40020428 	.word	0x40020428
 8003d10:	40020440 	.word	0x40020440
 8003d14:	40020458 	.word	0x40020458
 8003d18:	40020470 	.word	0x40020470
 8003d1c:	40020488 	.word	0x40020488
 8003d20:	400204a0 	.word	0x400204a0
 8003d24:	400204b8 	.word	0x400204b8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	f043 0204 	orr.w	r2, r3, #4
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	2210      	movs	r2, #16
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80a6 	beq.w	8003eb2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a85      	ldr	r2, [pc, #532]	; (8003f80 <HAL_DMA_IRQHandler+0x690>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d04a      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x516>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a83      	ldr	r2, [pc, #524]	; (8003f84 <HAL_DMA_IRQHandler+0x694>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d045      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x516>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a82      	ldr	r2, [pc, #520]	; (8003f88 <HAL_DMA_IRQHandler+0x698>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d040      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x516>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a80      	ldr	r2, [pc, #512]	; (8003f8c <HAL_DMA_IRQHandler+0x69c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d03b      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x516>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7f      	ldr	r2, [pc, #508]	; (8003f90 <HAL_DMA_IRQHandler+0x6a0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d036      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x516>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7d      	ldr	r2, [pc, #500]	; (8003f94 <HAL_DMA_IRQHandler+0x6a4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d031      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x516>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7c      	ldr	r2, [pc, #496]	; (8003f98 <HAL_DMA_IRQHandler+0x6a8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d02c      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x516>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a7a      	ldr	r2, [pc, #488]	; (8003f9c <HAL_DMA_IRQHandler+0x6ac>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d027      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x516>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a79      	ldr	r2, [pc, #484]	; (8003fa0 <HAL_DMA_IRQHandler+0x6b0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d022      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x516>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a77      	ldr	r2, [pc, #476]	; (8003fa4 <HAL_DMA_IRQHandler+0x6b4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01d      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x516>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a76      	ldr	r2, [pc, #472]	; (8003fa8 <HAL_DMA_IRQHandler+0x6b8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d018      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x516>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a74      	ldr	r2, [pc, #464]	; (8003fac <HAL_DMA_IRQHandler+0x6bc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x516>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a73      	ldr	r2, [pc, #460]	; (8003fb0 <HAL_DMA_IRQHandler+0x6c0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00e      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x516>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a71      	ldr	r2, [pc, #452]	; (8003fb4 <HAL_DMA_IRQHandler+0x6c4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d009      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x516>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a70      	ldr	r2, [pc, #448]	; (8003fb8 <HAL_DMA_IRQHandler+0x6c8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x516>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a6e      	ldr	r2, [pc, #440]	; (8003fbc <HAL_DMA_IRQHandler+0x6cc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10a      	bne.n	8003e1c <HAL_DMA_IRQHandler+0x52c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bf14      	ite	ne
 8003e14:	2301      	movne	r3, #1
 8003e16:	2300      	moveq	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	e009      	b.n	8003e30 <HAL_DMA_IRQHandler+0x540>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bf14      	ite	ne
 8003e2a:	2301      	movne	r3, #1
 8003e2c:	2300      	moveq	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d03e      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	2210      	movs	r2, #16
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d018      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d108      	bne.n	8003e72 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d024      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	4798      	blx	r3
 8003e70:	e01f      	b.n	8003eb2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01b      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	4798      	blx	r3
 8003e82:	e016      	b.n	8003eb2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d107      	bne.n	8003ea2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0208 	bic.w	r2, r2, #8
 8003ea0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb6:	f003 031f 	and.w	r3, r3, #31
 8003eba:	2220      	movs	r2, #32
 8003ebc:	409a      	lsls	r2, r3
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8110 	beq.w	80040e8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a2c      	ldr	r2, [pc, #176]	; (8003f80 <HAL_DMA_IRQHandler+0x690>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d04a      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x678>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a2b      	ldr	r2, [pc, #172]	; (8003f84 <HAL_DMA_IRQHandler+0x694>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d045      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x678>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a29      	ldr	r2, [pc, #164]	; (8003f88 <HAL_DMA_IRQHandler+0x698>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d040      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x678>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a28      	ldr	r2, [pc, #160]	; (8003f8c <HAL_DMA_IRQHandler+0x69c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d03b      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x678>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a26      	ldr	r2, [pc, #152]	; (8003f90 <HAL_DMA_IRQHandler+0x6a0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d036      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x678>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a25      	ldr	r2, [pc, #148]	; (8003f94 <HAL_DMA_IRQHandler+0x6a4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d031      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x678>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a23      	ldr	r2, [pc, #140]	; (8003f98 <HAL_DMA_IRQHandler+0x6a8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d02c      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x678>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a22      	ldr	r2, [pc, #136]	; (8003f9c <HAL_DMA_IRQHandler+0x6ac>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d027      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x678>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a20      	ldr	r2, [pc, #128]	; (8003fa0 <HAL_DMA_IRQHandler+0x6b0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d022      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x678>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a1f      	ldr	r2, [pc, #124]	; (8003fa4 <HAL_DMA_IRQHandler+0x6b4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d01d      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x678>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1d      	ldr	r2, [pc, #116]	; (8003fa8 <HAL_DMA_IRQHandler+0x6b8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d018      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x678>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1c      	ldr	r2, [pc, #112]	; (8003fac <HAL_DMA_IRQHandler+0x6bc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d013      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x678>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1a      	ldr	r2, [pc, #104]	; (8003fb0 <HAL_DMA_IRQHandler+0x6c0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00e      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x678>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a19      	ldr	r2, [pc, #100]	; (8003fb4 <HAL_DMA_IRQHandler+0x6c4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d009      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x678>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a17      	ldr	r2, [pc, #92]	; (8003fb8 <HAL_DMA_IRQHandler+0x6c8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d004      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x678>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a16      	ldr	r2, [pc, #88]	; (8003fbc <HAL_DMA_IRQHandler+0x6cc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d12b      	bne.n	8003fc0 <HAL_DMA_IRQHandler+0x6d0>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bf14      	ite	ne
 8003f76:	2301      	movne	r3, #1
 8003f78:	2300      	moveq	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	e02a      	b.n	8003fd4 <HAL_DMA_IRQHandler+0x6e4>
 8003f7e:	bf00      	nop
 8003f80:	40020010 	.word	0x40020010
 8003f84:	40020028 	.word	0x40020028
 8003f88:	40020040 	.word	0x40020040
 8003f8c:	40020058 	.word	0x40020058
 8003f90:	40020070 	.word	0x40020070
 8003f94:	40020088 	.word	0x40020088
 8003f98:	400200a0 	.word	0x400200a0
 8003f9c:	400200b8 	.word	0x400200b8
 8003fa0:	40020410 	.word	0x40020410
 8003fa4:	40020428 	.word	0x40020428
 8003fa8:	40020440 	.word	0x40020440
 8003fac:	40020458 	.word	0x40020458
 8003fb0:	40020470 	.word	0x40020470
 8003fb4:	40020488 	.word	0x40020488
 8003fb8:	400204a0 	.word	0x400204a0
 8003fbc:	400204b8 	.word	0x400204b8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bf14      	ite	ne
 8003fce:	2301      	movne	r3, #1
 8003fd0:	2300      	moveq	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8087 	beq.w	80040e8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d139      	bne.n	800406a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0216 	bic.w	r2, r2, #22
 8004004:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004014:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d103      	bne.n	8004026 <HAL_DMA_IRQHandler+0x736>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004022:	2b00      	cmp	r3, #0
 8004024:	d007      	beq.n	8004036 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0208 	bic.w	r2, r2, #8
 8004034:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	223f      	movs	r2, #63	; 0x3f
 8004040:	409a      	lsls	r2, r3
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 834a 	beq.w	80046f4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	4798      	blx	r3
          }
          return;
 8004068:	e344      	b.n	80046f4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d018      	beq.n	80040aa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d108      	bne.n	8004098 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408a:	2b00      	cmp	r3, #0
 800408c:	d02c      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
 8004096:	e027      	b.n	80040e8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d023      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	4798      	blx	r3
 80040a8:	e01e      	b.n	80040e8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10f      	bne.n	80040d8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0210 	bic.w	r2, r2, #16
 80040c6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 8306 	beq.w	80046fe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 8088 	beq.w	8004210 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2204      	movs	r2, #4
 8004104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a7a      	ldr	r2, [pc, #488]	; (80042f8 <HAL_DMA_IRQHandler+0xa08>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d04a      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x8b8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a79      	ldr	r2, [pc, #484]	; (80042fc <HAL_DMA_IRQHandler+0xa0c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d045      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x8b8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a77      	ldr	r2, [pc, #476]	; (8004300 <HAL_DMA_IRQHandler+0xa10>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d040      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x8b8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a76      	ldr	r2, [pc, #472]	; (8004304 <HAL_DMA_IRQHandler+0xa14>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d03b      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x8b8>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a74      	ldr	r2, [pc, #464]	; (8004308 <HAL_DMA_IRQHandler+0xa18>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d036      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x8b8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a73      	ldr	r2, [pc, #460]	; (800430c <HAL_DMA_IRQHandler+0xa1c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d031      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x8b8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a71      	ldr	r2, [pc, #452]	; (8004310 <HAL_DMA_IRQHandler+0xa20>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d02c      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x8b8>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a70      	ldr	r2, [pc, #448]	; (8004314 <HAL_DMA_IRQHandler+0xa24>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d027      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x8b8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a6e      	ldr	r2, [pc, #440]	; (8004318 <HAL_DMA_IRQHandler+0xa28>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d022      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x8b8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a6d      	ldr	r2, [pc, #436]	; (800431c <HAL_DMA_IRQHandler+0xa2c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d01d      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x8b8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a6b      	ldr	r2, [pc, #428]	; (8004320 <HAL_DMA_IRQHandler+0xa30>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d018      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x8b8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a6a      	ldr	r2, [pc, #424]	; (8004324 <HAL_DMA_IRQHandler+0xa34>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d013      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x8b8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a68      	ldr	r2, [pc, #416]	; (8004328 <HAL_DMA_IRQHandler+0xa38>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00e      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x8b8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a67      	ldr	r2, [pc, #412]	; (800432c <HAL_DMA_IRQHandler+0xa3c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d009      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x8b8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a65      	ldr	r2, [pc, #404]	; (8004330 <HAL_DMA_IRQHandler+0xa40>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d004      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x8b8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a64      	ldr	r2, [pc, #400]	; (8004334 <HAL_DMA_IRQHandler+0xa44>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d108      	bne.n	80041ba <HAL_DMA_IRQHandler+0x8ca>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	e007      	b.n	80041ca <HAL_DMA_IRQHandler+0x8da>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3301      	adds	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d307      	bcc.n	80041e6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f2      	bne.n	80041ca <HAL_DMA_IRQHandler+0x8da>
 80041e4:	e000      	b.n	80041e8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80041e6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2203      	movs	r2, #3
 80041fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80041fe:	e003      	b.n	8004208 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8272 	beq.w	80046fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4798      	blx	r3
 8004222:	e26c      	b.n	80046fe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a43      	ldr	r2, [pc, #268]	; (8004338 <HAL_DMA_IRQHandler+0xa48>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d022      	beq.n	8004274 <HAL_DMA_IRQHandler+0x984>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a42      	ldr	r2, [pc, #264]	; (800433c <HAL_DMA_IRQHandler+0xa4c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d01d      	beq.n	8004274 <HAL_DMA_IRQHandler+0x984>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a40      	ldr	r2, [pc, #256]	; (8004340 <HAL_DMA_IRQHandler+0xa50>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d018      	beq.n	8004274 <HAL_DMA_IRQHandler+0x984>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a3f      	ldr	r2, [pc, #252]	; (8004344 <HAL_DMA_IRQHandler+0xa54>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d013      	beq.n	8004274 <HAL_DMA_IRQHandler+0x984>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a3d      	ldr	r2, [pc, #244]	; (8004348 <HAL_DMA_IRQHandler+0xa58>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00e      	beq.n	8004274 <HAL_DMA_IRQHandler+0x984>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a3c      	ldr	r2, [pc, #240]	; (800434c <HAL_DMA_IRQHandler+0xa5c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d009      	beq.n	8004274 <HAL_DMA_IRQHandler+0x984>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a3a      	ldr	r2, [pc, #232]	; (8004350 <HAL_DMA_IRQHandler+0xa60>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d004      	beq.n	8004274 <HAL_DMA_IRQHandler+0x984>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a39      	ldr	r2, [pc, #228]	; (8004354 <HAL_DMA_IRQHandler+0xa64>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d101      	bne.n	8004278 <HAL_DMA_IRQHandler+0x988>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <HAL_DMA_IRQHandler+0x98a>
 8004278:	2300      	movs	r3, #0
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 823f 	beq.w	80046fe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	2204      	movs	r2, #4
 8004292:	409a      	lsls	r2, r3
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	4013      	ands	r3, r2
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 80cd 	beq.w	8004438 <HAL_DMA_IRQHandler+0xb48>
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 80c7 	beq.w	8004438 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	2204      	movs	r2, #4
 80042b4:	409a      	lsls	r2, r3
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d049      	beq.n	8004358 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8210 	beq.w	80046f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042e0:	e20a      	b.n	80046f8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 8206 	beq.w	80046f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042f4:	e200      	b.n	80046f8 <HAL_DMA_IRQHandler+0xe08>
 80042f6:	bf00      	nop
 80042f8:	40020010 	.word	0x40020010
 80042fc:	40020028 	.word	0x40020028
 8004300:	40020040 	.word	0x40020040
 8004304:	40020058 	.word	0x40020058
 8004308:	40020070 	.word	0x40020070
 800430c:	40020088 	.word	0x40020088
 8004310:	400200a0 	.word	0x400200a0
 8004314:	400200b8 	.word	0x400200b8
 8004318:	40020410 	.word	0x40020410
 800431c:	40020428 	.word	0x40020428
 8004320:	40020440 	.word	0x40020440
 8004324:	40020458 	.word	0x40020458
 8004328:	40020470 	.word	0x40020470
 800432c:	40020488 	.word	0x40020488
 8004330:	400204a0 	.word	0x400204a0
 8004334:	400204b8 	.word	0x400204b8
 8004338:	58025408 	.word	0x58025408
 800433c:	5802541c 	.word	0x5802541c
 8004340:	58025430 	.word	0x58025430
 8004344:	58025444 	.word	0x58025444
 8004348:	58025458 	.word	0x58025458
 800434c:	5802546c 	.word	0x5802546c
 8004350:	58025480 	.word	0x58025480
 8004354:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d160      	bne.n	8004424 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a7f      	ldr	r2, [pc, #508]	; (8004564 <HAL_DMA_IRQHandler+0xc74>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d04a      	beq.n	8004402 <HAL_DMA_IRQHandler+0xb12>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a7d      	ldr	r2, [pc, #500]	; (8004568 <HAL_DMA_IRQHandler+0xc78>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d045      	beq.n	8004402 <HAL_DMA_IRQHandler+0xb12>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a7c      	ldr	r2, [pc, #496]	; (800456c <HAL_DMA_IRQHandler+0xc7c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d040      	beq.n	8004402 <HAL_DMA_IRQHandler+0xb12>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a7a      	ldr	r2, [pc, #488]	; (8004570 <HAL_DMA_IRQHandler+0xc80>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d03b      	beq.n	8004402 <HAL_DMA_IRQHandler+0xb12>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a79      	ldr	r2, [pc, #484]	; (8004574 <HAL_DMA_IRQHandler+0xc84>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d036      	beq.n	8004402 <HAL_DMA_IRQHandler+0xb12>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a77      	ldr	r2, [pc, #476]	; (8004578 <HAL_DMA_IRQHandler+0xc88>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d031      	beq.n	8004402 <HAL_DMA_IRQHandler+0xb12>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a76      	ldr	r2, [pc, #472]	; (800457c <HAL_DMA_IRQHandler+0xc8c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d02c      	beq.n	8004402 <HAL_DMA_IRQHandler+0xb12>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a74      	ldr	r2, [pc, #464]	; (8004580 <HAL_DMA_IRQHandler+0xc90>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d027      	beq.n	8004402 <HAL_DMA_IRQHandler+0xb12>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a73      	ldr	r2, [pc, #460]	; (8004584 <HAL_DMA_IRQHandler+0xc94>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d022      	beq.n	8004402 <HAL_DMA_IRQHandler+0xb12>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a71      	ldr	r2, [pc, #452]	; (8004588 <HAL_DMA_IRQHandler+0xc98>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01d      	beq.n	8004402 <HAL_DMA_IRQHandler+0xb12>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a70      	ldr	r2, [pc, #448]	; (800458c <HAL_DMA_IRQHandler+0xc9c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d018      	beq.n	8004402 <HAL_DMA_IRQHandler+0xb12>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a6e      	ldr	r2, [pc, #440]	; (8004590 <HAL_DMA_IRQHandler+0xca0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <HAL_DMA_IRQHandler+0xb12>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a6d      	ldr	r2, [pc, #436]	; (8004594 <HAL_DMA_IRQHandler+0xca4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00e      	beq.n	8004402 <HAL_DMA_IRQHandler+0xb12>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a6b      	ldr	r2, [pc, #428]	; (8004598 <HAL_DMA_IRQHandler+0xca8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d009      	beq.n	8004402 <HAL_DMA_IRQHandler+0xb12>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a6a      	ldr	r2, [pc, #424]	; (800459c <HAL_DMA_IRQHandler+0xcac>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d004      	beq.n	8004402 <HAL_DMA_IRQHandler+0xb12>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a68      	ldr	r2, [pc, #416]	; (80045a0 <HAL_DMA_IRQHandler+0xcb0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d108      	bne.n	8004414 <HAL_DMA_IRQHandler+0xb24>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0208 	bic.w	r2, r2, #8
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e007      	b.n	8004424 <HAL_DMA_IRQHandler+0xb34>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0204 	bic.w	r2, r2, #4
 8004422:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 8165 	beq.w	80046f8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004436:	e15f      	b.n	80046f8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443c:	f003 031f 	and.w	r3, r3, #31
 8004440:	2202      	movs	r2, #2
 8004442:	409a      	lsls	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80c5 	beq.w	80045d8 <HAL_DMA_IRQHandler+0xce8>
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80bf 	beq.w	80045d8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	2202      	movs	r2, #2
 8004464:	409a      	lsls	r2, r3
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d018      	beq.n	80044a6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 813a 	beq.w	80046fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004490:	e134      	b.n	80046fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 8130 	beq.w	80046fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044a4:	e12a      	b.n	80046fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f040 8089 	bne.w	80045c4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2b      	ldr	r2, [pc, #172]	; (8004564 <HAL_DMA_IRQHandler+0xc74>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d04a      	beq.n	8004552 <HAL_DMA_IRQHandler+0xc62>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a29      	ldr	r2, [pc, #164]	; (8004568 <HAL_DMA_IRQHandler+0xc78>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d045      	beq.n	8004552 <HAL_DMA_IRQHandler+0xc62>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a28      	ldr	r2, [pc, #160]	; (800456c <HAL_DMA_IRQHandler+0xc7c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d040      	beq.n	8004552 <HAL_DMA_IRQHandler+0xc62>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a26      	ldr	r2, [pc, #152]	; (8004570 <HAL_DMA_IRQHandler+0xc80>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d03b      	beq.n	8004552 <HAL_DMA_IRQHandler+0xc62>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a25      	ldr	r2, [pc, #148]	; (8004574 <HAL_DMA_IRQHandler+0xc84>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d036      	beq.n	8004552 <HAL_DMA_IRQHandler+0xc62>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a23      	ldr	r2, [pc, #140]	; (8004578 <HAL_DMA_IRQHandler+0xc88>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d031      	beq.n	8004552 <HAL_DMA_IRQHandler+0xc62>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a22      	ldr	r2, [pc, #136]	; (800457c <HAL_DMA_IRQHandler+0xc8c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d02c      	beq.n	8004552 <HAL_DMA_IRQHandler+0xc62>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a20      	ldr	r2, [pc, #128]	; (8004580 <HAL_DMA_IRQHandler+0xc90>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d027      	beq.n	8004552 <HAL_DMA_IRQHandler+0xc62>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1f      	ldr	r2, [pc, #124]	; (8004584 <HAL_DMA_IRQHandler+0xc94>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d022      	beq.n	8004552 <HAL_DMA_IRQHandler+0xc62>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1d      	ldr	r2, [pc, #116]	; (8004588 <HAL_DMA_IRQHandler+0xc98>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d01d      	beq.n	8004552 <HAL_DMA_IRQHandler+0xc62>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1c      	ldr	r2, [pc, #112]	; (800458c <HAL_DMA_IRQHandler+0xc9c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d018      	beq.n	8004552 <HAL_DMA_IRQHandler+0xc62>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1a      	ldr	r2, [pc, #104]	; (8004590 <HAL_DMA_IRQHandler+0xca0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <HAL_DMA_IRQHandler+0xc62>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a19      	ldr	r2, [pc, #100]	; (8004594 <HAL_DMA_IRQHandler+0xca4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00e      	beq.n	8004552 <HAL_DMA_IRQHandler+0xc62>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a17      	ldr	r2, [pc, #92]	; (8004598 <HAL_DMA_IRQHandler+0xca8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d009      	beq.n	8004552 <HAL_DMA_IRQHandler+0xc62>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a16      	ldr	r2, [pc, #88]	; (800459c <HAL_DMA_IRQHandler+0xcac>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d004      	beq.n	8004552 <HAL_DMA_IRQHandler+0xc62>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a14      	ldr	r2, [pc, #80]	; (80045a0 <HAL_DMA_IRQHandler+0xcb0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d128      	bne.n	80045a4 <HAL_DMA_IRQHandler+0xcb4>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0214 	bic.w	r2, r2, #20
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	e027      	b.n	80045b4 <HAL_DMA_IRQHandler+0xcc4>
 8004564:	40020010 	.word	0x40020010
 8004568:	40020028 	.word	0x40020028
 800456c:	40020040 	.word	0x40020040
 8004570:	40020058 	.word	0x40020058
 8004574:	40020070 	.word	0x40020070
 8004578:	40020088 	.word	0x40020088
 800457c:	400200a0 	.word	0x400200a0
 8004580:	400200b8 	.word	0x400200b8
 8004584:	40020410 	.word	0x40020410
 8004588:	40020428 	.word	0x40020428
 800458c:	40020440 	.word	0x40020440
 8004590:	40020458 	.word	0x40020458
 8004594:	40020470 	.word	0x40020470
 8004598:	40020488 	.word	0x40020488
 800459c:	400204a0 	.word	0x400204a0
 80045a0:	400204b8 	.word	0x400204b8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 020a 	bic.w	r2, r2, #10
 80045b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8097 	beq.w	80046fc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045d6:	e091      	b.n	80046fc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	2208      	movs	r2, #8
 80045e2:	409a      	lsls	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	4013      	ands	r3, r2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8088 	beq.w	80046fe <HAL_DMA_IRQHandler+0xe0e>
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8082 	beq.w	80046fe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a41      	ldr	r2, [pc, #260]	; (8004704 <HAL_DMA_IRQHandler+0xe14>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d04a      	beq.n	800469a <HAL_DMA_IRQHandler+0xdaa>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a3f      	ldr	r2, [pc, #252]	; (8004708 <HAL_DMA_IRQHandler+0xe18>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d045      	beq.n	800469a <HAL_DMA_IRQHandler+0xdaa>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a3e      	ldr	r2, [pc, #248]	; (800470c <HAL_DMA_IRQHandler+0xe1c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d040      	beq.n	800469a <HAL_DMA_IRQHandler+0xdaa>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a3c      	ldr	r2, [pc, #240]	; (8004710 <HAL_DMA_IRQHandler+0xe20>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d03b      	beq.n	800469a <HAL_DMA_IRQHandler+0xdaa>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a3b      	ldr	r2, [pc, #236]	; (8004714 <HAL_DMA_IRQHandler+0xe24>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d036      	beq.n	800469a <HAL_DMA_IRQHandler+0xdaa>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a39      	ldr	r2, [pc, #228]	; (8004718 <HAL_DMA_IRQHandler+0xe28>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d031      	beq.n	800469a <HAL_DMA_IRQHandler+0xdaa>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a38      	ldr	r2, [pc, #224]	; (800471c <HAL_DMA_IRQHandler+0xe2c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d02c      	beq.n	800469a <HAL_DMA_IRQHandler+0xdaa>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a36      	ldr	r2, [pc, #216]	; (8004720 <HAL_DMA_IRQHandler+0xe30>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d027      	beq.n	800469a <HAL_DMA_IRQHandler+0xdaa>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a35      	ldr	r2, [pc, #212]	; (8004724 <HAL_DMA_IRQHandler+0xe34>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d022      	beq.n	800469a <HAL_DMA_IRQHandler+0xdaa>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a33      	ldr	r2, [pc, #204]	; (8004728 <HAL_DMA_IRQHandler+0xe38>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d01d      	beq.n	800469a <HAL_DMA_IRQHandler+0xdaa>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a32      	ldr	r2, [pc, #200]	; (800472c <HAL_DMA_IRQHandler+0xe3c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d018      	beq.n	800469a <HAL_DMA_IRQHandler+0xdaa>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a30      	ldr	r2, [pc, #192]	; (8004730 <HAL_DMA_IRQHandler+0xe40>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <HAL_DMA_IRQHandler+0xdaa>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a2f      	ldr	r2, [pc, #188]	; (8004734 <HAL_DMA_IRQHandler+0xe44>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00e      	beq.n	800469a <HAL_DMA_IRQHandler+0xdaa>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a2d      	ldr	r2, [pc, #180]	; (8004738 <HAL_DMA_IRQHandler+0xe48>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d009      	beq.n	800469a <HAL_DMA_IRQHandler+0xdaa>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a2c      	ldr	r2, [pc, #176]	; (800473c <HAL_DMA_IRQHandler+0xe4c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d004      	beq.n	800469a <HAL_DMA_IRQHandler+0xdaa>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a2a      	ldr	r2, [pc, #168]	; (8004740 <HAL_DMA_IRQHandler+0xe50>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d108      	bne.n	80046ac <HAL_DMA_IRQHandler+0xdbc>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 021c 	bic.w	r2, r2, #28
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e007      	b.n	80046bc <HAL_DMA_IRQHandler+0xdcc>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 020e 	bic.w	r2, r2, #14
 80046ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	2201      	movs	r2, #1
 80046c6:	409a      	lsls	r2, r3
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d009      	beq.n	80046fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	4798      	blx	r3
 80046f2:	e004      	b.n	80046fe <HAL_DMA_IRQHandler+0xe0e>
          return;
 80046f4:	bf00      	nop
 80046f6:	e002      	b.n	80046fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046f8:	bf00      	nop
 80046fa:	e000      	b.n	80046fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046fc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046fe:	3728      	adds	r7, #40	; 0x28
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40020010 	.word	0x40020010
 8004708:	40020028 	.word	0x40020028
 800470c:	40020040 	.word	0x40020040
 8004710:	40020058 	.word	0x40020058
 8004714:	40020070 	.word	0x40020070
 8004718:	40020088 	.word	0x40020088
 800471c:	400200a0 	.word	0x400200a0
 8004720:	400200b8 	.word	0x400200b8
 8004724:	40020410 	.word	0x40020410
 8004728:	40020428 	.word	0x40020428
 800472c:	40020440 	.word	0x40020440
 8004730:	40020458 	.word	0x40020458
 8004734:	40020470 	.word	0x40020470
 8004738:	40020488 	.word	0x40020488
 800473c:	400204a0 	.word	0x400204a0
 8004740:	400204b8 	.word	0x400204b8

08004744 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004774:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a7f      	ldr	r2, [pc, #508]	; (8004978 <DMA_SetConfig+0x21c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d072      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a7d      	ldr	r2, [pc, #500]	; (800497c <DMA_SetConfig+0x220>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d06d      	beq.n	8004866 <DMA_SetConfig+0x10a>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a7c      	ldr	r2, [pc, #496]	; (8004980 <DMA_SetConfig+0x224>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d068      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a7a      	ldr	r2, [pc, #488]	; (8004984 <DMA_SetConfig+0x228>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d063      	beq.n	8004866 <DMA_SetConfig+0x10a>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a79      	ldr	r2, [pc, #484]	; (8004988 <DMA_SetConfig+0x22c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d05e      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a77      	ldr	r2, [pc, #476]	; (800498c <DMA_SetConfig+0x230>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d059      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a76      	ldr	r2, [pc, #472]	; (8004990 <DMA_SetConfig+0x234>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d054      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a74      	ldr	r2, [pc, #464]	; (8004994 <DMA_SetConfig+0x238>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d04f      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a73      	ldr	r2, [pc, #460]	; (8004998 <DMA_SetConfig+0x23c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d04a      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a71      	ldr	r2, [pc, #452]	; (800499c <DMA_SetConfig+0x240>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d045      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a70      	ldr	r2, [pc, #448]	; (80049a0 <DMA_SetConfig+0x244>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d040      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a6e      	ldr	r2, [pc, #440]	; (80049a4 <DMA_SetConfig+0x248>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d03b      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a6d      	ldr	r2, [pc, #436]	; (80049a8 <DMA_SetConfig+0x24c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d036      	beq.n	8004866 <DMA_SetConfig+0x10a>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a6b      	ldr	r2, [pc, #428]	; (80049ac <DMA_SetConfig+0x250>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d031      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a6a      	ldr	r2, [pc, #424]	; (80049b0 <DMA_SetConfig+0x254>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d02c      	beq.n	8004866 <DMA_SetConfig+0x10a>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a68      	ldr	r2, [pc, #416]	; (80049b4 <DMA_SetConfig+0x258>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d027      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a67      	ldr	r2, [pc, #412]	; (80049b8 <DMA_SetConfig+0x25c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d022      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a65      	ldr	r2, [pc, #404]	; (80049bc <DMA_SetConfig+0x260>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01d      	beq.n	8004866 <DMA_SetConfig+0x10a>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a64      	ldr	r2, [pc, #400]	; (80049c0 <DMA_SetConfig+0x264>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d018      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a62      	ldr	r2, [pc, #392]	; (80049c4 <DMA_SetConfig+0x268>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <DMA_SetConfig+0x10a>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a61      	ldr	r2, [pc, #388]	; (80049c8 <DMA_SetConfig+0x26c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a5f      	ldr	r2, [pc, #380]	; (80049cc <DMA_SetConfig+0x270>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <DMA_SetConfig+0x10a>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a5e      	ldr	r2, [pc, #376]	; (80049d0 <DMA_SetConfig+0x274>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <DMA_SetConfig+0x10a>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a5c      	ldr	r2, [pc, #368]	; (80049d4 <DMA_SetConfig+0x278>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d101      	bne.n	800486a <DMA_SetConfig+0x10e>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <DMA_SetConfig+0x110>
 800486a:	2300      	movs	r3, #0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00d      	beq.n	800488c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004878:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d004      	beq.n	800488c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800488a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a39      	ldr	r2, [pc, #228]	; (8004978 <DMA_SetConfig+0x21c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d04a      	beq.n	800492c <DMA_SetConfig+0x1d0>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a38      	ldr	r2, [pc, #224]	; (800497c <DMA_SetConfig+0x220>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d045      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a36      	ldr	r2, [pc, #216]	; (8004980 <DMA_SetConfig+0x224>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d040      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a35      	ldr	r2, [pc, #212]	; (8004984 <DMA_SetConfig+0x228>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d03b      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a33      	ldr	r2, [pc, #204]	; (8004988 <DMA_SetConfig+0x22c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d036      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a32      	ldr	r2, [pc, #200]	; (800498c <DMA_SetConfig+0x230>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d031      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a30      	ldr	r2, [pc, #192]	; (8004990 <DMA_SetConfig+0x234>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d02c      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2f      	ldr	r2, [pc, #188]	; (8004994 <DMA_SetConfig+0x238>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d027      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2d      	ldr	r2, [pc, #180]	; (8004998 <DMA_SetConfig+0x23c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d022      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2c      	ldr	r2, [pc, #176]	; (800499c <DMA_SetConfig+0x240>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d01d      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <DMA_SetConfig+0x244>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d018      	beq.n	800492c <DMA_SetConfig+0x1d0>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a29      	ldr	r2, [pc, #164]	; (80049a4 <DMA_SetConfig+0x248>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <DMA_SetConfig+0x1d0>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <DMA_SetConfig+0x24c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00e      	beq.n	800492c <DMA_SetConfig+0x1d0>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a26      	ldr	r2, [pc, #152]	; (80049ac <DMA_SetConfig+0x250>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d009      	beq.n	800492c <DMA_SetConfig+0x1d0>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a24      	ldr	r2, [pc, #144]	; (80049b0 <DMA_SetConfig+0x254>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <DMA_SetConfig+0x1d0>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a23      	ldr	r2, [pc, #140]	; (80049b4 <DMA_SetConfig+0x258>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d101      	bne.n	8004930 <DMA_SetConfig+0x1d4>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <DMA_SetConfig+0x1d6>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d059      	beq.n	80049ea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	223f      	movs	r2, #63	; 0x3f
 8004940:	409a      	lsls	r2, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004954:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	d138      	bne.n	80049d8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004976:	e086      	b.n	8004a86 <DMA_SetConfig+0x32a>
 8004978:	40020010 	.word	0x40020010
 800497c:	40020028 	.word	0x40020028
 8004980:	40020040 	.word	0x40020040
 8004984:	40020058 	.word	0x40020058
 8004988:	40020070 	.word	0x40020070
 800498c:	40020088 	.word	0x40020088
 8004990:	400200a0 	.word	0x400200a0
 8004994:	400200b8 	.word	0x400200b8
 8004998:	40020410 	.word	0x40020410
 800499c:	40020428 	.word	0x40020428
 80049a0:	40020440 	.word	0x40020440
 80049a4:	40020458 	.word	0x40020458
 80049a8:	40020470 	.word	0x40020470
 80049ac:	40020488 	.word	0x40020488
 80049b0:	400204a0 	.word	0x400204a0
 80049b4:	400204b8 	.word	0x400204b8
 80049b8:	58025408 	.word	0x58025408
 80049bc:	5802541c 	.word	0x5802541c
 80049c0:	58025430 	.word	0x58025430
 80049c4:	58025444 	.word	0x58025444
 80049c8:	58025458 	.word	0x58025458
 80049cc:	5802546c 	.word	0x5802546c
 80049d0:	58025480 	.word	0x58025480
 80049d4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	60da      	str	r2, [r3, #12]
}
 80049e8:	e04d      	b.n	8004a86 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a29      	ldr	r2, [pc, #164]	; (8004a94 <DMA_SetConfig+0x338>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d022      	beq.n	8004a3a <DMA_SetConfig+0x2de>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <DMA_SetConfig+0x33c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d01d      	beq.n	8004a3a <DMA_SetConfig+0x2de>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a26      	ldr	r2, [pc, #152]	; (8004a9c <DMA_SetConfig+0x340>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d018      	beq.n	8004a3a <DMA_SetConfig+0x2de>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a24      	ldr	r2, [pc, #144]	; (8004aa0 <DMA_SetConfig+0x344>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <DMA_SetConfig+0x2de>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a23      	ldr	r2, [pc, #140]	; (8004aa4 <DMA_SetConfig+0x348>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00e      	beq.n	8004a3a <DMA_SetConfig+0x2de>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a21      	ldr	r2, [pc, #132]	; (8004aa8 <DMA_SetConfig+0x34c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d009      	beq.n	8004a3a <DMA_SetConfig+0x2de>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a20      	ldr	r2, [pc, #128]	; (8004aac <DMA_SetConfig+0x350>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d004      	beq.n	8004a3a <DMA_SetConfig+0x2de>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1e      	ldr	r2, [pc, #120]	; (8004ab0 <DMA_SetConfig+0x354>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d101      	bne.n	8004a3e <DMA_SetConfig+0x2e2>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <DMA_SetConfig+0x2e4>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d020      	beq.n	8004a86 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d108      	bne.n	8004a76 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	60da      	str	r2, [r3, #12]
}
 8004a74:	e007      	b.n	8004a86 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	60da      	str	r2, [r3, #12]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	58025408 	.word	0x58025408
 8004a98:	5802541c 	.word	0x5802541c
 8004a9c:	58025430 	.word	0x58025430
 8004aa0:	58025444 	.word	0x58025444
 8004aa4:	58025458 	.word	0x58025458
 8004aa8:	5802546c 	.word	0x5802546c
 8004aac:	58025480 	.word	0x58025480
 8004ab0:	58025494 	.word	0x58025494

08004ab4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a42      	ldr	r2, [pc, #264]	; (8004bcc <DMA_CalcBaseAndBitshift+0x118>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d04a      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a41      	ldr	r2, [pc, #260]	; (8004bd0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d045      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a3f      	ldr	r2, [pc, #252]	; (8004bd4 <DMA_CalcBaseAndBitshift+0x120>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d040      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a3e      	ldr	r2, [pc, #248]	; (8004bd8 <DMA_CalcBaseAndBitshift+0x124>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d03b      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a3c      	ldr	r2, [pc, #240]	; (8004bdc <DMA_CalcBaseAndBitshift+0x128>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d036      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a3b      	ldr	r2, [pc, #236]	; (8004be0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d031      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a39      	ldr	r2, [pc, #228]	; (8004be4 <DMA_CalcBaseAndBitshift+0x130>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d02c      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a38      	ldr	r2, [pc, #224]	; (8004be8 <DMA_CalcBaseAndBitshift+0x134>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d027      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a36      	ldr	r2, [pc, #216]	; (8004bec <DMA_CalcBaseAndBitshift+0x138>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d022      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a35      	ldr	r2, [pc, #212]	; (8004bf0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d01d      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a33      	ldr	r2, [pc, #204]	; (8004bf4 <DMA_CalcBaseAndBitshift+0x140>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d018      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a32      	ldr	r2, [pc, #200]	; (8004bf8 <DMA_CalcBaseAndBitshift+0x144>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d013      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a30      	ldr	r2, [pc, #192]	; (8004bfc <DMA_CalcBaseAndBitshift+0x148>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00e      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a2f      	ldr	r2, [pc, #188]	; (8004c00 <DMA_CalcBaseAndBitshift+0x14c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d009      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a2d      	ldr	r2, [pc, #180]	; (8004c04 <DMA_CalcBaseAndBitshift+0x150>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <DMA_CalcBaseAndBitshift+0xa8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a2c      	ldr	r2, [pc, #176]	; (8004c08 <DMA_CalcBaseAndBitshift+0x154>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d101      	bne.n	8004b60 <DMA_CalcBaseAndBitshift+0xac>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <DMA_CalcBaseAndBitshift+0xae>
 8004b60:	2300      	movs	r3, #0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d024      	beq.n	8004bb0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	3b10      	subs	r3, #16
 8004b6e:	4a27      	ldr	r2, [pc, #156]	; (8004c0c <DMA_CalcBaseAndBitshift+0x158>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	091b      	lsrs	r3, r3, #4
 8004b76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	4a24      	ldr	r2, [pc, #144]	; (8004c10 <DMA_CalcBaseAndBitshift+0x15c>)
 8004b80:	5cd3      	ldrb	r3, [r2, r3]
 8004b82:	461a      	mov	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d908      	bls.n	8004ba0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	4b1f      	ldr	r3, [pc, #124]	; (8004c14 <DMA_CalcBaseAndBitshift+0x160>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	1d1a      	adds	r2, r3, #4
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	659a      	str	r2, [r3, #88]	; 0x58
 8004b9e:	e00d      	b.n	8004bbc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <DMA_CalcBaseAndBitshift+0x160>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6593      	str	r3, [r2, #88]	; 0x58
 8004bae:	e005      	b.n	8004bbc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40020010 	.word	0x40020010
 8004bd0:	40020028 	.word	0x40020028
 8004bd4:	40020040 	.word	0x40020040
 8004bd8:	40020058 	.word	0x40020058
 8004bdc:	40020070 	.word	0x40020070
 8004be0:	40020088 	.word	0x40020088
 8004be4:	400200a0 	.word	0x400200a0
 8004be8:	400200b8 	.word	0x400200b8
 8004bec:	40020410 	.word	0x40020410
 8004bf0:	40020428 	.word	0x40020428
 8004bf4:	40020440 	.word	0x40020440
 8004bf8:	40020458 	.word	0x40020458
 8004bfc:	40020470 	.word	0x40020470
 8004c00:	40020488 	.word	0x40020488
 8004c04:	400204a0 	.word	0x400204a0
 8004c08:	400204b8 	.word	0x400204b8
 8004c0c:	aaaaaaab 	.word	0xaaaaaaab
 8004c10:	08012c20 	.word	0x08012c20
 8004c14:	fffffc00 	.word	0xfffffc00

08004c18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d120      	bne.n	8004c6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d858      	bhi.n	8004ce6 <DMA_CheckFifoParam+0xce>
 8004c34:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <DMA_CheckFifoParam+0x24>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c4d 	.word	0x08004c4d
 8004c40:	08004c5f 	.word	0x08004c5f
 8004c44:	08004c4d 	.word	0x08004c4d
 8004c48:	08004ce7 	.word	0x08004ce7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d048      	beq.n	8004cea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c5c:	e045      	b.n	8004cea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c66:	d142      	bne.n	8004cee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c6c:	e03f      	b.n	8004cee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c76:	d123      	bne.n	8004cc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d838      	bhi.n	8004cf2 <DMA_CheckFifoParam+0xda>
 8004c80:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <DMA_CheckFifoParam+0x70>)
 8004c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c86:	bf00      	nop
 8004c88:	08004c99 	.word	0x08004c99
 8004c8c:	08004c9f 	.word	0x08004c9f
 8004c90:	08004c99 	.word	0x08004c99
 8004c94:	08004cb1 	.word	0x08004cb1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
        break;
 8004c9c:	e030      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d025      	beq.n	8004cf6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cae:	e022      	b.n	8004cf6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cb8:	d11f      	bne.n	8004cfa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cbe:	e01c      	b.n	8004cfa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d902      	bls.n	8004cce <DMA_CheckFifoParam+0xb6>
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d003      	beq.n	8004cd4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ccc:	e018      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
        break;
 8004cd2:	e015      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00e      	beq.n	8004cfe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8004ce4:	e00b      	b.n	8004cfe <DMA_CheckFifoParam+0xe6>
        break;
 8004ce6:	bf00      	nop
 8004ce8:	e00a      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        break;
 8004cea:	bf00      	nop
 8004cec:	e008      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        break;
 8004cee:	bf00      	nop
 8004cf0:	e006      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        break;
 8004cf2:	bf00      	nop
 8004cf4:	e004      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        break;
 8004cf6:	bf00      	nop
 8004cf8:	e002      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
        break;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
    break;
 8004cfe:	bf00      	nop
    }
  }

  return status;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop

08004d10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a38      	ldr	r2, [pc, #224]	; (8004e04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d022      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a36      	ldr	r2, [pc, #216]	; (8004e08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d01d      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a35      	ldr	r2, [pc, #212]	; (8004e0c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d018      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a33      	ldr	r2, [pc, #204]	; (8004e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a32      	ldr	r2, [pc, #200]	; (8004e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00e      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a30      	ldr	r2, [pc, #192]	; (8004e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d009      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2f      	ldr	r2, [pc, #188]	; (8004e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d004      	beq.n	8004d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a2d      	ldr	r2, [pc, #180]	; (8004e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d101      	bne.n	8004d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d72:	2300      	movs	r3, #0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01a      	beq.n	8004dae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	3b08      	subs	r3, #8
 8004d80:	4a28      	ldr	r2, [pc, #160]	; (8004e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	091b      	lsrs	r3, r3, #4
 8004d88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4b26      	ldr	r3, [pc, #152]	; (8004e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d8e:	4413      	add	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	461a      	mov	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a24      	ldr	r2, [pc, #144]	; (8004e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f003 031f 	and.w	r3, r3, #31
 8004da4:	2201      	movs	r2, #1
 8004da6:	409a      	lsls	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004dac:	e024      	b.n	8004df8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	3b10      	subs	r3, #16
 8004db6:	4a1e      	ldr	r2, [pc, #120]	; (8004e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004db8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d806      	bhi.n	8004dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4a1b      	ldr	r2, [pc, #108]	; (8004e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d902      	bls.n	8004dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	461a      	mov	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a16      	ldr	r2, [pc, #88]	; (8004e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004de8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	2201      	movs	r2, #1
 8004df2:	409a      	lsls	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	58025408 	.word	0x58025408
 8004e08:	5802541c 	.word	0x5802541c
 8004e0c:	58025430 	.word	0x58025430
 8004e10:	58025444 	.word	0x58025444
 8004e14:	58025458 	.word	0x58025458
 8004e18:	5802546c 	.word	0x5802546c
 8004e1c:	58025480 	.word	0x58025480
 8004e20:	58025494 	.word	0x58025494
 8004e24:	cccccccd 	.word	0xcccccccd
 8004e28:	16009600 	.word	0x16009600
 8004e2c:	58025880 	.word	0x58025880
 8004e30:	aaaaaaab 	.word	0xaaaaaaab
 8004e34:	400204b8 	.word	0x400204b8
 8004e38:	4002040f 	.word	0x4002040f
 8004e3c:	10008200 	.word	0x10008200
 8004e40:	40020880 	.word	0x40020880

08004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d04a      	beq.n	8004ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d847      	bhi.n	8004ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a25      	ldr	r2, [pc, #148]	; (8004efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d022      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a24      	ldr	r2, [pc, #144]	; (8004f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d01d      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a22      	ldr	r2, [pc, #136]	; (8004f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d018      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d013      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00e      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1e      	ldr	r2, [pc, #120]	; (8004f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d009      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d004      	beq.n	8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1b      	ldr	r2, [pc, #108]	; (8004f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d101      	bne.n	8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a15      	ldr	r2, [pc, #84]	; (8004f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ecc:	671a      	str	r2, [r3, #112]	; 0x70
 8004ece:	e009      	b.n	8004ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	461a      	mov	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a11      	ldr	r2, [pc, #68]	; (8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ee2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	2201      	movs	r2, #1
 8004eea:	409a      	lsls	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	58025408 	.word	0x58025408
 8004f00:	5802541c 	.word	0x5802541c
 8004f04:	58025430 	.word	0x58025430
 8004f08:	58025444 	.word	0x58025444
 8004f0c:	58025458 	.word	0x58025458
 8004f10:	5802546c 	.word	0x5802546c
 8004f14:	58025480 	.word	0x58025480
 8004f18:	58025494 	.word	0x58025494
 8004f1c:	1600963f 	.word	0x1600963f
 8004f20:	58025940 	.word	0x58025940
 8004f24:	1000823f 	.word	0x1000823f
 8004f28:	40020940 	.word	0x40020940

08004f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	; 0x24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f3a:	4b86      	ldr	r3, [pc, #536]	; (8005154 <HAL_GPIO_Init+0x228>)
 8004f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f3e:	e18c      	b.n	800525a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	2101      	movs	r1, #1
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 817e 	beq.w	8005254 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d005      	beq.n	8004f70 <HAL_GPIO_Init+0x44>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d130      	bne.n	8004fd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	2203      	movs	r2, #3
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	4013      	ands	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	091b      	lsrs	r3, r3, #4
 8004fbc:	f003 0201 	and.w	r2, r3, #1
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d017      	beq.n	800500e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	2203      	movs	r2, #3
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4313      	orrs	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d123      	bne.n	8005062 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	08da      	lsrs	r2, r3, #3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3208      	adds	r2, #8
 8005022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	220f      	movs	r2, #15
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4013      	ands	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4313      	orrs	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	08da      	lsrs	r2, r3, #3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3208      	adds	r2, #8
 800505c:	69b9      	ldr	r1, [r7, #24]
 800505e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	2203      	movs	r2, #3
 800506e:	fa02 f303 	lsl.w	r3, r2, r3
 8005072:	43db      	mvns	r3, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4013      	ands	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f003 0203 	and.w	r2, r3, #3
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4313      	orrs	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 80d8 	beq.w	8005254 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050a4:	4b2c      	ldr	r3, [pc, #176]	; (8005158 <HAL_GPIO_Init+0x22c>)
 80050a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050aa:	4a2b      	ldr	r2, [pc, #172]	; (8005158 <HAL_GPIO_Init+0x22c>)
 80050ac:	f043 0302 	orr.w	r3, r3, #2
 80050b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050b4:	4b28      	ldr	r3, [pc, #160]	; (8005158 <HAL_GPIO_Init+0x22c>)
 80050b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050c2:	4a26      	ldr	r2, [pc, #152]	; (800515c <HAL_GPIO_Init+0x230>)
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	089b      	lsrs	r3, r3, #2
 80050c8:	3302      	adds	r3, #2
 80050ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	220f      	movs	r2, #15
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	43db      	mvns	r3, r3
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4013      	ands	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a1d      	ldr	r2, [pc, #116]	; (8005160 <HAL_GPIO_Init+0x234>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d04a      	beq.n	8005184 <HAL_GPIO_Init+0x258>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a1c      	ldr	r2, [pc, #112]	; (8005164 <HAL_GPIO_Init+0x238>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d02b      	beq.n	800514e <HAL_GPIO_Init+0x222>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a1b      	ldr	r2, [pc, #108]	; (8005168 <HAL_GPIO_Init+0x23c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d025      	beq.n	800514a <HAL_GPIO_Init+0x21e>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a1a      	ldr	r2, [pc, #104]	; (800516c <HAL_GPIO_Init+0x240>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d01f      	beq.n	8005146 <HAL_GPIO_Init+0x21a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a19      	ldr	r2, [pc, #100]	; (8005170 <HAL_GPIO_Init+0x244>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d019      	beq.n	8005142 <HAL_GPIO_Init+0x216>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a18      	ldr	r2, [pc, #96]	; (8005174 <HAL_GPIO_Init+0x248>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d013      	beq.n	800513e <HAL_GPIO_Init+0x212>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a17      	ldr	r2, [pc, #92]	; (8005178 <HAL_GPIO_Init+0x24c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00d      	beq.n	800513a <HAL_GPIO_Init+0x20e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a16      	ldr	r2, [pc, #88]	; (800517c <HAL_GPIO_Init+0x250>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <HAL_GPIO_Init+0x20a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a15      	ldr	r2, [pc, #84]	; (8005180 <HAL_GPIO_Init+0x254>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d101      	bne.n	8005132 <HAL_GPIO_Init+0x206>
 800512e:	2309      	movs	r3, #9
 8005130:	e029      	b.n	8005186 <HAL_GPIO_Init+0x25a>
 8005132:	230a      	movs	r3, #10
 8005134:	e027      	b.n	8005186 <HAL_GPIO_Init+0x25a>
 8005136:	2307      	movs	r3, #7
 8005138:	e025      	b.n	8005186 <HAL_GPIO_Init+0x25a>
 800513a:	2306      	movs	r3, #6
 800513c:	e023      	b.n	8005186 <HAL_GPIO_Init+0x25a>
 800513e:	2305      	movs	r3, #5
 8005140:	e021      	b.n	8005186 <HAL_GPIO_Init+0x25a>
 8005142:	2304      	movs	r3, #4
 8005144:	e01f      	b.n	8005186 <HAL_GPIO_Init+0x25a>
 8005146:	2303      	movs	r3, #3
 8005148:	e01d      	b.n	8005186 <HAL_GPIO_Init+0x25a>
 800514a:	2302      	movs	r3, #2
 800514c:	e01b      	b.n	8005186 <HAL_GPIO_Init+0x25a>
 800514e:	2301      	movs	r3, #1
 8005150:	e019      	b.n	8005186 <HAL_GPIO_Init+0x25a>
 8005152:	bf00      	nop
 8005154:	58000080 	.word	0x58000080
 8005158:	58024400 	.word	0x58024400
 800515c:	58000400 	.word	0x58000400
 8005160:	58020000 	.word	0x58020000
 8005164:	58020400 	.word	0x58020400
 8005168:	58020800 	.word	0x58020800
 800516c:	58020c00 	.word	0x58020c00
 8005170:	58021000 	.word	0x58021000
 8005174:	58021400 	.word	0x58021400
 8005178:	58021800 	.word	0x58021800
 800517c:	58021c00 	.word	0x58021c00
 8005180:	58022400 	.word	0x58022400
 8005184:	2300      	movs	r3, #0
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	f002 0203 	and.w	r2, r2, #3
 800518c:	0092      	lsls	r2, r2, #2
 800518e:	4093      	lsls	r3, r2
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	4313      	orrs	r3, r2
 8005194:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005196:	4938      	ldr	r1, [pc, #224]	; (8005278 <HAL_GPIO_Init+0x34c>)
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	089b      	lsrs	r3, r3, #2
 800519c:	3302      	adds	r3, #2
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	43db      	mvns	r3, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4013      	ands	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	43db      	mvns	r3, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4013      	ands	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80051f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	43db      	mvns	r3, r3
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4013      	ands	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	43db      	mvns	r3, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4013      	ands	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	3301      	adds	r3, #1
 8005258:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	f47f ae6b 	bne.w	8004f40 <HAL_GPIO_Init+0x14>
  }
}
 800526a:	bf00      	nop
 800526c:	bf00      	nop
 800526e:	3724      	adds	r7, #36	; 0x24
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	58000400 	.word	0x58000400

0800527c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	807b      	strh	r3, [r7, #2]
 8005288:	4613      	mov	r3, r2
 800528a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800528c:	787b      	ldrb	r3, [r7, #1]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005292:	887a      	ldrh	r2, [r7, #2]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005298:	e003      	b.n	80052a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800529a:	887b      	ldrh	r3, [r7, #2]
 800529c:	041a      	lsls	r2, r3, #16
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	619a      	str	r2, [r3, #24]
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80052bc:	f7fd fc16 	bl	8002aec <HAL_GetTick>
 80052c0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d102      	bne.n	80052ce <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	73fb      	strb	r3, [r7, #15]
 80052cc:	e0a5      	b.n	800541a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f040 809e 	bne.w	800541a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fc fee2 	bl	80020a8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80052e4:	f241 3188 	movw	r1, #5000	; 0x1388
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f89d 	bl	8005428 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	4b4b      	ldr	r3, [pc, #300]	; (8005424 <HAL_OSPI_Init+0x174>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	68d1      	ldr	r1, [r2, #12]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6912      	ldr	r2, [r2, #16]
 8005300:	3a01      	subs	r2, #1
 8005302:	0412      	lsls	r2, r2, #16
 8005304:	4311      	orrs	r1, r2
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6952      	ldr	r2, [r2, #20]
 800530a:	3a01      	subs	r2, #1
 800530c:	0212      	lsls	r2, r2, #8
 800530e:	4311      	orrs	r1, r2
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005314:	4311      	orrs	r1, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	69d2      	ldr	r2, [r2, #28]
 800531a:	4311      	orrs	r1, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	430b      	orrs	r3, r1
 8005322:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1a      	ldr	r2, [r3, #32]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005354:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	3b01      	subs	r3, #1
 8005366:	021a      	lsls	r2, r3, #8
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2200      	movs	r2, #0
 800537a:	2120      	movs	r1, #32
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fd4b 	bl	8005e18 <OSPI_WaitFlagStateUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d146      	bne.n	800541a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	1e5a      	subs	r2, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80053c2:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0201 	orr.w	r2, r2, #1
 80053e8:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d107      	bne.n	8005402 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0202 	orr.w	r2, r2, #2
 8005400:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800540a:	d103      	bne.n	8005414 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	651a      	str	r2, [r3, #80]	; 0x50
 8005412:	e002      	b.n	800541a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800541a:	7bfb      	ldrb	r3, [r7, #15]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	f8e0f8f4 	.word	0xf8e0f8f4

08005428 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b094      	sub	sp, #80	; 0x50
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a9d      	ldr	r2, [pc, #628]	; (80056dc <HAL_OSPIM_Config+0x294>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d105      	bne.n	8005476 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800546e:	2301      	movs	r3, #1
 8005470:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8005474:	e004      	b.n	8005480 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8005476:	2301      	movs	r3, #1
 8005478:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005480:	2300      	movs	r3, #0
 8005482:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005486:	e01d      	b.n	80054c4 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8005488:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800548c:	3301      	adds	r3, #1
 800548e:	b2d8      	uxtb	r0, r3
 8005490:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005494:	f107 0114 	add.w	r1, r7, #20
 8005498:	4613      	mov	r3, r2
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	440b      	add	r3, r1
 80054a2:	4619      	mov	r1, r3
 80054a4:	f000 fcf0 	bl	8005e88 <OSPIM_GetConfig>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d005      	beq.n	80054ba <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2208      	movs	r2, #8
 80054b8:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80054ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80054be:	3301      	adds	r3, #1
 80054c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80054c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d9dd      	bls.n	8005488 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80054cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f040 8495 	bne.w	8005e00 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80054d6:	4b81      	ldr	r3, [pc, #516]	; (80056dc <HAL_OSPIM_Config+0x294>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00b      	beq.n	80054fa <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80054e2:	4b7e      	ldr	r3, [pc, #504]	; (80056dc <HAL_OSPIM_Config+0x294>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a7d      	ldr	r2, [pc, #500]	; (80056dc <HAL_OSPIM_Config+0x294>)
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80054ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80054f2:	f043 0301 	orr.w	r3, r3, #1
 80054f6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80054fa:	4b79      	ldr	r3, [pc, #484]	; (80056e0 <HAL_OSPIM_Config+0x298>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00b      	beq.n	800551e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005506:	4b76      	ldr	r3, [pc, #472]	; (80056e0 <HAL_OSPIM_Config+0x298>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a75      	ldr	r2, [pc, #468]	; (80056e0 <HAL_OSPIM_Config+0x298>)
 800550c:	f023 0301 	bic.w	r3, r3, #1
 8005510:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005512:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005516:	f043 0302 	orr.w	r3, r3, #2
 800551a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800551e:	4971      	ldr	r1, [pc, #452]	; (80056e4 <HAL_OSPIM_Config+0x29c>)
 8005520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005522:	4613      	mov	r3, r2
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	4413      	add	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	3350      	adds	r3, #80	; 0x50
 800552c:	443b      	add	r3, r7
 800552e:	3b34      	subs	r3, #52	; 0x34
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3b01      	subs	r3, #1
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	6859      	ldr	r1, [r3, #4]
 800553a:	486a      	ldr	r0, [pc, #424]	; (80056e4 <HAL_OSPIM_Config+0x29c>)
 800553c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800553e:	4613      	mov	r3, r2
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	4413      	add	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	3350      	adds	r3, #80	; 0x50
 8005548:	443b      	add	r3, r7
 800554a:	3b34      	subs	r3, #52	; 0x34
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3b01      	subs	r3, #1
 8005550:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4403      	add	r3, r0
 8005558:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800555a:	4b62      	ldr	r3, [pc, #392]	; (80056e4 <HAL_OSPIM_Config+0x29c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 80c0 	beq.w	80056e8 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8005568:	4b5e      	ldr	r3, [pc, #376]	; (80056e4 <HAL_OSPIM_Config+0x29c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a5d      	ldr	r2, [pc, #372]	; (80056e4 <HAL_OSPIM_Config+0x29c>)
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8005574:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005578:	2b01      	cmp	r3, #1
 800557a:	f040 8162 	bne.w	8005842 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800557e:	4959      	ldr	r1, [pc, #356]	; (80056e4 <HAL_OSPIM_Config+0x29c>)
 8005580:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005584:	4613      	mov	r3, r2
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	4413      	add	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	3350      	adds	r3, #80	; 0x50
 800558e:	443b      	add	r3, r7
 8005590:	3b3c      	subs	r3, #60	; 0x3c
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3b01      	subs	r3, #1
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	6859      	ldr	r1, [r3, #4]
 800559c:	4851      	ldr	r0, [pc, #324]	; (80056e4 <HAL_OSPIM_Config+0x29c>)
 800559e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80055a2:	4613      	mov	r3, r2
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	4413      	add	r3, r2
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	3350      	adds	r3, #80	; 0x50
 80055ac:	443b      	add	r3, r7
 80055ae:	3b3c      	subs	r3, #60	; 0x3c
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	f041 0202 	orr.w	r2, r1, #2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4403      	add	r3, r0
 80055bc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80055be:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80055c2:	4613      	mov	r3, r2
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	4413      	add	r3, r2
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	3350      	adds	r3, #80	; 0x50
 80055cc:	443b      	add	r3, r7
 80055ce:	3b38      	subs	r3, #56	; 0x38
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d01f      	beq.n	8005616 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 80055d6:	4943      	ldr	r1, [pc, #268]	; (80056e4 <HAL_OSPIM_Config+0x29c>)
 80055d8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80055dc:	4613      	mov	r3, r2
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	4413      	add	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	3350      	adds	r3, #80	; 0x50
 80055e6:	443b      	add	r3, r7
 80055e8:	3b38      	subs	r3, #56	; 0x38
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	6859      	ldr	r1, [r3, #4]
 80055f4:	483b      	ldr	r0, [pc, #236]	; (80056e4 <HAL_OSPIM_Config+0x29c>)
 80055f6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80055fa:	4613      	mov	r3, r2
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	4413      	add	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	3350      	adds	r3, #80	; 0x50
 8005604:	443b      	add	r3, r7
 8005606:	3b38      	subs	r3, #56	; 0x38
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3b01      	subs	r3, #1
 800560c:	f041 0220 	orr.w	r2, r1, #32
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4403      	add	r3, r0
 8005614:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005616:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800561a:	4613      	mov	r3, r2
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	4413      	add	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	3350      	adds	r3, #80	; 0x50
 8005624:	443b      	add	r3, r7
 8005626:	3b30      	subs	r3, #48	; 0x30
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d023      	beq.n	8005676 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800562e:	492d      	ldr	r1, [pc, #180]	; (80056e4 <HAL_OSPIM_Config+0x29c>)
 8005630:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005634:	4613      	mov	r3, r2
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	4413      	add	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	3350      	adds	r3, #80	; 0x50
 800563e:	443b      	add	r3, r7
 8005640:	3b30      	subs	r3, #48	; 0x30
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3b01      	subs	r3, #1
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	440b      	add	r3, r1
 800564e:	6859      	ldr	r1, [r3, #4]
 8005650:	4824      	ldr	r0, [pc, #144]	; (80056e4 <HAL_OSPIM_Config+0x29c>)
 8005652:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005656:	4613      	mov	r3, r2
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	4413      	add	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	3350      	adds	r3, #80	; 0x50
 8005660:	443b      	add	r3, r7
 8005662:	3b30      	subs	r3, #48	; 0x30
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3b01      	subs	r3, #1
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4403      	add	r3, r0
 8005674:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005676:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800567a:	4613      	mov	r3, r2
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	4413      	add	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	3350      	adds	r3, #80	; 0x50
 8005684:	443b      	add	r3, r7
 8005686:	3b2c      	subs	r3, #44	; 0x2c
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 80d9 	beq.w	8005842 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8005690:	4914      	ldr	r1, [pc, #80]	; (80056e4 <HAL_OSPIM_Config+0x29c>)
 8005692:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005696:	4613      	mov	r3, r2
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	4413      	add	r3, r2
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	3350      	adds	r3, #80	; 0x50
 80056a0:	443b      	add	r3, r7
 80056a2:	3b2c      	subs	r3, #44	; 0x2c
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	6859      	ldr	r1, [r3, #4]
 80056b2:	480c      	ldr	r0, [pc, #48]	; (80056e4 <HAL_OSPIM_Config+0x29c>)
 80056b4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80056b8:	4613      	mov	r3, r2
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	4413      	add	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	3350      	adds	r3, #80	; 0x50
 80056c2:	443b      	add	r3, r7
 80056c4:	3b2c      	subs	r3, #44	; 0x2c
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4403      	add	r3, r0
 80056d6:	605a      	str	r2, [r3, #4]
 80056d8:	e0b3      	b.n	8005842 <HAL_OSPIM_Config+0x3fa>
 80056da:	bf00      	nop
 80056dc:	52005000 	.word	0x52005000
 80056e0:	5200a000 	.word	0x5200a000
 80056e4:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80056e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056ea:	4613      	mov	r3, r2
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	4413      	add	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	3350      	adds	r3, #80	; 0x50
 80056f4:	443b      	add	r3, r7
 80056f6:	3b3c      	subs	r3, #60	; 0x3c
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 80a1 	beq.w	8005842 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005700:	4993      	ldr	r1, [pc, #588]	; (8005950 <HAL_OSPIM_Config+0x508>)
 8005702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005704:	4613      	mov	r3, r2
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	4413      	add	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	3350      	adds	r3, #80	; 0x50
 800570e:	443b      	add	r3, r7
 8005710:	3b3c      	subs	r3, #60	; 0x3c
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3b01      	subs	r3, #1
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	6859      	ldr	r1, [r3, #4]
 800571c:	488c      	ldr	r0, [pc, #560]	; (8005950 <HAL_OSPIM_Config+0x508>)
 800571e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005720:	4613      	mov	r3, r2
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	4413      	add	r3, r2
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	3350      	adds	r3, #80	; 0x50
 800572a:	443b      	add	r3, r7
 800572c:	3b3c      	subs	r3, #60	; 0x3c
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3b01      	subs	r3, #1
 8005732:	f021 0201 	bic.w	r2, r1, #1
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4403      	add	r3, r0
 800573a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800573c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800573e:	4613      	mov	r3, r2
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	4413      	add	r3, r2
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	3350      	adds	r3, #80	; 0x50
 8005748:	443b      	add	r3, r7
 800574a:	3b38      	subs	r3, #56	; 0x38
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d01d      	beq.n	800578e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005752:	497f      	ldr	r1, [pc, #508]	; (8005950 <HAL_OSPIM_Config+0x508>)
 8005754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005756:	4613      	mov	r3, r2
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	4413      	add	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	3350      	adds	r3, #80	; 0x50
 8005760:	443b      	add	r3, r7
 8005762:	3b38      	subs	r3, #56	; 0x38
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3b01      	subs	r3, #1
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	6859      	ldr	r1, [r3, #4]
 800576e:	4878      	ldr	r0, [pc, #480]	; (8005950 <HAL_OSPIM_Config+0x508>)
 8005770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005772:	4613      	mov	r3, r2
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	4413      	add	r3, r2
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	3350      	adds	r3, #80	; 0x50
 800577c:	443b      	add	r3, r7
 800577e:	3b38      	subs	r3, #56	; 0x38
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3b01      	subs	r3, #1
 8005784:	f021 0210 	bic.w	r2, r1, #16
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4403      	add	r3, r0
 800578c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800578e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005790:	4613      	mov	r3, r2
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	4413      	add	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	3350      	adds	r3, #80	; 0x50
 800579a:	443b      	add	r3, r7
 800579c:	3b30      	subs	r3, #48	; 0x30
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d021      	beq.n	80057e8 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80057a4:	496a      	ldr	r1, [pc, #424]	; (8005950 <HAL_OSPIM_Config+0x508>)
 80057a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057a8:	4613      	mov	r3, r2
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	4413      	add	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	3350      	adds	r3, #80	; 0x50
 80057b2:	443b      	add	r3, r7
 80057b4:	3b30      	subs	r3, #48	; 0x30
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	440b      	add	r3, r1
 80057c2:	6859      	ldr	r1, [r3, #4]
 80057c4:	4862      	ldr	r0, [pc, #392]	; (8005950 <HAL_OSPIM_Config+0x508>)
 80057c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057c8:	4613      	mov	r3, r2
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	4413      	add	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	3350      	adds	r3, #80	; 0x50
 80057d2:	443b      	add	r3, r7
 80057d4:	3b30      	subs	r3, #48	; 0x30
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3b01      	subs	r3, #1
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4403      	add	r3, r0
 80057e6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80057e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057ea:	4613      	mov	r3, r2
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	4413      	add	r3, r2
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	3350      	adds	r3, #80	; 0x50
 80057f4:	443b      	add	r3, r7
 80057f6:	3b2c      	subs	r3, #44	; 0x2c
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d021      	beq.n	8005842 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80057fe:	4954      	ldr	r1, [pc, #336]	; (8005950 <HAL_OSPIM_Config+0x508>)
 8005800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005802:	4613      	mov	r3, r2
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	4413      	add	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	3350      	adds	r3, #80	; 0x50
 800580c:	443b      	add	r3, r7
 800580e:	3b2c      	subs	r3, #44	; 0x2c
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3b01      	subs	r3, #1
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	6859      	ldr	r1, [r3, #4]
 800581e:	484c      	ldr	r0, [pc, #304]	; (8005950 <HAL_OSPIM_Config+0x508>)
 8005820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005822:	4613      	mov	r3, r2
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	4413      	add	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	3350      	adds	r3, #80	; 0x50
 800582c:	443b      	add	r3, r7
 800582e:	3b2c      	subs	r3, #44	; 0x2c
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3b01      	subs	r3, #1
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4403      	add	r3, r0
 8005840:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	6819      	ldr	r1, [r3, #0]
 8005846:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800584a:	4613      	mov	r3, r2
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	4413      	add	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	3350      	adds	r3, #80	; 0x50
 8005854:	443b      	add	r3, r7
 8005856:	3b3c      	subs	r3, #60	; 0x3c
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4299      	cmp	r1, r3
 800585c:	d038      	beq.n	80058d0 <HAL_OSPIM_Config+0x488>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	6859      	ldr	r1, [r3, #4]
 8005862:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005866:	4613      	mov	r3, r2
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	4413      	add	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	3350      	adds	r3, #80	; 0x50
 8005870:	443b      	add	r3, r7
 8005872:	3b38      	subs	r3, #56	; 0x38
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4299      	cmp	r1, r3
 8005878:	d02a      	beq.n	80058d0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	6899      	ldr	r1, [r3, #8]
 800587e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005882:	4613      	mov	r3, r2
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	4413      	add	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	3350      	adds	r3, #80	; 0x50
 800588c:	443b      	add	r3, r7
 800588e:	3b34      	subs	r3, #52	; 0x34
 8005890:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005892:	4299      	cmp	r1, r3
 8005894:	d01c      	beq.n	80058d0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	68d9      	ldr	r1, [r3, #12]
 800589a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800589e:	4613      	mov	r3, r2
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	4413      	add	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	3350      	adds	r3, #80	; 0x50
 80058a8:	443b      	add	r3, r7
 80058aa:	3b30      	subs	r3, #48	; 0x30
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4299      	cmp	r1, r3
 80058b0:	d00e      	beq.n	80058d0 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6919      	ldr	r1, [r3, #16]
 80058b6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80058ba:	4613      	mov	r3, r2
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	4413      	add	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	3350      	adds	r3, #80	; 0x50
 80058c4:	443b      	add	r3, r7
 80058c6:	3b2c      	subs	r3, #44	; 0x2c
 80058c8:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80058ca:	4299      	cmp	r1, r3
 80058cc:	f040 810e 	bne.w	8005aec <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	6819      	ldr	r1, [r3, #0]
 80058d4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80058d8:	4613      	mov	r3, r2
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	4413      	add	r3, r2
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	3350      	adds	r3, #80	; 0x50
 80058e2:	443b      	add	r3, r7
 80058e4:	3b3c      	subs	r3, #60	; 0x3c
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4299      	cmp	r1, r3
 80058ea:	d133      	bne.n	8005954 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	6859      	ldr	r1, [r3, #4]
 80058f0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80058f4:	4613      	mov	r3, r2
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	4413      	add	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	3350      	adds	r3, #80	; 0x50
 80058fe:	443b      	add	r3, r7
 8005900:	3b38      	subs	r3, #56	; 0x38
 8005902:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8005904:	4299      	cmp	r1, r3
 8005906:	d125      	bne.n	8005954 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	68d9      	ldr	r1, [r3, #12]
 800590c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005910:	4613      	mov	r3, r2
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	4413      	add	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	3350      	adds	r3, #80	; 0x50
 800591a:	443b      	add	r3, r7
 800591c:	3b30      	subs	r3, #48	; 0x30
 800591e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8005920:	4299      	cmp	r1, r3
 8005922:	d117      	bne.n	8005954 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	6919      	ldr	r1, [r3, #16]
 8005928:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800592c:	4613      	mov	r3, r2
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	4413      	add	r3, r2
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	3350      	adds	r3, #80	; 0x50
 8005936:	443b      	add	r3, r7
 8005938:	3b2c      	subs	r3, #44	; 0x2c
 800593a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800593c:	4299      	cmp	r1, r3
 800593e:	d109      	bne.n	8005954 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8005940:	4b03      	ldr	r3, [pc, #12]	; (8005950 <HAL_OSPIM_Config+0x508>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a02      	ldr	r2, [pc, #8]	; (8005950 <HAL_OSPIM_Config+0x508>)
 8005946:	f043 0301 	orr.w	r3, r3, #1
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	e0ce      	b.n	8005aec <HAL_OSPIM_Config+0x6a4>
 800594e:	bf00      	nop
 8005950:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005954:	49bb      	ldr	r1, [pc, #748]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005956:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800595a:	4613      	mov	r3, r2
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	4413      	add	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	3350      	adds	r3, #80	; 0x50
 8005964:	443b      	add	r3, r7
 8005966:	3b3c      	subs	r3, #60	; 0x3c
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3b01      	subs	r3, #1
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	6859      	ldr	r1, [r3, #4]
 8005972:	48b4      	ldr	r0, [pc, #720]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005974:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005978:	4613      	mov	r3, r2
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	4413      	add	r3, r2
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	3350      	adds	r3, #80	; 0x50
 8005982:	443b      	add	r3, r7
 8005984:	3b3c      	subs	r3, #60	; 0x3c
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3b01      	subs	r3, #1
 800598a:	f021 0201 	bic.w	r2, r1, #1
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4403      	add	r3, r0
 8005992:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005994:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005998:	4613      	mov	r3, r2
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	4413      	add	r3, r2
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	3350      	adds	r3, #80	; 0x50
 80059a2:	443b      	add	r3, r7
 80059a4:	3b38      	subs	r3, #56	; 0x38
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01f      	beq.n	80059ec <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80059ac:	49a5      	ldr	r1, [pc, #660]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 80059ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80059b2:	4613      	mov	r3, r2
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	4413      	add	r3, r2
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	3350      	adds	r3, #80	; 0x50
 80059bc:	443b      	add	r3, r7
 80059be:	3b38      	subs	r3, #56	; 0x38
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	440b      	add	r3, r1
 80059c8:	6859      	ldr	r1, [r3, #4]
 80059ca:	489e      	ldr	r0, [pc, #632]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 80059cc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80059d0:	4613      	mov	r3, r2
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	4413      	add	r3, r2
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	3350      	adds	r3, #80	; 0x50
 80059da:	443b      	add	r3, r7
 80059dc:	3b38      	subs	r3, #56	; 0x38
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	f021 0210 	bic.w	r2, r1, #16
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4403      	add	r3, r0
 80059ea:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80059ec:	4995      	ldr	r1, [pc, #596]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 80059ee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80059f2:	4613      	mov	r3, r2
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	4413      	add	r3, r2
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	3350      	adds	r3, #80	; 0x50
 80059fc:	443b      	add	r3, r7
 80059fe:	3b34      	subs	r3, #52	; 0x34
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	440b      	add	r3, r1
 8005a08:	6859      	ldr	r1, [r3, #4]
 8005a0a:	488e      	ldr	r0, [pc, #568]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005a0c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005a10:	4613      	mov	r3, r2
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	4413      	add	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	3350      	adds	r3, #80	; 0x50
 8005a1a:	443b      	add	r3, r7
 8005a1c:	3b34      	subs	r3, #52	; 0x34
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4403      	add	r3, r0
 8005a2a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005a2c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005a30:	4613      	mov	r3, r2
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	4413      	add	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	3350      	adds	r3, #80	; 0x50
 8005a3a:	443b      	add	r3, r7
 8005a3c:	3b30      	subs	r3, #48	; 0x30
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d023      	beq.n	8005a8c <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005a44:	497f      	ldr	r1, [pc, #508]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005a46:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	4413      	add	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	3350      	adds	r3, #80	; 0x50
 8005a54:	443b      	add	r3, r7
 8005a56:	3b30      	subs	r3, #48	; 0x30
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	440b      	add	r3, r1
 8005a64:	6859      	ldr	r1, [r3, #4]
 8005a66:	4877      	ldr	r0, [pc, #476]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005a68:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	4413      	add	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	3350      	adds	r3, #80	; 0x50
 8005a76:	443b      	add	r3, r7
 8005a78:	3b30      	subs	r3, #48	; 0x30
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4403      	add	r3, r0
 8005a8a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005a8c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005a90:	4613      	mov	r3, r2
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	4413      	add	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	3350      	adds	r3, #80	; 0x50
 8005a9a:	443b      	add	r3, r7
 8005a9c:	3b2c      	subs	r3, #44	; 0x2c
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d023      	beq.n	8005aec <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005aa4:	4967      	ldr	r1, [pc, #412]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005aa6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005aaa:	4613      	mov	r3, r2
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	4413      	add	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	3350      	adds	r3, #80	; 0x50
 8005ab4:	443b      	add	r3, r7
 8005ab6:	3b2c      	subs	r3, #44	; 0x2c
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	485f      	ldr	r0, [pc, #380]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005ac8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005acc:	4613      	mov	r3, r2
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	4413      	add	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	3350      	adds	r3, #80	; 0x50
 8005ad6:	443b      	add	r3, r7
 8005ad8:	3b2c      	subs	r3, #44	; 0x2c
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4403      	add	r3, r0
 8005aea:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005aec:	4a55      	ldr	r2, [pc, #340]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b00:	025b      	lsls	r3, r3, #9
 8005b02:	431a      	orrs	r2, r3
 8005b04:	494f      	ldr	r1, [pc, #316]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	1e5a      	subs	r2, r3, #1
 8005b1c:	4b49      	ldr	r3, [pc, #292]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	0c1b      	lsrs	r3, r3, #16
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d90a      	bls.n	8005b3e <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8005b28:	4b46      	ldr	r3, [pc, #280]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	041b      	lsls	r3, r3, #16
 8005b38:	4942      	ldr	r1, [pc, #264]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005b3e:	4b41      	ldr	r3, [pc, #260]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 809a 	beq.w	8005c80 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8005b4c:	4a3d      	ldr	r2, [pc, #244]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f023 0203 	bic.w	r2, r3, #3
 8005b5e:	4939      	ldr	r1, [pc, #228]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d011      	beq.n	8005b9c <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8005b78:	4a32      	ldr	r2, [pc, #200]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b8a:	492e      	ldr	r1, [pc, #184]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	f042 0210 	orr.w	r2, r2, #16
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d016      	beq.n	8005bd6 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005ba8:	4a26      	ldr	r2, [pc, #152]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005bbe:	4921      	ldr	r1, [pc, #132]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	605a      	str	r2, [r3, #4]
 8005bd4:	e019      	b.n	8005c0a <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d015      	beq.n	8005c0a <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005bde:	4a19      	ldr	r2, [pc, #100]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005bf4:	4913      	ldr	r1, [pc, #76]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	440b      	add	r3, r1
 8005c08:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d018      	beq.n	8005c48 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005c16:	4a0b      	ldr	r2, [pc, #44]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005c2c:	4905      	ldr	r1, [pc, #20]	; (8005c44 <HAL_OSPIM_Config+0x7fc>)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	440b      	add	r3, r1
 8005c40:	605a      	str	r2, [r3, #4]
 8005c42:	e0c5      	b.n	8005dd0 <HAL_OSPIM_Config+0x988>
 8005c44:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 80bf 	beq.w	8005dd0 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005c52:	4a6e      	ldr	r2, [pc, #440]	; (8005e0c <HAL_OSPIM_Config+0x9c4>)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005c68:	4968      	ldr	r1, [pc, #416]	; (8005e0c <HAL_OSPIM_Config+0x9c4>)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	605a      	str	r2, [r3, #4]
 8005c7e:	e0a7      	b.n	8005dd0 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8005c80:	4a62      	ldr	r2, [pc, #392]	; (8005e0c <HAL_OSPIM_Config+0x9c4>)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f023 0203 	bic.w	r2, r3, #3
 8005c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	431a      	orrs	r2, r3
 8005c98:	495c      	ldr	r1, [pc, #368]	; (8005e0c <HAL_OSPIM_Config+0x9c4>)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	f042 0201 	orr.w	r2, r2, #1
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	440b      	add	r3, r1
 8005ca8:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d014      	beq.n	8005cdc <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005cb2:	4a56      	ldr	r2, [pc, #344]	; (8005e0c <HAL_OSPIM_Config+0x9c4>)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc6:	015b      	lsls	r3, r3, #5
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	4950      	ldr	r1, [pc, #320]	; (8005e0c <HAL_OSPIM_Config+0x9c4>)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	f042 0210 	orr.w	r2, r2, #16
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d019      	beq.n	8005d1c <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005ce8:	4a48      	ldr	r2, [pc, #288]	; (8005e0c <HAL_OSPIM_Config+0x9c4>)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d00:	049b      	lsls	r3, r3, #18
 8005d02:	431a      	orrs	r2, r3
 8005d04:	4941      	ldr	r1, [pc, #260]	; (8005e0c <HAL_OSPIM_Config+0x9c4>)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	605a      	str	r2, [r3, #4]
 8005d1a:	e01c      	b.n	8005d56 <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d018      	beq.n	8005d56 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d24:	4a39      	ldr	r2, [pc, #228]	; (8005e0c <HAL_OSPIM_Config+0x9c4>)
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d3c:	069b      	lsls	r3, r3, #26
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	4932      	ldr	r1, [pc, #200]	; (8005e0c <HAL_OSPIM_Config+0x9c4>)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d019      	beq.n	8005d96 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d62:	4a2a      	ldr	r2, [pc, #168]	; (8005e0c <HAL_OSPIM_Config+0x9c4>)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d7a:	049b      	lsls	r3, r3, #18
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	4923      	ldr	r1, [pc, #140]	; (8005e0c <HAL_OSPIM_Config+0x9c4>)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	440b      	add	r3, r1
 8005d92:	605a      	str	r2, [r3, #4]
 8005d94:	e01c      	b.n	8005dd0 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d018      	beq.n	8005dd0 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d9e:	4a1b      	ldr	r2, [pc, #108]	; (8005e0c <HAL_OSPIM_Config+0x9c4>)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db6:	069b      	lsls	r3, r3, #26
 8005db8:	431a      	orrs	r2, r3
 8005dba:	4914      	ldr	r1, [pc, #80]	; (8005e0c <HAL_OSPIM_Config+0x9c4>)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005dd0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <HAL_OSPIM_Config+0x9c8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0b      	ldr	r2, [pc, #44]	; (8005e10 <HAL_OSPIM_Config+0x9c8>)
 8005de2:	f043 0301 	orr.w	r3, r3, #1
 8005de6:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005de8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d005      	beq.n	8005e00 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005df4:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <HAL_OSPIM_Config+0x9cc>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a06      	ldr	r2, [pc, #24]	; (8005e14 <HAL_OSPIM_Config+0x9cc>)
 8005dfa:	f043 0301 	orr.w	r3, r3, #1
 8005dfe:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005e00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3750      	adds	r7, #80	; 0x50
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	5200b400 	.word	0x5200b400
 8005e10:	52005000 	.word	0x52005000
 8005e14:	5200a000 	.word	0x5200a000

08005e18 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	4613      	mov	r3, r2
 8005e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005e28:	e01a      	b.n	8005e60 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e30:	d016      	beq.n	8005e60 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e32:	f7fc fe5b 	bl	8002aec <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d302      	bcc.n	8005e48 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10b      	bne.n	8005e60 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e4e:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e54:	f043 0201 	orr.w	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e00e      	b.n	8005e7e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6a1a      	ldr	r2, [r3, #32]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	bf14      	ite	ne
 8005e6e:	2301      	movne	r3, #1
 8005e70:	2300      	moveq	r3, #0
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	461a      	mov	r2, r3
 8005e76:	79fb      	ldrb	r3, [r7, #7]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d1d6      	bne.n	8005e2a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	6039      	str	r1, [r7, #0]
 8005e92:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <OSPIM_GetConfig+0x26>
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d802      	bhi.n	8005eae <OSPIM_GetConfig+0x26>
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	75fb      	strb	r3, [r7, #23]
 8005eb2:	e098      	b.n	8005fe6 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8005ed2:	79fb      	ldrb	r3, [r7, #7]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d10b      	bne.n	8005ef0 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8005ed8:	4b46      	ldr	r3, [pc, #280]	; (8005ff4 <OSPIM_GetConfig+0x16c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d102      	bne.n	8005eea <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8005ee4:	4b44      	ldr	r3, [pc, #272]	; (8005ff8 <OSPIM_GetConfig+0x170>)
 8005ee6:	613b      	str	r3, [r7, #16]
 8005ee8:	e002      	b.n	8005ef0 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8005eea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eee:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	e074      	b.n	8005fe0 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8005ef6:	4a3f      	ldr	r2, [pc, #252]	; (8005ff4 <OSPIM_GetConfig+0x16c>)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	4053      	eors	r3, r2
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4053      	eors	r3, r2
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d103      	bne.n	8005f42 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	4053      	eors	r3, r2
 8005f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d018      	beq.n	8005f9e <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	4053      	eors	r3, r2
 8005f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d111      	bne.n	8005f9e <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d106      	bne.n	8005f92 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3301      	adds	r3, #1
 8005f88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	60da      	str	r2, [r3, #12]
 8005f90:	e005      	b.n	8005f9e <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	3301      	adds	r3, #1
 8005f96:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d018      	beq.n	8005fda <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4053      	eors	r3, r2
 8005fae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d111      	bne.n	8005fda <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d106      	bne.n	8005fce <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	611a      	str	r2, [r3, #16]
 8005fcc:	e005      	b.n	8005fda <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d987      	bls.n	8005ef6 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	5200b400 	.word	0x5200b400
 8005ff8:	04040222 	.word	0x04040222

08005ffc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af02      	add	r7, sp, #8
 8006002:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e0fe      	b.n	800620c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f00a f984 	bl	8010330 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2203      	movs	r2, #3
 800602c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f006 fbd4 	bl	800c7e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	7c1a      	ldrb	r2, [r3, #16]
 8006042:	f88d 2000 	strb.w	r2, [sp]
 8006046:	3304      	adds	r3, #4
 8006048:	cb0e      	ldmia	r3, {r1, r2, r3}
 800604a:	f006 faa5 	bl	800c598 <USB_CoreInit>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d005      	beq.n	8006060 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e0d5      	b.n	800620c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2100      	movs	r1, #0
 8006066:	4618      	mov	r0, r3
 8006068:	f006 fbcc 	bl	800c804 <USB_SetCurrentMode>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d005      	beq.n	800607e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e0c6      	b.n	800620c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]
 8006082:	e04a      	b.n	800611a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006084:	7bfa      	ldrb	r2, [r7, #15]
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	4613      	mov	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	3315      	adds	r3, #21
 8006094:	2201      	movs	r2, #1
 8006096:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006098:	7bfa      	ldrb	r2, [r7, #15]
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	3314      	adds	r3, #20
 80060a8:	7bfa      	ldrb	r2, [r7, #15]
 80060aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80060ac:	7bfa      	ldrb	r2, [r7, #15]
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	b298      	uxth	r0, r3
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	4613      	mov	r3, r2
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	440b      	add	r3, r1
 80060be:	332e      	adds	r3, #46	; 0x2e
 80060c0:	4602      	mov	r2, r0
 80060c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060c4:	7bfa      	ldrb	r2, [r7, #15]
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	4613      	mov	r3, r2
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	3318      	adds	r3, #24
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060d8:	7bfa      	ldrb	r2, [r7, #15]
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	4613      	mov	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	4413      	add	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	440b      	add	r3, r1
 80060e6:	331c      	adds	r3, #28
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060ec:	7bfa      	ldrb	r2, [r7, #15]
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	4613      	mov	r3, r2
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	3320      	adds	r3, #32
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006100:	7bfa      	ldrb	r2, [r7, #15]
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	4613      	mov	r3, r2
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	3324      	adds	r3, #36	; 0x24
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	3301      	adds	r3, #1
 8006118:	73fb      	strb	r3, [r7, #15]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	791b      	ldrb	r3, [r3, #4]
 800611e:	7bfa      	ldrb	r2, [r7, #15]
 8006120:	429a      	cmp	r2, r3
 8006122:	d3af      	bcc.n	8006084 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006124:	2300      	movs	r3, #0
 8006126:	73fb      	strb	r3, [r7, #15]
 8006128:	e044      	b.n	80061b4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800612a:	7bfa      	ldrb	r2, [r7, #15]
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	440b      	add	r3, r1
 8006138:	f203 2355 	addw	r3, r3, #597	; 0x255
 800613c:	2200      	movs	r2, #0
 800613e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006140:	7bfa      	ldrb	r2, [r7, #15]
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	4613      	mov	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006152:	7bfa      	ldrb	r2, [r7, #15]
 8006154:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006156:	7bfa      	ldrb	r2, [r7, #15]
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800616c:	7bfa      	ldrb	r2, [r7, #15]
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006182:	7bfa      	ldrb	r2, [r7, #15]
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	4613      	mov	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	4413      	add	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	440b      	add	r3, r1
 8006190:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006198:	7bfa      	ldrb	r2, [r7, #15]
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	4613      	mov	r3, r2
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	4413      	add	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	3301      	adds	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	791b      	ldrb	r3, [r3, #4]
 80061b8:	7bfa      	ldrb	r2, [r7, #15]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d3b5      	bcc.n	800612a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	7c1a      	ldrb	r2, [r3, #16]
 80061c6:	f88d 2000 	strb.w	r2, [sp]
 80061ca:	3304      	adds	r3, #4
 80061cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061ce:	f006 fb65 	bl	800c89c <USB_DevInit>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e013      	b.n	800620c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	7b1b      	ldrb	r3, [r3, #12]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d102      	bne.n	8006200 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f001 f946 	bl	800748c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4618      	mov	r0, r3
 8006206:	f007 fac8 	bl	800d79a <USB_DevDisconnect>

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_PCD_Start+0x1c>
 800622c:	2302      	movs	r3, #2
 800622e:	e022      	b.n	8006276 <HAL_PCD_Start+0x62>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d009      	beq.n	8006258 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006248:	2b01      	cmp	r3, #1
 800624a:	d105      	bne.n	8006258 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4618      	mov	r0, r3
 800625e:	f006 faaf 	bl	800c7c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4618      	mov	r0, r3
 8006268:	f007 fa76 	bl	800d758 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <HAL_PCD_Stop+0x1c>
 8006296:	2302      	movs	r3, #2
 8006298:	e028      	b.n	80062ec <HAL_PCD_Stop+0x6e>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  __HAL_PCD_DISABLE(hpcd);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f006 fa9b 	bl	800c7e2 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f007 fa72 	bl	800d79a <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2110      	movs	r1, #16
 80062bc:	4618      	mov	r0, r3
 80062be:	f006 fc4b 	bl	800cb58 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d105      	bne.n	80062e2 <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80062f4:	b590      	push	{r4, r7, lr}
 80062f6:	b08d      	sub	sp, #52	; 0x34
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4618      	mov	r0, r3
 800630c:	f007 faf9 	bl	800d902 <USB_GetMode>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	f040 84b9 	bne.w	8006c8a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4618      	mov	r0, r3
 800631e:	f007 fa5d 	bl	800d7dc <USB_ReadInterrupts>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 84af 	beq.w	8006c88 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	0a1b      	lsrs	r3, r3, #8
 8006334:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4618      	mov	r0, r3
 8006344:	f007 fa4a 	bl	800d7dc <USB_ReadInterrupts>
 8006348:	4603      	mov	r3, r0
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b02      	cmp	r3, #2
 8006350:	d107      	bne.n	8006362 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	695a      	ldr	r2, [r3, #20]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f002 0202 	and.w	r2, r2, #2
 8006360:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4618      	mov	r0, r3
 8006368:	f007 fa38 	bl	800d7dc <USB_ReadInterrupts>
 800636c:	4603      	mov	r3, r0
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	2b10      	cmp	r3, #16
 8006374:	d161      	bne.n	800643a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699a      	ldr	r2, [r3, #24]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0210 	bic.w	r2, r2, #16
 8006384:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	f003 020f 	and.w	r2, r3, #15
 8006392:	4613      	mov	r3, r2
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	4413      	add	r3, r2
 80063a2:	3304      	adds	r3, #4
 80063a4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	0c5b      	lsrs	r3, r3, #17
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d124      	bne.n	80063fc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80063b8:	4013      	ands	r3, r2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d035      	beq.n	800642a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	091b      	lsrs	r3, r3, #4
 80063c6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80063c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	461a      	mov	r2, r3
 80063d0:	6a38      	ldr	r0, [r7, #32]
 80063d2:	f007 f86f 	bl	800d4b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	091b      	lsrs	r3, r3, #4
 80063de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063e2:	441a      	add	r2, r3
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	695a      	ldr	r2, [r3, #20]
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	091b      	lsrs	r3, r3, #4
 80063f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063f4:	441a      	add	r2, r3
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	615a      	str	r2, [r3, #20]
 80063fa:	e016      	b.n	800642a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	0c5b      	lsrs	r3, r3, #17
 8006400:	f003 030f 	and.w	r3, r3, #15
 8006404:	2b06      	cmp	r3, #6
 8006406:	d110      	bne.n	800642a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800640e:	2208      	movs	r2, #8
 8006410:	4619      	mov	r1, r3
 8006412:	6a38      	ldr	r0, [r7, #32]
 8006414:	f007 f84e 	bl	800d4b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	695a      	ldr	r2, [r3, #20]
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	091b      	lsrs	r3, r3, #4
 8006420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006424:	441a      	add	r2, r3
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699a      	ldr	r2, [r3, #24]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0210 	orr.w	r2, r2, #16
 8006438:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4618      	mov	r0, r3
 8006440:	f007 f9cc 	bl	800d7dc <USB_ReadInterrupts>
 8006444:	4603      	mov	r3, r0
 8006446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800644a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800644e:	f040 80a7 	bne.w	80065a0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f007 f9d1 	bl	800d802 <USB_ReadDevAllOutEpInterrupt>
 8006460:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006462:	e099      	b.n	8006598 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 808e 	beq.w	800658c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	4611      	mov	r1, r2
 800647a:	4618      	mov	r0, r3
 800647c:	f007 f9f5 	bl	800d86a <USB_ReadDevOutEPInterrupt>
 8006480:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00c      	beq.n	80064a6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	461a      	mov	r2, r3
 800649a:	2301      	movs	r3, #1
 800649c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800649e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fe6d 	bl	8007180 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00c      	beq.n	80064ca <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064bc:	461a      	mov	r2, r3
 80064be:	2308      	movs	r3, #8
 80064c0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80064c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 ff43 	bl	8007350 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e0:	461a      	mov	r2, r3
 80064e2:	2310      	movs	r3, #16
 80064e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d030      	beq.n	8006552 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f8:	2b80      	cmp	r3, #128	; 0x80
 80064fa:	d109      	bne.n	8006510 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	69fa      	ldr	r2, [r7, #28]
 8006506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800650a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800650e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006512:	4613      	mov	r3, r2
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	4413      	add	r3, r2
 8006522:	3304      	adds	r3, #4
 8006524:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	78db      	ldrb	r3, [r3, #3]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d108      	bne.n	8006540 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2200      	movs	r2, #0
 8006532:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	b2db      	uxtb	r3, r3
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f009 fff0 	bl	8010520 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654c:	461a      	mov	r2, r3
 800654e:	2302      	movs	r3, #2
 8006550:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b00      	cmp	r3, #0
 800655a:	d008      	beq.n	800656e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006568:	461a      	mov	r2, r3
 800656a:	2320      	movs	r3, #32
 800656c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d009      	beq.n	800658c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006584:	461a      	mov	r2, r3
 8006586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800658a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	3301      	adds	r3, #1
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	085b      	lsrs	r3, r3, #1
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	2b00      	cmp	r3, #0
 800659c:	f47f af62 	bne.w	8006464 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f007 f919 	bl	800d7dc <USB_ReadInterrupts>
 80065aa:	4603      	mov	r3, r0
 80065ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065b4:	f040 80db 	bne.w	800676e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f007 f93a 	bl	800d836 <USB_ReadDevAllInEpInterrupt>
 80065c2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80065c8:	e0cd      	b.n	8006766 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 80c2 	beq.w	800675a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065dc:	b2d2      	uxtb	r2, r2
 80065de:	4611      	mov	r1, r2
 80065e0:	4618      	mov	r0, r3
 80065e2:	f007 f960 	bl	800d8a6 <USB_ReadDevInEPInterrupt>
 80065e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d057      	beq.n	80066a2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	2201      	movs	r2, #1
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	43db      	mvns	r3, r3
 800660c:	69f9      	ldr	r1, [r7, #28]
 800660e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006612:	4013      	ands	r3, r2
 8006614:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006622:	461a      	mov	r2, r3
 8006624:	2301      	movs	r3, #1
 8006626:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	799b      	ldrb	r3, [r3, #6]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d132      	bne.n	8006696 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006634:	4613      	mov	r3, r2
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	3320      	adds	r3, #32
 8006640:	6819      	ldr	r1, [r3, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006646:	4613      	mov	r3, r2
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	4413      	add	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4403      	add	r3, r0
 8006650:	331c      	adds	r3, #28
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4419      	add	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665a:	4613      	mov	r3, r2
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4403      	add	r3, r0
 8006664:	3320      	adds	r3, #32
 8006666:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	2b00      	cmp	r3, #0
 800666c:	d113      	bne.n	8006696 <HAL_PCD_IRQHandler+0x3a2>
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006672:	4613      	mov	r3, r2
 8006674:	00db      	lsls	r3, r3, #3
 8006676:	4413      	add	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	440b      	add	r3, r1
 800667c:	3324      	adds	r3, #36	; 0x24
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d108      	bne.n	8006696 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6818      	ldr	r0, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800668e:	461a      	mov	r2, r3
 8006690:	2101      	movs	r1, #1
 8006692:	f007 f969 	bl	800d968 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	b2db      	uxtb	r3, r3
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f009 feba 	bl	8010416 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d008      	beq.n	80066be <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b8:	461a      	mov	r2, r3
 80066ba:	2308      	movs	r3, #8
 80066bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d4:	461a      	mov	r2, r3
 80066d6:	2310      	movs	r3, #16
 80066d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d008      	beq.n	80066f6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f0:	461a      	mov	r2, r3
 80066f2:	2340      	movs	r3, #64	; 0x40
 80066f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d023      	beq.n	8006748 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006702:	6a38      	ldr	r0, [r7, #32]
 8006704:	f006 fa28 	bl	800cb58 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670a:	4613      	mov	r3, r2
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	4413      	add	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	3310      	adds	r3, #16
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	4413      	add	r3, r2
 8006718:	3304      	adds	r3, #4
 800671a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	78db      	ldrb	r3, [r3, #3]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d108      	bne.n	8006736 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2200      	movs	r2, #0
 8006728:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	b2db      	uxtb	r3, r3
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f009 ff07 	bl	8010544 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006742:	461a      	mov	r2, r3
 8006744:	2302      	movs	r3, #2
 8006746:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fc86 	bl	8007066 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	3301      	adds	r3, #1
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	085b      	lsrs	r3, r3, #1
 8006764:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	2b00      	cmp	r3, #0
 800676a:	f47f af2e 	bne.w	80065ca <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4618      	mov	r0, r3
 8006774:	f007 f832 	bl	800d7dc <USB_ReadInterrupts>
 8006778:	4603      	mov	r3, r0
 800677a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800677e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006782:	d122      	bne.n	80067ca <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	69fa      	ldr	r2, [r7, #28]
 800678e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006792:	f023 0301 	bic.w	r3, r3, #1
 8006796:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d108      	bne.n	80067b4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80067aa:	2100      	movs	r1, #0
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fe91 	bl	80074d4 <HAL_PCDEx_LPM_Callback>
 80067b2:	e002      	b.n	80067ba <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f009 fea5 	bl	8010504 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695a      	ldr	r2, [r3, #20]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80067c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f007 f804 	bl	800d7dc <USB_ReadInterrupts>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067de:	d112      	bne.n	8006806 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d102      	bne.n	80067f6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f009 fe61 	bl	80104b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	695a      	ldr	r2, [r3, #20]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006804:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f006 ffe6 	bl	800d7dc <USB_ReadInterrupts>
 8006810:	4603      	mov	r3, r0
 8006812:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006816:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800681a:	d121      	bne.n	8006860 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695a      	ldr	r2, [r3, #20]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800682a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8006832:	2b00      	cmp	r3, #0
 8006834:	d111      	bne.n	800685a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006844:	089b      	lsrs	r3, r3, #2
 8006846:	f003 020f 	and.w	r2, r3, #15
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006850:	2101      	movs	r1, #1
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fe3e 	bl	80074d4 <HAL_PCDEx_LPM_Callback>
 8006858:	e002      	b.n	8006860 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f009 fe2c 	bl	80104b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4618      	mov	r0, r3
 8006866:	f006 ffb9 	bl	800d7dc <USB_ReadInterrupts>
 800686a:	4603      	mov	r3, r0
 800686c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006874:	f040 80b7 	bne.w	80069e6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	69fa      	ldr	r2, [r7, #28]
 8006882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006886:	f023 0301 	bic.w	r3, r3, #1
 800688a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2110      	movs	r1, #16
 8006892:	4618      	mov	r0, r3
 8006894:	f006 f960 	bl	800cb58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006898:	2300      	movs	r3, #0
 800689a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800689c:	e046      	b.n	800692c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068aa:	461a      	mov	r2, r3
 80068ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068c2:	0151      	lsls	r1, r2, #5
 80068c4:	69fa      	ldr	r2, [r7, #28]
 80068c6:	440a      	add	r2, r1
 80068c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068de:	461a      	mov	r2, r3
 80068e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006900:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006904:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006916:	0151      	lsls	r1, r2, #5
 8006918:	69fa      	ldr	r2, [r7, #28]
 800691a:	440a      	add	r2, r1
 800691c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006920:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006924:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	3301      	adds	r3, #1
 800692a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	791b      	ldrb	r3, [r3, #4]
 8006930:	461a      	mov	r2, r3
 8006932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006934:	4293      	cmp	r3, r2
 8006936:	d3b2      	bcc.n	800689e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	69fa      	ldr	r2, [r7, #28]
 8006942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006946:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800694a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	7bdb      	ldrb	r3, [r3, #15]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d016      	beq.n	8006982 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800695e:	69fa      	ldr	r2, [r7, #28]
 8006960:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006964:	f043 030b 	orr.w	r3, r3, #11
 8006968:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800697a:	f043 030b 	orr.w	r3, r3, #11
 800697e:	6453      	str	r3, [r2, #68]	; 0x44
 8006980:	e015      	b.n	80069ae <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006988:	695a      	ldr	r2, [r3, #20]
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006990:	4619      	mov	r1, r3
 8006992:	f242 032b 	movw	r3, #8235	; 0x202b
 8006996:	4313      	orrs	r3, r2
 8006998:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069a8:	f043 030b 	orr.w	r3, r3, #11
 80069ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80069c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80069d0:	461a      	mov	r2, r3
 80069d2:	f006 ffc9 	bl	800d968 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	695a      	ldr	r2, [r3, #20]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80069e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f006 fef6 	bl	800d7dc <USB_ReadInterrupts>
 80069f0:	4603      	mov	r3, r0
 80069f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069fa:	d123      	bne.n	8006a44 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f006 ff8d 	bl	800d920 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f006 f91d 	bl	800cc4a <USB_GetDevSpeed>
 8006a10:	4603      	mov	r3, r0
 8006a12:	461a      	mov	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681c      	ldr	r4, [r3, #0]
 8006a1c:	f001 fcba 	bl	8008394 <HAL_RCC_GetHCLKFreq>
 8006a20:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006a26:	461a      	mov	r2, r3
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f005 fe27 	bl	800c67c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f009 fd19 	bl	8010466 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695a      	ldr	r2, [r3, #20]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f006 fec7 	bl	800d7dc <USB_ReadInterrupts>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d10a      	bne.n	8006a6e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f009 fcf6 	bl	801044a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695a      	ldr	r2, [r3, #20]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f002 0208 	and.w	r2, r2, #8
 8006a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f006 feb2 	bl	800d7dc <USB_ReadInterrupts>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7e:	2b80      	cmp	r3, #128	; 0x80
 8006a80:	d123      	bne.n	8006aca <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a8e:	2301      	movs	r3, #1
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
 8006a92:	e014      	b.n	8006abe <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a98:	4613      	mov	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	4413      	add	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	f203 2357 	addw	r3, r3, #599	; 0x257
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d105      	bne.n	8006ab8 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 faa6 	bl	8007004 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	3301      	adds	r3, #1
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	791b      	ldrb	r3, [r3, #4]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d3e4      	bcc.n	8006a94 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f006 fe84 	bl	800d7dc <USB_ReadInterrupts>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ade:	d13c      	bne.n	8006b5a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae4:	e02b      	b.n	8006b3e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afa:	4613      	mov	r3, r2
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	4413      	add	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	440b      	add	r3, r1
 8006b04:	3318      	adds	r3, #24
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d115      	bne.n	8006b38 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006b0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	da12      	bge.n	8006b38 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b16:	4613      	mov	r3, r2
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	3317      	adds	r3, #23
 8006b22:	2201      	movs	r2, #1
 8006b24:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fa66 	bl	8007004 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	791b      	ldrb	r3, [r3, #4]
 8006b42:	461a      	mov	r2, r3
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d3cd      	bcc.n	8006ae6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	695a      	ldr	r2, [r3, #20]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f006 fe3c 	bl	800d7dc <USB_ReadInterrupts>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b6e:	d156      	bne.n	8006c1e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b70:	2301      	movs	r3, #1
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
 8006b74:	e045      	b.n	8006c02 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	440b      	add	r3, r1
 8006b94:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d12e      	bne.n	8006bfc <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006b9e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	da2b      	bge.n	8006bfc <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8006bb0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d121      	bne.n	8006bfc <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	440b      	add	r3, r1
 8006bc6:	f203 2357 	addw	r3, r3, #599	; 0x257
 8006bca:	2201      	movs	r2, #1
 8006bcc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10a      	bne.n	8006bfc <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bf8:	6053      	str	r3, [r2, #4]
            break;
 8006bfa:	e008      	b.n	8006c0e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	3301      	adds	r3, #1
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	791b      	ldrb	r3, [r3, #4]
 8006c06:	461a      	mov	r2, r3
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d3b3      	bcc.n	8006b76 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695a      	ldr	r2, [r3, #20]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f006 fdda 	bl	800d7dc <USB_ReadInterrupts>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c32:	d10a      	bne.n	8006c4a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f009 fc97 	bl	8010568 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	695a      	ldr	r2, [r3, #20]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f006 fdc4 	bl	800d7dc <USB_ReadInterrupts>
 8006c54:	4603      	mov	r3, r0
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d115      	bne.n	8006c8a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f009 fc87 	bl	8010584 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6859      	ldr	r1, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]
 8006c86:	e000      	b.n	8006c8a <HAL_PCD_IRQHandler+0x996>
      return;
 8006c88:	bf00      	nop
    }
  }
}
 8006c8a:	3734      	adds	r7, #52	; 0x34
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd90      	pop	{r4, r7, pc}

08006c90 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d101      	bne.n	8006caa <HAL_PCD_SetAddress+0x1a>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	e012      	b.n	8006cd0 <HAL_PCD_SetAddress+0x40>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	78fa      	ldrb	r2, [r7, #3]
 8006cb6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	78fa      	ldrb	r2, [r7, #3]
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f006 fd23 	bl	800d70c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	70fb      	strb	r3, [r7, #3]
 8006cea:	460b      	mov	r3, r1
 8006cec:	803b      	strh	r3, [r7, #0]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006cf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	da0f      	bge.n	8006d1e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	f003 020f 	and.w	r2, r3, #15
 8006d04:	4613      	mov	r3, r2
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	4413      	add	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	3310      	adds	r3, #16
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	4413      	add	r3, r2
 8006d12:	3304      	adds	r3, #4
 8006d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	705a      	strb	r2, [r3, #1]
 8006d1c:	e00f      	b.n	8006d3e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	f003 020f 	and.w	r2, r3, #15
 8006d24:	4613      	mov	r3, r2
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	4413      	add	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	4413      	add	r3, r2
 8006d34:	3304      	adds	r3, #4
 8006d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006d3e:	78fb      	ldrb	r3, [r7, #3]
 8006d40:	f003 030f 	and.w	r3, r3, #15
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006d4a:	883a      	ldrh	r2, [r7, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	78ba      	ldrb	r2, [r7, #2]
 8006d54:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	785b      	ldrb	r3, [r3, #1]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d004      	beq.n	8006d68 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006d68:	78bb      	ldrb	r3, [r7, #2]
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d102      	bne.n	8006d74 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d101      	bne.n	8006d82 <HAL_PCD_EP_Open+0xaa>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	e00e      	b.n	8006da0 <HAL_PCD_EP_Open+0xc8>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68f9      	ldr	r1, [r7, #12]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f005 ff7f 	bl	800cc94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8006d9e:	7afb      	ldrb	r3, [r7, #11]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	607a      	str	r2, [r7, #4]
 8006db2:	603b      	str	r3, [r7, #0]
 8006db4:	460b      	mov	r3, r1
 8006db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006db8:	7afb      	ldrb	r3, [r7, #11]
 8006dba:	f003 020f 	and.w	r2, r3, #15
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	4413      	add	r3, r2
 8006dce:	3304      	adds	r3, #4
 8006dd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2200      	movs	r2, #0
 8006de2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2200      	movs	r2, #0
 8006de8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006dea:	7afb      	ldrb	r3, [r7, #11]
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	799b      	ldrb	r3, [r3, #6]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d102      	bne.n	8006e04 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	799b      	ldrb	r3, [r3, #6]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6979      	ldr	r1, [r7, #20]
 8006e10:	f005 ffc8 	bl	800cda4 <USB_EPStartXfer>

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b086      	sub	sp, #24
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	f003 020f 	and.w	r2, r3, #15
 8006e34:	4613      	mov	r3, r2
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	3310      	adds	r3, #16
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	4413      	add	r3, r2
 8006e42:	3304      	adds	r3, #4
 8006e44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2200      	movs	r2, #0
 8006e56:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e5e:	7afb      	ldrb	r3, [r7, #11]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	799b      	ldrb	r3, [r3, #6]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d102      	bne.n	8006e78 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	799b      	ldrb	r3, [r3, #6]
 8006e80:	461a      	mov	r2, r3
 8006e82:	6979      	ldr	r1, [r7, #20]
 8006e84:	f005 ff8e 	bl	800cda4 <USB_EPStartXfer>

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006e9e:	78fb      	ldrb	r3, [r7, #3]
 8006ea0:	f003 030f 	and.w	r3, r3, #15
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	7912      	ldrb	r2, [r2, #4]
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d901      	bls.n	8006eb0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e04f      	b.n	8006f50 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	da0f      	bge.n	8006ed8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006eb8:	78fb      	ldrb	r3, [r7, #3]
 8006eba:	f003 020f 	and.w	r2, r3, #15
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	3310      	adds	r3, #16
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	4413      	add	r3, r2
 8006ecc:	3304      	adds	r3, #4
 8006ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	705a      	strb	r2, [r3, #1]
 8006ed6:	e00d      	b.n	8006ef4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006ed8:	78fa      	ldrb	r2, [r7, #3]
 8006eda:	4613      	mov	r3, r2
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	4413      	add	r3, r2
 8006eea:	3304      	adds	r3, #4
 8006eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006efa:	78fb      	ldrb	r3, [r7, #3]
 8006efc:	f003 030f 	and.w	r3, r3, #15
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d101      	bne.n	8006f14 <HAL_PCD_EP_SetStall+0x82>
 8006f10:	2302      	movs	r3, #2
 8006f12:	e01d      	b.n	8006f50 <HAL_PCD_EP_SetStall+0xbe>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68f9      	ldr	r1, [r7, #12]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f006 fb1e 	bl	800d564 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d109      	bne.n	8006f46 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	7999      	ldrb	r1, [r3, #6]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006f40:	461a      	mov	r2, r3
 8006f42:	f006 fd11 	bl	800d968 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006f64:	78fb      	ldrb	r3, [r7, #3]
 8006f66:	f003 030f 	and.w	r3, r3, #15
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	7912      	ldrb	r2, [r2, #4]
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d901      	bls.n	8006f76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e042      	b.n	8006ffc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	da0f      	bge.n	8006f9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f7e:	78fb      	ldrb	r3, [r7, #3]
 8006f80:	f003 020f 	and.w	r2, r3, #15
 8006f84:	4613      	mov	r3, r2
 8006f86:	00db      	lsls	r3, r3, #3
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	3310      	adds	r3, #16
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	4413      	add	r3, r2
 8006f92:	3304      	adds	r3, #4
 8006f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	705a      	strb	r2, [r3, #1]
 8006f9c:	e00f      	b.n	8006fbe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f9e:	78fb      	ldrb	r3, [r7, #3]
 8006fa0:	f003 020f 	and.w	r2, r3, #15
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	4413      	add	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fc4:	78fb      	ldrb	r3, [r7, #3]
 8006fc6:	f003 030f 	and.w	r3, r3, #15
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d101      	bne.n	8006fde <HAL_PCD_EP_ClrStall+0x86>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	e00e      	b.n	8006ffc <HAL_PCD_EP_ClrStall+0xa4>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68f9      	ldr	r1, [r7, #12]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f006 fb27 	bl	800d640 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007014:	2b00      	cmp	r3, #0
 8007016:	da0c      	bge.n	8007032 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	f003 020f 	and.w	r2, r3, #15
 800701e:	4613      	mov	r3, r2
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	3310      	adds	r3, #16
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	4413      	add	r3, r2
 800702c:	3304      	adds	r3, #4
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e00c      	b.n	800704c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	f003 020f 	and.w	r2, r3, #15
 8007038:	4613      	mov	r3, r2
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4413      	add	r3, r2
 8007048:	3304      	adds	r3, #4
 800704a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68f9      	ldr	r1, [r7, #12]
 8007052:	4618      	mov	r0, r3
 8007054:	f006 f946 	bl	800d2e4 <USB_EPStopXfer>
 8007058:	4603      	mov	r3, r0
 800705a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800705c:	7afb      	ldrb	r3, [r7, #11]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b08a      	sub	sp, #40	; 0x28
 800706a:	af02      	add	r7, sp, #8
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	4613      	mov	r3, r2
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	4413      	add	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	3310      	adds	r3, #16
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	4413      	add	r3, r2
 800708a:	3304      	adds	r3, #4
 800708c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	695a      	ldr	r2, [r3, #20]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	429a      	cmp	r2, r3
 8007098:	d901      	bls.n	800709e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e06b      	b.n	8007176 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	691a      	ldr	r2, [r3, #16]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	69fa      	ldr	r2, [r7, #28]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d902      	bls.n	80070ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	3303      	adds	r3, #3
 80070be:	089b      	lsrs	r3, r3, #2
 80070c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80070c2:	e02a      	b.n	800711a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	691a      	ldr	r2, [r3, #16]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d902      	bls.n	80070e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	3303      	adds	r3, #3
 80070e4:	089b      	lsrs	r3, r3, #2
 80070e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	68d9      	ldr	r1, [r3, #12]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	4603      	mov	r3, r0
 80070fc:	6978      	ldr	r0, [r7, #20]
 80070fe:	f006 f99b 	bl	800d438 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	441a      	add	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	695a      	ldr	r2, [r3, #20]
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	441a      	add	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	429a      	cmp	r2, r3
 800712e:	d809      	bhi.n	8007144 <PCD_WriteEmptyTxFifo+0xde>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	695a      	ldr	r2, [r3, #20]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007138:	429a      	cmp	r2, r3
 800713a:	d203      	bcs.n	8007144 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1bf      	bne.n	80070c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	429a      	cmp	r2, r3
 800714e:	d811      	bhi.n	8007174 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	2201      	movs	r2, #1
 8007158:	fa02 f303 	lsl.w	r3, r2, r3
 800715c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	43db      	mvns	r3, r3
 800716a:	6939      	ldr	r1, [r7, #16]
 800716c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007170:	4013      	ands	r3, r2
 8007172:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3720      	adds	r7, #32
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	333c      	adds	r3, #60	; 0x3c
 8007198:	3304      	adds	r3, #4
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	799b      	ldrb	r3, [r3, #6]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d17b      	bne.n	80072ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d015      	beq.n	80071ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	4a61      	ldr	r2, [pc, #388]	; (8007348 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	f240 80b9 	bls.w	800733c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80b3 	beq.w	800733c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e2:	461a      	mov	r2, r3
 80071e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071e8:	6093      	str	r3, [r2, #8]
 80071ea:	e0a7      	b.n	800733c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d009      	beq.n	800720a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007202:	461a      	mov	r2, r3
 8007204:	2320      	movs	r3, #32
 8007206:	6093      	str	r3, [r2, #8]
 8007208:	e098      	b.n	800733c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007210:	2b00      	cmp	r3, #0
 8007212:	f040 8093 	bne.w	800733c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	4a4b      	ldr	r2, [pc, #300]	; (8007348 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d90f      	bls.n	800723e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00a      	beq.n	800723e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007234:	461a      	mov	r2, r3
 8007236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800723a:	6093      	str	r3, [r2, #8]
 800723c:	e07e      	b.n	800733c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	4613      	mov	r3, r2
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	4413      	add	r3, r2
 8007250:	3304      	adds	r3, #4
 8007252:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a1a      	ldr	r2, [r3, #32]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	0159      	lsls	r1, r3, #5
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	440b      	add	r3, r1
 8007260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800726a:	1ad2      	subs	r2, r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d114      	bne.n	80072a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d109      	bne.n	8007292 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6818      	ldr	r0, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007288:	461a      	mov	r2, r3
 800728a:	2101      	movs	r1, #1
 800728c:	f006 fb6c 	bl	800d968 <USB_EP0_OutStart>
 8007290:	e006      	b.n	80072a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	441a      	add	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f009 f89a 	bl	80103e0 <HAL_PCD_DataOutStageCallback>
 80072ac:	e046      	b.n	800733c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	4a26      	ldr	r2, [pc, #152]	; (800734c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d124      	bne.n	8007300 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072cc:	461a      	mov	r2, r3
 80072ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072d2:	6093      	str	r3, [r2, #8]
 80072d4:	e032      	b.n	800733c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f003 0320 	and.w	r3, r3, #32
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d008      	beq.n	80072f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ec:	461a      	mov	r2, r3
 80072ee:	2320      	movs	r3, #32
 80072f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f009 f871 	bl	80103e0 <HAL_PCD_DataOutStageCallback>
 80072fe:	e01d      	b.n	800733c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d114      	bne.n	8007330 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	4613      	mov	r3, r2
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	440b      	add	r3, r1
 8007314:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d108      	bne.n	8007330 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007328:	461a      	mov	r2, r3
 800732a:	2100      	movs	r1, #0
 800732c:	f006 fb1c 	bl	800d968 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f009 f852 	bl	80103e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3720      	adds	r7, #32
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	4f54300a 	.word	0x4f54300a
 800734c:	4f54310a 	.word	0x4f54310a

08007350 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	333c      	adds	r3, #60	; 0x3c
 8007368:	3304      	adds	r3, #4
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4a15      	ldr	r2, [pc, #84]	; (80073d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d90e      	bls.n	80073a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800738c:	2b00      	cmp	r3, #0
 800738e:	d009      	beq.n	80073a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739c:	461a      	mov	r2, r3
 800739e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f009 f809 	bl	80103bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4a0a      	ldr	r2, [pc, #40]	; (80073d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d90c      	bls.n	80073cc <PCD_EP_OutSetupPacket_int+0x7c>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	799b      	ldrb	r3, [r3, #6]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d108      	bne.n	80073cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80073c4:	461a      	mov	r2, r3
 80073c6:	2101      	movs	r1, #1
 80073c8:	f006 face 	bl	800d968 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	4f54300a 	.word	0x4f54300a

080073dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
 80073e8:	4613      	mov	r3, r2
 80073ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80073f4:	78fb      	ldrb	r3, [r7, #3]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d107      	bne.n	800740a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80073fa:	883b      	ldrh	r3, [r7, #0]
 80073fc:	0419      	lsls	r1, r3, #16
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	430a      	orrs	r2, r1
 8007406:	629a      	str	r2, [r3, #40]	; 0x28
 8007408:	e028      	b.n	800745c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007410:	0c1b      	lsrs	r3, r3, #16
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	4413      	add	r3, r2
 8007416:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007418:	2300      	movs	r3, #0
 800741a:	73fb      	strb	r3, [r7, #15]
 800741c:	e00d      	b.n	800743a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	3340      	adds	r3, #64	; 0x40
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	0c1b      	lsrs	r3, r3, #16
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	4413      	add	r3, r2
 8007432:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	3301      	adds	r3, #1
 8007438:	73fb      	strb	r3, [r7, #15]
 800743a:	7bfa      	ldrb	r2, [r7, #15]
 800743c:	78fb      	ldrb	r3, [r7, #3]
 800743e:	3b01      	subs	r3, #1
 8007440:	429a      	cmp	r2, r3
 8007442:	d3ec      	bcc.n	800741e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007444:	883b      	ldrh	r3, [r7, #0]
 8007446:	0418      	lsls	r0, r3, #16
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6819      	ldr	r1, [r3, #0]
 800744c:	78fb      	ldrb	r3, [r7, #3]
 800744e:	3b01      	subs	r3, #1
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	4302      	orrs	r2, r0
 8007454:	3340      	adds	r3, #64	; 0x40
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	440b      	add	r3, r1
 800745a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	460b      	mov	r3, r1
 8007474:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	887a      	ldrh	r2, [r7, #2]
 800747c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074ba:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	10000003 	.word	0x10000003

080074d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80074f4:	4b19      	ldr	r3, [pc, #100]	; (800755c <HAL_PWREx_ConfigSupply+0x70>)
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d00a      	beq.n	8007516 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007500:	4b16      	ldr	r3, [pc, #88]	; (800755c <HAL_PWREx_ConfigSupply+0x70>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f003 0307 	and.w	r3, r3, #7
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	429a      	cmp	r2, r3
 800750c:	d001      	beq.n	8007512 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e01f      	b.n	8007552 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	e01d      	b.n	8007552 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007516:	4b11      	ldr	r3, [pc, #68]	; (800755c <HAL_PWREx_ConfigSupply+0x70>)
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	f023 0207 	bic.w	r2, r3, #7
 800751e:	490f      	ldr	r1, [pc, #60]	; (800755c <HAL_PWREx_ConfigSupply+0x70>)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4313      	orrs	r3, r2
 8007524:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007526:	f7fb fae1 	bl	8002aec <HAL_GetTick>
 800752a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800752c:	e009      	b.n	8007542 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800752e:	f7fb fadd 	bl	8002aec <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800753c:	d901      	bls.n	8007542 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e007      	b.n	8007552 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007542:	4b06      	ldr	r3, [pc, #24]	; (800755c <HAL_PWREx_ConfigSupply+0x70>)
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800754a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800754e:	d1ee      	bne.n	800752e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	58024800 	.word	0x58024800

08007560 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007564:	4b05      	ldr	r3, [pc, #20]	; (800757c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	4a04      	ldr	r2, [pc, #16]	; (800757c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800756a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800756e:	60d3      	str	r3, [r2, #12]
}
 8007570:	bf00      	nop
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	58024800 	.word	0x58024800

08007580 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b08c      	sub	sp, #48	; 0x30
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e3c8      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 8087 	beq.w	80076ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075a0:	4b88      	ldr	r3, [pc, #544]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80075aa:	4b86      	ldr	r3, [pc, #536]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 80075ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80075b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b2:	2b10      	cmp	r3, #16
 80075b4:	d007      	beq.n	80075c6 <HAL_RCC_OscConfig+0x46>
 80075b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b8:	2b18      	cmp	r3, #24
 80075ba:	d110      	bne.n	80075de <HAL_RCC_OscConfig+0x5e>
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	f003 0303 	and.w	r3, r3, #3
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d10b      	bne.n	80075de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075c6:	4b7f      	ldr	r3, [pc, #508]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d06c      	beq.n	80076ac <HAL_RCC_OscConfig+0x12c>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d168      	bne.n	80076ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e3a2      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e6:	d106      	bne.n	80075f6 <HAL_RCC_OscConfig+0x76>
 80075e8:	4b76      	ldr	r3, [pc, #472]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a75      	ldr	r2, [pc, #468]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 80075ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f2:	6013      	str	r3, [r2, #0]
 80075f4:	e02e      	b.n	8007654 <HAL_RCC_OscConfig+0xd4>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10c      	bne.n	8007618 <HAL_RCC_OscConfig+0x98>
 80075fe:	4b71      	ldr	r3, [pc, #452]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a70      	ldr	r2, [pc, #448]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	4b6e      	ldr	r3, [pc, #440]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a6d      	ldr	r2, [pc, #436]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	e01d      	b.n	8007654 <HAL_RCC_OscConfig+0xd4>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007620:	d10c      	bne.n	800763c <HAL_RCC_OscConfig+0xbc>
 8007622:	4b68      	ldr	r3, [pc, #416]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a67      	ldr	r2, [pc, #412]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	4b65      	ldr	r3, [pc, #404]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a64      	ldr	r2, [pc, #400]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	e00b      	b.n	8007654 <HAL_RCC_OscConfig+0xd4>
 800763c:	4b61      	ldr	r3, [pc, #388]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a60      	ldr	r2, [pc, #384]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	4b5e      	ldr	r3, [pc, #376]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a5d      	ldr	r2, [pc, #372]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 800764e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d013      	beq.n	8007684 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800765c:	f7fb fa46 	bl	8002aec <HAL_GetTick>
 8007660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007662:	e008      	b.n	8007676 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007664:	f7fb fa42 	bl	8002aec <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	2b64      	cmp	r3, #100	; 0x64
 8007670:	d901      	bls.n	8007676 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e356      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007676:	4b53      	ldr	r3, [pc, #332]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0f0      	beq.n	8007664 <HAL_RCC_OscConfig+0xe4>
 8007682:	e014      	b.n	80076ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007684:	f7fb fa32 	bl	8002aec <HAL_GetTick>
 8007688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800768a:	e008      	b.n	800769e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800768c:	f7fb fa2e 	bl	8002aec <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b64      	cmp	r3, #100	; 0x64
 8007698:	d901      	bls.n	800769e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e342      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800769e:	4b49      	ldr	r3, [pc, #292]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1f0      	bne.n	800768c <HAL_RCC_OscConfig+0x10c>
 80076aa:	e000      	b.n	80076ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 808c 	beq.w	80077d4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076bc:	4b41      	ldr	r3, [pc, #260]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076c6:	4b3f      	ldr	r3, [pc, #252]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 80076c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d007      	beq.n	80076e2 <HAL_RCC_OscConfig+0x162>
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	2b18      	cmp	r3, #24
 80076d6:	d137      	bne.n	8007748 <HAL_RCC_OscConfig+0x1c8>
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d132      	bne.n	8007748 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076e2:	4b38      	ldr	r3, [pc, #224]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0304 	and.w	r3, r3, #4
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d005      	beq.n	80076fa <HAL_RCC_OscConfig+0x17a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e314      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80076fa:	4b32      	ldr	r3, [pc, #200]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f023 0219 	bic.w	r2, r3, #25
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	492f      	ldr	r1, [pc, #188]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007708:	4313      	orrs	r3, r2
 800770a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800770c:	f7fb f9ee 	bl	8002aec <HAL_GetTick>
 8007710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007714:	f7fb f9ea 	bl	8002aec <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e2fe      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007726:	4b27      	ldr	r3, [pc, #156]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0304 	and.w	r3, r3, #4
 800772e:	2b00      	cmp	r3, #0
 8007730:	d0f0      	beq.n	8007714 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007732:	4b24      	ldr	r3, [pc, #144]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	061b      	lsls	r3, r3, #24
 8007740:	4920      	ldr	r1, [pc, #128]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007742:	4313      	orrs	r3, r2
 8007744:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007746:	e045      	b.n	80077d4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d026      	beq.n	800779e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007750:	4b1c      	ldr	r3, [pc, #112]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f023 0219 	bic.w	r2, r3, #25
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	4919      	ldr	r1, [pc, #100]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 800775e:	4313      	orrs	r3, r2
 8007760:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007762:	f7fb f9c3 	bl	8002aec <HAL_GetTick>
 8007766:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007768:	e008      	b.n	800777c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800776a:	f7fb f9bf 	bl	8002aec <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	2b02      	cmp	r3, #2
 8007776:	d901      	bls.n	800777c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e2d3      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800777c:	4b11      	ldr	r3, [pc, #68]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	2b00      	cmp	r3, #0
 8007786:	d0f0      	beq.n	800776a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007788:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	061b      	lsls	r3, r3, #24
 8007796:	490b      	ldr	r1, [pc, #44]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007798:	4313      	orrs	r3, r2
 800779a:	604b      	str	r3, [r1, #4]
 800779c:	e01a      	b.n	80077d4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800779e:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a08      	ldr	r2, [pc, #32]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 80077a4:	f023 0301 	bic.w	r3, r3, #1
 80077a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077aa:	f7fb f99f 	bl	8002aec <HAL_GetTick>
 80077ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077b0:	e00a      	b.n	80077c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077b2:	f7fb f99b 	bl	8002aec <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d903      	bls.n	80077c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e2af      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
 80077c4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077c8:	4b96      	ldr	r3, [pc, #600]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0304 	and.w	r3, r3, #4
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1ee      	bne.n	80077b2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0310 	and.w	r3, r3, #16
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d06a      	beq.n	80078b6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077e0:	4b90      	ldr	r3, [pc, #576]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077e8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077ea:	4b8e      	ldr	r3, [pc, #568]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 80077ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ee:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b08      	cmp	r3, #8
 80077f4:	d007      	beq.n	8007806 <HAL_RCC_OscConfig+0x286>
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	2b18      	cmp	r3, #24
 80077fa:	d11b      	bne.n	8007834 <HAL_RCC_OscConfig+0x2b4>
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	2b01      	cmp	r3, #1
 8007804:	d116      	bne.n	8007834 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007806:	4b87      	ldr	r3, [pc, #540]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780e:	2b00      	cmp	r3, #0
 8007810:	d005      	beq.n	800781e <HAL_RCC_OscConfig+0x29e>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	2b80      	cmp	r3, #128	; 0x80
 8007818:	d001      	beq.n	800781e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e282      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800781e:	4b81      	ldr	r3, [pc, #516]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	061b      	lsls	r3, r3, #24
 800782c:	497d      	ldr	r1, [pc, #500]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 800782e:	4313      	orrs	r3, r2
 8007830:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007832:	e040      	b.n	80078b6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	69db      	ldr	r3, [r3, #28]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d023      	beq.n	8007884 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800783c:	4b79      	ldr	r3, [pc, #484]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a78      	ldr	r2, [pc, #480]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 8007842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007848:	f7fb f950 	bl	8002aec <HAL_GetTick>
 800784c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800784e:	e008      	b.n	8007862 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007850:	f7fb f94c 	bl	8002aec <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b02      	cmp	r3, #2
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e260      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007862:	4b70      	ldr	r3, [pc, #448]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0f0      	beq.n	8007850 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800786e:	4b6d      	ldr	r3, [pc, #436]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	061b      	lsls	r3, r3, #24
 800787c:	4969      	ldr	r1, [pc, #420]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 800787e:	4313      	orrs	r3, r2
 8007880:	60cb      	str	r3, [r1, #12]
 8007882:	e018      	b.n	80078b6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007884:	4b67      	ldr	r3, [pc, #412]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a66      	ldr	r2, [pc, #408]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 800788a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800788e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007890:	f7fb f92c 	bl	8002aec <HAL_GetTick>
 8007894:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007896:	e008      	b.n	80078aa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007898:	f7fb f928 	bl	8002aec <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e23c      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80078aa:	4b5e      	ldr	r3, [pc, #376]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1f0      	bne.n	8007898 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0308 	and.w	r3, r3, #8
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d036      	beq.n	8007930 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d019      	beq.n	80078fe <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078ca:	4b56      	ldr	r3, [pc, #344]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 80078cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ce:	4a55      	ldr	r2, [pc, #340]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 80078d0:	f043 0301 	orr.w	r3, r3, #1
 80078d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d6:	f7fb f909 	bl	8002aec <HAL_GetTick>
 80078da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078dc:	e008      	b.n	80078f0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078de:	f7fb f905 	bl	8002aec <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d901      	bls.n	80078f0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e219      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078f0:	4b4c      	ldr	r3, [pc, #304]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 80078f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0f0      	beq.n	80078de <HAL_RCC_OscConfig+0x35e>
 80078fc:	e018      	b.n	8007930 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078fe:	4b49      	ldr	r3, [pc, #292]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 8007900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007902:	4a48      	ldr	r2, [pc, #288]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 8007904:	f023 0301 	bic.w	r3, r3, #1
 8007908:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800790a:	f7fb f8ef 	bl	8002aec <HAL_GetTick>
 800790e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007910:	e008      	b.n	8007924 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007912:	f7fb f8eb 	bl	8002aec <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	2b02      	cmp	r3, #2
 800791e:	d901      	bls.n	8007924 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e1ff      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007924:	4b3f      	ldr	r3, [pc, #252]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 8007926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1f0      	bne.n	8007912 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0320 	and.w	r3, r3, #32
 8007938:	2b00      	cmp	r3, #0
 800793a:	d036      	beq.n	80079aa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d019      	beq.n	8007978 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007944:	4b37      	ldr	r3, [pc, #220]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a36      	ldr	r2, [pc, #216]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 800794a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800794e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007950:	f7fb f8cc 	bl	8002aec <HAL_GetTick>
 8007954:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007956:	e008      	b.n	800796a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007958:	f7fb f8c8 	bl	8002aec <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	2b02      	cmp	r3, #2
 8007964:	d901      	bls.n	800796a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e1dc      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800796a:	4b2e      	ldr	r3, [pc, #184]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0f0      	beq.n	8007958 <HAL_RCC_OscConfig+0x3d8>
 8007976:	e018      	b.n	80079aa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007978:	4b2a      	ldr	r3, [pc, #168]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a29      	ldr	r2, [pc, #164]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 800797e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007982:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007984:	f7fb f8b2 	bl	8002aec <HAL_GetTick>
 8007988:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800798a:	e008      	b.n	800799e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800798c:	f7fb f8ae 	bl	8002aec <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d901      	bls.n	800799e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e1c2      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800799e:	4b21      	ldr	r3, [pc, #132]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1f0      	bne.n	800798c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0304 	and.w	r3, r3, #4
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 8086 	beq.w	8007ac4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079b8:	4b1b      	ldr	r3, [pc, #108]	; (8007a28 <HAL_RCC_OscConfig+0x4a8>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a1a      	ldr	r2, [pc, #104]	; (8007a28 <HAL_RCC_OscConfig+0x4a8>)
 80079be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079c4:	f7fb f892 	bl	8002aec <HAL_GetTick>
 80079c8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079ca:	e008      	b.n	80079de <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079cc:	f7fb f88e 	bl	8002aec <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b64      	cmp	r3, #100	; 0x64
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e1a2      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079de:	4b12      	ldr	r3, [pc, #72]	; (8007a28 <HAL_RCC_OscConfig+0x4a8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f0      	beq.n	80079cc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d106      	bne.n	8007a00 <HAL_RCC_OscConfig+0x480>
 80079f2:	4b0c      	ldr	r3, [pc, #48]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	4a0b      	ldr	r2, [pc, #44]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 80079f8:	f043 0301 	orr.w	r3, r3, #1
 80079fc:	6713      	str	r3, [r2, #112]	; 0x70
 80079fe:	e032      	b.n	8007a66 <HAL_RCC_OscConfig+0x4e6>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d111      	bne.n	8007a2c <HAL_RCC_OscConfig+0x4ac>
 8007a08:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 8007a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0c:	4a05      	ldr	r2, [pc, #20]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 8007a0e:	f023 0301 	bic.w	r3, r3, #1
 8007a12:	6713      	str	r3, [r2, #112]	; 0x70
 8007a14:	4b03      	ldr	r3, [pc, #12]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 8007a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a18:	4a02      	ldr	r2, [pc, #8]	; (8007a24 <HAL_RCC_OscConfig+0x4a4>)
 8007a1a:	f023 0304 	bic.w	r3, r3, #4
 8007a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a20:	e021      	b.n	8007a66 <HAL_RCC_OscConfig+0x4e6>
 8007a22:	bf00      	nop
 8007a24:	58024400 	.word	0x58024400
 8007a28:	58024800 	.word	0x58024800
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	2b05      	cmp	r3, #5
 8007a32:	d10c      	bne.n	8007a4e <HAL_RCC_OscConfig+0x4ce>
 8007a34:	4b83      	ldr	r3, [pc, #524]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a38:	4a82      	ldr	r2, [pc, #520]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007a3a:	f043 0304 	orr.w	r3, r3, #4
 8007a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a40:	4b80      	ldr	r3, [pc, #512]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a44:	4a7f      	ldr	r2, [pc, #508]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007a46:	f043 0301 	orr.w	r3, r3, #1
 8007a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a4c:	e00b      	b.n	8007a66 <HAL_RCC_OscConfig+0x4e6>
 8007a4e:	4b7d      	ldr	r3, [pc, #500]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a52:	4a7c      	ldr	r2, [pc, #496]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007a54:	f023 0301 	bic.w	r3, r3, #1
 8007a58:	6713      	str	r3, [r2, #112]	; 0x70
 8007a5a:	4b7a      	ldr	r3, [pc, #488]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5e:	4a79      	ldr	r2, [pc, #484]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007a60:	f023 0304 	bic.w	r3, r3, #4
 8007a64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d015      	beq.n	8007a9a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a6e:	f7fb f83d 	bl	8002aec <HAL_GetTick>
 8007a72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a74:	e00a      	b.n	8007a8c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a76:	f7fb f839 	bl	8002aec <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d901      	bls.n	8007a8c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e14b      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a8c:	4b6d      	ldr	r3, [pc, #436]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d0ee      	beq.n	8007a76 <HAL_RCC_OscConfig+0x4f6>
 8007a98:	e014      	b.n	8007ac4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a9a:	f7fb f827 	bl	8002aec <HAL_GetTick>
 8007a9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007aa0:	e00a      	b.n	8007ab8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aa2:	f7fb f823 	bl	8002aec <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d901      	bls.n	8007ab8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e135      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ab8:	4b62      	ldr	r3, [pc, #392]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abc:	f003 0302 	and.w	r3, r3, #2
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1ee      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 812a 	beq.w	8007d22 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007ace:	4b5d      	ldr	r3, [pc, #372]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ad6:	2b18      	cmp	r3, #24
 8007ad8:	f000 80ba 	beq.w	8007c50 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	f040 8095 	bne.w	8007c10 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ae6:	4b57      	ldr	r3, [pc, #348]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a56      	ldr	r2, [pc, #344]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007aec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af2:	f7fa fffb 	bl	8002aec <HAL_GetTick>
 8007af6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007af8:	e008      	b.n	8007b0c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007afa:	f7fa fff7 	bl	8002aec <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e10b      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b0c:	4b4d      	ldr	r3, [pc, #308]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1f0      	bne.n	8007afa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b18:	4b4a      	ldr	r3, [pc, #296]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b1c:	4b4a      	ldr	r3, [pc, #296]	; (8007c48 <HAL_RCC_OscConfig+0x6c8>)
 8007b1e:	4013      	ands	r3, r2
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007b28:	0112      	lsls	r2, r2, #4
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	4945      	ldr	r1, [pc, #276]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	628b      	str	r3, [r1, #40]	; 0x28
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	3b01      	subs	r3, #1
 8007b38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b40:	3b01      	subs	r3, #1
 8007b42:	025b      	lsls	r3, r3, #9
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	431a      	orrs	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	041b      	lsls	r3, r3, #16
 8007b50:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	061b      	lsls	r3, r3, #24
 8007b5e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b62:	4938      	ldr	r1, [pc, #224]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007b68:	4b36      	ldr	r3, [pc, #216]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	4a35      	ldr	r2, [pc, #212]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007b6e:	f023 0301 	bic.w	r3, r3, #1
 8007b72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007b74:	4b33      	ldr	r3, [pc, #204]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b78:	4b34      	ldr	r3, [pc, #208]	; (8007c4c <HAL_RCC_OscConfig+0x6cc>)
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007b80:	00d2      	lsls	r2, r2, #3
 8007b82:	4930      	ldr	r1, [pc, #192]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007b88:	4b2e      	ldr	r3, [pc, #184]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	f023 020c 	bic.w	r2, r3, #12
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b94:	492b      	ldr	r1, [pc, #172]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007b9a:	4b2a      	ldr	r3, [pc, #168]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9e:	f023 0202 	bic.w	r2, r3, #2
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba6:	4927      	ldr	r1, [pc, #156]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007bac:	4b25      	ldr	r3, [pc, #148]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	4a24      	ldr	r2, [pc, #144]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bb8:	4b22      	ldr	r3, [pc, #136]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	4a21      	ldr	r2, [pc, #132]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007bc4:	4b1f      	ldr	r3, [pc, #124]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	4a1e      	ldr	r2, [pc, #120]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007bca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007bd0:	4b1c      	ldr	r3, [pc, #112]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	4a1b      	ldr	r2, [pc, #108]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bdc:	4b19      	ldr	r3, [pc, #100]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a18      	ldr	r2, [pc, #96]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be8:	f7fa ff80 	bl	8002aec <HAL_GetTick>
 8007bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007bee:	e008      	b.n	8007c02 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf0:	f7fa ff7c 	bl	8002aec <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e090      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c02:	4b10      	ldr	r3, [pc, #64]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0f0      	beq.n	8007bf0 <HAL_RCC_OscConfig+0x670>
 8007c0e:	e088      	b.n	8007d22 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c10:	4b0c      	ldr	r3, [pc, #48]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a0b      	ldr	r2, [pc, #44]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c1c:	f7fa ff66 	bl	8002aec <HAL_GetTick>
 8007c20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c22:	e008      	b.n	8007c36 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c24:	f7fa ff62 	bl	8002aec <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d901      	bls.n	8007c36 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e076      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c36:	4b03      	ldr	r3, [pc, #12]	; (8007c44 <HAL_RCC_OscConfig+0x6c4>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1f0      	bne.n	8007c24 <HAL_RCC_OscConfig+0x6a4>
 8007c42:	e06e      	b.n	8007d22 <HAL_RCC_OscConfig+0x7a2>
 8007c44:	58024400 	.word	0x58024400
 8007c48:	fffffc0c 	.word	0xfffffc0c
 8007c4c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007c50:	4b36      	ldr	r3, [pc, #216]	; (8007d2c <HAL_RCC_OscConfig+0x7ac>)
 8007c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c54:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007c56:	4b35      	ldr	r3, [pc, #212]	; (8007d2c <HAL_RCC_OscConfig+0x7ac>)
 8007c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d031      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f003 0203 	and.w	r2, r3, #3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d12a      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	091b      	lsrs	r3, r3, #4
 8007c76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d122      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d11a      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	0a5b      	lsrs	r3, r3, #9
 8007c96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d111      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	0c1b      	lsrs	r3, r3, #16
 8007ca8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d108      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	0e1b      	lsrs	r3, r3, #24
 8007cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d001      	beq.n	8007ccc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e02b      	b.n	8007d24 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007ccc:	4b17      	ldr	r3, [pc, #92]	; (8007d2c <HAL_RCC_OscConfig+0x7ac>)
 8007cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd0:	08db      	lsrs	r3, r3, #3
 8007cd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cd6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d01f      	beq.n	8007d22 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007ce2:	4b12      	ldr	r3, [pc, #72]	; (8007d2c <HAL_RCC_OscConfig+0x7ac>)
 8007ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce6:	4a11      	ldr	r2, [pc, #68]	; (8007d2c <HAL_RCC_OscConfig+0x7ac>)
 8007ce8:	f023 0301 	bic.w	r3, r3, #1
 8007cec:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007cee:	f7fa fefd 	bl	8002aec <HAL_GetTick>
 8007cf2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007cf4:	bf00      	nop
 8007cf6:	f7fa fef9 	bl	8002aec <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d0f9      	beq.n	8007cf6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007d02:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <HAL_RCC_OscConfig+0x7ac>)
 8007d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d06:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <HAL_RCC_OscConfig+0x7b0>)
 8007d08:	4013      	ands	r3, r2
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007d0e:	00d2      	lsls	r2, r2, #3
 8007d10:	4906      	ldr	r1, [pc, #24]	; (8007d2c <HAL_RCC_OscConfig+0x7ac>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007d16:	4b05      	ldr	r3, [pc, #20]	; (8007d2c <HAL_RCC_OscConfig+0x7ac>)
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	4a04      	ldr	r2, [pc, #16]	; (8007d2c <HAL_RCC_OscConfig+0x7ac>)
 8007d1c:	f043 0301 	orr.w	r3, r3, #1
 8007d20:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3730      	adds	r7, #48	; 0x30
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	58024400 	.word	0x58024400
 8007d30:	ffff0007 	.word	0xffff0007

08007d34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e19c      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d48:	4b8a      	ldr	r3, [pc, #552]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 030f 	and.w	r3, r3, #15
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d910      	bls.n	8007d78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d56:	4b87      	ldr	r3, [pc, #540]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f023 020f 	bic.w	r2, r3, #15
 8007d5e:	4985      	ldr	r1, [pc, #532]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d66:	4b83      	ldr	r3, [pc, #524]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d001      	beq.n	8007d78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e184      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d010      	beq.n	8007da6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	691a      	ldr	r2, [r3, #16]
 8007d88:	4b7b      	ldr	r3, [pc, #492]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d908      	bls.n	8007da6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d94:	4b78      	ldr	r3, [pc, #480]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	4975      	ldr	r1, [pc, #468]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d010      	beq.n	8007dd4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	695a      	ldr	r2, [r3, #20]
 8007db6:	4b70      	ldr	r3, [pc, #448]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d908      	bls.n	8007dd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007dc2:	4b6d      	ldr	r3, [pc, #436]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	496a      	ldr	r1, [pc, #424]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0310 	and.w	r3, r3, #16
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d010      	beq.n	8007e02 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	699a      	ldr	r2, [r3, #24]
 8007de4:	4b64      	ldr	r3, [pc, #400]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d908      	bls.n	8007e02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007df0:	4b61      	ldr	r3, [pc, #388]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	495e      	ldr	r1, [pc, #376]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d010      	beq.n	8007e30 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	69da      	ldr	r2, [r3, #28]
 8007e12:	4b59      	ldr	r3, [pc, #356]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d908      	bls.n	8007e30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007e1e:	4b56      	ldr	r3, [pc, #344]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	4953      	ldr	r1, [pc, #332]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d010      	beq.n	8007e5e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	4b4d      	ldr	r3, [pc, #308]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d908      	bls.n	8007e5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e4c:	4b4a      	ldr	r3, [pc, #296]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	f023 020f 	bic.w	r2, r3, #15
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	4947      	ldr	r1, [pc, #284]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d055      	beq.n	8007f16 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007e6a:	4b43      	ldr	r3, [pc, #268]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	4940      	ldr	r1, [pc, #256]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d107      	bne.n	8007e94 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e84:	4b3c      	ldr	r3, [pc, #240]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d121      	bne.n	8007ed4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e0f6      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d107      	bne.n	8007eac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e9c:	4b36      	ldr	r3, [pc, #216]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d115      	bne.n	8007ed4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e0ea      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d107      	bne.n	8007ec4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007eb4:	4b30      	ldr	r3, [pc, #192]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d109      	bne.n	8007ed4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e0de      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ec4:	4b2c      	ldr	r3, [pc, #176]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e0d6      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ed4:	4b28      	ldr	r3, [pc, #160]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	f023 0207 	bic.w	r2, r3, #7
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	4925      	ldr	r1, [pc, #148]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ee6:	f7fa fe01 	bl	8002aec <HAL_GetTick>
 8007eea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eec:	e00a      	b.n	8007f04 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007eee:	f7fa fdfd 	bl	8002aec <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d901      	bls.n	8007f04 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e0be      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f04:	4b1c      	ldr	r3, [pc, #112]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d1eb      	bne.n	8007eee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d010      	beq.n	8007f44 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	4b14      	ldr	r3, [pc, #80]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	f003 030f 	and.w	r3, r3, #15
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d208      	bcs.n	8007f44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f32:	4b11      	ldr	r3, [pc, #68]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	f023 020f 	bic.w	r2, r3, #15
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	490e      	ldr	r1, [pc, #56]	; (8007f78 <HAL_RCC_ClockConfig+0x244>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f44:	4b0b      	ldr	r3, [pc, #44]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 030f 	and.w	r3, r3, #15
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d214      	bcs.n	8007f7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f52:	4b08      	ldr	r3, [pc, #32]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f023 020f 	bic.w	r2, r3, #15
 8007f5a:	4906      	ldr	r1, [pc, #24]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f62:	4b04      	ldr	r3, [pc, #16]	; (8007f74 <HAL_RCC_ClockConfig+0x240>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 030f 	and.w	r3, r3, #15
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d005      	beq.n	8007f7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e086      	b.n	8008082 <HAL_RCC_ClockConfig+0x34e>
 8007f74:	52002000 	.word	0x52002000
 8007f78:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d010      	beq.n	8007faa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691a      	ldr	r2, [r3, #16]
 8007f8c:	4b3f      	ldr	r3, [pc, #252]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d208      	bcs.n	8007faa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f98:	4b3c      	ldr	r3, [pc, #240]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	4939      	ldr	r1, [pc, #228]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0308 	and.w	r3, r3, #8
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d010      	beq.n	8007fd8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	695a      	ldr	r2, [r3, #20]
 8007fba:	4b34      	ldr	r3, [pc, #208]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007fbc:	69db      	ldr	r3, [r3, #28]
 8007fbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d208      	bcs.n	8007fd8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007fc6:	4b31      	ldr	r3, [pc, #196]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	492e      	ldr	r1, [pc, #184]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0310 	and.w	r3, r3, #16
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d010      	beq.n	8008006 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	699a      	ldr	r2, [r3, #24]
 8007fe8:	4b28      	ldr	r3, [pc, #160]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007fea:	69db      	ldr	r3, [r3, #28]
 8007fec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d208      	bcs.n	8008006 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ff4:	4b25      	ldr	r3, [pc, #148]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8007ff6:	69db      	ldr	r3, [r3, #28]
 8007ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	4922      	ldr	r1, [pc, #136]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8008002:	4313      	orrs	r3, r2
 8008004:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d010      	beq.n	8008034 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	69da      	ldr	r2, [r3, #28]
 8008016:	4b1d      	ldr	r3, [pc, #116]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800801e:	429a      	cmp	r2, r3
 8008020:	d208      	bcs.n	8008034 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008022:	4b1a      	ldr	r3, [pc, #104]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	4917      	ldr	r1, [pc, #92]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8008030:	4313      	orrs	r3, r2
 8008032:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008034:	f000 f834 	bl	80080a0 <HAL_RCC_GetSysClockFreq>
 8008038:	4602      	mov	r2, r0
 800803a:	4b14      	ldr	r3, [pc, #80]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	0a1b      	lsrs	r3, r3, #8
 8008040:	f003 030f 	and.w	r3, r3, #15
 8008044:	4912      	ldr	r1, [pc, #72]	; (8008090 <HAL_RCC_ClockConfig+0x35c>)
 8008046:	5ccb      	ldrb	r3, [r1, r3]
 8008048:	f003 031f 	and.w	r3, r3, #31
 800804c:	fa22 f303 	lsr.w	r3, r2, r3
 8008050:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008052:	4b0e      	ldr	r3, [pc, #56]	; (800808c <HAL_RCC_ClockConfig+0x358>)
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	f003 030f 	and.w	r3, r3, #15
 800805a:	4a0d      	ldr	r2, [pc, #52]	; (8008090 <HAL_RCC_ClockConfig+0x35c>)
 800805c:	5cd3      	ldrb	r3, [r2, r3]
 800805e:	f003 031f 	and.w	r3, r3, #31
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	fa22 f303 	lsr.w	r3, r2, r3
 8008068:	4a0a      	ldr	r2, [pc, #40]	; (8008094 <HAL_RCC_ClockConfig+0x360>)
 800806a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800806c:	4a0a      	ldr	r2, [pc, #40]	; (8008098 <HAL_RCC_ClockConfig+0x364>)
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008072:	4b0a      	ldr	r3, [pc, #40]	; (800809c <HAL_RCC_ClockConfig+0x368>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4618      	mov	r0, r3
 8008078:	f7fa fcee 	bl	8002a58 <HAL_InitTick>
 800807c:	4603      	mov	r3, r0
 800807e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008080:	7bfb      	ldrb	r3, [r7, #15]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	58024400 	.word	0x58024400
 8008090:	08012c10 	.word	0x08012c10
 8008094:	24000394 	.word	0x24000394
 8008098:	24000390 	.word	0x24000390
 800809c:	24000398 	.word	0x24000398

080080a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b089      	sub	sp, #36	; 0x24
 80080a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080a6:	4bb3      	ldr	r3, [pc, #716]	; (8008374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080ae:	2b18      	cmp	r3, #24
 80080b0:	f200 8155 	bhi.w	800835e <HAL_RCC_GetSysClockFreq+0x2be>
 80080b4:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80080b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ba:	bf00      	nop
 80080bc:	08008121 	.word	0x08008121
 80080c0:	0800835f 	.word	0x0800835f
 80080c4:	0800835f 	.word	0x0800835f
 80080c8:	0800835f 	.word	0x0800835f
 80080cc:	0800835f 	.word	0x0800835f
 80080d0:	0800835f 	.word	0x0800835f
 80080d4:	0800835f 	.word	0x0800835f
 80080d8:	0800835f 	.word	0x0800835f
 80080dc:	08008147 	.word	0x08008147
 80080e0:	0800835f 	.word	0x0800835f
 80080e4:	0800835f 	.word	0x0800835f
 80080e8:	0800835f 	.word	0x0800835f
 80080ec:	0800835f 	.word	0x0800835f
 80080f0:	0800835f 	.word	0x0800835f
 80080f4:	0800835f 	.word	0x0800835f
 80080f8:	0800835f 	.word	0x0800835f
 80080fc:	0800814d 	.word	0x0800814d
 8008100:	0800835f 	.word	0x0800835f
 8008104:	0800835f 	.word	0x0800835f
 8008108:	0800835f 	.word	0x0800835f
 800810c:	0800835f 	.word	0x0800835f
 8008110:	0800835f 	.word	0x0800835f
 8008114:	0800835f 	.word	0x0800835f
 8008118:	0800835f 	.word	0x0800835f
 800811c:	08008153 	.word	0x08008153
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008120:	4b94      	ldr	r3, [pc, #592]	; (8008374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0320 	and.w	r3, r3, #32
 8008128:	2b00      	cmp	r3, #0
 800812a:	d009      	beq.n	8008140 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800812c:	4b91      	ldr	r3, [pc, #580]	; (8008374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	08db      	lsrs	r3, r3, #3
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	4a90      	ldr	r2, [pc, #576]	; (8008378 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008138:	fa22 f303 	lsr.w	r3, r2, r3
 800813c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800813e:	e111      	b.n	8008364 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008140:	4b8d      	ldr	r3, [pc, #564]	; (8008378 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008142:	61bb      	str	r3, [r7, #24]
      break;
 8008144:	e10e      	b.n	8008364 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008146:	4b8d      	ldr	r3, [pc, #564]	; (800837c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008148:	61bb      	str	r3, [r7, #24]
      break;
 800814a:	e10b      	b.n	8008364 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800814c:	4b8c      	ldr	r3, [pc, #560]	; (8008380 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800814e:	61bb      	str	r3, [r7, #24]
      break;
 8008150:	e108      	b.n	8008364 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008152:	4b88      	ldr	r3, [pc, #544]	; (8008374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008156:	f003 0303 	and.w	r3, r3, #3
 800815a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800815c:	4b85      	ldr	r3, [pc, #532]	; (8008374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008160:	091b      	lsrs	r3, r3, #4
 8008162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008166:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008168:	4b82      	ldr	r3, [pc, #520]	; (8008374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008172:	4b80      	ldr	r3, [pc, #512]	; (8008374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008176:	08db      	lsrs	r3, r3, #3
 8008178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	fb02 f303 	mul.w	r3, r2, r3
 8008182:	ee07 3a90 	vmov	s15, r3
 8008186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 80e1 	beq.w	8008358 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2b02      	cmp	r3, #2
 800819a:	f000 8083 	beq.w	80082a4 <HAL_RCC_GetSysClockFreq+0x204>
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	f200 80a1 	bhi.w	80082e8 <HAL_RCC_GetSysClockFreq+0x248>
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <HAL_RCC_GetSysClockFreq+0x114>
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d056      	beq.n	8008260 <HAL_RCC_GetSysClockFreq+0x1c0>
 80081b2:	e099      	b.n	80082e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081b4:	4b6f      	ldr	r3, [pc, #444]	; (8008374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0320 	and.w	r3, r3, #32
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d02d      	beq.n	800821c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081c0:	4b6c      	ldr	r3, [pc, #432]	; (8008374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	08db      	lsrs	r3, r3, #3
 80081c6:	f003 0303 	and.w	r3, r3, #3
 80081ca:	4a6b      	ldr	r2, [pc, #428]	; (8008378 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081cc:	fa22 f303 	lsr.w	r3, r2, r3
 80081d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	ee07 3a90 	vmov	s15, r3
 80081d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	ee07 3a90 	vmov	s15, r3
 80081e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ea:	4b62      	ldr	r3, [pc, #392]	; (8008374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f2:	ee07 3a90 	vmov	s15, r3
 80081f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80081fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008384 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800820a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800820e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008216:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800821a:	e087      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	ee07 3a90 	vmov	s15, r3
 8008222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008226:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008388 <HAL_RCC_GetSysClockFreq+0x2e8>
 800822a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800822e:	4b51      	ldr	r3, [pc, #324]	; (8008374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008236:	ee07 3a90 	vmov	s15, r3
 800823a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800823e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008242:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008384 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800824a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800824e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800825a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800825e:	e065      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800838c <HAL_RCC_GetSysClockFreq+0x2ec>
 800826e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008272:	4b40      	ldr	r3, [pc, #256]	; (8008374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008282:	ed97 6a02 	vldr	s12, [r7, #8]
 8008286:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008384 <HAL_RCC_GetSysClockFreq+0x2e4>
 800828a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800828e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800829e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80082a2:	e043      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008390 <HAL_RCC_GetSysClockFreq+0x2f0>
 80082b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082b6:	4b2f      	ldr	r3, [pc, #188]	; (8008374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80082ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008384 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80082e6:	e021      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	ee07 3a90 	vmov	s15, r3
 80082ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800838c <HAL_RCC_GetSysClockFreq+0x2ec>
 80082f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082fa:	4b1e      	ldr	r3, [pc, #120]	; (8008374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008302:	ee07 3a90 	vmov	s15, r3
 8008306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830a:	ed97 6a02 	vldr	s12, [r7, #8]
 800830e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008384 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800831a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800831e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008326:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800832a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800832c:	4b11      	ldr	r3, [pc, #68]	; (8008374 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800832e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008330:	0a5b      	lsrs	r3, r3, #9
 8008332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008336:	3301      	adds	r3, #1
 8008338:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	ee07 3a90 	vmov	s15, r3
 8008340:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008344:	edd7 6a07 	vldr	s13, [r7, #28]
 8008348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800834c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008350:	ee17 3a90 	vmov	r3, s15
 8008354:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008356:	e005      	b.n	8008364 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	61bb      	str	r3, [r7, #24]
      break;
 800835c:	e002      	b.n	8008364 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800835e:	4b07      	ldr	r3, [pc, #28]	; (800837c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008360:	61bb      	str	r3, [r7, #24]
      break;
 8008362:	bf00      	nop
  }

  return sysclockfreq;
 8008364:	69bb      	ldr	r3, [r7, #24]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3724      	adds	r7, #36	; 0x24
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	58024400 	.word	0x58024400
 8008378:	03d09000 	.word	0x03d09000
 800837c:	003d0900 	.word	0x003d0900
 8008380:	017d7840 	.word	0x017d7840
 8008384:	46000000 	.word	0x46000000
 8008388:	4c742400 	.word	0x4c742400
 800838c:	4a742400 	.word	0x4a742400
 8008390:	4bbebc20 	.word	0x4bbebc20

08008394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800839a:	f7ff fe81 	bl	80080a0 <HAL_RCC_GetSysClockFreq>
 800839e:	4602      	mov	r2, r0
 80083a0:	4b10      	ldr	r3, [pc, #64]	; (80083e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	0a1b      	lsrs	r3, r3, #8
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	490f      	ldr	r1, [pc, #60]	; (80083e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80083ac:	5ccb      	ldrb	r3, [r1, r3]
 80083ae:	f003 031f 	and.w	r3, r3, #31
 80083b2:	fa22 f303 	lsr.w	r3, r2, r3
 80083b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80083b8:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	f003 030f 	and.w	r3, r3, #15
 80083c0:	4a09      	ldr	r2, [pc, #36]	; (80083e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80083c2:	5cd3      	ldrb	r3, [r2, r3]
 80083c4:	f003 031f 	and.w	r3, r3, #31
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	fa22 f303 	lsr.w	r3, r2, r3
 80083ce:	4a07      	ldr	r2, [pc, #28]	; (80083ec <HAL_RCC_GetHCLKFreq+0x58>)
 80083d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80083d2:	4a07      	ldr	r2, [pc, #28]	; (80083f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80083d8:	4b04      	ldr	r3, [pc, #16]	; (80083ec <HAL_RCC_GetHCLKFreq+0x58>)
 80083da:	681b      	ldr	r3, [r3, #0]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	58024400 	.word	0x58024400
 80083e8:	08012c10 	.word	0x08012c10
 80083ec:	24000394 	.word	0x24000394
 80083f0:	24000390 	.word	0x24000390

080083f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80083f8:	f7ff ffcc 	bl	8008394 <HAL_RCC_GetHCLKFreq>
 80083fc:	4602      	mov	r2, r0
 80083fe:	4b06      	ldr	r3, [pc, #24]	; (8008418 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	091b      	lsrs	r3, r3, #4
 8008404:	f003 0307 	and.w	r3, r3, #7
 8008408:	4904      	ldr	r1, [pc, #16]	; (800841c <HAL_RCC_GetPCLK1Freq+0x28>)
 800840a:	5ccb      	ldrb	r3, [r1, r3]
 800840c:	f003 031f 	and.w	r3, r3, #31
 8008410:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008414:	4618      	mov	r0, r3
 8008416:	bd80      	pop	{r7, pc}
 8008418:	58024400 	.word	0x58024400
 800841c:	08012c10 	.word	0x08012c10

08008420 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008424:	b0c6      	sub	sp, #280	; 0x118
 8008426:	af00      	add	r7, sp, #0
 8008428:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800842c:	2300      	movs	r3, #0
 800842e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008432:	2300      	movs	r3, #0
 8008434:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008444:	2500      	movs	r5, #0
 8008446:	ea54 0305 	orrs.w	r3, r4, r5
 800844a:	d049      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800844c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008452:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008456:	d02f      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008458:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800845c:	d828      	bhi.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800845e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008462:	d01a      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008464:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008468:	d822      	bhi.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800846e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008472:	d007      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008474:	e01c      	b.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008476:	4bab      	ldr	r3, [pc, #684]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847a:	4aaa      	ldr	r2, [pc, #680]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800847c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008480:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008482:	e01a      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008488:	3308      	adds	r3, #8
 800848a:	2102      	movs	r1, #2
 800848c:	4618      	mov	r0, r3
 800848e:	f002 fa49 	bl	800a924 <RCCEx_PLL2_Config>
 8008492:	4603      	mov	r3, r0
 8008494:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008498:	e00f      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800849a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800849e:	3328      	adds	r3, #40	; 0x28
 80084a0:	2102      	movs	r1, #2
 80084a2:	4618      	mov	r0, r3
 80084a4:	f002 faf0 	bl	800aa88 <RCCEx_PLL3_Config>
 80084a8:	4603      	mov	r3, r0
 80084aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80084ae:	e004      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80084b6:	e000      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80084b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10a      	bne.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80084c2:	4b98      	ldr	r3, [pc, #608]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80084c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80084ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084d0:	4a94      	ldr	r2, [pc, #592]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80084d2:	430b      	orrs	r3, r1
 80084d4:	6513      	str	r3, [r2, #80]	; 0x50
 80084d6:	e003      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80084dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80084ec:	f04f 0900 	mov.w	r9, #0
 80084f0:	ea58 0309 	orrs.w	r3, r8, r9
 80084f4:	d047      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80084f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	d82a      	bhi.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008500:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008506:	bf00      	nop
 8008508:	0800851d 	.word	0x0800851d
 800850c:	0800852b 	.word	0x0800852b
 8008510:	08008541 	.word	0x08008541
 8008514:	0800855f 	.word	0x0800855f
 8008518:	0800855f 	.word	0x0800855f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800851c:	4b81      	ldr	r3, [pc, #516]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800851e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008520:	4a80      	ldr	r2, [pc, #512]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008526:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008528:	e01a      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800852a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800852e:	3308      	adds	r3, #8
 8008530:	2100      	movs	r1, #0
 8008532:	4618      	mov	r0, r3
 8008534:	f002 f9f6 	bl	800a924 <RCCEx_PLL2_Config>
 8008538:	4603      	mov	r3, r0
 800853a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800853e:	e00f      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008544:	3328      	adds	r3, #40	; 0x28
 8008546:	2100      	movs	r1, #0
 8008548:	4618      	mov	r0, r3
 800854a:	f002 fa9d 	bl	800aa88 <RCCEx_PLL3_Config>
 800854e:	4603      	mov	r3, r0
 8008550:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008554:	e004      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800855c:	e000      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800855e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008560:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10a      	bne.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008568:	4b6e      	ldr	r3, [pc, #440]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800856a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800856c:	f023 0107 	bic.w	r1, r3, #7
 8008570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008576:	4a6b      	ldr	r2, [pc, #428]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008578:	430b      	orrs	r3, r1
 800857a:	6513      	str	r3, [r2, #80]	; 0x50
 800857c:	e003      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008582:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8008592:	f04f 0b00 	mov.w	fp, #0
 8008596:	ea5a 030b 	orrs.w	r3, sl, fp
 800859a:	d05b      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800859c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085a4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80085a8:	d03b      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80085aa:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80085ae:	d834      	bhi.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80085b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085b4:	d037      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80085b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085ba:	d82e      	bhi.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80085bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085c0:	d033      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80085c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085c6:	d828      	bhi.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80085c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085cc:	d01a      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80085ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085d2:	d822      	bhi.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d003      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80085d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085dc:	d007      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80085de:	e01c      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085e0:	4b50      	ldr	r3, [pc, #320]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80085e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e4:	4a4f      	ldr	r2, [pc, #316]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80085e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80085ec:	e01e      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085f2:	3308      	adds	r3, #8
 80085f4:	2100      	movs	r1, #0
 80085f6:	4618      	mov	r0, r3
 80085f8:	f002 f994 	bl	800a924 <RCCEx_PLL2_Config>
 80085fc:	4603      	mov	r3, r0
 80085fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008602:	e013      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008608:	3328      	adds	r3, #40	; 0x28
 800860a:	2100      	movs	r1, #0
 800860c:	4618      	mov	r0, r3
 800860e:	f002 fa3b 	bl	800aa88 <RCCEx_PLL3_Config>
 8008612:	4603      	mov	r3, r0
 8008614:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008618:	e008      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008620:	e004      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008622:	bf00      	nop
 8008624:	e002      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008626:	bf00      	nop
 8008628:	e000      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800862a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800862c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10b      	bne.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008634:	4b3b      	ldr	r3, [pc, #236]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008638:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800863c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008640:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008644:	4a37      	ldr	r2, [pc, #220]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008646:	430b      	orrs	r3, r1
 8008648:	6593      	str	r3, [r2, #88]	; 0x58
 800864a:	e003      	b.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008650:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008660:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008664:	2300      	movs	r3, #0
 8008666:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800866a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800866e:	460b      	mov	r3, r1
 8008670:	4313      	orrs	r3, r2
 8008672:	d05d      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008678:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800867c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008680:	d03b      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008682:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008686:	d834      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800868c:	d037      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800868e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008692:	d82e      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008694:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008698:	d033      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800869a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800869e:	d828      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80086a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086a4:	d01a      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80086a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086aa:	d822      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80086b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086b4:	d007      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80086b6:	e01c      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086b8:	4b1a      	ldr	r3, [pc, #104]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	4a19      	ldr	r2, [pc, #100]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80086be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80086c4:	e01e      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ca:	3308      	adds	r3, #8
 80086cc:	2100      	movs	r1, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f002 f928 	bl	800a924 <RCCEx_PLL2_Config>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80086da:	e013      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80086dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086e0:	3328      	adds	r3, #40	; 0x28
 80086e2:	2100      	movs	r1, #0
 80086e4:	4618      	mov	r0, r3
 80086e6:	f002 f9cf 	bl	800aa88 <RCCEx_PLL3_Config>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80086f0:	e008      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80086f8:	e004      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80086fa:	bf00      	nop
 80086fc:	e002      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80086fe:	bf00      	nop
 8008700:	e000      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008704:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10d      	bne.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800870c:	4b05      	ldr	r3, [pc, #20]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800870e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008710:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008718:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800871c:	4a01      	ldr	r2, [pc, #4]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800871e:	430b      	orrs	r3, r1
 8008720:	6593      	str	r3, [r2, #88]	; 0x58
 8008722:	e005      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008728:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800872c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800873c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008740:	2300      	movs	r3, #0
 8008742:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008746:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800874a:	460b      	mov	r3, r1
 800874c:	4313      	orrs	r3, r2
 800874e:	d03a      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008756:	2b30      	cmp	r3, #48	; 0x30
 8008758:	d01f      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800875a:	2b30      	cmp	r3, #48	; 0x30
 800875c:	d819      	bhi.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800875e:	2b20      	cmp	r3, #32
 8008760:	d00c      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008762:	2b20      	cmp	r3, #32
 8008764:	d815      	bhi.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d019      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800876a:	2b10      	cmp	r3, #16
 800876c:	d111      	bne.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800876e:	4baa      	ldr	r3, [pc, #680]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008772:	4aa9      	ldr	r2, [pc, #676]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008778:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800877a:	e011      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800877c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008780:	3308      	adds	r3, #8
 8008782:	2102      	movs	r1, #2
 8008784:	4618      	mov	r0, r3
 8008786:	f002 f8cd 	bl	800a924 <RCCEx_PLL2_Config>
 800878a:	4603      	mov	r3, r0
 800878c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008790:	e006      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008798:	e002      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800879a:	bf00      	nop
 800879c:	e000      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800879e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10a      	bne.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80087a8:	4b9b      	ldr	r3, [pc, #620]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80087b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b6:	4a98      	ldr	r2, [pc, #608]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087b8:	430b      	orrs	r3, r1
 80087ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087bc:	e003      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80087c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80087c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80087d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087d6:	2300      	movs	r3, #0
 80087d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80087e0:	460b      	mov	r3, r1
 80087e2:	4313      	orrs	r3, r2
 80087e4:	d051      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80087e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087f0:	d035      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80087f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087f6:	d82e      	bhi.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80087f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087fc:	d031      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80087fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008802:	d828      	bhi.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008808:	d01a      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800880a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800880e:	d822      	bhi.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008810:	2b00      	cmp	r3, #0
 8008812:	d003      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008818:	d007      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800881a:	e01c      	b.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800881c:	4b7e      	ldr	r3, [pc, #504]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008820:	4a7d      	ldr	r2, [pc, #500]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008828:	e01c      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800882a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800882e:	3308      	adds	r3, #8
 8008830:	2100      	movs	r1, #0
 8008832:	4618      	mov	r0, r3
 8008834:	f002 f876 	bl	800a924 <RCCEx_PLL2_Config>
 8008838:	4603      	mov	r3, r0
 800883a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800883e:	e011      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008844:	3328      	adds	r3, #40	; 0x28
 8008846:	2100      	movs	r1, #0
 8008848:	4618      	mov	r0, r3
 800884a:	f002 f91d 	bl	800aa88 <RCCEx_PLL3_Config>
 800884e:	4603      	mov	r3, r0
 8008850:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008854:	e006      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800885c:	e002      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800885e:	bf00      	nop
 8008860:	e000      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008864:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10a      	bne.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800886c:	4b6a      	ldr	r3, [pc, #424]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800886e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008870:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800887a:	4a67      	ldr	r2, [pc, #412]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800887c:	430b      	orrs	r3, r1
 800887e:	6513      	str	r3, [r2, #80]	; 0x50
 8008880:	e003      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008882:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008886:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800888a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800888e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008892:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008896:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800889a:	2300      	movs	r3, #0
 800889c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088a0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80088a4:	460b      	mov	r3, r1
 80088a6:	4313      	orrs	r3, r2
 80088a8:	d053      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80088aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088b4:	d033      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80088b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088ba:	d82c      	bhi.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80088bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088c0:	d02f      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80088c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088c6:	d826      	bhi.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80088c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088cc:	d02b      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80088ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088d2:	d820      	bhi.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80088d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088d8:	d012      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80088da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088de:	d81a      	bhi.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d022      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80088e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088e8:	d115      	bne.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ee:	3308      	adds	r3, #8
 80088f0:	2101      	movs	r1, #1
 80088f2:	4618      	mov	r0, r3
 80088f4:	f002 f816 	bl	800a924 <RCCEx_PLL2_Config>
 80088f8:	4603      	mov	r3, r0
 80088fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80088fe:	e015      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008904:	3328      	adds	r3, #40	; 0x28
 8008906:	2101      	movs	r1, #1
 8008908:	4618      	mov	r0, r3
 800890a:	f002 f8bd 	bl	800aa88 <RCCEx_PLL3_Config>
 800890e:	4603      	mov	r3, r0
 8008910:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008914:	e00a      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800891c:	e006      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800891e:	bf00      	nop
 8008920:	e004      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008922:	bf00      	nop
 8008924:	e002      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008926:	bf00      	nop
 8008928:	e000      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800892a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800892c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10a      	bne.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008934:	4b38      	ldr	r3, [pc, #224]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008938:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800893c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008942:	4a35      	ldr	r2, [pc, #212]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008944:	430b      	orrs	r3, r1
 8008946:	6513      	str	r3, [r2, #80]	; 0x50
 8008948:	e003      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800894a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800894e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800895e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008962:	2300      	movs	r3, #0
 8008964:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008968:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800896c:	460b      	mov	r3, r1
 800896e:	4313      	orrs	r3, r2
 8008970:	d058      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008976:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800897a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800897e:	d033      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008984:	d82c      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800898a:	d02f      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800898c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008990:	d826      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008992:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008996:	d02b      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008998:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800899c:	d820      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800899e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089a2:	d012      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80089a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089a8:	d81a      	bhi.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d022      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80089ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089b2:	d115      	bne.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089b8:	3308      	adds	r3, #8
 80089ba:	2101      	movs	r1, #1
 80089bc:	4618      	mov	r0, r3
 80089be:	f001 ffb1 	bl	800a924 <RCCEx_PLL2_Config>
 80089c2:	4603      	mov	r3, r0
 80089c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80089c8:	e015      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089ce:	3328      	adds	r3, #40	; 0x28
 80089d0:	2101      	movs	r1, #1
 80089d2:	4618      	mov	r0, r3
 80089d4:	f002 f858 	bl	800aa88 <RCCEx_PLL3_Config>
 80089d8:	4603      	mov	r3, r0
 80089da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80089de:	e00a      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80089e6:	e006      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80089e8:	bf00      	nop
 80089ea:	e004      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80089ec:	bf00      	nop
 80089ee:	e002      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80089f0:	bf00      	nop
 80089f2:	e000      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80089f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10e      	bne.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80089fe:	4b06      	ldr	r3, [pc, #24]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a02:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a0e:	4a02      	ldr	r2, [pc, #8]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008a10:	430b      	orrs	r3, r1
 8008a12:	6593      	str	r3, [r2, #88]	; 0x58
 8008a14:	e006      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008a16:	bf00      	nop
 8008a18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a34:	2300      	movs	r3, #0
 8008a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4313      	orrs	r3, r2
 8008a42:	d037      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a4e:	d00e      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a54:	d816      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d018      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008a5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a5e:	d111      	bne.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a60:	4bc4      	ldr	r3, [pc, #784]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a64:	4ac3      	ldr	r2, [pc, #780]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008a6c:	e00f      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a72:	3308      	adds	r3, #8
 8008a74:	2101      	movs	r1, #1
 8008a76:	4618      	mov	r0, r3
 8008a78:	f001 ff54 	bl	800a924 <RCCEx_PLL2_Config>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008a82:	e004      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008a8a:	e000      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10a      	bne.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a96:	4bb7      	ldr	r3, [pc, #732]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a9a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aa4:	4ab3      	ldr	r2, [pc, #716]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008aa6:	430b      	orrs	r3, r1
 8008aa8:	6513      	str	r3, [r2, #80]	; 0x50
 8008aaa:	e003      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ab0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008aca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	d039      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ada:	2b03      	cmp	r3, #3
 8008adc:	d81c      	bhi.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008ade:	a201      	add	r2, pc, #4	; (adr r2, 8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae4:	08008b21 	.word	0x08008b21
 8008ae8:	08008af5 	.word	0x08008af5
 8008aec:	08008b03 	.word	0x08008b03
 8008af0:	08008b21 	.word	0x08008b21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008af4:	4b9f      	ldr	r3, [pc, #636]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af8:	4a9e      	ldr	r2, [pc, #632]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008b00:	e00f      	b.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b06:	3308      	adds	r3, #8
 8008b08:	2102      	movs	r1, #2
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f001 ff0a 	bl	800a924 <RCCEx_PLL2_Config>
 8008b10:	4603      	mov	r3, r0
 8008b12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008b16:	e004      	b.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008b1e:	e000      	b.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10a      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008b2a:	4b92      	ldr	r3, [pc, #584]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b2e:	f023 0103 	bic.w	r1, r3, #3
 8008b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b38:	4a8e      	ldr	r2, [pc, #568]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b3a:	430b      	orrs	r3, r1
 8008b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b3e:	e003      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b50:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008b54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b58:	2300      	movs	r3, #0
 8008b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b62:	460b      	mov	r3, r1
 8008b64:	4313      	orrs	r3, r2
 8008b66:	f000 8099 	beq.w	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b6a:	4b83      	ldr	r3, [pc, #524]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a82      	ldr	r2, [pc, #520]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b76:	f7f9 ffb9 	bl	8002aec <HAL_GetTick>
 8008b7a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b7e:	e00b      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b80:	f7f9 ffb4 	bl	8002aec <HAL_GetTick>
 8008b84:	4602      	mov	r2, r0
 8008b86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	2b64      	cmp	r3, #100	; 0x64
 8008b8e:	d903      	bls.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008b96:	e005      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b98:	4b77      	ldr	r3, [pc, #476]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d0ed      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d173      	bne.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008bac:	4b71      	ldr	r3, [pc, #452]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bb8:	4053      	eors	r3, r2
 8008bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d015      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008bc2:	4b6c      	ldr	r3, [pc, #432]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008bce:	4b69      	ldr	r3, [pc, #420]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd2:	4a68      	ldr	r2, [pc, #416]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bd8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008bda:	4b66      	ldr	r3, [pc, #408]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bde:	4a65      	ldr	r2, [pc, #404]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008be4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008be6:	4a63      	ldr	r2, [pc, #396]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bfa:	d118      	bne.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bfc:	f7f9 ff76 	bl	8002aec <HAL_GetTick>
 8008c00:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c04:	e00d      	b.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c06:	f7f9 ff71 	bl	8002aec <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008c10:	1ad2      	subs	r2, r2, r3
 8008c12:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d903      	bls.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8008c20:	e005      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c22:	4b54      	ldr	r3, [pc, #336]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c26:	f003 0302 	and.w	r3, r3, #2
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0eb      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008c2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d129      	bne.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c46:	d10e      	bne.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008c48:	4b4a      	ldr	r3, [pc, #296]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c58:	091a      	lsrs	r2, r3, #4
 8008c5a:	4b48      	ldr	r3, [pc, #288]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	4a45      	ldr	r2, [pc, #276]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c60:	430b      	orrs	r3, r1
 8008c62:	6113      	str	r3, [r2, #16]
 8008c64:	e005      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008c66:	4b43      	ldr	r3, [pc, #268]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	4a42      	ldr	r2, [pc, #264]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008c70:	6113      	str	r3, [r2, #16]
 8008c72:	4b40      	ldr	r3, [pc, #256]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c74:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c82:	4a3c      	ldr	r2, [pc, #240]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c84:	430b      	orrs	r3, r1
 8008c86:	6713      	str	r3, [r2, #112]	; 0x70
 8008c88:	e008      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8008c92:	e003      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca4:	f002 0301 	and.w	r3, r2, #1
 8008ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cac:	2300      	movs	r3, #0
 8008cae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008cb2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	f000 808f 	beq.w	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cc4:	2b28      	cmp	r3, #40	; 0x28
 8008cc6:	d871      	bhi.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008cc8:	a201      	add	r2, pc, #4	; (adr r2, 8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cce:	bf00      	nop
 8008cd0:	08008db5 	.word	0x08008db5
 8008cd4:	08008dad 	.word	0x08008dad
 8008cd8:	08008dad 	.word	0x08008dad
 8008cdc:	08008dad 	.word	0x08008dad
 8008ce0:	08008dad 	.word	0x08008dad
 8008ce4:	08008dad 	.word	0x08008dad
 8008ce8:	08008dad 	.word	0x08008dad
 8008cec:	08008dad 	.word	0x08008dad
 8008cf0:	08008d81 	.word	0x08008d81
 8008cf4:	08008dad 	.word	0x08008dad
 8008cf8:	08008dad 	.word	0x08008dad
 8008cfc:	08008dad 	.word	0x08008dad
 8008d00:	08008dad 	.word	0x08008dad
 8008d04:	08008dad 	.word	0x08008dad
 8008d08:	08008dad 	.word	0x08008dad
 8008d0c:	08008dad 	.word	0x08008dad
 8008d10:	08008d97 	.word	0x08008d97
 8008d14:	08008dad 	.word	0x08008dad
 8008d18:	08008dad 	.word	0x08008dad
 8008d1c:	08008dad 	.word	0x08008dad
 8008d20:	08008dad 	.word	0x08008dad
 8008d24:	08008dad 	.word	0x08008dad
 8008d28:	08008dad 	.word	0x08008dad
 8008d2c:	08008dad 	.word	0x08008dad
 8008d30:	08008db5 	.word	0x08008db5
 8008d34:	08008dad 	.word	0x08008dad
 8008d38:	08008dad 	.word	0x08008dad
 8008d3c:	08008dad 	.word	0x08008dad
 8008d40:	08008dad 	.word	0x08008dad
 8008d44:	08008dad 	.word	0x08008dad
 8008d48:	08008dad 	.word	0x08008dad
 8008d4c:	08008dad 	.word	0x08008dad
 8008d50:	08008db5 	.word	0x08008db5
 8008d54:	08008dad 	.word	0x08008dad
 8008d58:	08008dad 	.word	0x08008dad
 8008d5c:	08008dad 	.word	0x08008dad
 8008d60:	08008dad 	.word	0x08008dad
 8008d64:	08008dad 	.word	0x08008dad
 8008d68:	08008dad 	.word	0x08008dad
 8008d6c:	08008dad 	.word	0x08008dad
 8008d70:	08008db5 	.word	0x08008db5
 8008d74:	58024400 	.word	0x58024400
 8008d78:	58024800 	.word	0x58024800
 8008d7c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d84:	3308      	adds	r3, #8
 8008d86:	2101      	movs	r1, #1
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f001 fdcb 	bl	800a924 <RCCEx_PLL2_Config>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008d94:	e00f      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d9a:	3328      	adds	r3, #40	; 0x28
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f001 fe72 	bl	800aa88 <RCCEx_PLL3_Config>
 8008da4:	4603      	mov	r3, r0
 8008da6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008daa:	e004      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008db2:	e000      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008db6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10a      	bne.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008dbe:	4bbf      	ldr	r3, [pc, #764]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dcc:	4abb      	ldr	r2, [pc, #748]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	6553      	str	r3, [r2, #84]	; 0x54
 8008dd2:	e003      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008dd8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	f002 0302 	and.w	r3, r2, #2
 8008de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008dec:	2300      	movs	r3, #0
 8008dee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008df2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008df6:	460b      	mov	r3, r1
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	d041      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e02:	2b05      	cmp	r3, #5
 8008e04:	d824      	bhi.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008e06:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0c:	08008e59 	.word	0x08008e59
 8008e10:	08008e25 	.word	0x08008e25
 8008e14:	08008e3b 	.word	0x08008e3b
 8008e18:	08008e59 	.word	0x08008e59
 8008e1c:	08008e59 	.word	0x08008e59
 8008e20:	08008e59 	.word	0x08008e59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e28:	3308      	adds	r3, #8
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f001 fd79 	bl	800a924 <RCCEx_PLL2_Config>
 8008e32:	4603      	mov	r3, r0
 8008e34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008e38:	e00f      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e3e:	3328      	adds	r3, #40	; 0x28
 8008e40:	2101      	movs	r1, #1
 8008e42:	4618      	mov	r0, r3
 8008e44:	f001 fe20 	bl	800aa88 <RCCEx_PLL3_Config>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008e4e:	e004      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008e56:	e000      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10a      	bne.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008e62:	4b96      	ldr	r3, [pc, #600]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e66:	f023 0107 	bic.w	r1, r3, #7
 8008e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e70:	4a92      	ldr	r2, [pc, #584]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008e72:	430b      	orrs	r3, r1
 8008e74:	6553      	str	r3, [r2, #84]	; 0x54
 8008e76:	e003      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e88:	f002 0304 	and.w	r3, r2, #4
 8008e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e90:	2300      	movs	r3, #0
 8008e92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e96:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	d044      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea8:	2b05      	cmp	r3, #5
 8008eaa:	d825      	bhi.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008eac:	a201      	add	r2, pc, #4	; (adr r2, 8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8008eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb2:	bf00      	nop
 8008eb4:	08008f01 	.word	0x08008f01
 8008eb8:	08008ecd 	.word	0x08008ecd
 8008ebc:	08008ee3 	.word	0x08008ee3
 8008ec0:	08008f01 	.word	0x08008f01
 8008ec4:	08008f01 	.word	0x08008f01
 8008ec8:	08008f01 	.word	0x08008f01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f001 fd25 	bl	800a924 <RCCEx_PLL2_Config>
 8008eda:	4603      	mov	r3, r0
 8008edc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008ee0:	e00f      	b.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ee6:	3328      	adds	r3, #40	; 0x28
 8008ee8:	2101      	movs	r1, #1
 8008eea:	4618      	mov	r0, r3
 8008eec:	f001 fdcc 	bl	800aa88 <RCCEx_PLL3_Config>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008ef6:	e004      	b.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008efe:	e000      	b.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10b      	bne.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f0a:	4b6c      	ldr	r3, [pc, #432]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f0e:	f023 0107 	bic.w	r1, r3, #7
 8008f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f1a:	4a68      	ldr	r2, [pc, #416]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008f1c:	430b      	orrs	r3, r1
 8008f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8008f20:	e003      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f26:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	f002 0320 	and.w	r3, r2, #32
 8008f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f40:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008f44:	460b      	mov	r3, r1
 8008f46:	4313      	orrs	r3, r2
 8008f48:	d055      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f56:	d033      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f5c:	d82c      	bhi.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f62:	d02f      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f68:	d826      	bhi.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008f6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f6e:	d02b      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008f70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f74:	d820      	bhi.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f7a:	d012      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f80:	d81a      	bhi.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d022      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008f86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f8a:	d115      	bne.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f90:	3308      	adds	r3, #8
 8008f92:	2100      	movs	r1, #0
 8008f94:	4618      	mov	r0, r3
 8008f96:	f001 fcc5 	bl	800a924 <RCCEx_PLL2_Config>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008fa0:	e015      	b.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fa6:	3328      	adds	r3, #40	; 0x28
 8008fa8:	2102      	movs	r1, #2
 8008faa:	4618      	mov	r0, r3
 8008fac:	f001 fd6c 	bl	800aa88 <RCCEx_PLL3_Config>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008fb6:	e00a      	b.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008fbe:	e006      	b.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008fc0:	bf00      	nop
 8008fc2:	e004      	b.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008fc4:	bf00      	nop
 8008fc6:	e002      	b.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008fc8:	bf00      	nop
 8008fca:	e000      	b.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10b      	bne.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008fd6:	4b39      	ldr	r3, [pc, #228]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fda:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fe6:	4a35      	ldr	r2, [pc, #212]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008fe8:	430b      	orrs	r3, r1
 8008fea:	6553      	str	r3, [r2, #84]	; 0x54
 8008fec:	e003      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ff2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009002:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009006:	2300      	movs	r3, #0
 8009008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800900c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009010:	460b      	mov	r3, r1
 8009012:	4313      	orrs	r3, r2
 8009014:	d058      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800901a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800901e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009022:	d033      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009024:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009028:	d82c      	bhi.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800902a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800902e:	d02f      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009034:	d826      	bhi.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009036:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800903a:	d02b      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800903c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009040:	d820      	bhi.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009046:	d012      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800904c:	d81a      	bhi.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800904e:	2b00      	cmp	r3, #0
 8009050:	d022      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009056:	d115      	bne.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800905c:	3308      	adds	r3, #8
 800905e:	2100      	movs	r1, #0
 8009060:	4618      	mov	r0, r3
 8009062:	f001 fc5f 	bl	800a924 <RCCEx_PLL2_Config>
 8009066:	4603      	mov	r3, r0
 8009068:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800906c:	e015      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800906e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009072:	3328      	adds	r3, #40	; 0x28
 8009074:	2102      	movs	r1, #2
 8009076:	4618      	mov	r0, r3
 8009078:	f001 fd06 	bl	800aa88 <RCCEx_PLL3_Config>
 800907c:	4603      	mov	r3, r0
 800907e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009082:	e00a      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800908a:	e006      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800908c:	bf00      	nop
 800908e:	e004      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009090:	bf00      	nop
 8009092:	e002      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009094:	bf00      	nop
 8009096:	e000      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800909a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10e      	bne.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80090a2:	4b06      	ldr	r3, [pc, #24]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80090a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80090aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090b2:	4a02      	ldr	r2, [pc, #8]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80090b4:	430b      	orrs	r3, r1
 80090b6:	6593      	str	r3, [r2, #88]	; 0x58
 80090b8:	e006      	b.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80090ba:	bf00      	nop
 80090bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80090c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80090d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090d8:	2300      	movs	r3, #0
 80090da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80090de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80090e2:	460b      	mov	r3, r1
 80090e4:	4313      	orrs	r3, r2
 80090e6:	d055      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80090e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80090f4:	d033      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80090f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80090fa:	d82c      	bhi.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80090fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009100:	d02f      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009106:	d826      	bhi.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009108:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800910c:	d02b      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800910e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009112:	d820      	bhi.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009118:	d012      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800911a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800911e:	d81a      	bhi.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009120:	2b00      	cmp	r3, #0
 8009122:	d022      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009128:	d115      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800912a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800912e:	3308      	adds	r3, #8
 8009130:	2100      	movs	r1, #0
 8009132:	4618      	mov	r0, r3
 8009134:	f001 fbf6 	bl	800a924 <RCCEx_PLL2_Config>
 8009138:	4603      	mov	r3, r0
 800913a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800913e:	e015      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009144:	3328      	adds	r3, #40	; 0x28
 8009146:	2102      	movs	r1, #2
 8009148:	4618      	mov	r0, r3
 800914a:	f001 fc9d 	bl	800aa88 <RCCEx_PLL3_Config>
 800914e:	4603      	mov	r3, r0
 8009150:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009154:	e00a      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800915c:	e006      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800915e:	bf00      	nop
 8009160:	e004      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009162:	bf00      	nop
 8009164:	e002      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009166:	bf00      	nop
 8009168:	e000      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800916a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800916c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10b      	bne.n	800918c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009174:	4ba0      	ldr	r3, [pc, #640]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009178:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800917c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009180:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009184:	4a9c      	ldr	r2, [pc, #624]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009186:	430b      	orrs	r3, r1
 8009188:	6593      	str	r3, [r2, #88]	; 0x58
 800918a:	e003      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800918c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009190:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919c:	f002 0308 	and.w	r3, r2, #8
 80091a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091a4:	2300      	movs	r3, #0
 80091a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80091aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80091ae:	460b      	mov	r3, r1
 80091b0:	4313      	orrs	r3, r2
 80091b2:	d01e      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80091b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091c0:	d10c      	bne.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80091c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091c6:	3328      	adds	r3, #40	; 0x28
 80091c8:	2102      	movs	r1, #2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f001 fc5c 	bl	800aa88 <RCCEx_PLL3_Config>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80091dc:	4b86      	ldr	r3, [pc, #536]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80091de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091ec:	4a82      	ldr	r2, [pc, #520]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80091ee:	430b      	orrs	r3, r1
 80091f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80091f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fa:	f002 0310 	and.w	r3, r2, #16
 80091fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009202:	2300      	movs	r3, #0
 8009204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009208:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800920c:	460b      	mov	r3, r1
 800920e:	4313      	orrs	r3, r2
 8009210:	d01e      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800921a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800921e:	d10c      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009224:	3328      	adds	r3, #40	; 0x28
 8009226:	2102      	movs	r1, #2
 8009228:	4618      	mov	r0, r3
 800922a:	f001 fc2d 	bl	800aa88 <RCCEx_PLL3_Config>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800923a:	4b6f      	ldr	r3, [pc, #444]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800923c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800923e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800924a:	4a6b      	ldr	r2, [pc, #428]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800924c:	430b      	orrs	r3, r1
 800924e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800925c:	67bb      	str	r3, [r7, #120]	; 0x78
 800925e:	2300      	movs	r3, #0
 8009260:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009262:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009266:	460b      	mov	r3, r1
 8009268:	4313      	orrs	r3, r2
 800926a:	d03e      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800926c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009270:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009278:	d022      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800927a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800927e:	d81b      	bhi.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009280:	2b00      	cmp	r3, #0
 8009282:	d003      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009288:	d00b      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800928a:	e015      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800928c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009290:	3308      	adds	r3, #8
 8009292:	2100      	movs	r1, #0
 8009294:	4618      	mov	r0, r3
 8009296:	f001 fb45 	bl	800a924 <RCCEx_PLL2_Config>
 800929a:	4603      	mov	r3, r0
 800929c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80092a0:	e00f      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092a6:	3328      	adds	r3, #40	; 0x28
 80092a8:	2102      	movs	r1, #2
 80092aa:	4618      	mov	r0, r3
 80092ac:	f001 fbec 	bl	800aa88 <RCCEx_PLL3_Config>
 80092b0:	4603      	mov	r3, r0
 80092b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80092b6:	e004      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80092be:	e000      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80092c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10b      	bne.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092ca:	4b4b      	ldr	r3, [pc, #300]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80092cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80092d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092da:	4a47      	ldr	r2, [pc, #284]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80092dc:	430b      	orrs	r3, r1
 80092de:	6593      	str	r3, [r2, #88]	; 0x58
 80092e0:	e003      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80092ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80092f6:	673b      	str	r3, [r7, #112]	; 0x70
 80092f8:	2300      	movs	r3, #0
 80092fa:	677b      	str	r3, [r7, #116]	; 0x74
 80092fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009300:	460b      	mov	r3, r1
 8009302:	4313      	orrs	r3, r2
 8009304:	d03b      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800930a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800930e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009312:	d01f      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009314:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009318:	d818      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800931a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800931e:	d003      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009320:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009324:	d007      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009326:	e011      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009328:	4b33      	ldr	r3, [pc, #204]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800932a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932c:	4a32      	ldr	r2, [pc, #200]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800932e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009332:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009334:	e00f      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800933a:	3328      	adds	r3, #40	; 0x28
 800933c:	2101      	movs	r1, #1
 800933e:	4618      	mov	r0, r3
 8009340:	f001 fba2 	bl	800aa88 <RCCEx_PLL3_Config>
 8009344:	4603      	mov	r3, r0
 8009346:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800934a:	e004      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009352:	e000      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009356:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10b      	bne.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800935e:	4b26      	ldr	r3, [pc, #152]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009362:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800936a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800936e:	4a22      	ldr	r2, [pc, #136]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009370:	430b      	orrs	r3, r1
 8009372:	6553      	str	r3, [r2, #84]	; 0x54
 8009374:	e003      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009376:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800937a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800937e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800938a:	66bb      	str	r3, [r7, #104]	; 0x68
 800938c:	2300      	movs	r3, #0
 800938e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009390:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009394:	460b      	mov	r3, r1
 8009396:	4313      	orrs	r3, r2
 8009398:	d034      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800939a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800939e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80093a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093a8:	d007      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80093aa:	e011      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093ac:	4b12      	ldr	r3, [pc, #72]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	4a11      	ldr	r2, [pc, #68]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80093b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80093b8:	e00e      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80093ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093be:	3308      	adds	r3, #8
 80093c0:	2102      	movs	r1, #2
 80093c2:	4618      	mov	r0, r3
 80093c4:	f001 faae 	bl	800a924 <RCCEx_PLL2_Config>
 80093c8:	4603      	mov	r3, r0
 80093ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80093ce:	e003      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80093d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10d      	bne.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80093e0:	4b05      	ldr	r3, [pc, #20]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80093e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ee:	4a02      	ldr	r2, [pc, #8]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80093f0:	430b      	orrs	r3, r1
 80093f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80093f4:	e006      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80093f6:	bf00      	nop
 80093f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009400:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009410:	663b      	str	r3, [r7, #96]	; 0x60
 8009412:	2300      	movs	r3, #0
 8009414:	667b      	str	r3, [r7, #100]	; 0x64
 8009416:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800941a:	460b      	mov	r3, r1
 800941c:	4313      	orrs	r3, r2
 800941e:	d00c      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009424:	3328      	adds	r3, #40	; 0x28
 8009426:	2102      	movs	r1, #2
 8009428:	4618      	mov	r0, r3
 800942a:	f001 fb2d 	bl	800aa88 <RCCEx_PLL3_Config>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800943a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800943e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009442:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009446:	65bb      	str	r3, [r7, #88]	; 0x58
 8009448:	2300      	movs	r3, #0
 800944a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800944c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009450:	460b      	mov	r3, r1
 8009452:	4313      	orrs	r3, r2
 8009454:	d036      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800945a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800945c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009460:	d018      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009466:	d811      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800946c:	d014      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800946e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009472:	d80b      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009474:	2b00      	cmp	r3, #0
 8009476:	d011      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800947c:	d106      	bne.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800947e:	4bb7      	ldr	r3, [pc, #732]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009482:	4ab6      	ldr	r2, [pc, #728]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009488:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800948a:	e008      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009492:	e004      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009494:	bf00      	nop
 8009496:	e002      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009498:	bf00      	nop
 800949a:	e000      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800949c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800949e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10a      	bne.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80094a6:	4bad      	ldr	r3, [pc, #692]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80094a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80094ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094b4:	4aa9      	ldr	r2, [pc, #676]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80094b6:	430b      	orrs	r3, r1
 80094b8:	6553      	str	r3, [r2, #84]	; 0x54
 80094ba:	e003      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80094c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094cc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80094d0:	653b      	str	r3, [r7, #80]	; 0x50
 80094d2:	2300      	movs	r3, #0
 80094d4:	657b      	str	r3, [r7, #84]	; 0x54
 80094d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80094da:	460b      	mov	r3, r1
 80094dc:	4313      	orrs	r3, r2
 80094de:	d009      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80094e0:	4b9e      	ldr	r3, [pc, #632]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80094e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80094e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ee:	4a9b      	ldr	r2, [pc, #620]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80094f0:	430b      	orrs	r3, r1
 80094f2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80094f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009500:	64bb      	str	r3, [r7, #72]	; 0x48
 8009502:	2300      	movs	r3, #0
 8009504:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009506:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800950a:	460b      	mov	r3, r1
 800950c:	4313      	orrs	r3, r2
 800950e:	d009      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009510:	4b92      	ldr	r3, [pc, #584]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009514:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800951c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800951e:	4a8f      	ldr	r2, [pc, #572]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009520:	430b      	orrs	r3, r1
 8009522:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009530:	643b      	str	r3, [r7, #64]	; 0x40
 8009532:	2300      	movs	r3, #0
 8009534:	647b      	str	r3, [r7, #68]	; 0x44
 8009536:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800953a:	460b      	mov	r3, r1
 800953c:	4313      	orrs	r3, r2
 800953e:	d00e      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009540:	4b86      	ldr	r3, [pc, #536]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	4a85      	ldr	r2, [pc, #532]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009546:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800954a:	6113      	str	r3, [r2, #16]
 800954c:	4b83      	ldr	r3, [pc, #524]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800954e:	6919      	ldr	r1, [r3, #16]
 8009550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009554:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009558:	4a80      	ldr	r2, [pc, #512]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800955a:	430b      	orrs	r3, r1
 800955c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800955e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009566:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800956a:	63bb      	str	r3, [r7, #56]	; 0x38
 800956c:	2300      	movs	r3, #0
 800956e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009570:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009574:	460b      	mov	r3, r1
 8009576:	4313      	orrs	r3, r2
 8009578:	d009      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800957a:	4b78      	ldr	r3, [pc, #480]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800957c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800957e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009588:	4a74      	ldr	r2, [pc, #464]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800958a:	430b      	orrs	r3, r1
 800958c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800958e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800959a:	633b      	str	r3, [r7, #48]	; 0x30
 800959c:	2300      	movs	r3, #0
 800959e:	637b      	str	r3, [r7, #52]	; 0x34
 80095a0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80095a4:	460b      	mov	r3, r1
 80095a6:	4313      	orrs	r3, r2
 80095a8:	d00a      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80095aa:	4b6c      	ldr	r3, [pc, #432]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80095ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ae:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80095b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ba:	4a68      	ldr	r2, [pc, #416]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80095bc:	430b      	orrs	r3, r1
 80095be:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80095c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	2100      	movs	r1, #0
 80095ca:	62b9      	str	r1, [r7, #40]	; 0x28
 80095cc:	f003 0301 	and.w	r3, r3, #1
 80095d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095d2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80095d6:	460b      	mov	r3, r1
 80095d8:	4313      	orrs	r3, r2
 80095da:	d011      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e0:	3308      	adds	r3, #8
 80095e2:	2100      	movs	r1, #0
 80095e4:	4618      	mov	r0, r3
 80095e6:	f001 f99d 	bl	800a924 <RCCEx_PLL2_Config>
 80095ea:	4603      	mov	r3, r0
 80095ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80095f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d003      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80095fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	2100      	movs	r1, #0
 800960a:	6239      	str	r1, [r7, #32]
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	627b      	str	r3, [r7, #36]	; 0x24
 8009612:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009616:	460b      	mov	r3, r1
 8009618:	4313      	orrs	r3, r2
 800961a:	d011      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800961c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009620:	3308      	adds	r3, #8
 8009622:	2101      	movs	r1, #1
 8009624:	4618      	mov	r0, r3
 8009626:	f001 f97d 	bl	800a924 <RCCEx_PLL2_Config>
 800962a:	4603      	mov	r3, r0
 800962c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009630:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009634:	2b00      	cmp	r3, #0
 8009636:	d003      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009638:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800963c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	2100      	movs	r1, #0
 800964a:	61b9      	str	r1, [r7, #24]
 800964c:	f003 0304 	and.w	r3, r3, #4
 8009650:	61fb      	str	r3, [r7, #28]
 8009652:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009656:	460b      	mov	r3, r1
 8009658:	4313      	orrs	r3, r2
 800965a:	d011      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800965c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009660:	3308      	adds	r3, #8
 8009662:	2102      	movs	r1, #2
 8009664:	4618      	mov	r0, r3
 8009666:	f001 f95d 	bl	800a924 <RCCEx_PLL2_Config>
 800966a:	4603      	mov	r3, r0
 800966c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009670:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009674:	2b00      	cmp	r3, #0
 8009676:	d003      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009678:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800967c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009688:	2100      	movs	r1, #0
 800968a:	6139      	str	r1, [r7, #16]
 800968c:	f003 0308 	and.w	r3, r3, #8
 8009690:	617b      	str	r3, [r7, #20]
 8009692:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009696:	460b      	mov	r3, r1
 8009698:	4313      	orrs	r3, r2
 800969a:	d011      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800969c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a0:	3328      	adds	r3, #40	; 0x28
 80096a2:	2100      	movs	r1, #0
 80096a4:	4618      	mov	r0, r3
 80096a6:	f001 f9ef 	bl	800aa88 <RCCEx_PLL3_Config>
 80096aa:	4603      	mov	r3, r0
 80096ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80096b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d003      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80096c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	2100      	movs	r1, #0
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	f003 0310 	and.w	r3, r3, #16
 80096d0:	60fb      	str	r3, [r7, #12]
 80096d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80096d6:	460b      	mov	r3, r1
 80096d8:	4313      	orrs	r3, r2
 80096da:	d011      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e0:	3328      	adds	r3, #40	; 0x28
 80096e2:	2101      	movs	r1, #1
 80096e4:	4618      	mov	r0, r3
 80096e6:	f001 f9cf 	bl	800aa88 <RCCEx_PLL3_Config>
 80096ea:	4603      	mov	r3, r0
 80096ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80096f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d003      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009708:	2100      	movs	r1, #0
 800970a:	6039      	str	r1, [r7, #0]
 800970c:	f003 0320 	and.w	r3, r3, #32
 8009710:	607b      	str	r3, [r7, #4]
 8009712:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009716:	460b      	mov	r3, r1
 8009718:	4313      	orrs	r3, r2
 800971a:	d011      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800971c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009720:	3328      	adds	r3, #40	; 0x28
 8009722:	2102      	movs	r1, #2
 8009724:	4618      	mov	r0, r3
 8009726:	f001 f9af 	bl	800aa88 <RCCEx_PLL3_Config>
 800972a:	4603      	mov	r3, r0
 800972c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009730:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009734:	2b00      	cmp	r3, #0
 8009736:	d003      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009738:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800973c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8009740:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	e000      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
}
 800974e:	4618      	mov	r0, r3
 8009750:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009754:	46bd      	mov	sp, r7
 8009756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800975a:	bf00      	nop
 800975c:	58024400 	.word	0x58024400

08009760 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b090      	sub	sp, #64	; 0x40
 8009764:	af00      	add	r7, sp, #0
 8009766:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800976a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800976e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009772:	430b      	orrs	r3, r1
 8009774:	f040 8094 	bne.w	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009778:	4b9b      	ldr	r3, [pc, #620]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800977a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800977c:	f003 0307 	and.w	r3, r3, #7
 8009780:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	2b04      	cmp	r3, #4
 8009786:	f200 8087 	bhi.w	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800978a:	a201      	add	r2, pc, #4	; (adr r2, 8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800978c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009790:	080097a5 	.word	0x080097a5
 8009794:	080097cd 	.word	0x080097cd
 8009798:	080097f5 	.word	0x080097f5
 800979c:	08009891 	.word	0x08009891
 80097a0:	0800981d 	.word	0x0800981d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097a4:	4b90      	ldr	r3, [pc, #576]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097b0:	d108      	bne.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 ff62 	bl	800a680 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097c0:	f000 bc93 	b.w	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097c8:	f000 bc8f 	b.w	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097cc:	4b86      	ldr	r3, [pc, #536]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097d8:	d108      	bne.n	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097da:	f107 0318 	add.w	r3, r7, #24
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 fca6 	bl	800a130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097e8:	f000 bc7f 	b.w	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80097ec:	2300      	movs	r3, #0
 80097ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097f0:	f000 bc7b 	b.w	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097f4:	4b7c      	ldr	r3, [pc, #496]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009800:	d108      	bne.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009802:	f107 030c 	add.w	r3, r7, #12
 8009806:	4618      	mov	r0, r3
 8009808:	f000 fde6 	bl	800a3d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009810:	f000 bc6b 	b.w	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009818:	f000 bc67 	b.w	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800981c:	4b72      	ldr	r3, [pc, #456]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800981e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009820:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009824:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009826:	4b70      	ldr	r3, [pc, #448]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0304 	and.w	r3, r3, #4
 800982e:	2b04      	cmp	r3, #4
 8009830:	d10c      	bne.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009834:	2b00      	cmp	r3, #0
 8009836:	d109      	bne.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009838:	4b6b      	ldr	r3, [pc, #428]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	08db      	lsrs	r3, r3, #3
 800983e:	f003 0303 	and.w	r3, r3, #3
 8009842:	4a6a      	ldr	r2, [pc, #424]	; (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009844:	fa22 f303 	lsr.w	r3, r2, r3
 8009848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800984a:	e01f      	b.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800984c:	4b66      	ldr	r3, [pc, #408]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009858:	d106      	bne.n	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800985a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800985c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009860:	d102      	bne.n	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009862:	4b63      	ldr	r3, [pc, #396]	; (80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009864:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009866:	e011      	b.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009868:	4b5f      	ldr	r3, [pc, #380]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009874:	d106      	bne.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800987c:	d102      	bne.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800987e:	4b5d      	ldr	r3, [pc, #372]	; (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009880:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009882:	e003      	b.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009884:	2300      	movs	r3, #0
 8009886:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009888:	f000 bc2f 	b.w	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800988c:	f000 bc2d 	b.w	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009890:	4b59      	ldr	r3, [pc, #356]	; (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009894:	f000 bc29 	b.w	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009898:	2300      	movs	r3, #0
 800989a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800989c:	f000 bc25 	b.w	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80098a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098a4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80098a8:	430b      	orrs	r3, r1
 80098aa:	f040 80a7 	bne.w	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80098ae:	4b4e      	ldr	r3, [pc, #312]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80098b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80098b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80098b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098be:	d054      	beq.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80098c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098c6:	f200 808b 	bhi.w	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80098ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098d0:	f000 8083 	beq.w	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80098d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098da:	f200 8081 	bhi.w	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098e4:	d02f      	beq.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80098e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098ec:	d878      	bhi.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80098ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d004      	beq.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80098f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098fa:	d012      	beq.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80098fc:	e070      	b.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098fe:	4b3a      	ldr	r3, [pc, #232]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800990a:	d107      	bne.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800990c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009910:	4618      	mov	r0, r3
 8009912:	f000 feb5 	bl	800a680 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009918:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800991a:	e3e6      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800991c:	2300      	movs	r3, #0
 800991e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009920:	e3e3      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009922:	4b31      	ldr	r3, [pc, #196]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800992a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800992e:	d107      	bne.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009930:	f107 0318 	add.w	r3, r7, #24
 8009934:	4618      	mov	r0, r3
 8009936:	f000 fbfb 	bl	800a130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800993e:	e3d4      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009940:	2300      	movs	r3, #0
 8009942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009944:	e3d1      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009946:	4b28      	ldr	r3, [pc, #160]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800994e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009952:	d107      	bne.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009954:	f107 030c 	add.w	r3, r7, #12
 8009958:	4618      	mov	r0, r3
 800995a:	f000 fd3d 	bl	800a3d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009962:	e3c2      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009964:	2300      	movs	r3, #0
 8009966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009968:	e3bf      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800996a:	4b1f      	ldr	r3, [pc, #124]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800996c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800996e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009972:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009974:	4b1c      	ldr	r3, [pc, #112]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0304 	and.w	r3, r3, #4
 800997c:	2b04      	cmp	r3, #4
 800997e:	d10c      	bne.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8009980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009982:	2b00      	cmp	r3, #0
 8009984:	d109      	bne.n	800999a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009986:	4b18      	ldr	r3, [pc, #96]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	08db      	lsrs	r3, r3, #3
 800998c:	f003 0303 	and.w	r3, r3, #3
 8009990:	4a16      	ldr	r2, [pc, #88]	; (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009992:	fa22 f303 	lsr.w	r3, r2, r3
 8009996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009998:	e01e      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800999a:	4b13      	ldr	r3, [pc, #76]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099a6:	d106      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80099a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099ae:	d102      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80099b0:	4b0f      	ldr	r3, [pc, #60]	; (80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80099b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099b4:	e010      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099b6:	4b0c      	ldr	r3, [pc, #48]	; (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099c2:	d106      	bne.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80099c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099ca:	d102      	bne.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80099cc:	4b09      	ldr	r3, [pc, #36]	; (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099d0:	e002      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80099d6:	e388      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80099d8:	e387      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80099da:	4b07      	ldr	r3, [pc, #28]	; (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80099dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099de:	e384      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099e4:	e381      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80099e6:	bf00      	nop
 80099e8:	58024400 	.word	0x58024400
 80099ec:	03d09000 	.word	0x03d09000
 80099f0:	003d0900 	.word	0x003d0900
 80099f4:	017d7840 	.word	0x017d7840
 80099f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80099fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a00:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009a04:	430b      	orrs	r3, r1
 8009a06:	f040 809c 	bne.w	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009a0a:	4b9e      	ldr	r3, [pc, #632]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a0e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009a12:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a1a:	d054      	beq.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a22:	f200 808b 	bhi.w	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a2c:	f000 8083 	beq.w	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8009a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a36:	f200 8081 	bhi.w	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a40:	d02f      	beq.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a48:	d878      	bhi.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d004      	beq.n	8009a5a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a56:	d012      	beq.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009a58:	e070      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a5a:	4b8a      	ldr	r3, [pc, #552]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a66:	d107      	bne.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 fe07 	bl	800a680 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a76:	e338      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a7c:	e335      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a7e:	4b81      	ldr	r3, [pc, #516]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a8a:	d107      	bne.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a8c:	f107 0318 	add.w	r3, r7, #24
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 fb4d 	bl	800a130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a9a:	e326      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009aa0:	e323      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009aa2:	4b78      	ldr	r3, [pc, #480]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009aae:	d107      	bne.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ab0:	f107 030c 	add.w	r3, r7, #12
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 fc8f 	bl	800a3d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009abe:	e314      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ac4:	e311      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ac6:	4b6f      	ldr	r3, [pc, #444]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ace:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ad0:	4b6c      	ldr	r3, [pc, #432]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 0304 	and.w	r3, r3, #4
 8009ad8:	2b04      	cmp	r3, #4
 8009ada:	d10c      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d109      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ae2:	4b68      	ldr	r3, [pc, #416]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	08db      	lsrs	r3, r3, #3
 8009ae8:	f003 0303 	and.w	r3, r3, #3
 8009aec:	4a66      	ldr	r2, [pc, #408]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009aee:	fa22 f303 	lsr.w	r3, r2, r3
 8009af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009af4:	e01e      	b.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009af6:	4b63      	ldr	r3, [pc, #396]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b02:	d106      	bne.n	8009b12 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b0a:	d102      	bne.n	8009b12 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009b0c:	4b5f      	ldr	r3, [pc, #380]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b10:	e010      	b.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b12:	4b5c      	ldr	r3, [pc, #368]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b1e:	d106      	bne.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8009b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b26:	d102      	bne.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009b28:	4b59      	ldr	r3, [pc, #356]	; (8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b2c:	e002      	b.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009b32:	e2da      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009b34:	e2d9      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b36:	4b57      	ldr	r3, [pc, #348]	; (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009b38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b3a:	e2d6      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b40:	e2d3      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b46:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009b4a:	430b      	orrs	r3, r1
 8009b4c:	f040 80a7 	bne.w	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009b50:	4b4c      	ldr	r3, [pc, #304]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b54:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009b58:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b60:	d055      	beq.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8009b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b68:	f200 8096 	bhi.w	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b72:	f000 8084 	beq.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8009b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b7c:	f200 808c 	bhi.w	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b86:	d030      	beq.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b8e:	f200 8083 	bhi.w	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d004      	beq.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8009b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b9e:	d012      	beq.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8009ba0:	e07a      	b.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ba2:	4b38      	ldr	r3, [pc, #224]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009baa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bae:	d107      	bne.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 fd63 	bl	800a680 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bbe:	e294      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bc4:	e291      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bc6:	4b2f      	ldr	r3, [pc, #188]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bd2:	d107      	bne.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bd4:	f107 0318 	add.w	r3, r7, #24
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f000 faa9 	bl	800a130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009be2:	e282      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009be8:	e27f      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bea:	4b26      	ldr	r3, [pc, #152]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bf6:	d107      	bne.n	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bf8:	f107 030c 	add.w	r3, r7, #12
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 fbeb 	bl	800a3d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c06:	e270      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c0c:	e26d      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c0e:	4b1d      	ldr	r3, [pc, #116]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c16:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c18:	4b1a      	ldr	r3, [pc, #104]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0304 	and.w	r3, r3, #4
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	d10c      	bne.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d109      	bne.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c2a:	4b16      	ldr	r3, [pc, #88]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	08db      	lsrs	r3, r3, #3
 8009c30:	f003 0303 	and.w	r3, r3, #3
 8009c34:	4a14      	ldr	r2, [pc, #80]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009c36:	fa22 f303 	lsr.w	r3, r2, r3
 8009c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c3c:	e01e      	b.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c3e:	4b11      	ldr	r3, [pc, #68]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c4a:	d106      	bne.n	8009c5a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c52:	d102      	bne.n	8009c5a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009c54:	4b0d      	ldr	r3, [pc, #52]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c58:	e010      	b.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c5a:	4b0a      	ldr	r3, [pc, #40]	; (8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c66:	d106      	bne.n	8009c76 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c6e:	d102      	bne.n	8009c76 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009c70:	4b07      	ldr	r3, [pc, #28]	; (8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c74:	e002      	b.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009c7a:	e236      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009c7c:	e235      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009c7e:	4b05      	ldr	r3, [pc, #20]	; (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c82:	e232      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009c84:	58024400 	.word	0x58024400
 8009c88:	03d09000 	.word	0x03d09000
 8009c8c:	003d0900 	.word	0x003d0900
 8009c90:	017d7840 	.word	0x017d7840
 8009c94:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c9c:	e225      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ca2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009ca6:	430b      	orrs	r3, r1
 8009ca8:	f040 8085 	bne.w	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009cac:	4b9c      	ldr	r3, [pc, #624]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009cb4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009cbc:	d06b      	beq.n	8009d96 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8009cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009cc4:	d874      	bhi.n	8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ccc:	d056      	beq.n	8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8009cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009cd4:	d86c      	bhi.n	8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009cdc:	d03b      	beq.n	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ce4:	d864      	bhi.n	8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cec:	d021      	beq.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8009cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cf4:	d85c      	bhi.n	8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d004      	beq.n	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d02:	d004      	beq.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8009d04:	e054      	b.n	8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009d06:	f7fe fb75 	bl	80083f4 <HAL_RCC_GetPCLK1Freq>
 8009d0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d0c:	e1ed      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d0e:	4b84      	ldr	r3, [pc, #528]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d1a:	d107      	bne.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d1c:	f107 0318 	add.w	r3, r7, #24
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 fa05 	bl	800a130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d2a:	e1de      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d30:	e1db      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d32:	4b7b      	ldr	r3, [pc, #492]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d3e:	d107      	bne.n	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d40:	f107 030c 	add.w	r3, r7, #12
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 fb47 	bl	800a3d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d4e:	e1cc      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009d50:	2300      	movs	r3, #0
 8009d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d54:	e1c9      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009d56:	4b72      	ldr	r3, [pc, #456]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 0304 	and.w	r3, r3, #4
 8009d5e:	2b04      	cmp	r3, #4
 8009d60:	d109      	bne.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d62:	4b6f      	ldr	r3, [pc, #444]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	08db      	lsrs	r3, r3, #3
 8009d68:	f003 0303 	and.w	r3, r3, #3
 8009d6c:	4a6d      	ldr	r2, [pc, #436]	; (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d74:	e1b9      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009d76:	2300      	movs	r3, #0
 8009d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d7a:	e1b6      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009d7c:	4b68      	ldr	r3, [pc, #416]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d88:	d102      	bne.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8009d8a:	4b67      	ldr	r3, [pc, #412]	; (8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d8e:	e1ac      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009d90:	2300      	movs	r3, #0
 8009d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d94:	e1a9      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009d96:	4b62      	ldr	r3, [pc, #392]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009da2:	d102      	bne.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8009da4:	4b61      	ldr	r3, [pc, #388]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009da8:	e19f      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dae:	e19c      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009db4:	e199      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dba:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009dbe:	430b      	orrs	r3, r1
 8009dc0:	d173      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009dc2:	4b57      	ldr	r3, [pc, #348]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009dca:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dd2:	d02f      	beq.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8009dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dda:	d863      	bhi.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8009ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d004      	beq.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8009de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009de8:	d012      	beq.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8009dea:	e05b      	b.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dec:	4b4c      	ldr	r3, [pc, #304]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009df8:	d107      	bne.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dfa:	f107 0318 	add.w	r3, r7, #24
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 f996 	bl	800a130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e08:	e16f      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e0e:	e16c      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e10:	4b43      	ldr	r3, [pc, #268]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e1c:	d107      	bne.n	8009e2e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e1e:	f107 030c 	add.w	r3, r7, #12
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fad8 	bl	800a3d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e2c:	e15d      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e32:	e15a      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e34:	4b3a      	ldr	r3, [pc, #232]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e3c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e3e:	4b38      	ldr	r3, [pc, #224]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 0304 	and.w	r3, r3, #4
 8009e46:	2b04      	cmp	r3, #4
 8009e48:	d10c      	bne.n	8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d109      	bne.n	8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e50:	4b33      	ldr	r3, [pc, #204]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	08db      	lsrs	r3, r3, #3
 8009e56:	f003 0303 	and.w	r3, r3, #3
 8009e5a:	4a32      	ldr	r2, [pc, #200]	; (8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e62:	e01e      	b.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e64:	4b2e      	ldr	r3, [pc, #184]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e70:	d106      	bne.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8009e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e78:	d102      	bne.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e7a:	4b2b      	ldr	r3, [pc, #172]	; (8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e7e:	e010      	b.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e80:	4b27      	ldr	r3, [pc, #156]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e8c:	d106      	bne.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8009e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e94:	d102      	bne.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e96:	4b25      	ldr	r3, [pc, #148]	; (8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e9a:	e002      	b.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009ea0:	e123      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009ea2:	e122      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ea8:	e11f      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eae:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009eb2:	430b      	orrs	r3, r1
 8009eb4:	d13c      	bne.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009eb6:	4b1a      	ldr	r3, [pc, #104]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ebe:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d004      	beq.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ecc:	d012      	beq.n	8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8009ece:	e023      	b.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ed0:	4b13      	ldr	r3, [pc, #76]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ed8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009edc:	d107      	bne.n	8009eee <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 fbcc 	bl	800a680 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009eec:	e0fd      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ef2:	e0fa      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ef4:	4b0a      	ldr	r3, [pc, #40]	; (8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f00:	d107      	bne.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f02:	f107 0318 	add.w	r3, r7, #24
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 f912 	bl	800a130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f10:	e0eb      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f12:	2300      	movs	r3, #0
 8009f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f16:	e0e8      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f1c:	e0e5      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009f1e:	bf00      	nop
 8009f20:	58024400 	.word	0x58024400
 8009f24:	03d09000 	.word	0x03d09000
 8009f28:	003d0900 	.word	0x003d0900
 8009f2c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f34:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009f38:	430b      	orrs	r3, r1
 8009f3a:	f040 8085 	bne.w	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009f3e:	4b6d      	ldr	r3, [pc, #436]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f42:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009f46:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f4e:	d06b      	beq.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f56:	d874      	bhi.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f5e:	d056      	beq.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f66:	d86c      	bhi.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f6e:	d03b      	beq.n	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8009f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f76:	d864      	bhi.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f7e:	d021      	beq.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8009f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f86:	d85c      	bhi.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d004      	beq.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8009f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f94:	d004      	beq.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8009f96:	e054      	b.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009f98:	f000 f8b4 	bl	800a104 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f9c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f9e:	e0a4      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fa0:	4b54      	ldr	r3, [pc, #336]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009fac:	d107      	bne.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fae:	f107 0318 	add.w	r3, r7, #24
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 f8bc 	bl	800a130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fbc:	e095      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fc2:	e092      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009fc4:	4b4b      	ldr	r3, [pc, #300]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fd0:	d107      	bne.n	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fd2:	f107 030c 	add.w	r3, r7, #12
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 f9fe 	bl	800a3d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fe0:	e083      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fe6:	e080      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009fe8:	4b42      	ldr	r3, [pc, #264]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0304 	and.w	r3, r3, #4
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	d109      	bne.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ff4:	4b3f      	ldr	r3, [pc, #252]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	08db      	lsrs	r3, r3, #3
 8009ffa:	f003 0303 	and.w	r3, r3, #3
 8009ffe:	4a3e      	ldr	r2, [pc, #248]	; (800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a000:	fa22 f303 	lsr.w	r3, r2, r3
 800a004:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a006:	e070      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a008:	2300      	movs	r3, #0
 800a00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a00c:	e06d      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a00e:	4b39      	ldr	r3, [pc, #228]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a01a:	d102      	bne.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a01c:	4b37      	ldr	r3, [pc, #220]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a020:	e063      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a022:	2300      	movs	r3, #0
 800a024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a026:	e060      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a028:	4b32      	ldr	r3, [pc, #200]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a034:	d102      	bne.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a036:	4b32      	ldr	r3, [pc, #200]	; (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a038:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a03a:	e056      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a03c:	2300      	movs	r3, #0
 800a03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a040:	e053      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a042:	2300      	movs	r3, #0
 800a044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a046:	e050      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a04c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a050:	430b      	orrs	r3, r1
 800a052:	d148      	bne.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a054:	4b27      	ldr	r3, [pc, #156]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a058:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a05c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a064:	d02a      	beq.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a06c:	d838      	bhi.n	800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a070:	2b00      	cmp	r3, #0
 800a072:	d004      	beq.n	800a07e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a07a:	d00d      	beq.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a07c:	e030      	b.n	800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a07e:	4b1d      	ldr	r3, [pc, #116]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a08a:	d102      	bne.n	800a092 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a08c:	4b1c      	ldr	r3, [pc, #112]	; (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a08e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a090:	e02b      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a096:	e028      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a098:	4b16      	ldr	r3, [pc, #88]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0a4:	d107      	bne.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 fae8 	bl	800a680 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0b4:	e019      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0ba:	e016      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0bc:	4b0d      	ldr	r3, [pc, #52]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0c8:	d107      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0ca:	f107 0318 	add.w	r3, r7, #24
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 f82e 	bl	800a130 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0d8:	e007      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0de:	e004      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0e4:	e001      	b.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3740      	adds	r7, #64	; 0x40
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	58024400 	.word	0x58024400
 800a0f8:	03d09000 	.word	0x03d09000
 800a0fc:	003d0900 	.word	0x003d0900
 800a100:	017d7840 	.word	0x017d7840

0800a104 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a108:	f7fe f944 	bl	8008394 <HAL_RCC_GetHCLKFreq>
 800a10c:	4602      	mov	r2, r0
 800a10e:	4b06      	ldr	r3, [pc, #24]	; (800a128 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	091b      	lsrs	r3, r3, #4
 800a114:	f003 0307 	and.w	r3, r3, #7
 800a118:	4904      	ldr	r1, [pc, #16]	; (800a12c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a11a:	5ccb      	ldrb	r3, [r1, r3]
 800a11c:	f003 031f 	and.w	r3, r3, #31
 800a120:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a124:	4618      	mov	r0, r3
 800a126:	bd80      	pop	{r7, pc}
 800a128:	58024400 	.word	0x58024400
 800a12c:	08012c10 	.word	0x08012c10

0800a130 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a130:	b480      	push	{r7}
 800a132:	b089      	sub	sp, #36	; 0x24
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a138:	4ba1      	ldr	r3, [pc, #644]	; (800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a13c:	f003 0303 	and.w	r3, r3, #3
 800a140:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a142:	4b9f      	ldr	r3, [pc, #636]	; (800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a146:	0b1b      	lsrs	r3, r3, #12
 800a148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a14c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a14e:	4b9c      	ldr	r3, [pc, #624]	; (800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a152:	091b      	lsrs	r3, r3, #4
 800a154:	f003 0301 	and.w	r3, r3, #1
 800a158:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a15a:	4b99      	ldr	r3, [pc, #612]	; (800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a15e:	08db      	lsrs	r3, r3, #3
 800a160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	fb02 f303 	mul.w	r3, r2, r3
 800a16a:	ee07 3a90 	vmov	s15, r3
 800a16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a172:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	f000 8111 	beq.w	800a3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	2b02      	cmp	r3, #2
 800a182:	f000 8083 	beq.w	800a28c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	2b02      	cmp	r3, #2
 800a18a:	f200 80a1 	bhi.w	800a2d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d003      	beq.n	800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d056      	beq.n	800a248 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a19a:	e099      	b.n	800a2d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a19c:	4b88      	ldr	r3, [pc, #544]	; (800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0320 	and.w	r3, r3, #32
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d02d      	beq.n	800a204 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1a8:	4b85      	ldr	r3, [pc, #532]	; (800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	08db      	lsrs	r3, r3, #3
 800a1ae:	f003 0303 	and.w	r3, r3, #3
 800a1b2:	4a84      	ldr	r2, [pc, #528]	; (800a3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a1b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a1b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	ee07 3a90 	vmov	s15, r3
 800a1c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	ee07 3a90 	vmov	s15, r3
 800a1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1d2:	4b7b      	ldr	r3, [pc, #492]	; (800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1da:	ee07 3a90 	vmov	s15, r3
 800a1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a202:	e087      	b.n	800a314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	ee07 3a90 	vmov	s15, r3
 800a20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a20e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a3cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a216:	4b6a      	ldr	r3, [pc, #424]	; (800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a21e:	ee07 3a90 	vmov	s15, r3
 800a222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a226:	ed97 6a03 	vldr	s12, [r7, #12]
 800a22a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a246:	e065      	b.n	800a314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	ee07 3a90 	vmov	s15, r3
 800a24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a252:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a25a:	4b59      	ldr	r3, [pc, #356]	; (800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a262:	ee07 3a90 	vmov	s15, r3
 800a266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a26a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a26e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a27a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a27e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a282:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a28a:	e043      	b.n	800a314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	ee07 3a90 	vmov	s15, r3
 800a292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a296:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a29a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a29e:	4b48      	ldr	r3, [pc, #288]	; (800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2a6:	ee07 3a90 	vmov	s15, r3
 800a2aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2ce:	e021      	b.n	800a314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	ee07 3a90 	vmov	s15, r3
 800a2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a2de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2e2:	4b37      	ldr	r3, [pc, #220]	; (800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ea:	ee07 3a90 	vmov	s15, r3
 800a2ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a30a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a30e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a312:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a314:	4b2a      	ldr	r3, [pc, #168]	; (800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a318:	0a5b      	lsrs	r3, r3, #9
 800a31a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a31e:	ee07 3a90 	vmov	s15, r3
 800a322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a32a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a32e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a33a:	ee17 2a90 	vmov	r2, s15
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a342:	4b1f      	ldr	r3, [pc, #124]	; (800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a346:	0c1b      	lsrs	r3, r3, #16
 800a348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a34c:	ee07 3a90 	vmov	s15, r3
 800a350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a354:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a35c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a368:	ee17 2a90 	vmov	r2, s15
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a370:	4b13      	ldr	r3, [pc, #76]	; (800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a374:	0e1b      	lsrs	r3, r3, #24
 800a376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a37a:	ee07 3a90 	vmov	s15, r3
 800a37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a382:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a38a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a38e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a396:	ee17 2a90 	vmov	r2, s15
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a39e:	e008      	b.n	800a3b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	609a      	str	r2, [r3, #8]
}
 800a3b2:	bf00      	nop
 800a3b4:	3724      	adds	r7, #36	; 0x24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	58024400 	.word	0x58024400
 800a3c4:	03d09000 	.word	0x03d09000
 800a3c8:	46000000 	.word	0x46000000
 800a3cc:	4c742400 	.word	0x4c742400
 800a3d0:	4a742400 	.word	0x4a742400
 800a3d4:	4bbebc20 	.word	0x4bbebc20

0800a3d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b089      	sub	sp, #36	; 0x24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a3e0:	4ba1      	ldr	r3, [pc, #644]	; (800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e4:	f003 0303 	and.w	r3, r3, #3
 800a3e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a3ea:	4b9f      	ldr	r3, [pc, #636]	; (800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ee:	0d1b      	lsrs	r3, r3, #20
 800a3f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a3f6:	4b9c      	ldr	r3, [pc, #624]	; (800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fa:	0a1b      	lsrs	r3, r3, #8
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a402:	4b99      	ldr	r3, [pc, #612]	; (800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a406:	08db      	lsrs	r3, r3, #3
 800a408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	fb02 f303 	mul.w	r3, r2, r3
 800a412:	ee07 3a90 	vmov	s15, r3
 800a416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a41a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 8111 	beq.w	800a648 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	2b02      	cmp	r3, #2
 800a42a:	f000 8083 	beq.w	800a534 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	2b02      	cmp	r3, #2
 800a432:	f200 80a1 	bhi.w	800a578 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d003      	beq.n	800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d056      	beq.n	800a4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a442:	e099      	b.n	800a578 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a444:	4b88      	ldr	r3, [pc, #544]	; (800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0320 	and.w	r3, r3, #32
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d02d      	beq.n	800a4ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a450:	4b85      	ldr	r3, [pc, #532]	; (800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	08db      	lsrs	r3, r3, #3
 800a456:	f003 0303 	and.w	r3, r3, #3
 800a45a:	4a84      	ldr	r2, [pc, #528]	; (800a66c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a45c:	fa22 f303 	lsr.w	r3, r2, r3
 800a460:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	ee07 3a90 	vmov	s15, r3
 800a468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	ee07 3a90 	vmov	s15, r3
 800a472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a47a:	4b7b      	ldr	r3, [pc, #492]	; (800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a482:	ee07 3a90 	vmov	s15, r3
 800a486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a48a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a48e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a49a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a4aa:	e087      	b.n	800a5bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	ee07 3a90 	vmov	s15, r3
 800a4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a674 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a4ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4be:	4b6a      	ldr	r3, [pc, #424]	; (800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4c6:	ee07 3a90 	vmov	s15, r3
 800a4ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4ee:	e065      	b.n	800a5bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	ee07 3a90 	vmov	s15, r3
 800a4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a4fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a502:	4b59      	ldr	r3, [pc, #356]	; (800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a50a:	ee07 3a90 	vmov	s15, r3
 800a50e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a512:	ed97 6a03 	vldr	s12, [r7, #12]
 800a516:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a51a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a51e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a52a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a52e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a532:	e043      	b.n	800a5bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	ee07 3a90 	vmov	s15, r3
 800a53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a53e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a546:	4b48      	ldr	r3, [pc, #288]	; (800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a54a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a54e:	ee07 3a90 	vmov	s15, r3
 800a552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a556:	ed97 6a03 	vldr	s12, [r7, #12]
 800a55a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a55e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a56a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a56e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a576:	e021      	b.n	800a5bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	ee07 3a90 	vmov	s15, r3
 800a57e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a582:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a58a:	4b37      	ldr	r3, [pc, #220]	; (800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a592:	ee07 3a90 	vmov	s15, r3
 800a596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a59a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a59e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a5bc:	4b2a      	ldr	r3, [pc, #168]	; (800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c0:	0a5b      	lsrs	r3, r3, #9
 800a5c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5c6:	ee07 3a90 	vmov	s15, r3
 800a5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5e2:	ee17 2a90 	vmov	r2, s15
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a5ea:	4b1f      	ldr	r3, [pc, #124]	; (800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ee:	0c1b      	lsrs	r3, r3, #16
 800a5f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5f4:	ee07 3a90 	vmov	s15, r3
 800a5f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a600:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a604:	edd7 6a07 	vldr	s13, [r7, #28]
 800a608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a60c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a610:	ee17 2a90 	vmov	r2, s15
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a618:	4b13      	ldr	r3, [pc, #76]	; (800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61c:	0e1b      	lsrs	r3, r3, #24
 800a61e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a622:	ee07 3a90 	vmov	s15, r3
 800a626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a62e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a632:	edd7 6a07 	vldr	s13, [r7, #28]
 800a636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a63a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a63e:	ee17 2a90 	vmov	r2, s15
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a646:	e008      	b.n	800a65a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	609a      	str	r2, [r3, #8]
}
 800a65a:	bf00      	nop
 800a65c:	3724      	adds	r7, #36	; 0x24
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	58024400 	.word	0x58024400
 800a66c:	03d09000 	.word	0x03d09000
 800a670:	46000000 	.word	0x46000000
 800a674:	4c742400 	.word	0x4c742400
 800a678:	4a742400 	.word	0x4a742400
 800a67c:	4bbebc20 	.word	0x4bbebc20

0800a680 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a680:	b480      	push	{r7}
 800a682:	b089      	sub	sp, #36	; 0x24
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a688:	4ba0      	ldr	r3, [pc, #640]	; (800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68c:	f003 0303 	and.w	r3, r3, #3
 800a690:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a692:	4b9e      	ldr	r3, [pc, #632]	; (800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a696:	091b      	lsrs	r3, r3, #4
 800a698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a69c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a69e:	4b9b      	ldr	r3, [pc, #620]	; (800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a6a8:	4b98      	ldr	r3, [pc, #608]	; (800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ac:	08db      	lsrs	r3, r3, #3
 800a6ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	fb02 f303 	mul.w	r3, r2, r3
 800a6b8:	ee07 3a90 	vmov	s15, r3
 800a6bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6c0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f000 8111 	beq.w	800a8ee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	f000 8083 	beq.w	800a7da <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	f200 80a1 	bhi.w	800a81e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d003      	beq.n	800a6ea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d056      	beq.n	800a796 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a6e8:	e099      	b.n	800a81e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6ea:	4b88      	ldr	r3, [pc, #544]	; (800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 0320 	and.w	r3, r3, #32
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d02d      	beq.n	800a752 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6f6:	4b85      	ldr	r3, [pc, #532]	; (800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	08db      	lsrs	r3, r3, #3
 800a6fc:	f003 0303 	and.w	r3, r3, #3
 800a700:	4a83      	ldr	r2, [pc, #524]	; (800a910 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a702:	fa22 f303 	lsr.w	r3, r2, r3
 800a706:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	ee07 3a90 	vmov	s15, r3
 800a70e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	ee07 3a90 	vmov	s15, r3
 800a718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a71c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a720:	4b7a      	ldr	r3, [pc, #488]	; (800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a728:	ee07 3a90 	vmov	s15, r3
 800a72c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a730:	ed97 6a03 	vldr	s12, [r7, #12]
 800a734:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a914 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a73c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a740:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a74c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a750:	e087      	b.n	800a862 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	ee07 3a90 	vmov	s15, r3
 800a758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a75c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a918 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a764:	4b69      	ldr	r3, [pc, #420]	; (800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a76c:	ee07 3a90 	vmov	s15, r3
 800a770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a774:	ed97 6a03 	vldr	s12, [r7, #12]
 800a778:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a914 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a77c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a780:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a784:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a78c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a790:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a794:	e065      	b.n	800a862 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	ee07 3a90 	vmov	s15, r3
 800a79c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7a0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a91c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a7a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7a8:	4b58      	ldr	r3, [pc, #352]	; (800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7b0:	ee07 3a90 	vmov	s15, r3
 800a7b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7bc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a914 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7d8:	e043      	b.n	800a862 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	ee07 3a90 	vmov	s15, r3
 800a7e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a920 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a7e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ec:	4b47      	ldr	r3, [pc, #284]	; (800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7f4:	ee07 3a90 	vmov	s15, r3
 800a7f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a800:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a914 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a804:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a808:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a80c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a814:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a818:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a81c:	e021      	b.n	800a862 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	ee07 3a90 	vmov	s15, r3
 800a824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a828:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a918 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a82c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a830:	4b36      	ldr	r3, [pc, #216]	; (800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a838:	ee07 3a90 	vmov	s15, r3
 800a83c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a840:	ed97 6a03 	vldr	s12, [r7, #12]
 800a844:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a914 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a848:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a84c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a850:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a854:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a85c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a860:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a862:	4b2a      	ldr	r3, [pc, #168]	; (800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a866:	0a5b      	lsrs	r3, r3, #9
 800a868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a86c:	ee07 3a90 	vmov	s15, r3
 800a870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a878:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a87c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a888:	ee17 2a90 	vmov	r2, s15
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a890:	4b1e      	ldr	r3, [pc, #120]	; (800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a894:	0c1b      	lsrs	r3, r3, #16
 800a896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a89a:	ee07 3a90 	vmov	s15, r3
 800a89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8b6:	ee17 2a90 	vmov	r2, s15
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a8be:	4b13      	ldr	r3, [pc, #76]	; (800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c2:	0e1b      	lsrs	r3, r3, #24
 800a8c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8c8:	ee07 3a90 	vmov	s15, r3
 800a8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8e4:	ee17 2a90 	vmov	r2, s15
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a8ec:	e008      	b.n	800a900 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	609a      	str	r2, [r3, #8]
}
 800a900:	bf00      	nop
 800a902:	3724      	adds	r7, #36	; 0x24
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr
 800a90c:	58024400 	.word	0x58024400
 800a910:	03d09000 	.word	0x03d09000
 800a914:	46000000 	.word	0x46000000
 800a918:	4c742400 	.word	0x4c742400
 800a91c:	4a742400 	.word	0x4a742400
 800a920:	4bbebc20 	.word	0x4bbebc20

0800a924 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a92e:	2300      	movs	r3, #0
 800a930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a932:	4b53      	ldr	r3, [pc, #332]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800a934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a936:	f003 0303 	and.w	r3, r3, #3
 800a93a:	2b03      	cmp	r3, #3
 800a93c:	d101      	bne.n	800a942 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e099      	b.n	800aa76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a942:	4b4f      	ldr	r3, [pc, #316]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a4e      	ldr	r2, [pc, #312]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800a948:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a94c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a94e:	f7f8 f8cd 	bl	8002aec <HAL_GetTick>
 800a952:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a954:	e008      	b.n	800a968 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a956:	f7f8 f8c9 	bl	8002aec <HAL_GetTick>
 800a95a:	4602      	mov	r2, r0
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	2b02      	cmp	r3, #2
 800a962:	d901      	bls.n	800a968 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	e086      	b.n	800aa76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a968:	4b45      	ldr	r3, [pc, #276]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1f0      	bne.n	800a956 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a974:	4b42      	ldr	r3, [pc, #264]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800a976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a978:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	031b      	lsls	r3, r3, #12
 800a982:	493f      	ldr	r1, [pc, #252]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800a984:	4313      	orrs	r3, r2
 800a986:	628b      	str	r3, [r1, #40]	; 0x28
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	3b01      	subs	r3, #1
 800a98e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	3b01      	subs	r3, #1
 800a998:	025b      	lsls	r3, r3, #9
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	431a      	orrs	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	041b      	lsls	r3, r3, #16
 800a9a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a9aa:	431a      	orrs	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	061b      	lsls	r3, r3, #24
 800a9b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a9b8:	4931      	ldr	r1, [pc, #196]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a9be:	4b30      	ldr	r3, [pc, #192]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800a9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	695b      	ldr	r3, [r3, #20]
 800a9ca:	492d      	ldr	r1, [pc, #180]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a9d0:	4b2b      	ldr	r3, [pc, #172]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800a9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d4:	f023 0220 	bic.w	r2, r3, #32
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	699b      	ldr	r3, [r3, #24]
 800a9dc:	4928      	ldr	r1, [pc, #160]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a9e2:	4b27      	ldr	r3, [pc, #156]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800a9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e6:	4a26      	ldr	r2, [pc, #152]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800a9e8:	f023 0310 	bic.w	r3, r3, #16
 800a9ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a9ee:	4b24      	ldr	r3, [pc, #144]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800a9f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9f2:	4b24      	ldr	r3, [pc, #144]	; (800aa84 <RCCEx_PLL2_Config+0x160>)
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	69d2      	ldr	r2, [r2, #28]
 800a9fa:	00d2      	lsls	r2, r2, #3
 800a9fc:	4920      	ldr	r1, [pc, #128]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aa02:	4b1f      	ldr	r3, [pc, #124]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800aa04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa06:	4a1e      	ldr	r2, [pc, #120]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800aa08:	f043 0310 	orr.w	r3, r3, #16
 800aa0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d106      	bne.n	800aa22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aa14:	4b1a      	ldr	r3, [pc, #104]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800aa16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa18:	4a19      	ldr	r2, [pc, #100]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800aa1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa20:	e00f      	b.n	800aa42 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d106      	bne.n	800aa36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aa28:	4b15      	ldr	r3, [pc, #84]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800aa2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2c:	4a14      	ldr	r2, [pc, #80]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800aa2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa32:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa34:	e005      	b.n	800aa42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aa36:	4b12      	ldr	r3, [pc, #72]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800aa38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3a:	4a11      	ldr	r2, [pc, #68]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800aa3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800aa42:	4b0f      	ldr	r3, [pc, #60]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a0e      	ldr	r2, [pc, #56]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800aa48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aa4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa4e:	f7f8 f84d 	bl	8002aec <HAL_GetTick>
 800aa52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aa54:	e008      	b.n	800aa68 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aa56:	f7f8 f849 	bl	8002aec <HAL_GetTick>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d901      	bls.n	800aa68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aa64:	2303      	movs	r3, #3
 800aa66:	e006      	b.n	800aa76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aa68:	4b05      	ldr	r3, [pc, #20]	; (800aa80 <RCCEx_PLL2_Config+0x15c>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d0f0      	beq.n	800aa56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aa74:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	58024400 	.word	0x58024400
 800aa84:	ffff0007 	.word	0xffff0007

0800aa88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa96:	4b53      	ldr	r3, [pc, #332]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800aa98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9a:	f003 0303 	and.w	r3, r3, #3
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	d101      	bne.n	800aaa6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e099      	b.n	800abda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800aaa6:	4b4f      	ldr	r3, [pc, #316]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a4e      	ldr	r2, [pc, #312]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800aaac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aab2:	f7f8 f81b 	bl	8002aec <HAL_GetTick>
 800aab6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aab8:	e008      	b.n	800aacc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aaba:	f7f8 f817 	bl	8002aec <HAL_GetTick>
 800aabe:	4602      	mov	r2, r0
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d901      	bls.n	800aacc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aac8:	2303      	movs	r3, #3
 800aaca:	e086      	b.n	800abda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aacc:	4b45      	ldr	r3, [pc, #276]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1f0      	bne.n	800aaba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aad8:	4b42      	ldr	r3, [pc, #264]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800aada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aadc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	051b      	lsls	r3, r3, #20
 800aae6:	493f      	ldr	r1, [pc, #252]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800aae8:	4313      	orrs	r3, r2
 800aaea:	628b      	str	r3, [r1, #40]	; 0x28
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	3b01      	subs	r3, #1
 800aafc:	025b      	lsls	r3, r3, #9
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	431a      	orrs	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	3b01      	subs	r3, #1
 800ab08:	041b      	lsls	r3, r3, #16
 800ab0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ab0e:	431a      	orrs	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	3b01      	subs	r3, #1
 800ab16:	061b      	lsls	r3, r3, #24
 800ab18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ab1c:	4931      	ldr	r1, [pc, #196]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ab22:	4b30      	ldr	r3, [pc, #192]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	695b      	ldr	r3, [r3, #20]
 800ab2e:	492d      	ldr	r1, [pc, #180]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab30:	4313      	orrs	r3, r2
 800ab32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ab34:	4b2b      	ldr	r3, [pc, #172]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	4928      	ldr	r1, [pc, #160]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ab46:	4b27      	ldr	r3, [pc, #156]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4a:	4a26      	ldr	r2, [pc, #152]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ab52:	4b24      	ldr	r3, [pc, #144]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab56:	4b24      	ldr	r3, [pc, #144]	; (800abe8 <RCCEx_PLL3_Config+0x160>)
 800ab58:	4013      	ands	r3, r2
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	69d2      	ldr	r2, [r2, #28]
 800ab5e:	00d2      	lsls	r2, r2, #3
 800ab60:	4920      	ldr	r1, [pc, #128]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab62:	4313      	orrs	r3, r2
 800ab64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ab66:	4b1f      	ldr	r3, [pc, #124]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6a:	4a1e      	ldr	r2, [pc, #120]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d106      	bne.n	800ab86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ab78:	4b1a      	ldr	r3, [pc, #104]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7c:	4a19      	ldr	r2, [pc, #100]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ab82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab84:	e00f      	b.n	800aba6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d106      	bne.n	800ab9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ab8c:	4b15      	ldr	r3, [pc, #84]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab90:	4a14      	ldr	r2, [pc, #80]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ab96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab98:	e005      	b.n	800aba6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ab9a:	4b12      	ldr	r3, [pc, #72]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9e:	4a11      	ldr	r2, [pc, #68]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800aba0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aba4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aba6:	4b0f      	ldr	r3, [pc, #60]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a0e      	ldr	r2, [pc, #56]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800abac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abb2:	f7f7 ff9b 	bl	8002aec <HAL_GetTick>
 800abb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800abb8:	e008      	b.n	800abcc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800abba:	f7f7 ff97 	bl	8002aec <HAL_GetTick>
 800abbe:	4602      	mov	r2, r0
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d901      	bls.n	800abcc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800abc8:	2303      	movs	r3, #3
 800abca:	e006      	b.n	800abda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800abcc:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <RCCEx_PLL3_Config+0x15c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d0f0      	beq.n	800abba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	58024400 	.word	0x58024400
 800abe8:	ffff0007 	.word	0xffff0007

0800abec <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b086      	sub	sp, #24
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d904      	bls.n	800ac0a <HAL_SAI_InitProtocol+0x1e>
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	3b03      	subs	r3, #3
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d812      	bhi.n	800ac2e <HAL_SAI_InitProtocol+0x42>
 800ac08:	e008      	b.n	800ac1c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	68b9      	ldr	r1, [r7, #8]
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f000 fb8b 	bl	800b32c <SAI_InitI2S>
 800ac16:	4603      	mov	r3, r0
 800ac18:	75fb      	strb	r3, [r7, #23]
      break;
 800ac1a:	e00b      	b.n	800ac34 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	68b9      	ldr	r1, [r7, #8]
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f000 fc34 	bl	800b490 <SAI_InitPCM>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac2c:	e002      	b.n	800ac34 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	75fb      	strb	r3, [r7, #23]
      break;
 800ac32:	bf00      	nop
  }

  if (status == HAL_OK)
 800ac34:	7dfb      	ldrb	r3, [r7, #23]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d104      	bne.n	800ac44 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f000 f808 	bl	800ac50 <HAL_SAI_Init>
 800ac40:	4603      	mov	r3, r0
 800ac42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ac44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3718      	adds	r7, #24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b08a      	sub	sp, #40	; 0x28
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d101      	bne.n	800ac62 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e201      	b.n	800b066 <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d113      	bne.n	800ac94 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a99      	ldr	r2, [pc, #612]	; (800aed8 <HAL_SAI_Init+0x288>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d004      	beq.n	800ac80 <HAL_SAI_Init+0x30>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a98      	ldr	r2, [pc, #608]	; (800aedc <HAL_SAI_Init+0x28c>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d107      	bne.n	800ac90 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d103      	bne.n	800ac90 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d001      	beq.n	800ac94 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	e1e8      	b.n	800b066 <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a8f      	ldr	r2, [pc, #572]	; (800aed8 <HAL_SAI_Init+0x288>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d004      	beq.n	800aca8 <HAL_SAI_Init+0x58>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a8f      	ldr	r2, [pc, #572]	; (800aee0 <HAL_SAI_Init+0x290>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d102      	bne.n	800acae <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 800aca8:	4b8e      	ldr	r3, [pc, #568]	; (800aee4 <HAL_SAI_Init+0x294>)
 800acaa:	61bb      	str	r3, [r7, #24]
 800acac:	e00e      	b.n	800accc <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a8a      	ldr	r2, [pc, #552]	; (800aedc <HAL_SAI_Init+0x28c>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d004      	beq.n	800acc2 <HAL_SAI_Init+0x72>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a8a      	ldr	r2, [pc, #552]	; (800aee8 <HAL_SAI_Init+0x298>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d102      	bne.n	800acc8 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800acc2:	4b8a      	ldr	r3, [pc, #552]	; (800aeec <HAL_SAI_Init+0x29c>)
 800acc4:	61bb      	str	r3, [r7, #24]
 800acc6:	e001      	b.n	800accc <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	e1cc      	b.n	800b066 <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d106      	bne.n	800ace6 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7f7 fb0b 	bl	80022fc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fc8c 	bl	800b604 <SAI_Disable>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d001      	beq.n	800acf6 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e1b7      	b.n	800b066 <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2202      	movs	r2, #2
 800acfa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d00c      	beq.n	800ad20 <HAL_SAI_Init+0xd0>
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d80d      	bhi.n	800ad26 <HAL_SAI_Init+0xd6>
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d002      	beq.n	800ad14 <HAL_SAI_Init+0xc4>
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d003      	beq.n	800ad1a <HAL_SAI_Init+0xca>
 800ad12:	e008      	b.n	800ad26 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800ad14:	2300      	movs	r3, #0
 800ad16:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ad18:	e008      	b.n	800ad2c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ad1a:	2310      	movs	r3, #16
 800ad1c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ad1e:	e005      	b.n	800ad2c <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ad20:	2320      	movs	r3, #32
 800ad22:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ad24:	e002      	b.n	800ad2c <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ad2a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	2b05      	cmp	r3, #5
 800ad32:	d822      	bhi.n	800ad7a <HAL_SAI_Init+0x12a>
 800ad34:	a201      	add	r2, pc, #4	; (adr r2, 800ad3c <HAL_SAI_Init+0xec>)
 800ad36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3a:	bf00      	nop
 800ad3c:	0800ad55 	.word	0x0800ad55
 800ad40:	0800ad5b 	.word	0x0800ad5b
 800ad44:	0800ad63 	.word	0x0800ad63
 800ad48:	0800ad7b 	.word	0x0800ad7b
 800ad4c:	0800ad7b 	.word	0x0800ad7b
 800ad50:	0800ad6b 	.word	0x0800ad6b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800ad54:	2300      	movs	r3, #0
 800ad56:	61fb      	str	r3, [r7, #28]
      break;
 800ad58:	e012      	b.n	800ad80 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ad5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad5e:	61fb      	str	r3, [r7, #28]
      break;
 800ad60:	e00e      	b.n	800ad80 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ad62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad66:	61fb      	str	r3, [r7, #28]
      break;
 800ad68:	e00a      	b.n	800ad80 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ad6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad6e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad72:	f043 0303 	orr.w	r3, r3, #3
 800ad76:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ad78:	e002      	b.n	800ad80 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	61fb      	str	r3, [r7, #28]
      break;
 800ad7e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad84:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 808a 	beq.w	800aea4 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 800ad90:	2300      	movs	r3, #0
 800ad92:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a4f      	ldr	r2, [pc, #316]	; (800aed8 <HAL_SAI_Init+0x288>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d004      	beq.n	800ada8 <HAL_SAI_Init+0x158>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a4f      	ldr	r2, [pc, #316]	; (800aee0 <HAL_SAI_Init+0x290>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d106      	bne.n	800adb6 <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ada8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800adac:	f04f 0100 	mov.w	r1, #0
 800adb0:	f7fe fcd6 	bl	8009760 <HAL_RCCEx_GetPeriphCLKFreq>
 800adb4:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a48      	ldr	r2, [pc, #288]	; (800aedc <HAL_SAI_Init+0x28c>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d106      	bne.n	800adce <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800adc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800adc4:	f04f 0100 	mov.w	r1, #0
 800adc8:	f7fe fcca 	bl	8009760 <HAL_RCCEx_GetPeriphCLKFreq>
 800adcc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a45      	ldr	r2, [pc, #276]	; (800aee8 <HAL_SAI_Init+0x298>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d106      	bne.n	800ade6 <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800add8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800addc:	f04f 0100 	mov.w	r1, #0
 800ade0:	f7fe fcbe 	bl	8009760 <HAL_RCCEx_GetPeriphCLKFreq>
 800ade4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800adee:	d120      	bne.n	800ae32 <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf4:	2b04      	cmp	r3, #4
 800adf6:	d102      	bne.n	800adfe <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800adf8:	2340      	movs	r3, #64	; 0x40
 800adfa:	60fb      	str	r3, [r7, #12]
 800adfc:	e00a      	b.n	800ae14 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae02:	2b08      	cmp	r3, #8
 800ae04:	d103      	bne.n	800ae0e <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800ae06:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae0a:	60fb      	str	r3, [r7, #12]
 800ae0c:	e002      	b.n	800ae14 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae12:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800ae14:	697a      	ldr	r2, [r7, #20]
 800ae16:	4613      	mov	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	005b      	lsls	r3, r3, #1
 800ae1e:	4619      	mov	r1, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a1b      	ldr	r3, [r3, #32]
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	fb02 f303 	mul.w	r3, r2, r3
 800ae2a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae2e:	613b      	str	r3, [r7, #16]
 800ae30:	e017      	b.n	800ae62 <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae3a:	d101      	bne.n	800ae40 <HAL_SAI_Init+0x1f0>
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	e000      	b.n	800ae42 <HAL_SAI_Init+0x1f2>
 800ae40:	2301      	movs	r3, #1
 800ae42:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	4613      	mov	r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4413      	add	r3, r2
 800ae4c:	005b      	lsls	r3, r3, #1
 800ae4e:	4619      	mov	r1, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	fb02 f303 	mul.w	r3, r2, r3
 800ae5a:	021b      	lsls	r3, r3, #8
 800ae5c:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae60:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	4a22      	ldr	r2, [pc, #136]	; (800aef0 <HAL_SAI_Init+0x2a0>)
 800ae66:	fba2 2303 	umull	r2, r3, r2, r3
 800ae6a:	08da      	lsrs	r2, r3, #3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ae70:	6939      	ldr	r1, [r7, #16]
 800ae72:	4b1f      	ldr	r3, [pc, #124]	; (800aef0 <HAL_SAI_Init+0x2a0>)
 800ae74:	fba3 2301 	umull	r2, r3, r3, r1
 800ae78:	08da      	lsrs	r2, r3, #3
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	4413      	add	r3, r2
 800ae80:	005b      	lsls	r3, r3, #1
 800ae82:	1aca      	subs	r2, r1, r3
 800ae84:	2a08      	cmp	r2, #8
 800ae86:	d904      	bls.n	800ae92 <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8c:	1c5a      	adds	r2, r3, #1
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae96:	2b04      	cmp	r3, #4
 800ae98:	d104      	bne.n	800aea4 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9e:	085a      	lsrs	r2, r3, #1
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d003      	beq.n	800aeb4 <HAL_SAI_Init+0x264>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d109      	bne.n	800aec8 <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d101      	bne.n	800aec0 <HAL_SAI_Init+0x270>
 800aebc:	2300      	movs	r3, #0
 800aebe:	e001      	b.n	800aec4 <HAL_SAI_Init+0x274>
 800aec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aec4:	623b      	str	r3, [r7, #32]
 800aec6:	e017      	b.n	800aef8 <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d111      	bne.n	800aef4 <HAL_SAI_Init+0x2a4>
 800aed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aed4:	e00f      	b.n	800aef6 <HAL_SAI_Init+0x2a6>
 800aed6:	bf00      	nop
 800aed8:	40015804 	.word	0x40015804
 800aedc:	58005404 	.word	0x58005404
 800aee0:	40015824 	.word	0x40015824
 800aee4:	40015800 	.word	0x40015800
 800aee8:	58005424 	.word	0x58005424
 800aeec:	58005400 	.word	0x58005400
 800aef0:	cccccccd 	.word	0xcccccccd
 800aef4:	2300      	movs	r3, #0
 800aef6:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6819      	ldr	r1, [r3, #0]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	4b5b      	ldr	r3, [pc, #364]	; (800b070 <HAL_SAI_Init+0x420>)
 800af04:	400b      	ands	r3, r1
 800af06:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	6819      	ldr	r1, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af16:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800af1c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af22:	431a      	orrs	r2, r3
 800af24:	6a3b      	ldr	r3, [r7, #32]
 800af26:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800af30:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800af3c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af42:	051b      	lsls	r3, r3, #20
 800af44:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800af4a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	430a      	orrs	r2, r1
 800af58:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	6859      	ldr	r1, [r3, #4]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	4b43      	ldr	r3, [pc, #268]	; (800b074 <HAL_SAI_Init+0x424>)
 800af66:	400b      	ands	r3, r1
 800af68:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	6859      	ldr	r1, [r3, #4]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	69da      	ldr	r2, [r3, #28]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af78:	431a      	orrs	r2, r3
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7e:	431a      	orrs	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	430a      	orrs	r2, r1
 800af86:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	6899      	ldr	r1, [r3, #8]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	4b39      	ldr	r3, [pc, #228]	; (800b078 <HAL_SAI_Init+0x428>)
 800af94:	400b      	ands	r3, r1
 800af96:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6899      	ldr	r1, [r3, #8]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afa2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800afa8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800afae:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800afb4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afba:	3b01      	subs	r3, #1
 800afbc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800afbe:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	430a      	orrs	r2, r1
 800afc6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68d9      	ldr	r1, [r3, #12]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	f24f 0320 	movw	r3, #61472	; 0xf020
 800afd6:	400b      	ands	r3, r1
 800afd8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68d9      	ldr	r1, [r3, #12]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afe8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afee:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800aff0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff6:	3b01      	subs	r3, #1
 800aff8:	021b      	lsls	r3, r3, #8
 800affa:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	430a      	orrs	r2, r1
 800b002:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a1c      	ldr	r2, [pc, #112]	; (800b07c <HAL_SAI_Init+0x42c>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d004      	beq.n	800b018 <HAL_SAI_Init+0x3c8>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a1b      	ldr	r2, [pc, #108]	; (800b080 <HAL_SAI_Init+0x430>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d119      	bne.n	800b04c <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b01c:	f023 0201 	bic.w	r2, r3, #1
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d10e      	bne.n	800b04c <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b036:	3b01      	subs	r3, #1
 800b038:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b03a:	431a      	orrs	r2, r3
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b044:	f043 0201 	orr.w	r2, r3, #1
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3728      	adds	r7, #40	; 0x28
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	f005c010 	.word	0xf005c010
 800b074:	ffff1ff0 	.word	0xffff1ff0
 800b078:	fff88000 	.word	0xfff88000
 800b07c:	40015804 	.word	0x40015804
 800b080:	58005404 	.word	0x58005404

0800b084 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	4613      	mov	r3, r2
 800b090:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800b092:	f7f7 fd2b 	bl	8002aec <HAL_GetTick>
 800b096:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d002      	beq.n	800b0a4 <HAL_SAI_Transmit_DMA+0x20>
 800b09e:	88fb      	ldrh	r3, [r7, #6]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d101      	bne.n	800b0a8 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e098      	b.n	800b1da <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	f040 8091 	bne.w	800b1d8 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d101      	bne.n	800b0c4 <HAL_SAI_Transmit_DMA+0x40>
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	e08a      	b.n	800b1da <HAL_SAI_Transmit_DMA+0x156>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	68ba      	ldr	r2, [r7, #8]
 800b0d0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	88fa      	ldrh	r2, [r7, #6]
 800b0d6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	88fa      	ldrh	r2, [r7, #6]
 800b0de:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2212      	movs	r2, #18
 800b0ee:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0f8:	4a3a      	ldr	r2, [pc, #232]	; (800b1e4 <HAL_SAI_Transmit_DMA+0x160>)
 800b0fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b102:	4a39      	ldr	r2, [pc, #228]	; (800b1e8 <HAL_SAI_Transmit_DMA+0x164>)
 800b104:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b10c:	4a37      	ldr	r2, [pc, #220]	; (800b1ec <HAL_SAI_Transmit_DMA+0x168>)
 800b10e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b116:	2200      	movs	r2, #0
 800b118:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b124:	4619      	mov	r1, r3
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	331c      	adds	r3, #28
 800b12c:	461a      	mov	r2, r3
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800b134:	f7f8 f972 	bl	800341c <HAL_DMA_Start_IT>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d005      	beq.n	800b14a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	e047      	b.n	800b1da <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b14a:	2100      	movs	r1, #0
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f000 fa21 	bl	800b594 <SAI_InterruptFlag>
 800b152:	4601      	mov	r1, r0
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	691a      	ldr	r2, [r3, #16]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	430a      	orrs	r2, r1
 800b160:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b170:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b172:	e015      	b.n	800b1a0 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800b174:	f7f7 fcba 	bl	8002aec <HAL_GetTick>
 800b178:	4602      	mov	r2, r0
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b182:	d90d      	bls.n	800b1a0 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b18a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800b19c:	2303      	movs	r3, #3
 800b19e:	e01c      	b.n	800b1da <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	695b      	ldr	r3, [r3, #20]
 800b1a6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d0e2      	beq.n	800b174 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d107      	bne.n	800b1cc <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b1ca:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	e000      	b.n	800b1da <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800b1d8:	2302      	movs	r3, #2
  }
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3718      	adds	r7, #24
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	0800b6d9 	.word	0x0800b6d9
 800b1e8:	0800b679 	.word	0x0800b679
 800b1ec:	0800b771 	.word	0x0800b771

0800b1f0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <HAL_SAI_Receive_DMA+0x1a>
 800b204:	88fb      	ldrh	r3, [r7, #6]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d101      	bne.n	800b20e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e079      	b.n	800b302 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b01      	cmp	r3, #1
 800b218:	d172      	bne.n	800b300 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b220:	2b01      	cmp	r3, #1
 800b222:	d101      	bne.n	800b228 <HAL_SAI_Receive_DMA+0x38>
 800b224:	2302      	movs	r3, #2
 800b226:	e06c      	b.n	800b302 <HAL_SAI_Receive_DMA+0x112>
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2201      	movs	r2, #1
 800b22c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	88fa      	ldrh	r2, [r7, #6]
 800b23a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	88fa      	ldrh	r2, [r7, #6]
 800b242:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2222      	movs	r2, #34	; 0x22
 800b252:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b25c:	4a2b      	ldr	r2, [pc, #172]	; (800b30c <HAL_SAI_Receive_DMA+0x11c>)
 800b25e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b266:	4a2a      	ldr	r2, [pc, #168]	; (800b310 <HAL_SAI_Receive_DMA+0x120>)
 800b268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b270:	4a28      	ldr	r2, [pc, #160]	; (800b314 <HAL_SAI_Receive_DMA+0x124>)
 800b272:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b27a:	2200      	movs	r2, #0
 800b27c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	331c      	adds	r3, #28
 800b28a:	4619      	mov	r1, r3
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b290:	461a      	mov	r2, r3
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800b298:	f7f8 f8c0 	bl	800341c <HAL_DMA_Start_IT>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d005      	beq.n	800b2ae <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e029      	b.n	800b302 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f000 f96f 	bl	800b594 <SAI_InterruptFlag>
 800b2b6:	4601      	mov	r1, r0
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	691a      	ldr	r2, [r3, #16]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b2d4:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d107      	bne.n	800b2f4 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b2f2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	e000      	b.n	800b302 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800b300:	2302      	movs	r3, #2
  }
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	0800b755 	.word	0x0800b755
 800b310:	0800b6f5 	.word	0x0800b6f5
 800b314:	0800b771 	.word	0x0800b771

0800b318 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b087      	sub	sp, #28
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	607a      	str	r2, [r7, #4]
 800b338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2200      	movs	r2, #0
 800b348:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d003      	beq.n	800b35a <SAI_InitI2S+0x2e>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	2b02      	cmp	r3, #2
 800b358:	d103      	bne.n	800b362 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2200      	movs	r2, #0
 800b35e:	651a      	str	r2, [r3, #80]	; 0x50
 800b360:	e002      	b.n	800b368 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2201      	movs	r2, #1
 800b366:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b36e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b376:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2200      	movs	r2, #0
 800b37c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	f003 0301 	and.w	r3, r3, #1
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d001      	beq.n	800b392 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	e077      	b.n	800b482 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d107      	bne.n	800b3a8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b3a4:	665a      	str	r2, [r3, #100]	; 0x64
 800b3a6:	e006      	b.n	800b3b6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b3ae:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2b03      	cmp	r3, #3
 800b3ba:	d84f      	bhi.n	800b45c <SAI_InitI2S+0x130>
 800b3bc:	a201      	add	r2, pc, #4	; (adr r2, 800b3c4 <SAI_InitI2S+0x98>)
 800b3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c2:	bf00      	nop
 800b3c4:	0800b3d5 	.word	0x0800b3d5
 800b3c8:	0800b3f7 	.word	0x0800b3f7
 800b3cc:	0800b419 	.word	0x0800b419
 800b3d0:	0800b43b 	.word	0x0800b43b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2280      	movs	r2, #128	; 0x80
 800b3d8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	085b      	lsrs	r3, r3, #1
 800b3de:	015a      	lsls	r2, r3, #5
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	085b      	lsrs	r3, r3, #1
 800b3e8:	011a      	lsls	r2, r3, #4
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2240      	movs	r2, #64	; 0x40
 800b3f2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b3f4:	e035      	b.n	800b462 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2280      	movs	r2, #128	; 0x80
 800b3fa:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	085b      	lsrs	r3, r3, #1
 800b400:	019a      	lsls	r2, r3, #6
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	085b      	lsrs	r3, r3, #1
 800b40a:	015a      	lsls	r2, r3, #5
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2280      	movs	r2, #128	; 0x80
 800b414:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b416:	e024      	b.n	800b462 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	22c0      	movs	r2, #192	; 0xc0
 800b41c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	085b      	lsrs	r3, r3, #1
 800b422:	019a      	lsls	r2, r3, #6
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	085b      	lsrs	r3, r3, #1
 800b42c:	015a      	lsls	r2, r3, #5
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2280      	movs	r2, #128	; 0x80
 800b436:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b438:	e013      	b.n	800b462 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	22e0      	movs	r2, #224	; 0xe0
 800b43e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	085b      	lsrs	r3, r3, #1
 800b444:	019a      	lsls	r2, r3, #6
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	085b      	lsrs	r3, r3, #1
 800b44e:	015a      	lsls	r2, r3, #5
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2280      	movs	r2, #128	; 0x80
 800b458:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b45a:	e002      	b.n	800b462 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
 800b45e:	75fb      	strb	r3, [r7, #23]
      break;
 800b460:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2b02      	cmp	r3, #2
 800b466:	d10b      	bne.n	800b480 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d102      	bne.n	800b474 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2210      	movs	r2, #16
 800b472:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b02      	cmp	r3, #2
 800b478:	d102      	bne.n	800b480 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2208      	movs	r2, #8
 800b47e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800b480:	7dfb      	ldrb	r3, [r7, #23]
}
 800b482:	4618      	mov	r0, r3
 800b484:	371c      	adds	r7, #28
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop

0800b490 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b490:	b480      	push	{r7}
 800b492:	b087      	sub	sp, #28
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
 800b49c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d003      	beq.n	800b4be <SAI_InitPCM+0x2e>
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d103      	bne.n	800b4c6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	651a      	str	r2, [r3, #80]	; 0x50
 800b4c4:	e002      	b.n	800b4cc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b4d8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b4e0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4f4:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	2b04      	cmp	r3, #4
 800b4fa:	d103      	bne.n	800b504 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2201      	movs	r2, #1
 800b500:	659a      	str	r2, [r3, #88]	; 0x58
 800b502:	e002      	b.n	800b50a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	220d      	movs	r2, #13
 800b508:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b03      	cmp	r3, #3
 800b50e:	d837      	bhi.n	800b580 <SAI_InitPCM+0xf0>
 800b510:	a201      	add	r2, pc, #4	; (adr r2, 800b518 <SAI_InitPCM+0x88>)
 800b512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b516:	bf00      	nop
 800b518:	0800b529 	.word	0x0800b529
 800b51c:	0800b53f 	.word	0x0800b53f
 800b520:	0800b555 	.word	0x0800b555
 800b524:	0800b56b 	.word	0x0800b56b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2280      	movs	r2, #128	; 0x80
 800b52c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	011a      	lsls	r2, r3, #4
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2240      	movs	r2, #64	; 0x40
 800b53a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b53c:	e023      	b.n	800b586 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2280      	movs	r2, #128	; 0x80
 800b542:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	015a      	lsls	r2, r3, #5
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2280      	movs	r2, #128	; 0x80
 800b550:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b552:	e018      	b.n	800b586 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	22c0      	movs	r2, #192	; 0xc0
 800b558:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	015a      	lsls	r2, r3, #5
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2280      	movs	r2, #128	; 0x80
 800b566:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b568:	e00d      	b.n	800b586 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	22e0      	movs	r2, #224	; 0xe0
 800b56e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	015a      	lsls	r2, r3, #5
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2280      	movs	r2, #128	; 0x80
 800b57c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b57e:	e002      	b.n	800b586 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	75fb      	strb	r3, [r7, #23]
      break;
 800b584:	bf00      	nop
  }

  return status;
 800b586:	7dfb      	ldrb	r3, [r7, #23]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	371c      	adds	r7, #28
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	460b      	mov	r3, r1
 800b59e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800b5a4:	78fb      	ldrb	r3, [r7, #3]
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	d103      	bne.n	800b5b2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f043 0308 	orr.w	r3, r3, #8
 800b5b0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5b6:	2b08      	cmp	r3, #8
 800b5b8:	d10b      	bne.n	800b5d2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b5be:	2b03      	cmp	r3, #3
 800b5c0:	d003      	beq.n	800b5ca <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d103      	bne.n	800b5d2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f043 0310 	orr.w	r3, r3, #16
 800b5d0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	2b03      	cmp	r3, #3
 800b5d8:	d003      	beq.n	800b5e2 <SAI_InterruptFlag+0x4e>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d104      	bne.n	800b5ec <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b5e8:	60fb      	str	r3, [r7, #12]
 800b5ea:	e003      	b.n	800b5f4 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f043 0304 	orr.w	r3, r3, #4
 800b5f2:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
	...

0800b604 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b60c:	4b18      	ldr	r3, [pc, #96]	; (800b670 <SAI_Disable+0x6c>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a18      	ldr	r2, [pc, #96]	; (800b674 <SAI_Disable+0x70>)
 800b612:	fba2 2303 	umull	r2, r3, r2, r3
 800b616:	0b1b      	lsrs	r3, r3, #12
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b62e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10a      	bne.n	800b64c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b63c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800b646:	2303      	movs	r3, #3
 800b648:	72fb      	strb	r3, [r7, #11]
      break;
 800b64a:	e009      	b.n	800b660 <SAI_Disable+0x5c>
    }
    count--;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	3b01      	subs	r3, #1
 800b650:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1e7      	bne.n	800b630 <SAI_Disable+0x2c>

  return status;
 800b660:	7afb      	ldrb	r3, [r7, #11]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	24000390 	.word	0x24000390
 800b674:	95cbec1b 	.word	0x95cbec1b

0800b678 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b684:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	69db      	ldr	r3, [r3, #28]
 800b68a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b68e:	d01c      	beq.n	800b6ca <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b6a6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f7ff ff72 	bl	800b594 <SAI_InterruptFlag>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	43d9      	mvns	r1, r3
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	691a      	ldr	r2, [r3, #16]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	400a      	ands	r2, r1
 800b6c0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f7f5 ff62 	bl	8001594 <HAL_SAI_TxCpltCallback>
#endif
}
 800b6d0:	bf00      	nop
 800b6d2:	3710      	adds	r7, #16
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f7f5 ffcc 	bl	8001684 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800b6ec:	bf00      	nop
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b700:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	69db      	ldr	r3, [r3, #28]
 800b706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b70a:	d01c      	beq.n	800b746 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b71a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b724:	2100      	movs	r1, #0
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7ff ff34 	bl	800b594 <SAI_InterruptFlag>
 800b72c:	4603      	mov	r3, r0
 800b72e:	43d9      	mvns	r1, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	691a      	ldr	r2, [r3, #16]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	400a      	ands	r2, r1
 800b73c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2201      	movs	r2, #1
 800b742:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f7f6 f814 	bl	8001774 <HAL_SAI_RxCpltCallback>
#endif
}
 800b74c:	bf00      	nop
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b760:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f7f6 f8ce 	bl	8001904 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800b768:	bf00      	nop
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77c:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f7f8 ffe0 	bl	8004744 <HAL_DMA_GetError>
 800b784:	4603      	mov	r3, r0
 800b786:	2b02      	cmp	r3, #2
 800b788:	d01d      	beq.n	800b7c6 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b790:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b7a8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f7ff ff2a 	bl	800b604 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f7ff fda9 	bl	800b318 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800b7c6:	bf00      	nop
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
	...

0800b7d0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e02b      	b.n	800b83c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d106      	bne.n	800b7fe <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7f5 f81f 	bl	800083c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2202      	movs	r2, #2
 800b802:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	3304      	adds	r3, #4
 800b80e:	4619      	mov	r1, r3
 800b810:	4610      	mov	r0, r2
 800b812:	f000 fdbf 	bl	800c394 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6818      	ldr	r0, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	461a      	mov	r2, r3
 800b820:	6839      	ldr	r1, [r7, #0]
 800b822:	f000 fe13 	bl	800c44c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b826:	4b07      	ldr	r3, [pc, #28]	; (800b844 <HAL_SDRAM_Init+0x74>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a06      	ldr	r2, [pc, #24]	; (800b844 <HAL_SDRAM_Init+0x74>)
 800b82c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b830:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	52004000 	.word	0x52004000

0800b848 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b086      	sub	sp, #24
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b85a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b85c:	7dfb      	ldrb	r3, [r7, #23]
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d101      	bne.n	800b866 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b862:	2302      	movs	r3, #2
 800b864:	e021      	b.n	800b8aa <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d002      	beq.n	800b872 <HAL_SDRAM_SendCommand+0x2a>
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
 800b86e:	2b05      	cmp	r3, #5
 800b870:	d118      	bne.n	800b8a4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2202      	movs	r2, #2
 800b876:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	68b9      	ldr	r1, [r7, #8]
 800b882:	4618      	mov	r0, r3
 800b884:	f000 fe4c 	bl	800c520 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	d104      	bne.n	800b89a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2205      	movs	r2, #5
 800b894:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b898:	e006      	b.n	800b8a8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b8a2:	e001      	b.n	800b8a8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	e000      	b.n	800b8aa <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3718      	adds	r7, #24
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b082      	sub	sp, #8
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
 800b8ba:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d101      	bne.n	800b8cc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	e016      	b.n	800b8fa <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d10f      	bne.n	800b8f8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2202      	movs	r2, #2
 800b8dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 fe3e 	bl	800c568 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	e000      	b.n	800b8fa <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b8f8:	2301      	movs	r3, #1
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
	...

0800b904 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d101      	bne.n	800b916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	e10f      	b.n	800bb36 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a87      	ldr	r2, [pc, #540]	; (800bb40 <HAL_SPI_Init+0x23c>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d00f      	beq.n	800b946 <HAL_SPI_Init+0x42>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a86      	ldr	r2, [pc, #536]	; (800bb44 <HAL_SPI_Init+0x240>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d00a      	beq.n	800b946 <HAL_SPI_Init+0x42>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a84      	ldr	r2, [pc, #528]	; (800bb48 <HAL_SPI_Init+0x244>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d005      	beq.n	800b946 <HAL_SPI_Init+0x42>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	2b0f      	cmp	r3, #15
 800b940:	d901      	bls.n	800b946 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e0f7      	b.n	800bb36 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fd08 	bl	800c35c <SPI_GetPacketSize>
 800b94c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a7b      	ldr	r2, [pc, #492]	; (800bb40 <HAL_SPI_Init+0x23c>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d00c      	beq.n	800b972 <HAL_SPI_Init+0x6e>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a79      	ldr	r2, [pc, #484]	; (800bb44 <HAL_SPI_Init+0x240>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d007      	beq.n	800b972 <HAL_SPI_Init+0x6e>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a78      	ldr	r2, [pc, #480]	; (800bb48 <HAL_SPI_Init+0x244>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d002      	beq.n	800b972 <HAL_SPI_Init+0x6e>
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b08      	cmp	r3, #8
 800b970:	d811      	bhi.n	800b996 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b976:	4a72      	ldr	r2, [pc, #456]	; (800bb40 <HAL_SPI_Init+0x23c>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d009      	beq.n	800b990 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a70      	ldr	r2, [pc, #448]	; (800bb44 <HAL_SPI_Init+0x240>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d004      	beq.n	800b990 <HAL_SPI_Init+0x8c>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a6f      	ldr	r2, [pc, #444]	; (800bb48 <HAL_SPI_Init+0x244>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d104      	bne.n	800b99a <HAL_SPI_Init+0x96>
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2b10      	cmp	r3, #16
 800b994:	d901      	bls.n	800b99a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	e0cd      	b.n	800bb36 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d106      	bne.n	800b9b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7f6 fde0 	bl	8002574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f022 0201 	bic.w	r2, r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b9d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	699b      	ldr	r3, [r3, #24]
 800b9dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9e0:	d119      	bne.n	800ba16 <HAL_SPI_Init+0x112>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9ea:	d103      	bne.n	800b9f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d008      	beq.n	800ba06 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10c      	bne.n	800ba16 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba04:	d107      	bne.n	800ba16 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ba14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00f      	beq.n	800ba42 <HAL_SPI_Init+0x13e>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	2b06      	cmp	r3, #6
 800ba28:	d90b      	bls.n	800ba42 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	430a      	orrs	r2, r1
 800ba3e:	601a      	str	r2, [r3, #0]
 800ba40:	e007      	b.n	800ba52 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba50:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	69da      	ldr	r2, [r3, #28]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba5a:	431a      	orrs	r2, r3
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	431a      	orrs	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba64:	ea42 0103 	orr.w	r1, r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	68da      	ldr	r2, [r3, #12]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	430a      	orrs	r2, r1
 800ba72:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7c:	431a      	orrs	r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba82:	431a      	orrs	r2, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	699b      	ldr	r3, [r3, #24]
 800ba88:	431a      	orrs	r2, r3
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	431a      	orrs	r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	695b      	ldr	r3, [r3, #20]
 800ba94:	431a      	orrs	r2, r3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a1b      	ldr	r3, [r3, #32]
 800ba9a:	431a      	orrs	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	431a      	orrs	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baa6:	431a      	orrs	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	431a      	orrs	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bab2:	ea42 0103 	orr.w	r1, r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	430a      	orrs	r2, r1
 800bac0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d113      	bne.n	800baf2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800badc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800baf0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f022 0201 	bic.w	r2, r2, #1
 800bb00:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00a      	beq.n	800bb24 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	430a      	orrs	r2, r1
 800bb22:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	40013000 	.word	0x40013000
 800bb44:	40003800 	.word	0x40003800
 800bb48:	40003c00 	.word	0x40003c00

0800bb4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b08e      	sub	sp, #56	; 0x38
 800bb50:	af02      	add	r7, sp, #8
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
 800bb58:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	3320      	adds	r3, #32
 800bb60:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	3330      	adds	r3, #48	; 0x30
 800bb68:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb6e:	095b      	lsrs	r3, r3, #5
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	3301      	adds	r3, #1
 800bb74:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb76:	f7f6 ffb9 	bl	8002aec <HAL_GetTick>
 800bb7a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800bb7c:	887b      	ldrh	r3, [r7, #2]
 800bb7e:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800bb80:	887b      	ldrh	r3, [r7, #2]
 800bb82:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d001      	beq.n	800bb94 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800bb90:	2302      	movs	r3, #2
 800bb92:	e310      	b.n	800c1b6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d005      	beq.n	800bba6 <HAL_SPI_TransmitReceive+0x5a>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <HAL_SPI_TransmitReceive+0x5a>
 800bba0:	887b      	ldrh	r3, [r7, #2]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d101      	bne.n	800bbaa <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e305      	b.n	800c1b6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d101      	bne.n	800bbb8 <HAL_SPI_TransmitReceive+0x6c>
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	e2fe      	b.n	800c1b6 <HAL_SPI_TransmitReceive+0x66a>
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2205      	movs	r2, #5
 800bbc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	887a      	ldrh	r2, [r7, #2]
 800bbda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	887a      	ldrh	r2, [r7, #2]
 800bbe2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	68ba      	ldr	r2, [r7, #8]
 800bbea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	887a      	ldrh	r2, [r7, #2]
 800bbf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	887a      	ldrh	r2, [r7, #2]
 800bbf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	68da      	ldr	r2, [r3, #12]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800bc16:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a70      	ldr	r2, [pc, #448]	; (800bde0 <HAL_SPI_TransmitReceive+0x294>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d009      	beq.n	800bc36 <HAL_SPI_TransmitReceive+0xea>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a6f      	ldr	r2, [pc, #444]	; (800bde4 <HAL_SPI_TransmitReceive+0x298>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d004      	beq.n	800bc36 <HAL_SPI_TransmitReceive+0xea>
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a6d      	ldr	r2, [pc, #436]	; (800bde8 <HAL_SPI_TransmitReceive+0x29c>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d102      	bne.n	800bc3c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800bc36:	2310      	movs	r3, #16
 800bc38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc3a:	e001      	b.n	800bc40 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800bc3c:	2308      	movs	r3, #8
 800bc3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	4b69      	ldr	r3, [pc, #420]	; (800bdec <HAL_SPI_TransmitReceive+0x2a0>)
 800bc48:	4013      	ands	r3, r2
 800bc4a:	8879      	ldrh	r1, [r7, #2]
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	6812      	ldr	r2, [r2, #0]
 800bc50:	430b      	orrs	r3, r1
 800bc52:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f042 0201 	orr.w	r2, r2, #1
 800bc62:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc6c:	d107      	bne.n	800bc7e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	2b0f      	cmp	r3, #15
 800bc84:	f240 80a2 	bls.w	800bdcc <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800bc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8a:	089b      	lsrs	r3, r3, #2
 800bc8c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bc8e:	e094      	b.n	800bdba <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	f003 0302 	and.w	r3, r3, #2
 800bc9a:	2b02      	cmp	r3, #2
 800bc9c:	d120      	bne.n	800bce0 <HAL_SPI_TransmitReceive+0x194>
 800bc9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d01d      	beq.n	800bce0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bca4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bca6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800bca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcaa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d217      	bcs.n	800bce0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	6812      	ldr	r2, [r2, #0]
 800bcba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcc0:	1d1a      	adds	r2, r3, #4
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bcde:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	695b      	ldr	r3, [r3, #20]
 800bce6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800bce8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d065      	beq.n	800bdba <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	695b      	ldr	r3, [r3, #20]
 800bcf4:	f003 0301 	and.w	r3, r3, #1
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d118      	bne.n	800bd2e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bd06:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd0c:	1d1a      	adds	r2, r3, #4
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	3b01      	subs	r3, #1
 800bd1c:	b29a      	uxth	r2, r3
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd2a:	853b      	strh	r3, [r7, #40]	; 0x28
 800bd2c:	e045      	b.n	800bdba <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bd2e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bd30:	8bfb      	ldrh	r3, [r7, #30]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d21d      	bcs.n	800bd72 <HAL_SPI_TransmitReceive+0x226>
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d018      	beq.n	800bd72 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bd4a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd50:	1d1a      	adds	r2, r3, #4
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd6e:	853b      	strh	r3, [r7, #40]	; 0x28
 800bd70:	e023      	b.n	800bdba <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd72:	f7f6 febb 	bl	8002aec <HAL_GetTick>
 800bd76:	4602      	mov	r2, r0
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d803      	bhi.n	800bd8a <HAL_SPI_TransmitReceive+0x23e>
 800bd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd88:	d102      	bne.n	800bd90 <HAL_SPI_TransmitReceive+0x244>
 800bd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d114      	bne.n	800bdba <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f000 fa15 	bl	800c1c0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800bdb6:	2303      	movs	r3, #3
 800bdb8:	e1fd      	b.n	800c1b6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bdba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f47f af67 	bne.w	800bc90 <HAL_SPI_TransmitReceive+0x144>
 800bdc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f47f af63 	bne.w	800bc90 <HAL_SPI_TransmitReceive+0x144>
 800bdca:	e1ce      	b.n	800c16a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	2b07      	cmp	r3, #7
 800bdd2:	f240 81c2 	bls.w	800c15a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800bdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd8:	085b      	lsrs	r3, r3, #1
 800bdda:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bddc:	e0c9      	b.n	800bf72 <HAL_SPI_TransmitReceive+0x426>
 800bdde:	bf00      	nop
 800bde0:	40013000 	.word	0x40013000
 800bde4:	40003800 	.word	0x40003800
 800bde8:	40003c00 	.word	0x40003c00
 800bdec:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	695b      	ldr	r3, [r3, #20]
 800bdf6:	f003 0302 	and.w	r3, r3, #2
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d11f      	bne.n	800be3e <HAL_SPI_TransmitReceive+0x2f2>
 800bdfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800be00:	2b00      	cmp	r3, #0
 800be02:	d01c      	beq.n	800be3e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800be04:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800be06:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800be08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d216      	bcs.n	800be3e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be14:	881a      	ldrh	r2, [r3, #0]
 800be16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be18:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be1e:	1c9a      	adds	r2, r3, #2
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	3b01      	subs	r3, #1
 800be2e:	b29a      	uxth	r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be3c:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	695b      	ldr	r3, [r3, #20]
 800be44:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800be46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800be48:	2b00      	cmp	r3, #0
 800be4a:	f000 8092 	beq.w	800bf72 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	695b      	ldr	r3, [r3, #20]
 800be54:	f003 0301 	and.w	r3, r3, #1
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d118      	bne.n	800be8e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be60:	6a3a      	ldr	r2, [r7, #32]
 800be62:	8812      	ldrh	r2, [r2, #0]
 800be64:	b292      	uxth	r2, r2
 800be66:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be6c:	1c9a      	adds	r2, r3, #2
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be78:	b29b      	uxth	r3, r3
 800be7a:	3b01      	subs	r3, #1
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be8a:	853b      	strh	r3, [r7, #40]	; 0x28
 800be8c:	e071      	b.n	800bf72 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800be8e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800be90:	8bfb      	ldrh	r3, [r7, #30]
 800be92:	429a      	cmp	r2, r3
 800be94:	d228      	bcs.n	800bee8 <HAL_SPI_TransmitReceive+0x39c>
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d023      	beq.n	800bee8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bea4:	6a3a      	ldr	r2, [r7, #32]
 800bea6:	8812      	ldrh	r2, [r2, #0]
 800bea8:	b292      	uxth	r2, r2
 800beaa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800beb0:	1c9a      	adds	r2, r3, #2
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800beba:	6a3a      	ldr	r2, [r7, #32]
 800bebc:	8812      	ldrh	r2, [r2, #0]
 800bebe:	b292      	uxth	r2, r2
 800bec0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bec6:	1c9a      	adds	r2, r3, #2
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	3b02      	subs	r3, #2
 800bed6:	b29a      	uxth	r2, r3
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bee4:	853b      	strh	r3, [r7, #40]	; 0x28
 800bee6:	e044      	b.n	800bf72 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bee8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800beea:	2b01      	cmp	r3, #1
 800beec:	d11d      	bne.n	800bf2a <HAL_SPI_TransmitReceive+0x3de>
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d018      	beq.n	800bf2a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800befc:	6a3a      	ldr	r2, [r7, #32]
 800befe:	8812      	ldrh	r2, [r2, #0]
 800bf00:	b292      	uxth	r2, r2
 800bf02:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf08:	1c9a      	adds	r2, r3, #2
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	3b01      	subs	r3, #1
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bf26:	853b      	strh	r3, [r7, #40]	; 0x28
 800bf28:	e023      	b.n	800bf72 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf2a:	f7f6 fddf 	bl	8002aec <HAL_GetTick>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d803      	bhi.n	800bf42 <HAL_SPI_TransmitReceive+0x3f6>
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf40:	d102      	bne.n	800bf48 <HAL_SPI_TransmitReceive+0x3fc>
 800bf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d114      	bne.n	800bf72 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f000 f939 	bl	800c1c0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800bf6e:	2303      	movs	r3, #3
 800bf70:	e121      	b.n	800c1b6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f47f af3b 	bne.w	800bdf0 <HAL_SPI_TransmitReceive+0x2a4>
 800bf7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f47f af37 	bne.w	800bdf0 <HAL_SPI_TransmitReceive+0x2a4>
 800bf82:	e0f2      	b.n	800c16a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	695b      	ldr	r3, [r3, #20]
 800bf8a:	f003 0302 	and.w	r3, r3, #2
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	d121      	bne.n	800bfd6 <HAL_SPI_TransmitReceive+0x48a>
 800bf92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d01e      	beq.n	800bfd6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bf98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bf9a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800bf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d218      	bcs.n	800bfd6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3320      	adds	r3, #32
 800bfae:	7812      	ldrb	r2, [r2, #0]
 800bfb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfb6:	1c5a      	adds	r2, r3, #1
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfd4:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	695b      	ldr	r3, [r3, #20]
 800bfdc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800bfde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f000 80ba 	beq.w	800c15a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	695b      	ldr	r3, [r3, #20]
 800bfec:	f003 0301 	and.w	r3, r3, #1
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d11b      	bne.n	800c02c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c000:	7812      	ldrb	r2, [r2, #0]
 800c002:	b2d2      	uxtb	r2, r2
 800c004:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c016:	b29b      	uxth	r3, r3
 800c018:	3b01      	subs	r3, #1
 800c01a:	b29a      	uxth	r2, r3
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c028:	853b      	strh	r3, [r7, #40]	; 0x28
 800c02a:	e096      	b.n	800c15a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c02c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800c02e:	8bfb      	ldrh	r3, [r7, #30]
 800c030:	429a      	cmp	r2, r3
 800c032:	d24a      	bcs.n	800c0ca <HAL_SPI_TransmitReceive+0x57e>
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d045      	beq.n	800c0ca <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c04a:	7812      	ldrb	r2, [r2, #0]
 800c04c:	b2d2      	uxtb	r2, r2
 800c04e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c054:	1c5a      	adds	r2, r3, #1
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c066:	7812      	ldrb	r2, [r2, #0]
 800c068:	b2d2      	uxtb	r2, r2
 800c06a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c070:	1c5a      	adds	r2, r3, #1
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c082:	7812      	ldrb	r2, [r2, #0]
 800c084:	b2d2      	uxtb	r2, r2
 800c086:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c08c:	1c5a      	adds	r2, r3, #1
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c09e:	7812      	ldrb	r2, [r2, #0]
 800c0a0:	b2d2      	uxtb	r2, r2
 800c0a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0a8:	1c5a      	adds	r2, r3, #1
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	3b04      	subs	r3, #4
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0c6:	853b      	strh	r3, [r7, #40]	; 0x28
 800c0c8:	e047      	b.n	800c15a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c0ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c0cc:	2b03      	cmp	r3, #3
 800c0ce:	d820      	bhi.n	800c112 <HAL_SPI_TransmitReceive+0x5c6>
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d01b      	beq.n	800c112 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0e6:	7812      	ldrb	r2, [r2, #0]
 800c0e8:	b2d2      	uxtb	r2, r2
 800c0ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0f0:	1c5a      	adds	r2, r3, #1
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	3b01      	subs	r3, #1
 800c100:	b29a      	uxth	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c10e:	853b      	strh	r3, [r7, #40]	; 0x28
 800c110:	e023      	b.n	800c15a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c112:	f7f6 fceb 	bl	8002aec <HAL_GetTick>
 800c116:	4602      	mov	r2, r0
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	1ad3      	subs	r3, r2, r3
 800c11c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c11e:	429a      	cmp	r2, r3
 800c120:	d803      	bhi.n	800c12a <HAL_SPI_TransmitReceive+0x5de>
 800c122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c128:	d102      	bne.n	800c130 <HAL_SPI_TransmitReceive+0x5e4>
 800c12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d114      	bne.n	800c15a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800c130:	68f8      	ldr	r0, [r7, #12]
 800c132:	f000 f845 	bl	800c1c0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c13c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2201      	movs	r2, #1
 800c14a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800c156:	2303      	movs	r3, #3
 800c158:	e02d      	b.n	800c1b6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c15a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f47f af11 	bne.w	800bf84 <HAL_SPI_TransmitReceive+0x438>
 800c162:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c164:	2b00      	cmp	r3, #0
 800c166:	f47f af0d 	bne.w	800bf84 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c170:	2200      	movs	r2, #0
 800c172:	2108      	movs	r1, #8
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f000 f8c3 	bl	800c300 <SPI_WaitOnFlagUntilTimeout>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d007      	beq.n	800c190 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c186:	f043 0220 	orr.w	r2, r3, #32
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f000 f815 	bl	800c1c0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d001      	beq.n	800c1b4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e000      	b.n	800c1b6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800c1b4:	2300      	movs	r3, #0
  }
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3730      	adds	r7, #48	; 0x30
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop

0800c1c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	695b      	ldr	r3, [r3, #20]
 800c1ce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	699a      	ldr	r2, [r3, #24]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f042 0208 	orr.w	r2, r2, #8
 800c1de:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	699a      	ldr	r2, [r3, #24]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f042 0210 	orr.w	r2, r2, #16
 800c1ee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f022 0201 	bic.w	r2, r2, #1
 800c1fe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6919      	ldr	r1, [r3, #16]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	4b3c      	ldr	r3, [pc, #240]	; (800c2fc <SPI_CloseTransfer+0x13c>)
 800c20c:	400b      	ands	r3, r1
 800c20e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	689a      	ldr	r2, [r3, #8]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c21e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c226:	b2db      	uxtb	r3, r3
 800c228:	2b04      	cmp	r3, #4
 800c22a:	d014      	beq.n	800c256 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f003 0320 	and.w	r3, r3, #32
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00f      	beq.n	800c256 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c23c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	699a      	ldr	r2, [r3, #24]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f042 0220 	orr.w	r2, r2, #32
 800c254:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b03      	cmp	r3, #3
 800c260:	d014      	beq.n	800c28c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00f      	beq.n	800c28c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c272:	f043 0204 	orr.w	r2, r3, #4
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	699a      	ldr	r2, [r3, #24]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c28a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00f      	beq.n	800c2b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c29c:	f043 0201 	orr.w	r2, r3, #1
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	699a      	ldr	r2, [r3, #24]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00f      	beq.n	800c2e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2c6:	f043 0208 	orr.w	r2, r3, #8
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	699a      	ldr	r2, [r3, #24]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c2f0:	bf00      	nop
 800c2f2:	3714      	adds	r7, #20
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr
 800c2fc:	fffffc90 	.word	0xfffffc90

0800c300 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	603b      	str	r3, [r7, #0]
 800c30c:	4613      	mov	r3, r2
 800c30e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c310:	e010      	b.n	800c334 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c312:	f7f6 fbeb 	bl	8002aec <HAL_GetTick>
 800c316:	4602      	mov	r2, r0
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	1ad3      	subs	r3, r2, r3
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d803      	bhi.n	800c32a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c328:	d102      	bne.n	800c330 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d101      	bne.n	800c334 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c330:	2303      	movs	r3, #3
 800c332:	e00f      	b.n	800c354 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	695a      	ldr	r2, [r3, #20]
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	4013      	ands	r3, r2
 800c33e:	68ba      	ldr	r2, [r7, #8]
 800c340:	429a      	cmp	r2, r3
 800c342:	bf0c      	ite	eq
 800c344:	2301      	moveq	r3, #1
 800c346:	2300      	movne	r3, #0
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	461a      	mov	r2, r3
 800c34c:	79fb      	ldrb	r3, [r7, #7]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d0df      	beq.n	800c312 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c368:	095b      	lsrs	r3, r3, #5
 800c36a:	3301      	adds	r3, #1
 800c36c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	3301      	adds	r3, #1
 800c374:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	3307      	adds	r3, #7
 800c37a:	08db      	lsrs	r3, r3, #3
 800c37c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	68fa      	ldr	r2, [r7, #12]
 800c382:	fb02 f303 	mul.w	r3, r2, r3
}
 800c386:	4618      	mov	r0, r3
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
	...

0800c394 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d121      	bne.n	800c3ea <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	4b27      	ldr	r3, [pc, #156]	; (800c448 <FMC_SDRAM_Init+0xb4>)
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	683a      	ldr	r2, [r7, #0]
 800c3b0:	6851      	ldr	r1, [r2, #4]
 800c3b2:	683a      	ldr	r2, [r7, #0]
 800c3b4:	6892      	ldr	r2, [r2, #8]
 800c3b6:	4311      	orrs	r1, r2
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	68d2      	ldr	r2, [r2, #12]
 800c3bc:	4311      	orrs	r1, r2
 800c3be:	683a      	ldr	r2, [r7, #0]
 800c3c0:	6912      	ldr	r2, [r2, #16]
 800c3c2:	4311      	orrs	r1, r2
 800c3c4:	683a      	ldr	r2, [r7, #0]
 800c3c6:	6952      	ldr	r2, [r2, #20]
 800c3c8:	4311      	orrs	r1, r2
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	6992      	ldr	r2, [r2, #24]
 800c3ce:	4311      	orrs	r1, r2
 800c3d0:	683a      	ldr	r2, [r7, #0]
 800c3d2:	69d2      	ldr	r2, [r2, #28]
 800c3d4:	4311      	orrs	r1, r2
 800c3d6:	683a      	ldr	r2, [r7, #0]
 800c3d8:	6a12      	ldr	r2, [r2, #32]
 800c3da:	4311      	orrs	r1, r2
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c3e0:	430a      	orrs	r2, r1
 800c3e2:	431a      	orrs	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	601a      	str	r2, [r3, #0]
 800c3e8:	e026      	b.n	800c438 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	69d9      	ldr	r1, [r3, #28]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	6a1b      	ldr	r3, [r3, #32]
 800c3fa:	4319      	orrs	r1, r3
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c400:	430b      	orrs	r3, r1
 800c402:	431a      	orrs	r2, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	685a      	ldr	r2, [r3, #4]
 800c40c:	4b0e      	ldr	r3, [pc, #56]	; (800c448 <FMC_SDRAM_Init+0xb4>)
 800c40e:	4013      	ands	r3, r2
 800c410:	683a      	ldr	r2, [r7, #0]
 800c412:	6851      	ldr	r1, [r2, #4]
 800c414:	683a      	ldr	r2, [r7, #0]
 800c416:	6892      	ldr	r2, [r2, #8]
 800c418:	4311      	orrs	r1, r2
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	68d2      	ldr	r2, [r2, #12]
 800c41e:	4311      	orrs	r1, r2
 800c420:	683a      	ldr	r2, [r7, #0]
 800c422:	6912      	ldr	r2, [r2, #16]
 800c424:	4311      	orrs	r1, r2
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	6952      	ldr	r2, [r2, #20]
 800c42a:	4311      	orrs	r1, r2
 800c42c:	683a      	ldr	r2, [r7, #0]
 800c42e:	6992      	ldr	r2, [r2, #24]
 800c430:	430a      	orrs	r2, r1
 800c432:	431a      	orrs	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	370c      	adds	r7, #12
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	ffff8000 	.word	0xffff8000

0800c44c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d128      	bne.n	800c4b0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	1e59      	subs	r1, r3, #1
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	3b01      	subs	r3, #1
 800c472:	011b      	lsls	r3, r3, #4
 800c474:	4319      	orrs	r1, r3
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	689b      	ldr	r3, [r3, #8]
 800c47a:	3b01      	subs	r3, #1
 800c47c:	021b      	lsls	r3, r3, #8
 800c47e:	4319      	orrs	r1, r3
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	3b01      	subs	r3, #1
 800c486:	031b      	lsls	r3, r3, #12
 800c488:	4319      	orrs	r1, r3
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	3b01      	subs	r3, #1
 800c490:	041b      	lsls	r3, r3, #16
 800c492:	4319      	orrs	r1, r3
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	695b      	ldr	r3, [r3, #20]
 800c498:	3b01      	subs	r3, #1
 800c49a:	051b      	lsls	r3, r3, #20
 800c49c:	4319      	orrs	r1, r3
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	699b      	ldr	r3, [r3, #24]
 800c4a2:	3b01      	subs	r3, #1
 800c4a4:	061b      	lsls	r3, r3, #24
 800c4a6:	430b      	orrs	r3, r1
 800c4a8:	431a      	orrs	r2, r3
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	609a      	str	r2, [r3, #8]
 800c4ae:	e02d      	b.n	800c50c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	689a      	ldr	r2, [r3, #8]
 800c4b4:	4b19      	ldr	r3, [pc, #100]	; (800c51c <FMC_SDRAM_Timing_Init+0xd0>)
 800c4b6:	4013      	ands	r3, r2
 800c4b8:	68ba      	ldr	r2, [r7, #8]
 800c4ba:	68d2      	ldr	r2, [r2, #12]
 800c4bc:	3a01      	subs	r2, #1
 800c4be:	0311      	lsls	r1, r2, #12
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	6952      	ldr	r2, [r2, #20]
 800c4c4:	3a01      	subs	r2, #1
 800c4c6:	0512      	lsls	r2, r2, #20
 800c4c8:	430a      	orrs	r2, r1
 800c4ca:	431a      	orrs	r2, r3
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	1e59      	subs	r1, r3, #1
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	011b      	lsls	r3, r3, #4
 800c4e6:	4319      	orrs	r1, r3
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	3b01      	subs	r3, #1
 800c4ee:	021b      	lsls	r3, r3, #8
 800c4f0:	4319      	orrs	r1, r3
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	691b      	ldr	r3, [r3, #16]
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	041b      	lsls	r3, r3, #16
 800c4fa:	4319      	orrs	r1, r3
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	699b      	ldr	r3, [r3, #24]
 800c500:	3b01      	subs	r3, #1
 800c502:	061b      	lsls	r3, r3, #24
 800c504:	430b      	orrs	r3, r1
 800c506:	431a      	orrs	r2, r3
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3714      	adds	r7, #20
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	ff0f0fff 	.word	0xff0f0fff

0800c520 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	691a      	ldr	r2, [r3, #16]
 800c530:	4b0c      	ldr	r3, [pc, #48]	; (800c564 <FMC_SDRAM_SendCommand+0x44>)
 800c532:	4013      	ands	r3, r2
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	6811      	ldr	r1, [r2, #0]
 800c538:	68ba      	ldr	r2, [r7, #8]
 800c53a:	6852      	ldr	r2, [r2, #4]
 800c53c:	4311      	orrs	r1, r2
 800c53e:	68ba      	ldr	r2, [r7, #8]
 800c540:	6892      	ldr	r2, [r2, #8]
 800c542:	3a01      	subs	r2, #1
 800c544:	0152      	lsls	r2, r2, #5
 800c546:	4311      	orrs	r1, r2
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	68d2      	ldr	r2, [r2, #12]
 800c54c:	0252      	lsls	r2, r2, #9
 800c54e:	430a      	orrs	r2, r1
 800c550:	431a      	orrs	r2, r3
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c556:	2300      	movs	r3, #0
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3714      	adds	r7, #20
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr
 800c564:	ffc00000 	.word	0xffc00000

0800c568 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	695a      	ldr	r2, [r3, #20]
 800c576:	4b07      	ldr	r3, [pc, #28]	; (800c594 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c578:	4013      	ands	r3, r2
 800c57a:	683a      	ldr	r2, [r7, #0]
 800c57c:	0052      	lsls	r2, r2, #1
 800c57e:	431a      	orrs	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	370c      	adds	r7, #12
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	ffffc001 	.word	0xffffc001

0800c598 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c598:	b084      	sub	sp, #16
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b084      	sub	sp, #16
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
 800c5a2:	f107 001c 	add.w	r0, r7, #28
 800c5a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c5aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d121      	bne.n	800c5f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68da      	ldr	r2, [r3, #12]
 800c5c2:	4b2c      	ldr	r3, [pc, #176]	; (800c674 <USB_CoreInit+0xdc>)
 800c5c4:	4013      	ands	r3, r2
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c5d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d105      	bne.n	800c5ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f001 fa1a 	bl	800da24 <USB_CoreReset>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	73fb      	strb	r3, [r7, #15]
 800c5f4:	e01b      	b.n	800c62e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f001 fa0e 	bl	800da24 <USB_CoreReset>
 800c608:	4603      	mov	r3, r0
 800c60a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c60c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c610:	2b00      	cmp	r3, #0
 800c612:	d106      	bne.n	800c622 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c618:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	639a      	str	r2, [r3, #56]	; 0x38
 800c620:	e005      	b.n	800c62e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c626:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c62e:	7fbb      	ldrb	r3, [r7, #30]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d116      	bne.n	800c662 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c638:	b29a      	uxth	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c642:	4b0d      	ldr	r3, [pc, #52]	; (800c678 <USB_CoreInit+0xe0>)
 800c644:	4313      	orrs	r3, r2
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	f043 0206 	orr.w	r2, r3, #6
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	f043 0220 	orr.w	r2, r3, #32
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c662:	7bfb      	ldrb	r3, [r7, #15]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c66e:	b004      	add	sp, #16
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	ffbdffbf 	.word	0xffbdffbf
 800c678:	03ee0000 	.word	0x03ee0000

0800c67c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b087      	sub	sp, #28
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	4613      	mov	r3, r2
 800c688:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c68a:	79fb      	ldrb	r3, [r7, #7]
 800c68c:	2b02      	cmp	r3, #2
 800c68e:	d165      	bne.n	800c75c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	4a41      	ldr	r2, [pc, #260]	; (800c798 <USB_SetTurnaroundTime+0x11c>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d906      	bls.n	800c6a6 <USB_SetTurnaroundTime+0x2a>
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	4a40      	ldr	r2, [pc, #256]	; (800c79c <USB_SetTurnaroundTime+0x120>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d202      	bcs.n	800c6a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c6a0:	230f      	movs	r3, #15
 800c6a2:	617b      	str	r3, [r7, #20]
 800c6a4:	e062      	b.n	800c76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	4a3c      	ldr	r2, [pc, #240]	; (800c79c <USB_SetTurnaroundTime+0x120>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d306      	bcc.n	800c6bc <USB_SetTurnaroundTime+0x40>
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	4a3b      	ldr	r2, [pc, #236]	; (800c7a0 <USB_SetTurnaroundTime+0x124>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d202      	bcs.n	800c6bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c6b6:	230e      	movs	r3, #14
 800c6b8:	617b      	str	r3, [r7, #20]
 800c6ba:	e057      	b.n	800c76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	4a38      	ldr	r2, [pc, #224]	; (800c7a0 <USB_SetTurnaroundTime+0x124>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d306      	bcc.n	800c6d2 <USB_SetTurnaroundTime+0x56>
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	4a37      	ldr	r2, [pc, #220]	; (800c7a4 <USB_SetTurnaroundTime+0x128>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d202      	bcs.n	800c6d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c6cc:	230d      	movs	r3, #13
 800c6ce:	617b      	str	r3, [r7, #20]
 800c6d0:	e04c      	b.n	800c76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	4a33      	ldr	r2, [pc, #204]	; (800c7a4 <USB_SetTurnaroundTime+0x128>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d306      	bcc.n	800c6e8 <USB_SetTurnaroundTime+0x6c>
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	4a32      	ldr	r2, [pc, #200]	; (800c7a8 <USB_SetTurnaroundTime+0x12c>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d802      	bhi.n	800c6e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c6e2:	230c      	movs	r3, #12
 800c6e4:	617b      	str	r3, [r7, #20]
 800c6e6:	e041      	b.n	800c76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	4a2f      	ldr	r2, [pc, #188]	; (800c7a8 <USB_SetTurnaroundTime+0x12c>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d906      	bls.n	800c6fe <USB_SetTurnaroundTime+0x82>
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	4a2e      	ldr	r2, [pc, #184]	; (800c7ac <USB_SetTurnaroundTime+0x130>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d802      	bhi.n	800c6fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c6f8:	230b      	movs	r3, #11
 800c6fa:	617b      	str	r3, [r7, #20]
 800c6fc:	e036      	b.n	800c76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	4a2a      	ldr	r2, [pc, #168]	; (800c7ac <USB_SetTurnaroundTime+0x130>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d906      	bls.n	800c714 <USB_SetTurnaroundTime+0x98>
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	4a29      	ldr	r2, [pc, #164]	; (800c7b0 <USB_SetTurnaroundTime+0x134>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d802      	bhi.n	800c714 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c70e:	230a      	movs	r3, #10
 800c710:	617b      	str	r3, [r7, #20]
 800c712:	e02b      	b.n	800c76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	4a26      	ldr	r2, [pc, #152]	; (800c7b0 <USB_SetTurnaroundTime+0x134>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d906      	bls.n	800c72a <USB_SetTurnaroundTime+0xae>
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	4a25      	ldr	r2, [pc, #148]	; (800c7b4 <USB_SetTurnaroundTime+0x138>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d202      	bcs.n	800c72a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c724:	2309      	movs	r3, #9
 800c726:	617b      	str	r3, [r7, #20]
 800c728:	e020      	b.n	800c76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	4a21      	ldr	r2, [pc, #132]	; (800c7b4 <USB_SetTurnaroundTime+0x138>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d306      	bcc.n	800c740 <USB_SetTurnaroundTime+0xc4>
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	4a20      	ldr	r2, [pc, #128]	; (800c7b8 <USB_SetTurnaroundTime+0x13c>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d802      	bhi.n	800c740 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c73a:	2308      	movs	r3, #8
 800c73c:	617b      	str	r3, [r7, #20]
 800c73e:	e015      	b.n	800c76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	4a1d      	ldr	r2, [pc, #116]	; (800c7b8 <USB_SetTurnaroundTime+0x13c>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d906      	bls.n	800c756 <USB_SetTurnaroundTime+0xda>
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	4a1c      	ldr	r2, [pc, #112]	; (800c7bc <USB_SetTurnaroundTime+0x140>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d202      	bcs.n	800c756 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c750:	2307      	movs	r3, #7
 800c752:	617b      	str	r3, [r7, #20]
 800c754:	e00a      	b.n	800c76c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c756:	2306      	movs	r3, #6
 800c758:	617b      	str	r3, [r7, #20]
 800c75a:	e007      	b.n	800c76c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c75c:	79fb      	ldrb	r3, [r7, #7]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d102      	bne.n	800c768 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c762:	2309      	movs	r3, #9
 800c764:	617b      	str	r3, [r7, #20]
 800c766:	e001      	b.n	800c76c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c768:	2309      	movs	r3, #9
 800c76a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	68da      	ldr	r2, [r3, #12]
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	029b      	lsls	r3, r3, #10
 800c780:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c784:	431a      	orrs	r2, r3
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c78a:	2300      	movs	r3, #0
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	371c      	adds	r7, #28
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr
 800c798:	00d8acbf 	.word	0x00d8acbf
 800c79c:	00e4e1c0 	.word	0x00e4e1c0
 800c7a0:	00f42400 	.word	0x00f42400
 800c7a4:	01067380 	.word	0x01067380
 800c7a8:	011a499f 	.word	0x011a499f
 800c7ac:	01312cff 	.word	0x01312cff
 800c7b0:	014ca43f 	.word	0x014ca43f
 800c7b4:	016e3600 	.word	0x016e3600
 800c7b8:	01a6ab1f 	.word	0x01a6ab1f
 800c7bc:	01e84800 	.word	0x01e84800

0800c7c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	f043 0201 	orr.w	r2, r3, #1
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7d4:	2300      	movs	r3, #0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	370c      	adds	r7, #12
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr

0800c7e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7e2:	b480      	push	{r7}
 800c7e4:	b083      	sub	sp, #12
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	f023 0201 	bic.w	r2, r3, #1
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7f6:	2300      	movs	r3, #0
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c810:	2300      	movs	r3, #0
 800c812:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c820:	78fb      	ldrb	r3, [r7, #3]
 800c822:	2b01      	cmp	r3, #1
 800c824:	d115      	bne.n	800c852 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c832:	200a      	movs	r0, #10
 800c834:	f7f6 f966 	bl	8002b04 <HAL_Delay>
      ms += 10U;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	330a      	adds	r3, #10
 800c83c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f001 f85f 	bl	800d902 <USB_GetMode>
 800c844:	4603      	mov	r3, r0
 800c846:	2b01      	cmp	r3, #1
 800c848:	d01e      	beq.n	800c888 <USB_SetCurrentMode+0x84>
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2bc7      	cmp	r3, #199	; 0xc7
 800c84e:	d9f0      	bls.n	800c832 <USB_SetCurrentMode+0x2e>
 800c850:	e01a      	b.n	800c888 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c852:	78fb      	ldrb	r3, [r7, #3]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d115      	bne.n	800c884 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c864:	200a      	movs	r0, #10
 800c866:	f7f6 f94d 	bl	8002b04 <HAL_Delay>
      ms += 10U;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	330a      	adds	r3, #10
 800c86e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f001 f846 	bl	800d902 <USB_GetMode>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d005      	beq.n	800c888 <USB_SetCurrentMode+0x84>
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2bc7      	cmp	r3, #199	; 0xc7
 800c880:	d9f0      	bls.n	800c864 <USB_SetCurrentMode+0x60>
 800c882:	e001      	b.n	800c888 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c884:	2301      	movs	r3, #1
 800c886:	e005      	b.n	800c894 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2bc8      	cmp	r3, #200	; 0xc8
 800c88c:	d101      	bne.n	800c892 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	e000      	b.n	800c894 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c892:	2300      	movs	r3, #0
}
 800c894:	4618      	mov	r0, r3
 800c896:	3710      	adds	r7, #16
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c89c:	b084      	sub	sp, #16
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b086      	sub	sp, #24
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
 800c8a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c8aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	613b      	str	r3, [r7, #16]
 800c8ba:	e009      	b.n	800c8d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	3340      	adds	r3, #64	; 0x40
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	4413      	add	r3, r2
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	613b      	str	r3, [r7, #16]
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	2b0e      	cmp	r3, #14
 800c8d4:	d9f2      	bls.n	800c8bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c8d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d11c      	bne.n	800c918 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	68fa      	ldr	r2, [r7, #12]
 800c8e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8ec:	f043 0302 	orr.w	r3, r3, #2
 800c8f0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	601a      	str	r2, [r3, #0]
 800c916:	e005      	b.n	800c924 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c91c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c92a:	461a      	mov	r2, r3
 800c92c:	2300      	movs	r3, #0
 800c92e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c930:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c934:	2b01      	cmp	r3, #1
 800c936:	d10d      	bne.n	800c954 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d104      	bne.n	800c94a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c940:	2100      	movs	r1, #0
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 f968 	bl	800cc18 <USB_SetDevSpeed>
 800c948:	e008      	b.n	800c95c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c94a:	2101      	movs	r1, #1
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f963 	bl	800cc18 <USB_SetDevSpeed>
 800c952:	e003      	b.n	800c95c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c954:	2103      	movs	r1, #3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 f95e 	bl	800cc18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c95c:	2110      	movs	r1, #16
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f8fa 	bl	800cb58 <USB_FlushTxFifo>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d001      	beq.n	800c96e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800c96a:	2301      	movs	r3, #1
 800c96c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f924 	bl	800cbbc <USB_FlushRxFifo>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d001      	beq.n	800c97e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800c97a:	2301      	movs	r3, #1
 800c97c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c984:	461a      	mov	r2, r3
 800c986:	2300      	movs	r3, #0
 800c988:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c990:	461a      	mov	r2, r3
 800c992:	2300      	movs	r3, #0
 800c994:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c99c:	461a      	mov	r2, r3
 800c99e:	2300      	movs	r3, #0
 800c9a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	613b      	str	r3, [r7, #16]
 800c9a6:	e043      	b.n	800ca30 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	015a      	lsls	r2, r3, #5
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9be:	d118      	bne.n	800c9f2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d10a      	bne.n	800c9dc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	015a      	lsls	r2, r3, #5
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c9d8:	6013      	str	r3, [r2, #0]
 800c9da:	e013      	b.n	800ca04 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	015a      	lsls	r2, r3, #5
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	4413      	add	r3, r2
 800c9e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c9ee:	6013      	str	r3, [r2, #0]
 800c9f0:	e008      	b.n	800ca04 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	015a      	lsls	r2, r3, #5
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9fe:	461a      	mov	r2, r3
 800ca00:	2300      	movs	r3, #0
 800ca02:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	015a      	lsls	r2, r3, #5
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca10:	461a      	mov	r2, r3
 800ca12:	2300      	movs	r3, #0
 800ca14:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	015a      	lsls	r2, r3, #5
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca22:	461a      	mov	r2, r3
 800ca24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	613b      	str	r3, [r7, #16]
 800ca30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ca34:	461a      	mov	r2, r3
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d3b5      	bcc.n	800c9a8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	613b      	str	r3, [r7, #16]
 800ca40:	e043      	b.n	800caca <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	015a      	lsls	r2, r3, #5
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	4413      	add	r3, r2
 800ca4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca58:	d118      	bne.n	800ca8c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d10a      	bne.n	800ca76 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	015a      	lsls	r2, r3, #5
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	4413      	add	r3, r2
 800ca68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca72:	6013      	str	r3, [r2, #0]
 800ca74:	e013      	b.n	800ca9e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	015a      	lsls	r2, r3, #5
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca82:	461a      	mov	r2, r3
 800ca84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca88:	6013      	str	r3, [r2, #0]
 800ca8a:	e008      	b.n	800ca9e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	015a      	lsls	r2, r3, #5
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	4413      	add	r3, r2
 800ca94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca98:	461a      	mov	r2, r3
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	015a      	lsls	r2, r3, #5
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	4413      	add	r3, r2
 800caa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caaa:	461a      	mov	r2, r3
 800caac:	2300      	movs	r3, #0
 800caae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	015a      	lsls	r2, r3, #5
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	4413      	add	r3, r2
 800cab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cabc:	461a      	mov	r2, r3
 800cabe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cac2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	3301      	adds	r3, #1
 800cac8:	613b      	str	r3, [r7, #16]
 800caca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cace:	461a      	mov	r2, r3
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d3b5      	bcc.n	800ca42 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cadc:	691b      	ldr	r3, [r3, #16]
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cae8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800caf6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800caf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d105      	bne.n	800cb0c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	699b      	ldr	r3, [r3, #24]
 800cb04:	f043 0210 	orr.w	r2, r3, #16
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	699a      	ldr	r2, [r3, #24]
 800cb10:	4b0f      	ldr	r3, [pc, #60]	; (800cb50 <USB_DevInit+0x2b4>)
 800cb12:	4313      	orrs	r3, r2
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cb18:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d005      	beq.n	800cb2c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	699b      	ldr	r3, [r3, #24]
 800cb24:	f043 0208 	orr.w	r2, r3, #8
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cb2c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d105      	bne.n	800cb40 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	699a      	ldr	r2, [r3, #24]
 800cb38:	4b06      	ldr	r3, [pc, #24]	; (800cb54 <USB_DevInit+0x2b8>)
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cb40:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3718      	adds	r7, #24
 800cb46:	46bd      	mov	sp, r7
 800cb48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb4c:	b004      	add	sp, #16
 800cb4e:	4770      	bx	lr
 800cb50:	803c3800 	.word	0x803c3800
 800cb54:	40000004 	.word	0x40000004

0800cb58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb62:	2300      	movs	r3, #0
 800cb64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800cb72:	d901      	bls.n	800cb78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cb74:	2303      	movs	r3, #3
 800cb76:	e01b      	b.n	800cbb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	691b      	ldr	r3, [r3, #16]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	daf2      	bge.n	800cb66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cb80:	2300      	movs	r3, #0
 800cb82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	019b      	lsls	r3, r3, #6
 800cb88:	f043 0220 	orr.w	r2, r3, #32
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	3301      	adds	r3, #1
 800cb94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800cb9c:	d901      	bls.n	800cba2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cb9e:	2303      	movs	r3, #3
 800cba0:	e006      	b.n	800cbb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	691b      	ldr	r3, [r3, #16]
 800cba6:	f003 0320 	and.w	r3, r3, #32
 800cbaa:	2b20      	cmp	r3, #32
 800cbac:	d0f0      	beq.n	800cb90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3714      	adds	r7, #20
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800cbd4:	d901      	bls.n	800cbda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cbd6:	2303      	movs	r3, #3
 800cbd8:	e018      	b.n	800cc0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	691b      	ldr	r3, [r3, #16]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	daf2      	bge.n	800cbc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2210      	movs	r2, #16
 800cbea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	3301      	adds	r3, #1
 800cbf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800cbf8:	d901      	bls.n	800cbfe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cbfa:	2303      	movs	r3, #3
 800cbfc:	e006      	b.n	800cc0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	f003 0310 	and.w	r3, r3, #16
 800cc06:	2b10      	cmp	r3, #16
 800cc08:	d0f0      	beq.n	800cbec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cc0a:	2300      	movs	r3, #0
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3714      	adds	r7, #20
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	460b      	mov	r3, r1
 800cc22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	78fb      	ldrb	r3, [r7, #3]
 800cc32:	68f9      	ldr	r1, [r7, #12]
 800cc34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cc3c:	2300      	movs	r3, #0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3714      	adds	r7, #20
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr

0800cc4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800cc4a:	b480      	push	{r7}
 800cc4c:	b087      	sub	sp, #28
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	f003 0306 	and.w	r3, r3, #6
 800cc62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d102      	bne.n	800cc70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	75fb      	strb	r3, [r7, #23]
 800cc6e:	e00a      	b.n	800cc86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2b02      	cmp	r3, #2
 800cc74:	d002      	beq.n	800cc7c <USB_GetDevSpeed+0x32>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2b06      	cmp	r3, #6
 800cc7a:	d102      	bne.n	800cc82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	75fb      	strb	r3, [r7, #23]
 800cc80:	e001      	b.n	800cc86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cc82:	230f      	movs	r3, #15
 800cc84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cc86:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	371c      	adds	r7, #28
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	785b      	ldrb	r3, [r3, #1]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d139      	bne.n	800cd24 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccb6:	69da      	ldr	r2, [r3, #28]
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	f003 030f 	and.w	r3, r3, #15
 800ccc0:	2101      	movs	r1, #1
 800ccc2:	fa01 f303 	lsl.w	r3, r1, r3
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	68f9      	ldr	r1, [r7, #12]
 800ccca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	015a      	lsls	r2, r3, #5
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	4413      	add	r3, r2
 800ccda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d153      	bne.n	800cd90 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	015a      	lsls	r2, r3, #5
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	4413      	add	r3, r2
 800ccf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	791b      	ldrb	r3, [r3, #4]
 800cd02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	059b      	lsls	r3, r3, #22
 800cd0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd0c:	431a      	orrs	r2, r3
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	0159      	lsls	r1, r3, #5
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	440b      	add	r3, r1
 800cd16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	4b20      	ldr	r3, [pc, #128]	; (800cda0 <USB_ActivateEndpoint+0x10c>)
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	600b      	str	r3, [r1, #0]
 800cd22:	e035      	b.n	800cd90 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd2a:	69da      	ldr	r2, [r3, #28]
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	f003 030f 	and.w	r3, r3, #15
 800cd34:	2101      	movs	r1, #1
 800cd36:	fa01 f303 	lsl.w	r3, r1, r3
 800cd3a:	041b      	lsls	r3, r3, #16
 800cd3c:	68f9      	ldr	r1, [r7, #12]
 800cd3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd42:	4313      	orrs	r3, r2
 800cd44:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	015a      	lsls	r2, r3, #5
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d119      	bne.n	800cd90 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	015a      	lsls	r2, r3, #5
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4413      	add	r3, r2
 800cd64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	791b      	ldrb	r3, [r3, #4]
 800cd76:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cd78:	430b      	orrs	r3, r1
 800cd7a:	431a      	orrs	r2, r3
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	0159      	lsls	r1, r3, #5
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	440b      	add	r3, r1
 800cd84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd88:	4619      	mov	r1, r3
 800cd8a:	4b05      	ldr	r3, [pc, #20]	; (800cda0 <USB_ActivateEndpoint+0x10c>)
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3714      	adds	r7, #20
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr
 800cd9e:	bf00      	nop
 800cda0:	10008000 	.word	0x10008000

0800cda4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b08a      	sub	sp, #40	; 0x28
 800cda8:	af02      	add	r7, sp, #8
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	4613      	mov	r3, r2
 800cdb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	785b      	ldrb	r3, [r3, #1]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	f040 8181 	bne.w	800d0c8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	691b      	ldr	r3, [r3, #16]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d132      	bne.n	800ce34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	015a      	lsls	r2, r3, #5
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdda:	691a      	ldr	r2, [r3, #16]
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	0159      	lsls	r1, r3, #5
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	440b      	add	r3, r1
 800cde4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cde8:	4619      	mov	r1, r3
 800cdea:	4ba5      	ldr	r3, [pc, #660]	; (800d080 <USB_EPStartXfer+0x2dc>)
 800cdec:	4013      	ands	r3, r2
 800cdee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	015a      	lsls	r2, r3, #5
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdfc:	691b      	ldr	r3, [r3, #16]
 800cdfe:	69ba      	ldr	r2, [r7, #24]
 800ce00:	0151      	lsls	r1, r2, #5
 800ce02:	69fa      	ldr	r2, [r7, #28]
 800ce04:	440a      	add	r2, r1
 800ce06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	015a      	lsls	r2, r3, #5
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	4413      	add	r3, r2
 800ce18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce1c:	691a      	ldr	r2, [r3, #16]
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	0159      	lsls	r1, r3, #5
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	440b      	add	r3, r1
 800ce26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	4b95      	ldr	r3, [pc, #596]	; (800d084 <USB_EPStartXfer+0x2e0>)
 800ce2e:	4013      	ands	r3, r2
 800ce30:	610b      	str	r3, [r1, #16]
 800ce32:	e092      	b.n	800cf5a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	015a      	lsls	r2, r3, #5
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce40:	691a      	ldr	r2, [r3, #16]
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	0159      	lsls	r1, r3, #5
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	440b      	add	r3, r1
 800ce4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce4e:	4619      	mov	r1, r3
 800ce50:	4b8c      	ldr	r3, [pc, #560]	; (800d084 <USB_EPStartXfer+0x2e0>)
 800ce52:	4013      	ands	r3, r2
 800ce54:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	015a      	lsls	r2, r3, #5
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce62:	691a      	ldr	r2, [r3, #16]
 800ce64:	69bb      	ldr	r3, [r7, #24]
 800ce66:	0159      	lsls	r1, r3, #5
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	440b      	add	r3, r1
 800ce6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce70:	4619      	mov	r1, r3
 800ce72:	4b83      	ldr	r3, [pc, #524]	; (800d080 <USB_EPStartXfer+0x2dc>)
 800ce74:	4013      	ands	r3, r2
 800ce76:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d11a      	bne.n	800ceb4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	691a      	ldr	r2, [r3, #16]
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d903      	bls.n	800ce92 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	689a      	ldr	r2, [r3, #8]
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	015a      	lsls	r2, r3, #5
 800ce96:	69fb      	ldr	r3, [r7, #28]
 800ce98:	4413      	add	r3, r2
 800ce9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce9e:	691b      	ldr	r3, [r3, #16]
 800cea0:	69ba      	ldr	r2, [r7, #24]
 800cea2:	0151      	lsls	r1, r2, #5
 800cea4:	69fa      	ldr	r2, [r7, #28]
 800cea6:	440a      	add	r2, r1
 800cea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ceac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ceb0:	6113      	str	r3, [r2, #16]
 800ceb2:	e01b      	b.n	800ceec <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	015a      	lsls	r2, r3, #5
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	4413      	add	r3, r2
 800cebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cec0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	6919      	ldr	r1, [r3, #16]
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	440b      	add	r3, r1
 800cecc:	1e59      	subs	r1, r3, #1
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	fbb1 f3f3 	udiv	r3, r1, r3
 800ced6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ced8:	4b6b      	ldr	r3, [pc, #428]	; (800d088 <USB_EPStartXfer+0x2e4>)
 800ceda:	400b      	ands	r3, r1
 800cedc:	69b9      	ldr	r1, [r7, #24]
 800cede:	0148      	lsls	r0, r1, #5
 800cee0:	69f9      	ldr	r1, [r7, #28]
 800cee2:	4401      	add	r1, r0
 800cee4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cee8:	4313      	orrs	r3, r2
 800ceea:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ceec:	69bb      	ldr	r3, [r7, #24]
 800ceee:	015a      	lsls	r2, r3, #5
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	4413      	add	r3, r2
 800cef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cef8:	691a      	ldr	r2, [r3, #16]
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf02:	69b9      	ldr	r1, [r7, #24]
 800cf04:	0148      	lsls	r0, r1, #5
 800cf06:	69f9      	ldr	r1, [r7, #28]
 800cf08:	4401      	add	r1, r0
 800cf0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	791b      	ldrb	r3, [r3, #4]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d11f      	bne.n	800cf5a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cf1a:	69bb      	ldr	r3, [r7, #24]
 800cf1c:	015a      	lsls	r2, r3, #5
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	4413      	add	r3, r2
 800cf22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf26:	691b      	ldr	r3, [r3, #16]
 800cf28:	69ba      	ldr	r2, [r7, #24]
 800cf2a:	0151      	lsls	r1, r2, #5
 800cf2c:	69fa      	ldr	r2, [r7, #28]
 800cf2e:	440a      	add	r2, r1
 800cf30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf34:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cf38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	015a      	lsls	r2, r3, #5
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	4413      	add	r3, r2
 800cf42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf46:	691b      	ldr	r3, [r3, #16]
 800cf48:	69ba      	ldr	r2, [r7, #24]
 800cf4a:	0151      	lsls	r1, r2, #5
 800cf4c:	69fa      	ldr	r2, [r7, #28]
 800cf4e:	440a      	add	r2, r1
 800cf50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf58:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800cf5a:	79fb      	ldrb	r3, [r7, #7]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d14b      	bne.n	800cff8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	69db      	ldr	r3, [r3, #28]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d009      	beq.n	800cf7c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cf68:	69bb      	ldr	r3, [r7, #24]
 800cf6a:	015a      	lsls	r2, r3, #5
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	4413      	add	r3, r2
 800cf70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf74:	461a      	mov	r2, r3
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	69db      	ldr	r3, [r3, #28]
 800cf7a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	791b      	ldrb	r3, [r3, #4]
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d128      	bne.n	800cfd6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cf84:	69fb      	ldr	r3, [r7, #28]
 800cf86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d110      	bne.n	800cfb6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cf94:	69bb      	ldr	r3, [r7, #24]
 800cf96:	015a      	lsls	r2, r3, #5
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	69ba      	ldr	r2, [r7, #24]
 800cfa4:	0151      	lsls	r1, r2, #5
 800cfa6:	69fa      	ldr	r2, [r7, #28]
 800cfa8:	440a      	add	r2, r1
 800cfaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cfb2:	6013      	str	r3, [r2, #0]
 800cfb4:	e00f      	b.n	800cfd6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	015a      	lsls	r2, r3, #5
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	69ba      	ldr	r2, [r7, #24]
 800cfc6:	0151      	lsls	r1, r2, #5
 800cfc8:	69fa      	ldr	r2, [r7, #28]
 800cfca:	440a      	add	r2, r1
 800cfcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfd4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	015a      	lsls	r2, r3, #5
 800cfda:	69fb      	ldr	r3, [r7, #28]
 800cfdc:	4413      	add	r3, r2
 800cfde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	69ba      	ldr	r2, [r7, #24]
 800cfe6:	0151      	lsls	r1, r2, #5
 800cfe8:	69fa      	ldr	r2, [r7, #28]
 800cfea:	440a      	add	r2, r1
 800cfec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cff0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cff4:	6013      	str	r3, [r2, #0]
 800cff6:	e16a      	b.n	800d2ce <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cff8:	69bb      	ldr	r3, [r7, #24]
 800cffa:	015a      	lsls	r2, r3, #5
 800cffc:	69fb      	ldr	r3, [r7, #28]
 800cffe:	4413      	add	r3, r2
 800d000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	69ba      	ldr	r2, [r7, #24]
 800d008:	0151      	lsls	r1, r2, #5
 800d00a:	69fa      	ldr	r2, [r7, #28]
 800d00c:	440a      	add	r2, r1
 800d00e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d012:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d016:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	791b      	ldrb	r3, [r3, #4]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d015      	beq.n	800d04c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	691b      	ldr	r3, [r3, #16]
 800d024:	2b00      	cmp	r3, #0
 800d026:	f000 8152 	beq.w	800d2ce <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	f003 030f 	and.w	r3, r3, #15
 800d03a:	2101      	movs	r1, #1
 800d03c:	fa01 f303 	lsl.w	r3, r1, r3
 800d040:	69f9      	ldr	r1, [r7, #28]
 800d042:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d046:	4313      	orrs	r3, r2
 800d048:	634b      	str	r3, [r1, #52]	; 0x34
 800d04a:	e140      	b.n	800d2ce <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d052:	689b      	ldr	r3, [r3, #8]
 800d054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d117      	bne.n	800d08c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	015a      	lsls	r2, r3, #5
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	4413      	add	r3, r2
 800d064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	69ba      	ldr	r2, [r7, #24]
 800d06c:	0151      	lsls	r1, r2, #5
 800d06e:	69fa      	ldr	r2, [r7, #28]
 800d070:	440a      	add	r2, r1
 800d072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d076:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d07a:	6013      	str	r3, [r2, #0]
 800d07c:	e016      	b.n	800d0ac <USB_EPStartXfer+0x308>
 800d07e:	bf00      	nop
 800d080:	e007ffff 	.word	0xe007ffff
 800d084:	fff80000 	.word	0xfff80000
 800d088:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	015a      	lsls	r2, r3, #5
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	4413      	add	r3, r2
 800d094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	69ba      	ldr	r2, [r7, #24]
 800d09c:	0151      	lsls	r1, r2, #5
 800d09e:	69fa      	ldr	r2, [r7, #28]
 800d0a0:	440a      	add	r2, r1
 800d0a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	68d9      	ldr	r1, [r3, #12]
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	781a      	ldrb	r2, [r3, #0]
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	b298      	uxth	r0, r3
 800d0ba:	79fb      	ldrb	r3, [r7, #7]
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	4603      	mov	r3, r0
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f000 f9b9 	bl	800d438 <USB_WritePacket>
 800d0c6:	e102      	b.n	800d2ce <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	015a      	lsls	r2, r3, #5
 800d0cc:	69fb      	ldr	r3, [r7, #28]
 800d0ce:	4413      	add	r3, r2
 800d0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0d4:	691a      	ldr	r2, [r3, #16]
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	0159      	lsls	r1, r3, #5
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	440b      	add	r3, r1
 800d0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	4b7c      	ldr	r3, [pc, #496]	; (800d2d8 <USB_EPStartXfer+0x534>)
 800d0e6:	4013      	ands	r3, r2
 800d0e8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	015a      	lsls	r2, r3, #5
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0f6:	691a      	ldr	r2, [r3, #16]
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	0159      	lsls	r1, r3, #5
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	440b      	add	r3, r1
 800d100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d104:	4619      	mov	r1, r3
 800d106:	4b75      	ldr	r3, [pc, #468]	; (800d2dc <USB_EPStartXfer+0x538>)
 800d108:	4013      	ands	r3, r2
 800d10a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800d10c:	69bb      	ldr	r3, [r7, #24]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d12f      	bne.n	800d172 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	691b      	ldr	r3, [r3, #16]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d003      	beq.n	800d122 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	689a      	ldr	r2, [r3, #8]
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	689a      	ldr	r2, [r3, #8]
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	015a      	lsls	r2, r3, #5
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	4413      	add	r3, r2
 800d132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d136:	691a      	ldr	r2, [r3, #16]
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	6a1b      	ldr	r3, [r3, #32]
 800d13c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d140:	69b9      	ldr	r1, [r7, #24]
 800d142:	0148      	lsls	r0, r1, #5
 800d144:	69f9      	ldr	r1, [r7, #28]
 800d146:	4401      	add	r1, r0
 800d148:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d14c:	4313      	orrs	r3, r2
 800d14e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	015a      	lsls	r2, r3, #5
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	4413      	add	r3, r2
 800d158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	69ba      	ldr	r2, [r7, #24]
 800d160:	0151      	lsls	r1, r2, #5
 800d162:	69fa      	ldr	r2, [r7, #28]
 800d164:	440a      	add	r2, r1
 800d166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d16a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d16e:	6113      	str	r3, [r2, #16]
 800d170:	e05f      	b.n	800d232 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	691b      	ldr	r3, [r3, #16]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d123      	bne.n	800d1c2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d17a:	69bb      	ldr	r3, [r7, #24]
 800d17c:	015a      	lsls	r2, r3, #5
 800d17e:	69fb      	ldr	r3, [r7, #28]
 800d180:	4413      	add	r3, r2
 800d182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d186:	691a      	ldr	r2, [r3, #16]
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	689b      	ldr	r3, [r3, #8]
 800d18c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d190:	69b9      	ldr	r1, [r7, #24]
 800d192:	0148      	lsls	r0, r1, #5
 800d194:	69f9      	ldr	r1, [r7, #28]
 800d196:	4401      	add	r1, r0
 800d198:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d19c:	4313      	orrs	r3, r2
 800d19e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	015a      	lsls	r2, r3, #5
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ac:	691b      	ldr	r3, [r3, #16]
 800d1ae:	69ba      	ldr	r2, [r7, #24]
 800d1b0:	0151      	lsls	r1, r2, #5
 800d1b2:	69fa      	ldr	r2, [r7, #28]
 800d1b4:	440a      	add	r2, r1
 800d1b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1be:	6113      	str	r3, [r2, #16]
 800d1c0:	e037      	b.n	800d232 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	691a      	ldr	r2, [r3, #16]
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	1e5a      	subs	r2, r3, #1
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1d6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	8afa      	ldrh	r2, [r7, #22]
 800d1de:	fb03 f202 	mul.w	r2, r3, r2
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	015a      	lsls	r2, r3, #5
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1f2:	691a      	ldr	r2, [r3, #16]
 800d1f4:	8afb      	ldrh	r3, [r7, #22]
 800d1f6:	04d9      	lsls	r1, r3, #19
 800d1f8:	4b39      	ldr	r3, [pc, #228]	; (800d2e0 <USB_EPStartXfer+0x53c>)
 800d1fa:	400b      	ands	r3, r1
 800d1fc:	69b9      	ldr	r1, [r7, #24]
 800d1fe:	0148      	lsls	r0, r1, #5
 800d200:	69f9      	ldr	r1, [r7, #28]
 800d202:	4401      	add	r1, r0
 800d204:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d208:	4313      	orrs	r3, r2
 800d20a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	015a      	lsls	r2, r3, #5
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	4413      	add	r3, r2
 800d214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d218:	691a      	ldr	r2, [r3, #16]
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	6a1b      	ldr	r3, [r3, #32]
 800d21e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d222:	69b9      	ldr	r1, [r7, #24]
 800d224:	0148      	lsls	r0, r1, #5
 800d226:	69f9      	ldr	r1, [r7, #28]
 800d228:	4401      	add	r1, r0
 800d22a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d22e:	4313      	orrs	r3, r2
 800d230:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800d232:	79fb      	ldrb	r3, [r7, #7]
 800d234:	2b01      	cmp	r3, #1
 800d236:	d10d      	bne.n	800d254 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d009      	beq.n	800d254 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	68d9      	ldr	r1, [r3, #12]
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	015a      	lsls	r2, r3, #5
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	4413      	add	r3, r2
 800d24c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d250:	460a      	mov	r2, r1
 800d252:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	791b      	ldrb	r3, [r3, #4]
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d128      	bne.n	800d2ae <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d25c:	69fb      	ldr	r3, [r7, #28]
 800d25e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d110      	bne.n	800d28e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d26c:	69bb      	ldr	r3, [r7, #24]
 800d26e:	015a      	lsls	r2, r3, #5
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	4413      	add	r3, r2
 800d274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	69ba      	ldr	r2, [r7, #24]
 800d27c:	0151      	lsls	r1, r2, #5
 800d27e:	69fa      	ldr	r2, [r7, #28]
 800d280:	440a      	add	r2, r1
 800d282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d286:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d28a:	6013      	str	r3, [r2, #0]
 800d28c:	e00f      	b.n	800d2ae <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	015a      	lsls	r2, r3, #5
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	4413      	add	r3, r2
 800d296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	69ba      	ldr	r2, [r7, #24]
 800d29e:	0151      	lsls	r1, r2, #5
 800d2a0:	69fa      	ldr	r2, [r7, #28]
 800d2a2:	440a      	add	r2, r1
 800d2a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2ac:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	015a      	lsls	r2, r3, #5
 800d2b2:	69fb      	ldr	r3, [r7, #28]
 800d2b4:	4413      	add	r3, r2
 800d2b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	69ba      	ldr	r2, [r7, #24]
 800d2be:	0151      	lsls	r1, r2, #5
 800d2c0:	69fa      	ldr	r2, [r7, #28]
 800d2c2:	440a      	add	r2, r1
 800d2c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d2cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d2ce:	2300      	movs	r3, #0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3720      	adds	r7, #32
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	fff80000 	.word	0xfff80000
 800d2dc:	e007ffff 	.word	0xe007ffff
 800d2e0:	1ff80000 	.word	0x1ff80000

0800d2e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b087      	sub	sp, #28
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	785b      	ldrb	r3, [r3, #1]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d14a      	bne.n	800d398 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	015a      	lsls	r2, r3, #5
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	4413      	add	r3, r2
 800d30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d31a:	f040 8086 	bne.w	800d42a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	015a      	lsls	r2, r3, #5
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	4413      	add	r3, r2
 800d328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	683a      	ldr	r2, [r7, #0]
 800d330:	7812      	ldrb	r2, [r2, #0]
 800d332:	0151      	lsls	r1, r2, #5
 800d334:	693a      	ldr	r2, [r7, #16]
 800d336:	440a      	add	r2, r1
 800d338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d33c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d340:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	015a      	lsls	r2, r3, #5
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	4413      	add	r3, r2
 800d34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	683a      	ldr	r2, [r7, #0]
 800d354:	7812      	ldrb	r2, [r2, #0]
 800d356:	0151      	lsls	r1, r2, #5
 800d358:	693a      	ldr	r2, [r7, #16]
 800d35a:	440a      	add	r2, r1
 800d35c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d364:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	3301      	adds	r3, #1
 800d36a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f242 7210 	movw	r2, #10000	; 0x2710
 800d372:	4293      	cmp	r3, r2
 800d374:	d902      	bls.n	800d37c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d376:	2301      	movs	r3, #1
 800d378:	75fb      	strb	r3, [r7, #23]
          break;
 800d37a:	e056      	b.n	800d42a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	015a      	lsls	r2, r3, #5
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	4413      	add	r3, r2
 800d386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d394:	d0e7      	beq.n	800d366 <USB_EPStopXfer+0x82>
 800d396:	e048      	b.n	800d42a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	015a      	lsls	r2, r3, #5
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d3ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d3b0:	d13b      	bne.n	800d42a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	015a      	lsls	r2, r3, #5
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	683a      	ldr	r2, [r7, #0]
 800d3c4:	7812      	ldrb	r2, [r2, #0]
 800d3c6:	0151      	lsls	r1, r2, #5
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	440a      	add	r2, r1
 800d3cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d3d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	015a      	lsls	r2, r3, #5
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	4413      	add	r3, r2
 800d3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	683a      	ldr	r2, [r7, #0]
 800d3e8:	7812      	ldrb	r2, [r2, #0]
 800d3ea:	0151      	lsls	r1, r2, #5
 800d3ec:	693a      	ldr	r2, [r7, #16]
 800d3ee:	440a      	add	r2, r1
 800d3f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d3f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f242 7210 	movw	r2, #10000	; 0x2710
 800d406:	4293      	cmp	r3, r2
 800d408:	d902      	bls.n	800d410 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d40a:	2301      	movs	r3, #1
 800d40c:	75fb      	strb	r3, [r7, #23]
          break;
 800d40e:	e00c      	b.n	800d42a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	015a      	lsls	r2, r3, #5
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	4413      	add	r3, r2
 800d41a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d428:	d0e7      	beq.n	800d3fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	371c      	adds	r7, #28
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d438:	b480      	push	{r7}
 800d43a:	b089      	sub	sp, #36	; 0x24
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	4611      	mov	r1, r2
 800d444:	461a      	mov	r2, r3
 800d446:	460b      	mov	r3, r1
 800d448:	71fb      	strb	r3, [r7, #7]
 800d44a:	4613      	mov	r3, r2
 800d44c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d456:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d123      	bne.n	800d4a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d45e:	88bb      	ldrh	r3, [r7, #4]
 800d460:	3303      	adds	r3, #3
 800d462:	089b      	lsrs	r3, r3, #2
 800d464:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d466:	2300      	movs	r3, #0
 800d468:	61bb      	str	r3, [r7, #24]
 800d46a:	e018      	b.n	800d49e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d46c:	79fb      	ldrb	r3, [r7, #7]
 800d46e:	031a      	lsls	r2, r3, #12
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	4413      	add	r3, r2
 800d474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d478:	461a      	mov	r2, r3
 800d47a:	69fb      	ldr	r3, [r7, #28]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	3301      	adds	r3, #1
 800d484:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	3301      	adds	r3, #1
 800d48a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	3301      	adds	r3, #1
 800d490:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	3301      	adds	r3, #1
 800d496:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	3301      	adds	r3, #1
 800d49c:	61bb      	str	r3, [r7, #24]
 800d49e:	69ba      	ldr	r2, [r7, #24]
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d3e2      	bcc.n	800d46c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d4a6:	2300      	movs	r3, #0
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3724      	adds	r7, #36	; 0x24
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b08b      	sub	sp, #44	; 0x2c
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	4613      	mov	r3, r2
 800d4c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d4ca:	88fb      	ldrh	r3, [r7, #6]
 800d4cc:	089b      	lsrs	r3, r3, #2
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d4d2:	88fb      	ldrh	r3, [r7, #6]
 800d4d4:	f003 0303 	and.w	r3, r3, #3
 800d4d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d4da:	2300      	movs	r3, #0
 800d4dc:	623b      	str	r3, [r7, #32]
 800d4de:	e014      	b.n	800d50a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ea:	601a      	str	r2, [r3, #0]
    pDest++;
 800d4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d500:	3301      	adds	r3, #1
 800d502:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d504:	6a3b      	ldr	r3, [r7, #32]
 800d506:	3301      	adds	r3, #1
 800d508:	623b      	str	r3, [r7, #32]
 800d50a:	6a3a      	ldr	r2, [r7, #32]
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	429a      	cmp	r2, r3
 800d510:	d3e6      	bcc.n	800d4e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d512:	8bfb      	ldrh	r3, [r7, #30]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d01e      	beq.n	800d556 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d518:	2300      	movs	r3, #0
 800d51a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d51c:	69bb      	ldr	r3, [r7, #24]
 800d51e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d522:	461a      	mov	r2, r3
 800d524:	f107 0310 	add.w	r3, r7, #16
 800d528:	6812      	ldr	r2, [r2, #0]
 800d52a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d52c:	693a      	ldr	r2, [r7, #16]
 800d52e:	6a3b      	ldr	r3, [r7, #32]
 800d530:	b2db      	uxtb	r3, r3
 800d532:	00db      	lsls	r3, r3, #3
 800d534:	fa22 f303 	lsr.w	r3, r2, r3
 800d538:	b2da      	uxtb	r2, r3
 800d53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53c:	701a      	strb	r2, [r3, #0]
      i++;
 800d53e:	6a3b      	ldr	r3, [r7, #32]
 800d540:	3301      	adds	r3, #1
 800d542:	623b      	str	r3, [r7, #32]
      pDest++;
 800d544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d546:	3301      	adds	r3, #1
 800d548:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d54a:	8bfb      	ldrh	r3, [r7, #30]
 800d54c:	3b01      	subs	r3, #1
 800d54e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d550:	8bfb      	ldrh	r3, [r7, #30]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d1ea      	bne.n	800d52c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d558:	4618      	mov	r0, r3
 800d55a:	372c      	adds	r7, #44	; 0x2c
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr

0800d564 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d564:	b480      	push	{r7}
 800d566:	b085      	sub	sp, #20
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	785b      	ldrb	r3, [r3, #1]
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d12c      	bne.n	800d5da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	015a      	lsls	r2, r3, #5
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	4413      	add	r3, r2
 800d588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	db12      	blt.n	800d5b8 <USB_EPSetStall+0x54>
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00f      	beq.n	800d5b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	015a      	lsls	r2, r3, #5
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	4413      	add	r3, r2
 800d5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	68ba      	ldr	r2, [r7, #8]
 800d5a8:	0151      	lsls	r1, r2, #5
 800d5aa:	68fa      	ldr	r2, [r7, #12]
 800d5ac:	440a      	add	r2, r1
 800d5ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d5b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	015a      	lsls	r2, r3, #5
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	4413      	add	r3, r2
 800d5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	68ba      	ldr	r2, [r7, #8]
 800d5c8:	0151      	lsls	r1, r2, #5
 800d5ca:	68fa      	ldr	r2, [r7, #12]
 800d5cc:	440a      	add	r2, r1
 800d5ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d5d6:	6013      	str	r3, [r2, #0]
 800d5d8:	e02b      	b.n	800d632 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	015a      	lsls	r2, r3, #5
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	db12      	blt.n	800d612 <USB_EPSetStall+0xae>
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d00f      	beq.n	800d612 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	015a      	lsls	r2, r3, #5
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	4413      	add	r3, r2
 800d5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	68ba      	ldr	r2, [r7, #8]
 800d602:	0151      	lsls	r1, r2, #5
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	440a      	add	r2, r1
 800d608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d60c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d610:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	015a      	lsls	r2, r3, #5
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	4413      	add	r3, r2
 800d61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	68ba      	ldr	r2, [r7, #8]
 800d622:	0151      	lsls	r1, r2, #5
 800d624:	68fa      	ldr	r2, [r7, #12]
 800d626:	440a      	add	r2, r1
 800d628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d62c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d630:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d632:	2300      	movs	r3, #0
}
 800d634:	4618      	mov	r0, r3
 800d636:	3714      	adds	r7, #20
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d640:	b480      	push	{r7}
 800d642:	b085      	sub	sp, #20
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	785b      	ldrb	r3, [r3, #1]
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d128      	bne.n	800d6ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	015a      	lsls	r2, r3, #5
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	4413      	add	r3, r2
 800d664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	68ba      	ldr	r2, [r7, #8]
 800d66c:	0151      	lsls	r1, r2, #5
 800d66e:	68fa      	ldr	r2, [r7, #12]
 800d670:	440a      	add	r2, r1
 800d672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d676:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d67a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	791b      	ldrb	r3, [r3, #4]
 800d680:	2b03      	cmp	r3, #3
 800d682:	d003      	beq.n	800d68c <USB_EPClearStall+0x4c>
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	791b      	ldrb	r3, [r3, #4]
 800d688:	2b02      	cmp	r3, #2
 800d68a:	d138      	bne.n	800d6fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	015a      	lsls	r2, r3, #5
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	4413      	add	r3, r2
 800d694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	68ba      	ldr	r2, [r7, #8]
 800d69c:	0151      	lsls	r1, r2, #5
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	440a      	add	r2, r1
 800d6a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6aa:	6013      	str	r3, [r2, #0]
 800d6ac:	e027      	b.n	800d6fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	015a      	lsls	r2, r3, #5
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	68ba      	ldr	r2, [r7, #8]
 800d6be:	0151      	lsls	r1, r2, #5
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	440a      	add	r2, r1
 800d6c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d6cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	791b      	ldrb	r3, [r3, #4]
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	d003      	beq.n	800d6de <USB_EPClearStall+0x9e>
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	791b      	ldrb	r3, [r3, #4]
 800d6da:	2b02      	cmp	r3, #2
 800d6dc:	d10f      	bne.n	800d6fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	015a      	lsls	r2, r3, #5
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	0151      	lsls	r1, r2, #5
 800d6f0:	68fa      	ldr	r2, [r7, #12]
 800d6f2:	440a      	add	r2, r1
 800d6f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d6fe:	2300      	movs	r3, #0
}
 800d700:	4618      	mov	r0, r3
 800d702:	3714      	adds	r7, #20
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b085      	sub	sp, #20
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	460b      	mov	r3, r1
 800d716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	68fa      	ldr	r2, [r7, #12]
 800d726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d72a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d72e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	78fb      	ldrb	r3, [r7, #3]
 800d73a:	011b      	lsls	r3, r3, #4
 800d73c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d740:	68f9      	ldr	r1, [r7, #12]
 800d742:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d746:	4313      	orrs	r3, r2
 800d748:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d74a:	2300      	movs	r3, #0
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3714      	adds	r7, #20
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr

0800d758 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d758:	b480      	push	{r7}
 800d75a:	b085      	sub	sp, #20
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d772:	f023 0303 	bic.w	r3, r3, #3
 800d776:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	68fa      	ldr	r2, [r7, #12]
 800d782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d786:	f023 0302 	bic.w	r3, r3, #2
 800d78a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d78c:	2300      	movs	r3, #0
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3714      	adds	r7, #20
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr

0800d79a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d79a:	b480      	push	{r7}
 800d79c:	b085      	sub	sp, #20
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d7b4:	f023 0303 	bic.w	r3, r3, #3
 800d7b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7c8:	f043 0302 	orr.w	r3, r3, #2
 800d7cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d7ce:	2300      	movs	r3, #0
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3714      	adds	r7, #20
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	695b      	ldr	r3, [r3, #20]
 800d7e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	68fa      	ldr	r2, [r7, #12]
 800d7f0:	4013      	ands	r3, r2
 800d7f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3714      	adds	r7, #20
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr

0800d802 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d802:	b480      	push	{r7}
 800d804:	b085      	sub	sp, #20
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d814:	699b      	ldr	r3, [r3, #24]
 800d816:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d81e:	69db      	ldr	r3, [r3, #28]
 800d820:	68ba      	ldr	r2, [r7, #8]
 800d822:	4013      	ands	r3, r2
 800d824:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	0c1b      	lsrs	r3, r3, #16
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3714      	adds	r7, #20
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr

0800d836 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d836:	b480      	push	{r7}
 800d838:	b085      	sub	sp, #20
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d848:	699b      	ldr	r3, [r3, #24]
 800d84a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d852:	69db      	ldr	r3, [r3, #28]
 800d854:	68ba      	ldr	r2, [r7, #8]
 800d856:	4013      	ands	r3, r2
 800d858:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	b29b      	uxth	r3, r3
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3714      	adds	r7, #20
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr

0800d86a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d86a:	b480      	push	{r7}
 800d86c:	b085      	sub	sp, #20
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
 800d872:	460b      	mov	r3, r1
 800d874:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d87a:	78fb      	ldrb	r3, [r7, #3]
 800d87c:	015a      	lsls	r2, r3, #5
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	4413      	add	r3, r2
 800d882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d890:	695b      	ldr	r3, [r3, #20]
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	4013      	ands	r3, r2
 800d896:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d898:	68bb      	ldr	r3, [r7, #8]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3714      	adds	r7, #20
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr

0800d8a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d8a6:	b480      	push	{r7}
 800d8a8:	b087      	sub	sp, #28
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8bc:	691b      	ldr	r3, [r3, #16]
 800d8be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d8ca:	78fb      	ldrb	r3, [r7, #3]
 800d8cc:	f003 030f 	and.w	r3, r3, #15
 800d8d0:	68fa      	ldr	r2, [r7, #12]
 800d8d2:	fa22 f303 	lsr.w	r3, r2, r3
 800d8d6:	01db      	lsls	r3, r3, #7
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	693a      	ldr	r2, [r7, #16]
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d8e0:	78fb      	ldrb	r3, [r7, #3]
 800d8e2:	015a      	lsls	r2, r3, #5
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	4413      	add	r3, r2
 800d8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8ec:	689b      	ldr	r3, [r3, #8]
 800d8ee:	693a      	ldr	r2, [r7, #16]
 800d8f0:	4013      	ands	r3, r2
 800d8f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d8f4:	68bb      	ldr	r3, [r7, #8]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	371c      	adds	r7, #28
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr

0800d902 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d902:	b480      	push	{r7}
 800d904:	b083      	sub	sp, #12
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	695b      	ldr	r3, [r3, #20]
 800d90e:	f003 0301 	and.w	r3, r3, #1
}
 800d912:	4618      	mov	r0, r3
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
	...

0800d920 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800d920:	b480      	push	{r7}
 800d922:	b085      	sub	sp, #20
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d93a:	4619      	mov	r1, r3
 800d93c:	4b09      	ldr	r3, [pc, #36]	; (800d964 <USB_ActivateSetup+0x44>)
 800d93e:	4013      	ands	r3, r2
 800d940:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	68fa      	ldr	r2, [r7, #12]
 800d94c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d954:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d956:	2300      	movs	r3, #0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3714      	adds	r7, #20
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	fffff800 	.word	0xfffff800

0800d968 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800d968:	b480      	push	{r7}
 800d96a:	b087      	sub	sp, #28
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	460b      	mov	r3, r1
 800d972:	607a      	str	r2, [r7, #4]
 800d974:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	333c      	adds	r3, #60	; 0x3c
 800d97e:	3304      	adds	r3, #4
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	4a26      	ldr	r2, [pc, #152]	; (800da20 <USB_EP0_OutStart+0xb8>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d90a      	bls.n	800d9a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d99c:	d101      	bne.n	800d9a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	e037      	b.n	800da12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	697a      	ldr	r2, [r7, #20]
 800d9b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d9c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9c8:	691b      	ldr	r3, [r3, #16]
 800d9ca:	697a      	ldr	r2, [r7, #20]
 800d9cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9d0:	f043 0318 	orr.w	r3, r3, #24
 800d9d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9dc:	691b      	ldr	r3, [r3, #16]
 800d9de:	697a      	ldr	r2, [r7, #20]
 800d9e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d9e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d9ea:	7afb      	ldrb	r3, [r7, #11]
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d10f      	bne.n	800da10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	697a      	ldr	r2, [r7, #20]
 800da06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da0a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800da0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da10:	2300      	movs	r3, #0
}
 800da12:	4618      	mov	r0, r3
 800da14:	371c      	adds	r7, #28
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	4f54300a 	.word	0x4f54300a

0800da24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800da24:	b480      	push	{r7}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da2c:	2300      	movs	r3, #0
 800da2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	3301      	adds	r3, #1
 800da34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800da3c:	d901      	bls.n	800da42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800da3e:	2303      	movs	r3, #3
 800da40:	e01b      	b.n	800da7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	691b      	ldr	r3, [r3, #16]
 800da46:	2b00      	cmp	r3, #0
 800da48:	daf2      	bge.n	800da30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800da4a:	2300      	movs	r3, #0
 800da4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	691b      	ldr	r3, [r3, #16]
 800da52:	f043 0201 	orr.w	r2, r3, #1
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	3301      	adds	r3, #1
 800da5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800da66:	d901      	bls.n	800da6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800da68:	2303      	movs	r3, #3
 800da6a:	e006      	b.n	800da7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	691b      	ldr	r3, [r3, #16]
 800da70:	f003 0301 	and.w	r3, r3, #1
 800da74:	2b01      	cmp	r3, #1
 800da76:	d0f0      	beq.n	800da5a <USB_CoreReset+0x36>

  return HAL_OK;
 800da78:	2300      	movs	r3, #0
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3714      	adds	r7, #20
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr
	...

0800da88 <__NVIC_SystemReset>:
{
 800da88:	b480      	push	{r7}
 800da8a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800da8c:	f3bf 8f4f 	dsb	sy
}
 800da90:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800da92:	4b06      	ldr	r3, [pc, #24]	; (800daac <__NVIC_SystemReset+0x24>)
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800da9a:	4904      	ldr	r1, [pc, #16]	; (800daac <__NVIC_SystemReset+0x24>)
 800da9c:	4b04      	ldr	r3, [pc, #16]	; (800dab0 <__NVIC_SystemReset+0x28>)
 800da9e:	4313      	orrs	r3, r2
 800daa0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800daa2:	f3bf 8f4f 	dsb	sy
}
 800daa6:	bf00      	nop
    __NOP();
 800daa8:	bf00      	nop
 800daaa:	e7fd      	b.n	800daa8 <__NVIC_SystemReset+0x20>
 800daac:	e000ed00 	.word	0xe000ed00
 800dab0:	05fa0004 	.word	0x05fa0004

0800dab4 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	460b      	mov	r3, r1
 800dabe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800dac0:	f44f 6084 	mov.w	r0, #1056	; 0x420
 800dac4:	f002 fee6 	bl	8010894 <USBD_static_malloc>
 800dac8:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d109      	bne.n	800dae4 <USBD_DFU_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	32b0      	adds	r2, #176	; 0xb0
 800dada:	2100      	movs	r1, #0
 800dadc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dae0:	2302      	movs	r3, #2
 800dae2:	e052      	b.n	800db8a <USBD_DFU_Init+0xd6>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	32b0      	adds	r2, #176	; 0xb0
 800daee:	68f9      	ldr	r1, [r7, #12]
 800daf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	32b0      	adds	r2, #176	; 0xb0
 800dafe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2200      	movs	r2, #0
 800db0c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800db16:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2200      	movs	r2, #0
 800db26:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
  hdfu->dev_state = DFU_STATE_IDLE;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2202      	movs	r2, #2
 800db36:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2200      	movs	r2, #0
 800db3e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[1] = 0U;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2200      	movs	r2, #0
 800db46:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
  hdfu->dev_status[2] = 0U;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2200      	movs	r2, #0
 800db4e:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
  hdfu->dev_status[3] = 0U;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2200      	movs	r2, #0
 800db56:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2202      	movs	r2, #2
 800db5e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[5] = 0U;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2200      	movs	r2, #0
 800db66:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	33b0      	adds	r3, #176	; 0xb0
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	4413      	add	r3, r2
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	4798      	blx	r3
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d001      	beq.n	800db88 <USBD_DFU_Init+0xd4>
  {
    return (uint8_t)USBD_FAIL;
 800db84:	2303      	movs	r3, #3
 800db86:	e000      	b.n	800db8a <USBD_DFU_Init+0xd6>
  }

  return (uint8_t)USBD_OK;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b084      	sub	sp, #16
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
 800db9a:	460b      	mov	r3, r1
 800db9c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	32b0      	adds	r2, #176	; 0xb0
 800dba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d101      	bne.n	800dbb4 <USBD_DFU_DeInit+0x22>
  {
    return (uint8_t)USBD_EMEM;
 800dbb0:	2302      	movs	r3, #2
 800dbb2:	e03c      	b.n	800dc2e <USBD_DFU_DeInit+0x9c>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	32b0      	adds	r2, #176	; 0xb0
 800dbbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbc2:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2202      	movs	r2, #2
 800dbd8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	2202      	movs	r2, #2
 800dbe8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	33b0      	adds	r3, #176	; 0xb0
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4413      	add	r3, r2
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	32b0      	adds	r2, #176	; 0xb0
 800dc0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f002 fe4e 	bl	80108b0 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	32b0      	adds	r2, #176	; 0xb0
 800dc1e:	2100      	movs	r1, #0
 800dc20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = NULL;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2200      	movs	r2, #0
 800dc28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 800dc2c:	2300      	movs	r3, #0
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3710      	adds	r7, #16
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
	...

0800dc38 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b086      	sub	sp, #24
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	32b0      	adds	r2, #176	; 0xb0
 800dc4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc50:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc52:	2300      	movs	r3, #0
 800dc54:	75fb      	strb	r3, [r7, #23]
  uint8_t *pbuf;
  uint16_t len;
  uint16_t status_info = 0U;
 800dc56:	2300      	movs	r3, #0
 800dc58:	813b      	strh	r3, [r7, #8]

  if (hdfu == NULL)
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d101      	bne.n	800dc64 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800dc60:	2303      	movs	r3, #3
 800dc62:	e0e8      	b.n	800de36 <USBD_DFU_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d03e      	beq.n	800dcee <USBD_DFU_Setup+0xb6>
 800dc70:	2b20      	cmp	r3, #32
 800dc72:	f040 80d8 	bne.w	800de26 <USBD_DFU_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	785b      	ldrb	r3, [r3, #1]
 800dc7a:	2b06      	cmp	r3, #6
 800dc7c:	d82f      	bhi.n	800dcde <USBD_DFU_Setup+0xa6>
 800dc7e:	a201      	add	r2, pc, #4	; (adr r2, 800dc84 <USBD_DFU_Setup+0x4c>)
 800dc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc84:	0800dcd5 	.word	0x0800dcd5
 800dc88:	0800dca1 	.word	0x0800dca1
 800dc8c:	0800dcab 	.word	0x0800dcab
 800dc90:	0800dcb5 	.word	0x0800dcb5
 800dc94:	0800dcbd 	.word	0x0800dcbd
 800dc98:	0800dcc5 	.word	0x0800dcc5
 800dc9c:	0800dccd 	.word	0x0800dccd
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800dca0:	6839      	ldr	r1, [r7, #0]
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fac2 	bl	800e22c <DFU_Download>
          break;
 800dca8:	e020      	b.n	800dcec <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800dcaa:	6839      	ldr	r1, [r7, #0]
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 fb33 	bl	800e318 <DFU_Upload>
          break;
 800dcb2:	e01b      	b.n	800dcec <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 fc37 	bl	800e528 <DFU_GetStatus>
          break;
 800dcba:	e017      	b.n	800dcec <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 fcff 	bl	800e6c0 <DFU_ClearStatus>
          break;
 800dcc2:	e013      	b.n	800dcec <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 fd53 	bl	800e770 <DFU_GetState>
          break;
 800dcca:	e00f      	b.n	800dcec <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f000 fd6b 	bl	800e7a8 <DFU_Abort>
          break;
 800dcd2:	e00b      	b.n	800dcec <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800dcd4:	6839      	ldr	r1, [r7, #0]
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 fa38 	bl	800e14c <DFU_Detach>
          break;
 800dcdc:	e006      	b.n	800dcec <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800dcde:	6839      	ldr	r1, [r7, #0]
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f002 f8a0 	bl	800fe26 <USBD_CtlError>
          ret = USBD_FAIL;
 800dce6:	2303      	movs	r3, #3
 800dce8:	75fb      	strb	r3, [r7, #23]
          break;
 800dcea:	bf00      	nop
      }
      break;
 800dcec:	e0a2      	b.n	800de34 <USBD_DFU_Setup+0x1fc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	785b      	ldrb	r3, [r3, #1]
 800dcf2:	2b0b      	cmp	r3, #11
 800dcf4:	f200 808c 	bhi.w	800de10 <USBD_DFU_Setup+0x1d8>
 800dcf8:	a201      	add	r2, pc, #4	; (adr r2, 800dd00 <USBD_DFU_Setup+0xc8>)
 800dcfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfe:	bf00      	nop
 800dd00:	0800dd31 	.word	0x0800dd31
 800dd04:	0800de1f 	.word	0x0800de1f
 800dd08:	0800de11 	.word	0x0800de11
 800dd0c:	0800de11 	.word	0x0800de11
 800dd10:	0800de11 	.word	0x0800de11
 800dd14:	0800de11 	.word	0x0800de11
 800dd18:	0800dd5b 	.word	0x0800dd5b
 800dd1c:	0800de11 	.word	0x0800de11
 800dd20:	0800de11 	.word	0x0800de11
 800dd24:	0800de11 	.word	0x0800de11
 800dd28:	0800dda3 	.word	0x0800dda3
 800dd2c:	0800ddcf 	.word	0x0800ddcf
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	2b03      	cmp	r3, #3
 800dd3a:	d107      	bne.n	800dd4c <USBD_DFU_Setup+0x114>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dd3c:	f107 0308 	add.w	r3, r7, #8
 800dd40:	2202      	movs	r2, #2
 800dd42:	4619      	mov	r1, r3
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f002 f8eb 	bl	800ff20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dd4a:	e06b      	b.n	800de24 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800dd4c:	6839      	ldr	r1, [r7, #0]
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f002 f869 	bl	800fe26 <USBD_CtlError>
            ret = USBD_FAIL;
 800dd54:	2303      	movs	r3, #3
 800dd56:	75fb      	strb	r3, [r7, #23]
          break;
 800dd58:	e064      	b.n	800de24 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	885b      	ldrh	r3, [r3, #2]
 800dd5e:	0a1b      	lsrs	r3, r3, #8
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	2b21      	cmp	r3, #33	; 0x21
 800dd64:	d15d      	bne.n	800de22 <USBD_DFU_Setup+0x1ea>
          {
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f000 fdd5 	bl	800e91c <USBD_DFU_GetDfuFuncDesc>
 800dd72:	60f8      	str	r0, [r7, #12]

            if (pbuf != NULL)
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d00c      	beq.n	800dd94 <USBD_DFU_Setup+0x15c>
            {
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	88db      	ldrh	r3, [r3, #6]
 800dd7e:	2b09      	cmp	r3, #9
 800dd80:	bf28      	it	cs
 800dd82:	2309      	movcs	r3, #9
 800dd84:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800dd86:	897b      	ldrh	r3, [r7, #10]
 800dd88:	461a      	mov	r2, r3
 800dd8a:	68f9      	ldr	r1, [r7, #12]
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f002 f8c7 	bl	800ff20 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800dd92:	e046      	b.n	800de22 <USBD_DFU_Setup+0x1ea>
              USBD_CtlError(pdev, req);
 800dd94:	6839      	ldr	r1, [r7, #0]
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f002 f845 	bl	800fe26 <USBD_CtlError>
              ret = USBD_FAIL;
 800dd9c:	2303      	movs	r3, #3
 800dd9e:	75fb      	strb	r3, [r7, #23]
          break;
 800dda0:	e03f      	b.n	800de22 <USBD_DFU_Setup+0x1ea>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	2b03      	cmp	r3, #3
 800ddac:	d108      	bne.n	800ddc0 <USBD_DFU_Setup+0x188>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f002 f8b1 	bl	800ff20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ddbe:	e031      	b.n	800de24 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800ddc0:	6839      	ldr	r1, [r7, #0]
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f002 f82f 	bl	800fe26 <USBD_CtlError>
            ret = USBD_FAIL;
 800ddc8:	2303      	movs	r3, #3
 800ddca:	75fb      	strb	r3, [r7, #23]
          break;
 800ddcc:	e02a      	b.n	800de24 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	885b      	ldrh	r3, [r3, #2]
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d114      	bne.n	800de02 <USBD_DFU_Setup+0x1ca>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	2b03      	cmp	r3, #3
 800dde2:	d107      	bne.n	800ddf4 <USBD_DFU_Setup+0x1bc>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	885b      	ldrh	r3, [r3, #2]
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	461a      	mov	r2, r3
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ddf2:	e017      	b.n	800de24 <USBD_DFU_Setup+0x1ec>
              USBD_CtlError(pdev, req);
 800ddf4:	6839      	ldr	r1, [r7, #0]
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f002 f815 	bl	800fe26 <USBD_CtlError>
              ret = USBD_FAIL;
 800ddfc:	2303      	movs	r3, #3
 800ddfe:	75fb      	strb	r3, [r7, #23]
          break;
 800de00:	e010      	b.n	800de24 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800de02:	6839      	ldr	r1, [r7, #0]
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f002 f80e 	bl	800fe26 <USBD_CtlError>
            ret = USBD_FAIL;
 800de0a:	2303      	movs	r3, #3
 800de0c:	75fb      	strb	r3, [r7, #23]
          break;
 800de0e:	e009      	b.n	800de24 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800de10:	6839      	ldr	r1, [r7, #0]
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f002 f807 	bl	800fe26 <USBD_CtlError>
          ret = USBD_FAIL;
 800de18:	2303      	movs	r3, #3
 800de1a:	75fb      	strb	r3, [r7, #23]
          break;
 800de1c:	e002      	b.n	800de24 <USBD_DFU_Setup+0x1ec>
          break;
 800de1e:	bf00      	nop
 800de20:	e008      	b.n	800de34 <USBD_DFU_Setup+0x1fc>
          break;
 800de22:	bf00      	nop
      }
      break;
 800de24:	e006      	b.n	800de34 <USBD_DFU_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800de26:	6839      	ldr	r1, [r7, #0]
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f001 fffc 	bl	800fe26 <USBD_CtlError>
      ret = USBD_FAIL;
 800de2e:	2303      	movs	r3, #3
 800de30:	75fb      	strb	r3, [r7, #23]
      break;
 800de32:	bf00      	nop
  }

  return (uint8_t)ret;
 800de34:	7dfb      	ldrb	r3, [r7, #23]
}
 800de36:	4618      	mov	r0, r3
 800de38:	3718      	adds	r7, #24
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop

0800de40 <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	221b      	movs	r2, #27
 800de4c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800de4e:	4b03      	ldr	r3, [pc, #12]	; (800de5c <USBD_DFU_GetCfgDesc+0x1c>)
}
 800de50:	4618      	mov	r0, r3
 800de52:	370c      	adds	r7, #12
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr
 800de5c:	240003dc 	.word	0x240003dc

0800de60 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	370c      	adds	r7, #12
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr

0800de76 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800de76:	b580      	push	{r7, lr}
 800de78:	b088      	sub	sp, #32
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t app_addr_ptr;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	32b0      	adds	r2, #176	; 0xb0
 800de88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de8c:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	33b0      	adds	r3, #176	; 0xb0
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	4413      	add	r3, r2
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	61bb      	str	r3, [r7, #24]
#if (USBD_DFU_VENDOR_CMD_ENABLED == 1U) || (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d101      	bne.n	800deaa <USBD_DFU_EP0_TxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800dea6:	2303      	movs	r3, #3
 800dea8:	e0f1      	b.n	800e08e <USBD_DFU_EP0_TxReady+0x218>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800deb0:	2b04      	cmp	r3, #4
 800deb2:	f040 80e0 	bne.w	800e076 <USBD_DFU_EP0_TxReady+0x200>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800debc:	2b00      	cmp	r3, #0
 800debe:	f040 8085 	bne.w	800dfcc <USBD_DFU_EP0_TxReady+0x156>
    {
      if (hdfu->wlength == 1U)
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dec8:	2b01      	cmp	r3, #1
 800deca:	f000 80b5 	beq.w	800e038 <USBD_DFU_EP0_TxReady+0x1c2>
            return (uint8_t)USBD_FAIL;
          }
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
      }
      else if (hdfu->wlength == 5U)
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ded4:	2b05      	cmp	r3, #5
 800ded6:	d166      	bne.n	800dfa6 <USBD_DFU_EP0_TxReady+0x130>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	2b21      	cmp	r3, #33	; 0x21
 800dede:	d124      	bne.n	800df2a <USBD_DFU_EP0_TxReady+0xb4>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          hdfu->data_ptr = hdfu->buffer.d8[1];
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	785b      	ldrb	r3, [r3, #1]
 800dee4:	461a      	mov	r2, r3
 800dee6:	69fb      	ldr	r3, [r7, #28]
 800dee8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	789b      	ldrb	r3, [r3, #2]
 800def6:	021b      	lsls	r3, r3, #8
 800def8:	441a      	add	r2, r3
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	78db      	ldrb	r3, [r3, #3]
 800df0a:	041b      	lsls	r3, r3, #16
 800df0c:	441a      	add	r2, r3
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	791b      	ldrb	r3, [r3, #4]
 800df1e:	061b      	lsls	r3, r3, #24
 800df20:	441a      	add	r2, r3
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800df28:	e086      	b.n	800e038 <USBD_DFU_EP0_TxReady+0x1c2>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800df2a:	69fb      	ldr	r3, [r7, #28]
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	2b41      	cmp	r3, #65	; 0x41
 800df30:	d137      	bne.n	800dfa2 <USBD_DFU_EP0_TxReady+0x12c>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          app_addr_ptr = hdfu->buffer.d8[1];
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	785b      	ldrb	r3, [r3, #1]
 800df36:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800df38:	69fb      	ldr	r3, [r7, #28]
 800df3a:	789b      	ldrb	r3, [r3, #2]
 800df3c:	021b      	lsls	r3, r3, #8
 800df3e:	693a      	ldr	r2, [r7, #16]
 800df40:	4413      	add	r3, r2
 800df42:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	78db      	ldrb	r3, [r3, #3]
 800df48:	041b      	lsls	r3, r3, #16
 800df4a:	693a      	ldr	r2, [r7, #16]
 800df4c:	4413      	add	r3, r2
 800df4e:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	791b      	ldrb	r3, [r3, #4]
 800df54:	061b      	lsls	r3, r3, #24
 800df56:	693a      	ldr	r2, [r7, #16]
 800df58:	4413      	add	r3, r2
 800df5a:	613b      	str	r3, [r7, #16]

          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	6938      	ldr	r0, [r7, #16]
 800df62:	4798      	blx	r3
 800df64:	4603      	mov	r3, r0
 800df66:	2b00      	cmp	r3, #0
 800df68:	d066      	beq.n	800e038 <USBD_DFU_EP0_TxReady+0x1c2>
          {
            /* Update the state machine */
            hdfu->dev_state = DFU_STATE_ERROR;
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	220a      	movs	r2, #10
 800df6e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	220b      	movs	r2, #11
 800df76:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            hdfu->dev_status[1] = 0U;
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	2200      	movs	r2, #0
 800df7e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
            hdfu->dev_status[2] = 0U;
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	2200      	movs	r2, #0
 800df86:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
            hdfu->dev_status[3] = 0U;
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800df98:	69fb      	ldr	r3, [r7, #28]
 800df9a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            return (uint8_t)USBD_FAIL;
 800df9e:	2303      	movs	r3, #3
 800dfa0:	e075      	b.n	800e08e <USBD_DFU_EP0_TxReady+0x218>
          }
        }
#else
        else
        {
          return (uint8_t)USBD_FAIL;
 800dfa2:	2303      	movs	r3, #3
 800dfa4:	e073      	b.n	800e08e <USBD_DFU_EP0_TxReady+0x218>
          req.wLength = 1U;
          USBD_CtlError(pdev, &req);
        }
#else
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 800dfbe:	f107 0308 	add.w	r3, r7, #8
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f001 ff2e 	bl	800fe26 <USBD_CtlError>
 800dfca:	e035      	b.n	800e038 <USBD_DFU_EP0_TxReady+0x1c2>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d930      	bls.n	800e038 <USBD_DFU_EP0_TxReady+0x1c2>
          return (uint8_t)USBD_FAIL;
        }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800dfdc:	3b02      	subs	r3, #2
 800dfde:	029a      	lsls	r2, r3, #10
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800dfe6:	4413      	add	r3, r2
 800dfe8:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800dfea:	69bb      	ldr	r3, [r7, #24]
 800dfec:	691b      	ldr	r3, [r3, #16]
 800dfee:	69f8      	ldr	r0, [r7, #28]
 800dff0:	6979      	ldr	r1, [r7, #20]
 800dff2:	69fa      	ldr	r2, [r7, #28]
 800dff4:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800dff8:	4798      	blx	r3
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d01b      	beq.n	800e038 <USBD_DFU_EP0_TxReady+0x1c2>
        {
          /* Update the state machine */
          hdfu->dev_state = DFU_STATE_ERROR;
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	220a      	movs	r2, #10
 800e004:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	220b      	movs	r2, #11
 800e00c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
          hdfu->dev_status[1] = 0U;
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	2200      	movs	r2, #0
 800e014:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
          hdfu->dev_status[2] = 0U;
 800e018:	69fb      	ldr	r3, [r7, #28]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
          hdfu->dev_status[3] = 0U;
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	2200      	movs	r2, #0
 800e024:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e02e:	69fb      	ldr	r3, [r7, #28]
 800e030:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          return (uint8_t)USBD_FAIL;
 800e034:	2303      	movs	r3, #3
 800e036:	e02a      	b.n	800e08e <USBD_DFU_EP0_TxReady+0x218>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	2200      	movs	r2, #0
 800e03c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	2200      	movs	r2, #0
 800e044:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	2203      	movs	r2, #3
 800e04c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	2200      	movs	r2, #0
 800e054:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	2200      	movs	r2, #0
 800e05c:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	2200      	movs	r2, #0
 800e064:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800e074:	e00a      	b.n	800e08c <USBD_DFU_EP0_TxReady+0x216>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800e076:	69fb      	ldr	r3, [r7, #28]
 800e078:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800e07c:	2b07      	cmp	r3, #7
 800e07e:	d103      	bne.n	800e088 <USBD_DFU_EP0_TxReady+0x212>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f000 fbe6 	bl	800e852 <DFU_Leave>
 800e086:	e001      	b.n	800e08c <USBD_DFU_EP0_TxReady+0x216>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800e088:	2303      	movs	r3, #3
 800e08a:	e000      	b.n	800e08e <USBD_DFU_EP0_TxReady+0x218>
  }

  return (uint8_t)USBD_OK;
 800e08c:	2300      	movs	r3, #0
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3720      	adds	r7, #32
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}

0800e096 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800e096:	b480      	push	{r7}
 800e098:	b083      	sub	sp, #12
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800e09e:	2300      	movs	r3, #0
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	370c      	adds	r7, #12
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr

0800e0ac <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b083      	sub	sp, #12
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	220a      	movs	r2, #10
 800e0b8:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800e0ba:	4b03      	ldr	r3, [pc, #12]	; (800e0c8 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	370c      	adds	r7, #12
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr
 800e0c8:	240003f8 	.word	0x240003f8

0800e0cc <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b086      	sub	sp, #24
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	60f8      	str	r0, [r7, #12]
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	607a      	str	r2, [r7, #4]
 800e0d8:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	33b0      	adds	r3, #176	; 0xb0
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	4413      	add	r3, r2
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800e0ec:	7afb      	ldrb	r3, [r7, #11]
 800e0ee:	2b06      	cmp	r3, #6
 800e0f0:	d808      	bhi.n	800e104 <USBD_DFU_GetUsrStringDesc+0x38>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	4906      	ldr	r1, [pc, #24]	; (800e114 <USBD_DFU_GetUsrStringDesc+0x48>)
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f001 fea4 	bl	800fe48 <USBD_GetString>
    return USBD_StrDesc;
 800e100:	4b04      	ldr	r3, [pc, #16]	; (800e114 <USBD_DFU_GetUsrStringDesc+0x48>)
 800e102:	e003      	b.n	800e10c <USBD_DFU_GetUsrStringDesc+0x40>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    *length = 0U;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	801a      	strh	r2, [r3, #0]
    return NULL;
 800e10a:	2300      	movs	r3, #0
  }
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3718      	adds	r7, #24
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	2400b8f0 	.word	0x2400b8f0

0800e118 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800e118:	b480      	push	{r7}
 800e11a:	b083      	sub	sp, #12
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d101      	bne.n	800e12c <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e128:	2303      	movs	r3, #3
 800e12a:	e009      	b.n	800e140 <USBD_DFU_RegisterMedia+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	33b0      	adds	r3, #176	; 0xb0
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	4413      	add	r3, r2
 800e13a:	683a      	ldr	r2, [r7, #0]
 800e13c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e13e:	2300      	movs	r3, #0
}
 800e140:	4618      	mov	r0, r3
 800e142:	370c      	adds	r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	32b0      	adds	r2, #176	; 0xb0
 800e160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e164:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800e16c:	4618      	mov	r0, r3
 800e16e:	f000 fbd5 	bl	800e91c <USBD_DFU_GetDfuFuncDesc>
 800e172:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d054      	beq.n	800e224 <DFU_Detach+0xd8>
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d051      	beq.n	800e224 <DFU_Detach+0xd8>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800e186:	2b02      	cmp	r3, #2
 800e188:	d013      	beq.n	800e1b2 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800e190:	2b03      	cmp	r3, #3
 800e192:	d00e      	beq.n	800e1b2 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800e19a:	2b05      	cmp	r3, #5
 800e19c:	d009      	beq.n	800e1b2 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800e1a4:	2b06      	cmp	r3, #6
 800e1a6:	d004      	beq.n	800e1b2 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800e1ae:	2b09      	cmp	r3, #9
 800e1b0:	d125      	bne.n	800e1fe <DFU_Detach+0xb2>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2202      	movs	r2, #2
 800e1b6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /*iString*/
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->wblock_num = 0U;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	789b      	ldrb	r3, [r3, #2]
 800e202:	f003 0308 	and.w	r3, r3, #8
 800e206:	2b00      	cmp	r3, #0
 800e208:	d006      	beq.n	800e218 <DFU_Detach+0xcc>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 fc44 	bl	800ea98 <USBD_Stop>
    (void)USBD_Start(pdev);
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 fc35 	bl	800ea80 <USBD_Start>
 800e216:	e006      	b.n	800e226 <DFU_Detach+0xda>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	885b      	ldrh	r3, [r3, #2]
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7f4 fc71 	bl	8002b04 <HAL_Delay>
 800e222:	e000      	b.n	800e226 <DFU_Detach+0xda>
    return;
 800e224:	bf00      	nop
  }
}
 800e226:	3710      	adds	r7, #16
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	32b0      	adds	r2, #176	; 0xb0
 800e240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e244:	60fb      	str	r3, [r7, #12]
#if (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

  if (hdfu == NULL)
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d061      	beq.n	800e310 <DFU_Download+0xe4>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	88db      	ldrh	r3, [r3, #6]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d033      	beq.n	800e2bc <DFU_Download+0x90>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800e25a:	2b02      	cmp	r3, #2
 800e25c:	d004      	beq.n	800e268 <DFU_Download+0x3c>
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800e264:	2b05      	cmp	r3, #5
 800e266:	d124      	bne.n	800e2b2 <DFU_Download+0x86>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	885b      	ldrh	r3, [r3, #2]
 800e26c:	461a      	mov	r2, r3
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	88db      	ldrh	r3, [r3, #6]
 800e278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e27c:	bf28      	it	cs
 800e27e:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800e282:	b29b      	uxth	r3, r3
 800e284:	461a      	mov	r2, r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2203      	movs	r2, #3
 800e290:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800e2a0:	68f9      	ldr	r1, [r7, #12]
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f001 fe64 	bl	800ff78 <USBD_CtlPrepareRx>
 800e2b0:	e02f      	b.n	800e312 <DFU_Download+0xe6>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800e2b2:	6839      	ldr	r1, [r7, #0]
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f001 fdb6 	bl	800fe26 <USBD_CtlError>
 800e2ba:	e02a      	b.n	800e312 <DFU_Download+0xe6>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation */
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800e2c2:	2b05      	cmp	r3, #5
 800e2c4:	d004      	beq.n	800e2d0 <DFU_Download+0xa4>
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d11a      	bne.n	800e306 <DFU_Download+0xda>
        hdfu->dev_status[4] = hdfu->dev_state;
      }
      else
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */
      {
        hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2206      	movs	r2, #6
 800e2dc:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800e304:	e005      	b.n	800e312 <DFU_Download+0xe6>
      }
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f001 fd8c 	bl	800fe26 <USBD_CtlError>
 800e30e:	e000      	b.n	800e312 <DFU_Download+0xe6>
    return;
 800e310:	bf00      	nop
    }
  }
}
 800e312:	3710      	adds	r7, #16
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b088      	sub	sp, #32
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	32b0      	adds	r2, #176	; 0xb0
 800e32c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e330:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	33b0      	adds	r3, #176	; 0xb0
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	4413      	add	r3, r2
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	61bb      	str	r3, [r7, #24]
  uint8_t VendorCmdLength = 0U;
  uint8_t VendorCmdBuffer[DFU_VENDOR_CMD_MAX];
  uint8_t idx;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	2b00      	cmp	r3, #0
 800e348:	f000 80ea 	beq.w	800e520 <DFU_Upload+0x208>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	88db      	ldrh	r3, [r3, #6]
 800e350:	2b00      	cmp	r3, #0
 800e352:	f000 80ce 	beq.w	800e4f2 <DFU_Upload+0x1da>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800e35c:	2b02      	cmp	r3, #2
 800e35e:	d005      	beq.n	800e36c <DFU_Upload+0x54>
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800e366:	2b09      	cmp	r3, #9
 800e368:	f040 80b6 	bne.w	800e4d8 <DFU_Upload+0x1c0>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	885b      	ldrh	r3, [r3, #2]
 800e370:	461a      	mov	r2, r3
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	88db      	ldrh	r3, [r3, #6]
 800e37c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e380:	bf28      	it	cs
 800e382:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800e386:	b29b      	uxth	r3, r3
 800e388:	461a      	mov	r2, r3
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800e396:	2b00      	cmp	r3, #0
 800e398:	d12e      	bne.n	800e3f8 <DFU_Upload+0xe0>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e3a0:	2b03      	cmp	r3, #3
 800e3a2:	d901      	bls.n	800e3a8 <DFU_Upload+0x90>
 800e3a4:	2202      	movs	r2, #2
 800e3a6:	e000      	b.n	800e3aa <DFU_Upload+0x92>
 800e3a8:	2209      	movs	r2, #9
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

        hdfu->dev_status[1] = 0U;
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800e3c0:	69fb      	ldr	r3, [r7, #28]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e3ce:	69fb      	ldr	r3, [r7, #28]
 800e3d0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	2221      	movs	r2, #33	; 0x21
 800e3de:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800e3e0:	69fb      	ldr	r3, [r7, #28]
 800e3e2:	2241      	movs	r2, #65	; 0x41
 800e3e4:	709a      	strb	r2, [r3, #2]

        CmdLength = 3U;
 800e3e6:	2303      	movs	r3, #3
 800e3e8:	60fb      	str	r3, [r7, #12]
          CmdLength += MIN(VendorCmdLength, DFU_VENDOR_CMD_MAX);
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	68fa      	ldr	r2, [r7, #12]
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f001 fd95 	bl	800ff20 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800e3f6:	e094      	b.n	800e522 <DFU_Upload+0x20a>
      }
      else if (hdfu->wblock_num > 1U)
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800e3fe:	2b01      	cmp	r3, #1
 800e400:	d94f      	bls.n	800e4a2 <DFU_Upload+0x18a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	2209      	movs	r2, #9
 800e406:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

        hdfu->dev_status[1] = 0U;
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	2200      	movs	r2, #0
 800e40e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	2200      	movs	r2, #0
 800e416:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	2200      	movs	r2, #0
 800e41e:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800e422:	69fb      	ldr	r3, [r7, #28]
 800e424:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e428:	69fb      	ldr	r3, [r7, #28]
 800e42a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        }

        if (VendorStatus == IS_DFU_PHY_ADDRESS)
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
        {
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800e434:	3b02      	subs	r3, #2
 800e436:	029a      	lsls	r2, r3, #10
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800e43e:	4413      	add	r3, r2
 800e440:	617b      	str	r3, [r7, #20]

          /* Return the physical address where data are stored */
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	695b      	ldr	r3, [r3, #20]
 800e446:	6978      	ldr	r0, [r7, #20]
 800e448:	69f9      	ldr	r1, [r7, #28]
 800e44a:	69fa      	ldr	r2, [r7, #28]
 800e44c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800e450:	4798      	blx	r3
 800e452:	6138      	str	r0, [r7, #16]

          if (phaddr == NULL)
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d11a      	bne.n	800e490 <DFU_Upload+0x178>
          {
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800e45a:	69fb      	ldr	r3, [r7, #28]
 800e45c:	220f      	movs	r2, #15
 800e45e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

            hdfu->dev_status[1] = 0U;
 800e462:	69fb      	ldr	r3, [r7, #28]
 800e464:	2200      	movs	r2, #0
 800e466:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
            hdfu->dev_status[2] = 0U;
 800e46a:	69fb      	ldr	r3, [r7, #28]
 800e46c:	2200      	movs	r2, #0
 800e46e:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
            hdfu->dev_status[3] = 0U;
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	2200      	movs	r2, #0
 800e476:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

            /* Call the error management function (command will be NAKed) */
            USBD_CtlError(pdev, req);
 800e486:	6839      	ldr	r1, [r7, #0]
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f001 fccc 	bl	800fe26 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800e48e:	e048      	b.n	800e522 <DFU_Upload+0x20a>
          }
          else
          {
            /* Send the status data over EP0 */
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e496:	461a      	mov	r2, r3
 800e498:	6939      	ldr	r1, [r7, #16]
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f001 fd40 	bl	800ff20 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800e4a0:	e03f      	b.n	800e522 <DFU_Upload+0x20a>
          }
        }
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800e4a2:	69fb      	ldr	r3, [r7, #28]
 800e4a4:	220f      	movs	r2, #15
 800e4a6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

        hdfu->dev_status[1] = 0U;
 800e4aa:	69fb      	ldr	r3, [r7, #28]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800e4b2:	69fb      	ldr	r3, [r7, #28]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        /* Call the error management function (command will be NAKed) */
        USBD_CtlError(pdev, req);
 800e4ce:	6839      	ldr	r1, [r7, #0]
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f001 fca8 	bl	800fe26 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800e4d6:	e024      	b.n	800e522 <DFU_Upload+0x20a>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed) */
      USBD_CtlError(pdev, req);
 800e4e8:	6839      	ldr	r1, [r7, #0]
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f001 fc9b 	bl	800fe26 <USBD_CtlError>
 800e4f0:	e017      	b.n	800e522 <DFU_Upload+0x20a>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	2202      	movs	r2, #2
 800e4f6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800e502:	69fb      	ldr	r3, [r7, #28]
 800e504:	2200      	movs	r2, #0
 800e506:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	2200      	movs	r2, #0
 800e50e:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800e51e:	e000      	b.n	800e522 <DFU_Upload+0x20a>
    return;
 800e520:	bf00      	nop
  }
}
 800e522:	3720      	adds	r7, #32
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b086      	sub	sp, #24
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	32b0      	adds	r2, #176	; 0xb0
 800e53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e53e:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e546:	687a      	ldr	r2, [r7, #4]
 800e548:	33b0      	adds	r3, #176	; 0xb0
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	4413      	add	r3, r2
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800e558:	4618      	mov	r0, r3
 800e55a:	f000 f9df 	bl	800e91c <USBD_DFU_GetDfuFuncDesc>
 800e55e:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	2b00      	cmp	r3, #0
 800e564:	f000 80a8 	beq.w	800e6b8 <DFU_GetStatus+0x190>
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	f000 80a4 	beq.w	800e6b8 <DFU_GetStatus+0x190>
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2b00      	cmp	r3, #0
 800e574:	f000 80a0 	beq.w	800e6b8 <DFU_GetStatus+0x190>
  {
    return;
  }

  switch (hdfu->dev_state)
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800e57e:	2b03      	cmp	r3, #3
 800e580:	d002      	beq.n	800e588 <DFU_GetStatus+0x60>
 800e582:	2b06      	cmp	r3, #6
 800e584:	d051      	beq.n	800e62a <DFU_GetStatus+0x102>
        }
      }
      break;

    default:
      break;
 800e586:	e08e      	b.n	800e6a6 <DFU_GetStatus+0x17e>
      if (hdfu->wlength != 0U)
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d034      	beq.n	800e5fc <DFU_GetStatus+0xd4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	2204      	movs	r2, #4
 800e596:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	2200      	movs	r2, #0
 800e59e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d10e      	bne.n	800e5e6 <DFU_GetStatus+0xbe>
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	2b41      	cmp	r3, #65	; 0x41
 800e5ce:	d10a      	bne.n	800e5e6 <DFU_GetStatus+0xbe>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	699b      	ldr	r3, [r3, #24]
 800e5d4:	697a      	ldr	r2, [r7, #20]
 800e5d6:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800e5da:	697a      	ldr	r2, [r7, #20]
 800e5dc:	f202 4214 	addw	r2, r2, #1044	; 0x414
 800e5e0:	2100      	movs	r1, #0
 800e5e2:	4798      	blx	r3
      break;
 800e5e4:	e05f      	b.n	800e6a6 <DFU_GetStatus+0x17e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	699b      	ldr	r3, [r3, #24]
 800e5ea:	697a      	ldr	r2, [r7, #20]
 800e5ec:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800e5f0:	697a      	ldr	r2, [r7, #20]
 800e5f2:	f202 4214 	addw	r2, r2, #1044	; 0x414
 800e5f6:	2101      	movs	r1, #1
 800e5f8:	4798      	blx	r3
      break;
 800e5fa:	e054      	b.n	800e6a6 <DFU_GetStatus+0x17e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	2205      	movs	r2, #5
 800e600:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 0U;
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	2200      	movs	r2, #0
 800e608:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	2200      	movs	r2, #0
 800e610:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	2200      	movs	r2, #0
 800e618:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      break;
 800e628:	e03d      	b.n	800e6a6 <DFU_GetStatus+0x17e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800e630:	2b01      	cmp	r3, #1
 800e632:	d116      	bne.n	800e662 <DFU_GetStatus+0x13a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	2207      	movs	r2, #7
 800e638:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	2201      	movs	r2, #1
 800e640:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
        hdfu->dev_status[2] = 0U;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	2200      	movs	r2, #0
 800e648:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
        hdfu->dev_status[3] = 0U;
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	2200      	movs	r2, #0
 800e650:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      break;
 800e660:	e020      	b.n	800e6a4 <DFU_GetStatus+0x17c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d11b      	bne.n	800e6a4 <DFU_GetStatus+0x17c>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	789b      	ldrb	r3, [r3, #2]
 800e670:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800e674:	2b00      	cmp	r3, #0
 800e676:	d015      	beq.n	800e6a4 <DFU_GetStatus+0x17c>
          hdfu->dev_state = DFU_STATE_IDLE;
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	2202      	movs	r2, #2
 800e67c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
          hdfu->dev_status[1] = 0U;
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	2200      	movs	r2, #0
 800e684:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
          hdfu->dev_status[2] = 0U;
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	2200      	movs	r2, #0
 800e68c:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
          hdfu->dev_status[3] = 0U;
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	2200      	movs	r2, #0
 800e694:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      break;
 800e6a4:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800e6ac:	2206      	movs	r2, #6
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f001 fc35 	bl	800ff20 <USBD_CtlSendData>
 800e6b6:	e000      	b.n	800e6ba <DFU_GetStatus+0x192>
    return;
 800e6b8:	bf00      	nop
}
 800e6ba:	3718      	adds	r7, #24
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b085      	sub	sp, #20
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	32b0      	adds	r2, #176	; 0xb0
 800e6d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6d6:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d042      	beq.n	800e764 <DFU_ClearStatus+0xa4>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800e6e4:	2b0a      	cmp	r3, #10
 800e6e6:	d11e      	bne.n	800e726 <DFU_ClearStatus+0x66>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2202      	movs	r2, #2
 800e6ec:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2200      	movs	r2, #0
 800e704:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2200      	movs	r2, #0
 800e70c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2200      	movs	r2, #0
 800e720:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 800e724:	e01f      	b.n	800e766 <DFU_ClearStatus+0xa6>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	220a      	movs	r2, #10
 800e72a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	220e      	movs	r2, #14
 800e732:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2200      	movs	r2, #0
 800e73a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2200      	movs	r2, #0
 800e742:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2200      	movs	r2, #0
 800e74a:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2200      	movs	r2, #0
 800e75e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 800e762:	e000      	b.n	800e766 <DFU_ClearStatus+0xa6>
    return;
 800e764:	bf00      	nop
  }
}
 800e766:	3714      	adds	r7, #20
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	32b0      	adds	r2, #176	; 0xb0
 800e782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e786:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d008      	beq.n	800e7a0 <DFU_GetState+0x30>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800e794:	2201      	movs	r2, #1
 800e796:	4619      	mov	r1, r3
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f001 fbc1 	bl	800ff20 <USBD_CtlSendData>
 800e79e:	e000      	b.n	800e7a2 <DFU_GetState+0x32>
    return;
 800e7a0:	bf00      	nop
}
 800e7a2:	3710      	adds	r7, #16
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b085      	sub	sp, #20
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	32b0      	adds	r2, #176	; 0xb0
 800e7ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7be:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d03f      	beq.n	800e846 <DFU_Abort+0x9e>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800e7cc:	2b02      	cmp	r3, #2
 800e7ce:	d013      	beq.n	800e7f8 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800e7d6:	2b03      	cmp	r3, #3
 800e7d8:	d00e      	beq.n	800e7f8 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800e7e0:	2b05      	cmp	r3, #5
 800e7e2:	d009      	beq.n	800e7f8 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800e7ea:	2b06      	cmp	r3, #6
 800e7ec:	d004      	beq.n	800e7f8 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800e7f4:	2b09      	cmp	r3, #9
 800e7f6:	d127      	bne.n	800e848 <DFU_Abort+0xa0>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2202      	movs	r2, #2
 800e7fc:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2200      	movs	r2, #0
 800e804:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[1] = 0U;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2200      	movs	r2, #0
 800e80c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	2200      	movs	r2, #0
 800e814:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2200      	movs	r2, #0
 800e81c:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2200      	movs	r2, #0
 800e830:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->wblock_num = 0U;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2200      	movs	r2, #0
 800e838:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2200      	movs	r2, #0
 800e840:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800e844:	e000      	b.n	800e848 <DFU_Abort+0xa0>
    return;
 800e846:	bf00      	nop
  }
}
 800e848:	3714      	adds	r7, #20
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr

0800e852 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800e852:	b580      	push	{r7, lr}
 800e854:	b086      	sub	sp, #24
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	32b0      	adds	r2, #176	; 0xb0
 800e864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e868:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	33b0      	adds	r3, #176	; 0xb0
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	4413      	add	r3, r2
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800e882:	4618      	mov	r0, r3
 800e884:	f000 f84a 	bl	800e91c <USBD_DFU_GetDfuFuncDesc>
 800e888:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d041      	beq.n	800e914 <DFU_Leave+0xc2>
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d03e      	beq.n	800e914 <DFU_Leave+0xc2>
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d03b      	beq.n	800e914 <DFU_Leave+0xc2>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d

  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	789b      	ldrb	r3, [r3, #2]
 800e8a8:	f003 0304 	and.w	r3, r3, #4
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d016      	beq.n	800e8de <DFU_Leave+0x8c>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	2206      	movs	r2, #6
 800e8b4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    return;
 800e8dc:	e01b      	b.n	800e916 <DFU_Leave+0xc4>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	2208      	movs	r2, #8
 800e8e2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c

    hdfu->dev_status[1] = 0U;
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    hdfu->dev_status[3] = 0U;
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 f8c4 	bl	800ea98 <USBD_Stop>
#if (USBD_DFU_VENDOR_EXIT_ENABLED == 1U)
    /* Jump should be ensured by user application */
    DfuInterface->LeaveDFU(hdfu->data_ptr);
#else
    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800e910:	f7ff f8ba 	bl	800da88 <__NVIC_SystemReset>
    return;
 800e914:	bf00      	nop
#endif /* USBD_DFU_VENDOR_EXIT_ENABLED */

    /* The next instructions will not be reached (system reset) */
  }
}
 800e916:	3718      	adds	r7, #24
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b086      	sub	sp, #24
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	617b      	str	r3, [r7, #20]
  uint8_t *pDfuDesc = NULL;
 800e92c:	2300      	movs	r3, #0
 800e92e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	885b      	ldrh	r3, [r3, #2]
 800e934:	b29a      	uxth	r2, r3
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d918      	bls.n	800e972 <USBD_DFU_GetDfuFuncDesc+0x56>
  {
    ptr = desc->bLength;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	b29b      	uxth	r3, r3
 800e946:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e948:	e00d      	b.n	800e966 <USBD_DFU_GetDfuFuncDesc+0x4a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e94a:	f107 030a 	add.w	r3, r7, #10
 800e94e:	4619      	mov	r1, r3
 800e950:	6978      	ldr	r0, [r7, #20]
 800e952:	f000 fc19 	bl	800f188 <USBD_GetNextDesc>
 800e956:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	785b      	ldrb	r3, [r3, #1]
 800e95c:	2b21      	cmp	r3, #33	; 0x21
 800e95e:	d102      	bne.n	800e966 <USBD_DFU_GetDfuFuncDesc+0x4a>
      {
        pDfuDesc = (uint8_t *)pdesc;
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	613b      	str	r3, [r7, #16]
        break;
 800e964:	e005      	b.n	800e972 <USBD_DFU_GetDfuFuncDesc+0x56>
    while (ptr < desc->wTotalLength)
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	885b      	ldrh	r3, [r3, #2]
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	897b      	ldrh	r3, [r7, #10]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d8eb      	bhi.n	800e94a <USBD_DFU_GetDfuFuncDesc+0x2e>
      }
    }
  }
  return pDfuDesc;
 800e972:	693b      	ldr	r3, [r7, #16]
}
 800e974:	4618      	mov	r0, r3
 800e976:	3718      	adds	r7, #24
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b086      	sub	sp, #24
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	4613      	mov	r3, r2
 800e988:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d10a      	bne.n	800e9a6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800e990:	4817      	ldr	r0, [pc, #92]	; (800e9f0 <USBD_Init+0x74>)
 800e992:	f002 fbfb 	bl	801118c <iprintf>
 800e996:	4817      	ldr	r0, [pc, #92]	; (800e9f4 <USBD_Init+0x78>)
 800e998:	f002 fbf8 	bl	801118c <iprintf>
 800e99c:	200a      	movs	r0, #10
 800e99e:	f002 fc07 	bl	80111b0 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e9a2:	2303      	movs	r3, #3
 800e9a4:	e01f      	b.n	800e9e6 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d003      	beq.n	800e9cc <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	68ba      	ldr	r2, [r7, #8]
 800e9c8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	79fa      	ldrb	r2, [r7, #7]
 800e9d8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e9da:	68f8      	ldr	r0, [r7, #12]
 800e9dc:	f001 fde0 	bl	80105a0 <USBD_LL_Init>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e9e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3718      	adds	r7, #24
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	08012b28 	.word	0x08012b28
 800e9f4:	08012b30 	.word	0x08012b30

0800e9f8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ea02:	2300      	movs	r3, #0
 800ea04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d10a      	bne.n	800ea22 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800ea0c:	481a      	ldr	r0, [pc, #104]	; (800ea78 <USBD_RegisterClass+0x80>)
 800ea0e:	f002 fbbd 	bl	801118c <iprintf>
 800ea12:	481a      	ldr	r0, [pc, #104]	; (800ea7c <USBD_RegisterClass+0x84>)
 800ea14:	f002 fbba 	bl	801118c <iprintf>
 800ea18:	200a      	movs	r0, #10
 800ea1a:	f002 fbc9 	bl	80111b0 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ea1e:	2303      	movs	r3, #3
 800ea20:	e025      	b.n	800ea6e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	683a      	ldr	r2, [r7, #0]
 800ea26:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	32ae      	adds	r2, #174	; 0xae
 800ea34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d00f      	beq.n	800ea5e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	32ae      	adds	r2, #174	; 0xae
 800ea48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea4e:	f107 020e 	add.w	r2, r7, #14
 800ea52:	4610      	mov	r0, r2
 800ea54:	4798      	blx	r3
 800ea56:	4602      	mov	r2, r0
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ea64:	1c5a      	adds	r2, r3, #1
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ea6c:	2300      	movs	r3, #0
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	08012b28 	.word	0x08012b28
 800ea7c:	08012b48 	.word	0x08012b48

0800ea80 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f001 fddb 	bl	8010644 <USBD_LL_Start>
 800ea8e:	4603      	mov	r3, r0
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f001 fdea 	bl	801067a <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d009      	beq.n	800eac4 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	687a      	ldr	r2, [r7, #4]
 800eaba:	6852      	ldr	r2, [r2, #4]
 800eabc:	b2d2      	uxtb	r2, r2
 800eabe:	4611      	mov	r1, r2
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 800eac4:	2300      	movs	r3, #0
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3708      	adds	r7, #8
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800eace:	b480      	push	{r7}
 800ead0:	b083      	sub	sp, #12
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ead6:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ead8:	4618      	mov	r0, r3
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr

0800eae4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b084      	sub	sp, #16
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	460b      	mov	r3, r1
 800eaee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d009      	beq.n	800eb12 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	78fa      	ldrb	r2, [r7, #3]
 800eb08:	4611      	mov	r1, r2
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	4798      	blx	r3
 800eb0e:	4603      	mov	r3, r0
 800eb10:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eb12:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3710      	adds	r7, #16
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	460b      	mov	r3, r1
 800eb26:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	78fa      	ldrb	r2, [r7, #3]
 800eb36:	4611      	mov	r1, r2
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	4798      	blx	r3
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d001      	beq.n	800eb46 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800eb42:	2303      	movs	r3, #3
 800eb44:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eb46:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3710      	adds	r7, #16
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eb60:	6839      	ldr	r1, [r7, #0]
 800eb62:	4618      	mov	r0, r3
 800eb64:	f001 f925 	bl	800fdb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800eb76:	461a      	mov	r2, r3
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eb84:	f003 031f 	and.w	r3, r3, #31
 800eb88:	2b02      	cmp	r3, #2
 800eb8a:	d01a      	beq.n	800ebc2 <USBD_LL_SetupStage+0x72>
 800eb8c:	2b02      	cmp	r3, #2
 800eb8e:	d822      	bhi.n	800ebd6 <USBD_LL_SetupStage+0x86>
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d002      	beq.n	800eb9a <USBD_LL_SetupStage+0x4a>
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d00a      	beq.n	800ebae <USBD_LL_SetupStage+0x5e>
 800eb98:	e01d      	b.n	800ebd6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eba0:	4619      	mov	r1, r3
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 fb2c 	bl	800f200 <USBD_StdDevReq>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	73fb      	strb	r3, [r7, #15]
      break;
 800ebac:	e020      	b.n	800ebf0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f000 fb94 	bl	800f2e4 <USBD_StdItfReq>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	73fb      	strb	r3, [r7, #15]
      break;
 800ebc0:	e016      	b.n	800ebf0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ebc8:	4619      	mov	r1, r3
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f000 fbf6 	bl	800f3bc <USBD_StdEPReq>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	73fb      	strb	r3, [r7, #15]
      break;
 800ebd4:	e00c      	b.n	800ebf0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ebdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f001 fd89 	bl	80106fc <USBD_LL_StallEP>
 800ebea:	4603      	mov	r3, r0
 800ebec:	73fb      	strb	r3, [r7, #15]
      break;
 800ebee:	bf00      	nop
  }

  return ret;
 800ebf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b086      	sub	sp, #24
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	60f8      	str	r0, [r7, #12]
 800ec02:	460b      	mov	r3, r1
 800ec04:	607a      	str	r2, [r7, #4]
 800ec06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ec0c:	7afb      	ldrb	r3, [r7, #11]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d16e      	bne.n	800ecf0 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ec18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ec20:	2b03      	cmp	r3, #3
 800ec22:	f040 8098 	bne.w	800ed56 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	689a      	ldr	r2, [r3, #8]
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d913      	bls.n	800ec5a <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	689a      	ldr	r2, [r3, #8]
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	68db      	ldr	r3, [r3, #12]
 800ec3a:	1ad2      	subs	r2, r2, r3
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	68da      	ldr	r2, [r3, #12]
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	689b      	ldr	r3, [r3, #8]
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	bf28      	it	cs
 800ec4c:	4613      	movcs	r3, r2
 800ec4e:	461a      	mov	r2, r3
 800ec50:	6879      	ldr	r1, [r7, #4]
 800ec52:	68f8      	ldr	r0, [r7, #12]
 800ec54:	f001 f9ad 	bl	800ffb2 <USBD_CtlContinueRx>
 800ec58:	e07d      	b.n	800ed56 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ec60:	f003 031f 	and.w	r3, r3, #31
 800ec64:	2b02      	cmp	r3, #2
 800ec66:	d014      	beq.n	800ec92 <USBD_LL_DataOutStage+0x98>
 800ec68:	2b02      	cmp	r3, #2
 800ec6a:	d81d      	bhi.n	800eca8 <USBD_LL_DataOutStage+0xae>
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d002      	beq.n	800ec76 <USBD_LL_DataOutStage+0x7c>
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	d003      	beq.n	800ec7c <USBD_LL_DataOutStage+0x82>
 800ec74:	e018      	b.n	800eca8 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ec76:	2300      	movs	r3, #0
 800ec78:	75bb      	strb	r3, [r7, #22]
            break;
 800ec7a:	e018      	b.n	800ecae <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	4619      	mov	r1, r3
 800ec86:	68f8      	ldr	r0, [r7, #12]
 800ec88:	f000 fa64 	bl	800f154 <USBD_CoreFindIF>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	75bb      	strb	r3, [r7, #22]
            break;
 800ec90:	e00d      	b.n	800ecae <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f000 fa66 	bl	800f16e <USBD_CoreFindEP>
 800eca2:	4603      	mov	r3, r0
 800eca4:	75bb      	strb	r3, [r7, #22]
            break;
 800eca6:	e002      	b.n	800ecae <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	75bb      	strb	r3, [r7, #22]
            break;
 800ecac:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ecae:	7dbb      	ldrb	r3, [r7, #22]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d119      	bne.n	800ece8 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecba:	b2db      	uxtb	r3, r3
 800ecbc:	2b03      	cmp	r3, #3
 800ecbe:	d113      	bne.n	800ece8 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ecc0:	7dba      	ldrb	r2, [r7, #22]
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	32ae      	adds	r2, #174	; 0xae
 800ecc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecca:	691b      	ldr	r3, [r3, #16]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d00b      	beq.n	800ece8 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ecd0:	7dba      	ldrb	r2, [r7, #22]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ecd8:	7dba      	ldrb	r2, [r7, #22]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	32ae      	adds	r2, #174	; 0xae
 800ecde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ece2:	691b      	ldr	r3, [r3, #16]
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	f001 f973 	bl	800ffd4 <USBD_CtlSendStatus>
 800ecee:	e032      	b.n	800ed56 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ecf0:	7afb      	ldrb	r3, [r7, #11]
 800ecf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	68f8      	ldr	r0, [r7, #12]
 800ecfc:	f000 fa37 	bl	800f16e <USBD_CoreFindEP>
 800ed00:	4603      	mov	r3, r0
 800ed02:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ed04:	7dbb      	ldrb	r3, [r7, #22]
 800ed06:	2bff      	cmp	r3, #255	; 0xff
 800ed08:	d025      	beq.n	800ed56 <USBD_LL_DataOutStage+0x15c>
 800ed0a:	7dbb      	ldrb	r3, [r7, #22]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d122      	bne.n	800ed56 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	2b03      	cmp	r3, #3
 800ed1a:	d117      	bne.n	800ed4c <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ed1c:	7dba      	ldrb	r2, [r7, #22]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	32ae      	adds	r2, #174	; 0xae
 800ed22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed26:	699b      	ldr	r3, [r3, #24]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d00f      	beq.n	800ed4c <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ed2c:	7dba      	ldrb	r2, [r7, #22]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ed34:	7dba      	ldrb	r2, [r7, #22]
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	32ae      	adds	r2, #174	; 0xae
 800ed3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed3e:	699b      	ldr	r3, [r3, #24]
 800ed40:	7afa      	ldrb	r2, [r7, #11]
 800ed42:	4611      	mov	r1, r2
 800ed44:	68f8      	ldr	r0, [r7, #12]
 800ed46:	4798      	blx	r3
 800ed48:	4603      	mov	r3, r0
 800ed4a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ed4c:	7dfb      	ldrb	r3, [r7, #23]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d001      	beq.n	800ed56 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ed52:	7dfb      	ldrb	r3, [r7, #23]
 800ed54:	e000      	b.n	800ed58 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3718      	adds	r7, #24
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b086      	sub	sp, #24
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	460b      	mov	r3, r1
 800ed6a:	607a      	str	r2, [r7, #4]
 800ed6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ed6e:	7afb      	ldrb	r3, [r7, #11]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d16f      	bne.n	800ee54 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	3314      	adds	r3, #20
 800ed78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed80:	2b02      	cmp	r3, #2
 800ed82:	d15a      	bne.n	800ee3a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	689a      	ldr	r2, [r3, #8]
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	68db      	ldr	r3, [r3, #12]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d914      	bls.n	800edba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	689a      	ldr	r2, [r3, #8]
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	1ad2      	subs	r2, r2, r3
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	689b      	ldr	r3, [r3, #8]
 800eda2:	461a      	mov	r2, r3
 800eda4:	6879      	ldr	r1, [r7, #4]
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f001 f8d5 	bl	800ff56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800edac:	2300      	movs	r3, #0
 800edae:	2200      	movs	r2, #0
 800edb0:	2100      	movs	r1, #0
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f001 fd4c 	bl	8010850 <USBD_LL_PrepareReceive>
 800edb8:	e03f      	b.n	800ee3a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	68da      	ldr	r2, [r3, #12]
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d11c      	bne.n	800ee00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	685a      	ldr	r2, [r3, #4]
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800edce:	429a      	cmp	r2, r3
 800edd0:	d316      	bcc.n	800ee00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	685a      	ldr	r2, [r3, #4]
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eddc:	429a      	cmp	r2, r3
 800edde:	d20f      	bcs.n	800ee00 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ede0:	2200      	movs	r2, #0
 800ede2:	2100      	movs	r1, #0
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	f001 f8b6 	bl	800ff56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2200      	movs	r2, #0
 800edee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800edf2:	2300      	movs	r3, #0
 800edf4:	2200      	movs	r2, #0
 800edf6:	2100      	movs	r1, #0
 800edf8:	68f8      	ldr	r0, [r7, #12]
 800edfa:	f001 fd29 	bl	8010850 <USBD_LL_PrepareReceive>
 800edfe:	e01c      	b.n	800ee3a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee06:	b2db      	uxtb	r3, r3
 800ee08:	2b03      	cmp	r3, #3
 800ee0a:	d10f      	bne.n	800ee2c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d009      	beq.n	800ee2c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee26:	68db      	ldr	r3, [r3, #12]
 800ee28:	68f8      	ldr	r0, [r7, #12]
 800ee2a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee2c:	2180      	movs	r1, #128	; 0x80
 800ee2e:	68f8      	ldr	r0, [r7, #12]
 800ee30:	f001 fc64 	bl	80106fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f001 f8e0 	bl	800fffa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d03a      	beq.n	800eeba <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ee44:	68f8      	ldr	r0, [r7, #12]
 800ee46:	f7ff fe42 	bl	800eace <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ee52:	e032      	b.n	800eeba <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ee54:	7afb      	ldrb	r3, [r7, #11]
 800ee56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f000 f985 	bl	800f16e <USBD_CoreFindEP>
 800ee64:	4603      	mov	r3, r0
 800ee66:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ee68:	7dfb      	ldrb	r3, [r7, #23]
 800ee6a:	2bff      	cmp	r3, #255	; 0xff
 800ee6c:	d025      	beq.n	800eeba <USBD_LL_DataInStage+0x15a>
 800ee6e:	7dfb      	ldrb	r3, [r7, #23]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d122      	bne.n	800eeba <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	2b03      	cmp	r3, #3
 800ee7e:	d11c      	bne.n	800eeba <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ee80:	7dfa      	ldrb	r2, [r7, #23]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	32ae      	adds	r2, #174	; 0xae
 800ee86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee8a:	695b      	ldr	r3, [r3, #20]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d014      	beq.n	800eeba <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ee90:	7dfa      	ldrb	r2, [r7, #23]
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ee98:	7dfa      	ldrb	r2, [r7, #23]
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	32ae      	adds	r2, #174	; 0xae
 800ee9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eea2:	695b      	ldr	r3, [r3, #20]
 800eea4:	7afa      	ldrb	r2, [r7, #11]
 800eea6:	4611      	mov	r1, r2
 800eea8:	68f8      	ldr	r0, [r7, #12]
 800eeaa:	4798      	blx	r3
 800eeac:	4603      	mov	r3, r0
 800eeae:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800eeb0:	7dbb      	ldrb	r3, [r7, #22]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d001      	beq.n	800eeba <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800eeb6:	7dbb      	ldrb	r3, [r7, #22]
 800eeb8:	e000      	b.n	800eebc <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800eeba:	2300      	movs	r3, #0
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3718      	adds	r7, #24
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b084      	sub	sp, #16
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800eecc:	2300      	movs	r3, #0
 800eece:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2201      	movs	r2, #1
 800eed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2200      	movs	r2, #0
 800eedc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2200      	movs	r2, #0
 800eee4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2200      	movs	r2, #0
 800eeea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2200      	movs	r2, #0
 800eef2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d014      	beq.n	800ef2a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d00e      	beq.n	800ef2a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	687a      	ldr	r2, [r7, #4]
 800ef16:	6852      	ldr	r2, [r2, #4]
 800ef18:	b2d2      	uxtb	r2, r2
 800ef1a:	4611      	mov	r1, r2
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	4798      	blx	r3
 800ef20:	4603      	mov	r3, r0
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d001      	beq.n	800ef2a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ef26:	2303      	movs	r3, #3
 800ef28:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef2a:	2340      	movs	r3, #64	; 0x40
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	2100      	movs	r1, #0
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f001 fbbd 	bl	80106b0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2201      	movs	r2, #1
 800ef3a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2240      	movs	r2, #64	; 0x40
 800ef42:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef46:	2340      	movs	r3, #64	; 0x40
 800ef48:	2200      	movs	r2, #0
 800ef4a:	2180      	movs	r1, #128	; 0x80
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f001 fbaf 	bl	80106b0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2201      	movs	r2, #1
 800ef56:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2240      	movs	r2, #64	; 0x40
 800ef5c:	621a      	str	r2, [r3, #32]

  return ret;
 800ef5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3710      	adds	r7, #16
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b083      	sub	sp, #12
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	460b      	mov	r3, r1
 800ef72:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	78fa      	ldrb	r2, [r7, #3]
 800ef78:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	2b04      	cmp	r3, #4
 800ef9a:	d006      	beq.n	800efaa <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efa2:	b2da      	uxtb	r2, r3
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2204      	movs	r2, #4
 800efae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800efb2:	2300      	movs	r3, #0
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	370c      	adds	r7, #12
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr

0800efc0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	2b04      	cmp	r3, #4
 800efd2:	d106      	bne.n	800efe2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800efda:	b2da      	uxtb	r2, r3
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800efe2:	2300      	movs	r3, #0
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	370c      	adds	r7, #12
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr

0800eff0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b082      	sub	sp, #8
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800effe:	b2db      	uxtb	r3, r3
 800f000:	2b03      	cmp	r3, #3
 800f002:	d110      	bne.n	800f026 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d00b      	beq.n	800f026 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f014:	69db      	ldr	r3, [r3, #28]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d005      	beq.n	800f026 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f020:	69db      	ldr	r3, [r3, #28]
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f026:	2300      	movs	r3, #0
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3708      	adds	r7, #8
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	460b      	mov	r3, r1
 800f03a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	32ae      	adds	r2, #174	; 0xae
 800f046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d101      	bne.n	800f052 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f04e:	2303      	movs	r3, #3
 800f050:	e01c      	b.n	800f08c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	2b03      	cmp	r3, #3
 800f05c:	d115      	bne.n	800f08a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	32ae      	adds	r2, #174	; 0xae
 800f068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f06c:	6a1b      	ldr	r3, [r3, #32]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d00b      	beq.n	800f08a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	32ae      	adds	r2, #174	; 0xae
 800f07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f080:	6a1b      	ldr	r3, [r3, #32]
 800f082:	78fa      	ldrb	r2, [r7, #3]
 800f084:	4611      	mov	r1, r2
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f08a:	2300      	movs	r3, #0
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3708      	adds	r7, #8
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	460b      	mov	r3, r1
 800f09e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	32ae      	adds	r2, #174	; 0xae
 800f0aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d101      	bne.n	800f0b6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f0b2:	2303      	movs	r3, #3
 800f0b4:	e01c      	b.n	800f0f0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	2b03      	cmp	r3, #3
 800f0c0:	d115      	bne.n	800f0ee <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	32ae      	adds	r2, #174	; 0xae
 800f0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d00b      	beq.n	800f0ee <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	32ae      	adds	r2, #174	; 0xae
 800f0e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e6:	78fa      	ldrb	r2, [r7, #3]
 800f0e8:	4611      	mov	r1, r2
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f0ee:	2300      	movs	r3, #0
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3708      	adds	r7, #8
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b083      	sub	sp, #12
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f100:	2300      	movs	r3, #0
}
 800f102:	4618      	mov	r0, r3
 800f104:	370c      	adds	r7, #12
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr

0800f10e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f10e:	b580      	push	{r7, lr}
 800f110:	b084      	sub	sp, #16
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f116:	2300      	movs	r3, #0
 800f118:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2201      	movs	r2, #1
 800f11e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d00e      	beq.n	800f14a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	6852      	ldr	r2, [r2, #4]
 800f138:	b2d2      	uxtb	r2, r2
 800f13a:	4611      	mov	r1, r2
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	4798      	blx	r3
 800f140:	4603      	mov	r3, r0
 800f142:	2b00      	cmp	r3, #0
 800f144:	d001      	beq.n	800f14a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f146:	2303      	movs	r3, #3
 800f148:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3710      	adds	r7, #16
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f154:	b480      	push	{r7}
 800f156:	b083      	sub	sp, #12
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	460b      	mov	r3, r1
 800f15e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f160:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f162:	4618      	mov	r0, r3
 800f164:	370c      	adds	r7, #12
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr

0800f16e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f16e:	b480      	push	{r7}
 800f170:	b083      	sub	sp, #12
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
 800f176:	460b      	mov	r3, r1
 800f178:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f17a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	370c      	adds	r7, #12
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr

0800f188 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f188:	b480      	push	{r7}
 800f18a:	b085      	sub	sp, #20
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	881a      	ldrh	r2, [r3, #0]
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	4413      	add	r3, r2
 800f1a2:	b29a      	uxth	r2, r3
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	461a      	mov	r2, r3
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4413      	add	r3, r2
 800f1b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3714      	adds	r7, #20
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c0:	4770      	bx	lr

0800f1c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f1c2:	b480      	push	{r7}
 800f1c4:	b087      	sub	sp, #28
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f1e0:	8a3b      	ldrh	r3, [r7, #16]
 800f1e2:	021b      	lsls	r3, r3, #8
 800f1e4:	b21a      	sxth	r2, r3
 800f1e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	b21b      	sxth	r3, r3
 800f1ee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f1f0:	89fb      	ldrh	r3, [r7, #14]
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	371c      	adds	r7, #28
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr
	...

0800f200 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f20a:	2300      	movs	r3, #0
 800f20c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f216:	2b40      	cmp	r3, #64	; 0x40
 800f218:	d005      	beq.n	800f226 <USBD_StdDevReq+0x26>
 800f21a:	2b40      	cmp	r3, #64	; 0x40
 800f21c:	d857      	bhi.n	800f2ce <USBD_StdDevReq+0xce>
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d00f      	beq.n	800f242 <USBD_StdDevReq+0x42>
 800f222:	2b20      	cmp	r3, #32
 800f224:	d153      	bne.n	800f2ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	32ae      	adds	r2, #174	; 0xae
 800f230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f234:	689b      	ldr	r3, [r3, #8]
 800f236:	6839      	ldr	r1, [r7, #0]
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	4798      	blx	r3
 800f23c:	4603      	mov	r3, r0
 800f23e:	73fb      	strb	r3, [r7, #15]
      break;
 800f240:	e04a      	b.n	800f2d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	785b      	ldrb	r3, [r3, #1]
 800f246:	2b09      	cmp	r3, #9
 800f248:	d83b      	bhi.n	800f2c2 <USBD_StdDevReq+0xc2>
 800f24a:	a201      	add	r2, pc, #4	; (adr r2, 800f250 <USBD_StdDevReq+0x50>)
 800f24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f250:	0800f2a5 	.word	0x0800f2a5
 800f254:	0800f2b9 	.word	0x0800f2b9
 800f258:	0800f2c3 	.word	0x0800f2c3
 800f25c:	0800f2af 	.word	0x0800f2af
 800f260:	0800f2c3 	.word	0x0800f2c3
 800f264:	0800f283 	.word	0x0800f283
 800f268:	0800f279 	.word	0x0800f279
 800f26c:	0800f2c3 	.word	0x0800f2c3
 800f270:	0800f29b 	.word	0x0800f29b
 800f274:	0800f28d 	.word	0x0800f28d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f278:	6839      	ldr	r1, [r7, #0]
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 fa3c 	bl	800f6f8 <USBD_GetDescriptor>
          break;
 800f280:	e024      	b.n	800f2cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f282:	6839      	ldr	r1, [r7, #0]
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f000 fbf1 	bl	800fa6c <USBD_SetAddress>
          break;
 800f28a:	e01f      	b.n	800f2cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f28c:	6839      	ldr	r1, [r7, #0]
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 fc30 	bl	800faf4 <USBD_SetConfig>
 800f294:	4603      	mov	r3, r0
 800f296:	73fb      	strb	r3, [r7, #15]
          break;
 800f298:	e018      	b.n	800f2cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f29a:	6839      	ldr	r1, [r7, #0]
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f000 fcd3 	bl	800fc48 <USBD_GetConfig>
          break;
 800f2a2:	e013      	b.n	800f2cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f2a4:	6839      	ldr	r1, [r7, #0]
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f000 fd04 	bl	800fcb4 <USBD_GetStatus>
          break;
 800f2ac:	e00e      	b.n	800f2cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f2ae:	6839      	ldr	r1, [r7, #0]
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 fd33 	bl	800fd1c <USBD_SetFeature>
          break;
 800f2b6:	e009      	b.n	800f2cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f2b8:	6839      	ldr	r1, [r7, #0]
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f000 fd57 	bl	800fd6e <USBD_ClrFeature>
          break;
 800f2c0:	e004      	b.n	800f2cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f2c2:	6839      	ldr	r1, [r7, #0]
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f000 fdae 	bl	800fe26 <USBD_CtlError>
          break;
 800f2ca:	bf00      	nop
      }
      break;
 800f2cc:	e004      	b.n	800f2d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f2ce:	6839      	ldr	r1, [r7, #0]
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f000 fda8 	bl	800fe26 <USBD_CtlError>
      break;
 800f2d6:	bf00      	nop
  }

  return ret;
 800f2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3710      	adds	r7, #16
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop

0800f2e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f2fa:	2b40      	cmp	r3, #64	; 0x40
 800f2fc:	d005      	beq.n	800f30a <USBD_StdItfReq+0x26>
 800f2fe:	2b40      	cmp	r3, #64	; 0x40
 800f300:	d852      	bhi.n	800f3a8 <USBD_StdItfReq+0xc4>
 800f302:	2b00      	cmp	r3, #0
 800f304:	d001      	beq.n	800f30a <USBD_StdItfReq+0x26>
 800f306:	2b20      	cmp	r3, #32
 800f308:	d14e      	bne.n	800f3a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f310:	b2db      	uxtb	r3, r3
 800f312:	3b01      	subs	r3, #1
 800f314:	2b02      	cmp	r3, #2
 800f316:	d840      	bhi.n	800f39a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	889b      	ldrh	r3, [r3, #4]
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	2b01      	cmp	r3, #1
 800f320:	d836      	bhi.n	800f390 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	889b      	ldrh	r3, [r3, #4]
 800f326:	b2db      	uxtb	r3, r3
 800f328:	4619      	mov	r1, r3
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f7ff ff12 	bl	800f154 <USBD_CoreFindIF>
 800f330:	4603      	mov	r3, r0
 800f332:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f334:	7bbb      	ldrb	r3, [r7, #14]
 800f336:	2bff      	cmp	r3, #255	; 0xff
 800f338:	d01d      	beq.n	800f376 <USBD_StdItfReq+0x92>
 800f33a:	7bbb      	ldrb	r3, [r7, #14]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d11a      	bne.n	800f376 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f340:	7bba      	ldrb	r2, [r7, #14]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	32ae      	adds	r2, #174	; 0xae
 800f346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00f      	beq.n	800f370 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f350:	7bba      	ldrb	r2, [r7, #14]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f358:	7bba      	ldrb	r2, [r7, #14]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	32ae      	adds	r2, #174	; 0xae
 800f35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f362:	689b      	ldr	r3, [r3, #8]
 800f364:	6839      	ldr	r1, [r7, #0]
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	4798      	blx	r3
 800f36a:	4603      	mov	r3, r0
 800f36c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f36e:	e004      	b.n	800f37a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f370:	2303      	movs	r3, #3
 800f372:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f374:	e001      	b.n	800f37a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f376:	2303      	movs	r3, #3
 800f378:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	88db      	ldrh	r3, [r3, #6]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d110      	bne.n	800f3a4 <USBD_StdItfReq+0xc0>
 800f382:	7bfb      	ldrb	r3, [r7, #15]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d10d      	bne.n	800f3a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f000 fe23 	bl	800ffd4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f38e:	e009      	b.n	800f3a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f390:	6839      	ldr	r1, [r7, #0]
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f000 fd47 	bl	800fe26 <USBD_CtlError>
          break;
 800f398:	e004      	b.n	800f3a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f39a:	6839      	ldr	r1, [r7, #0]
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f000 fd42 	bl	800fe26 <USBD_CtlError>
          break;
 800f3a2:	e000      	b.n	800f3a6 <USBD_StdItfReq+0xc2>
          break;
 800f3a4:	bf00      	nop
      }
      break;
 800f3a6:	e004      	b.n	800f3b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f3a8:	6839      	ldr	r1, [r7, #0]
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f000 fd3b 	bl	800fe26 <USBD_CtlError>
      break;
 800f3b0:	bf00      	nop
  }

  return ret;
 800f3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3710      	adds	r7, #16
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b084      	sub	sp, #16
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	889b      	ldrh	r3, [r3, #4]
 800f3ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f3d8:	2b40      	cmp	r3, #64	; 0x40
 800f3da:	d007      	beq.n	800f3ec <USBD_StdEPReq+0x30>
 800f3dc:	2b40      	cmp	r3, #64	; 0x40
 800f3de:	f200 817f 	bhi.w	800f6e0 <USBD_StdEPReq+0x324>
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d02a      	beq.n	800f43c <USBD_StdEPReq+0x80>
 800f3e6:	2b20      	cmp	r3, #32
 800f3e8:	f040 817a 	bne.w	800f6e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f3ec:	7bbb      	ldrb	r3, [r7, #14]
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f7ff febc 	bl	800f16e <USBD_CoreFindEP>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f3fa:	7b7b      	ldrb	r3, [r7, #13]
 800f3fc:	2bff      	cmp	r3, #255	; 0xff
 800f3fe:	f000 8174 	beq.w	800f6ea <USBD_StdEPReq+0x32e>
 800f402:	7b7b      	ldrb	r3, [r7, #13]
 800f404:	2b00      	cmp	r3, #0
 800f406:	f040 8170 	bne.w	800f6ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f40a:	7b7a      	ldrb	r2, [r7, #13]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f412:	7b7a      	ldrb	r2, [r7, #13]
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	32ae      	adds	r2, #174	; 0xae
 800f418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f41c:	689b      	ldr	r3, [r3, #8]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	f000 8163 	beq.w	800f6ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f424:	7b7a      	ldrb	r2, [r7, #13]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	32ae      	adds	r2, #174	; 0xae
 800f42a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f42e:	689b      	ldr	r3, [r3, #8]
 800f430:	6839      	ldr	r1, [r7, #0]
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	4798      	blx	r3
 800f436:	4603      	mov	r3, r0
 800f438:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f43a:	e156      	b.n	800f6ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	785b      	ldrb	r3, [r3, #1]
 800f440:	2b03      	cmp	r3, #3
 800f442:	d008      	beq.n	800f456 <USBD_StdEPReq+0x9a>
 800f444:	2b03      	cmp	r3, #3
 800f446:	f300 8145 	bgt.w	800f6d4 <USBD_StdEPReq+0x318>
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	f000 809b 	beq.w	800f586 <USBD_StdEPReq+0x1ca>
 800f450:	2b01      	cmp	r3, #1
 800f452:	d03c      	beq.n	800f4ce <USBD_StdEPReq+0x112>
 800f454:	e13e      	b.n	800f6d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	2b02      	cmp	r3, #2
 800f460:	d002      	beq.n	800f468 <USBD_StdEPReq+0xac>
 800f462:	2b03      	cmp	r3, #3
 800f464:	d016      	beq.n	800f494 <USBD_StdEPReq+0xd8>
 800f466:	e02c      	b.n	800f4c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f468:	7bbb      	ldrb	r3, [r7, #14]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d00d      	beq.n	800f48a <USBD_StdEPReq+0xce>
 800f46e:	7bbb      	ldrb	r3, [r7, #14]
 800f470:	2b80      	cmp	r3, #128	; 0x80
 800f472:	d00a      	beq.n	800f48a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f474:	7bbb      	ldrb	r3, [r7, #14]
 800f476:	4619      	mov	r1, r3
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f001 f93f 	bl	80106fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f47e:	2180      	movs	r1, #128	; 0x80
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f001 f93b 	bl	80106fc <USBD_LL_StallEP>
 800f486:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f488:	e020      	b.n	800f4cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f48a:	6839      	ldr	r1, [r7, #0]
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f000 fcca 	bl	800fe26 <USBD_CtlError>
              break;
 800f492:	e01b      	b.n	800f4cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	885b      	ldrh	r3, [r3, #2]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d10e      	bne.n	800f4ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f49c:	7bbb      	ldrb	r3, [r7, #14]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d00b      	beq.n	800f4ba <USBD_StdEPReq+0xfe>
 800f4a2:	7bbb      	ldrb	r3, [r7, #14]
 800f4a4:	2b80      	cmp	r3, #128	; 0x80
 800f4a6:	d008      	beq.n	800f4ba <USBD_StdEPReq+0xfe>
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	88db      	ldrh	r3, [r3, #6]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d104      	bne.n	800f4ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f4b0:	7bbb      	ldrb	r3, [r7, #14]
 800f4b2:	4619      	mov	r1, r3
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f001 f921 	bl	80106fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 fd8a 	bl	800ffd4 <USBD_CtlSendStatus>

              break;
 800f4c0:	e004      	b.n	800f4cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f4c2:	6839      	ldr	r1, [r7, #0]
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 fcae 	bl	800fe26 <USBD_CtlError>
              break;
 800f4ca:	bf00      	nop
          }
          break;
 800f4cc:	e107      	b.n	800f6de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	2b02      	cmp	r3, #2
 800f4d8:	d002      	beq.n	800f4e0 <USBD_StdEPReq+0x124>
 800f4da:	2b03      	cmp	r3, #3
 800f4dc:	d016      	beq.n	800f50c <USBD_StdEPReq+0x150>
 800f4de:	e04b      	b.n	800f578 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f4e0:	7bbb      	ldrb	r3, [r7, #14]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d00d      	beq.n	800f502 <USBD_StdEPReq+0x146>
 800f4e6:	7bbb      	ldrb	r3, [r7, #14]
 800f4e8:	2b80      	cmp	r3, #128	; 0x80
 800f4ea:	d00a      	beq.n	800f502 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f4ec:	7bbb      	ldrb	r3, [r7, #14]
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f001 f903 	bl	80106fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f4f6:	2180      	movs	r1, #128	; 0x80
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f001 f8ff 	bl	80106fc <USBD_LL_StallEP>
 800f4fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f500:	e040      	b.n	800f584 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f502:	6839      	ldr	r1, [r7, #0]
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f000 fc8e 	bl	800fe26 <USBD_CtlError>
              break;
 800f50a:	e03b      	b.n	800f584 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	885b      	ldrh	r3, [r3, #2]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d136      	bne.n	800f582 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f514:	7bbb      	ldrb	r3, [r7, #14]
 800f516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d004      	beq.n	800f528 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f51e:	7bbb      	ldrb	r3, [r7, #14]
 800f520:	4619      	mov	r1, r3
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f001 f909 	bl	801073a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f000 fd53 	bl	800ffd4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f52e:	7bbb      	ldrb	r3, [r7, #14]
 800f530:	4619      	mov	r1, r3
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f7ff fe1b 	bl	800f16e <USBD_CoreFindEP>
 800f538:	4603      	mov	r3, r0
 800f53a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f53c:	7b7b      	ldrb	r3, [r7, #13]
 800f53e:	2bff      	cmp	r3, #255	; 0xff
 800f540:	d01f      	beq.n	800f582 <USBD_StdEPReq+0x1c6>
 800f542:	7b7b      	ldrb	r3, [r7, #13]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d11c      	bne.n	800f582 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f548:	7b7a      	ldrb	r2, [r7, #13]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f550:	7b7a      	ldrb	r2, [r7, #13]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	32ae      	adds	r2, #174	; 0xae
 800f556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f55a:	689b      	ldr	r3, [r3, #8]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d010      	beq.n	800f582 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f560:	7b7a      	ldrb	r2, [r7, #13]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	32ae      	adds	r2, #174	; 0xae
 800f566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f56a:	689b      	ldr	r3, [r3, #8]
 800f56c:	6839      	ldr	r1, [r7, #0]
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	4798      	blx	r3
 800f572:	4603      	mov	r3, r0
 800f574:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f576:	e004      	b.n	800f582 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f578:	6839      	ldr	r1, [r7, #0]
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f000 fc53 	bl	800fe26 <USBD_CtlError>
              break;
 800f580:	e000      	b.n	800f584 <USBD_StdEPReq+0x1c8>
              break;
 800f582:	bf00      	nop
          }
          break;
 800f584:	e0ab      	b.n	800f6de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	2b02      	cmp	r3, #2
 800f590:	d002      	beq.n	800f598 <USBD_StdEPReq+0x1dc>
 800f592:	2b03      	cmp	r3, #3
 800f594:	d032      	beq.n	800f5fc <USBD_StdEPReq+0x240>
 800f596:	e097      	b.n	800f6c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f598:	7bbb      	ldrb	r3, [r7, #14]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d007      	beq.n	800f5ae <USBD_StdEPReq+0x1f2>
 800f59e:	7bbb      	ldrb	r3, [r7, #14]
 800f5a0:	2b80      	cmp	r3, #128	; 0x80
 800f5a2:	d004      	beq.n	800f5ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f5a4:	6839      	ldr	r1, [r7, #0]
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f000 fc3d 	bl	800fe26 <USBD_CtlError>
                break;
 800f5ac:	e091      	b.n	800f6d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f5ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	da0b      	bge.n	800f5ce <USBD_StdEPReq+0x212>
 800f5b6:	7bbb      	ldrb	r3, [r7, #14]
 800f5b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f5bc:	4613      	mov	r3, r2
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	4413      	add	r3, r2
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	3310      	adds	r3, #16
 800f5c6:	687a      	ldr	r2, [r7, #4]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	3304      	adds	r3, #4
 800f5cc:	e00b      	b.n	800f5e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f5ce:	7bbb      	ldrb	r3, [r7, #14]
 800f5d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f5d4:	4613      	mov	r3, r2
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	4413      	add	r3, r2
 800f5da:	009b      	lsls	r3, r3, #2
 800f5dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f5e0:	687a      	ldr	r2, [r7, #4]
 800f5e2:	4413      	add	r3, r2
 800f5e4:	3304      	adds	r3, #4
 800f5e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	2202      	movs	r2, #2
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 fc93 	bl	800ff20 <USBD_CtlSendData>
              break;
 800f5fa:	e06a      	b.n	800f6d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f5fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f600:	2b00      	cmp	r3, #0
 800f602:	da11      	bge.n	800f628 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f604:	7bbb      	ldrb	r3, [r7, #14]
 800f606:	f003 020f 	and.w	r2, r3, #15
 800f60a:	6879      	ldr	r1, [r7, #4]
 800f60c:	4613      	mov	r3, r2
 800f60e:	009b      	lsls	r3, r3, #2
 800f610:	4413      	add	r3, r2
 800f612:	009b      	lsls	r3, r3, #2
 800f614:	440b      	add	r3, r1
 800f616:	3324      	adds	r3, #36	; 0x24
 800f618:	881b      	ldrh	r3, [r3, #0]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d117      	bne.n	800f64e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f61e:	6839      	ldr	r1, [r7, #0]
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 fc00 	bl	800fe26 <USBD_CtlError>
                  break;
 800f626:	e054      	b.n	800f6d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f628:	7bbb      	ldrb	r3, [r7, #14]
 800f62a:	f003 020f 	and.w	r2, r3, #15
 800f62e:	6879      	ldr	r1, [r7, #4]
 800f630:	4613      	mov	r3, r2
 800f632:	009b      	lsls	r3, r3, #2
 800f634:	4413      	add	r3, r2
 800f636:	009b      	lsls	r3, r3, #2
 800f638:	440b      	add	r3, r1
 800f63a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f63e:	881b      	ldrh	r3, [r3, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d104      	bne.n	800f64e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f644:	6839      	ldr	r1, [r7, #0]
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f000 fbed 	bl	800fe26 <USBD_CtlError>
                  break;
 800f64c:	e041      	b.n	800f6d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f64e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f652:	2b00      	cmp	r3, #0
 800f654:	da0b      	bge.n	800f66e <USBD_StdEPReq+0x2b2>
 800f656:	7bbb      	ldrb	r3, [r7, #14]
 800f658:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f65c:	4613      	mov	r3, r2
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	4413      	add	r3, r2
 800f662:	009b      	lsls	r3, r3, #2
 800f664:	3310      	adds	r3, #16
 800f666:	687a      	ldr	r2, [r7, #4]
 800f668:	4413      	add	r3, r2
 800f66a:	3304      	adds	r3, #4
 800f66c:	e00b      	b.n	800f686 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f66e:	7bbb      	ldrb	r3, [r7, #14]
 800f670:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f674:	4613      	mov	r3, r2
 800f676:	009b      	lsls	r3, r3, #2
 800f678:	4413      	add	r3, r2
 800f67a:	009b      	lsls	r3, r3, #2
 800f67c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	4413      	add	r3, r2
 800f684:	3304      	adds	r3, #4
 800f686:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f688:	7bbb      	ldrb	r3, [r7, #14]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d002      	beq.n	800f694 <USBD_StdEPReq+0x2d8>
 800f68e:	7bbb      	ldrb	r3, [r7, #14]
 800f690:	2b80      	cmp	r3, #128	; 0x80
 800f692:	d103      	bne.n	800f69c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	2200      	movs	r2, #0
 800f698:	601a      	str	r2, [r3, #0]
 800f69a:	e00e      	b.n	800f6ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f69c:	7bbb      	ldrb	r3, [r7, #14]
 800f69e:	4619      	mov	r1, r3
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f001 f869 	bl	8010778 <USBD_LL_IsStallEP>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d003      	beq.n	800f6b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	601a      	str	r2, [r3, #0]
 800f6b2:	e002      	b.n	800f6ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	2202      	movs	r2, #2
 800f6be:	4619      	mov	r1, r3
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f000 fc2d 	bl	800ff20 <USBD_CtlSendData>
              break;
 800f6c6:	e004      	b.n	800f6d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f6c8:	6839      	ldr	r1, [r7, #0]
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f000 fbab 	bl	800fe26 <USBD_CtlError>
              break;
 800f6d0:	bf00      	nop
          }
          break;
 800f6d2:	e004      	b.n	800f6de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f6d4:	6839      	ldr	r1, [r7, #0]
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 fba5 	bl	800fe26 <USBD_CtlError>
          break;
 800f6dc:	bf00      	nop
      }
      break;
 800f6de:	e005      	b.n	800f6ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f6e0:	6839      	ldr	r1, [r7, #0]
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f000 fb9f 	bl	800fe26 <USBD_CtlError>
      break;
 800f6e8:	e000      	b.n	800f6ec <USBD_StdEPReq+0x330>
      break;
 800f6ea:	bf00      	nop
  }

  return ret;
 800f6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
	...

0800f6f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b086      	sub	sp, #24
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f702:	2300      	movs	r3, #0
 800f704:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 800f706:	2300      	movs	r3, #0
 800f708:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 800f70a:	2300      	movs	r3, #0
 800f70c:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	885b      	ldrh	r3, [r3, #2]
 800f712:	0a1b      	lsrs	r3, r3, #8
 800f714:	b29b      	uxth	r3, r3
 800f716:	3b01      	subs	r3, #1
 800f718:	2b0e      	cmp	r3, #14
 800f71a:	f200 8179 	bhi.w	800fa10 <USBD_GetDescriptor+0x318>
 800f71e:	a201      	add	r2, pc, #4	; (adr r2, 800f724 <USBD_GetDescriptor+0x2c>)
 800f720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f724:	0800f795 	.word	0x0800f795
 800f728:	0800f7ad 	.word	0x0800f7ad
 800f72c:	0800f7ed 	.word	0x0800f7ed
 800f730:	0800fa11 	.word	0x0800fa11
 800f734:	0800fa11 	.word	0x0800fa11
 800f738:	0800f9b1 	.word	0x0800f9b1
 800f73c:	0800f9dd 	.word	0x0800f9dd
 800f740:	0800fa11 	.word	0x0800fa11
 800f744:	0800fa11 	.word	0x0800fa11
 800f748:	0800fa11 	.word	0x0800fa11
 800f74c:	0800fa11 	.word	0x0800fa11
 800f750:	0800fa11 	.word	0x0800fa11
 800f754:	0800fa11 	.word	0x0800fa11
 800f758:	0800fa11 	.word	0x0800fa11
 800f75c:	0800f761 	.word	0x0800f761
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f766:	69db      	ldr	r3, [r3, #28]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00b      	beq.n	800f784 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f772:	69db      	ldr	r3, [r3, #28]
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	7c12      	ldrb	r2, [r2, #16]
 800f778:	f107 010a 	add.w	r1, r7, #10
 800f77c:	4610      	mov	r0, r2
 800f77e:	4798      	blx	r3
 800f780:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f782:	e14d      	b.n	800fa20 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 800f784:	6839      	ldr	r1, [r7, #0]
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f000 fb4d 	bl	800fe26 <USBD_CtlError>
        err++;
 800f78c:	7cfb      	ldrb	r3, [r7, #19]
 800f78e:	3301      	adds	r3, #1
 800f790:	74fb      	strb	r3, [r7, #19]
      break;
 800f792:	e145      	b.n	800fa20 <USBD_GetDescriptor+0x328>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	687a      	ldr	r2, [r7, #4]
 800f79e:	7c12      	ldrb	r2, [r2, #16]
 800f7a0:	f107 010a 	add.w	r1, r7, #10
 800f7a4:	4610      	mov	r0, r2
 800f7a6:	4798      	blx	r3
 800f7a8:	6178      	str	r0, [r7, #20]
      break;
 800f7aa:	e139      	b.n	800fa20 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	7c1b      	ldrb	r3, [r3, #16]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d10d      	bne.n	800f7d0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7bc:	f107 020a 	add.w	r2, r7, #10
 800f7c0:	4610      	mov	r0, r2
 800f7c2:	4798      	blx	r3
 800f7c4:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	2202      	movs	r2, #2
 800f7cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f7ce:	e127      	b.n	800fa20 <USBD_GetDescriptor+0x328>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7d8:	f107 020a 	add.w	r2, r7, #10
 800f7dc:	4610      	mov	r0, r2
 800f7de:	4798      	blx	r3
 800f7e0:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	2202      	movs	r2, #2
 800f7e8:	701a      	strb	r2, [r3, #0]
      break;
 800f7ea:	e119      	b.n	800fa20 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	885b      	ldrh	r3, [r3, #2]
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	2b05      	cmp	r3, #5
 800f7f4:	f200 80ac 	bhi.w	800f950 <USBD_GetDescriptor+0x258>
 800f7f8:	a201      	add	r2, pc, #4	; (adr r2, 800f800 <USBD_GetDescriptor+0x108>)
 800f7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7fe:	bf00      	nop
 800f800:	0800f819 	.word	0x0800f819
 800f804:	0800f84d 	.word	0x0800f84d
 800f808:	0800f881 	.word	0x0800f881
 800f80c:	0800f8b5 	.word	0x0800f8b5
 800f810:	0800f8e9 	.word	0x0800f8e9
 800f814:	0800f91d 	.word	0x0800f91d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d00b      	beq.n	800f83c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	687a      	ldr	r2, [r7, #4]
 800f82e:	7c12      	ldrb	r2, [r2, #16]
 800f830:	f107 010a 	add.w	r1, r7, #10
 800f834:	4610      	mov	r0, r2
 800f836:	4798      	blx	r3
 800f838:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f83a:	e0b8      	b.n	800f9ae <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800f83c:	6839      	ldr	r1, [r7, #0]
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f000 faf1 	bl	800fe26 <USBD_CtlError>
            err++;
 800f844:	7cfb      	ldrb	r3, [r7, #19]
 800f846:	3301      	adds	r3, #1
 800f848:	74fb      	strb	r3, [r7, #19]
          break;
 800f84a:	e0b0      	b.n	800f9ae <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f852:	689b      	ldr	r3, [r3, #8]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d00b      	beq.n	800f870 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f85e:	689b      	ldr	r3, [r3, #8]
 800f860:	687a      	ldr	r2, [r7, #4]
 800f862:	7c12      	ldrb	r2, [r2, #16]
 800f864:	f107 010a 	add.w	r1, r7, #10
 800f868:	4610      	mov	r0, r2
 800f86a:	4798      	blx	r3
 800f86c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f86e:	e09e      	b.n	800f9ae <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800f870:	6839      	ldr	r1, [r7, #0]
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 fad7 	bl	800fe26 <USBD_CtlError>
            err++;
 800f878:	7cfb      	ldrb	r3, [r7, #19]
 800f87a:	3301      	adds	r3, #1
 800f87c:	74fb      	strb	r3, [r7, #19]
          break;
 800f87e:	e096      	b.n	800f9ae <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d00b      	beq.n	800f8a4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	7c12      	ldrb	r2, [r2, #16]
 800f898:	f107 010a 	add.w	r1, r7, #10
 800f89c:	4610      	mov	r0, r2
 800f89e:	4798      	blx	r3
 800f8a0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f8a2:	e084      	b.n	800f9ae <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800f8a4:	6839      	ldr	r1, [r7, #0]
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f000 fabd 	bl	800fe26 <USBD_CtlError>
            err++;
 800f8ac:	7cfb      	ldrb	r3, [r7, #19]
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	74fb      	strb	r3, [r7, #19]
          break;
 800f8b2:	e07c      	b.n	800f9ae <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8ba:	691b      	ldr	r3, [r3, #16]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d00b      	beq.n	800f8d8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8c6:	691b      	ldr	r3, [r3, #16]
 800f8c8:	687a      	ldr	r2, [r7, #4]
 800f8ca:	7c12      	ldrb	r2, [r2, #16]
 800f8cc:	f107 010a 	add.w	r1, r7, #10
 800f8d0:	4610      	mov	r0, r2
 800f8d2:	4798      	blx	r3
 800f8d4:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f8d6:	e06a      	b.n	800f9ae <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800f8d8:	6839      	ldr	r1, [r7, #0]
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f000 faa3 	bl	800fe26 <USBD_CtlError>
            err++;
 800f8e0:	7cfb      	ldrb	r3, [r7, #19]
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	74fb      	strb	r3, [r7, #19]
          break;
 800f8e6:	e062      	b.n	800f9ae <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8ee:	695b      	ldr	r3, [r3, #20]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d00b      	beq.n	800f90c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8fa:	695b      	ldr	r3, [r3, #20]
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	7c12      	ldrb	r2, [r2, #16]
 800f900:	f107 010a 	add.w	r1, r7, #10
 800f904:	4610      	mov	r0, r2
 800f906:	4798      	blx	r3
 800f908:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f90a:	e050      	b.n	800f9ae <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800f90c:	6839      	ldr	r1, [r7, #0]
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 fa89 	bl	800fe26 <USBD_CtlError>
            err++;
 800f914:	7cfb      	ldrb	r3, [r7, #19]
 800f916:	3301      	adds	r3, #1
 800f918:	74fb      	strb	r3, [r7, #19]
          break;
 800f91a:	e048      	b.n	800f9ae <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f922:	699b      	ldr	r3, [r3, #24]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d00b      	beq.n	800f940 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f92e:	699b      	ldr	r3, [r3, #24]
 800f930:	687a      	ldr	r2, [r7, #4]
 800f932:	7c12      	ldrb	r2, [r2, #16]
 800f934:	f107 010a 	add.w	r1, r7, #10
 800f938:	4610      	mov	r0, r2
 800f93a:	4798      	blx	r3
 800f93c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f93e:	e036      	b.n	800f9ae <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 800f940:	6839      	ldr	r1, [r7, #0]
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f000 fa6f 	bl	800fe26 <USBD_CtlError>
            err++;
 800f948:	7cfb      	ldrb	r3, [r7, #19]
 800f94a:	3301      	adds	r3, #1
 800f94c:	74fb      	strb	r3, [r7, #19]
          break;
 800f94e:	e02e      	b.n	800f9ae <USBD_GetDescriptor+0x2b6>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 800f950:	2300      	movs	r3, #0
 800f952:	617b      	str	r3, [r7, #20]

          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800f954:	2300      	movs	r3, #0
 800f956:	60fb      	str	r3, [r7, #12]
 800f958:	e020      	b.n	800f99c <USBD_GetDescriptor+0x2a4>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	68fa      	ldr	r2, [r7, #12]
 800f95e:	32ae      	adds	r2, #174	; 0xae
 800f960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f966:	2b00      	cmp	r3, #0
 800f968:	d015      	beq.n	800f996 <USBD_GetDescriptor+0x29e>
            {
              pdev->classId = idx;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	68fa      	ldr	r2, [r7, #12]
 800f96e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	68fa      	ldr	r2, [r7, #12]
 800f976:	32ae      	adds	r2, #174	; 0xae
 800f978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f97e:	683a      	ldr	r2, [r7, #0]
 800f980:	8852      	ldrh	r2, [r2, #2]
 800f982:	b2d1      	uxtb	r1, r2
 800f984:	f107 020a 	add.w	r2, r7, #10
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	4798      	blx	r3
 800f98c:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d10a      	bne.n	800f9aa <USBD_GetDescriptor+0x2b2>
              {
                continue;
 800f994:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	3301      	adds	r3, #1
 800f99a:	60fb      	str	r3, [r7, #12]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f9a2:	68fa      	ldr	r2, [r7, #12]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d3d8      	bcc.n	800f95a <USBD_GetDescriptor+0x262>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f9a8:	e000      	b.n	800f9ac <USBD_GetDescriptor+0x2b4>
                break;
 800f9aa:	bf00      	nop
          break;
 800f9ac:	bf00      	nop
      }
      break;
 800f9ae:	e037      	b.n	800fa20 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	7c1b      	ldrb	r3, [r3, #16]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d109      	bne.n	800f9cc <USBD_GetDescriptor+0x2d4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9c0:	f107 020a 	add.w	r2, r7, #10
 800f9c4:	4610      	mov	r0, r2
 800f9c6:	4798      	blx	r3
 800f9c8:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f9ca:	e029      	b.n	800fa20 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 800f9cc:	6839      	ldr	r1, [r7, #0]
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 fa29 	bl	800fe26 <USBD_CtlError>
        err++;
 800f9d4:	7cfb      	ldrb	r3, [r7, #19]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	74fb      	strb	r3, [r7, #19]
      break;
 800f9da:	e021      	b.n	800fa20 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	7c1b      	ldrb	r3, [r3, #16]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d10d      	bne.n	800fa00 <USBD_GetDescriptor+0x308>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9ec:	f107 020a 	add.w	r2, r7, #10
 800f9f0:	4610      	mov	r0, r2
 800f9f2:	4798      	blx	r3
 800f9f4:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	2207      	movs	r2, #7
 800f9fc:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f9fe:	e00f      	b.n	800fa20 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 800fa00:	6839      	ldr	r1, [r7, #0]
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f000 fa0f 	bl	800fe26 <USBD_CtlError>
        err++;
 800fa08:	7cfb      	ldrb	r3, [r7, #19]
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	74fb      	strb	r3, [r7, #19]
      break;
 800fa0e:	e007      	b.n	800fa20 <USBD_GetDescriptor+0x328>

    default:
      USBD_CtlError(pdev, req);
 800fa10:	6839      	ldr	r1, [r7, #0]
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 fa07 	bl	800fe26 <USBD_CtlError>
      err++;
 800fa18:	7cfb      	ldrb	r3, [r7, #19]
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	74fb      	strb	r3, [r7, #19]
      break;
 800fa1e:	bf00      	nop
  }

  if (err != 0U)
 800fa20:	7cfb      	ldrb	r3, [r7, #19]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d11e      	bne.n	800fa64 <USBD_GetDescriptor+0x36c>
  {
    return;
  }

  if (req->wLength != 0U)
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	88db      	ldrh	r3, [r3, #6]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d016      	beq.n	800fa5c <USBD_GetDescriptor+0x364>
  {
    if (len != 0U)
 800fa2e:	897b      	ldrh	r3, [r7, #10]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d00e      	beq.n	800fa52 <USBD_GetDescriptor+0x35a>
    {
      len = MIN(len, req->wLength);
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	88da      	ldrh	r2, [r3, #6]
 800fa38:	897b      	ldrh	r3, [r7, #10]
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	bf28      	it	cs
 800fa3e:	4613      	movcs	r3, r2
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fa44:	897b      	ldrh	r3, [r7, #10]
 800fa46:	461a      	mov	r2, r3
 800fa48:	6979      	ldr	r1, [r7, #20]
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 fa68 	bl	800ff20 <USBD_CtlSendData>
 800fa50:	e009      	b.n	800fa66 <USBD_GetDescriptor+0x36e>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fa52:	6839      	ldr	r1, [r7, #0]
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f000 f9e6 	bl	800fe26 <USBD_CtlError>
 800fa5a:	e004      	b.n	800fa66 <USBD_GetDescriptor+0x36e>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f000 fab9 	bl	800ffd4 <USBD_CtlSendStatus>
 800fa62:	e000      	b.n	800fa66 <USBD_GetDescriptor+0x36e>
    return;
 800fa64:	bf00      	nop
  }
}
 800fa66:	3718      	adds	r7, #24
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b084      	sub	sp, #16
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	889b      	ldrh	r3, [r3, #4]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d131      	bne.n	800fae2 <USBD_SetAddress+0x76>
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	88db      	ldrh	r3, [r3, #6]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d12d      	bne.n	800fae2 <USBD_SetAddress+0x76>
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	885b      	ldrh	r3, [r3, #2]
 800fa8a:	2b7f      	cmp	r3, #127	; 0x7f
 800fa8c:	d829      	bhi.n	800fae2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	885b      	ldrh	r3, [r3, #2]
 800fa92:	b2db      	uxtb	r3, r3
 800fa94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faa0:	b2db      	uxtb	r3, r3
 800faa2:	2b03      	cmp	r3, #3
 800faa4:	d104      	bne.n	800fab0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800faa6:	6839      	ldr	r1, [r7, #0]
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 f9bc 	bl	800fe26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800faae:	e01d      	b.n	800faec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	7bfa      	ldrb	r2, [r7, #15]
 800fab4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fab8:	7bfb      	ldrb	r3, [r7, #15]
 800faba:	4619      	mov	r1, r3
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 fe87 	bl	80107d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f000 fa86 	bl	800ffd4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fac8:	7bfb      	ldrb	r3, [r7, #15]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d004      	beq.n	800fad8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2202      	movs	r2, #2
 800fad2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fad6:	e009      	b.n	800faec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2201      	movs	r2, #1
 800fadc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fae0:	e004      	b.n	800faec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fae2:	6839      	ldr	r1, [r7, #0]
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f000 f99e 	bl	800fe26 <USBD_CtlError>
  }
}
 800faea:	bf00      	nop
 800faec:	bf00      	nop
 800faee:	3710      	adds	r7, #16
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fafe:	2300      	movs	r3, #0
 800fb00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	885b      	ldrh	r3, [r3, #2]
 800fb06:	b2da      	uxtb	r2, r3
 800fb08:	4b4e      	ldr	r3, [pc, #312]	; (800fc44 <USBD_SetConfig+0x150>)
 800fb0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fb0c:	4b4d      	ldr	r3, [pc, #308]	; (800fc44 <USBD_SetConfig+0x150>)
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	d905      	bls.n	800fb20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fb14:	6839      	ldr	r1, [r7, #0]
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 f985 	bl	800fe26 <USBD_CtlError>
    return USBD_FAIL;
 800fb1c:	2303      	movs	r3, #3
 800fb1e:	e08c      	b.n	800fc3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d002      	beq.n	800fb32 <USBD_SetConfig+0x3e>
 800fb2c:	2b03      	cmp	r3, #3
 800fb2e:	d029      	beq.n	800fb84 <USBD_SetConfig+0x90>
 800fb30:	e075      	b.n	800fc1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fb32:	4b44      	ldr	r3, [pc, #272]	; (800fc44 <USBD_SetConfig+0x150>)
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d020      	beq.n	800fb7c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fb3a:	4b42      	ldr	r3, [pc, #264]	; (800fc44 <USBD_SetConfig+0x150>)
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	461a      	mov	r2, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fb44:	4b3f      	ldr	r3, [pc, #252]	; (800fc44 <USBD_SetConfig+0x150>)
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	4619      	mov	r1, r3
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f7fe ffca 	bl	800eae4 <USBD_SetClassConfig>
 800fb50:	4603      	mov	r3, r0
 800fb52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fb54:	7bfb      	ldrb	r3, [r7, #15]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d008      	beq.n	800fb6c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fb5a:	6839      	ldr	r1, [r7, #0]
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f000 f962 	bl	800fe26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2202      	movs	r2, #2
 800fb66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fb6a:	e065      	b.n	800fc38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 fa31 	bl	800ffd4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2203      	movs	r2, #3
 800fb76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fb7a:	e05d      	b.n	800fc38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 fa29 	bl	800ffd4 <USBD_CtlSendStatus>
      break;
 800fb82:	e059      	b.n	800fc38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fb84:	4b2f      	ldr	r3, [pc, #188]	; (800fc44 <USBD_SetConfig+0x150>)
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d112      	bne.n	800fbb2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2202      	movs	r2, #2
 800fb90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fb94:	4b2b      	ldr	r3, [pc, #172]	; (800fc44 <USBD_SetConfig+0x150>)
 800fb96:	781b      	ldrb	r3, [r3, #0]
 800fb98:	461a      	mov	r2, r3
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fb9e:	4b29      	ldr	r3, [pc, #164]	; (800fc44 <USBD_SetConfig+0x150>)
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	4619      	mov	r1, r3
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f7fe ffb9 	bl	800eb1c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f000 fa12 	bl	800ffd4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fbb0:	e042      	b.n	800fc38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fbb2:	4b24      	ldr	r3, [pc, #144]	; (800fc44 <USBD_SetConfig+0x150>)
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	461a      	mov	r2, r3
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	685b      	ldr	r3, [r3, #4]
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d02a      	beq.n	800fc16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	b2db      	uxtb	r3, r3
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f7fe ffa7 	bl	800eb1c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fbce:	4b1d      	ldr	r3, [pc, #116]	; (800fc44 <USBD_SetConfig+0x150>)
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fbd8:	4b1a      	ldr	r3, [pc, #104]	; (800fc44 <USBD_SetConfig+0x150>)
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	4619      	mov	r1, r3
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f7fe ff80 	bl	800eae4 <USBD_SetClassConfig>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fbe8:	7bfb      	ldrb	r3, [r7, #15]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d00f      	beq.n	800fc0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fbee:	6839      	ldr	r1, [r7, #0]
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f000 f918 	bl	800fe26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f7fe ff8c 	bl	800eb1c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2202      	movs	r2, #2
 800fc08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fc0c:	e014      	b.n	800fc38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f000 f9e0 	bl	800ffd4 <USBD_CtlSendStatus>
      break;
 800fc14:	e010      	b.n	800fc38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f000 f9dc 	bl	800ffd4 <USBD_CtlSendStatus>
      break;
 800fc1c:	e00c      	b.n	800fc38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fc1e:	6839      	ldr	r1, [r7, #0]
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 f900 	bl	800fe26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fc26:	4b07      	ldr	r3, [pc, #28]	; (800fc44 <USBD_SetConfig+0x150>)
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f7fe ff75 	bl	800eb1c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fc32:	2303      	movs	r3, #3
 800fc34:	73fb      	strb	r3, [r7, #15]
      break;
 800fc36:	bf00      	nop
  }

  return ret;
 800fc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	2400b9ef 	.word	0x2400b9ef

0800fc48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	88db      	ldrh	r3, [r3, #6]
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d004      	beq.n	800fc64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fc5a:	6839      	ldr	r1, [r7, #0]
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f000 f8e2 	bl	800fe26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fc62:	e023      	b.n	800fcac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	2b02      	cmp	r3, #2
 800fc6e:	dc02      	bgt.n	800fc76 <USBD_GetConfig+0x2e>
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	dc03      	bgt.n	800fc7c <USBD_GetConfig+0x34>
 800fc74:	e015      	b.n	800fca2 <USBD_GetConfig+0x5a>
 800fc76:	2b03      	cmp	r3, #3
 800fc78:	d00b      	beq.n	800fc92 <USBD_GetConfig+0x4a>
 800fc7a:	e012      	b.n	800fca2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	3308      	adds	r3, #8
 800fc86:	2201      	movs	r2, #1
 800fc88:	4619      	mov	r1, r3
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f000 f948 	bl	800ff20 <USBD_CtlSendData>
        break;
 800fc90:	e00c      	b.n	800fcac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	3304      	adds	r3, #4
 800fc96:	2201      	movs	r2, #1
 800fc98:	4619      	mov	r1, r3
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f000 f940 	bl	800ff20 <USBD_CtlSendData>
        break;
 800fca0:	e004      	b.n	800fcac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fca2:	6839      	ldr	r1, [r7, #0]
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f000 f8be 	bl	800fe26 <USBD_CtlError>
        break;
 800fcaa:	bf00      	nop
}
 800fcac:	bf00      	nop
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	3b01      	subs	r3, #1
 800fcc8:	2b02      	cmp	r3, #2
 800fcca:	d81e      	bhi.n	800fd0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	88db      	ldrh	r3, [r3, #6]
 800fcd0:	2b02      	cmp	r3, #2
 800fcd2:	d004      	beq.n	800fcde <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fcd4:	6839      	ldr	r1, [r7, #0]
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 f8a5 	bl	800fe26 <USBD_CtlError>
        break;
 800fcdc:	e01a      	b.n	800fd14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2201      	movs	r2, #1
 800fce2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d005      	beq.n	800fcfa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	68db      	ldr	r3, [r3, #12]
 800fcf2:	f043 0202 	orr.w	r2, r3, #2
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	330c      	adds	r3, #12
 800fcfe:	2202      	movs	r2, #2
 800fd00:	4619      	mov	r1, r3
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f000 f90c 	bl	800ff20 <USBD_CtlSendData>
      break;
 800fd08:	e004      	b.n	800fd14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fd0a:	6839      	ldr	r1, [r7, #0]
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f000 f88a 	bl	800fe26 <USBD_CtlError>
      break;
 800fd12:	bf00      	nop
  }
}
 800fd14:	bf00      	nop
 800fd16:	3708      	adds	r7, #8
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}

0800fd1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	885b      	ldrh	r3, [r3, #2]
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d107      	bne.n	800fd3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2201      	movs	r2, #1
 800fd32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 f94c 	bl	800ffd4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fd3c:	e013      	b.n	800fd66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	885b      	ldrh	r3, [r3, #2]
 800fd42:	2b02      	cmp	r3, #2
 800fd44:	d10b      	bne.n	800fd5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	889b      	ldrh	r3, [r3, #4]
 800fd4a:	0a1b      	lsrs	r3, r3, #8
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	b2da      	uxtb	r2, r3
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 f93c 	bl	800ffd4 <USBD_CtlSendStatus>
}
 800fd5c:	e003      	b.n	800fd66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fd5e:	6839      	ldr	r1, [r7, #0]
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 f860 	bl	800fe26 <USBD_CtlError>
}
 800fd66:	bf00      	nop
 800fd68:	3708      	adds	r7, #8
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}

0800fd6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b082      	sub	sp, #8
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	6078      	str	r0, [r7, #4]
 800fd76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	3b01      	subs	r3, #1
 800fd82:	2b02      	cmp	r3, #2
 800fd84:	d80b      	bhi.n	800fd9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	885b      	ldrh	r3, [r3, #2]
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	d10c      	bne.n	800fda8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2200      	movs	r2, #0
 800fd92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 f91c 	bl	800ffd4 <USBD_CtlSendStatus>
      }
      break;
 800fd9c:	e004      	b.n	800fda8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fd9e:	6839      	ldr	r1, [r7, #0]
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 f840 	bl	800fe26 <USBD_CtlError>
      break;
 800fda6:	e000      	b.n	800fdaa <USBD_ClrFeature+0x3c>
      break;
 800fda8:	bf00      	nop
  }
}
 800fdaa:	bf00      	nop
 800fdac:	3708      	adds	r7, #8
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b084      	sub	sp, #16
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
 800fdba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	781a      	ldrb	r2, [r3, #0]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	781a      	ldrb	r2, [r3, #0]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	3301      	adds	r3, #1
 800fdda:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fddc:	68f8      	ldr	r0, [r7, #12]
 800fdde:	f7ff f9f0 	bl	800f1c2 <SWAPBYTE>
 800fde2:	4603      	mov	r3, r0
 800fde4:	461a      	mov	r2, r3
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	3301      	adds	r3, #1
 800fdee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fdf6:	68f8      	ldr	r0, [r7, #12]
 800fdf8:	f7ff f9e3 	bl	800f1c2 <SWAPBYTE>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	461a      	mov	r2, r3
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	3301      	adds	r3, #1
 800fe08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	3301      	adds	r3, #1
 800fe0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fe10:	68f8      	ldr	r0, [r7, #12]
 800fe12:	f7ff f9d6 	bl	800f1c2 <SWAPBYTE>
 800fe16:	4603      	mov	r3, r0
 800fe18:	461a      	mov	r2, r3
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	80da      	strh	r2, [r3, #6]
}
 800fe1e:	bf00      	nop
 800fe20:	3710      	adds	r7, #16
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}

0800fe26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe26:	b580      	push	{r7, lr}
 800fe28:	b082      	sub	sp, #8
 800fe2a:	af00      	add	r7, sp, #0
 800fe2c:	6078      	str	r0, [r7, #4]
 800fe2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fe30:	2180      	movs	r1, #128	; 0x80
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 fc62 	bl	80106fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fe38:	2100      	movs	r1, #0
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f000 fc5e 	bl	80106fc <USBD_LL_StallEP>
}
 800fe40:	bf00      	nop
 800fe42:	3708      	adds	r7, #8
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b086      	sub	sp, #24
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	60f8      	str	r0, [r7, #12]
 800fe50:	60b9      	str	r1, [r7, #8]
 800fe52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fe54:	2300      	movs	r3, #0
 800fe56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d042      	beq.n	800fee4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800fe62:	6938      	ldr	r0, [r7, #16]
 800fe64:	f000 f842 	bl	800feec <USBD_GetLen>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	3301      	adds	r3, #1
 800fe6c:	005b      	lsls	r3, r3, #1
 800fe6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe72:	d808      	bhi.n	800fe86 <USBD_GetString+0x3e>
 800fe74:	6938      	ldr	r0, [r7, #16]
 800fe76:	f000 f839 	bl	800feec <USBD_GetLen>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	3301      	adds	r3, #1
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	005b      	lsls	r3, r3, #1
 800fe82:	b29a      	uxth	r2, r3
 800fe84:	e001      	b.n	800fe8a <USBD_GetString+0x42>
 800fe86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fe8e:	7dfb      	ldrb	r3, [r7, #23]
 800fe90:	68ba      	ldr	r2, [r7, #8]
 800fe92:	4413      	add	r3, r2
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	7812      	ldrb	r2, [r2, #0]
 800fe98:	701a      	strb	r2, [r3, #0]
  idx++;
 800fe9a:	7dfb      	ldrb	r3, [r7, #23]
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fea0:	7dfb      	ldrb	r3, [r7, #23]
 800fea2:	68ba      	ldr	r2, [r7, #8]
 800fea4:	4413      	add	r3, r2
 800fea6:	2203      	movs	r2, #3
 800fea8:	701a      	strb	r2, [r3, #0]
  idx++;
 800feaa:	7dfb      	ldrb	r3, [r7, #23]
 800feac:	3301      	adds	r3, #1
 800feae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800feb0:	e013      	b.n	800feda <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800feb2:	7dfb      	ldrb	r3, [r7, #23]
 800feb4:	68ba      	ldr	r2, [r7, #8]
 800feb6:	4413      	add	r3, r2
 800feb8:	693a      	ldr	r2, [r7, #16]
 800feba:	7812      	ldrb	r2, [r2, #0]
 800febc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800febe:	693b      	ldr	r3, [r7, #16]
 800fec0:	3301      	adds	r3, #1
 800fec2:	613b      	str	r3, [r7, #16]
    idx++;
 800fec4:	7dfb      	ldrb	r3, [r7, #23]
 800fec6:	3301      	adds	r3, #1
 800fec8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800feca:	7dfb      	ldrb	r3, [r7, #23]
 800fecc:	68ba      	ldr	r2, [r7, #8]
 800fece:	4413      	add	r3, r2
 800fed0:	2200      	movs	r2, #0
 800fed2:	701a      	strb	r2, [r3, #0]
    idx++;
 800fed4:	7dfb      	ldrb	r3, [r7, #23]
 800fed6:	3301      	adds	r3, #1
 800fed8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d1e7      	bne.n	800feb2 <USBD_GetString+0x6a>
 800fee2:	e000      	b.n	800fee6 <USBD_GetString+0x9e>
    return;
 800fee4:	bf00      	nop
  }
}
 800fee6:	3718      	adds	r7, #24
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800feec:	b480      	push	{r7}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fef4:	2300      	movs	r3, #0
 800fef6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fefc:	e005      	b.n	800ff0a <USBD_GetLen+0x1e>
  {
    len++;
 800fefe:	7bfb      	ldrb	r3, [r7, #15]
 800ff00:	3301      	adds	r3, #1
 800ff02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	3301      	adds	r3, #1
 800ff08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d1f5      	bne.n	800fefe <USBD_GetLen+0x12>
  }

  return len;
 800ff12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3714      	adds	r7, #20
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b084      	sub	sp, #16
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	60f8      	str	r0, [r7, #12]
 800ff28:	60b9      	str	r1, [r7, #8]
 800ff2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2202      	movs	r2, #2
 800ff30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	687a      	ldr	r2, [r7, #4]
 800ff3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	68ba      	ldr	r2, [r7, #8]
 800ff44:	2100      	movs	r1, #0
 800ff46:	68f8      	ldr	r0, [r7, #12]
 800ff48:	f000 fc61 	bl	801080e <USBD_LL_Transmit>

  return USBD_OK;
 800ff4c:	2300      	movs	r3, #0
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3710      	adds	r7, #16
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}

0800ff56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ff56:	b580      	push	{r7, lr}
 800ff58:	b084      	sub	sp, #16
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	60f8      	str	r0, [r7, #12]
 800ff5e:	60b9      	str	r1, [r7, #8]
 800ff60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	68ba      	ldr	r2, [r7, #8]
 800ff66:	2100      	movs	r1, #0
 800ff68:	68f8      	ldr	r0, [r7, #12]
 800ff6a:	f000 fc50 	bl	801080e <USBD_LL_Transmit>

  return USBD_OK;
 800ff6e:	2300      	movs	r3, #0
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3710      	adds	r7, #16
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2203      	movs	r2, #3
 800ff88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	687a      	ldr	r2, [r7, #4]
 800ff90:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	687a      	ldr	r2, [r7, #4]
 800ff98:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	68ba      	ldr	r2, [r7, #8]
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	68f8      	ldr	r0, [r7, #12]
 800ffa4:	f000 fc54 	bl	8010850 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ffa8:	2300      	movs	r3, #0
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3710      	adds	r7, #16
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}

0800ffb2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ffb2:	b580      	push	{r7, lr}
 800ffb4:	b084      	sub	sp, #16
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	60f8      	str	r0, [r7, #12]
 800ffba:	60b9      	str	r1, [r7, #8]
 800ffbc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	68ba      	ldr	r2, [r7, #8]
 800ffc2:	2100      	movs	r1, #0
 800ffc4:	68f8      	ldr	r0, [r7, #12]
 800ffc6:	f000 fc43 	bl	8010850 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ffca:	2300      	movs	r3, #0
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3710      	adds	r7, #16
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2204      	movs	r2, #4
 800ffe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	2100      	movs	r1, #0
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 fc0f 	bl	801080e <USBD_LL_Transmit>

  return USBD_OK;
 800fff0:	2300      	movs	r3, #0
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	3708      	adds	r7, #8
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}

0800fffa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fffa:	b580      	push	{r7, lr}
 800fffc:	b082      	sub	sp, #8
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2205      	movs	r2, #5
 8010006:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801000a:	2300      	movs	r3, #0
 801000c:	2200      	movs	r2, #0
 801000e:	2100      	movs	r1, #0
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f000 fc1d 	bl	8010850 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010016:	2300      	movs	r3, #0
}
 8010018:	4618      	mov	r0, r3
 801001a:	3708      	adds	r7, #8
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8010024:	2201      	movs	r2, #1
 8010026:	4913      	ldr	r1, [pc, #76]	; (8010074 <MX_USB_DEVICE_Init+0x54>)
 8010028:	4813      	ldr	r0, [pc, #76]	; (8010078 <MX_USB_DEVICE_Init+0x58>)
 801002a:	f7fe fca7 	bl	800e97c <USBD_Init>
 801002e:	4603      	mov	r3, r0
 8010030:	2b00      	cmp	r3, #0
 8010032:	d001      	beq.n	8010038 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010034:	f7f1 ffd3 	bl	8001fde <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_DFU) != USBD_OK)
 8010038:	4910      	ldr	r1, [pc, #64]	; (801007c <MX_USB_DEVICE_Init+0x5c>)
 801003a:	480f      	ldr	r0, [pc, #60]	; (8010078 <MX_USB_DEVICE_Init+0x58>)
 801003c:	f7fe fcdc 	bl	800e9f8 <USBD_RegisterClass>
 8010040:	4603      	mov	r3, r0
 8010042:	2b00      	cmp	r3, #0
 8010044:	d001      	beq.n	801004a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010046:	f7f1 ffca 	bl	8001fde <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceHS, &USBD_DFU_fops_HS) != USBD_OK)
 801004a:	490d      	ldr	r1, [pc, #52]	; (8010080 <MX_USB_DEVICE_Init+0x60>)
 801004c:	480a      	ldr	r0, [pc, #40]	; (8010078 <MX_USB_DEVICE_Init+0x58>)
 801004e:	f7fe f863 	bl	800e118 <USBD_DFU_RegisterMedia>
 8010052:	4603      	mov	r3, r0
 8010054:	2b00      	cmp	r3, #0
 8010056:	d001      	beq.n	801005c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010058:	f7f1 ffc1 	bl	8001fde <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801005c:	4806      	ldr	r0, [pc, #24]	; (8010078 <MX_USB_DEVICE_Init+0x58>)
 801005e:	f7fe fd0f 	bl	800ea80 <USBD_Start>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	d001      	beq.n	801006c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010068:	f7f1 ffb9 	bl	8001fde <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801006c:	f7f7 fa78 	bl	8007560 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010070:	bf00      	nop
 8010072:	bd80      	pop	{r7, pc}
 8010074:	24000404 	.word	0x24000404
 8010078:	2400b9f0 	.word	0x2400b9f0
 801007c:	240003a0 	.word	0x240003a0
 8010080:	24000458 	.word	0x24000458

08010084 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
 801008a:	4603      	mov	r3, r0
 801008c:	6039      	str	r1, [r7, #0]
 801008e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	2212      	movs	r2, #18
 8010094:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8010096:	4b03      	ldr	r3, [pc, #12]	; (80100a4 <USBD_HS_DeviceDescriptor+0x20>)
}
 8010098:	4618      	mov	r0, r3
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr
 80100a4:	24000424 	.word	0x24000424

080100a8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100a8:	b480      	push	{r7}
 80100aa:	b083      	sub	sp, #12
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	4603      	mov	r3, r0
 80100b0:	6039      	str	r1, [r7, #0]
 80100b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	2204      	movs	r2, #4
 80100b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80100ba:	4b03      	ldr	r3, [pc, #12]	; (80100c8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80100bc:	4618      	mov	r0, r3
 80100be:	370c      	adds	r7, #12
 80100c0:	46bd      	mov	sp, r7
 80100c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c6:	4770      	bx	lr
 80100c8:	24000438 	.word	0x24000438

080100cc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b082      	sub	sp, #8
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	4603      	mov	r3, r0
 80100d4:	6039      	str	r1, [r7, #0]
 80100d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80100d8:	79fb      	ldrb	r3, [r7, #7]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d105      	bne.n	80100ea <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80100de:	683a      	ldr	r2, [r7, #0]
 80100e0:	4907      	ldr	r1, [pc, #28]	; (8010100 <USBD_HS_ProductStrDescriptor+0x34>)
 80100e2:	4808      	ldr	r0, [pc, #32]	; (8010104 <USBD_HS_ProductStrDescriptor+0x38>)
 80100e4:	f7ff feb0 	bl	800fe48 <USBD_GetString>
 80100e8:	e004      	b.n	80100f4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80100ea:	683a      	ldr	r2, [r7, #0]
 80100ec:	4904      	ldr	r1, [pc, #16]	; (8010100 <USBD_HS_ProductStrDescriptor+0x34>)
 80100ee:	4805      	ldr	r0, [pc, #20]	; (8010104 <USBD_HS_ProductStrDescriptor+0x38>)
 80100f0:	f7ff feaa 	bl	800fe48 <USBD_GetString>
  }
  return USBD_StrDesc;
 80100f4:	4b02      	ldr	r3, [pc, #8]	; (8010100 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80100f6:	4618      	mov	r0, r3
 80100f8:	3708      	adds	r7, #8
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}
 80100fe:	bf00      	nop
 8010100:	2400bccc 	.word	0x2400bccc
 8010104:	08012b60 	.word	0x08012b60

08010108 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
 801010e:	4603      	mov	r3, r0
 8010110:	6039      	str	r1, [r7, #0]
 8010112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010114:	683a      	ldr	r2, [r7, #0]
 8010116:	4904      	ldr	r1, [pc, #16]	; (8010128 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8010118:	4804      	ldr	r0, [pc, #16]	; (801012c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801011a:	f7ff fe95 	bl	800fe48 <USBD_GetString>
  return USBD_StrDesc;
 801011e:	4b02      	ldr	r3, [pc, #8]	; (8010128 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8010120:	4618      	mov	r0, r3
 8010122:	3708      	adds	r7, #8
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}
 8010128:	2400bccc 	.word	0x2400bccc
 801012c:	08012b80 	.word	0x08012b80

08010130 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	4603      	mov	r3, r0
 8010138:	6039      	str	r1, [r7, #0]
 801013a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	221a      	movs	r2, #26
 8010140:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010142:	f000 f843 	bl	80101cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010146:	4b02      	ldr	r3, [pc, #8]	; (8010150 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8010148:	4618      	mov	r0, r3
 801014a:	3708      	adds	r7, #8
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	2400043c 	.word	0x2400043c

08010154 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	4603      	mov	r3, r0
 801015c:	6039      	str	r1, [r7, #0]
 801015e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010160:	79fb      	ldrb	r3, [r7, #7]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d105      	bne.n	8010172 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010166:	683a      	ldr	r2, [r7, #0]
 8010168:	4907      	ldr	r1, [pc, #28]	; (8010188 <USBD_HS_ConfigStrDescriptor+0x34>)
 801016a:	4808      	ldr	r0, [pc, #32]	; (801018c <USBD_HS_ConfigStrDescriptor+0x38>)
 801016c:	f7ff fe6c 	bl	800fe48 <USBD_GetString>
 8010170:	e004      	b.n	801017c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010172:	683a      	ldr	r2, [r7, #0]
 8010174:	4904      	ldr	r1, [pc, #16]	; (8010188 <USBD_HS_ConfigStrDescriptor+0x34>)
 8010176:	4805      	ldr	r0, [pc, #20]	; (801018c <USBD_HS_ConfigStrDescriptor+0x38>)
 8010178:	f7ff fe66 	bl	800fe48 <USBD_GetString>
  }
  return USBD_StrDesc;
 801017c:	4b02      	ldr	r3, [pc, #8]	; (8010188 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801017e:	4618      	mov	r0, r3
 8010180:	3708      	adds	r7, #8
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
 8010186:	bf00      	nop
 8010188:	2400bccc 	.word	0x2400bccc
 801018c:	08012b94 	.word	0x08012b94

08010190 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b082      	sub	sp, #8
 8010194:	af00      	add	r7, sp, #0
 8010196:	4603      	mov	r3, r0
 8010198:	6039      	str	r1, [r7, #0]
 801019a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801019c:	79fb      	ldrb	r3, [r7, #7]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d105      	bne.n	80101ae <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80101a2:	683a      	ldr	r2, [r7, #0]
 80101a4:	4907      	ldr	r1, [pc, #28]	; (80101c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80101a6:	4808      	ldr	r0, [pc, #32]	; (80101c8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80101a8:	f7ff fe4e 	bl	800fe48 <USBD_GetString>
 80101ac:	e004      	b.n	80101b8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80101ae:	683a      	ldr	r2, [r7, #0]
 80101b0:	4904      	ldr	r1, [pc, #16]	; (80101c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80101b2:	4805      	ldr	r0, [pc, #20]	; (80101c8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80101b4:	f7ff fe48 	bl	800fe48 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101b8:	4b02      	ldr	r3, [pc, #8]	; (80101c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3708      	adds	r7, #8
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	2400bccc 	.word	0x2400bccc
 80101c8:	08012ba0 	.word	0x08012ba0

080101cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b084      	sub	sp, #16
 80101d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80101d2:	4b0f      	ldr	r3, [pc, #60]	; (8010210 <Get_SerialNum+0x44>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80101d8:	4b0e      	ldr	r3, [pc, #56]	; (8010214 <Get_SerialNum+0x48>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80101de:	4b0e      	ldr	r3, [pc, #56]	; (8010218 <Get_SerialNum+0x4c>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80101e4:	68fa      	ldr	r2, [r7, #12]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	4413      	add	r3, r2
 80101ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d009      	beq.n	8010206 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80101f2:	2208      	movs	r2, #8
 80101f4:	4909      	ldr	r1, [pc, #36]	; (801021c <Get_SerialNum+0x50>)
 80101f6:	68f8      	ldr	r0, [r7, #12]
 80101f8:	f000 f814 	bl	8010224 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80101fc:	2204      	movs	r2, #4
 80101fe:	4908      	ldr	r1, [pc, #32]	; (8010220 <Get_SerialNum+0x54>)
 8010200:	68b8      	ldr	r0, [r7, #8]
 8010202:	f000 f80f 	bl	8010224 <IntToUnicode>
  }
}
 8010206:	bf00      	nop
 8010208:	3710      	adds	r7, #16
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
 801020e:	bf00      	nop
 8010210:	1ff1e800 	.word	0x1ff1e800
 8010214:	1ff1e804 	.word	0x1ff1e804
 8010218:	1ff1e808 	.word	0x1ff1e808
 801021c:	2400043e 	.word	0x2400043e
 8010220:	2400044e 	.word	0x2400044e

08010224 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010224:	b480      	push	{r7}
 8010226:	b087      	sub	sp, #28
 8010228:	af00      	add	r7, sp, #0
 801022a:	60f8      	str	r0, [r7, #12]
 801022c:	60b9      	str	r1, [r7, #8]
 801022e:	4613      	mov	r3, r2
 8010230:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010232:	2300      	movs	r3, #0
 8010234:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010236:	2300      	movs	r3, #0
 8010238:	75fb      	strb	r3, [r7, #23]
 801023a:	e027      	b.n	801028c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	0f1b      	lsrs	r3, r3, #28
 8010240:	2b09      	cmp	r3, #9
 8010242:	d80b      	bhi.n	801025c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	0f1b      	lsrs	r3, r3, #28
 8010248:	b2da      	uxtb	r2, r3
 801024a:	7dfb      	ldrb	r3, [r7, #23]
 801024c:	005b      	lsls	r3, r3, #1
 801024e:	4619      	mov	r1, r3
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	440b      	add	r3, r1
 8010254:	3230      	adds	r2, #48	; 0x30
 8010256:	b2d2      	uxtb	r2, r2
 8010258:	701a      	strb	r2, [r3, #0]
 801025a:	e00a      	b.n	8010272 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	0f1b      	lsrs	r3, r3, #28
 8010260:	b2da      	uxtb	r2, r3
 8010262:	7dfb      	ldrb	r3, [r7, #23]
 8010264:	005b      	lsls	r3, r3, #1
 8010266:	4619      	mov	r1, r3
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	440b      	add	r3, r1
 801026c:	3237      	adds	r2, #55	; 0x37
 801026e:	b2d2      	uxtb	r2, r2
 8010270:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	011b      	lsls	r3, r3, #4
 8010276:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010278:	7dfb      	ldrb	r3, [r7, #23]
 801027a:	005b      	lsls	r3, r3, #1
 801027c:	3301      	adds	r3, #1
 801027e:	68ba      	ldr	r2, [r7, #8]
 8010280:	4413      	add	r3, r2
 8010282:	2200      	movs	r2, #0
 8010284:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010286:	7dfb      	ldrb	r3, [r7, #23]
 8010288:	3301      	adds	r3, #1
 801028a:	75fb      	strb	r3, [r7, #23]
 801028c:	7dfa      	ldrb	r2, [r7, #23]
 801028e:	79fb      	ldrb	r3, [r7, #7]
 8010290:	429a      	cmp	r2, r3
 8010292:	d3d3      	bcc.n	801023c <IntToUnicode+0x18>
  }
}
 8010294:	bf00      	nop
 8010296:	bf00      	nop
 8010298:	371c      	adds	r7, #28
 801029a:	46bd      	mov	sp, r7
 801029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a0:	4770      	bx	lr

080102a2 <MEM_If_Init_HS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_HS(void)
{
 80102a2:	b480      	push	{r7}
 80102a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80102a6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr

080102b2 <MEM_If_DeInit_HS>:
/**
  * @brief  De-Initializes Memory.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_DeInit_HS(void)
{
 80102b2:	b480      	push	{r7}
 80102b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80102b6:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	46bd      	mov	sp, r7
 80102bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c0:	4770      	bx	lr

080102c2 <MEM_If_Erase_HS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_HS(uint32_t Add)
{
 80102c2:	b480      	push	{r7}
 80102c4:	b083      	sub	sp, #12
 80102c6:	af00      	add	r7, sp, #0
 80102c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 8 */
  UNUSED(Add);

  return (USBD_OK);
 80102ca:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	370c      	adds	r7, #12
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr

080102d8 <MEM_If_Write_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80102d8:	b480      	push	{r7}
 80102da:	b085      	sub	sp, #20
 80102dc:	af00      	add	r7, sp, #0
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 9 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (USBD_OK);
 80102e4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3714      	adds	r7, #20
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr

080102f2 <MEM_If_Read_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80102f2:	b480      	push	{r7}
 80102f4:	b085      	sub	sp, #20
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	60f8      	str	r0, [r7, #12]
 80102fa:	60b9      	str	r1, [r7, #8]
 80102fc:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 10 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (uint8_t*)(USBD_OK);
 80102fe:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8010300:	4618      	mov	r0, r3
 8010302:	3714      	adds	r7, #20
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr

0801030c <MEM_If_GetStatus_HS>:
  * @param  Cmd: Number of data to be read (in bytes).
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval 0 if operation is successful
  */
uint16_t MEM_If_GetStatus_HS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 801030c:	b480      	push	{r7}
 801030e:	b085      	sub	sp, #20
 8010310:	af00      	add	r7, sp, #0
 8010312:	60f8      	str	r0, [r7, #12]
 8010314:	460b      	mov	r3, r1
 8010316:	607a      	str	r2, [r7, #4]
 8010318:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 11 */
  UNUSED(Add);
  UNUSED(buffer);

  switch(Cmd)
 801031a:	7afb      	ldrb	r3, [r7, #11]
 801031c:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 801031e:	bf00      	nop
  }
  return  (USBD_OK);
 8010320:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8010322:	4618      	mov	r0, r3
 8010324:	3714      	adds	r7, #20
 8010326:	46bd      	mov	sp, r7
 8010328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032c:	4770      	bx	lr
	...

08010330 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b0b2      	sub	sp, #200	; 0xc8
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010338:	f107 0310 	add.w	r3, r7, #16
 801033c:	22b8      	movs	r2, #184	; 0xb8
 801033e:	2100      	movs	r1, #0
 8010340:	4618      	mov	r0, r3
 8010342:	f000 ff80 	bl	8011246 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4a1a      	ldr	r2, [pc, #104]	; (80103b4 <HAL_PCD_MspInit+0x84>)
 801034c:	4293      	cmp	r3, r2
 801034e:	d12c      	bne.n	80103aa <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010350:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8010354:	f04f 0300 	mov.w	r3, #0
 8010358:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801035c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8010360:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010364:	f107 0310 	add.w	r3, r7, #16
 8010368:	4618      	mov	r0, r3
 801036a:	f7f8 f859 	bl	8008420 <HAL_RCCEx_PeriphCLKConfig>
 801036e:	4603      	mov	r3, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	d001      	beq.n	8010378 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8010374:	f7f1 fe33 	bl	8001fde <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010378:	f7f7 f8f2 	bl	8007560 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801037c:	4b0e      	ldr	r3, [pc, #56]	; (80103b8 <HAL_PCD_MspInit+0x88>)
 801037e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010382:	4a0d      	ldr	r2, [pc, #52]	; (80103b8 <HAL_PCD_MspInit+0x88>)
 8010384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010388:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801038c:	4b0a      	ldr	r3, [pc, #40]	; (80103b8 <HAL_PCD_MspInit+0x88>)
 801038e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010396:	60fb      	str	r3, [r7, #12]
 8010398:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801039a:	2200      	movs	r2, #0
 801039c:	2100      	movs	r1, #0
 801039e:	204d      	movs	r0, #77	; 0x4d
 80103a0:	f7f2 fcaf 	bl	8002d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80103a4:	204d      	movs	r0, #77	; 0x4d
 80103a6:	f7f2 fcc6 	bl	8002d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80103aa:	bf00      	nop
 80103ac:	37c8      	adds	r7, #200	; 0xc8
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	40040000 	.word	0x40040000
 80103b8:	58024400 	.word	0x58024400

080103bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80103d0:	4619      	mov	r1, r3
 80103d2:	4610      	mov	r0, r2
 80103d4:	f7fe fbbc 	bl	800eb50 <USBD_LL_SetupStage>
}
 80103d8:	bf00      	nop
 80103da:	3708      	adds	r7, #8
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b082      	sub	sp, #8
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	460b      	mov	r3, r1
 80103ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80103f2:	78fa      	ldrb	r2, [r7, #3]
 80103f4:	6879      	ldr	r1, [r7, #4]
 80103f6:	4613      	mov	r3, r2
 80103f8:	00db      	lsls	r3, r3, #3
 80103fa:	4413      	add	r3, r2
 80103fc:	009b      	lsls	r3, r3, #2
 80103fe:	440b      	add	r3, r1
 8010400:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010404:	681a      	ldr	r2, [r3, #0]
 8010406:	78fb      	ldrb	r3, [r7, #3]
 8010408:	4619      	mov	r1, r3
 801040a:	f7fe fbf6 	bl	800ebfa <USBD_LL_DataOutStage>
}
 801040e:	bf00      	nop
 8010410:	3708      	adds	r7, #8
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}

08010416 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010416:	b580      	push	{r7, lr}
 8010418:	b082      	sub	sp, #8
 801041a:	af00      	add	r7, sp, #0
 801041c:	6078      	str	r0, [r7, #4]
 801041e:	460b      	mov	r3, r1
 8010420:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8010428:	78fa      	ldrb	r2, [r7, #3]
 801042a:	6879      	ldr	r1, [r7, #4]
 801042c:	4613      	mov	r3, r2
 801042e:	00db      	lsls	r3, r3, #3
 8010430:	4413      	add	r3, r2
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	440b      	add	r3, r1
 8010436:	3320      	adds	r3, #32
 8010438:	681a      	ldr	r2, [r3, #0]
 801043a:	78fb      	ldrb	r3, [r7, #3]
 801043c:	4619      	mov	r1, r3
 801043e:	f7fe fc8f 	bl	800ed60 <USBD_LL_DataInStage>
}
 8010442:	bf00      	nop
 8010444:	3708      	adds	r7, #8
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}

0801044a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b082      	sub	sp, #8
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010458:	4618      	mov	r0, r3
 801045a:	f7fe fdc9 	bl	800eff0 <USBD_LL_SOF>
}
 801045e:	bf00      	nop
 8010460:	3708      	adds	r7, #8
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}

08010466 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b084      	sub	sp, #16
 801046a:	af00      	add	r7, sp, #0
 801046c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801046e:	2301      	movs	r3, #1
 8010470:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	79db      	ldrb	r3, [r3, #7]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d102      	bne.n	8010480 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801047a:	2300      	movs	r3, #0
 801047c:	73fb      	strb	r3, [r7, #15]
 801047e:	e008      	b.n	8010492 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	79db      	ldrb	r3, [r3, #7]
 8010484:	2b02      	cmp	r3, #2
 8010486:	d102      	bne.n	801048e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010488:	2301      	movs	r3, #1
 801048a:	73fb      	strb	r3, [r7, #15]
 801048c:	e001      	b.n	8010492 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801048e:	f7f1 fda6 	bl	8001fde <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010498:	7bfa      	ldrb	r2, [r7, #15]
 801049a:	4611      	mov	r1, r2
 801049c:	4618      	mov	r0, r3
 801049e:	f7fe fd63 	bl	800ef68 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7fe fd0b 	bl	800eec4 <USBD_LL_Reset>
}
 80104ae:	bf00      	nop
 80104b0:	3710      	adds	r7, #16
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
	...

080104b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7fe fd5e 	bl	800ef88 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	687a      	ldr	r2, [r7, #4]
 80104d8:	6812      	ldr	r2, [r2, #0]
 80104da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80104de:	f043 0301 	orr.w	r3, r3, #1
 80104e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	7adb      	ldrb	r3, [r3, #11]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d005      	beq.n	80104f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80104ec:	4b04      	ldr	r3, [pc, #16]	; (8010500 <HAL_PCD_SuspendCallback+0x48>)
 80104ee:	691b      	ldr	r3, [r3, #16]
 80104f0:	4a03      	ldr	r2, [pc, #12]	; (8010500 <HAL_PCD_SuspendCallback+0x48>)
 80104f2:	f043 0306 	orr.w	r3, r3, #6
 80104f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80104f8:	bf00      	nop
 80104fa:	3708      	adds	r7, #8
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	e000ed00 	.word	0xe000ed00

08010504 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b082      	sub	sp, #8
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010512:	4618      	mov	r0, r3
 8010514:	f7fe fd54 	bl	800efc0 <USBD_LL_Resume>
}
 8010518:	bf00      	nop
 801051a:	3708      	adds	r7, #8
 801051c:	46bd      	mov	sp, r7
 801051e:	bd80      	pop	{r7, pc}

08010520 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b082      	sub	sp, #8
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	460b      	mov	r3, r1
 801052a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010532:	78fa      	ldrb	r2, [r7, #3]
 8010534:	4611      	mov	r1, r2
 8010536:	4618      	mov	r0, r3
 8010538:	f7fe fdac 	bl	800f094 <USBD_LL_IsoOUTIncomplete>
}
 801053c:	bf00      	nop
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	460b      	mov	r3, r1
 801054e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010556:	78fa      	ldrb	r2, [r7, #3]
 8010558:	4611      	mov	r1, r2
 801055a:	4618      	mov	r0, r3
 801055c:	f7fe fd68 	bl	800f030 <USBD_LL_IsoINIncomplete>
}
 8010560:	bf00      	nop
 8010562:	3708      	adds	r7, #8
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010576:	4618      	mov	r0, r3
 8010578:	f7fe fdbe 	bl	800f0f8 <USBD_LL_DevConnected>
}
 801057c:	bf00      	nop
 801057e:	3708      	adds	r7, #8
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}

08010584 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b082      	sub	sp, #8
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010592:	4618      	mov	r0, r3
 8010594:	f7fe fdbb 	bl	800f10e <USBD_LL_DevDisconnected>
}
 8010598:	bf00      	nop
 801059a:	3708      	adds	r7, #8
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b082      	sub	sp, #8
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	2b01      	cmp	r3, #1
 80105ae:	d140      	bne.n	8010632 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80105b0:	4a22      	ldr	r2, [pc, #136]	; (801063c <USBD_LL_Init+0x9c>)
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	4a20      	ldr	r2, [pc, #128]	; (801063c <USBD_LL_Init+0x9c>)
 80105bc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80105c0:	4b1e      	ldr	r3, [pc, #120]	; (801063c <USBD_LL_Init+0x9c>)
 80105c2:	4a1f      	ldr	r2, [pc, #124]	; (8010640 <USBD_LL_Init+0xa0>)
 80105c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80105c6:	4b1d      	ldr	r3, [pc, #116]	; (801063c <USBD_LL_Init+0x9c>)
 80105c8:	2209      	movs	r2, #9
 80105ca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80105cc:	4b1b      	ldr	r3, [pc, #108]	; (801063c <USBD_LL_Init+0x9c>)
 80105ce:	2202      	movs	r2, #2
 80105d0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80105d2:	4b1a      	ldr	r3, [pc, #104]	; (801063c <USBD_LL_Init+0x9c>)
 80105d4:	2200      	movs	r2, #0
 80105d6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80105d8:	4b18      	ldr	r3, [pc, #96]	; (801063c <USBD_LL_Init+0x9c>)
 80105da:	2202      	movs	r2, #2
 80105dc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80105de:	4b17      	ldr	r3, [pc, #92]	; (801063c <USBD_LL_Init+0x9c>)
 80105e0:	2200      	movs	r2, #0
 80105e2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80105e4:	4b15      	ldr	r3, [pc, #84]	; (801063c <USBD_LL_Init+0x9c>)
 80105e6:	2200      	movs	r2, #0
 80105e8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80105ea:	4b14      	ldr	r3, [pc, #80]	; (801063c <USBD_LL_Init+0x9c>)
 80105ec:	2200      	movs	r2, #0
 80105ee:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80105f0:	4b12      	ldr	r3, [pc, #72]	; (801063c <USBD_LL_Init+0x9c>)
 80105f2:	2200      	movs	r2, #0
 80105f4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80105f6:	4b11      	ldr	r3, [pc, #68]	; (801063c <USBD_LL_Init+0x9c>)
 80105f8:	2200      	movs	r2, #0
 80105fa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80105fc:	4b0f      	ldr	r3, [pc, #60]	; (801063c <USBD_LL_Init+0x9c>)
 80105fe:	2200      	movs	r2, #0
 8010600:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8010602:	480e      	ldr	r0, [pc, #56]	; (801063c <USBD_LL_Init+0x9c>)
 8010604:	f7f5 fcfa 	bl	8005ffc <HAL_PCD_Init>
 8010608:	4603      	mov	r3, r0
 801060a:	2b00      	cmp	r3, #0
 801060c:	d001      	beq.n	8010612 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801060e:	f7f1 fce6 	bl	8001fde <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8010612:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010616:	4809      	ldr	r0, [pc, #36]	; (801063c <USBD_LL_Init+0x9c>)
 8010618:	f7f6 ff27 	bl	800746a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801061c:	2280      	movs	r2, #128	; 0x80
 801061e:	2100      	movs	r1, #0
 8010620:	4806      	ldr	r0, [pc, #24]	; (801063c <USBD_LL_Init+0x9c>)
 8010622:	f7f6 fedb 	bl	80073dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8010626:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801062a:	2101      	movs	r1, #1
 801062c:	4803      	ldr	r0, [pc, #12]	; (801063c <USBD_LL_Init+0x9c>)
 801062e:	f7f6 fed5 	bl	80073dc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8010632:	2300      	movs	r3, #0
}
 8010634:	4618      	mov	r0, r3
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	2400becc 	.word	0x2400becc
 8010640:	40040000 	.word	0x40040000

08010644 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801064c:	2300      	movs	r3, #0
 801064e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010650:	2300      	movs	r3, #0
 8010652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801065a:	4618      	mov	r0, r3
 801065c:	f7f5 fdda 	bl	8006214 <HAL_PCD_Start>
 8010660:	4603      	mov	r3, r0
 8010662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010664:	7bfb      	ldrb	r3, [r7, #15]
 8010666:	4618      	mov	r0, r3
 8010668:	f000 f92c 	bl	80108c4 <USBD_Get_USB_Status>
 801066c:	4603      	mov	r3, r0
 801066e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010670:	7bbb      	ldrb	r3, [r7, #14]
}
 8010672:	4618      	mov	r0, r3
 8010674:	3710      	adds	r7, #16
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}

0801067a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801067a:	b580      	push	{r7, lr}
 801067c:	b084      	sub	sp, #16
 801067e:	af00      	add	r7, sp, #0
 8010680:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010682:	2300      	movs	r3, #0
 8010684:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010686:	2300      	movs	r3, #0
 8010688:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010690:	4618      	mov	r0, r3
 8010692:	f7f5 fdf4 	bl	800627e <HAL_PCD_Stop>
 8010696:	4603      	mov	r3, r0
 8010698:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801069a:	7bfb      	ldrb	r3, [r7, #15]
 801069c:	4618      	mov	r0, r3
 801069e:	f000 f911 	bl	80108c4 <USBD_Get_USB_Status>
 80106a2:	4603      	mov	r3, r0
 80106a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3710      	adds	r7, #16
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	4608      	mov	r0, r1
 80106ba:	4611      	mov	r1, r2
 80106bc:	461a      	mov	r2, r3
 80106be:	4603      	mov	r3, r0
 80106c0:	70fb      	strb	r3, [r7, #3]
 80106c2:	460b      	mov	r3, r1
 80106c4:	70bb      	strb	r3, [r7, #2]
 80106c6:	4613      	mov	r3, r2
 80106c8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106ca:	2300      	movs	r3, #0
 80106cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106ce:	2300      	movs	r3, #0
 80106d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80106d8:	78bb      	ldrb	r3, [r7, #2]
 80106da:	883a      	ldrh	r2, [r7, #0]
 80106dc:	78f9      	ldrb	r1, [r7, #3]
 80106de:	f7f6 fafb 	bl	8006cd8 <HAL_PCD_EP_Open>
 80106e2:	4603      	mov	r3, r0
 80106e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106e6:	7bfb      	ldrb	r3, [r7, #15]
 80106e8:	4618      	mov	r0, r3
 80106ea:	f000 f8eb 	bl	80108c4 <USBD_Get_USB_Status>
 80106ee:	4603      	mov	r3, r0
 80106f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3710      	adds	r7, #16
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}

080106fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b084      	sub	sp, #16
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	460b      	mov	r3, r1
 8010706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010708:	2300      	movs	r3, #0
 801070a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801070c:	2300      	movs	r3, #0
 801070e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010716:	78fa      	ldrb	r2, [r7, #3]
 8010718:	4611      	mov	r1, r2
 801071a:	4618      	mov	r0, r3
 801071c:	f7f6 fbb9 	bl	8006e92 <HAL_PCD_EP_SetStall>
 8010720:	4603      	mov	r3, r0
 8010722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010724:	7bfb      	ldrb	r3, [r7, #15]
 8010726:	4618      	mov	r0, r3
 8010728:	f000 f8cc 	bl	80108c4 <USBD_Get_USB_Status>
 801072c:	4603      	mov	r3, r0
 801072e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010730:	7bbb      	ldrb	r3, [r7, #14]
}
 8010732:	4618      	mov	r0, r3
 8010734:	3710      	adds	r7, #16
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}

0801073a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801073a:	b580      	push	{r7, lr}
 801073c:	b084      	sub	sp, #16
 801073e:	af00      	add	r7, sp, #0
 8010740:	6078      	str	r0, [r7, #4]
 8010742:	460b      	mov	r3, r1
 8010744:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010746:	2300      	movs	r3, #0
 8010748:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801074a:	2300      	movs	r3, #0
 801074c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010754:	78fa      	ldrb	r2, [r7, #3]
 8010756:	4611      	mov	r1, r2
 8010758:	4618      	mov	r0, r3
 801075a:	f7f6 fbfd 	bl	8006f58 <HAL_PCD_EP_ClrStall>
 801075e:	4603      	mov	r3, r0
 8010760:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010762:	7bfb      	ldrb	r3, [r7, #15]
 8010764:	4618      	mov	r0, r3
 8010766:	f000 f8ad 	bl	80108c4 <USBD_Get_USB_Status>
 801076a:	4603      	mov	r3, r0
 801076c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801076e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010770:	4618      	mov	r0, r3
 8010772:	3710      	adds	r7, #16
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}

08010778 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010778:	b480      	push	{r7}
 801077a:	b085      	sub	sp, #20
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	460b      	mov	r3, r1
 8010782:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801078a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801078c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010790:	2b00      	cmp	r3, #0
 8010792:	da0b      	bge.n	80107ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010794:	78fb      	ldrb	r3, [r7, #3]
 8010796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801079a:	68f9      	ldr	r1, [r7, #12]
 801079c:	4613      	mov	r3, r2
 801079e:	00db      	lsls	r3, r3, #3
 80107a0:	4413      	add	r3, r2
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	440b      	add	r3, r1
 80107a6:	3316      	adds	r3, #22
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	e00b      	b.n	80107c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80107ac:	78fb      	ldrb	r3, [r7, #3]
 80107ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107b2:	68f9      	ldr	r1, [r7, #12]
 80107b4:	4613      	mov	r3, r2
 80107b6:	00db      	lsls	r3, r3, #3
 80107b8:	4413      	add	r3, r2
 80107ba:	009b      	lsls	r3, r3, #2
 80107bc:	440b      	add	r3, r1
 80107be:	f203 2356 	addw	r3, r3, #598	; 0x256
 80107c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3714      	adds	r7, #20
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr

080107d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b084      	sub	sp, #16
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	460b      	mov	r3, r1
 80107da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107dc:	2300      	movs	r3, #0
 80107de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107e0:	2300      	movs	r3, #0
 80107e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80107ea:	78fa      	ldrb	r2, [r7, #3]
 80107ec:	4611      	mov	r1, r2
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7f6 fa4e 	bl	8006c90 <HAL_PCD_SetAddress>
 80107f4:	4603      	mov	r3, r0
 80107f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107f8:	7bfb      	ldrb	r3, [r7, #15]
 80107fa:	4618      	mov	r0, r3
 80107fc:	f000 f862 	bl	80108c4 <USBD_Get_USB_Status>
 8010800:	4603      	mov	r3, r0
 8010802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010804:	7bbb      	ldrb	r3, [r7, #14]
}
 8010806:	4618      	mov	r0, r3
 8010808:	3710      	adds	r7, #16
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}

0801080e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801080e:	b580      	push	{r7, lr}
 8010810:	b086      	sub	sp, #24
 8010812:	af00      	add	r7, sp, #0
 8010814:	60f8      	str	r0, [r7, #12]
 8010816:	607a      	str	r2, [r7, #4]
 8010818:	603b      	str	r3, [r7, #0]
 801081a:	460b      	mov	r3, r1
 801081c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801081e:	2300      	movs	r3, #0
 8010820:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010822:	2300      	movs	r3, #0
 8010824:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801082c:	7af9      	ldrb	r1, [r7, #11]
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	687a      	ldr	r2, [r7, #4]
 8010832:	f7f6 faf4 	bl	8006e1e <HAL_PCD_EP_Transmit>
 8010836:	4603      	mov	r3, r0
 8010838:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801083a:	7dfb      	ldrb	r3, [r7, #23]
 801083c:	4618      	mov	r0, r3
 801083e:	f000 f841 	bl	80108c4 <USBD_Get_USB_Status>
 8010842:	4603      	mov	r3, r0
 8010844:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010846:	7dbb      	ldrb	r3, [r7, #22]
}
 8010848:	4618      	mov	r0, r3
 801084a:	3718      	adds	r7, #24
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b086      	sub	sp, #24
 8010854:	af00      	add	r7, sp, #0
 8010856:	60f8      	str	r0, [r7, #12]
 8010858:	607a      	str	r2, [r7, #4]
 801085a:	603b      	str	r3, [r7, #0]
 801085c:	460b      	mov	r3, r1
 801085e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010860:	2300      	movs	r3, #0
 8010862:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010864:	2300      	movs	r3, #0
 8010866:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801086e:	7af9      	ldrb	r1, [r7, #11]
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	f7f6 fa98 	bl	8006da8 <HAL_PCD_EP_Receive>
 8010878:	4603      	mov	r3, r0
 801087a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801087c:	7dfb      	ldrb	r3, [r7, #23]
 801087e:	4618      	mov	r0, r3
 8010880:	f000 f820 	bl	80108c4 <USBD_Get_USB_Status>
 8010884:	4603      	mov	r3, r0
 8010886:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010888:	7dbb      	ldrb	r3, [r7, #22]
}
 801088a:	4618      	mov	r0, r3
 801088c:	3718      	adds	r7, #24
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}
	...

08010894 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010894:	b480      	push	{r7}
 8010896:	b083      	sub	sp, #12
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801089c:	4b03      	ldr	r3, [pc, #12]	; (80108ac <USBD_static_malloc+0x18>)
}
 801089e:	4618      	mov	r0, r3
 80108a0:	370c      	adds	r7, #12
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr
 80108aa:	bf00      	nop
 80108ac:	2400c3b0 	.word	0x2400c3b0

080108b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80108b0:	b480      	push	{r7}
 80108b2:	b083      	sub	sp, #12
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80108b8:	bf00      	nop
 80108ba:	370c      	adds	r7, #12
 80108bc:	46bd      	mov	sp, r7
 80108be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c2:	4770      	bx	lr

080108c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b085      	sub	sp, #20
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	4603      	mov	r3, r0
 80108cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108ce:	2300      	movs	r3, #0
 80108d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80108d2:	79fb      	ldrb	r3, [r7, #7]
 80108d4:	2b03      	cmp	r3, #3
 80108d6:	d817      	bhi.n	8010908 <USBD_Get_USB_Status+0x44>
 80108d8:	a201      	add	r2, pc, #4	; (adr r2, 80108e0 <USBD_Get_USB_Status+0x1c>)
 80108da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108de:	bf00      	nop
 80108e0:	080108f1 	.word	0x080108f1
 80108e4:	080108f7 	.word	0x080108f7
 80108e8:	080108fd 	.word	0x080108fd
 80108ec:	08010903 	.word	0x08010903
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80108f0:	2300      	movs	r3, #0
 80108f2:	73fb      	strb	r3, [r7, #15]
    break;
 80108f4:	e00b      	b.n	801090e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108f6:	2303      	movs	r3, #3
 80108f8:	73fb      	strb	r3, [r7, #15]
    break;
 80108fa:	e008      	b.n	801090e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108fc:	2301      	movs	r3, #1
 80108fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010900:	e005      	b.n	801090e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010902:	2303      	movs	r3, #3
 8010904:	73fb      	strb	r3, [r7, #15]
    break;
 8010906:	e002      	b.n	801090e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010908:	2303      	movs	r3, #3
 801090a:	73fb      	strb	r3, [r7, #15]
    break;
 801090c:	bf00      	nop
  }
  return usb_status;
 801090e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010910:	4618      	mov	r0, r3
 8010912:	3714      	adds	r7, #20
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr

0801091c <arm_biquad_cascade_df2T_f32>:
 801091c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010920:	7807      	ldrb	r7, [r0, #0]
 8010922:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 8010926:	6885      	ldr	r5, [r0, #8]
 8010928:	3514      	adds	r5, #20
 801092a:	6846      	ldr	r6, [r0, #4]
 801092c:	3608      	adds	r6, #8
 801092e:	ea4f 198e 	mov.w	r9, lr, lsl #6
 8010932:	eb02 0b09 	add.w	fp, r2, r9
 8010936:	f003 080f 	and.w	r8, r3, #15
 801093a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 801093e:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 8010942:	ed15 7a04 	vldr	s14, [r5, #-16]
 8010946:	ed55 6a03 	vldr	s13, [r5, #-12]
 801094a:	ed15 6a02 	vldr	s12, [r5, #-8]
 801094e:	ed55 5a01 	vldr	s11, [r5, #-4]
 8010952:	46b4      	mov	ip, r6
 8010954:	ed56 3a02 	vldr	s7, [r6, #-8]
 8010958:	ed16 4a01 	vldr	s8, [r6, #-4]
 801095c:	f1be 0f00 	cmp.w	lr, #0
 8010960:	f000 8195 	beq.w	8010c8e <arm_biquad_cascade_df2T_f32+0x372>
 8010964:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8010968:	f102 0340 	add.w	r3, r2, #64	; 0x40
 801096c:	4674      	mov	r4, lr
 801096e:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8010972:	ee27 5a83 	vmul.f32	s10, s15, s6
 8010976:	ee35 5a23 	vadd.f32	s10, s10, s7
 801097a:	ee67 4a03 	vmul.f32	s9, s14, s6
 801097e:	ee34 4a84 	vadd.f32	s8, s9, s8
 8010982:	ee66 4a05 	vmul.f32	s9, s12, s10
 8010986:	ee34 4a84 	vadd.f32	s8, s9, s8
 801098a:	ee26 3a83 	vmul.f32	s6, s13, s6
 801098e:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 8010992:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 8010996:	ee67 4aa3 	vmul.f32	s9, s15, s7
 801099a:	ee74 4a84 	vadd.f32	s9, s9, s8
 801099e:	ee25 5a85 	vmul.f32	s10, s11, s10
 80109a2:	ee35 5a03 	vadd.f32	s10, s10, s6
 80109a6:	ee27 4a23 	vmul.f32	s8, s14, s7
 80109aa:	ee35 5a04 	vadd.f32	s10, s10, s8
 80109ae:	ee26 3a24 	vmul.f32	s6, s12, s9
 80109b2:	ee33 3a05 	vadd.f32	s6, s6, s10
 80109b6:	ee66 3aa3 	vmul.f32	s7, s13, s7
 80109ba:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 80109be:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 80109c2:	ee27 5a84 	vmul.f32	s10, s15, s8
 80109c6:	ee35 5a03 	vadd.f32	s10, s10, s6
 80109ca:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80109ce:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80109d2:	ee67 3a04 	vmul.f32	s7, s14, s8
 80109d6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80109da:	ee26 3a05 	vmul.f32	s6, s12, s10
 80109de:	ee33 3a24 	vadd.f32	s6, s6, s9
 80109e2:	ee66 3a84 	vmul.f32	s7, s13, s8
 80109e6:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 80109ea:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 80109ee:	ee67 4a84 	vmul.f32	s9, s15, s8
 80109f2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80109f6:	ee25 5a85 	vmul.f32	s10, s11, s10
 80109fa:	ee35 5a23 	vadd.f32	s10, s10, s7
 80109fe:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010a02:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010a06:	ee26 3a24 	vmul.f32	s6, s12, s9
 8010a0a:	ee33 3a05 	vadd.f32	s6, s6, s10
 8010a0e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010a12:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 8010a16:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 8010a1a:	ee27 5a84 	vmul.f32	s10, s15, s8
 8010a1e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8010a22:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8010a26:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010a2a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010a2e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010a32:	ee26 3a05 	vmul.f32	s6, s12, s10
 8010a36:	ee33 3a24 	vadd.f32	s6, s6, s9
 8010a3a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010a3e:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 8010a42:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 8010a46:	ee67 4a84 	vmul.f32	s9, s15, s8
 8010a4a:	ee74 4a83 	vadd.f32	s9, s9, s6
 8010a4e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8010a52:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010a56:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010a5a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010a5e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8010a62:	ee33 3a05 	vadd.f32	s6, s6, s10
 8010a66:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010a6a:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 8010a6e:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 8010a72:	ee27 5a84 	vmul.f32	s10, s15, s8
 8010a76:	ee35 5a03 	vadd.f32	s10, s10, s6
 8010a7a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8010a7e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010a82:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010a86:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010a8a:	ee26 3a05 	vmul.f32	s6, s12, s10
 8010a8e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8010a92:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010a96:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 8010a9a:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 8010a9e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8010aa2:	ee74 4a83 	vadd.f32	s9, s9, s6
 8010aa6:	ee25 5a85 	vmul.f32	s10, s11, s10
 8010aaa:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010aae:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010ab2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010ab6:	ee26 3a24 	vmul.f32	s6, s12, s9
 8010aba:	ee33 3a05 	vadd.f32	s6, s6, s10
 8010abe:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010ac2:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 8010ac6:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 8010aca:	ee27 5a84 	vmul.f32	s10, s15, s8
 8010ace:	ee35 5a03 	vadd.f32	s10, s10, s6
 8010ad2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8010ad6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010ada:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010ade:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010ae2:	ee26 3a05 	vmul.f32	s6, s12, s10
 8010ae6:	ee33 3a24 	vadd.f32	s6, s6, s9
 8010aea:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010aee:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8010af2:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 8010af6:	ee67 4a84 	vmul.f32	s9, s15, s8
 8010afa:	ee74 4a83 	vadd.f32	s9, s9, s6
 8010afe:	ee25 5a85 	vmul.f32	s10, s11, s10
 8010b02:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010b06:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010b0a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010b0e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8010b12:	ee33 3a05 	vadd.f32	s6, s6, s10
 8010b16:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010b1a:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8010b1e:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8010b22:	ee27 5a84 	vmul.f32	s10, s15, s8
 8010b26:	ee35 5a03 	vadd.f32	s10, s10, s6
 8010b2a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8010b2e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010b32:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010b36:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010b3a:	ee26 3a05 	vmul.f32	s6, s12, s10
 8010b3e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8010b42:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010b46:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 8010b4a:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 8010b4e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8010b52:	ee74 4a83 	vadd.f32	s9, s9, s6
 8010b56:	ee25 5a85 	vmul.f32	s10, s11, s10
 8010b5a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010b5e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010b62:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010b66:	ee26 3a24 	vmul.f32	s6, s12, s9
 8010b6a:	ee33 3a05 	vadd.f32	s6, s6, s10
 8010b6e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010b72:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 8010b76:	ed10 4a04 	vldr	s8, [r0, #-16]
 8010b7a:	ee27 5a84 	vmul.f32	s10, s15, s8
 8010b7e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8010b82:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8010b86:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010b8a:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010b8e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010b92:	ee26 3a05 	vmul.f32	s6, s12, s10
 8010b96:	ee33 3a24 	vadd.f32	s6, s6, s9
 8010b9a:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010b9e:	ed03 5a04 	vstr	s10, [r3, #-16]
 8010ba2:	ed10 4a03 	vldr	s8, [r0, #-12]
 8010ba6:	ee67 4a84 	vmul.f32	s9, s15, s8
 8010baa:	ee74 4a83 	vadd.f32	s9, s9, s6
 8010bae:	ee25 5a85 	vmul.f32	s10, s11, s10
 8010bb2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010bb6:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010bba:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010bbe:	ee26 3a24 	vmul.f32	s6, s12, s9
 8010bc2:	ee33 3a05 	vadd.f32	s6, s6, s10
 8010bc6:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010bca:	ed43 4a03 	vstr	s9, [r3, #-12]
 8010bce:	ed10 4a02 	vldr	s8, [r0, #-8]
 8010bd2:	ee27 5a84 	vmul.f32	s10, s15, s8
 8010bd6:	ee35 5a03 	vadd.f32	s10, s10, s6
 8010bda:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8010bde:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010be2:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010be6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8010bea:	ee26 3a05 	vmul.f32	s6, s12, s10
 8010bee:	ee33 3a24 	vadd.f32	s6, s6, s9
 8010bf2:	ee66 3a84 	vmul.f32	s7, s13, s8
 8010bf6:	ed03 5a02 	vstr	s10, [r3, #-8]
 8010bfa:	ed10 4a01 	vldr	s8, [r0, #-4]
 8010bfe:	ee67 4a84 	vmul.f32	s9, s15, s8
 8010c02:	ee74 4a83 	vadd.f32	s9, s9, s6
 8010c06:	ee25 5a85 	vmul.f32	s10, s11, s10
 8010c0a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010c0e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8010c12:	ee35 5a23 	vadd.f32	s10, s10, s7
 8010c16:	ee66 3a24 	vmul.f32	s7, s12, s9
 8010c1a:	ee73 3a85 	vadd.f32	s7, s7, s10
 8010c1e:	ee26 5a84 	vmul.f32	s10, s13, s8
 8010c22:	ee25 4aa4 	vmul.f32	s8, s11, s9
 8010c26:	ee34 4a05 	vadd.f32	s8, s8, s10
 8010c2a:	ed43 4a01 	vstr	s9, [r3, #-4]
 8010c2e:	3040      	adds	r0, #64	; 0x40
 8010c30:	3340      	adds	r3, #64	; 0x40
 8010c32:	3c01      	subs	r4, #1
 8010c34:	f47f ae9b 	bne.w	801096e <arm_biquad_cascade_df2T_f32+0x52>
 8010c38:	4449      	add	r1, r9
 8010c3a:	465b      	mov	r3, fp
 8010c3c:	f1b8 0f00 	cmp.w	r8, #0
 8010c40:	d019      	beq.n	8010c76 <arm_biquad_cascade_df2T_f32+0x35a>
 8010c42:	eb01 000a 	add.w	r0, r1, sl
 8010c46:	ecf1 2a01 	vldmia	r1!, {s5}
 8010c4a:	ee27 3aa2 	vmul.f32	s6, s15, s5
 8010c4e:	ee33 3a23 	vadd.f32	s6, s6, s7
 8010c52:	ee67 3a22 	vmul.f32	s7, s14, s5
 8010c56:	ee33 4a84 	vadd.f32	s8, s7, s8
 8010c5a:	ee26 5a03 	vmul.f32	s10, s12, s6
 8010c5e:	ee75 3a04 	vadd.f32	s7, s10, s8
 8010c62:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8010c66:	ee25 4a83 	vmul.f32	s8, s11, s6
 8010c6a:	ee34 4a22 	vadd.f32	s8, s8, s5
 8010c6e:	eca3 3a01 	vstmia	r3!, {s6}
 8010c72:	4281      	cmp	r1, r0
 8010c74:	d1e7      	bne.n	8010c46 <arm_biquad_cascade_df2T_f32+0x32a>
 8010c76:	ed4c 3a02 	vstr	s7, [ip, #-8]
 8010c7a:	ed0c 4a01 	vstr	s8, [ip, #-4]
 8010c7e:	3514      	adds	r5, #20
 8010c80:	3608      	adds	r6, #8
 8010c82:	4611      	mov	r1, r2
 8010c84:	3f01      	subs	r7, #1
 8010c86:	f47f ae5a 	bne.w	801093e <arm_biquad_cascade_df2T_f32+0x22>
 8010c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c8e:	4613      	mov	r3, r2
 8010c90:	e7d4      	b.n	8010c3c <arm_biquad_cascade_df2T_f32+0x320>
	...

08010c94 <arm_biquad_cascade_df2T_init_f32>:
 8010c94:	b510      	push	{r4, lr}
 8010c96:	4604      	mov	r4, r0
 8010c98:	4608      	mov	r0, r1
 8010c9a:	2100      	movs	r1, #0
 8010c9c:	60a2      	str	r2, [r4, #8]
 8010c9e:	00c2      	lsls	r2, r0, #3
 8010ca0:	7020      	strb	r0, [r4, #0]
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f000 facf 	bl	8011246 <memset>
 8010ca8:	6060      	str	r0, [r4, #4]
 8010caa:	bd10      	pop	{r4, pc}

08010cac <arm_sub_f32>:
 8010cac:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8010cb0:	b4f0      	push	{r4, r5, r6, r7}
 8010cb2:	d033      	beq.n	8010d1c <arm_sub_f32+0x70>
 8010cb4:	f100 0610 	add.w	r6, r0, #16
 8010cb8:	f101 0510 	add.w	r5, r1, #16
 8010cbc:	f102 0410 	add.w	r4, r2, #16
 8010cc0:	4667      	mov	r7, ip
 8010cc2:	ed15 7a04 	vldr	s14, [r5, #-16]
 8010cc6:	3f01      	subs	r7, #1
 8010cc8:	ed56 7a04 	vldr	s15, [r6, #-16]
 8010ccc:	f105 0510 	add.w	r5, r5, #16
 8010cd0:	f106 0610 	add.w	r6, r6, #16
 8010cd4:	f104 0410 	add.w	r4, r4, #16
 8010cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010cdc:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 8010ce0:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8010ce4:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 8010ce8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010cec:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8010cf0:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8010cf4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8010cf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010cfc:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8010d00:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8010d04:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8010d08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d0c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8010d10:	d1d7      	bne.n	8010cc2 <arm_sub_f32+0x16>
 8010d12:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8010d16:	4420      	add	r0, r4
 8010d18:	4421      	add	r1, r4
 8010d1a:	4422      	add	r2, r4
 8010d1c:	f013 0303 	ands.w	r3, r3, #3
 8010d20:	d01b      	beq.n	8010d5a <arm_sub_f32+0xae>
 8010d22:	edd0 7a00 	vldr	s15, [r0]
 8010d26:	3b01      	subs	r3, #1
 8010d28:	ed91 7a00 	vldr	s14, [r1]
 8010d2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d30:	edc2 7a00 	vstr	s15, [r2]
 8010d34:	d011      	beq.n	8010d5a <arm_sub_f32+0xae>
 8010d36:	edd0 7a01 	vldr	s15, [r0, #4]
 8010d3a:	2b01      	cmp	r3, #1
 8010d3c:	ed91 7a01 	vldr	s14, [r1, #4]
 8010d40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d44:	edc2 7a01 	vstr	s15, [r2, #4]
 8010d48:	d007      	beq.n	8010d5a <arm_sub_f32+0xae>
 8010d4a:	edd0 7a02 	vldr	s15, [r0, #8]
 8010d4e:	ed91 7a02 	vldr	s14, [r1, #8]
 8010d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d56:	edc2 7a02 	vstr	s15, [r2, #8]
 8010d5a:	bcf0      	pop	{r4, r5, r6, r7}
 8010d5c:	4770      	bx	lr
 8010d5e:	bf00      	nop

08010d60 <arm_mult_f32>:
 8010d60:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8010d64:	b4f0      	push	{r4, r5, r6, r7}
 8010d66:	d033      	beq.n	8010dd0 <arm_mult_f32+0x70>
 8010d68:	f100 0610 	add.w	r6, r0, #16
 8010d6c:	f101 0510 	add.w	r5, r1, #16
 8010d70:	f102 0410 	add.w	r4, r2, #16
 8010d74:	4667      	mov	r7, ip
 8010d76:	ed15 7a04 	vldr	s14, [r5, #-16]
 8010d7a:	3f01      	subs	r7, #1
 8010d7c:	ed56 7a04 	vldr	s15, [r6, #-16]
 8010d80:	f105 0510 	add.w	r5, r5, #16
 8010d84:	f106 0610 	add.w	r6, r6, #16
 8010d88:	f104 0410 	add.w	r4, r4, #16
 8010d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d90:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 8010d94:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8010d98:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 8010d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010da0:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8010da4:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8010da8:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8010dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010db0:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8010db4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8010db8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8010dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010dc0:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8010dc4:	d1d7      	bne.n	8010d76 <arm_mult_f32+0x16>
 8010dc6:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8010dca:	4420      	add	r0, r4
 8010dcc:	4421      	add	r1, r4
 8010dce:	4422      	add	r2, r4
 8010dd0:	f013 0303 	ands.w	r3, r3, #3
 8010dd4:	d01b      	beq.n	8010e0e <arm_mult_f32+0xae>
 8010dd6:	edd1 7a00 	vldr	s15, [r1]
 8010dda:	3b01      	subs	r3, #1
 8010ddc:	ed90 7a00 	vldr	s14, [r0]
 8010de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010de4:	edc2 7a00 	vstr	s15, [r2]
 8010de8:	d011      	beq.n	8010e0e <arm_mult_f32+0xae>
 8010dea:	edd0 7a01 	vldr	s15, [r0, #4]
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	ed91 7a01 	vldr	s14, [r1, #4]
 8010df4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010df8:	edc2 7a01 	vstr	s15, [r2, #4]
 8010dfc:	d007      	beq.n	8010e0e <arm_mult_f32+0xae>
 8010dfe:	edd0 7a02 	vldr	s15, [r0, #8]
 8010e02:	ed91 7a02 	vldr	s14, [r1, #8]
 8010e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010e0a:	edc2 7a02 	vstr	s15, [r2, #8]
 8010e0e:	bcf0      	pop	{r4, r5, r6, r7}
 8010e10:	4770      	bx	lr
 8010e12:	bf00      	nop

08010e14 <arm_dot_prod_f32>:
 8010e14:	b4f0      	push	{r4, r5, r6, r7}
 8010e16:	0897      	lsrs	r7, r2, #2
 8010e18:	d052      	beq.n	8010ec0 <arm_dot_prod_f32+0xac>
 8010e1a:	f100 0510 	add.w	r5, r0, #16
 8010e1e:	f101 0410 	add.w	r4, r1, #16
 8010e22:	463e      	mov	r6, r7
 8010e24:	eddf 7a28 	vldr	s15, [pc, #160]	; 8010ec8 <arm_dot_prod_f32+0xb4>
 8010e28:	ed14 7a04 	vldr	s14, [r4, #-16]
 8010e2c:	3e01      	subs	r6, #1
 8010e2e:	ed15 6a04 	vldr	s12, [r5, #-16]
 8010e32:	f104 0410 	add.w	r4, r4, #16
 8010e36:	ed54 5a07 	vldr	s11, [r4, #-28]	; 0xffffffe4
 8010e3a:	f105 0510 	add.w	r5, r5, #16
 8010e3e:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010e42:	ed55 6a07 	vldr	s13, [r5, #-28]	; 0xffffffe4
 8010e46:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8010e4a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8010e4e:	ed54 5a06 	vldr	s11, [r4, #-24]	; 0xffffffe8
 8010e52:	ee36 6a27 	vadd.f32	s12, s12, s15
 8010e56:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 8010e5a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8010e5e:	ed54 5a05 	vldr	s11, [r4, #-20]	; 0xffffffec
 8010e62:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010e66:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010e6a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010e6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010e72:	d1d9      	bne.n	8010e28 <arm_dot_prod_f32+0x14>
 8010e74:	013f      	lsls	r7, r7, #4
 8010e76:	4438      	add	r0, r7
 8010e78:	4439      	add	r1, r7
 8010e7a:	f012 0203 	ands.w	r2, r2, #3
 8010e7e:	d01b      	beq.n	8010eb8 <arm_dot_prod_f32+0xa4>
 8010e80:	ed91 7a00 	vldr	s14, [r1]
 8010e84:	3a01      	subs	r2, #1
 8010e86:	edd0 6a00 	vldr	s13, [r0]
 8010e8a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010e8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010e92:	d011      	beq.n	8010eb8 <arm_dot_prod_f32+0xa4>
 8010e94:	ed91 7a01 	vldr	s14, [r1, #4]
 8010e98:	2a01      	cmp	r2, #1
 8010e9a:	edd0 6a01 	vldr	s13, [r0, #4]
 8010e9e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010ea2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010ea6:	d007      	beq.n	8010eb8 <arm_dot_prod_f32+0xa4>
 8010ea8:	ed90 7a02 	vldr	s14, [r0, #8]
 8010eac:	edd1 6a02 	vldr	s13, [r1, #8]
 8010eb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010eb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010eb8:	edc3 7a00 	vstr	s15, [r3]
 8010ebc:	bcf0      	pop	{r4, r5, r6, r7}
 8010ebe:	4770      	bx	lr
 8010ec0:	eddf 7a01 	vldr	s15, [pc, #4]	; 8010ec8 <arm_dot_prod_f32+0xb4>
 8010ec4:	e7d9      	b.n	8010e7a <arm_dot_prod_f32+0x66>
 8010ec6:	bf00      	nop
 8010ec8:	00000000 	.word	0x00000000

08010ecc <arm_add_f32>:
 8010ecc:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8010ed0:	b4f0      	push	{r4, r5, r6, r7}
 8010ed2:	d033      	beq.n	8010f3c <arm_add_f32+0x70>
 8010ed4:	f100 0610 	add.w	r6, r0, #16
 8010ed8:	f101 0510 	add.w	r5, r1, #16
 8010edc:	f102 0410 	add.w	r4, r2, #16
 8010ee0:	4667      	mov	r7, ip
 8010ee2:	ed15 7a04 	vldr	s14, [r5, #-16]
 8010ee6:	3f01      	subs	r7, #1
 8010ee8:	ed56 7a04 	vldr	s15, [r6, #-16]
 8010eec:	f105 0510 	add.w	r5, r5, #16
 8010ef0:	f106 0610 	add.w	r6, r6, #16
 8010ef4:	f104 0410 	add.w	r4, r4, #16
 8010ef8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010efc:	ed44 7a08 	vstr	s15, [r4, #-32]	; 0xffffffe0
 8010f00:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8010f04:	ed56 7a07 	vldr	s15, [r6, #-28]	; 0xffffffe4
 8010f08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f0c:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8010f10:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8010f14:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8010f18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f1c:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 8010f20:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8010f24:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8010f28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f2c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8010f30:	d1d7      	bne.n	8010ee2 <arm_add_f32+0x16>
 8010f32:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8010f36:	4420      	add	r0, r4
 8010f38:	4421      	add	r1, r4
 8010f3a:	4422      	add	r2, r4
 8010f3c:	f013 0303 	ands.w	r3, r3, #3
 8010f40:	d01b      	beq.n	8010f7a <arm_add_f32+0xae>
 8010f42:	edd1 7a00 	vldr	s15, [r1]
 8010f46:	3b01      	subs	r3, #1
 8010f48:	ed90 7a00 	vldr	s14, [r0]
 8010f4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f50:	edc2 7a00 	vstr	s15, [r2]
 8010f54:	d011      	beq.n	8010f7a <arm_add_f32+0xae>
 8010f56:	edd0 7a01 	vldr	s15, [r0, #4]
 8010f5a:	2b01      	cmp	r3, #1
 8010f5c:	ed91 7a01 	vldr	s14, [r1, #4]
 8010f60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f64:	edc2 7a01 	vstr	s15, [r2, #4]
 8010f68:	d007      	beq.n	8010f7a <arm_add_f32+0xae>
 8010f6a:	edd0 7a02 	vldr	s15, [r0, #8]
 8010f6e:	ed91 7a02 	vldr	s14, [r1, #8]
 8010f72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f76:	edc2 7a02 	vstr	s15, [r2, #8]
 8010f7a:	bcf0      	pop	{r4, r5, r6, r7}
 8010f7c:	4770      	bx	lr
 8010f7e:	bf00      	nop

08010f80 <arm_abs_f32>:
 8010f80:	b470      	push	{r4, r5, r6}
 8010f82:	0896      	lsrs	r6, r2, #2
 8010f84:	d025      	beq.n	8010fd2 <arm_abs_f32+0x52>
 8010f86:	f100 0410 	add.w	r4, r0, #16
 8010f8a:	f101 0310 	add.w	r3, r1, #16
 8010f8e:	4635      	mov	r5, r6
 8010f90:	ed54 7a04 	vldr	s15, [r4, #-16]
 8010f94:	3d01      	subs	r5, #1
 8010f96:	f104 0410 	add.w	r4, r4, #16
 8010f9a:	f103 0310 	add.w	r3, r3, #16
 8010f9e:	eef0 7ae7 	vabs.f32	s15, s15
 8010fa2:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8010fa6:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8010faa:	eef0 7ae7 	vabs.f32	s15, s15
 8010fae:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8010fb2:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8010fb6:	eef0 7ae7 	vabs.f32	s15, s15
 8010fba:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8010fbe:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8010fc2:	eef0 7ae7 	vabs.f32	s15, s15
 8010fc6:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8010fca:	d1e1      	bne.n	8010f90 <arm_abs_f32+0x10>
 8010fcc:	0136      	lsls	r6, r6, #4
 8010fce:	4430      	add	r0, r6
 8010fd0:	4431      	add	r1, r6
 8010fd2:	f012 0203 	ands.w	r2, r2, #3
 8010fd6:	d015      	beq.n	8011004 <arm_abs_f32+0x84>
 8010fd8:	edd0 7a00 	vldr	s15, [r0]
 8010fdc:	3a01      	subs	r2, #1
 8010fde:	eef0 7ae7 	vabs.f32	s15, s15
 8010fe2:	edc1 7a00 	vstr	s15, [r1]
 8010fe6:	d00d      	beq.n	8011004 <arm_abs_f32+0x84>
 8010fe8:	edd0 7a01 	vldr	s15, [r0, #4]
 8010fec:	2a01      	cmp	r2, #1
 8010fee:	eef0 7ae7 	vabs.f32	s15, s15
 8010ff2:	edc1 7a01 	vstr	s15, [r1, #4]
 8010ff6:	d005      	beq.n	8011004 <arm_abs_f32+0x84>
 8010ff8:	edd0 7a02 	vldr	s15, [r0, #8]
 8010ffc:	eef0 7ae7 	vabs.f32	s15, s15
 8011000:	edc1 7a02 	vstr	s15, [r1, #8]
 8011004:	bc70      	pop	{r4, r5, r6}
 8011006:	4770      	bx	lr

08011008 <std>:
 8011008:	2300      	movs	r3, #0
 801100a:	b510      	push	{r4, lr}
 801100c:	4604      	mov	r4, r0
 801100e:	e9c0 3300 	strd	r3, r3, [r0]
 8011012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011016:	6083      	str	r3, [r0, #8]
 8011018:	8181      	strh	r1, [r0, #12]
 801101a:	6643      	str	r3, [r0, #100]	; 0x64
 801101c:	81c2      	strh	r2, [r0, #14]
 801101e:	6183      	str	r3, [r0, #24]
 8011020:	4619      	mov	r1, r3
 8011022:	2208      	movs	r2, #8
 8011024:	305c      	adds	r0, #92	; 0x5c
 8011026:	f000 f90e 	bl	8011246 <memset>
 801102a:	4b0d      	ldr	r3, [pc, #52]	; (8011060 <std+0x58>)
 801102c:	6263      	str	r3, [r4, #36]	; 0x24
 801102e:	4b0d      	ldr	r3, [pc, #52]	; (8011064 <std+0x5c>)
 8011030:	62a3      	str	r3, [r4, #40]	; 0x28
 8011032:	4b0d      	ldr	r3, [pc, #52]	; (8011068 <std+0x60>)
 8011034:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011036:	4b0d      	ldr	r3, [pc, #52]	; (801106c <std+0x64>)
 8011038:	6323      	str	r3, [r4, #48]	; 0x30
 801103a:	4b0d      	ldr	r3, [pc, #52]	; (8011070 <std+0x68>)
 801103c:	6224      	str	r4, [r4, #32]
 801103e:	429c      	cmp	r4, r3
 8011040:	d006      	beq.n	8011050 <std+0x48>
 8011042:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011046:	4294      	cmp	r4, r2
 8011048:	d002      	beq.n	8011050 <std+0x48>
 801104a:	33d0      	adds	r3, #208	; 0xd0
 801104c:	429c      	cmp	r4, r3
 801104e:	d105      	bne.n	801105c <std+0x54>
 8011050:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011058:	f000 b96e 	b.w	8011338 <__retarget_lock_init_recursive>
 801105c:	bd10      	pop	{r4, pc}
 801105e:	bf00      	nop
 8011060:	080111c1 	.word	0x080111c1
 8011064:	080111e3 	.word	0x080111e3
 8011068:	0801121b 	.word	0x0801121b
 801106c:	0801123f 	.word	0x0801123f
 8011070:	2400c7d4 	.word	0x2400c7d4

08011074 <stdio_exit_handler>:
 8011074:	4a02      	ldr	r2, [pc, #8]	; (8011080 <stdio_exit_handler+0xc>)
 8011076:	4903      	ldr	r1, [pc, #12]	; (8011084 <stdio_exit_handler+0x10>)
 8011078:	4803      	ldr	r0, [pc, #12]	; (8011088 <stdio_exit_handler+0x14>)
 801107a:	f000 b869 	b.w	8011150 <_fwalk_sglue>
 801107e:	bf00      	nop
 8011080:	24000474 	.word	0x24000474
 8011084:	08011be5 	.word	0x08011be5
 8011088:	24000480 	.word	0x24000480

0801108c <cleanup_stdio>:
 801108c:	6841      	ldr	r1, [r0, #4]
 801108e:	4b0c      	ldr	r3, [pc, #48]	; (80110c0 <cleanup_stdio+0x34>)
 8011090:	4299      	cmp	r1, r3
 8011092:	b510      	push	{r4, lr}
 8011094:	4604      	mov	r4, r0
 8011096:	d001      	beq.n	801109c <cleanup_stdio+0x10>
 8011098:	f000 fda4 	bl	8011be4 <_fflush_r>
 801109c:	68a1      	ldr	r1, [r4, #8]
 801109e:	4b09      	ldr	r3, [pc, #36]	; (80110c4 <cleanup_stdio+0x38>)
 80110a0:	4299      	cmp	r1, r3
 80110a2:	d002      	beq.n	80110aa <cleanup_stdio+0x1e>
 80110a4:	4620      	mov	r0, r4
 80110a6:	f000 fd9d 	bl	8011be4 <_fflush_r>
 80110aa:	68e1      	ldr	r1, [r4, #12]
 80110ac:	4b06      	ldr	r3, [pc, #24]	; (80110c8 <cleanup_stdio+0x3c>)
 80110ae:	4299      	cmp	r1, r3
 80110b0:	d004      	beq.n	80110bc <cleanup_stdio+0x30>
 80110b2:	4620      	mov	r0, r4
 80110b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110b8:	f000 bd94 	b.w	8011be4 <_fflush_r>
 80110bc:	bd10      	pop	{r4, pc}
 80110be:	bf00      	nop
 80110c0:	2400c7d4 	.word	0x2400c7d4
 80110c4:	2400c83c 	.word	0x2400c83c
 80110c8:	2400c8a4 	.word	0x2400c8a4

080110cc <global_stdio_init.part.0>:
 80110cc:	b510      	push	{r4, lr}
 80110ce:	4b0b      	ldr	r3, [pc, #44]	; (80110fc <global_stdio_init.part.0+0x30>)
 80110d0:	4c0b      	ldr	r4, [pc, #44]	; (8011100 <global_stdio_init.part.0+0x34>)
 80110d2:	4a0c      	ldr	r2, [pc, #48]	; (8011104 <global_stdio_init.part.0+0x38>)
 80110d4:	601a      	str	r2, [r3, #0]
 80110d6:	4620      	mov	r0, r4
 80110d8:	2200      	movs	r2, #0
 80110da:	2104      	movs	r1, #4
 80110dc:	f7ff ff94 	bl	8011008 <std>
 80110e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80110e4:	2201      	movs	r2, #1
 80110e6:	2109      	movs	r1, #9
 80110e8:	f7ff ff8e 	bl	8011008 <std>
 80110ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80110f0:	2202      	movs	r2, #2
 80110f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110f6:	2112      	movs	r1, #18
 80110f8:	f7ff bf86 	b.w	8011008 <std>
 80110fc:	2400c90c 	.word	0x2400c90c
 8011100:	2400c7d4 	.word	0x2400c7d4
 8011104:	08011075 	.word	0x08011075

08011108 <__sfp_lock_acquire>:
 8011108:	4801      	ldr	r0, [pc, #4]	; (8011110 <__sfp_lock_acquire+0x8>)
 801110a:	f000 b916 	b.w	801133a <__retarget_lock_acquire_recursive>
 801110e:	bf00      	nop
 8011110:	2400c915 	.word	0x2400c915

08011114 <__sfp_lock_release>:
 8011114:	4801      	ldr	r0, [pc, #4]	; (801111c <__sfp_lock_release+0x8>)
 8011116:	f000 b911 	b.w	801133c <__retarget_lock_release_recursive>
 801111a:	bf00      	nop
 801111c:	2400c915 	.word	0x2400c915

08011120 <__sinit>:
 8011120:	b510      	push	{r4, lr}
 8011122:	4604      	mov	r4, r0
 8011124:	f7ff fff0 	bl	8011108 <__sfp_lock_acquire>
 8011128:	6a23      	ldr	r3, [r4, #32]
 801112a:	b11b      	cbz	r3, 8011134 <__sinit+0x14>
 801112c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011130:	f7ff bff0 	b.w	8011114 <__sfp_lock_release>
 8011134:	4b04      	ldr	r3, [pc, #16]	; (8011148 <__sinit+0x28>)
 8011136:	6223      	str	r3, [r4, #32]
 8011138:	4b04      	ldr	r3, [pc, #16]	; (801114c <__sinit+0x2c>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d1f5      	bne.n	801112c <__sinit+0xc>
 8011140:	f7ff ffc4 	bl	80110cc <global_stdio_init.part.0>
 8011144:	e7f2      	b.n	801112c <__sinit+0xc>
 8011146:	bf00      	nop
 8011148:	0801108d 	.word	0x0801108d
 801114c:	2400c90c 	.word	0x2400c90c

08011150 <_fwalk_sglue>:
 8011150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011154:	4607      	mov	r7, r0
 8011156:	4688      	mov	r8, r1
 8011158:	4614      	mov	r4, r2
 801115a:	2600      	movs	r6, #0
 801115c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011160:	f1b9 0901 	subs.w	r9, r9, #1
 8011164:	d505      	bpl.n	8011172 <_fwalk_sglue+0x22>
 8011166:	6824      	ldr	r4, [r4, #0]
 8011168:	2c00      	cmp	r4, #0
 801116a:	d1f7      	bne.n	801115c <_fwalk_sglue+0xc>
 801116c:	4630      	mov	r0, r6
 801116e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011172:	89ab      	ldrh	r3, [r5, #12]
 8011174:	2b01      	cmp	r3, #1
 8011176:	d907      	bls.n	8011188 <_fwalk_sglue+0x38>
 8011178:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801117c:	3301      	adds	r3, #1
 801117e:	d003      	beq.n	8011188 <_fwalk_sglue+0x38>
 8011180:	4629      	mov	r1, r5
 8011182:	4638      	mov	r0, r7
 8011184:	47c0      	blx	r8
 8011186:	4306      	orrs	r6, r0
 8011188:	3568      	adds	r5, #104	; 0x68
 801118a:	e7e9      	b.n	8011160 <_fwalk_sglue+0x10>

0801118c <iprintf>:
 801118c:	b40f      	push	{r0, r1, r2, r3}
 801118e:	b507      	push	{r0, r1, r2, lr}
 8011190:	4906      	ldr	r1, [pc, #24]	; (80111ac <iprintf+0x20>)
 8011192:	ab04      	add	r3, sp, #16
 8011194:	6808      	ldr	r0, [r1, #0]
 8011196:	f853 2b04 	ldr.w	r2, [r3], #4
 801119a:	6881      	ldr	r1, [r0, #8]
 801119c:	9301      	str	r3, [sp, #4]
 801119e:	f000 f9f1 	bl	8011584 <_vfiprintf_r>
 80111a2:	b003      	add	sp, #12
 80111a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80111a8:	b004      	add	sp, #16
 80111aa:	4770      	bx	lr
 80111ac:	240004cc 	.word	0x240004cc

080111b0 <putchar>:
 80111b0:	4b02      	ldr	r3, [pc, #8]	; (80111bc <putchar+0xc>)
 80111b2:	4601      	mov	r1, r0
 80111b4:	6818      	ldr	r0, [r3, #0]
 80111b6:	6882      	ldr	r2, [r0, #8]
 80111b8:	f000 bd3c 	b.w	8011c34 <_putc_r>
 80111bc:	240004cc 	.word	0x240004cc

080111c0 <__sread>:
 80111c0:	b510      	push	{r4, lr}
 80111c2:	460c      	mov	r4, r1
 80111c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111c8:	f000 f868 	bl	801129c <_read_r>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	bfab      	itete	ge
 80111d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80111d2:	89a3      	ldrhlt	r3, [r4, #12]
 80111d4:	181b      	addge	r3, r3, r0
 80111d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80111da:	bfac      	ite	ge
 80111dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80111de:	81a3      	strhlt	r3, [r4, #12]
 80111e0:	bd10      	pop	{r4, pc}

080111e2 <__swrite>:
 80111e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111e6:	461f      	mov	r7, r3
 80111e8:	898b      	ldrh	r3, [r1, #12]
 80111ea:	05db      	lsls	r3, r3, #23
 80111ec:	4605      	mov	r5, r0
 80111ee:	460c      	mov	r4, r1
 80111f0:	4616      	mov	r6, r2
 80111f2:	d505      	bpl.n	8011200 <__swrite+0x1e>
 80111f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111f8:	2302      	movs	r3, #2
 80111fa:	2200      	movs	r2, #0
 80111fc:	f000 f83c 	bl	8011278 <_lseek_r>
 8011200:	89a3      	ldrh	r3, [r4, #12]
 8011202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801120a:	81a3      	strh	r3, [r4, #12]
 801120c:	4632      	mov	r2, r6
 801120e:	463b      	mov	r3, r7
 8011210:	4628      	mov	r0, r5
 8011212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011216:	f000 b853 	b.w	80112c0 <_write_r>

0801121a <__sseek>:
 801121a:	b510      	push	{r4, lr}
 801121c:	460c      	mov	r4, r1
 801121e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011222:	f000 f829 	bl	8011278 <_lseek_r>
 8011226:	1c43      	adds	r3, r0, #1
 8011228:	89a3      	ldrh	r3, [r4, #12]
 801122a:	bf15      	itete	ne
 801122c:	6560      	strne	r0, [r4, #84]	; 0x54
 801122e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011236:	81a3      	strheq	r3, [r4, #12]
 8011238:	bf18      	it	ne
 801123a:	81a3      	strhne	r3, [r4, #12]
 801123c:	bd10      	pop	{r4, pc}

0801123e <__sclose>:
 801123e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011242:	f000 b809 	b.w	8011258 <_close_r>

08011246 <memset>:
 8011246:	4402      	add	r2, r0
 8011248:	4603      	mov	r3, r0
 801124a:	4293      	cmp	r3, r2
 801124c:	d100      	bne.n	8011250 <memset+0xa>
 801124e:	4770      	bx	lr
 8011250:	f803 1b01 	strb.w	r1, [r3], #1
 8011254:	e7f9      	b.n	801124a <memset+0x4>
	...

08011258 <_close_r>:
 8011258:	b538      	push	{r3, r4, r5, lr}
 801125a:	4d06      	ldr	r5, [pc, #24]	; (8011274 <_close_r+0x1c>)
 801125c:	2300      	movs	r3, #0
 801125e:	4604      	mov	r4, r0
 8011260:	4608      	mov	r0, r1
 8011262:	602b      	str	r3, [r5, #0]
 8011264:	f7f1 faaf 	bl	80027c6 <_close>
 8011268:	1c43      	adds	r3, r0, #1
 801126a:	d102      	bne.n	8011272 <_close_r+0x1a>
 801126c:	682b      	ldr	r3, [r5, #0]
 801126e:	b103      	cbz	r3, 8011272 <_close_r+0x1a>
 8011270:	6023      	str	r3, [r4, #0]
 8011272:	bd38      	pop	{r3, r4, r5, pc}
 8011274:	2400c910 	.word	0x2400c910

08011278 <_lseek_r>:
 8011278:	b538      	push	{r3, r4, r5, lr}
 801127a:	4d07      	ldr	r5, [pc, #28]	; (8011298 <_lseek_r+0x20>)
 801127c:	4604      	mov	r4, r0
 801127e:	4608      	mov	r0, r1
 8011280:	4611      	mov	r1, r2
 8011282:	2200      	movs	r2, #0
 8011284:	602a      	str	r2, [r5, #0]
 8011286:	461a      	mov	r2, r3
 8011288:	f7f1 fac4 	bl	8002814 <_lseek>
 801128c:	1c43      	adds	r3, r0, #1
 801128e:	d102      	bne.n	8011296 <_lseek_r+0x1e>
 8011290:	682b      	ldr	r3, [r5, #0]
 8011292:	b103      	cbz	r3, 8011296 <_lseek_r+0x1e>
 8011294:	6023      	str	r3, [r4, #0]
 8011296:	bd38      	pop	{r3, r4, r5, pc}
 8011298:	2400c910 	.word	0x2400c910

0801129c <_read_r>:
 801129c:	b538      	push	{r3, r4, r5, lr}
 801129e:	4d07      	ldr	r5, [pc, #28]	; (80112bc <_read_r+0x20>)
 80112a0:	4604      	mov	r4, r0
 80112a2:	4608      	mov	r0, r1
 80112a4:	4611      	mov	r1, r2
 80112a6:	2200      	movs	r2, #0
 80112a8:	602a      	str	r2, [r5, #0]
 80112aa:	461a      	mov	r2, r3
 80112ac:	f7f1 fa52 	bl	8002754 <_read>
 80112b0:	1c43      	adds	r3, r0, #1
 80112b2:	d102      	bne.n	80112ba <_read_r+0x1e>
 80112b4:	682b      	ldr	r3, [r5, #0]
 80112b6:	b103      	cbz	r3, 80112ba <_read_r+0x1e>
 80112b8:	6023      	str	r3, [r4, #0]
 80112ba:	bd38      	pop	{r3, r4, r5, pc}
 80112bc:	2400c910 	.word	0x2400c910

080112c0 <_write_r>:
 80112c0:	b538      	push	{r3, r4, r5, lr}
 80112c2:	4d07      	ldr	r5, [pc, #28]	; (80112e0 <_write_r+0x20>)
 80112c4:	4604      	mov	r4, r0
 80112c6:	4608      	mov	r0, r1
 80112c8:	4611      	mov	r1, r2
 80112ca:	2200      	movs	r2, #0
 80112cc:	602a      	str	r2, [r5, #0]
 80112ce:	461a      	mov	r2, r3
 80112d0:	f7f1 fa5d 	bl	800278e <_write>
 80112d4:	1c43      	adds	r3, r0, #1
 80112d6:	d102      	bne.n	80112de <_write_r+0x1e>
 80112d8:	682b      	ldr	r3, [r5, #0]
 80112da:	b103      	cbz	r3, 80112de <_write_r+0x1e>
 80112dc:	6023      	str	r3, [r4, #0]
 80112de:	bd38      	pop	{r3, r4, r5, pc}
 80112e0:	2400c910 	.word	0x2400c910

080112e4 <__errno>:
 80112e4:	4b01      	ldr	r3, [pc, #4]	; (80112ec <__errno+0x8>)
 80112e6:	6818      	ldr	r0, [r3, #0]
 80112e8:	4770      	bx	lr
 80112ea:	bf00      	nop
 80112ec:	240004cc 	.word	0x240004cc

080112f0 <__libc_init_array>:
 80112f0:	b570      	push	{r4, r5, r6, lr}
 80112f2:	4d0d      	ldr	r5, [pc, #52]	; (8011328 <__libc_init_array+0x38>)
 80112f4:	4c0d      	ldr	r4, [pc, #52]	; (801132c <__libc_init_array+0x3c>)
 80112f6:	1b64      	subs	r4, r4, r5
 80112f8:	10a4      	asrs	r4, r4, #2
 80112fa:	2600      	movs	r6, #0
 80112fc:	42a6      	cmp	r6, r4
 80112fe:	d109      	bne.n	8011314 <__libc_init_array+0x24>
 8011300:	4d0b      	ldr	r5, [pc, #44]	; (8011330 <__libc_init_array+0x40>)
 8011302:	4c0c      	ldr	r4, [pc, #48]	; (8011334 <__libc_init_array+0x44>)
 8011304:	f001 fc04 	bl	8012b10 <_init>
 8011308:	1b64      	subs	r4, r4, r5
 801130a:	10a4      	asrs	r4, r4, #2
 801130c:	2600      	movs	r6, #0
 801130e:	42a6      	cmp	r6, r4
 8011310:	d105      	bne.n	801131e <__libc_init_array+0x2e>
 8011312:	bd70      	pop	{r4, r5, r6, pc}
 8011314:	f855 3b04 	ldr.w	r3, [r5], #4
 8011318:	4798      	blx	r3
 801131a:	3601      	adds	r6, #1
 801131c:	e7ee      	b.n	80112fc <__libc_init_array+0xc>
 801131e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011322:	4798      	blx	r3
 8011324:	3601      	adds	r6, #1
 8011326:	e7f2      	b.n	801130e <__libc_init_array+0x1e>
 8011328:	08012e38 	.word	0x08012e38
 801132c:	08012e38 	.word	0x08012e38
 8011330:	08012e38 	.word	0x08012e38
 8011334:	08012e3c 	.word	0x08012e3c

08011338 <__retarget_lock_init_recursive>:
 8011338:	4770      	bx	lr

0801133a <__retarget_lock_acquire_recursive>:
 801133a:	4770      	bx	lr

0801133c <__retarget_lock_release_recursive>:
 801133c:	4770      	bx	lr
	...

08011340 <_free_r>:
 8011340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011342:	2900      	cmp	r1, #0
 8011344:	d044      	beq.n	80113d0 <_free_r+0x90>
 8011346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801134a:	9001      	str	r0, [sp, #4]
 801134c:	2b00      	cmp	r3, #0
 801134e:	f1a1 0404 	sub.w	r4, r1, #4
 8011352:	bfb8      	it	lt
 8011354:	18e4      	addlt	r4, r4, r3
 8011356:	f000 f8df 	bl	8011518 <__malloc_lock>
 801135a:	4a1e      	ldr	r2, [pc, #120]	; (80113d4 <_free_r+0x94>)
 801135c:	9801      	ldr	r0, [sp, #4]
 801135e:	6813      	ldr	r3, [r2, #0]
 8011360:	b933      	cbnz	r3, 8011370 <_free_r+0x30>
 8011362:	6063      	str	r3, [r4, #4]
 8011364:	6014      	str	r4, [r2, #0]
 8011366:	b003      	add	sp, #12
 8011368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801136c:	f000 b8da 	b.w	8011524 <__malloc_unlock>
 8011370:	42a3      	cmp	r3, r4
 8011372:	d908      	bls.n	8011386 <_free_r+0x46>
 8011374:	6825      	ldr	r5, [r4, #0]
 8011376:	1961      	adds	r1, r4, r5
 8011378:	428b      	cmp	r3, r1
 801137a:	bf01      	itttt	eq
 801137c:	6819      	ldreq	r1, [r3, #0]
 801137e:	685b      	ldreq	r3, [r3, #4]
 8011380:	1949      	addeq	r1, r1, r5
 8011382:	6021      	streq	r1, [r4, #0]
 8011384:	e7ed      	b.n	8011362 <_free_r+0x22>
 8011386:	461a      	mov	r2, r3
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	b10b      	cbz	r3, 8011390 <_free_r+0x50>
 801138c:	42a3      	cmp	r3, r4
 801138e:	d9fa      	bls.n	8011386 <_free_r+0x46>
 8011390:	6811      	ldr	r1, [r2, #0]
 8011392:	1855      	adds	r5, r2, r1
 8011394:	42a5      	cmp	r5, r4
 8011396:	d10b      	bne.n	80113b0 <_free_r+0x70>
 8011398:	6824      	ldr	r4, [r4, #0]
 801139a:	4421      	add	r1, r4
 801139c:	1854      	adds	r4, r2, r1
 801139e:	42a3      	cmp	r3, r4
 80113a0:	6011      	str	r1, [r2, #0]
 80113a2:	d1e0      	bne.n	8011366 <_free_r+0x26>
 80113a4:	681c      	ldr	r4, [r3, #0]
 80113a6:	685b      	ldr	r3, [r3, #4]
 80113a8:	6053      	str	r3, [r2, #4]
 80113aa:	440c      	add	r4, r1
 80113ac:	6014      	str	r4, [r2, #0]
 80113ae:	e7da      	b.n	8011366 <_free_r+0x26>
 80113b0:	d902      	bls.n	80113b8 <_free_r+0x78>
 80113b2:	230c      	movs	r3, #12
 80113b4:	6003      	str	r3, [r0, #0]
 80113b6:	e7d6      	b.n	8011366 <_free_r+0x26>
 80113b8:	6825      	ldr	r5, [r4, #0]
 80113ba:	1961      	adds	r1, r4, r5
 80113bc:	428b      	cmp	r3, r1
 80113be:	bf04      	itt	eq
 80113c0:	6819      	ldreq	r1, [r3, #0]
 80113c2:	685b      	ldreq	r3, [r3, #4]
 80113c4:	6063      	str	r3, [r4, #4]
 80113c6:	bf04      	itt	eq
 80113c8:	1949      	addeq	r1, r1, r5
 80113ca:	6021      	streq	r1, [r4, #0]
 80113cc:	6054      	str	r4, [r2, #4]
 80113ce:	e7ca      	b.n	8011366 <_free_r+0x26>
 80113d0:	b003      	add	sp, #12
 80113d2:	bd30      	pop	{r4, r5, pc}
 80113d4:	2400c918 	.word	0x2400c918

080113d8 <sbrk_aligned>:
 80113d8:	b570      	push	{r4, r5, r6, lr}
 80113da:	4e0e      	ldr	r6, [pc, #56]	; (8011414 <sbrk_aligned+0x3c>)
 80113dc:	460c      	mov	r4, r1
 80113de:	6831      	ldr	r1, [r6, #0]
 80113e0:	4605      	mov	r5, r0
 80113e2:	b911      	cbnz	r1, 80113ea <sbrk_aligned+0x12>
 80113e4:	f000 fcf0 	bl	8011dc8 <_sbrk_r>
 80113e8:	6030      	str	r0, [r6, #0]
 80113ea:	4621      	mov	r1, r4
 80113ec:	4628      	mov	r0, r5
 80113ee:	f000 fceb 	bl	8011dc8 <_sbrk_r>
 80113f2:	1c43      	adds	r3, r0, #1
 80113f4:	d00a      	beq.n	801140c <sbrk_aligned+0x34>
 80113f6:	1cc4      	adds	r4, r0, #3
 80113f8:	f024 0403 	bic.w	r4, r4, #3
 80113fc:	42a0      	cmp	r0, r4
 80113fe:	d007      	beq.n	8011410 <sbrk_aligned+0x38>
 8011400:	1a21      	subs	r1, r4, r0
 8011402:	4628      	mov	r0, r5
 8011404:	f000 fce0 	bl	8011dc8 <_sbrk_r>
 8011408:	3001      	adds	r0, #1
 801140a:	d101      	bne.n	8011410 <sbrk_aligned+0x38>
 801140c:	f04f 34ff 	mov.w	r4, #4294967295
 8011410:	4620      	mov	r0, r4
 8011412:	bd70      	pop	{r4, r5, r6, pc}
 8011414:	2400c91c 	.word	0x2400c91c

08011418 <_malloc_r>:
 8011418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801141c:	1ccd      	adds	r5, r1, #3
 801141e:	f025 0503 	bic.w	r5, r5, #3
 8011422:	3508      	adds	r5, #8
 8011424:	2d0c      	cmp	r5, #12
 8011426:	bf38      	it	cc
 8011428:	250c      	movcc	r5, #12
 801142a:	2d00      	cmp	r5, #0
 801142c:	4607      	mov	r7, r0
 801142e:	db01      	blt.n	8011434 <_malloc_r+0x1c>
 8011430:	42a9      	cmp	r1, r5
 8011432:	d905      	bls.n	8011440 <_malloc_r+0x28>
 8011434:	230c      	movs	r3, #12
 8011436:	603b      	str	r3, [r7, #0]
 8011438:	2600      	movs	r6, #0
 801143a:	4630      	mov	r0, r6
 801143c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011440:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011514 <_malloc_r+0xfc>
 8011444:	f000 f868 	bl	8011518 <__malloc_lock>
 8011448:	f8d8 3000 	ldr.w	r3, [r8]
 801144c:	461c      	mov	r4, r3
 801144e:	bb5c      	cbnz	r4, 80114a8 <_malloc_r+0x90>
 8011450:	4629      	mov	r1, r5
 8011452:	4638      	mov	r0, r7
 8011454:	f7ff ffc0 	bl	80113d8 <sbrk_aligned>
 8011458:	1c43      	adds	r3, r0, #1
 801145a:	4604      	mov	r4, r0
 801145c:	d155      	bne.n	801150a <_malloc_r+0xf2>
 801145e:	f8d8 4000 	ldr.w	r4, [r8]
 8011462:	4626      	mov	r6, r4
 8011464:	2e00      	cmp	r6, #0
 8011466:	d145      	bne.n	80114f4 <_malloc_r+0xdc>
 8011468:	2c00      	cmp	r4, #0
 801146a:	d048      	beq.n	80114fe <_malloc_r+0xe6>
 801146c:	6823      	ldr	r3, [r4, #0]
 801146e:	4631      	mov	r1, r6
 8011470:	4638      	mov	r0, r7
 8011472:	eb04 0903 	add.w	r9, r4, r3
 8011476:	f000 fca7 	bl	8011dc8 <_sbrk_r>
 801147a:	4581      	cmp	r9, r0
 801147c:	d13f      	bne.n	80114fe <_malloc_r+0xe6>
 801147e:	6821      	ldr	r1, [r4, #0]
 8011480:	1a6d      	subs	r5, r5, r1
 8011482:	4629      	mov	r1, r5
 8011484:	4638      	mov	r0, r7
 8011486:	f7ff ffa7 	bl	80113d8 <sbrk_aligned>
 801148a:	3001      	adds	r0, #1
 801148c:	d037      	beq.n	80114fe <_malloc_r+0xe6>
 801148e:	6823      	ldr	r3, [r4, #0]
 8011490:	442b      	add	r3, r5
 8011492:	6023      	str	r3, [r4, #0]
 8011494:	f8d8 3000 	ldr.w	r3, [r8]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d038      	beq.n	801150e <_malloc_r+0xf6>
 801149c:	685a      	ldr	r2, [r3, #4]
 801149e:	42a2      	cmp	r2, r4
 80114a0:	d12b      	bne.n	80114fa <_malloc_r+0xe2>
 80114a2:	2200      	movs	r2, #0
 80114a4:	605a      	str	r2, [r3, #4]
 80114a6:	e00f      	b.n	80114c8 <_malloc_r+0xb0>
 80114a8:	6822      	ldr	r2, [r4, #0]
 80114aa:	1b52      	subs	r2, r2, r5
 80114ac:	d41f      	bmi.n	80114ee <_malloc_r+0xd6>
 80114ae:	2a0b      	cmp	r2, #11
 80114b0:	d917      	bls.n	80114e2 <_malloc_r+0xca>
 80114b2:	1961      	adds	r1, r4, r5
 80114b4:	42a3      	cmp	r3, r4
 80114b6:	6025      	str	r5, [r4, #0]
 80114b8:	bf18      	it	ne
 80114ba:	6059      	strne	r1, [r3, #4]
 80114bc:	6863      	ldr	r3, [r4, #4]
 80114be:	bf08      	it	eq
 80114c0:	f8c8 1000 	streq.w	r1, [r8]
 80114c4:	5162      	str	r2, [r4, r5]
 80114c6:	604b      	str	r3, [r1, #4]
 80114c8:	4638      	mov	r0, r7
 80114ca:	f104 060b 	add.w	r6, r4, #11
 80114ce:	f000 f829 	bl	8011524 <__malloc_unlock>
 80114d2:	f026 0607 	bic.w	r6, r6, #7
 80114d6:	1d23      	adds	r3, r4, #4
 80114d8:	1af2      	subs	r2, r6, r3
 80114da:	d0ae      	beq.n	801143a <_malloc_r+0x22>
 80114dc:	1b9b      	subs	r3, r3, r6
 80114de:	50a3      	str	r3, [r4, r2]
 80114e0:	e7ab      	b.n	801143a <_malloc_r+0x22>
 80114e2:	42a3      	cmp	r3, r4
 80114e4:	6862      	ldr	r2, [r4, #4]
 80114e6:	d1dd      	bne.n	80114a4 <_malloc_r+0x8c>
 80114e8:	f8c8 2000 	str.w	r2, [r8]
 80114ec:	e7ec      	b.n	80114c8 <_malloc_r+0xb0>
 80114ee:	4623      	mov	r3, r4
 80114f0:	6864      	ldr	r4, [r4, #4]
 80114f2:	e7ac      	b.n	801144e <_malloc_r+0x36>
 80114f4:	4634      	mov	r4, r6
 80114f6:	6876      	ldr	r6, [r6, #4]
 80114f8:	e7b4      	b.n	8011464 <_malloc_r+0x4c>
 80114fa:	4613      	mov	r3, r2
 80114fc:	e7cc      	b.n	8011498 <_malloc_r+0x80>
 80114fe:	230c      	movs	r3, #12
 8011500:	603b      	str	r3, [r7, #0]
 8011502:	4638      	mov	r0, r7
 8011504:	f000 f80e 	bl	8011524 <__malloc_unlock>
 8011508:	e797      	b.n	801143a <_malloc_r+0x22>
 801150a:	6025      	str	r5, [r4, #0]
 801150c:	e7dc      	b.n	80114c8 <_malloc_r+0xb0>
 801150e:	605b      	str	r3, [r3, #4]
 8011510:	deff      	udf	#255	; 0xff
 8011512:	bf00      	nop
 8011514:	2400c918 	.word	0x2400c918

08011518 <__malloc_lock>:
 8011518:	4801      	ldr	r0, [pc, #4]	; (8011520 <__malloc_lock+0x8>)
 801151a:	f7ff bf0e 	b.w	801133a <__retarget_lock_acquire_recursive>
 801151e:	bf00      	nop
 8011520:	2400c914 	.word	0x2400c914

08011524 <__malloc_unlock>:
 8011524:	4801      	ldr	r0, [pc, #4]	; (801152c <__malloc_unlock+0x8>)
 8011526:	f7ff bf09 	b.w	801133c <__retarget_lock_release_recursive>
 801152a:	bf00      	nop
 801152c:	2400c914 	.word	0x2400c914

08011530 <__sfputc_r>:
 8011530:	6893      	ldr	r3, [r2, #8]
 8011532:	3b01      	subs	r3, #1
 8011534:	2b00      	cmp	r3, #0
 8011536:	b410      	push	{r4}
 8011538:	6093      	str	r3, [r2, #8]
 801153a:	da08      	bge.n	801154e <__sfputc_r+0x1e>
 801153c:	6994      	ldr	r4, [r2, #24]
 801153e:	42a3      	cmp	r3, r4
 8011540:	db01      	blt.n	8011546 <__sfputc_r+0x16>
 8011542:	290a      	cmp	r1, #10
 8011544:	d103      	bne.n	801154e <__sfputc_r+0x1e>
 8011546:	f85d 4b04 	ldr.w	r4, [sp], #4
 801154a:	f000 bba7 	b.w	8011c9c <__swbuf_r>
 801154e:	6813      	ldr	r3, [r2, #0]
 8011550:	1c58      	adds	r0, r3, #1
 8011552:	6010      	str	r0, [r2, #0]
 8011554:	7019      	strb	r1, [r3, #0]
 8011556:	4608      	mov	r0, r1
 8011558:	f85d 4b04 	ldr.w	r4, [sp], #4
 801155c:	4770      	bx	lr

0801155e <__sfputs_r>:
 801155e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011560:	4606      	mov	r6, r0
 8011562:	460f      	mov	r7, r1
 8011564:	4614      	mov	r4, r2
 8011566:	18d5      	adds	r5, r2, r3
 8011568:	42ac      	cmp	r4, r5
 801156a:	d101      	bne.n	8011570 <__sfputs_r+0x12>
 801156c:	2000      	movs	r0, #0
 801156e:	e007      	b.n	8011580 <__sfputs_r+0x22>
 8011570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011574:	463a      	mov	r2, r7
 8011576:	4630      	mov	r0, r6
 8011578:	f7ff ffda 	bl	8011530 <__sfputc_r>
 801157c:	1c43      	adds	r3, r0, #1
 801157e:	d1f3      	bne.n	8011568 <__sfputs_r+0xa>
 8011580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011584 <_vfiprintf_r>:
 8011584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011588:	460d      	mov	r5, r1
 801158a:	b09d      	sub	sp, #116	; 0x74
 801158c:	4614      	mov	r4, r2
 801158e:	4698      	mov	r8, r3
 8011590:	4606      	mov	r6, r0
 8011592:	b118      	cbz	r0, 801159c <_vfiprintf_r+0x18>
 8011594:	6a03      	ldr	r3, [r0, #32]
 8011596:	b90b      	cbnz	r3, 801159c <_vfiprintf_r+0x18>
 8011598:	f7ff fdc2 	bl	8011120 <__sinit>
 801159c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801159e:	07d9      	lsls	r1, r3, #31
 80115a0:	d405      	bmi.n	80115ae <_vfiprintf_r+0x2a>
 80115a2:	89ab      	ldrh	r3, [r5, #12]
 80115a4:	059a      	lsls	r2, r3, #22
 80115a6:	d402      	bmi.n	80115ae <_vfiprintf_r+0x2a>
 80115a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115aa:	f7ff fec6 	bl	801133a <__retarget_lock_acquire_recursive>
 80115ae:	89ab      	ldrh	r3, [r5, #12]
 80115b0:	071b      	lsls	r3, r3, #28
 80115b2:	d501      	bpl.n	80115b8 <_vfiprintf_r+0x34>
 80115b4:	692b      	ldr	r3, [r5, #16]
 80115b6:	b99b      	cbnz	r3, 80115e0 <_vfiprintf_r+0x5c>
 80115b8:	4629      	mov	r1, r5
 80115ba:	4630      	mov	r0, r6
 80115bc:	f000 fbac 	bl	8011d18 <__swsetup_r>
 80115c0:	b170      	cbz	r0, 80115e0 <_vfiprintf_r+0x5c>
 80115c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115c4:	07dc      	lsls	r4, r3, #31
 80115c6:	d504      	bpl.n	80115d2 <_vfiprintf_r+0x4e>
 80115c8:	f04f 30ff 	mov.w	r0, #4294967295
 80115cc:	b01d      	add	sp, #116	; 0x74
 80115ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d2:	89ab      	ldrh	r3, [r5, #12]
 80115d4:	0598      	lsls	r0, r3, #22
 80115d6:	d4f7      	bmi.n	80115c8 <_vfiprintf_r+0x44>
 80115d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115da:	f7ff feaf 	bl	801133c <__retarget_lock_release_recursive>
 80115de:	e7f3      	b.n	80115c8 <_vfiprintf_r+0x44>
 80115e0:	2300      	movs	r3, #0
 80115e2:	9309      	str	r3, [sp, #36]	; 0x24
 80115e4:	2320      	movs	r3, #32
 80115e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80115ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80115ee:	2330      	movs	r3, #48	; 0x30
 80115f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80117a4 <_vfiprintf_r+0x220>
 80115f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115f8:	f04f 0901 	mov.w	r9, #1
 80115fc:	4623      	mov	r3, r4
 80115fe:	469a      	mov	sl, r3
 8011600:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011604:	b10a      	cbz	r2, 801160a <_vfiprintf_r+0x86>
 8011606:	2a25      	cmp	r2, #37	; 0x25
 8011608:	d1f9      	bne.n	80115fe <_vfiprintf_r+0x7a>
 801160a:	ebba 0b04 	subs.w	fp, sl, r4
 801160e:	d00b      	beq.n	8011628 <_vfiprintf_r+0xa4>
 8011610:	465b      	mov	r3, fp
 8011612:	4622      	mov	r2, r4
 8011614:	4629      	mov	r1, r5
 8011616:	4630      	mov	r0, r6
 8011618:	f7ff ffa1 	bl	801155e <__sfputs_r>
 801161c:	3001      	adds	r0, #1
 801161e:	f000 80a9 	beq.w	8011774 <_vfiprintf_r+0x1f0>
 8011622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011624:	445a      	add	r2, fp
 8011626:	9209      	str	r2, [sp, #36]	; 0x24
 8011628:	f89a 3000 	ldrb.w	r3, [sl]
 801162c:	2b00      	cmp	r3, #0
 801162e:	f000 80a1 	beq.w	8011774 <_vfiprintf_r+0x1f0>
 8011632:	2300      	movs	r3, #0
 8011634:	f04f 32ff 	mov.w	r2, #4294967295
 8011638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801163c:	f10a 0a01 	add.w	sl, sl, #1
 8011640:	9304      	str	r3, [sp, #16]
 8011642:	9307      	str	r3, [sp, #28]
 8011644:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011648:	931a      	str	r3, [sp, #104]	; 0x68
 801164a:	4654      	mov	r4, sl
 801164c:	2205      	movs	r2, #5
 801164e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011652:	4854      	ldr	r0, [pc, #336]	; (80117a4 <_vfiprintf_r+0x220>)
 8011654:	f7ee fe5c 	bl	8000310 <memchr>
 8011658:	9a04      	ldr	r2, [sp, #16]
 801165a:	b9d8      	cbnz	r0, 8011694 <_vfiprintf_r+0x110>
 801165c:	06d1      	lsls	r1, r2, #27
 801165e:	bf44      	itt	mi
 8011660:	2320      	movmi	r3, #32
 8011662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011666:	0713      	lsls	r3, r2, #28
 8011668:	bf44      	itt	mi
 801166a:	232b      	movmi	r3, #43	; 0x2b
 801166c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011670:	f89a 3000 	ldrb.w	r3, [sl]
 8011674:	2b2a      	cmp	r3, #42	; 0x2a
 8011676:	d015      	beq.n	80116a4 <_vfiprintf_r+0x120>
 8011678:	9a07      	ldr	r2, [sp, #28]
 801167a:	4654      	mov	r4, sl
 801167c:	2000      	movs	r0, #0
 801167e:	f04f 0c0a 	mov.w	ip, #10
 8011682:	4621      	mov	r1, r4
 8011684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011688:	3b30      	subs	r3, #48	; 0x30
 801168a:	2b09      	cmp	r3, #9
 801168c:	d94d      	bls.n	801172a <_vfiprintf_r+0x1a6>
 801168e:	b1b0      	cbz	r0, 80116be <_vfiprintf_r+0x13a>
 8011690:	9207      	str	r2, [sp, #28]
 8011692:	e014      	b.n	80116be <_vfiprintf_r+0x13a>
 8011694:	eba0 0308 	sub.w	r3, r0, r8
 8011698:	fa09 f303 	lsl.w	r3, r9, r3
 801169c:	4313      	orrs	r3, r2
 801169e:	9304      	str	r3, [sp, #16]
 80116a0:	46a2      	mov	sl, r4
 80116a2:	e7d2      	b.n	801164a <_vfiprintf_r+0xc6>
 80116a4:	9b03      	ldr	r3, [sp, #12]
 80116a6:	1d19      	adds	r1, r3, #4
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	9103      	str	r1, [sp, #12]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	bfbb      	ittet	lt
 80116b0:	425b      	neglt	r3, r3
 80116b2:	f042 0202 	orrlt.w	r2, r2, #2
 80116b6:	9307      	strge	r3, [sp, #28]
 80116b8:	9307      	strlt	r3, [sp, #28]
 80116ba:	bfb8      	it	lt
 80116bc:	9204      	strlt	r2, [sp, #16]
 80116be:	7823      	ldrb	r3, [r4, #0]
 80116c0:	2b2e      	cmp	r3, #46	; 0x2e
 80116c2:	d10c      	bne.n	80116de <_vfiprintf_r+0x15a>
 80116c4:	7863      	ldrb	r3, [r4, #1]
 80116c6:	2b2a      	cmp	r3, #42	; 0x2a
 80116c8:	d134      	bne.n	8011734 <_vfiprintf_r+0x1b0>
 80116ca:	9b03      	ldr	r3, [sp, #12]
 80116cc:	1d1a      	adds	r2, r3, #4
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	9203      	str	r2, [sp, #12]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	bfb8      	it	lt
 80116d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80116da:	3402      	adds	r4, #2
 80116dc:	9305      	str	r3, [sp, #20]
 80116de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80117b4 <_vfiprintf_r+0x230>
 80116e2:	7821      	ldrb	r1, [r4, #0]
 80116e4:	2203      	movs	r2, #3
 80116e6:	4650      	mov	r0, sl
 80116e8:	f7ee fe12 	bl	8000310 <memchr>
 80116ec:	b138      	cbz	r0, 80116fe <_vfiprintf_r+0x17a>
 80116ee:	9b04      	ldr	r3, [sp, #16]
 80116f0:	eba0 000a 	sub.w	r0, r0, sl
 80116f4:	2240      	movs	r2, #64	; 0x40
 80116f6:	4082      	lsls	r2, r0
 80116f8:	4313      	orrs	r3, r2
 80116fa:	3401      	adds	r4, #1
 80116fc:	9304      	str	r3, [sp, #16]
 80116fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011702:	4829      	ldr	r0, [pc, #164]	; (80117a8 <_vfiprintf_r+0x224>)
 8011704:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011708:	2206      	movs	r2, #6
 801170a:	f7ee fe01 	bl	8000310 <memchr>
 801170e:	2800      	cmp	r0, #0
 8011710:	d03f      	beq.n	8011792 <_vfiprintf_r+0x20e>
 8011712:	4b26      	ldr	r3, [pc, #152]	; (80117ac <_vfiprintf_r+0x228>)
 8011714:	bb1b      	cbnz	r3, 801175e <_vfiprintf_r+0x1da>
 8011716:	9b03      	ldr	r3, [sp, #12]
 8011718:	3307      	adds	r3, #7
 801171a:	f023 0307 	bic.w	r3, r3, #7
 801171e:	3308      	adds	r3, #8
 8011720:	9303      	str	r3, [sp, #12]
 8011722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011724:	443b      	add	r3, r7
 8011726:	9309      	str	r3, [sp, #36]	; 0x24
 8011728:	e768      	b.n	80115fc <_vfiprintf_r+0x78>
 801172a:	fb0c 3202 	mla	r2, ip, r2, r3
 801172e:	460c      	mov	r4, r1
 8011730:	2001      	movs	r0, #1
 8011732:	e7a6      	b.n	8011682 <_vfiprintf_r+0xfe>
 8011734:	2300      	movs	r3, #0
 8011736:	3401      	adds	r4, #1
 8011738:	9305      	str	r3, [sp, #20]
 801173a:	4619      	mov	r1, r3
 801173c:	f04f 0c0a 	mov.w	ip, #10
 8011740:	4620      	mov	r0, r4
 8011742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011746:	3a30      	subs	r2, #48	; 0x30
 8011748:	2a09      	cmp	r2, #9
 801174a:	d903      	bls.n	8011754 <_vfiprintf_r+0x1d0>
 801174c:	2b00      	cmp	r3, #0
 801174e:	d0c6      	beq.n	80116de <_vfiprintf_r+0x15a>
 8011750:	9105      	str	r1, [sp, #20]
 8011752:	e7c4      	b.n	80116de <_vfiprintf_r+0x15a>
 8011754:	fb0c 2101 	mla	r1, ip, r1, r2
 8011758:	4604      	mov	r4, r0
 801175a:	2301      	movs	r3, #1
 801175c:	e7f0      	b.n	8011740 <_vfiprintf_r+0x1bc>
 801175e:	ab03      	add	r3, sp, #12
 8011760:	9300      	str	r3, [sp, #0]
 8011762:	462a      	mov	r2, r5
 8011764:	4b12      	ldr	r3, [pc, #72]	; (80117b0 <_vfiprintf_r+0x22c>)
 8011766:	a904      	add	r1, sp, #16
 8011768:	4630      	mov	r0, r6
 801176a:	f3af 8000 	nop.w
 801176e:	4607      	mov	r7, r0
 8011770:	1c78      	adds	r0, r7, #1
 8011772:	d1d6      	bne.n	8011722 <_vfiprintf_r+0x19e>
 8011774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011776:	07d9      	lsls	r1, r3, #31
 8011778:	d405      	bmi.n	8011786 <_vfiprintf_r+0x202>
 801177a:	89ab      	ldrh	r3, [r5, #12]
 801177c:	059a      	lsls	r2, r3, #22
 801177e:	d402      	bmi.n	8011786 <_vfiprintf_r+0x202>
 8011780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011782:	f7ff fddb 	bl	801133c <__retarget_lock_release_recursive>
 8011786:	89ab      	ldrh	r3, [r5, #12]
 8011788:	065b      	lsls	r3, r3, #25
 801178a:	f53f af1d 	bmi.w	80115c8 <_vfiprintf_r+0x44>
 801178e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011790:	e71c      	b.n	80115cc <_vfiprintf_r+0x48>
 8011792:	ab03      	add	r3, sp, #12
 8011794:	9300      	str	r3, [sp, #0]
 8011796:	462a      	mov	r2, r5
 8011798:	4b05      	ldr	r3, [pc, #20]	; (80117b0 <_vfiprintf_r+0x22c>)
 801179a:	a904      	add	r1, sp, #16
 801179c:	4630      	mov	r0, r6
 801179e:	f000 f879 	bl	8011894 <_printf_i>
 80117a2:	e7e4      	b.n	801176e <_vfiprintf_r+0x1ea>
 80117a4:	08012c28 	.word	0x08012c28
 80117a8:	08012c32 	.word	0x08012c32
 80117ac:	00000000 	.word	0x00000000
 80117b0:	0801155f 	.word	0x0801155f
 80117b4:	08012c2e 	.word	0x08012c2e

080117b8 <_printf_common>:
 80117b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117bc:	4616      	mov	r6, r2
 80117be:	4699      	mov	r9, r3
 80117c0:	688a      	ldr	r2, [r1, #8]
 80117c2:	690b      	ldr	r3, [r1, #16]
 80117c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80117c8:	4293      	cmp	r3, r2
 80117ca:	bfb8      	it	lt
 80117cc:	4613      	movlt	r3, r2
 80117ce:	6033      	str	r3, [r6, #0]
 80117d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80117d4:	4607      	mov	r7, r0
 80117d6:	460c      	mov	r4, r1
 80117d8:	b10a      	cbz	r2, 80117de <_printf_common+0x26>
 80117da:	3301      	adds	r3, #1
 80117dc:	6033      	str	r3, [r6, #0]
 80117de:	6823      	ldr	r3, [r4, #0]
 80117e0:	0699      	lsls	r1, r3, #26
 80117e2:	bf42      	ittt	mi
 80117e4:	6833      	ldrmi	r3, [r6, #0]
 80117e6:	3302      	addmi	r3, #2
 80117e8:	6033      	strmi	r3, [r6, #0]
 80117ea:	6825      	ldr	r5, [r4, #0]
 80117ec:	f015 0506 	ands.w	r5, r5, #6
 80117f0:	d106      	bne.n	8011800 <_printf_common+0x48>
 80117f2:	f104 0a19 	add.w	sl, r4, #25
 80117f6:	68e3      	ldr	r3, [r4, #12]
 80117f8:	6832      	ldr	r2, [r6, #0]
 80117fa:	1a9b      	subs	r3, r3, r2
 80117fc:	42ab      	cmp	r3, r5
 80117fe:	dc26      	bgt.n	801184e <_printf_common+0x96>
 8011800:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011804:	1e13      	subs	r3, r2, #0
 8011806:	6822      	ldr	r2, [r4, #0]
 8011808:	bf18      	it	ne
 801180a:	2301      	movne	r3, #1
 801180c:	0692      	lsls	r2, r2, #26
 801180e:	d42b      	bmi.n	8011868 <_printf_common+0xb0>
 8011810:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011814:	4649      	mov	r1, r9
 8011816:	4638      	mov	r0, r7
 8011818:	47c0      	blx	r8
 801181a:	3001      	adds	r0, #1
 801181c:	d01e      	beq.n	801185c <_printf_common+0xa4>
 801181e:	6823      	ldr	r3, [r4, #0]
 8011820:	6922      	ldr	r2, [r4, #16]
 8011822:	f003 0306 	and.w	r3, r3, #6
 8011826:	2b04      	cmp	r3, #4
 8011828:	bf02      	ittt	eq
 801182a:	68e5      	ldreq	r5, [r4, #12]
 801182c:	6833      	ldreq	r3, [r6, #0]
 801182e:	1aed      	subeq	r5, r5, r3
 8011830:	68a3      	ldr	r3, [r4, #8]
 8011832:	bf0c      	ite	eq
 8011834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011838:	2500      	movne	r5, #0
 801183a:	4293      	cmp	r3, r2
 801183c:	bfc4      	itt	gt
 801183e:	1a9b      	subgt	r3, r3, r2
 8011840:	18ed      	addgt	r5, r5, r3
 8011842:	2600      	movs	r6, #0
 8011844:	341a      	adds	r4, #26
 8011846:	42b5      	cmp	r5, r6
 8011848:	d11a      	bne.n	8011880 <_printf_common+0xc8>
 801184a:	2000      	movs	r0, #0
 801184c:	e008      	b.n	8011860 <_printf_common+0xa8>
 801184e:	2301      	movs	r3, #1
 8011850:	4652      	mov	r2, sl
 8011852:	4649      	mov	r1, r9
 8011854:	4638      	mov	r0, r7
 8011856:	47c0      	blx	r8
 8011858:	3001      	adds	r0, #1
 801185a:	d103      	bne.n	8011864 <_printf_common+0xac>
 801185c:	f04f 30ff 	mov.w	r0, #4294967295
 8011860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011864:	3501      	adds	r5, #1
 8011866:	e7c6      	b.n	80117f6 <_printf_common+0x3e>
 8011868:	18e1      	adds	r1, r4, r3
 801186a:	1c5a      	adds	r2, r3, #1
 801186c:	2030      	movs	r0, #48	; 0x30
 801186e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011872:	4422      	add	r2, r4
 8011874:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011878:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801187c:	3302      	adds	r3, #2
 801187e:	e7c7      	b.n	8011810 <_printf_common+0x58>
 8011880:	2301      	movs	r3, #1
 8011882:	4622      	mov	r2, r4
 8011884:	4649      	mov	r1, r9
 8011886:	4638      	mov	r0, r7
 8011888:	47c0      	blx	r8
 801188a:	3001      	adds	r0, #1
 801188c:	d0e6      	beq.n	801185c <_printf_common+0xa4>
 801188e:	3601      	adds	r6, #1
 8011890:	e7d9      	b.n	8011846 <_printf_common+0x8e>
	...

08011894 <_printf_i>:
 8011894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011898:	7e0f      	ldrb	r7, [r1, #24]
 801189a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801189c:	2f78      	cmp	r7, #120	; 0x78
 801189e:	4691      	mov	r9, r2
 80118a0:	4680      	mov	r8, r0
 80118a2:	460c      	mov	r4, r1
 80118a4:	469a      	mov	sl, r3
 80118a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80118aa:	d807      	bhi.n	80118bc <_printf_i+0x28>
 80118ac:	2f62      	cmp	r7, #98	; 0x62
 80118ae:	d80a      	bhi.n	80118c6 <_printf_i+0x32>
 80118b0:	2f00      	cmp	r7, #0
 80118b2:	f000 80d4 	beq.w	8011a5e <_printf_i+0x1ca>
 80118b6:	2f58      	cmp	r7, #88	; 0x58
 80118b8:	f000 80c0 	beq.w	8011a3c <_printf_i+0x1a8>
 80118bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80118c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80118c4:	e03a      	b.n	801193c <_printf_i+0xa8>
 80118c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80118ca:	2b15      	cmp	r3, #21
 80118cc:	d8f6      	bhi.n	80118bc <_printf_i+0x28>
 80118ce:	a101      	add	r1, pc, #4	; (adr r1, 80118d4 <_printf_i+0x40>)
 80118d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80118d4:	0801192d 	.word	0x0801192d
 80118d8:	08011941 	.word	0x08011941
 80118dc:	080118bd 	.word	0x080118bd
 80118e0:	080118bd 	.word	0x080118bd
 80118e4:	080118bd 	.word	0x080118bd
 80118e8:	080118bd 	.word	0x080118bd
 80118ec:	08011941 	.word	0x08011941
 80118f0:	080118bd 	.word	0x080118bd
 80118f4:	080118bd 	.word	0x080118bd
 80118f8:	080118bd 	.word	0x080118bd
 80118fc:	080118bd 	.word	0x080118bd
 8011900:	08011a45 	.word	0x08011a45
 8011904:	0801196d 	.word	0x0801196d
 8011908:	080119ff 	.word	0x080119ff
 801190c:	080118bd 	.word	0x080118bd
 8011910:	080118bd 	.word	0x080118bd
 8011914:	08011a67 	.word	0x08011a67
 8011918:	080118bd 	.word	0x080118bd
 801191c:	0801196d 	.word	0x0801196d
 8011920:	080118bd 	.word	0x080118bd
 8011924:	080118bd 	.word	0x080118bd
 8011928:	08011a07 	.word	0x08011a07
 801192c:	682b      	ldr	r3, [r5, #0]
 801192e:	1d1a      	adds	r2, r3, #4
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	602a      	str	r2, [r5, #0]
 8011934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801193c:	2301      	movs	r3, #1
 801193e:	e09f      	b.n	8011a80 <_printf_i+0x1ec>
 8011940:	6820      	ldr	r0, [r4, #0]
 8011942:	682b      	ldr	r3, [r5, #0]
 8011944:	0607      	lsls	r7, r0, #24
 8011946:	f103 0104 	add.w	r1, r3, #4
 801194a:	6029      	str	r1, [r5, #0]
 801194c:	d501      	bpl.n	8011952 <_printf_i+0xbe>
 801194e:	681e      	ldr	r6, [r3, #0]
 8011950:	e003      	b.n	801195a <_printf_i+0xc6>
 8011952:	0646      	lsls	r6, r0, #25
 8011954:	d5fb      	bpl.n	801194e <_printf_i+0xba>
 8011956:	f9b3 6000 	ldrsh.w	r6, [r3]
 801195a:	2e00      	cmp	r6, #0
 801195c:	da03      	bge.n	8011966 <_printf_i+0xd2>
 801195e:	232d      	movs	r3, #45	; 0x2d
 8011960:	4276      	negs	r6, r6
 8011962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011966:	485a      	ldr	r0, [pc, #360]	; (8011ad0 <_printf_i+0x23c>)
 8011968:	230a      	movs	r3, #10
 801196a:	e012      	b.n	8011992 <_printf_i+0xfe>
 801196c:	682b      	ldr	r3, [r5, #0]
 801196e:	6820      	ldr	r0, [r4, #0]
 8011970:	1d19      	adds	r1, r3, #4
 8011972:	6029      	str	r1, [r5, #0]
 8011974:	0605      	lsls	r5, r0, #24
 8011976:	d501      	bpl.n	801197c <_printf_i+0xe8>
 8011978:	681e      	ldr	r6, [r3, #0]
 801197a:	e002      	b.n	8011982 <_printf_i+0xee>
 801197c:	0641      	lsls	r1, r0, #25
 801197e:	d5fb      	bpl.n	8011978 <_printf_i+0xe4>
 8011980:	881e      	ldrh	r6, [r3, #0]
 8011982:	4853      	ldr	r0, [pc, #332]	; (8011ad0 <_printf_i+0x23c>)
 8011984:	2f6f      	cmp	r7, #111	; 0x6f
 8011986:	bf0c      	ite	eq
 8011988:	2308      	moveq	r3, #8
 801198a:	230a      	movne	r3, #10
 801198c:	2100      	movs	r1, #0
 801198e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011992:	6865      	ldr	r5, [r4, #4]
 8011994:	60a5      	str	r5, [r4, #8]
 8011996:	2d00      	cmp	r5, #0
 8011998:	bfa2      	ittt	ge
 801199a:	6821      	ldrge	r1, [r4, #0]
 801199c:	f021 0104 	bicge.w	r1, r1, #4
 80119a0:	6021      	strge	r1, [r4, #0]
 80119a2:	b90e      	cbnz	r6, 80119a8 <_printf_i+0x114>
 80119a4:	2d00      	cmp	r5, #0
 80119a6:	d04b      	beq.n	8011a40 <_printf_i+0x1ac>
 80119a8:	4615      	mov	r5, r2
 80119aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80119ae:	fb03 6711 	mls	r7, r3, r1, r6
 80119b2:	5dc7      	ldrb	r7, [r0, r7]
 80119b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80119b8:	4637      	mov	r7, r6
 80119ba:	42bb      	cmp	r3, r7
 80119bc:	460e      	mov	r6, r1
 80119be:	d9f4      	bls.n	80119aa <_printf_i+0x116>
 80119c0:	2b08      	cmp	r3, #8
 80119c2:	d10b      	bne.n	80119dc <_printf_i+0x148>
 80119c4:	6823      	ldr	r3, [r4, #0]
 80119c6:	07de      	lsls	r6, r3, #31
 80119c8:	d508      	bpl.n	80119dc <_printf_i+0x148>
 80119ca:	6923      	ldr	r3, [r4, #16]
 80119cc:	6861      	ldr	r1, [r4, #4]
 80119ce:	4299      	cmp	r1, r3
 80119d0:	bfde      	ittt	le
 80119d2:	2330      	movle	r3, #48	; 0x30
 80119d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80119d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80119dc:	1b52      	subs	r2, r2, r5
 80119de:	6122      	str	r2, [r4, #16]
 80119e0:	f8cd a000 	str.w	sl, [sp]
 80119e4:	464b      	mov	r3, r9
 80119e6:	aa03      	add	r2, sp, #12
 80119e8:	4621      	mov	r1, r4
 80119ea:	4640      	mov	r0, r8
 80119ec:	f7ff fee4 	bl	80117b8 <_printf_common>
 80119f0:	3001      	adds	r0, #1
 80119f2:	d14a      	bne.n	8011a8a <_printf_i+0x1f6>
 80119f4:	f04f 30ff 	mov.w	r0, #4294967295
 80119f8:	b004      	add	sp, #16
 80119fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119fe:	6823      	ldr	r3, [r4, #0]
 8011a00:	f043 0320 	orr.w	r3, r3, #32
 8011a04:	6023      	str	r3, [r4, #0]
 8011a06:	4833      	ldr	r0, [pc, #204]	; (8011ad4 <_printf_i+0x240>)
 8011a08:	2778      	movs	r7, #120	; 0x78
 8011a0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011a0e:	6823      	ldr	r3, [r4, #0]
 8011a10:	6829      	ldr	r1, [r5, #0]
 8011a12:	061f      	lsls	r7, r3, #24
 8011a14:	f851 6b04 	ldr.w	r6, [r1], #4
 8011a18:	d402      	bmi.n	8011a20 <_printf_i+0x18c>
 8011a1a:	065f      	lsls	r7, r3, #25
 8011a1c:	bf48      	it	mi
 8011a1e:	b2b6      	uxthmi	r6, r6
 8011a20:	07df      	lsls	r7, r3, #31
 8011a22:	bf48      	it	mi
 8011a24:	f043 0320 	orrmi.w	r3, r3, #32
 8011a28:	6029      	str	r1, [r5, #0]
 8011a2a:	bf48      	it	mi
 8011a2c:	6023      	strmi	r3, [r4, #0]
 8011a2e:	b91e      	cbnz	r6, 8011a38 <_printf_i+0x1a4>
 8011a30:	6823      	ldr	r3, [r4, #0]
 8011a32:	f023 0320 	bic.w	r3, r3, #32
 8011a36:	6023      	str	r3, [r4, #0]
 8011a38:	2310      	movs	r3, #16
 8011a3a:	e7a7      	b.n	801198c <_printf_i+0xf8>
 8011a3c:	4824      	ldr	r0, [pc, #144]	; (8011ad0 <_printf_i+0x23c>)
 8011a3e:	e7e4      	b.n	8011a0a <_printf_i+0x176>
 8011a40:	4615      	mov	r5, r2
 8011a42:	e7bd      	b.n	80119c0 <_printf_i+0x12c>
 8011a44:	682b      	ldr	r3, [r5, #0]
 8011a46:	6826      	ldr	r6, [r4, #0]
 8011a48:	6961      	ldr	r1, [r4, #20]
 8011a4a:	1d18      	adds	r0, r3, #4
 8011a4c:	6028      	str	r0, [r5, #0]
 8011a4e:	0635      	lsls	r5, r6, #24
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	d501      	bpl.n	8011a58 <_printf_i+0x1c4>
 8011a54:	6019      	str	r1, [r3, #0]
 8011a56:	e002      	b.n	8011a5e <_printf_i+0x1ca>
 8011a58:	0670      	lsls	r0, r6, #25
 8011a5a:	d5fb      	bpl.n	8011a54 <_printf_i+0x1c0>
 8011a5c:	8019      	strh	r1, [r3, #0]
 8011a5e:	2300      	movs	r3, #0
 8011a60:	6123      	str	r3, [r4, #16]
 8011a62:	4615      	mov	r5, r2
 8011a64:	e7bc      	b.n	80119e0 <_printf_i+0x14c>
 8011a66:	682b      	ldr	r3, [r5, #0]
 8011a68:	1d1a      	adds	r2, r3, #4
 8011a6a:	602a      	str	r2, [r5, #0]
 8011a6c:	681d      	ldr	r5, [r3, #0]
 8011a6e:	6862      	ldr	r2, [r4, #4]
 8011a70:	2100      	movs	r1, #0
 8011a72:	4628      	mov	r0, r5
 8011a74:	f7ee fc4c 	bl	8000310 <memchr>
 8011a78:	b108      	cbz	r0, 8011a7e <_printf_i+0x1ea>
 8011a7a:	1b40      	subs	r0, r0, r5
 8011a7c:	6060      	str	r0, [r4, #4]
 8011a7e:	6863      	ldr	r3, [r4, #4]
 8011a80:	6123      	str	r3, [r4, #16]
 8011a82:	2300      	movs	r3, #0
 8011a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a88:	e7aa      	b.n	80119e0 <_printf_i+0x14c>
 8011a8a:	6923      	ldr	r3, [r4, #16]
 8011a8c:	462a      	mov	r2, r5
 8011a8e:	4649      	mov	r1, r9
 8011a90:	4640      	mov	r0, r8
 8011a92:	47d0      	blx	sl
 8011a94:	3001      	adds	r0, #1
 8011a96:	d0ad      	beq.n	80119f4 <_printf_i+0x160>
 8011a98:	6823      	ldr	r3, [r4, #0]
 8011a9a:	079b      	lsls	r3, r3, #30
 8011a9c:	d413      	bmi.n	8011ac6 <_printf_i+0x232>
 8011a9e:	68e0      	ldr	r0, [r4, #12]
 8011aa0:	9b03      	ldr	r3, [sp, #12]
 8011aa2:	4298      	cmp	r0, r3
 8011aa4:	bfb8      	it	lt
 8011aa6:	4618      	movlt	r0, r3
 8011aa8:	e7a6      	b.n	80119f8 <_printf_i+0x164>
 8011aaa:	2301      	movs	r3, #1
 8011aac:	4632      	mov	r2, r6
 8011aae:	4649      	mov	r1, r9
 8011ab0:	4640      	mov	r0, r8
 8011ab2:	47d0      	blx	sl
 8011ab4:	3001      	adds	r0, #1
 8011ab6:	d09d      	beq.n	80119f4 <_printf_i+0x160>
 8011ab8:	3501      	adds	r5, #1
 8011aba:	68e3      	ldr	r3, [r4, #12]
 8011abc:	9903      	ldr	r1, [sp, #12]
 8011abe:	1a5b      	subs	r3, r3, r1
 8011ac0:	42ab      	cmp	r3, r5
 8011ac2:	dcf2      	bgt.n	8011aaa <_printf_i+0x216>
 8011ac4:	e7eb      	b.n	8011a9e <_printf_i+0x20a>
 8011ac6:	2500      	movs	r5, #0
 8011ac8:	f104 0619 	add.w	r6, r4, #25
 8011acc:	e7f5      	b.n	8011aba <_printf_i+0x226>
 8011ace:	bf00      	nop
 8011ad0:	08012c39 	.word	0x08012c39
 8011ad4:	08012c4a 	.word	0x08012c4a

08011ad8 <__sflush_r>:
 8011ad8:	898a      	ldrh	r2, [r1, #12]
 8011ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ade:	4605      	mov	r5, r0
 8011ae0:	0710      	lsls	r0, r2, #28
 8011ae2:	460c      	mov	r4, r1
 8011ae4:	d458      	bmi.n	8011b98 <__sflush_r+0xc0>
 8011ae6:	684b      	ldr	r3, [r1, #4]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	dc05      	bgt.n	8011af8 <__sflush_r+0x20>
 8011aec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	dc02      	bgt.n	8011af8 <__sflush_r+0x20>
 8011af2:	2000      	movs	r0, #0
 8011af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011af8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011afa:	2e00      	cmp	r6, #0
 8011afc:	d0f9      	beq.n	8011af2 <__sflush_r+0x1a>
 8011afe:	2300      	movs	r3, #0
 8011b00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011b04:	682f      	ldr	r7, [r5, #0]
 8011b06:	6a21      	ldr	r1, [r4, #32]
 8011b08:	602b      	str	r3, [r5, #0]
 8011b0a:	d032      	beq.n	8011b72 <__sflush_r+0x9a>
 8011b0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011b0e:	89a3      	ldrh	r3, [r4, #12]
 8011b10:	075a      	lsls	r2, r3, #29
 8011b12:	d505      	bpl.n	8011b20 <__sflush_r+0x48>
 8011b14:	6863      	ldr	r3, [r4, #4]
 8011b16:	1ac0      	subs	r0, r0, r3
 8011b18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011b1a:	b10b      	cbz	r3, 8011b20 <__sflush_r+0x48>
 8011b1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011b1e:	1ac0      	subs	r0, r0, r3
 8011b20:	2300      	movs	r3, #0
 8011b22:	4602      	mov	r2, r0
 8011b24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b26:	6a21      	ldr	r1, [r4, #32]
 8011b28:	4628      	mov	r0, r5
 8011b2a:	47b0      	blx	r6
 8011b2c:	1c43      	adds	r3, r0, #1
 8011b2e:	89a3      	ldrh	r3, [r4, #12]
 8011b30:	d106      	bne.n	8011b40 <__sflush_r+0x68>
 8011b32:	6829      	ldr	r1, [r5, #0]
 8011b34:	291d      	cmp	r1, #29
 8011b36:	d82b      	bhi.n	8011b90 <__sflush_r+0xb8>
 8011b38:	4a29      	ldr	r2, [pc, #164]	; (8011be0 <__sflush_r+0x108>)
 8011b3a:	410a      	asrs	r2, r1
 8011b3c:	07d6      	lsls	r6, r2, #31
 8011b3e:	d427      	bmi.n	8011b90 <__sflush_r+0xb8>
 8011b40:	2200      	movs	r2, #0
 8011b42:	6062      	str	r2, [r4, #4]
 8011b44:	04d9      	lsls	r1, r3, #19
 8011b46:	6922      	ldr	r2, [r4, #16]
 8011b48:	6022      	str	r2, [r4, #0]
 8011b4a:	d504      	bpl.n	8011b56 <__sflush_r+0x7e>
 8011b4c:	1c42      	adds	r2, r0, #1
 8011b4e:	d101      	bne.n	8011b54 <__sflush_r+0x7c>
 8011b50:	682b      	ldr	r3, [r5, #0]
 8011b52:	b903      	cbnz	r3, 8011b56 <__sflush_r+0x7e>
 8011b54:	6560      	str	r0, [r4, #84]	; 0x54
 8011b56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b58:	602f      	str	r7, [r5, #0]
 8011b5a:	2900      	cmp	r1, #0
 8011b5c:	d0c9      	beq.n	8011af2 <__sflush_r+0x1a>
 8011b5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b62:	4299      	cmp	r1, r3
 8011b64:	d002      	beq.n	8011b6c <__sflush_r+0x94>
 8011b66:	4628      	mov	r0, r5
 8011b68:	f7ff fbea 	bl	8011340 <_free_r>
 8011b6c:	2000      	movs	r0, #0
 8011b6e:	6360      	str	r0, [r4, #52]	; 0x34
 8011b70:	e7c0      	b.n	8011af4 <__sflush_r+0x1c>
 8011b72:	2301      	movs	r3, #1
 8011b74:	4628      	mov	r0, r5
 8011b76:	47b0      	blx	r6
 8011b78:	1c41      	adds	r1, r0, #1
 8011b7a:	d1c8      	bne.n	8011b0e <__sflush_r+0x36>
 8011b7c:	682b      	ldr	r3, [r5, #0]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d0c5      	beq.n	8011b0e <__sflush_r+0x36>
 8011b82:	2b1d      	cmp	r3, #29
 8011b84:	d001      	beq.n	8011b8a <__sflush_r+0xb2>
 8011b86:	2b16      	cmp	r3, #22
 8011b88:	d101      	bne.n	8011b8e <__sflush_r+0xb6>
 8011b8a:	602f      	str	r7, [r5, #0]
 8011b8c:	e7b1      	b.n	8011af2 <__sflush_r+0x1a>
 8011b8e:	89a3      	ldrh	r3, [r4, #12]
 8011b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b94:	81a3      	strh	r3, [r4, #12]
 8011b96:	e7ad      	b.n	8011af4 <__sflush_r+0x1c>
 8011b98:	690f      	ldr	r7, [r1, #16]
 8011b9a:	2f00      	cmp	r7, #0
 8011b9c:	d0a9      	beq.n	8011af2 <__sflush_r+0x1a>
 8011b9e:	0793      	lsls	r3, r2, #30
 8011ba0:	680e      	ldr	r6, [r1, #0]
 8011ba2:	bf08      	it	eq
 8011ba4:	694b      	ldreq	r3, [r1, #20]
 8011ba6:	600f      	str	r7, [r1, #0]
 8011ba8:	bf18      	it	ne
 8011baa:	2300      	movne	r3, #0
 8011bac:	eba6 0807 	sub.w	r8, r6, r7
 8011bb0:	608b      	str	r3, [r1, #8]
 8011bb2:	f1b8 0f00 	cmp.w	r8, #0
 8011bb6:	dd9c      	ble.n	8011af2 <__sflush_r+0x1a>
 8011bb8:	6a21      	ldr	r1, [r4, #32]
 8011bba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011bbc:	4643      	mov	r3, r8
 8011bbe:	463a      	mov	r2, r7
 8011bc0:	4628      	mov	r0, r5
 8011bc2:	47b0      	blx	r6
 8011bc4:	2800      	cmp	r0, #0
 8011bc6:	dc06      	bgt.n	8011bd6 <__sflush_r+0xfe>
 8011bc8:	89a3      	ldrh	r3, [r4, #12]
 8011bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bce:	81a3      	strh	r3, [r4, #12]
 8011bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8011bd4:	e78e      	b.n	8011af4 <__sflush_r+0x1c>
 8011bd6:	4407      	add	r7, r0
 8011bd8:	eba8 0800 	sub.w	r8, r8, r0
 8011bdc:	e7e9      	b.n	8011bb2 <__sflush_r+0xda>
 8011bde:	bf00      	nop
 8011be0:	dfbffffe 	.word	0xdfbffffe

08011be4 <_fflush_r>:
 8011be4:	b538      	push	{r3, r4, r5, lr}
 8011be6:	690b      	ldr	r3, [r1, #16]
 8011be8:	4605      	mov	r5, r0
 8011bea:	460c      	mov	r4, r1
 8011bec:	b913      	cbnz	r3, 8011bf4 <_fflush_r+0x10>
 8011bee:	2500      	movs	r5, #0
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	bd38      	pop	{r3, r4, r5, pc}
 8011bf4:	b118      	cbz	r0, 8011bfe <_fflush_r+0x1a>
 8011bf6:	6a03      	ldr	r3, [r0, #32]
 8011bf8:	b90b      	cbnz	r3, 8011bfe <_fflush_r+0x1a>
 8011bfa:	f7ff fa91 	bl	8011120 <__sinit>
 8011bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d0f3      	beq.n	8011bee <_fflush_r+0xa>
 8011c06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011c08:	07d0      	lsls	r0, r2, #31
 8011c0a:	d404      	bmi.n	8011c16 <_fflush_r+0x32>
 8011c0c:	0599      	lsls	r1, r3, #22
 8011c0e:	d402      	bmi.n	8011c16 <_fflush_r+0x32>
 8011c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c12:	f7ff fb92 	bl	801133a <__retarget_lock_acquire_recursive>
 8011c16:	4628      	mov	r0, r5
 8011c18:	4621      	mov	r1, r4
 8011c1a:	f7ff ff5d 	bl	8011ad8 <__sflush_r>
 8011c1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c20:	07da      	lsls	r2, r3, #31
 8011c22:	4605      	mov	r5, r0
 8011c24:	d4e4      	bmi.n	8011bf0 <_fflush_r+0xc>
 8011c26:	89a3      	ldrh	r3, [r4, #12]
 8011c28:	059b      	lsls	r3, r3, #22
 8011c2a:	d4e1      	bmi.n	8011bf0 <_fflush_r+0xc>
 8011c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c2e:	f7ff fb85 	bl	801133c <__retarget_lock_release_recursive>
 8011c32:	e7dd      	b.n	8011bf0 <_fflush_r+0xc>

08011c34 <_putc_r>:
 8011c34:	b570      	push	{r4, r5, r6, lr}
 8011c36:	460d      	mov	r5, r1
 8011c38:	4614      	mov	r4, r2
 8011c3a:	4606      	mov	r6, r0
 8011c3c:	b118      	cbz	r0, 8011c46 <_putc_r+0x12>
 8011c3e:	6a03      	ldr	r3, [r0, #32]
 8011c40:	b90b      	cbnz	r3, 8011c46 <_putc_r+0x12>
 8011c42:	f7ff fa6d 	bl	8011120 <__sinit>
 8011c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c48:	07d8      	lsls	r0, r3, #31
 8011c4a:	d405      	bmi.n	8011c58 <_putc_r+0x24>
 8011c4c:	89a3      	ldrh	r3, [r4, #12]
 8011c4e:	0599      	lsls	r1, r3, #22
 8011c50:	d402      	bmi.n	8011c58 <_putc_r+0x24>
 8011c52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c54:	f7ff fb71 	bl	801133a <__retarget_lock_acquire_recursive>
 8011c58:	68a3      	ldr	r3, [r4, #8]
 8011c5a:	3b01      	subs	r3, #1
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	60a3      	str	r3, [r4, #8]
 8011c60:	da05      	bge.n	8011c6e <_putc_r+0x3a>
 8011c62:	69a2      	ldr	r2, [r4, #24]
 8011c64:	4293      	cmp	r3, r2
 8011c66:	db12      	blt.n	8011c8e <_putc_r+0x5a>
 8011c68:	b2eb      	uxtb	r3, r5
 8011c6a:	2b0a      	cmp	r3, #10
 8011c6c:	d00f      	beq.n	8011c8e <_putc_r+0x5a>
 8011c6e:	6823      	ldr	r3, [r4, #0]
 8011c70:	1c5a      	adds	r2, r3, #1
 8011c72:	6022      	str	r2, [r4, #0]
 8011c74:	701d      	strb	r5, [r3, #0]
 8011c76:	b2ed      	uxtb	r5, r5
 8011c78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c7a:	07da      	lsls	r2, r3, #31
 8011c7c:	d405      	bmi.n	8011c8a <_putc_r+0x56>
 8011c7e:	89a3      	ldrh	r3, [r4, #12]
 8011c80:	059b      	lsls	r3, r3, #22
 8011c82:	d402      	bmi.n	8011c8a <_putc_r+0x56>
 8011c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c86:	f7ff fb59 	bl	801133c <__retarget_lock_release_recursive>
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	bd70      	pop	{r4, r5, r6, pc}
 8011c8e:	4629      	mov	r1, r5
 8011c90:	4622      	mov	r2, r4
 8011c92:	4630      	mov	r0, r6
 8011c94:	f000 f802 	bl	8011c9c <__swbuf_r>
 8011c98:	4605      	mov	r5, r0
 8011c9a:	e7ed      	b.n	8011c78 <_putc_r+0x44>

08011c9c <__swbuf_r>:
 8011c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c9e:	460e      	mov	r6, r1
 8011ca0:	4614      	mov	r4, r2
 8011ca2:	4605      	mov	r5, r0
 8011ca4:	b118      	cbz	r0, 8011cae <__swbuf_r+0x12>
 8011ca6:	6a03      	ldr	r3, [r0, #32]
 8011ca8:	b90b      	cbnz	r3, 8011cae <__swbuf_r+0x12>
 8011caa:	f7ff fa39 	bl	8011120 <__sinit>
 8011cae:	69a3      	ldr	r3, [r4, #24]
 8011cb0:	60a3      	str	r3, [r4, #8]
 8011cb2:	89a3      	ldrh	r3, [r4, #12]
 8011cb4:	071a      	lsls	r2, r3, #28
 8011cb6:	d525      	bpl.n	8011d04 <__swbuf_r+0x68>
 8011cb8:	6923      	ldr	r3, [r4, #16]
 8011cba:	b31b      	cbz	r3, 8011d04 <__swbuf_r+0x68>
 8011cbc:	6823      	ldr	r3, [r4, #0]
 8011cbe:	6922      	ldr	r2, [r4, #16]
 8011cc0:	1a98      	subs	r0, r3, r2
 8011cc2:	6963      	ldr	r3, [r4, #20]
 8011cc4:	b2f6      	uxtb	r6, r6
 8011cc6:	4283      	cmp	r3, r0
 8011cc8:	4637      	mov	r7, r6
 8011cca:	dc04      	bgt.n	8011cd6 <__swbuf_r+0x3a>
 8011ccc:	4621      	mov	r1, r4
 8011cce:	4628      	mov	r0, r5
 8011cd0:	f7ff ff88 	bl	8011be4 <_fflush_r>
 8011cd4:	b9e0      	cbnz	r0, 8011d10 <__swbuf_r+0x74>
 8011cd6:	68a3      	ldr	r3, [r4, #8]
 8011cd8:	3b01      	subs	r3, #1
 8011cda:	60a3      	str	r3, [r4, #8]
 8011cdc:	6823      	ldr	r3, [r4, #0]
 8011cde:	1c5a      	adds	r2, r3, #1
 8011ce0:	6022      	str	r2, [r4, #0]
 8011ce2:	701e      	strb	r6, [r3, #0]
 8011ce4:	6962      	ldr	r2, [r4, #20]
 8011ce6:	1c43      	adds	r3, r0, #1
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d004      	beq.n	8011cf6 <__swbuf_r+0x5a>
 8011cec:	89a3      	ldrh	r3, [r4, #12]
 8011cee:	07db      	lsls	r3, r3, #31
 8011cf0:	d506      	bpl.n	8011d00 <__swbuf_r+0x64>
 8011cf2:	2e0a      	cmp	r6, #10
 8011cf4:	d104      	bne.n	8011d00 <__swbuf_r+0x64>
 8011cf6:	4621      	mov	r1, r4
 8011cf8:	4628      	mov	r0, r5
 8011cfa:	f7ff ff73 	bl	8011be4 <_fflush_r>
 8011cfe:	b938      	cbnz	r0, 8011d10 <__swbuf_r+0x74>
 8011d00:	4638      	mov	r0, r7
 8011d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d04:	4621      	mov	r1, r4
 8011d06:	4628      	mov	r0, r5
 8011d08:	f000 f806 	bl	8011d18 <__swsetup_r>
 8011d0c:	2800      	cmp	r0, #0
 8011d0e:	d0d5      	beq.n	8011cbc <__swbuf_r+0x20>
 8011d10:	f04f 37ff 	mov.w	r7, #4294967295
 8011d14:	e7f4      	b.n	8011d00 <__swbuf_r+0x64>
	...

08011d18 <__swsetup_r>:
 8011d18:	b538      	push	{r3, r4, r5, lr}
 8011d1a:	4b2a      	ldr	r3, [pc, #168]	; (8011dc4 <__swsetup_r+0xac>)
 8011d1c:	4605      	mov	r5, r0
 8011d1e:	6818      	ldr	r0, [r3, #0]
 8011d20:	460c      	mov	r4, r1
 8011d22:	b118      	cbz	r0, 8011d2c <__swsetup_r+0x14>
 8011d24:	6a03      	ldr	r3, [r0, #32]
 8011d26:	b90b      	cbnz	r3, 8011d2c <__swsetup_r+0x14>
 8011d28:	f7ff f9fa 	bl	8011120 <__sinit>
 8011d2c:	89a3      	ldrh	r3, [r4, #12]
 8011d2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d32:	0718      	lsls	r0, r3, #28
 8011d34:	d422      	bmi.n	8011d7c <__swsetup_r+0x64>
 8011d36:	06d9      	lsls	r1, r3, #27
 8011d38:	d407      	bmi.n	8011d4a <__swsetup_r+0x32>
 8011d3a:	2309      	movs	r3, #9
 8011d3c:	602b      	str	r3, [r5, #0]
 8011d3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011d42:	81a3      	strh	r3, [r4, #12]
 8011d44:	f04f 30ff 	mov.w	r0, #4294967295
 8011d48:	e034      	b.n	8011db4 <__swsetup_r+0x9c>
 8011d4a:	0758      	lsls	r0, r3, #29
 8011d4c:	d512      	bpl.n	8011d74 <__swsetup_r+0x5c>
 8011d4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d50:	b141      	cbz	r1, 8011d64 <__swsetup_r+0x4c>
 8011d52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d56:	4299      	cmp	r1, r3
 8011d58:	d002      	beq.n	8011d60 <__swsetup_r+0x48>
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	f7ff faf0 	bl	8011340 <_free_r>
 8011d60:	2300      	movs	r3, #0
 8011d62:	6363      	str	r3, [r4, #52]	; 0x34
 8011d64:	89a3      	ldrh	r3, [r4, #12]
 8011d66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d6a:	81a3      	strh	r3, [r4, #12]
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	6063      	str	r3, [r4, #4]
 8011d70:	6923      	ldr	r3, [r4, #16]
 8011d72:	6023      	str	r3, [r4, #0]
 8011d74:	89a3      	ldrh	r3, [r4, #12]
 8011d76:	f043 0308 	orr.w	r3, r3, #8
 8011d7a:	81a3      	strh	r3, [r4, #12]
 8011d7c:	6923      	ldr	r3, [r4, #16]
 8011d7e:	b94b      	cbnz	r3, 8011d94 <__swsetup_r+0x7c>
 8011d80:	89a3      	ldrh	r3, [r4, #12]
 8011d82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d8a:	d003      	beq.n	8011d94 <__swsetup_r+0x7c>
 8011d8c:	4621      	mov	r1, r4
 8011d8e:	4628      	mov	r0, r5
 8011d90:	f000 f850 	bl	8011e34 <__smakebuf_r>
 8011d94:	89a0      	ldrh	r0, [r4, #12]
 8011d96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d9a:	f010 0301 	ands.w	r3, r0, #1
 8011d9e:	d00a      	beq.n	8011db6 <__swsetup_r+0x9e>
 8011da0:	2300      	movs	r3, #0
 8011da2:	60a3      	str	r3, [r4, #8]
 8011da4:	6963      	ldr	r3, [r4, #20]
 8011da6:	425b      	negs	r3, r3
 8011da8:	61a3      	str	r3, [r4, #24]
 8011daa:	6923      	ldr	r3, [r4, #16]
 8011dac:	b943      	cbnz	r3, 8011dc0 <__swsetup_r+0xa8>
 8011dae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011db2:	d1c4      	bne.n	8011d3e <__swsetup_r+0x26>
 8011db4:	bd38      	pop	{r3, r4, r5, pc}
 8011db6:	0781      	lsls	r1, r0, #30
 8011db8:	bf58      	it	pl
 8011dba:	6963      	ldrpl	r3, [r4, #20]
 8011dbc:	60a3      	str	r3, [r4, #8]
 8011dbe:	e7f4      	b.n	8011daa <__swsetup_r+0x92>
 8011dc0:	2000      	movs	r0, #0
 8011dc2:	e7f7      	b.n	8011db4 <__swsetup_r+0x9c>
 8011dc4:	240004cc 	.word	0x240004cc

08011dc8 <_sbrk_r>:
 8011dc8:	b538      	push	{r3, r4, r5, lr}
 8011dca:	4d06      	ldr	r5, [pc, #24]	; (8011de4 <_sbrk_r+0x1c>)
 8011dcc:	2300      	movs	r3, #0
 8011dce:	4604      	mov	r4, r0
 8011dd0:	4608      	mov	r0, r1
 8011dd2:	602b      	str	r3, [r5, #0]
 8011dd4:	f7f0 fd2c 	bl	8002830 <_sbrk>
 8011dd8:	1c43      	adds	r3, r0, #1
 8011dda:	d102      	bne.n	8011de2 <_sbrk_r+0x1a>
 8011ddc:	682b      	ldr	r3, [r5, #0]
 8011dde:	b103      	cbz	r3, 8011de2 <_sbrk_r+0x1a>
 8011de0:	6023      	str	r3, [r4, #0]
 8011de2:	bd38      	pop	{r3, r4, r5, pc}
 8011de4:	2400c910 	.word	0x2400c910

08011de8 <__swhatbuf_r>:
 8011de8:	b570      	push	{r4, r5, r6, lr}
 8011dea:	460c      	mov	r4, r1
 8011dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011df0:	2900      	cmp	r1, #0
 8011df2:	b096      	sub	sp, #88	; 0x58
 8011df4:	4615      	mov	r5, r2
 8011df6:	461e      	mov	r6, r3
 8011df8:	da0d      	bge.n	8011e16 <__swhatbuf_r+0x2e>
 8011dfa:	89a3      	ldrh	r3, [r4, #12]
 8011dfc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011e00:	f04f 0100 	mov.w	r1, #0
 8011e04:	bf0c      	ite	eq
 8011e06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011e0a:	2340      	movne	r3, #64	; 0x40
 8011e0c:	2000      	movs	r0, #0
 8011e0e:	6031      	str	r1, [r6, #0]
 8011e10:	602b      	str	r3, [r5, #0]
 8011e12:	b016      	add	sp, #88	; 0x58
 8011e14:	bd70      	pop	{r4, r5, r6, pc}
 8011e16:	466a      	mov	r2, sp
 8011e18:	f000 f848 	bl	8011eac <_fstat_r>
 8011e1c:	2800      	cmp	r0, #0
 8011e1e:	dbec      	blt.n	8011dfa <__swhatbuf_r+0x12>
 8011e20:	9901      	ldr	r1, [sp, #4]
 8011e22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011e26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011e2a:	4259      	negs	r1, r3
 8011e2c:	4159      	adcs	r1, r3
 8011e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e32:	e7eb      	b.n	8011e0c <__swhatbuf_r+0x24>

08011e34 <__smakebuf_r>:
 8011e34:	898b      	ldrh	r3, [r1, #12]
 8011e36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e38:	079d      	lsls	r5, r3, #30
 8011e3a:	4606      	mov	r6, r0
 8011e3c:	460c      	mov	r4, r1
 8011e3e:	d507      	bpl.n	8011e50 <__smakebuf_r+0x1c>
 8011e40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e44:	6023      	str	r3, [r4, #0]
 8011e46:	6123      	str	r3, [r4, #16]
 8011e48:	2301      	movs	r3, #1
 8011e4a:	6163      	str	r3, [r4, #20]
 8011e4c:	b002      	add	sp, #8
 8011e4e:	bd70      	pop	{r4, r5, r6, pc}
 8011e50:	ab01      	add	r3, sp, #4
 8011e52:	466a      	mov	r2, sp
 8011e54:	f7ff ffc8 	bl	8011de8 <__swhatbuf_r>
 8011e58:	9900      	ldr	r1, [sp, #0]
 8011e5a:	4605      	mov	r5, r0
 8011e5c:	4630      	mov	r0, r6
 8011e5e:	f7ff fadb 	bl	8011418 <_malloc_r>
 8011e62:	b948      	cbnz	r0, 8011e78 <__smakebuf_r+0x44>
 8011e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e68:	059a      	lsls	r2, r3, #22
 8011e6a:	d4ef      	bmi.n	8011e4c <__smakebuf_r+0x18>
 8011e6c:	f023 0303 	bic.w	r3, r3, #3
 8011e70:	f043 0302 	orr.w	r3, r3, #2
 8011e74:	81a3      	strh	r3, [r4, #12]
 8011e76:	e7e3      	b.n	8011e40 <__smakebuf_r+0xc>
 8011e78:	89a3      	ldrh	r3, [r4, #12]
 8011e7a:	6020      	str	r0, [r4, #0]
 8011e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e80:	81a3      	strh	r3, [r4, #12]
 8011e82:	9b00      	ldr	r3, [sp, #0]
 8011e84:	6163      	str	r3, [r4, #20]
 8011e86:	9b01      	ldr	r3, [sp, #4]
 8011e88:	6120      	str	r0, [r4, #16]
 8011e8a:	b15b      	cbz	r3, 8011ea4 <__smakebuf_r+0x70>
 8011e8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e90:	4630      	mov	r0, r6
 8011e92:	f000 f81d 	bl	8011ed0 <_isatty_r>
 8011e96:	b128      	cbz	r0, 8011ea4 <__smakebuf_r+0x70>
 8011e98:	89a3      	ldrh	r3, [r4, #12]
 8011e9a:	f023 0303 	bic.w	r3, r3, #3
 8011e9e:	f043 0301 	orr.w	r3, r3, #1
 8011ea2:	81a3      	strh	r3, [r4, #12]
 8011ea4:	89a3      	ldrh	r3, [r4, #12]
 8011ea6:	431d      	orrs	r5, r3
 8011ea8:	81a5      	strh	r5, [r4, #12]
 8011eaa:	e7cf      	b.n	8011e4c <__smakebuf_r+0x18>

08011eac <_fstat_r>:
 8011eac:	b538      	push	{r3, r4, r5, lr}
 8011eae:	4d07      	ldr	r5, [pc, #28]	; (8011ecc <_fstat_r+0x20>)
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	4608      	mov	r0, r1
 8011eb6:	4611      	mov	r1, r2
 8011eb8:	602b      	str	r3, [r5, #0]
 8011eba:	f7f0 fc90 	bl	80027de <_fstat>
 8011ebe:	1c43      	adds	r3, r0, #1
 8011ec0:	d102      	bne.n	8011ec8 <_fstat_r+0x1c>
 8011ec2:	682b      	ldr	r3, [r5, #0]
 8011ec4:	b103      	cbz	r3, 8011ec8 <_fstat_r+0x1c>
 8011ec6:	6023      	str	r3, [r4, #0]
 8011ec8:	bd38      	pop	{r3, r4, r5, pc}
 8011eca:	bf00      	nop
 8011ecc:	2400c910 	.word	0x2400c910

08011ed0 <_isatty_r>:
 8011ed0:	b538      	push	{r3, r4, r5, lr}
 8011ed2:	4d06      	ldr	r5, [pc, #24]	; (8011eec <_isatty_r+0x1c>)
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	4604      	mov	r4, r0
 8011ed8:	4608      	mov	r0, r1
 8011eda:	602b      	str	r3, [r5, #0]
 8011edc:	f7f0 fc8f 	bl	80027fe <_isatty>
 8011ee0:	1c43      	adds	r3, r0, #1
 8011ee2:	d102      	bne.n	8011eea <_isatty_r+0x1a>
 8011ee4:	682b      	ldr	r3, [r5, #0]
 8011ee6:	b103      	cbz	r3, 8011eea <_isatty_r+0x1a>
 8011ee8:	6023      	str	r3, [r4, #0]
 8011eea:	bd38      	pop	{r3, r4, r5, pc}
 8011eec:	2400c910 	.word	0x2400c910

08011ef0 <sin>:
 8011ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ef2:	eeb0 7b40 	vmov.f64	d7, d0
 8011ef6:	ee17 3a90 	vmov	r3, s15
 8011efa:	4a21      	ldr	r2, [pc, #132]	; (8011f80 <sin+0x90>)
 8011efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f00:	4293      	cmp	r3, r2
 8011f02:	dc07      	bgt.n	8011f14 <sin+0x24>
 8011f04:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011f78 <sin+0x88>
 8011f08:	2000      	movs	r0, #0
 8011f0a:	b005      	add	sp, #20
 8011f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f10:	f000 b8ca 	b.w	80120a8 <__kernel_sin>
 8011f14:	4a1b      	ldr	r2, [pc, #108]	; (8011f84 <sin+0x94>)
 8011f16:	4293      	cmp	r3, r2
 8011f18:	dd04      	ble.n	8011f24 <sin+0x34>
 8011f1a:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011f1e:	b005      	add	sp, #20
 8011f20:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f24:	4668      	mov	r0, sp
 8011f26:	f000 f917 	bl	8012158 <__ieee754_rem_pio2>
 8011f2a:	f000 0003 	and.w	r0, r0, #3
 8011f2e:	2801      	cmp	r0, #1
 8011f30:	d00a      	beq.n	8011f48 <sin+0x58>
 8011f32:	2802      	cmp	r0, #2
 8011f34:	d00f      	beq.n	8011f56 <sin+0x66>
 8011f36:	b9c0      	cbnz	r0, 8011f6a <sin+0x7a>
 8011f38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011f3c:	ed9d 0b00 	vldr	d0, [sp]
 8011f40:	2001      	movs	r0, #1
 8011f42:	f000 f8b1 	bl	80120a8 <__kernel_sin>
 8011f46:	e7ea      	b.n	8011f1e <sin+0x2e>
 8011f48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011f4c:	ed9d 0b00 	vldr	d0, [sp]
 8011f50:	f000 f83e 	bl	8011fd0 <__kernel_cos>
 8011f54:	e7e3      	b.n	8011f1e <sin+0x2e>
 8011f56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011f5a:	ed9d 0b00 	vldr	d0, [sp]
 8011f5e:	2001      	movs	r0, #1
 8011f60:	f000 f8a2 	bl	80120a8 <__kernel_sin>
 8011f64:	eeb1 0b40 	vneg.f64	d0, d0
 8011f68:	e7d9      	b.n	8011f1e <sin+0x2e>
 8011f6a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011f6e:	ed9d 0b00 	vldr	d0, [sp]
 8011f72:	f000 f82d 	bl	8011fd0 <__kernel_cos>
 8011f76:	e7f5      	b.n	8011f64 <sin+0x74>
	...
 8011f80:	3fe921fb 	.word	0x3fe921fb
 8011f84:	7fefffff 	.word	0x7fefffff

08011f88 <roundf>:
 8011f88:	ee10 0a10 	vmov	r0, s0
 8011f8c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8011f90:	3a7f      	subs	r2, #127	; 0x7f
 8011f92:	2a16      	cmp	r2, #22
 8011f94:	dc15      	bgt.n	8011fc2 <roundf+0x3a>
 8011f96:	2a00      	cmp	r2, #0
 8011f98:	da08      	bge.n	8011fac <roundf+0x24>
 8011f9a:	3201      	adds	r2, #1
 8011f9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8011fa0:	d101      	bne.n	8011fa6 <roundf+0x1e>
 8011fa2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8011fa6:	ee00 3a10 	vmov	s0, r3
 8011faa:	4770      	bx	lr
 8011fac:	4907      	ldr	r1, [pc, #28]	; (8011fcc <roundf+0x44>)
 8011fae:	4111      	asrs	r1, r2
 8011fb0:	4208      	tst	r0, r1
 8011fb2:	d0fa      	beq.n	8011faa <roundf+0x22>
 8011fb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011fb8:	4113      	asrs	r3, r2
 8011fba:	4403      	add	r3, r0
 8011fbc:	ea23 0301 	bic.w	r3, r3, r1
 8011fc0:	e7f1      	b.n	8011fa6 <roundf+0x1e>
 8011fc2:	2a80      	cmp	r2, #128	; 0x80
 8011fc4:	d1f1      	bne.n	8011faa <roundf+0x22>
 8011fc6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011fca:	4770      	bx	lr
 8011fcc:	007fffff 	.word	0x007fffff

08011fd0 <__kernel_cos>:
 8011fd0:	ee10 1a90 	vmov	r1, s1
 8011fd4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011fd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011fdc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011fe0:	da05      	bge.n	8011fee <__kernel_cos+0x1e>
 8011fe2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011fe6:	ee17 3a90 	vmov	r3, s15
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d03d      	beq.n	801206a <__kernel_cos+0x9a>
 8011fee:	ee20 5b00 	vmul.f64	d5, d0, d0
 8011ff2:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8011ff6:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8012070 <__kernel_cos+0xa0>
 8011ffa:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8012078 <__kernel_cos+0xa8>
 8011ffe:	eea5 4b07 	vfma.f64	d4, d5, d7
 8012002:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8012080 <__kernel_cos+0xb0>
 8012006:	eea4 7b05 	vfma.f64	d7, d4, d5
 801200a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8012088 <__kernel_cos+0xb8>
 801200e:	eea7 4b05 	vfma.f64	d4, d7, d5
 8012012:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8012090 <__kernel_cos+0xc0>
 8012016:	4b22      	ldr	r3, [pc, #136]	; (80120a0 <__kernel_cos+0xd0>)
 8012018:	eea4 7b05 	vfma.f64	d7, d4, d5
 801201c:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8012098 <__kernel_cos+0xc8>
 8012020:	4299      	cmp	r1, r3
 8012022:	eea7 4b05 	vfma.f64	d4, d7, d5
 8012026:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801202a:	ee24 4b05 	vmul.f64	d4, d4, d5
 801202e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8012032:	eea5 1b04 	vfma.f64	d1, d5, d4
 8012036:	dc04      	bgt.n	8012042 <__kernel_cos+0x72>
 8012038:	ee37 7b41 	vsub.f64	d7, d7, d1
 801203c:	ee36 0b47 	vsub.f64	d0, d6, d7
 8012040:	4770      	bx	lr
 8012042:	4b18      	ldr	r3, [pc, #96]	; (80120a4 <__kernel_cos+0xd4>)
 8012044:	4299      	cmp	r1, r3
 8012046:	dc0d      	bgt.n	8012064 <__kernel_cos+0x94>
 8012048:	2200      	movs	r2, #0
 801204a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801204e:	ec43 2b15 	vmov	d5, r2, r3
 8012052:	ee36 0b45 	vsub.f64	d0, d6, d5
 8012056:	ee37 7b45 	vsub.f64	d7, d7, d5
 801205a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801205e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012062:	4770      	bx	lr
 8012064:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8012068:	e7f3      	b.n	8012052 <__kernel_cos+0x82>
 801206a:	eeb0 0b46 	vmov.f64	d0, d6
 801206e:	4770      	bx	lr
 8012070:	be8838d4 	.word	0xbe8838d4
 8012074:	bda8fae9 	.word	0xbda8fae9
 8012078:	bdb4b1c4 	.word	0xbdb4b1c4
 801207c:	3e21ee9e 	.word	0x3e21ee9e
 8012080:	809c52ad 	.word	0x809c52ad
 8012084:	be927e4f 	.word	0xbe927e4f
 8012088:	19cb1590 	.word	0x19cb1590
 801208c:	3efa01a0 	.word	0x3efa01a0
 8012090:	16c15177 	.word	0x16c15177
 8012094:	bf56c16c 	.word	0xbf56c16c
 8012098:	5555554c 	.word	0x5555554c
 801209c:	3fa55555 	.word	0x3fa55555
 80120a0:	3fd33332 	.word	0x3fd33332
 80120a4:	3fe90000 	.word	0x3fe90000

080120a8 <__kernel_sin>:
 80120a8:	ee10 3a90 	vmov	r3, s1
 80120ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80120b0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80120b4:	da04      	bge.n	80120c0 <__kernel_sin+0x18>
 80120b6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80120ba:	ee17 3a90 	vmov	r3, s15
 80120be:	b35b      	cbz	r3, 8012118 <__kernel_sin+0x70>
 80120c0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80120c4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80120c8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8012120 <__kernel_sin+0x78>
 80120cc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012128 <__kernel_sin+0x80>
 80120d0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80120d4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012130 <__kernel_sin+0x88>
 80120d8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80120dc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012138 <__kernel_sin+0x90>
 80120e0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80120e4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012140 <__kernel_sin+0x98>
 80120e8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80120ec:	b930      	cbnz	r0, 80120fc <__kernel_sin+0x54>
 80120ee:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012148 <__kernel_sin+0xa0>
 80120f2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80120f6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80120fa:	4770      	bx	lr
 80120fc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8012100:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8012104:	eea1 7b04 	vfma.f64	d7, d1, d4
 8012108:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801210c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012150 <__kernel_sin+0xa8>
 8012110:	eea5 1b07 	vfma.f64	d1, d5, d7
 8012114:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012118:	4770      	bx	lr
 801211a:	bf00      	nop
 801211c:	f3af 8000 	nop.w
 8012120:	5acfd57c 	.word	0x5acfd57c
 8012124:	3de5d93a 	.word	0x3de5d93a
 8012128:	8a2b9ceb 	.word	0x8a2b9ceb
 801212c:	be5ae5e6 	.word	0xbe5ae5e6
 8012130:	57b1fe7d 	.word	0x57b1fe7d
 8012134:	3ec71de3 	.word	0x3ec71de3
 8012138:	19c161d5 	.word	0x19c161d5
 801213c:	bf2a01a0 	.word	0xbf2a01a0
 8012140:	1110f8a6 	.word	0x1110f8a6
 8012144:	3f811111 	.word	0x3f811111
 8012148:	55555549 	.word	0x55555549
 801214c:	bfc55555 	.word	0xbfc55555
 8012150:	55555549 	.word	0x55555549
 8012154:	3fc55555 	.word	0x3fc55555

08012158 <__ieee754_rem_pio2>:
 8012158:	b570      	push	{r4, r5, r6, lr}
 801215a:	eeb0 7b40 	vmov.f64	d7, d0
 801215e:	ee17 5a90 	vmov	r5, s15
 8012162:	4b99      	ldr	r3, [pc, #612]	; (80123c8 <__ieee754_rem_pio2+0x270>)
 8012164:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012168:	429e      	cmp	r6, r3
 801216a:	b088      	sub	sp, #32
 801216c:	4604      	mov	r4, r0
 801216e:	dc07      	bgt.n	8012180 <__ieee754_rem_pio2+0x28>
 8012170:	2200      	movs	r2, #0
 8012172:	2300      	movs	r3, #0
 8012174:	ed84 0b00 	vstr	d0, [r4]
 8012178:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801217c:	2000      	movs	r0, #0
 801217e:	e01b      	b.n	80121b8 <__ieee754_rem_pio2+0x60>
 8012180:	4b92      	ldr	r3, [pc, #584]	; (80123cc <__ieee754_rem_pio2+0x274>)
 8012182:	429e      	cmp	r6, r3
 8012184:	dc3b      	bgt.n	80121fe <__ieee754_rem_pio2+0xa6>
 8012186:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801218a:	2d00      	cmp	r5, #0
 801218c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8012388 <__ieee754_rem_pio2+0x230>
 8012190:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8012194:	dd19      	ble.n	80121ca <__ieee754_rem_pio2+0x72>
 8012196:	ee30 7b46 	vsub.f64	d7, d0, d6
 801219a:	429e      	cmp	r6, r3
 801219c:	d00e      	beq.n	80121bc <__ieee754_rem_pio2+0x64>
 801219e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8012390 <__ieee754_rem_pio2+0x238>
 80121a2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80121a6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80121aa:	ed84 5b00 	vstr	d5, [r4]
 80121ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80121b2:	ed84 7b02 	vstr	d7, [r4, #8]
 80121b6:	2001      	movs	r0, #1
 80121b8:	b008      	add	sp, #32
 80121ba:	bd70      	pop	{r4, r5, r6, pc}
 80121bc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8012398 <__ieee754_rem_pio2+0x240>
 80121c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80121c4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80123a0 <__ieee754_rem_pio2+0x248>
 80121c8:	e7eb      	b.n	80121a2 <__ieee754_rem_pio2+0x4a>
 80121ca:	429e      	cmp	r6, r3
 80121cc:	ee30 7b06 	vadd.f64	d7, d0, d6
 80121d0:	d00e      	beq.n	80121f0 <__ieee754_rem_pio2+0x98>
 80121d2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8012390 <__ieee754_rem_pio2+0x238>
 80121d6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80121da:	ee37 7b45 	vsub.f64	d7, d7, d5
 80121de:	ed84 5b00 	vstr	d5, [r4]
 80121e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80121e6:	f04f 30ff 	mov.w	r0, #4294967295
 80121ea:	ed84 7b02 	vstr	d7, [r4, #8]
 80121ee:	e7e3      	b.n	80121b8 <__ieee754_rem_pio2+0x60>
 80121f0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8012398 <__ieee754_rem_pio2+0x240>
 80121f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80121f8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80123a0 <__ieee754_rem_pio2+0x248>
 80121fc:	e7eb      	b.n	80121d6 <__ieee754_rem_pio2+0x7e>
 80121fe:	4b74      	ldr	r3, [pc, #464]	; (80123d0 <__ieee754_rem_pio2+0x278>)
 8012200:	429e      	cmp	r6, r3
 8012202:	dc70      	bgt.n	80122e6 <__ieee754_rem_pio2+0x18e>
 8012204:	f000 f8ec 	bl	80123e0 <fabs>
 8012208:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801220c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80123a8 <__ieee754_rem_pio2+0x250>
 8012210:	eea0 7b06 	vfma.f64	d7, d0, d6
 8012214:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012218:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801221c:	ee17 0a90 	vmov	r0, s15
 8012220:	eeb1 4b45 	vneg.f64	d4, d5
 8012224:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8012388 <__ieee754_rem_pio2+0x230>
 8012228:	eea5 0b47 	vfms.f64	d0, d5, d7
 801222c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8012390 <__ieee754_rem_pio2+0x238>
 8012230:	281f      	cmp	r0, #31
 8012232:	ee25 7b07 	vmul.f64	d7, d5, d7
 8012236:	ee30 6b47 	vsub.f64	d6, d0, d7
 801223a:	dc08      	bgt.n	801224e <__ieee754_rem_pio2+0xf6>
 801223c:	4b65      	ldr	r3, [pc, #404]	; (80123d4 <__ieee754_rem_pio2+0x27c>)
 801223e:	1e42      	subs	r2, r0, #1
 8012240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012244:	42b3      	cmp	r3, r6
 8012246:	d002      	beq.n	801224e <__ieee754_rem_pio2+0xf6>
 8012248:	ed84 6b00 	vstr	d6, [r4]
 801224c:	e024      	b.n	8012298 <__ieee754_rem_pio2+0x140>
 801224e:	ee16 3a90 	vmov	r3, s13
 8012252:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8012256:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801225a:	2b10      	cmp	r3, #16
 801225c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8012260:	ddf2      	ble.n	8012248 <__ieee754_rem_pio2+0xf0>
 8012262:	eeb0 6b40 	vmov.f64	d6, d0
 8012266:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8012398 <__ieee754_rem_pio2+0x240>
 801226a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801226e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8012272:	eea4 7b03 	vfma.f64	d7, d4, d3
 8012276:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80123a0 <__ieee754_rem_pio2+0x248>
 801227a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801227e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8012282:	ee13 3a90 	vmov	r3, s7
 8012286:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801228a:	1ad3      	subs	r3, r2, r3
 801228c:	2b31      	cmp	r3, #49	; 0x31
 801228e:	dc17      	bgt.n	80122c0 <__ieee754_rem_pio2+0x168>
 8012290:	eeb0 0b46 	vmov.f64	d0, d6
 8012294:	ed84 3b00 	vstr	d3, [r4]
 8012298:	ed94 6b00 	vldr	d6, [r4]
 801229c:	2d00      	cmp	r5, #0
 801229e:	ee30 0b46 	vsub.f64	d0, d0, d6
 80122a2:	ee30 0b47 	vsub.f64	d0, d0, d7
 80122a6:	ed84 0b02 	vstr	d0, [r4, #8]
 80122aa:	da85      	bge.n	80121b8 <__ieee754_rem_pio2+0x60>
 80122ac:	eeb1 6b46 	vneg.f64	d6, d6
 80122b0:	eeb1 0b40 	vneg.f64	d0, d0
 80122b4:	ed84 6b00 	vstr	d6, [r4]
 80122b8:	ed84 0b02 	vstr	d0, [r4, #8]
 80122bc:	4240      	negs	r0, r0
 80122be:	e77b      	b.n	80121b8 <__ieee754_rem_pio2+0x60>
 80122c0:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 80123b0 <__ieee754_rem_pio2+0x258>
 80122c4:	eeb0 0b46 	vmov.f64	d0, d6
 80122c8:	eea4 0b07 	vfma.f64	d0, d4, d7
 80122cc:	ee36 6b40 	vsub.f64	d6, d6, d0
 80122d0:	eea4 6b07 	vfma.f64	d6, d4, d7
 80122d4:	ed9f 4b38 	vldr	d4, [pc, #224]	; 80123b8 <__ieee754_rem_pio2+0x260>
 80122d8:	eeb0 7b46 	vmov.f64	d7, d6
 80122dc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 80122e0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80122e4:	e7b0      	b.n	8012248 <__ieee754_rem_pio2+0xf0>
 80122e6:	4b3c      	ldr	r3, [pc, #240]	; (80123d8 <__ieee754_rem_pio2+0x280>)
 80122e8:	429e      	cmp	r6, r3
 80122ea:	dd06      	ble.n	80122fa <__ieee754_rem_pio2+0x1a2>
 80122ec:	ee30 7b40 	vsub.f64	d7, d0, d0
 80122f0:	ed80 7b02 	vstr	d7, [r0, #8]
 80122f4:	ed80 7b00 	vstr	d7, [r0]
 80122f8:	e740      	b.n	801217c <__ieee754_rem_pio2+0x24>
 80122fa:	1532      	asrs	r2, r6, #20
 80122fc:	ee10 0a10 	vmov	r0, s0
 8012300:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8012304:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8012308:	ec41 0b17 	vmov	d7, r0, r1
 801230c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012310:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80123c0 <__ieee754_rem_pio2+0x268>
 8012314:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012318:	ee37 7b46 	vsub.f64	d7, d7, d6
 801231c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012320:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012324:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012328:	a808      	add	r0, sp, #32
 801232a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801232e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012332:	ed8d 6b04 	vstr	d6, [sp, #16]
 8012336:	ee27 7b05 	vmul.f64	d7, d7, d5
 801233a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801233e:	2103      	movs	r1, #3
 8012340:	ed30 7b02 	vldmdb	r0!, {d7}
 8012344:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801234c:	460b      	mov	r3, r1
 801234e:	f101 31ff 	add.w	r1, r1, #4294967295
 8012352:	d0f5      	beq.n	8012340 <__ieee754_rem_pio2+0x1e8>
 8012354:	4921      	ldr	r1, [pc, #132]	; (80123dc <__ieee754_rem_pio2+0x284>)
 8012356:	9101      	str	r1, [sp, #4]
 8012358:	2102      	movs	r1, #2
 801235a:	9100      	str	r1, [sp, #0]
 801235c:	a802      	add	r0, sp, #8
 801235e:	4621      	mov	r1, r4
 8012360:	f000 f84a 	bl	80123f8 <__kernel_rem_pio2>
 8012364:	2d00      	cmp	r5, #0
 8012366:	f6bf af27 	bge.w	80121b8 <__ieee754_rem_pio2+0x60>
 801236a:	ed94 7b00 	vldr	d7, [r4]
 801236e:	eeb1 7b47 	vneg.f64	d7, d7
 8012372:	ed84 7b00 	vstr	d7, [r4]
 8012376:	ed94 7b02 	vldr	d7, [r4, #8]
 801237a:	eeb1 7b47 	vneg.f64	d7, d7
 801237e:	ed84 7b02 	vstr	d7, [r4, #8]
 8012382:	e79b      	b.n	80122bc <__ieee754_rem_pio2+0x164>
 8012384:	f3af 8000 	nop.w
 8012388:	54400000 	.word	0x54400000
 801238c:	3ff921fb 	.word	0x3ff921fb
 8012390:	1a626331 	.word	0x1a626331
 8012394:	3dd0b461 	.word	0x3dd0b461
 8012398:	1a600000 	.word	0x1a600000
 801239c:	3dd0b461 	.word	0x3dd0b461
 80123a0:	2e037073 	.word	0x2e037073
 80123a4:	3ba3198a 	.word	0x3ba3198a
 80123a8:	6dc9c883 	.word	0x6dc9c883
 80123ac:	3fe45f30 	.word	0x3fe45f30
 80123b0:	2e000000 	.word	0x2e000000
 80123b4:	3ba3198a 	.word	0x3ba3198a
 80123b8:	252049c1 	.word	0x252049c1
 80123bc:	397b839a 	.word	0x397b839a
 80123c0:	00000000 	.word	0x00000000
 80123c4:	41700000 	.word	0x41700000
 80123c8:	3fe921fb 	.word	0x3fe921fb
 80123cc:	4002d97b 	.word	0x4002d97b
 80123d0:	413921fb 	.word	0x413921fb
 80123d4:	08012c5c 	.word	0x08012c5c
 80123d8:	7fefffff 	.word	0x7fefffff
 80123dc:	08012cdc 	.word	0x08012cdc

080123e0 <fabs>:
 80123e0:	ec51 0b10 	vmov	r0, r1, d0
 80123e4:	ee10 2a10 	vmov	r2, s0
 80123e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80123ec:	ec43 2b10 	vmov	d0, r2, r3
 80123f0:	4770      	bx	lr
 80123f2:	0000      	movs	r0, r0
 80123f4:	0000      	movs	r0, r0
	...

080123f8 <__kernel_rem_pio2>:
 80123f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123fc:	ed2d 8b06 	vpush	{d8-d10}
 8012400:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8012404:	460f      	mov	r7, r1
 8012406:	9002      	str	r0, [sp, #8]
 8012408:	49c3      	ldr	r1, [pc, #780]	; (8012718 <__kernel_rem_pio2+0x320>)
 801240a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801240c:	9301      	str	r3, [sp, #4]
 801240e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8012412:	9901      	ldr	r1, [sp, #4]
 8012414:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8012416:	f112 0f14 	cmn.w	r2, #20
 801241a:	bfa8      	it	ge
 801241c:	1ed0      	subge	r0, r2, #3
 801241e:	f101 3aff 	add.w	sl, r1, #4294967295
 8012422:	bfaa      	itet	ge
 8012424:	2418      	movge	r4, #24
 8012426:	2000      	movlt	r0, #0
 8012428:	fb90 f0f4 	sdivge	r0, r0, r4
 801242c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8012700 <__kernel_rem_pio2+0x308>
 8012430:	f06f 0417 	mvn.w	r4, #23
 8012434:	fb00 4404 	mla	r4, r0, r4, r4
 8012438:	eba0 060a 	sub.w	r6, r0, sl
 801243c:	4414      	add	r4, r2
 801243e:	eb09 0c0a 	add.w	ip, r9, sl
 8012442:	ad1a      	add	r5, sp, #104	; 0x68
 8012444:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8012448:	2200      	movs	r2, #0
 801244a:	4562      	cmp	r2, ip
 801244c:	dd10      	ble.n	8012470 <__kernel_rem_pio2+0x78>
 801244e:	9a01      	ldr	r2, [sp, #4]
 8012450:	a91a      	add	r1, sp, #104	; 0x68
 8012452:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012456:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 801245a:	f04f 0c00 	mov.w	ip, #0
 801245e:	45cc      	cmp	ip, r9
 8012460:	dc26      	bgt.n	80124b0 <__kernel_rem_pio2+0xb8>
 8012462:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8012700 <__kernel_rem_pio2+0x308>
 8012466:	f8dd e008 	ldr.w	lr, [sp, #8]
 801246a:	4616      	mov	r6, r2
 801246c:	2500      	movs	r5, #0
 801246e:	e015      	b.n	801249c <__kernel_rem_pio2+0xa4>
 8012470:	42d6      	cmn	r6, r2
 8012472:	d409      	bmi.n	8012488 <__kernel_rem_pio2+0x90>
 8012474:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8012478:	ee07 1a90 	vmov	s15, r1
 801247c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012480:	eca5 7b02 	vstmia	r5!, {d7}
 8012484:	3201      	adds	r2, #1
 8012486:	e7e0      	b.n	801244a <__kernel_rem_pio2+0x52>
 8012488:	eeb0 7b46 	vmov.f64	d7, d6
 801248c:	e7f8      	b.n	8012480 <__kernel_rem_pio2+0x88>
 801248e:	ecbe 5b02 	vldmia	lr!, {d5}
 8012492:	ed96 6b00 	vldr	d6, [r6]
 8012496:	3501      	adds	r5, #1
 8012498:	eea5 7b06 	vfma.f64	d7, d5, d6
 801249c:	4555      	cmp	r5, sl
 801249e:	f1a6 0608 	sub.w	r6, r6, #8
 80124a2:	ddf4      	ble.n	801248e <__kernel_rem_pio2+0x96>
 80124a4:	eca8 7b02 	vstmia	r8!, {d7}
 80124a8:	f10c 0c01 	add.w	ip, ip, #1
 80124ac:	3208      	adds	r2, #8
 80124ae:	e7d6      	b.n	801245e <__kernel_rem_pio2+0x66>
 80124b0:	aa06      	add	r2, sp, #24
 80124b2:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8012708 <__kernel_rem_pio2+0x310>
 80124b6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8012710 <__kernel_rem_pio2+0x318>
 80124ba:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80124be:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80124c2:	9204      	str	r2, [sp, #16]
 80124c4:	9303      	str	r3, [sp, #12]
 80124c6:	464d      	mov	r5, r9
 80124c8:	00eb      	lsls	r3, r5, #3
 80124ca:	9305      	str	r3, [sp, #20]
 80124cc:	ab92      	add	r3, sp, #584	; 0x248
 80124ce:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80124d2:	f10d 0b18 	add.w	fp, sp, #24
 80124d6:	ab6a      	add	r3, sp, #424	; 0x1a8
 80124d8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80124dc:	465e      	mov	r6, fp
 80124de:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80124e2:	4628      	mov	r0, r5
 80124e4:	2800      	cmp	r0, #0
 80124e6:	f1a2 0208 	sub.w	r2, r2, #8
 80124ea:	dc48      	bgt.n	801257e <__kernel_rem_pio2+0x186>
 80124ec:	4620      	mov	r0, r4
 80124ee:	f000 fa17 	bl	8012920 <scalbn>
 80124f2:	eeb0 8b40 	vmov.f64	d8, d0
 80124f6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80124fa:	ee28 0b00 	vmul.f64	d0, d8, d0
 80124fe:	f000 fa8f 	bl	8012a20 <floor>
 8012502:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8012506:	eea0 8b47 	vfms.f64	d8, d0, d7
 801250a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801250e:	2c00      	cmp	r4, #0
 8012510:	ee17 8a90 	vmov	r8, s15
 8012514:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012518:	ee38 8b47 	vsub.f64	d8, d8, d7
 801251c:	dd41      	ble.n	80125a2 <__kernel_rem_pio2+0x1aa>
 801251e:	1e68      	subs	r0, r5, #1
 8012520:	ab06      	add	r3, sp, #24
 8012522:	f1c4 0c18 	rsb	ip, r4, #24
 8012526:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801252a:	fa46 f20c 	asr.w	r2, r6, ip
 801252e:	4490      	add	r8, r2
 8012530:	fa02 f20c 	lsl.w	r2, r2, ip
 8012534:	1ab6      	subs	r6, r6, r2
 8012536:	f1c4 0217 	rsb	r2, r4, #23
 801253a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801253e:	4116      	asrs	r6, r2
 8012540:	2e00      	cmp	r6, #0
 8012542:	dd3d      	ble.n	80125c0 <__kernel_rem_pio2+0x1c8>
 8012544:	f04f 0c00 	mov.w	ip, #0
 8012548:	f108 0801 	add.w	r8, r8, #1
 801254c:	4660      	mov	r0, ip
 801254e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8012552:	4565      	cmp	r5, ip
 8012554:	dc6a      	bgt.n	801262c <__kernel_rem_pio2+0x234>
 8012556:	2c00      	cmp	r4, #0
 8012558:	dd04      	ble.n	8012564 <__kernel_rem_pio2+0x16c>
 801255a:	2c01      	cmp	r4, #1
 801255c:	d07b      	beq.n	8012656 <__kernel_rem_pio2+0x25e>
 801255e:	2c02      	cmp	r4, #2
 8012560:	f000 8083 	beq.w	801266a <__kernel_rem_pio2+0x272>
 8012564:	2e02      	cmp	r6, #2
 8012566:	d12b      	bne.n	80125c0 <__kernel_rem_pio2+0x1c8>
 8012568:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801256c:	ee30 8b48 	vsub.f64	d8, d0, d8
 8012570:	b330      	cbz	r0, 80125c0 <__kernel_rem_pio2+0x1c8>
 8012572:	4620      	mov	r0, r4
 8012574:	f000 f9d4 	bl	8012920 <scalbn>
 8012578:	ee38 8b40 	vsub.f64	d8, d8, d0
 801257c:	e020      	b.n	80125c0 <__kernel_rem_pio2+0x1c8>
 801257e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8012582:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8012586:	3801      	subs	r0, #1
 8012588:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801258c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8012590:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012594:	eca6 0a01 	vstmia	r6!, {s0}
 8012598:	ed92 0b00 	vldr	d0, [r2]
 801259c:	ee37 0b00 	vadd.f64	d0, d7, d0
 80125a0:	e7a0      	b.n	80124e4 <__kernel_rem_pio2+0xec>
 80125a2:	d105      	bne.n	80125b0 <__kernel_rem_pio2+0x1b8>
 80125a4:	1e6a      	subs	r2, r5, #1
 80125a6:	ab06      	add	r3, sp, #24
 80125a8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80125ac:	15f6      	asrs	r6, r6, #23
 80125ae:	e7c7      	b.n	8012540 <__kernel_rem_pio2+0x148>
 80125b0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80125b4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80125b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125bc:	da34      	bge.n	8012628 <__kernel_rem_pio2+0x230>
 80125be:	2600      	movs	r6, #0
 80125c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80125c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125c8:	f040 80aa 	bne.w	8012720 <__kernel_rem_pio2+0x328>
 80125cc:	f105 3bff 	add.w	fp, r5, #4294967295
 80125d0:	4658      	mov	r0, fp
 80125d2:	2200      	movs	r2, #0
 80125d4:	4548      	cmp	r0, r9
 80125d6:	da50      	bge.n	801267a <__kernel_rem_pio2+0x282>
 80125d8:	2a00      	cmp	r2, #0
 80125da:	d06b      	beq.n	80126b4 <__kernel_rem_pio2+0x2bc>
 80125dc:	ab06      	add	r3, sp, #24
 80125de:	3c18      	subs	r4, #24
 80125e0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	f000 8087 	beq.w	80126f8 <__kernel_rem_pio2+0x300>
 80125ea:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80125ee:	4620      	mov	r0, r4
 80125f0:	f000 f996 	bl	8012920 <scalbn>
 80125f4:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8012708 <__kernel_rem_pio2+0x310>
 80125f8:	f10b 0201 	add.w	r2, fp, #1
 80125fc:	a96a      	add	r1, sp, #424	; 0x1a8
 80125fe:	00d3      	lsls	r3, r2, #3
 8012600:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8012604:	465a      	mov	r2, fp
 8012606:	2a00      	cmp	r2, #0
 8012608:	f280 80b8 	bge.w	801277c <__kernel_rem_pio2+0x384>
 801260c:	465a      	mov	r2, fp
 801260e:	2a00      	cmp	r2, #0
 8012610:	f2c0 80d6 	blt.w	80127c0 <__kernel_rem_pio2+0x3c8>
 8012614:	a96a      	add	r1, sp, #424	; 0x1a8
 8012616:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801261a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8012700 <__kernel_rem_pio2+0x308>
 801261e:	4d3f      	ldr	r5, [pc, #252]	; (801271c <__kernel_rem_pio2+0x324>)
 8012620:	2000      	movs	r0, #0
 8012622:	ebab 0102 	sub.w	r1, fp, r2
 8012626:	e0c0      	b.n	80127aa <__kernel_rem_pio2+0x3b2>
 8012628:	2602      	movs	r6, #2
 801262a:	e78b      	b.n	8012544 <__kernel_rem_pio2+0x14c>
 801262c:	f8db 2000 	ldr.w	r2, [fp]
 8012630:	b958      	cbnz	r0, 801264a <__kernel_rem_pio2+0x252>
 8012632:	b122      	cbz	r2, 801263e <__kernel_rem_pio2+0x246>
 8012634:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8012638:	f8cb 2000 	str.w	r2, [fp]
 801263c:	2201      	movs	r2, #1
 801263e:	f10c 0c01 	add.w	ip, ip, #1
 8012642:	f10b 0b04 	add.w	fp, fp, #4
 8012646:	4610      	mov	r0, r2
 8012648:	e783      	b.n	8012552 <__kernel_rem_pio2+0x15a>
 801264a:	ebae 0202 	sub.w	r2, lr, r2
 801264e:	f8cb 2000 	str.w	r2, [fp]
 8012652:	4602      	mov	r2, r0
 8012654:	e7f3      	b.n	801263e <__kernel_rem_pio2+0x246>
 8012656:	f105 3cff 	add.w	ip, r5, #4294967295
 801265a:	ab06      	add	r3, sp, #24
 801265c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8012660:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8012664:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8012668:	e77c      	b.n	8012564 <__kernel_rem_pio2+0x16c>
 801266a:	f105 3cff 	add.w	ip, r5, #4294967295
 801266e:	ab06      	add	r3, sp, #24
 8012670:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8012674:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8012678:	e7f4      	b.n	8012664 <__kernel_rem_pio2+0x26c>
 801267a:	ab06      	add	r3, sp, #24
 801267c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012680:	3801      	subs	r0, #1
 8012682:	431a      	orrs	r2, r3
 8012684:	e7a6      	b.n	80125d4 <__kernel_rem_pio2+0x1dc>
 8012686:	3201      	adds	r2, #1
 8012688:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801268c:	2e00      	cmp	r6, #0
 801268e:	d0fa      	beq.n	8012686 <__kernel_rem_pio2+0x28e>
 8012690:	9b05      	ldr	r3, [sp, #20]
 8012692:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8012696:	eb0d 0003 	add.w	r0, sp, r3
 801269a:	9b01      	ldr	r3, [sp, #4]
 801269c:	18ee      	adds	r6, r5, r3
 801269e:	ab1a      	add	r3, sp, #104	; 0x68
 80126a0:	f105 0c01 	add.w	ip, r5, #1
 80126a4:	3898      	subs	r0, #152	; 0x98
 80126a6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80126aa:	442a      	add	r2, r5
 80126ac:	4562      	cmp	r2, ip
 80126ae:	da04      	bge.n	80126ba <__kernel_rem_pio2+0x2c2>
 80126b0:	4615      	mov	r5, r2
 80126b2:	e709      	b.n	80124c8 <__kernel_rem_pio2+0xd0>
 80126b4:	9804      	ldr	r0, [sp, #16]
 80126b6:	2201      	movs	r2, #1
 80126b8:	e7e6      	b.n	8012688 <__kernel_rem_pio2+0x290>
 80126ba:	9b03      	ldr	r3, [sp, #12]
 80126bc:	f8dd e008 	ldr.w	lr, [sp, #8]
 80126c0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80126c4:	9305      	str	r3, [sp, #20]
 80126c6:	ee07 3a90 	vmov	s15, r3
 80126ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80126ce:	2500      	movs	r5, #0
 80126d0:	eca6 7b02 	vstmia	r6!, {d7}
 80126d4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8012700 <__kernel_rem_pio2+0x308>
 80126d8:	46b0      	mov	r8, r6
 80126da:	4555      	cmp	r5, sl
 80126dc:	dd04      	ble.n	80126e8 <__kernel_rem_pio2+0x2f0>
 80126de:	eca0 7b02 	vstmia	r0!, {d7}
 80126e2:	f10c 0c01 	add.w	ip, ip, #1
 80126e6:	e7e1      	b.n	80126ac <__kernel_rem_pio2+0x2b4>
 80126e8:	ecbe 5b02 	vldmia	lr!, {d5}
 80126ec:	ed38 6b02 	vldmdb	r8!, {d6}
 80126f0:	3501      	adds	r5, #1
 80126f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80126f6:	e7f0      	b.n	80126da <__kernel_rem_pio2+0x2e2>
 80126f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80126fc:	e76e      	b.n	80125dc <__kernel_rem_pio2+0x1e4>
 80126fe:	bf00      	nop
	...
 801270c:	3e700000 	.word	0x3e700000
 8012710:	00000000 	.word	0x00000000
 8012714:	41700000 	.word	0x41700000
 8012718:	08012e28 	.word	0x08012e28
 801271c:	08012de8 	.word	0x08012de8
 8012720:	4260      	negs	r0, r4
 8012722:	eeb0 0b48 	vmov.f64	d0, d8
 8012726:	f000 f8fb 	bl	8012920 <scalbn>
 801272a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8012908 <__kernel_rem_pio2+0x510>
 801272e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8012732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012736:	db18      	blt.n	801276a <__kernel_rem_pio2+0x372>
 8012738:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8012910 <__kernel_rem_pio2+0x518>
 801273c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012740:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8012744:	aa06      	add	r2, sp, #24
 8012746:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801274a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801274e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012752:	f105 0b01 	add.w	fp, r5, #1
 8012756:	ee10 3a10 	vmov	r3, s0
 801275a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801275e:	ee17 3a10 	vmov	r3, s14
 8012762:	3418      	adds	r4, #24
 8012764:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8012768:	e73f      	b.n	80125ea <__kernel_rem_pio2+0x1f2>
 801276a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801276e:	aa06      	add	r2, sp, #24
 8012770:	ee10 3a10 	vmov	r3, s0
 8012774:	46ab      	mov	fp, r5
 8012776:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801277a:	e736      	b.n	80125ea <__kernel_rem_pio2+0x1f2>
 801277c:	a806      	add	r0, sp, #24
 801277e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8012782:	9001      	str	r0, [sp, #4]
 8012784:	ee07 0a90 	vmov	s15, r0
 8012788:	3a01      	subs	r2, #1
 801278a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801278e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8012792:	ee20 0b06 	vmul.f64	d0, d0, d6
 8012796:	ed21 7b02 	vstmdb	r1!, {d7}
 801279a:	e734      	b.n	8012606 <__kernel_rem_pio2+0x20e>
 801279c:	ecb5 5b02 	vldmia	r5!, {d5}
 80127a0:	ecb4 6b02 	vldmia	r4!, {d6}
 80127a4:	3001      	adds	r0, #1
 80127a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80127aa:	4548      	cmp	r0, r9
 80127ac:	dc01      	bgt.n	80127b2 <__kernel_rem_pio2+0x3ba>
 80127ae:	4288      	cmp	r0, r1
 80127b0:	ddf4      	ble.n	801279c <__kernel_rem_pio2+0x3a4>
 80127b2:	a842      	add	r0, sp, #264	; 0x108
 80127b4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80127b8:	ed81 7b00 	vstr	d7, [r1]
 80127bc:	3a01      	subs	r2, #1
 80127be:	e726      	b.n	801260e <__kernel_rem_pio2+0x216>
 80127c0:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80127c2:	2a02      	cmp	r2, #2
 80127c4:	dc0a      	bgt.n	80127dc <__kernel_rem_pio2+0x3e4>
 80127c6:	2a00      	cmp	r2, #0
 80127c8:	dc2e      	bgt.n	8012828 <__kernel_rem_pio2+0x430>
 80127ca:	d047      	beq.n	801285c <__kernel_rem_pio2+0x464>
 80127cc:	f008 0007 	and.w	r0, r8, #7
 80127d0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80127d4:	ecbd 8b06 	vpop	{d8-d10}
 80127d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127dc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80127de:	2a03      	cmp	r2, #3
 80127e0:	d1f4      	bne.n	80127cc <__kernel_rem_pio2+0x3d4>
 80127e2:	a942      	add	r1, sp, #264	; 0x108
 80127e4:	f1a3 0208 	sub.w	r2, r3, #8
 80127e8:	440a      	add	r2, r1
 80127ea:	4611      	mov	r1, r2
 80127ec:	4658      	mov	r0, fp
 80127ee:	2800      	cmp	r0, #0
 80127f0:	f1a1 0108 	sub.w	r1, r1, #8
 80127f4:	dc55      	bgt.n	80128a2 <__kernel_rem_pio2+0x4aa>
 80127f6:	4659      	mov	r1, fp
 80127f8:	2901      	cmp	r1, #1
 80127fa:	f1a2 0208 	sub.w	r2, r2, #8
 80127fe:	dc60      	bgt.n	80128c2 <__kernel_rem_pio2+0x4ca>
 8012800:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8012918 <__kernel_rem_pio2+0x520>
 8012804:	aa42      	add	r2, sp, #264	; 0x108
 8012806:	4413      	add	r3, r2
 8012808:	f1bb 0f01 	cmp.w	fp, #1
 801280c:	dc69      	bgt.n	80128e2 <__kernel_rem_pio2+0x4ea>
 801280e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8012812:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8012816:	2e00      	cmp	r6, #0
 8012818:	d16a      	bne.n	80128f0 <__kernel_rem_pio2+0x4f8>
 801281a:	ed87 5b00 	vstr	d5, [r7]
 801281e:	ed87 6b02 	vstr	d6, [r7, #8]
 8012822:	ed87 7b04 	vstr	d7, [r7, #16]
 8012826:	e7d1      	b.n	80127cc <__kernel_rem_pio2+0x3d4>
 8012828:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8012918 <__kernel_rem_pio2+0x520>
 801282c:	aa42      	add	r2, sp, #264	; 0x108
 801282e:	4413      	add	r3, r2
 8012830:	465a      	mov	r2, fp
 8012832:	2a00      	cmp	r2, #0
 8012834:	da26      	bge.n	8012884 <__kernel_rem_pio2+0x48c>
 8012836:	b35e      	cbz	r6, 8012890 <__kernel_rem_pio2+0x498>
 8012838:	eeb1 7b46 	vneg.f64	d7, d6
 801283c:	ed87 7b00 	vstr	d7, [r7]
 8012840:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8012844:	aa44      	add	r2, sp, #272	; 0x110
 8012846:	2301      	movs	r3, #1
 8012848:	ee37 7b46 	vsub.f64	d7, d7, d6
 801284c:	459b      	cmp	fp, r3
 801284e:	da22      	bge.n	8012896 <__kernel_rem_pio2+0x49e>
 8012850:	b10e      	cbz	r6, 8012856 <__kernel_rem_pio2+0x45e>
 8012852:	eeb1 7b47 	vneg.f64	d7, d7
 8012856:	ed87 7b02 	vstr	d7, [r7, #8]
 801285a:	e7b7      	b.n	80127cc <__kernel_rem_pio2+0x3d4>
 801285c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012918 <__kernel_rem_pio2+0x520>
 8012860:	aa42      	add	r2, sp, #264	; 0x108
 8012862:	4413      	add	r3, r2
 8012864:	f1bb 0f00 	cmp.w	fp, #0
 8012868:	da05      	bge.n	8012876 <__kernel_rem_pio2+0x47e>
 801286a:	b10e      	cbz	r6, 8012870 <__kernel_rem_pio2+0x478>
 801286c:	eeb1 7b47 	vneg.f64	d7, d7
 8012870:	ed87 7b00 	vstr	d7, [r7]
 8012874:	e7aa      	b.n	80127cc <__kernel_rem_pio2+0x3d4>
 8012876:	ed33 6b02 	vldmdb	r3!, {d6}
 801287a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801287e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012882:	e7ef      	b.n	8012864 <__kernel_rem_pio2+0x46c>
 8012884:	ed33 7b02 	vldmdb	r3!, {d7}
 8012888:	3a01      	subs	r2, #1
 801288a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801288e:	e7d0      	b.n	8012832 <__kernel_rem_pio2+0x43a>
 8012890:	eeb0 7b46 	vmov.f64	d7, d6
 8012894:	e7d2      	b.n	801283c <__kernel_rem_pio2+0x444>
 8012896:	ecb2 6b02 	vldmia	r2!, {d6}
 801289a:	3301      	adds	r3, #1
 801289c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80128a0:	e7d4      	b.n	801284c <__kernel_rem_pio2+0x454>
 80128a2:	ed91 7b00 	vldr	d7, [r1]
 80128a6:	ed91 5b02 	vldr	d5, [r1, #8]
 80128aa:	3801      	subs	r0, #1
 80128ac:	ee37 6b05 	vadd.f64	d6, d7, d5
 80128b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80128b4:	ed81 6b00 	vstr	d6, [r1]
 80128b8:	ee37 7b05 	vadd.f64	d7, d7, d5
 80128bc:	ed81 7b02 	vstr	d7, [r1, #8]
 80128c0:	e795      	b.n	80127ee <__kernel_rem_pio2+0x3f6>
 80128c2:	ed92 7b00 	vldr	d7, [r2]
 80128c6:	ed92 5b02 	vldr	d5, [r2, #8]
 80128ca:	3901      	subs	r1, #1
 80128cc:	ee37 6b05 	vadd.f64	d6, d7, d5
 80128d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80128d4:	ed82 6b00 	vstr	d6, [r2]
 80128d8:	ee37 7b05 	vadd.f64	d7, d7, d5
 80128dc:	ed82 7b02 	vstr	d7, [r2, #8]
 80128e0:	e78a      	b.n	80127f8 <__kernel_rem_pio2+0x400>
 80128e2:	ed33 6b02 	vldmdb	r3!, {d6}
 80128e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80128ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80128ee:	e78b      	b.n	8012808 <__kernel_rem_pio2+0x410>
 80128f0:	eeb1 5b45 	vneg.f64	d5, d5
 80128f4:	eeb1 6b46 	vneg.f64	d6, d6
 80128f8:	ed87 5b00 	vstr	d5, [r7]
 80128fc:	eeb1 7b47 	vneg.f64	d7, d7
 8012900:	ed87 6b02 	vstr	d6, [r7, #8]
 8012904:	e78d      	b.n	8012822 <__kernel_rem_pio2+0x42a>
 8012906:	bf00      	nop
 8012908:	00000000 	.word	0x00000000
 801290c:	41700000 	.word	0x41700000
 8012910:	00000000 	.word	0x00000000
 8012914:	3e700000 	.word	0x3e700000
	...

08012920 <scalbn>:
 8012920:	ee10 1a90 	vmov	r1, s1
 8012924:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012928:	b98b      	cbnz	r3, 801294e <scalbn+0x2e>
 801292a:	ee10 3a10 	vmov	r3, s0
 801292e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012932:	4319      	orrs	r1, r3
 8012934:	d00a      	beq.n	801294c <scalbn+0x2c>
 8012936:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80129e8 <scalbn+0xc8>
 801293a:	4b37      	ldr	r3, [pc, #220]	; (8012a18 <scalbn+0xf8>)
 801293c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012940:	4298      	cmp	r0, r3
 8012942:	da0b      	bge.n	801295c <scalbn+0x3c>
 8012944:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 80129f0 <scalbn+0xd0>
 8012948:	ee20 0b07 	vmul.f64	d0, d0, d7
 801294c:	4770      	bx	lr
 801294e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8012952:	4293      	cmp	r3, r2
 8012954:	d107      	bne.n	8012966 <scalbn+0x46>
 8012956:	ee30 0b00 	vadd.f64	d0, d0, d0
 801295a:	4770      	bx	lr
 801295c:	ee10 1a90 	vmov	r1, s1
 8012960:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012964:	3b36      	subs	r3, #54	; 0x36
 8012966:	f24c 3250 	movw	r2, #50000	; 0xc350
 801296a:	4290      	cmp	r0, r2
 801296c:	dd0d      	ble.n	801298a <scalbn+0x6a>
 801296e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80129f8 <scalbn+0xd8>
 8012972:	ee10 3a90 	vmov	r3, s1
 8012976:	eeb0 6b47 	vmov.f64	d6, d7
 801297a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8012a00 <scalbn+0xe0>
 801297e:	2b00      	cmp	r3, #0
 8012980:	fe27 7b05 	vselge.f64	d7, d7, d5
 8012984:	ee27 0b06 	vmul.f64	d0, d7, d6
 8012988:	4770      	bx	lr
 801298a:	4418      	add	r0, r3
 801298c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8012990:	4298      	cmp	r0, r3
 8012992:	dcec      	bgt.n	801296e <scalbn+0x4e>
 8012994:	2800      	cmp	r0, #0
 8012996:	dd0a      	ble.n	80129ae <scalbn+0x8e>
 8012998:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801299c:	ec53 2b10 	vmov	r2, r3, d0
 80129a0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80129a4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80129a8:	ec43 2b10 	vmov	d0, r2, r3
 80129ac:	4770      	bx	lr
 80129ae:	f110 0f35 	cmn.w	r0, #53	; 0x35
 80129b2:	da09      	bge.n	80129c8 <scalbn+0xa8>
 80129b4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80129f0 <scalbn+0xd0>
 80129b8:	ee10 3a90 	vmov	r3, s1
 80129bc:	eeb0 6b47 	vmov.f64	d6, d7
 80129c0:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8012a08 <scalbn+0xe8>
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	e7db      	b.n	8012980 <scalbn+0x60>
 80129c8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80129cc:	ec53 2b10 	vmov	r2, r3, d0
 80129d0:	3036      	adds	r0, #54	; 0x36
 80129d2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80129d6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80129da:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8012a10 <scalbn+0xf0>
 80129de:	ec43 2b10 	vmov	d0, r2, r3
 80129e2:	e7b1      	b.n	8012948 <scalbn+0x28>
 80129e4:	f3af 8000 	nop.w
 80129e8:	00000000 	.word	0x00000000
 80129ec:	43500000 	.word	0x43500000
 80129f0:	c2f8f359 	.word	0xc2f8f359
 80129f4:	01a56e1f 	.word	0x01a56e1f
 80129f8:	8800759c 	.word	0x8800759c
 80129fc:	7e37e43c 	.word	0x7e37e43c
 8012a00:	8800759c 	.word	0x8800759c
 8012a04:	fe37e43c 	.word	0xfe37e43c
 8012a08:	c2f8f359 	.word	0xc2f8f359
 8012a0c:	81a56e1f 	.word	0x81a56e1f
 8012a10:	00000000 	.word	0x00000000
 8012a14:	3c900000 	.word	0x3c900000
 8012a18:	ffff3cb0 	.word	0xffff3cb0
 8012a1c:	00000000 	.word	0x00000000

08012a20 <floor>:
 8012a20:	ee10 1a90 	vmov	r1, s1
 8012a24:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012a28:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8012a2c:	2b13      	cmp	r3, #19
 8012a2e:	b530      	push	{r4, r5, lr}
 8012a30:	ee10 0a10 	vmov	r0, s0
 8012a34:	ee10 5a10 	vmov	r5, s0
 8012a38:	dc31      	bgt.n	8012a9e <floor+0x7e>
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	da15      	bge.n	8012a6a <floor+0x4a>
 8012a3e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8012b00 <floor+0xe0>
 8012a42:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012a46:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a4e:	dd07      	ble.n	8012a60 <floor+0x40>
 8012a50:	2900      	cmp	r1, #0
 8012a52:	da4e      	bge.n	8012af2 <floor+0xd2>
 8012a54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012a58:	4308      	orrs	r0, r1
 8012a5a:	d04d      	beq.n	8012af8 <floor+0xd8>
 8012a5c:	492a      	ldr	r1, [pc, #168]	; (8012b08 <floor+0xe8>)
 8012a5e:	2000      	movs	r0, #0
 8012a60:	460b      	mov	r3, r1
 8012a62:	4602      	mov	r2, r0
 8012a64:	ec43 2b10 	vmov	d0, r2, r3
 8012a68:	e020      	b.n	8012aac <floor+0x8c>
 8012a6a:	4a28      	ldr	r2, [pc, #160]	; (8012b0c <floor+0xec>)
 8012a6c:	411a      	asrs	r2, r3
 8012a6e:	ea01 0402 	and.w	r4, r1, r2
 8012a72:	4304      	orrs	r4, r0
 8012a74:	d01a      	beq.n	8012aac <floor+0x8c>
 8012a76:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8012b00 <floor+0xe0>
 8012a7a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012a7e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a86:	ddeb      	ble.n	8012a60 <floor+0x40>
 8012a88:	2900      	cmp	r1, #0
 8012a8a:	bfbe      	ittt	lt
 8012a8c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8012a90:	fa40 f303 	asrlt.w	r3, r0, r3
 8012a94:	18c9      	addlt	r1, r1, r3
 8012a96:	ea21 0102 	bic.w	r1, r1, r2
 8012a9a:	2000      	movs	r0, #0
 8012a9c:	e7e0      	b.n	8012a60 <floor+0x40>
 8012a9e:	2b33      	cmp	r3, #51	; 0x33
 8012aa0:	dd05      	ble.n	8012aae <floor+0x8e>
 8012aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012aa6:	d101      	bne.n	8012aac <floor+0x8c>
 8012aa8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012aac:	bd30      	pop	{r4, r5, pc}
 8012aae:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8012ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8012ab6:	40e2      	lsrs	r2, r4
 8012ab8:	4210      	tst	r0, r2
 8012aba:	d0f7      	beq.n	8012aac <floor+0x8c>
 8012abc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012b00 <floor+0xe0>
 8012ac0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012ac4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012acc:	ddc8      	ble.n	8012a60 <floor+0x40>
 8012ace:	2900      	cmp	r1, #0
 8012ad0:	da02      	bge.n	8012ad8 <floor+0xb8>
 8012ad2:	2b14      	cmp	r3, #20
 8012ad4:	d103      	bne.n	8012ade <floor+0xbe>
 8012ad6:	3101      	adds	r1, #1
 8012ad8:	ea20 0002 	bic.w	r0, r0, r2
 8012adc:	e7c0      	b.n	8012a60 <floor+0x40>
 8012ade:	2401      	movs	r4, #1
 8012ae0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012ae4:	fa04 f303 	lsl.w	r3, r4, r3
 8012ae8:	4418      	add	r0, r3
 8012aea:	4285      	cmp	r5, r0
 8012aec:	bf88      	it	hi
 8012aee:	1909      	addhi	r1, r1, r4
 8012af0:	e7f2      	b.n	8012ad8 <floor+0xb8>
 8012af2:	2000      	movs	r0, #0
 8012af4:	4601      	mov	r1, r0
 8012af6:	e7b3      	b.n	8012a60 <floor+0x40>
 8012af8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8012afc:	e7b0      	b.n	8012a60 <floor+0x40>
 8012afe:	bf00      	nop
 8012b00:	8800759c 	.word	0x8800759c
 8012b04:	7e37e43c 	.word	0x7e37e43c
 8012b08:	bff00000 	.word	0xbff00000
 8012b0c:	000fffff 	.word	0x000fffff

08012b10 <_init>:
 8012b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b12:	bf00      	nop
 8012b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b16:	bc08      	pop	{r3}
 8012b18:	469e      	mov	lr, r3
 8012b1a:	4770      	bx	lr

08012b1c <_fini>:
 8012b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b1e:	bf00      	nop
 8012b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b22:	bc08      	pop	{r3}
 8012b24:	469e      	mov	lr, r3
 8012b26:	4770      	bx	lr
