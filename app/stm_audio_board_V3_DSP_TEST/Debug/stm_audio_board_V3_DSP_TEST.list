
stm_audio_board_V3_DSP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .sdram_section 0000002a  c0000000  c0000000  00030000  2**2
                  ALLOC
  2 .text         00008edc  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  080091a8  080091a8  000191a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080091c0  080091c0  000191c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080091c4  080091c4  000191c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080091c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a4  24000010  080091d8  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003b4  080091d8  000203b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000130e1  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002f6e  00000000  00000000  00033162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000e48  00000000  00000000  000360d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000abd  00000000  00000000  00036f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00033a91  00000000  00000000  000379d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016482  00000000  00000000  0006b466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00143742  00000000  00000000  000818e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000038fc  00000000  00000000  001c502c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000092  00000000  00000000  001c8928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08009190 	.word	0x08009190

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08009190 	.word	0x08009190

0800030c <ad1939_write_reg>:
#include "AD1939_driver.h"


// send bytes
int ad1939_write_reg(uint8_t reg_address, uint8_t data){
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af02      	add	r7, sp, #8
 8000312:	4603      	mov	r3, r0
 8000314:	460a      	mov	r2, r1
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]
	int8_t retval = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	73fb      	strb	r3, [r7, #15]
	TXdata[0] = AD1939_Global_Address_Write;
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <ad1939_write_reg+0x4c>)
 8000322:	2208      	movs	r2, #8
 8000324:	701a      	strb	r2, [r3, #0]
	TXdata[1] = reg_address;
 8000326:	4a0c      	ldr	r2, [pc, #48]	; (8000358 <ad1939_write_reg+0x4c>)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	7053      	strb	r3, [r2, #1]
	TXdata[2] = data;
 800032c:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <ad1939_write_reg+0x4c>)
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	7093      	strb	r3, [r2, #2]

//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000332:	4b0a      	ldr	r3, [pc, #40]	; (800035c <ad1939_write_reg+0x50>)
 8000334:	6818      	ldr	r0, [r3, #0]
 8000336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2303      	movs	r3, #3
 800033e:	4a08      	ldr	r2, [pc, #32]	; (8000360 <ad1939_write_reg+0x54>)
 8000340:	4905      	ldr	r1, [pc, #20]	; (8000358 <ad1939_write_reg+0x4c>)
 8000342:	f008 f9d3 	bl	80086ec <HAL_SPI_TransmitReceive>
 8000346:	4603      	mov	r3, r0
 8000348:	73fb      	strb	r3, [r7, #15]
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 //HAL_Delay(10);
	return retval;
 800034a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	24000030 	.word	0x24000030
 800035c:	2400002c 	.word	0x2400002c
 8000360:	24000034 	.word	0x24000034

08000364 <ad1939_pll_locked>:

	return retval;
}

int ad1939_pll_locked()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af02      	add	r7, sp, #8
	TXdata[0] = AD1939_Global_Address_Read;
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <ad1939_pll_locked+0x3c>)
 800036c:	2209      	movs	r2, #9
 800036e:	701a      	strb	r2, [r3, #0]
	TXdata[1] = AD1939_PLL_Control_1;
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000372:	2201      	movs	r2, #1
 8000374:	705a      	strb	r2, [r3, #1]
	TXdata[2] = 0b00000100;
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000378:	2204      	movs	r2, #4
 800037a:	709a      	strb	r2, [r3, #2]
	HAL_Delay(10);
 800037c:	200a      	movs	r0, #10
 800037e:	f001 fabf 	bl	8001900 <HAL_Delay>
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <ad1939_pll_locked+0x40>)
 8000384:	6818      	ldr	r0, [r3, #0]
 8000386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	2303      	movs	r3, #3
 800038e:	4a06      	ldr	r2, [pc, #24]	; (80003a8 <ad1939_pll_locked+0x44>)
 8000390:	4903      	ldr	r1, [pc, #12]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000392:	f008 f9ab 	bl	80086ec <HAL_SPI_TransmitReceive>
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 return 0;
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	24000030 	.word	0x24000030
 80003a4:	2400002c 	.word	0x2400002c
 80003a8:	24000034 	.word	0x24000034

080003ac <ad1939_init>:

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
    AD1939_spi = hspi_codec;
 80003b4:	4a3d      	ldr	r2, [pc, #244]	; (80004ac <ad1939_init+0x100>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6013      	str	r3, [r2, #0]

    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 80003ba:	21be      	movs	r1, #190	; 0xbe
 80003bc:	2000      	movs	r0, #0
 80003be:	f7ff ffa5 	bl	800030c <ad1939_write_reg>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d002      	beq.n	80003ce <ad1939_init+0x22>
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295
 80003cc:	e069      	b.n	80004a2 <ad1939_init+0xf6>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 80003ce:	2104      	movs	r1, #4
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff ff9b 	bl	800030c <ad1939_write_reg>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d002      	beq.n	80003e2 <ad1939_init+0x36>
 80003dc:	f04f 33ff 	mov.w	r3, #4294967295
 80003e0:	e05f      	b.n	80004a2 <ad1939_init+0xf6>





    HAL_Delay(100);
 80003e2:	2064      	movs	r0, #100	; 0x64
 80003e4:	f001 fa8c 	bl	8001900 <HAL_Delay>

    if(ad1939_pll_locked()){
 80003e8:	f7ff ffbc 	bl	8000364 <ad1939_pll_locked>
    // 192 khz
    //    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000100)) return -1;
    // 96 khz
//            if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000010)) return -1;
    // 48 Khz
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b01000000)) return -1;
 80003ec:	2140      	movs	r1, #64	; 0x40
 80003ee:	2002      	movs	r0, #2
 80003f0:	f7ff ff8c 	bl	800030c <ad1939_write_reg>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d002      	beq.n	8000400 <ad1939_init+0x54>
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
 80003fe:	e050      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000100)) return -1; // Slave setup
 8000400:	2104      	movs	r1, #4
 8000402:	2003      	movs	r0, #3
 8000404:	f7ff ff82 	bl	800030c <ad1939_write_reg>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d002      	beq.n	8000414 <ad1939_init+0x68>
 800040e:	f04f 33ff 	mov.w	r3, #4294967295
 8000412:	e046      	b.n	80004a2 <ad1939_init+0xf6>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 8000414:	2100      	movs	r1, #0
 8000416:	2004      	movs	r0, #4
 8000418:	f7ff ff78 	bl	800030c <ad1939_write_reg>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d002      	beq.n	8000428 <ad1939_init+0x7c>
 8000422:	f04f 33ff 	mov.w	r3, #4294967295
 8000426:	e03c      	b.n	80004a2 <ad1939_init+0xf6>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 8000428:	2100      	movs	r1, #0
 800042a:	2005      	movs	r0, #5
 800042c:	f7ff ff6e 	bl	800030c <ad1939_write_reg>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d002      	beq.n	800043c <ad1939_init+0x90>
 8000436:	f04f 33ff 	mov.w	r3, #4294967295
 800043a:	e032      	b.n	80004a2 <ad1939_init+0xf6>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 800043c:	2100      	movs	r1, #0
 800043e:	2008      	movs	r0, #8
 8000440:	f7ff ff64 	bl	800030c <ad1939_write_reg>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d002      	beq.n	8000450 <ad1939_init+0xa4>
 800044a:	f04f 33ff 	mov.w	r3, #4294967295
 800044e:	e028      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 8000450:	2100      	movs	r1, #0
 8000452:	2009      	movs	r0, #9
 8000454:	f7ff ff5a 	bl	800030c <ad1939_write_reg>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d002      	beq.n	8000464 <ad1939_init+0xb8>
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
 8000462:	e01e      	b.n	80004a2 <ad1939_init+0xf6>
    // 192 khz
	//    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b10000000)) return -1;
    // 96khz
//        if (ad1939_write_reg(AD1939_ADC_Control_0, 0b01000000)) return -1;
        // 48 Khz
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 8000464:	2100      	movs	r1, #0
 8000466:	200e      	movs	r0, #14
 8000468:	f7ff ff50 	bl	800030c <ad1939_write_reg>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d002      	beq.n	8000478 <ad1939_init+0xcc>
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
 8000476:	e014      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0b00100000 )) return -1;
 8000478:	2120      	movs	r1, #32
 800047a:	200f      	movs	r0, #15
 800047c:	f7ff ff46 	bl	800030c <ad1939_write_reg>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d002      	beq.n	800048c <ad1939_init+0xe0>
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	e00a      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 800048c:	2100      	movs	r1, #0
 800048e:	2010      	movs	r0, #16
 8000490:	f7ff ff3c 	bl	800030c <ad1939_write_reg>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d002      	beq.n	80004a0 <ad1939_init+0xf4>
 800049a:	f04f 33ff 	mov.w	r3, #4294967295
 800049e:	e000      	b.n	80004a2 <ad1939_init+0xf6>



    return 0; // Return 0 if all writes are successful
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	2400002c 	.word	0x2400002c

080004b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b6:	4b19      	ldr	r3, [pc, #100]	; (800051c <MX_DMA_Init+0x6c>)
 80004b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004bc:	4a17      	ldr	r2, [pc, #92]	; (800051c <MX_DMA_Init+0x6c>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <MX_DMA_Init+0x6c>)
 80004c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004cc:	f003 0301 	and.w	r3, r3, #1
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <MX_DMA_Init+0x6c>)
 80004d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004da:	4a10      	ldr	r2, [pc, #64]	; (800051c <MX_DMA_Init+0x6c>)
 80004dc:	f043 0302 	orr.w	r3, r3, #2
 80004e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80004e4:	4b0d      	ldr	r3, [pc, #52]	; (800051c <MX_DMA_Init+0x6c>)
 80004e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004ea:	f003 0302 	and.w	r3, r3, #2
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	200b      	movs	r0, #11
 80004f8:	f001 fb01 	bl	8001afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80004fc:	200b      	movs	r0, #11
 80004fe:	f001 fb18 	bl	8001b32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	2038      	movs	r0, #56	; 0x38
 8000508:	f001 faf9 	bl	8001afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800050c:	2038      	movs	r0, #56	; 0x38
 800050e:	f001 fb10 	bl	8001b32 <HAL_NVIC_EnableIRQ>

}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	58024400 	.word	0x58024400

08000520 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b090      	sub	sp, #64	; 0x40
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800053a:	4b2c      	ldr	r3, [pc, #176]	; (80005ec <MX_FMC_Init+0xcc>)
 800053c:	4a2c      	ldr	r2, [pc, #176]	; (80005f0 <MX_FMC_Init+0xd0>)
 800053e:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000540:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <MX_FMC_Init+0xcc>)
 8000542:	2200      	movs	r2, #0
 8000544:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000546:	4b29      	ldr	r3, [pc, #164]	; (80005ec <MX_FMC_Init+0xcc>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 800054c:	4b27      	ldr	r3, [pc, #156]	; (80005ec <MX_FMC_Init+0xcc>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000552:	4b26      	ldr	r3, [pc, #152]	; (80005ec <MX_FMC_Init+0xcc>)
 8000554:	2210      	movs	r2, #16
 8000556:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000558:	4b24      	ldr	r3, [pc, #144]	; (80005ec <MX_FMC_Init+0xcc>)
 800055a:	2200      	movs	r2, #0
 800055c:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800055e:	4b23      	ldr	r3, [pc, #140]	; (80005ec <MX_FMC_Init+0xcc>)
 8000560:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000564:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000566:	4b21      	ldr	r3, [pc, #132]	; (80005ec <MX_FMC_Init+0xcc>)
 8000568:	2200      	movs	r2, #0
 800056a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <MX_FMC_Init+0xcc>)
 800056e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000572:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000574:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <MX_FMC_Init+0xcc>)
 8000576:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800057a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <MX_FMC_Init+0xcc>)
 800057e:	2200      	movs	r2, #0
 8000580:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000582:	2310      	movs	r3, #16
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000586:	2310      	movs	r3, #16
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 16;
 800058a:	2310      	movs	r3, #16
 800058c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SdramTiming.RowCycleDelay = 16;
 800058e:	2310      	movs	r3, #16
 8000590:	633b      	str	r3, [r7, #48]	; 0x30
  SdramTiming.WriteRecoveryTime = 16;
 8000592:	2310      	movs	r3, #16
 8000594:	637b      	str	r3, [r7, #52]	; 0x34
  SdramTiming.RPDelay = 16;
 8000596:	2310      	movs	r3, #16
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  SdramTiming.RCDDelay = 16;
 800059a:	2310      	movs	r3, #16
 800059c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800059e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a2:	4619      	mov	r1, r3
 80005a4:	4811      	ldr	r0, [pc, #68]	; (80005ec <MX_FMC_Init+0xcc>)
 80005a6:	f007 fee3 	bl	8008370 <HAL_SDRAM_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 80005b0:	f000 fdeb 	bl	800118a <Error_Handler>

//    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 2500);


    IS42S16800J_Context_t my_sdram;
    my_sdram.TargetBank  = FMC_SDRAM_CMD_TARGET_BANK1;
 80005b4:	2310      	movs	r3, #16
 80005b6:	607b      	str	r3, [r7, #4]
    my_sdram.RefreshMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80005b8:	2303      	movs	r3, #3
 80005ba:	60bb      	str	r3, [r7, #8]
    my_sdram.RefreshRate = REFRESH_COUNT;
 80005bc:	f240 63d6 	movw	r3, #1750	; 0x6d6
 80005c0:	60fb      	str	r3, [r7, #12]
    my_sdram.CASLatency  = IS42S16800J_CAS_LATENCY_3;
 80005c2:	2330      	movs	r3, #48	; 0x30
 80005c4:	61bb      	str	r3, [r7, #24]
    my_sdram.OperationMode = IS42S16800J_OPERATING_MODE_STANDARD;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
    my_sdram.WriteBurstMode = IS42S16800J_WRITEBURST_MODE_SINGLE;
 80005ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ce:	623b      	str	r3, [r7, #32]
    my_sdram.BurstType 		= IS42S16800J_BURST_TYPE_SEQUENTIAL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
    my_sdram.BurstLength 	= IS42S16800J_BURST_LENGTH_1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]

    IS42S16800J_Init(&hsdram1, &my_sdram);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4619      	mov	r1, r3
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <MX_FMC_Init+0xcc>)
 80005de:	f000 f975 	bl	80008cc <IS42S16800J_Init>
  /* USER CODE END FMC_Init 2 */
}
 80005e2:	bf00      	nop
 80005e4:	3740      	adds	r7, #64	; 0x40
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	24000038 	.word	0x24000038
 80005f0:	52004140 	.word	0x52004140

080005f4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b0b6      	sub	sp, #216	; 0xd8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800060a:	4b5b      	ldr	r3, [pc, #364]	; (8000778 <HAL_FMC_MspInit+0x184>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	f040 80ae 	bne.w	8000770 <HAL_FMC_MspInit+0x17c>
    return;
  }
  FMC_Initialized = 1;
 8000614:	4b58      	ldr	r3, [pc, #352]	; (8000778 <HAL_FMC_MspInit+0x184>)
 8000616:	2201      	movs	r2, #1
 8000618:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	22b8      	movs	r2, #184	; 0xb8
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f008 fd88 	bl	8009138 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800062c:	f04f 0300 	mov.w	r3, #0
 8000630:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000634:	2300      	movs	r3, #0
 8000636:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	4618      	mov	r0, r3
 800063e:	f004 fcbf 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000648:	f000 fd9f 	bl	800118a <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800064c:	4b4b      	ldr	r3, [pc, #300]	; (800077c <HAL_FMC_MspInit+0x188>)
 800064e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000652:	4a4a      	ldr	r2, [pc, #296]	; (800077c <HAL_FMC_MspInit+0x188>)
 8000654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000658:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800065c:	4b47      	ldr	r3, [pc, #284]	; (800077c <HAL_FMC_MspInit+0x188>)
 800065e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800066a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800066e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000672:	2302      	movs	r3, #2
 8000674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067e:	2303      	movs	r3, #3
 8000680:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000684:	230c      	movs	r3, #12
 8000686:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800068a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800068e:	4619      	mov	r1, r3
 8000690:	483b      	ldr	r0, [pc, #236]	; (8000780 <HAL_FMC_MspInit+0x18c>)
 8000692:	f003 fb49 	bl	8003d28 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000696:	230d      	movs	r3, #13
 8000698:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006ae:	230c      	movs	r3, #12
 80006b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4832      	ldr	r0, [pc, #200]	; (8000784 <HAL_FMC_MspInit+0x190>)
 80006bc:	f003 fb34 	bl	8003d28 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006c0:	2330      	movs	r3, #48	; 0x30
 80006c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006d8:	230c      	movs	r3, #12
 80006da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006e2:	4619      	mov	r1, r3
 80006e4:	4828      	ldr	r0, [pc, #160]	; (8000788 <HAL_FMC_MspInit+0x194>)
 80006e6:	f003 fb1f 	bl	8003d28 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 80006ea:	f248 1311 	movw	r3, #33041	; 0x8111
 80006ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fe:	2303      	movs	r3, #3
 8000700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000704:	230c      	movs	r3, #12
 8000706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800070a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800070e:	4619      	mov	r1, r3
 8000710:	481e      	ldr	r0, [pc, #120]	; (800078c <HAL_FMC_MspInit+0x198>)
 8000712:	f003 fb09 	bl	8003d28 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000716:	f24e 7383 	movw	r3, #59267	; 0xe783
 800071a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	2302      	movs	r3, #2
 8000720:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072a:	2303      	movs	r3, #3
 800072c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000730:	230c      	movs	r3, #12
 8000732:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000736:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800073a:	4619      	mov	r1, r3
 800073c:	4814      	ldr	r0, [pc, #80]	; (8000790 <HAL_FMC_MspInit+0x19c>)
 800073e:	f003 faf3 	bl	8003d28 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000742:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000746:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000756:	2303      	movs	r3, #3
 8000758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800075c:	230c      	movs	r3, #12
 800075e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000762:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000766:	4619      	mov	r1, r3
 8000768:	480a      	ldr	r0, [pc, #40]	; (8000794 <HAL_FMC_MspInit+0x1a0>)
 800076a:	f003 fadd 	bl	8003d28 <HAL_GPIO_Init>
 800076e:	e000      	b.n	8000772 <HAL_FMC_MspInit+0x17e>
    return;
 8000770:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000772:	37d8      	adds	r7, #216	; 0xd8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2400006c 	.word	0x2400006c
 800077c:	58024400 	.word	0x58024400
 8000780:	58021400 	.word	0x58021400
 8000784:	58020800 	.word	0x58020800
 8000788:	58020000 	.word	0x58020000
 800078c:	58021800 	.word	0x58021800
 8000790:	58021000 	.word	0x58021000
 8000794:	58020c00 	.word	0x58020c00

08000798 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007a0:	f7ff ff28 	bl	80005f4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007c2:	4b40      	ldr	r3, [pc, #256]	; (80008c4 <MX_GPIO_Init+0x118>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c8:	4a3e      	ldr	r2, [pc, #248]	; (80008c4 <MX_GPIO_Init+0x118>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007d2:	4b3c      	ldr	r3, [pc, #240]	; (80008c4 <MX_GPIO_Init+0x118>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d8:	f003 0310 	and.w	r3, r3, #16
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e0:	4b38      	ldr	r3, [pc, #224]	; (80008c4 <MX_GPIO_Init+0x118>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e6:	4a37      	ldr	r2, [pc, #220]	; (80008c4 <MX_GPIO_Init+0x118>)
 80007e8:	f043 0320 	orr.w	r3, r3, #32
 80007ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f0:	4b34      	ldr	r3, [pc, #208]	; (80008c4 <MX_GPIO_Init+0x118>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f6:	f003 0320 	and.w	r3, r3, #32
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b31      	ldr	r3, [pc, #196]	; (80008c4 <MX_GPIO_Init+0x118>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000804:	4a2f      	ldr	r2, [pc, #188]	; (80008c4 <MX_GPIO_Init+0x118>)
 8000806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080e:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <MX_GPIO_Init+0x118>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081c:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <MX_GPIO_Init+0x118>)
 800081e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000822:	4a28      	ldr	r2, [pc, #160]	; (80008c4 <MX_GPIO_Init+0x118>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082c:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <MX_GPIO_Init+0x118>)
 800082e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_GPIO_Init+0x118>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000840:	4a20      	ldr	r2, [pc, #128]	; (80008c4 <MX_GPIO_Init+0x118>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800084a:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_GPIO_Init+0x118>)
 800084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_GPIO_Init+0x118>)
 800085a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085e:	4a19      	ldr	r2, [pc, #100]	; (80008c4 <MX_GPIO_Init+0x118>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000864:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_GPIO_Init+0x118>)
 800086a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_GPIO_Init+0x118>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087c:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <MX_GPIO_Init+0x118>)
 800087e:	f043 0308 	orr.w	r3, r3, #8
 8000882:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_GPIO_Init+0x118>)
 8000888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088c:	f003 0308 	and.w	r3, r3, #8
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2120      	movs	r1, #32
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <MX_GPIO_Init+0x11c>)
 800089a:	f003 fbed 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800089e:	2320      	movs	r3, #32
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_GPIO_Init+0x11c>)
 80008b6:	f003 fa37 	bl	8003d28 <HAL_GPIO_Init>

}
 80008ba:	bf00      	nop
 80008bc:	3730      	adds	r7, #48	; 0x30
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	58024400 	.word	0x58024400
 80008c8:	58021800 	.word	0x58021800

080008cc <IS42S16800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S16800J_ERROR;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S16800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f000 f832 	bl	800094c <IS42S16800J_ClockEnable>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d128      	bne.n	8000940 <IS42S16800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S16800J_Delay(1);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f000 f8e2 	bl	8000ab8 <IS42S16800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S16800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f000 f84a 	bl	8000994 <IS42S16800J_Precharge>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d11c      	bne.n	8000940 <IS42S16800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S16800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S16800J_OK)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	6819      	ldr	r1, [r3, #0]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	461a      	mov	r2, r3
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 f897 	bl	8000a44 <IS42S16800J_RefreshMode>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d111      	bne.n	8000940 <IS42S16800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S16800J_ModeRegConfig(Ctx, pRegMode) == IS42S16800J_OK)
 800091c:	6839      	ldr	r1, [r7, #0]
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f000 f85c 	bl	80009dc <IS42S16800J_ModeRegConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d10a      	bne.n	8000940 <IS42S16800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S16800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S16800J_OK)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	4619      	mov	r1, r3
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 f8ad 	bl	8000a90 <IS42S16800J_RefreshRate>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d101      	bne.n	8000940 <IS42S16800J_Init+0x74>
          {
            ret = IS42S16800J_OK;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8000940:	68fb      	ldr	r3, [r7, #12]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <IS42S16800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_CLK_ENABLE_CMD;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <IS42S16800J_ClockEnable+0x44>)
 8000958:	2201      	movs	r2, #1
 800095a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800095c:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <IS42S16800J_ClockEnable+0x44>)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <IS42S16800J_ClockEnable+0x44>)
 8000964:	2201      	movs	r2, #1
 8000966:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <IS42S16800J_ClockEnable+0x44>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 800096e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000972:	4907      	ldr	r1, [pc, #28]	; (8000990 <IS42S16800J_ClockEnable+0x44>)
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f007 fd37 	bl	80083e8 <HAL_SDRAM_SendCommand>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d002      	beq.n	8000986 <IS42S16800J_ClockEnable+0x3a>
  {
    return IS42S16800J_ERROR;
 8000980:	f04f 33ff 	mov.w	r3, #4294967295
 8000984:	e000      	b.n	8000988 <IS42S16800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 8000986:	2300      	movs	r3, #0
  }
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24000070 	.word	0x24000070

08000994 <IS42S16800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_PALL_CMD;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <IS42S16800J_Precharge+0x44>)
 80009a0:	2202      	movs	r2, #2
 80009a2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80009a4:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <IS42S16800J_Precharge+0x44>)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <IS42S16800J_Precharge+0x44>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <IS42S16800J_Precharge+0x44>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 80009b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ba:	4907      	ldr	r1, [pc, #28]	; (80009d8 <IS42S16800J_Precharge+0x44>)
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f007 fd13 	bl	80083e8 <HAL_SDRAM_SendCommand>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <IS42S16800J_Precharge+0x3a>
  {
    return IS42S16800J_ERROR;
 80009c8:	f04f 33ff 	mov.w	r3, #4294967295
 80009cc:	e000      	b.n	80009d0 <IS42S16800J_Precharge+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 80009ce:	2300      	movs	r3, #0
  }
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	24000070 	.word	0x24000070

080009dc <IS42S16800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80009ee:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80009f4:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80009fa:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000a00:	4313      	orrs	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S16800J_LOAD_MODE_CMD;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <IS42S16800J_ModeRegConfig+0x64>)
 8000a06:	2204      	movs	r2, #4
 8000a08:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <IS42S16800J_ModeRegConfig+0x64>)
 8000a10:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <IS42S16800J_ModeRegConfig+0x64>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000a18:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <IS42S16800J_ModeRegConfig+0x64>)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a22:	4907      	ldr	r1, [pc, #28]	; (8000a40 <IS42S16800J_ModeRegConfig+0x64>)
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f007 fcdf 	bl	80083e8 <HAL_SDRAM_SendCommand>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <IS42S16800J_ModeRegConfig+0x5a>
  {
    return IS42S16800J_ERROR;
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295
 8000a34:	e000      	b.n	8000a38 <IS42S16800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S16800J_OK;
 8000a36:	2300      	movs	r3, #0
  }
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	24000070 	.word	0x24000070

08000a44 <IS42S16800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S16800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S16800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S16800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8000a50:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <IS42S16800J_RefreshMode+0x48>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000a56:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <IS42S16800J_RefreshMode+0x48>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <IS42S16800J_RefreshMode+0x48>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <IS42S16800J_RefreshMode+0x48>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <IS42S16800J_RefreshMode+0x48>)
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f007 fcba 	bl	80083e8 <HAL_SDRAM_SendCommand>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d002      	beq.n	8000a80 <IS42S16800J_RefreshMode+0x3c>
  {
    return IS42S16800J_ERROR;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	e000      	b.n	8000a82 <IS42S16800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S16800J_OK;
 8000a80:	2300      	movs	r3, #0
  }
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	24000070 	.word	0x24000070

08000a90 <IS42S16800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S16800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000a9a:	6839      	ldr	r1, [r7, #0]
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f007 fcd8 	bl	8008452 <HAL_SDRAM_ProgramRefreshRate>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <IS42S16800J_RefreshRate+0x1e>
  {
    return IS42S16800J_ERROR;
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	e000      	b.n	8000ab0 <IS42S16800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S16800J_OK;
 8000aae:	2300      	movs	r3, #0
  }
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <IS42S16800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval IS42S16800J_OK
  */
static int32_t IS42S16800J_Delay(uint32_t Delay)
{  
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000ac0:	f000 ff12 	bl	80018e8 <HAL_GetTick>
 8000ac4:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000ac6:	bf00      	nop
 8000ac8:	f000 ff0e 	bl	80018e8 <HAL_GetTick>
 8000acc:	4602      	mov	r2, r0
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d8f7      	bhi.n	8000ac8 <IS42S16800J_Delay+0x10>
  {
  }
  return IS42S16800J_OK;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <HAL_SAI_TxCpltCallback>:
volatile uint8_t 			ADC_HALF_COMPLETE_FLAG = 0;
volatile uint8_t 			DAC_HALF_COMPLETE_FLAG = 0;
volatile uint32_t input_i2s_buffer_au32[16];
volatile uint32_t output_i2s_buffer_au32[16];

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
 8000ae4:	b480      	push	{r7}
 8000ae6:	b08b      	sub	sp, #44	; 0x2c
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 0;
 8000aec:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <HAL_SAI_TxCpltCallback+0xb4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <HAL_SAI_TxCpltCallback+0xb8>)
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	2340      	movs	r3, #64	; 0x40
 8000af8:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	dd1d      	ble.n	8000b3c <HAL_SAI_TxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	f003 021f 	and.w	r2, r3, #31
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4413      	add	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b10:	f3bf 8f4f 	dsb	sy
}
 8000b14:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000b16:	4a22      	ldr	r2, [pc, #136]	; (8000ba0 <HAL_SAI_TxCpltCallback+0xbc>)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	3320      	adds	r3, #32
 8000b22:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3b20      	subs	r3, #32
 8000b28:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	dcf2      	bgt.n	8000b16 <HAL_SAI_TxCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b30:	f3bf 8f4f 	dsb	sy
}
 8000b34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b36:	f3bf 8f6f 	isb	sy
}
 8000b3a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000b3c:	bf00      	nop
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_SAI_TxCpltCallback+0xc0>)
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
 8000b42:	2340      	movs	r3, #64	; 0x40
 8000b44:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000b46:	6a3b      	ldr	r3, [r7, #32]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	dd1d      	ble.n	8000b88 <HAL_SAI_TxCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4e:	f003 021f 	and.w	r2, r3, #31
 8000b52:	6a3b      	ldr	r3, [r7, #32]
 8000b54:	4413      	add	r3, r2
 8000b56:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b5c:	f3bf 8f4f 	dsb	sy
}
 8000b60:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_SAI_TxCpltCallback+0xbc>)
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	3320      	adds	r3, #32
 8000b6e:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	3b20      	subs	r3, #32
 8000b74:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	dcf2      	bgt.n	8000b62 <HAL_SAI_TxCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7c:	f3bf 8f4f 	dsb	sy
}
 8000b80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b82:	f3bf 8f6f 	isb	sy
}
 8000b86:	bf00      	nop
}
 8000b88:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000b8a:	bf00      	nop
 8000b8c:	372c      	adds	r7, #44	; 0x2c
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	24000081 	.word	0x24000081
 8000b9c:	24000084 	.word	0x24000084
 8000ba0:	e000ed00 	.word	0xe000ed00
 8000ba4:	240000c4 	.word	0x240000c4

08000ba8 <HAL_SAI_TxHalfCpltCallback>:
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000ba8:	b480      	push	{r7}
 8000baa:	b08b      	sub	sp, #44	; 0x2c
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 1;
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <HAL_SAI_TxHalfCpltCallback+0xb4>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <HAL_SAI_TxHalfCpltCallback+0xb8>)
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	2340      	movs	r3, #64	; 0x40
 8000bbc:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	dd1d      	ble.n	8000c00 <HAL_SAI_TxHalfCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f003 021f 	and.w	r2, r3, #31
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	4413      	add	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd4:	f3bf 8f4f 	dsb	sy
}
 8000bd8:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000bda:	4a22      	ldr	r2, [pc, #136]	; (8000c64 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	3320      	adds	r3, #32
 8000be6:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	3b20      	subs	r3, #32
 8000bec:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	dcf2      	bgt.n	8000bda <HAL_SAI_TxHalfCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bf4:	f3bf 8f4f 	dsb	sy
}
 8000bf8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bfa:	f3bf 8f6f 	isb	sy
}
 8000bfe:	bf00      	nop
}
 8000c00:	bf00      	nop
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_SAI_TxHalfCpltCallback+0xc0>)
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
 8000c06:	2340      	movs	r3, #64	; 0x40
 8000c08:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000c0a:	6a3b      	ldr	r3, [r7, #32]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	dd1d      	ble.n	8000c4c <HAL_SAI_TxHalfCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	f003 021f 	and.w	r2, r3, #31
 8000c16:	6a3b      	ldr	r3, [r7, #32]
 8000c18:	4413      	add	r3, r2
 8000c1a:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c20:	f3bf 8f4f 	dsb	sy
}
 8000c24:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	3320      	adds	r3, #32
 8000c32:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	3b20      	subs	r3, #32
 8000c38:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	dcf2      	bgt.n	8000c26 <HAL_SAI_TxHalfCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c40:	f3bf 8f4f 	dsb	sy
}
 8000c44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c46:	f3bf 8f6f 	isb	sy
}
 8000c4a:	bf00      	nop
}
 8000c4c:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
		SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000c4e:	bf00      	nop
 8000c50:	372c      	adds	r7, #44	; 0x2c
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	24000081 	.word	0x24000081
 8000c60:	24000084 	.word	0x24000084
 8000c64:	e000ed00 	.word	0xe000ed00
 8000c68:	240000c4 	.word	0x240000c4

08000c6c <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b093      	sub	sp, #76	; 0x4c
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 0;
 8000c74:	4b54      	ldr	r3, [pc, #336]	; (8000dc8 <HAL_SAI_RxCpltCallback+0x15c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	4b54      	ldr	r3, [pc, #336]	; (8000dcc <HAL_SAI_RxCpltCallback+0x160>)
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	2340      	movs	r3, #64	; 0x40
 8000c80:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	dd1d      	ble.n	8000cc4 <HAL_SAI_RxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	f003 021f 	and.w	r2, r3, #31
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	4413      	add	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c98:	f3bf 8f4f 	dsb	sy
}
 8000c9c:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c9e:	4a4c      	ldr	r2, [pc, #304]	; (8000dd0 <HAL_SAI_RxCpltCallback+0x164>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	3320      	adds	r3, #32
 8000caa:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3b20      	subs	r3, #32
 8000cb0:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	dcf2      	bgt.n	8000c9e <HAL_SAI_RxCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb8:	f3bf 8f4f 	dsb	sy
}
 8000cbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cbe:	f3bf 8f6f 	isb	sy
}
 8000cc2:	bf00      	nop
}
 8000cc4:	bf00      	nop
 8000cc6:	4b43      	ldr	r3, [pc, #268]	; (8000dd4 <HAL_SAI_RxCpltCallback+0x168>)
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cca:	2340      	movs	r3, #64	; 0x40
 8000ccc:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000cce:	6a3b      	ldr	r3, [r7, #32]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	dd1d      	ble.n	8000d10 <HAL_SAI_RxCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	f003 021f 	and.w	r2, r3, #31
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	4413      	add	r3, r2
 8000cde:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ce4:	f3bf 8f4f 	dsb	sy
}
 8000ce8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000cea:	4a39      	ldr	r2, [pc, #228]	; (8000dd0 <HAL_SAI_RxCpltCallback+0x164>)
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	3320      	adds	r3, #32
 8000cf6:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	3b20      	subs	r3, #32
 8000cfc:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	dcf2      	bgt.n	8000cea <HAL_SAI_RxCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d04:	f3bf 8f4f 	dsb	sy
}
 8000d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d0a:	f3bf 8f6f 	isb	sy
}
 8000d0e:	bf00      	nop
}
 8000d10:	bf00      	nop

	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	output_i2s_buffer_au32[14] = input_i2s_buffer_au32[10];
 8000d12:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <HAL_SAI_RxCpltCallback+0x160>)
 8000d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d16:	4a2f      	ldr	r2, [pc, #188]	; (8000dd4 <HAL_SAI_RxCpltCallback+0x168>)
 8000d18:	6393      	str	r3, [r2, #56]	; 0x38
	output_i2s_buffer_au32[15] = input_i2s_buffer_au32[11];
 8000d1a:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <HAL_SAI_RxCpltCallback+0x160>)
 8000d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1e:	4a2d      	ldr	r2, [pc, #180]	; (8000dd4 <HAL_SAI_RxCpltCallback+0x168>)
 8000d20:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <HAL_SAI_RxCpltCallback+0x160>)
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
 8000d26:	2340      	movs	r3, #64	; 0x40
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 8000d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	dd1d      	ble.n	8000d6c <HAL_SAI_RxCpltCallback+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d32:	f003 021f 	and.w	r2, r3, #31
 8000d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d38:	4413      	add	r3, r2
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 8000d40:	f3bf 8f4f 	dsb	sy
}
 8000d44:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000d46:	4a22      	ldr	r2, [pc, #136]	; (8000dd0 <HAL_SAI_RxCpltCallback+0x164>)
 8000d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4a:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d50:	3320      	adds	r3, #32
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d56:	3b20      	subs	r3, #32
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	dcf2      	bgt.n	8000d46 <HAL_SAI_RxCpltCallback+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d60:	f3bf 8f4f 	dsb	sy
}
 8000d64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d66:	f3bf 8f6f 	isb	sy
}
 8000d6a:	bf00      	nop
}
 8000d6c:	bf00      	nop
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_SAI_RxCpltCallback+0x168>)
 8000d70:	647b      	str	r3, [r7, #68]	; 0x44
 8000d72:	2340      	movs	r3, #64	; 0x40
 8000d74:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8000d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	dd1d      	ble.n	8000db8 <HAL_SAI_RxCpltCallback+0x14c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d7e:	f003 021f 	and.w	r2, r3, #31
 8000d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d84:	4413      	add	r3, r2
 8000d86:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8000d8c:	f3bf 8f4f 	dsb	sy
}
 8000d90:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <HAL_SAI_RxCpltCallback+0x164>)
 8000d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d96:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d9c:	3320      	adds	r3, #32
 8000d9e:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000da2:	3b20      	subs	r3, #32
 8000da4:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 8000da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	dcf2      	bgt.n	8000d92 <HAL_SAI_RxCpltCallback+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8000dac:	f3bf 8f4f 	dsb	sy
}
 8000db0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000db2:	f3bf 8f6f 	isb	sy
}
 8000db6:	bf00      	nop
}
 8000db8:	bf00      	nop

	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000dba:	bf00      	nop
 8000dbc:	374c      	adds	r7, #76	; 0x4c
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	24000080 	.word	0x24000080
 8000dcc:	24000084 	.word	0x24000084
 8000dd0:	e000ed00 	.word	0xe000ed00
 8000dd4:	240000c4 	.word	0x240000c4

08000dd8 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000dd8:	b480      	push	{r7}
 8000dda:	b093      	sub	sp, #76	; 0x4c
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 1;
 8000de0:	4b54      	ldr	r3, [pc, #336]	; (8000f34 <HAL_SAI_RxHalfCpltCallback+0x15c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	4b54      	ldr	r3, [pc, #336]	; (8000f38 <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	2340      	movs	r3, #64	; 0x40
 8000dec:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	dd1d      	ble.n	8000e30 <HAL_SAI_RxHalfCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f003 021f 	and.w	r2, r3, #31
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e04:	f3bf 8f4f 	dsb	sy
}
 8000e08:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000e0a:	4a4c      	ldr	r2, [pc, #304]	; (8000f3c <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	3320      	adds	r3, #32
 8000e16:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3b20      	subs	r3, #32
 8000e1c:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dcf2      	bgt.n	8000e0a <HAL_SAI_RxHalfCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e24:	f3bf 8f4f 	dsb	sy
}
 8000e28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e2a:	f3bf 8f6f 	isb	sy
}
 8000e2e:	bf00      	nop
}
 8000e30:	bf00      	nop
 8000e32:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
 8000e36:	2340      	movs	r3, #64	; 0x40
 8000e38:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000e3a:	6a3b      	ldr	r3, [r7, #32]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	dd1d      	ble.n	8000e7c <HAL_SAI_RxHalfCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	f003 021f 	and.w	r2, r3, #31
 8000e46:	6a3b      	ldr	r3, [r7, #32]
 8000e48:	4413      	add	r3, r2
 8000e4a:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e50:	f3bf 8f4f 	dsb	sy
}
 8000e54:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000e56:	4a39      	ldr	r2, [pc, #228]	; (8000f3c <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	3320      	adds	r3, #32
 8000e62:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	3b20      	subs	r3, #32
 8000e68:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	dcf2      	bgt.n	8000e56 <HAL_SAI_RxHalfCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e70:	f3bf 8f4f 	dsb	sy
}
 8000e74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e76:	f3bf 8f6f 	isb	sy
}
 8000e7a:	bf00      	nop
}
 8000e7c:	bf00      	nop


	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	output_i2s_buffer_au32[6] = input_i2s_buffer_au32[2];
 8000e7e:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	4a2f      	ldr	r2, [pc, #188]	; (8000f40 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000e84:	6193      	str	r3, [r2, #24]
	output_i2s_buffer_au32[7] = input_i2s_buffer_au32[3];
 8000e86:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	4a2d      	ldr	r2, [pc, #180]	; (8000f40 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
 8000e92:	2340      	movs	r3, #64	; 0x40
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 8000e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	dd1d      	ble.n	8000ed8 <HAL_SAI_RxHalfCpltCallback+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9e:	f003 021f 	and.w	r2, r3, #31
 8000ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea4:	4413      	add	r3, r2
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 8000eac:	f3bf 8f4f 	dsb	sy
}
 8000eb0:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000eb2:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb6:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebc:	3320      	adds	r3, #32
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec2:	3b20      	subs	r3, #32
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	dcf2      	bgt.n	8000eb2 <HAL_SAI_RxHalfCpltCallback+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ecc:	f3bf 8f4f 	dsb	sy
}
 8000ed0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ed2:	f3bf 8f6f 	isb	sy
}
 8000ed6:	bf00      	nop
}
 8000ed8:	bf00      	nop
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000edc:	647b      	str	r3, [r7, #68]	; 0x44
 8000ede:	2340      	movs	r3, #64	; 0x40
 8000ee0:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8000ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	dd1d      	ble.n	8000f24 <HAL_SAI_RxHalfCpltCallback+0x14c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eea:	f003 021f 	and.w	r2, r3, #31
 8000eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ef0:	4413      	add	r3, r2
 8000ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef8:	f3bf 8f4f 	dsb	sy
}
 8000efc:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000efe:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f02:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f08:	3320      	adds	r3, #32
 8000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f0e:	3b20      	subs	r3, #32
 8000f10:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 8000f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	dcf2      	bgt.n	8000efe <HAL_SAI_RxHalfCpltCallback+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f18:	f3bf 8f4f 	dsb	sy
}
 8000f1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f1e:	f3bf 8f6f 	isb	sy
}
 8000f22:	bf00      	nop
}
 8000f24:	bf00      	nop

	SCB_CleanDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
}
 8000f26:	bf00      	nop
 8000f28:	374c      	adds	r7, #76	; 0x4c
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	24000080 	.word	0x24000080
 8000f38:	24000084 	.word	0x24000084
 8000f3c:	e000ed00 	.word	0xe000ed00
 8000f40:	240000c4 	.word	0x240000c4

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f000 fc47 	bl	80017dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f87b 	bl	8001048 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f52:	f000 f8e7 	bl	8001124 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f7ff fc29 	bl	80007ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000f5a:	f7ff faa9 	bl	80004b0 <MX_DMA_Init>
  MX_SAI1_Init();
 8000f5e:	f000 f919 	bl	8001194 <MX_SAI1_Init>
  MX_SPI1_Init();
 8000f62:	f000 fa5d 	bl	8001420 <MX_SPI1_Init>
  MX_FMC_Init();
 8000f66:	f7ff fadb 	bl	8000520 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  // init SAI interface
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, output_i2s_buffer_au32, 	16);
 8000f6a:	2210      	movs	r2, #16
 8000f6c:	492f      	ldr	r1, [pc, #188]	; (800102c <main+0xe8>)
 8000f6e:	4830      	ldr	r0, [pc, #192]	; (8001030 <main+0xec>)
 8000f70:	f006 fe58 	bl	8007c24 <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, input_i2s_buffer_au32, 	16);
 8000f74:	2210      	movs	r2, #16
 8000f76:	492f      	ldr	r1, [pc, #188]	; (8001034 <main+0xf0>)
 8000f78:	482f      	ldr	r0, [pc, #188]	; (8001038 <main+0xf4>)
 8000f7a:	f006 ff09 	bl	8007d90 <HAL_SAI_Receive_DMA>

  // init CODEC
	ad1939_init(&hspi1);
 8000f7e:	482f      	ldr	r0, [pc, #188]	; (800103c <main+0xf8>)
 8000f80:	f7ff fa14 	bl	80003ac <ad1939_init>
  while (1)
  {
	  uint32_t fmctestStart;
	  uint32_t fmctestStop;

	  fmctestStart = HAL_GetTick();
 8000f84:	f000 fcb0 	bl	80018e8 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
	  uint32_t errorCounter =0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
	  for(uint32_t i = 0; i<10000;i++){
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
 8000f92:	e039      	b.n	8001008 <main+0xc4>

		  for(uint32_t j=256*256-2; j<256*256+200;j++){
 8000f94:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	e02e      	b.n	8000ffa <main+0xb6>
			  fmctestStart = HAL_GetTick();
 8000f9c:	f000 fca4 	bl	80018e8 <HAL_GetTick>
 8000fa0:	60b8      	str	r0, [r7, #8]
			  uint8_t number_inc = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	71bb      	strb	r3, [r7, #6]
//			  for(uint32_t counter = 1; counter<SDRAM_SIZE; counter=counter+2){
//				  *(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) = (uint8_t) number_inc;
//				  number_inc++;
//			  }

			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	e007      	b.n	8000fbc <main+0x78>
			 				  sdram_array[counter] = j;
 8000fac:	4924      	ldr	r1, [pc, #144]	; (8001040 <main+0xfc>)
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	2b09      	cmp	r3, #9
 8000fc0:	d9f4      	bls.n	8000fac <main+0x68>
//			  				  if(*(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) != j){
//			  					  errorCounter++;
//			  				  }


			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	e00c      	b.n	8000fe2 <main+0x9e>
				  if( sdram_array[counter] != j){
 8000fc8:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <main+0xfc>)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d002      	beq.n	8000fdc <main+0x98>
					  errorCounter++;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b09      	cmp	r3, #9
 8000fe6:	d9ef      	bls.n	8000fc8 <main+0x84>
				  }
			  }
			  fmctestStop = (HAL_GetTick()-fmctestStart);
 8000fe8:	f000 fc7e 	bl	80018e8 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	603b      	str	r3, [r7, #0]
		  for(uint32_t j=256*256-2; j<256*256+200;j++){
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	4a11      	ldr	r2, [pc, #68]	; (8001044 <main+0x100>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d9cc      	bls.n	8000f9c <main+0x58>
	  for(uint32_t i = 0; i<10000;i++){
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	3301      	adds	r3, #1
 8001006:	61bb      	str	r3, [r7, #24]
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	f242 720f 	movw	r2, #9999	; 0x270f
 800100e:	4293      	cmp	r3, r2
 8001010:	d9c0      	bls.n	8000f94 <main+0x50>
		  }

	  }

	  if(errorCounter){
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d000      	beq.n	800101a <main+0xd6>
		  while(1){
 8001018:	e7fe      	b.n	8001018 <main+0xd4>

		  }
	  }

	  uint8_t var = *(__IO uint8_t*)(SDRAM_ADDRESS_START);
 800101a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(50);
 8001022:	2032      	movs	r0, #50	; 0x32
 8001024:	f000 fc6c 	bl	8001900 <HAL_Delay>
  {
 8001028:	e7ac      	b.n	8000f84 <main+0x40>
 800102a:	bf00      	nop
 800102c:	240000c4 	.word	0x240000c4
 8001030:	24000104 	.word	0x24000104
 8001034:	24000084 	.word	0x24000084
 8001038:	2400019c 	.word	0x2400019c
 800103c:	24000328 	.word	0x24000328
 8001040:	c0000000 	.word	0xc0000000
 8001044:	000100c7 	.word	0x000100c7

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b09c      	sub	sp, #112	; 0x70
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	224c      	movs	r2, #76	; 0x4c
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f008 f86e 	bl	8009138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2220      	movs	r2, #32
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f008 f868 	bl	8009138 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001068:	2002      	movs	r0, #2
 800106a:	f003 f81f 	bl	80040ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <SystemClock_Config+0xd8>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	4a2a      	ldr	r2, [pc, #168]	; (8001120 <SystemClock_Config+0xd8>)
 8001078:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800107c:	6193      	str	r3, [r2, #24]
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <SystemClock_Config+0xd8>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800108a:	bf00      	nop
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <SystemClock_Config+0xd8>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001098:	d1f8      	bne.n	800108c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109a:	2301      	movs	r3, #1
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800109e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a4:	2302      	movs	r3, #2
 80010a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a8:	2302      	movs	r3, #2
 80010aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80010b0:	232c      	movs	r3, #44	; 0x2c
 80010b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010bc:	2302      	movs	r3, #2
 80010be:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010c0:	230c      	movs	r3, #12
 80010c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 f825 	bl	8004120 <HAL_RCC_OscConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010dc:	f000 f855 	bl	800118a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e0:	233f      	movs	r3, #63	; 0x3f
 80010e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e4:	2303      	movs	r3, #3
 80010e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010ec:	2308      	movs	r3, #8
 80010ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010f0:	2340      	movs	r3, #64	; 0x40
 80010f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010f4:	2340      	movs	r3, #64	; 0x40
 80010f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010fe:	2340      	movs	r3, #64	; 0x40
 8001100:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2103      	movs	r1, #3
 8001106:	4618      	mov	r0, r3
 8001108:	f003 fbe4 	bl	80048d4 <HAL_RCC_ClockConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001112:	f000 f83a 	bl	800118a <Error_Handler>
  }
}
 8001116:	bf00      	nop
 8001118:	3770      	adds	r7, #112	; 0x70
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	58024800 	.word	0x58024800

08001124 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0ae      	sub	sp, #184	; 0xb8
 8001128:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800112a:	463b      	mov	r3, r7
 800112c:	22b8      	movs	r2, #184	; 0xb8
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f008 f801 	bl	8009138 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 8001136:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 8001146:	230f      	movs	r3, #15
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800114a:	2302      	movs	r3, #2
 800114c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800114e:	2302      	movs	r3, #2
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001152:	2302      	movs	r3, #2
 8001154:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001156:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800115c:	2300      	movs	r3, #0
 800115e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 8001160:	f640 3386 	movw	r3, #2950	; 0xb86
 8001164:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 8001166:	2302      	movs	r3, #2
 8001168:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800116a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	4618      	mov	r0, r3
 8001174:	f003 ff24 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 800117e:	f000 f804 	bl	800118a <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	37b8      	adds	r7, #184	; 0xb8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800118e:	b672      	cpsid	i
}
 8001190:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001192:	e7fe      	b.n	8001192 <Error_Handler+0x8>

08001194 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001198:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <MX_SAI1_Init+0xb0>)
 800119a:	4a2b      	ldr	r2, [pc, #172]	; (8001248 <MX_SAI1_Init+0xb4>)
 800119c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800119e:	4b29      	ldr	r3, [pc, #164]	; (8001244 <MX_SAI1_Init+0xb0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <MX_SAI1_Init+0xb0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <MX_SAI1_Init+0xb0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <MX_SAI1_Init+0xb0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <MX_SAI1_Init+0xb0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <MX_SAI1_Init+0xb0>)
 80011be:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80011c2:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80011c4:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <MX_SAI1_Init+0xb0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <MX_SAI1_Init+0xb0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <MX_SAI1_Init+0xb0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_SAI1_Init+0xb0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 80011dc:	2308      	movs	r3, #8
 80011de:	2202      	movs	r2, #2
 80011e0:	2100      	movs	r1, #0
 80011e2:	4818      	ldr	r0, [pc, #96]	; (8001244 <MX_SAI1_Init+0xb0>)
 80011e4:	f006 fad2 	bl	800778c <HAL_SAI_InitProtocol>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80011ee:	f7ff ffcc 	bl	800118a <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_SAI1_Init+0xb8>)
 80011f4:	4a16      	ldr	r2, [pc, #88]	; (8001250 <MX_SAI1_Init+0xbc>)
 80011f6:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <MX_SAI1_Init+0xb8>)
 80011fa:	2203      	movs	r2, #3
 80011fc:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <MX_SAI1_Init+0xb8>)
 8001200:	2201      	movs	r2, #1
 8001202:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_SAI1_Init+0xb8>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <MX_SAI1_Init+0xb8>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_SAI1_Init+0xb8>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <MX_SAI1_Init+0xb8>)
 8001218:	2200      	movs	r2, #0
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <MX_SAI1_Init+0xb8>)
 800121e:	2200      	movs	r2, #0
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_SAI1_Init+0xb8>)
 8001224:	2200      	movs	r2, #0
 8001226:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001228:	2308      	movs	r3, #8
 800122a:	2202      	movs	r2, #2
 800122c:	2100      	movs	r1, #0
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <MX_SAI1_Init+0xb8>)
 8001230:	f006 faac 	bl	800778c <HAL_SAI_InitProtocol>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 800123a:	f7ff ffa6 	bl	800118a <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	24000104 	.word	0x24000104
 8001248:	40015804 	.word	0x40015804
 800124c:	2400019c 	.word	0x2400019c
 8001250:	40015824 	.word	0x40015824

08001254 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a66      	ldr	r2, [pc, #408]	; (80013fc <HAL_SAI_MspInit+0x1a8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d160      	bne.n	8001328 <HAL_SAI_MspInit+0xd4>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001266:	4b66      	ldr	r3, [pc, #408]	; (8001400 <HAL_SAI_MspInit+0x1ac>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10e      	bne.n	800128c <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800126e:	4b65      	ldr	r3, [pc, #404]	; (8001404 <HAL_SAI_MspInit+0x1b0>)
 8001270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001274:	4a63      	ldr	r2, [pc, #396]	; (8001404 <HAL_SAI_MspInit+0x1b0>)
 8001276:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800127a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800127e:	4b61      	ldr	r3, [pc, #388]	; (8001404 <HAL_SAI_MspInit+0x1b0>)
 8001280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800128c:	4b5c      	ldr	r3, [pc, #368]	; (8001400 <HAL_SAI_MspInit+0x1ac>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	4a5b      	ldr	r2, [pc, #364]	; (8001400 <HAL_SAI_MspInit+0x1ac>)
 8001294:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001296:	2370      	movs	r3, #112	; 0x70
 8001298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80012a6:	2306      	movs	r3, #6
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4855      	ldr	r0, [pc, #340]	; (8001408 <HAL_SAI_MspInit+0x1b4>)
 80012b2:	f002 fd39 	bl	8003d28 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 80012b6:	4b55      	ldr	r3, [pc, #340]	; (800140c <HAL_SAI_MspInit+0x1b8>)
 80012b8:	4a55      	ldr	r2, [pc, #340]	; (8001410 <HAL_SAI_MspInit+0x1bc>)
 80012ba:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80012bc:	4b53      	ldr	r3, [pc, #332]	; (800140c <HAL_SAI_MspInit+0x1b8>)
 80012be:	2257      	movs	r2, #87	; 0x57
 80012c0:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c2:	4b52      	ldr	r3, [pc, #328]	; (800140c <HAL_SAI_MspInit+0x1b8>)
 80012c4:	2240      	movs	r2, #64	; 0x40
 80012c6:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <HAL_SAI_MspInit+0x1b8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80012ce:	4b4f      	ldr	r3, [pc, #316]	; (800140c <HAL_SAI_MspInit+0x1b8>)
 80012d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d4:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012d6:	4b4d      	ldr	r3, [pc, #308]	; (800140c <HAL_SAI_MspInit+0x1b8>)
 80012d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012dc:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012de:	4b4b      	ldr	r3, [pc, #300]	; (800140c <HAL_SAI_MspInit+0x1b8>)
 80012e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e4:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80012e6:	4b49      	ldr	r3, [pc, #292]	; (800140c <HAL_SAI_MspInit+0x1b8>)
 80012e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ec:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012ee:	4b47      	ldr	r3, [pc, #284]	; (800140c <HAL_SAI_MspInit+0x1b8>)
 80012f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012f4:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f6:	4b45      	ldr	r3, [pc, #276]	; (800140c <HAL_SAI_MspInit+0x1b8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80012fc:	4843      	ldr	r0, [pc, #268]	; (800140c <HAL_SAI_MspInit+0x1b8>)
 80012fe:	f000 fc33 	bl	8001b68 <HAL_DMA_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8001308:	f7ff ff3f 	bl	800118a <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a3f      	ldr	r2, [pc, #252]	; (800140c <HAL_SAI_MspInit+0x1b8>)
 8001310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001314:	4a3d      	ldr	r2, [pc, #244]	; (800140c <HAL_SAI_MspInit+0x1b8>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a3b      	ldr	r2, [pc, #236]	; (800140c <HAL_SAI_MspInit+0x1b8>)
 800131e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001322:	4a3a      	ldr	r2, [pc, #232]	; (800140c <HAL_SAI_MspInit+0x1b8>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a39      	ldr	r2, [pc, #228]	; (8001414 <HAL_SAI_MspInit+0x1c0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d160      	bne.n	80013f4 <HAL_SAI_MspInit+0x1a0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <HAL_SAI_MspInit+0x1ac>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10e      	bne.n	8001358 <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800133a:	4b32      	ldr	r3, [pc, #200]	; (8001404 <HAL_SAI_MspInit+0x1b0>)
 800133c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001340:	4a30      	ldr	r2, [pc, #192]	; (8001404 <HAL_SAI_MspInit+0x1b0>)
 8001342:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001346:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800134a:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <HAL_SAI_MspInit+0x1b0>)
 800134c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001358:	4b29      	ldr	r3, [pc, #164]	; (8001400 <HAL_SAI_MspInit+0x1ac>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4a28      	ldr	r2, [pc, #160]	; (8001400 <HAL_SAI_MspInit+0x1ac>)
 8001360:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001362:	2308      	movs	r3, #8
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001372:	2306      	movs	r3, #6
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4822      	ldr	r0, [pc, #136]	; (8001408 <HAL_SAI_MspInit+0x1b4>)
 800137e:	f002 fcd3 	bl	8003d28 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream0;
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <HAL_SAI_MspInit+0x1c4>)
 8001384:	4a25      	ldr	r2, [pc, #148]	; (800141c <HAL_SAI_MspInit+0x1c8>)
 8001386:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <HAL_SAI_MspInit+0x1c4>)
 800138a:	2258      	movs	r2, #88	; 0x58
 800138c:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_SAI_MspInit+0x1c4>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <HAL_SAI_MspInit+0x1c4>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <HAL_SAI_MspInit+0x1c4>)
 800139c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a0:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HAL_SAI_MspInit+0x1c4>)
 80013a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013a8:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_SAI_MspInit+0x1c4>)
 80013ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013b0:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_SAI_MspInit+0x1c4>)
 80013b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b8:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_SAI_MspInit+0x1c4>)
 80013bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013c0:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_SAI_MspInit+0x1c4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80013c8:	4813      	ldr	r0, [pc, #76]	; (8001418 <HAL_SAI_MspInit+0x1c4>)
 80013ca:	f000 fbcd 	bl	8001b68 <HAL_DMA_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 80013d4:	f7ff fed9 	bl	800118a <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_SAI_MspInit+0x1c4>)
 80013dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <HAL_SAI_MspInit+0x1c4>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <HAL_SAI_MspInit+0x1c4>)
 80013ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_SAI_MspInit+0x1c4>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40015804 	.word	0x40015804
 8001400:	24000324 	.word	0x24000324
 8001404:	58024400 	.word	0x58024400
 8001408:	58021000 	.word	0x58021000
 800140c:	24000234 	.word	0x24000234
 8001410:	40020010 	.word	0x40020010
 8001414:	40015824 	.word	0x40015824
 8001418:	240002ac 	.word	0x240002ac
 800141c:	40020410 	.word	0x40020410

08001420 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001426:	4a28      	ldr	r2, [pc, #160]	; (80014c8 <MX_SPI1_Init+0xa8>)
 8001428:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800142c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001430:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800143a:	2207      	movs	r2, #7
 800143c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800144c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001450:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001454:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001458:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001474:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800147c:	2200      	movs	r2, #0
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001482:	2200      	movs	r2, #0
 8001484:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001488:	2200      	movs	r2, #0
 800148a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800148e:	2200      	movs	r2, #0
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001494:	2200      	movs	r2, #0
 8001496:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800149a:	2200      	movs	r2, #0
 800149c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_SPI1_Init+0xa4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <MX_SPI1_Init+0xa4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_SPI1_Init+0xa4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_SPI1_Init+0xa4>)
 80014b2:	f006 fff7 	bl	80084a4 <HAL_SPI_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80014bc:	f7ff fe65 	bl	800118a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	24000328 	.word	0x24000328
 80014c8:	40013000 	.word	0x40013000

080014cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08c      	sub	sp, #48	; 0x30
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a3a      	ldr	r2, [pc, #232]	; (80015d4 <HAL_SPI_MspInit+0x108>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d16d      	bne.n	80015ca <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ee:	4b3a      	ldr	r3, [pc, #232]	; (80015d8 <HAL_SPI_MspInit+0x10c>)
 80014f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014f4:	4a38      	ldr	r2, [pc, #224]	; (80015d8 <HAL_SPI_MspInit+0x10c>)
 80014f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014fe:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <HAL_SPI_MspInit+0x10c>)
 8001500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <HAL_SPI_MspInit+0x10c>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001512:	4a31      	ldr	r2, [pc, #196]	; (80015d8 <HAL_SPI_MspInit+0x10c>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151c:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <HAL_SPI_MspInit+0x10c>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_SPI_MspInit+0x10c>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001530:	4a29      	ldr	r2, [pc, #164]	; (80015d8 <HAL_SPI_MspInit+0x10c>)
 8001532:	f043 0308 	orr.w	r3, r3, #8
 8001536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153a:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <HAL_SPI_MspInit+0x10c>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001548:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <HAL_SPI_MspInit+0x10c>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154e:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <HAL_SPI_MspInit+0x10c>)
 8001550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001554:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001558:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <HAL_SPI_MspInit+0x10c>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> SPI1_MISO
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 8001566:	f248 0340 	movw	r3, #32832	; 0x8040
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001578:	2305      	movs	r3, #5
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4816      	ldr	r0, [pc, #88]	; (80015dc <HAL_SPI_MspInit+0x110>)
 8001584:	f002 fbd0 	bl	8003d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001598:	2305      	movs	r3, #5
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	480f      	ldr	r0, [pc, #60]	; (80015e0 <HAL_SPI_MspInit+0x114>)
 80015a4:	f002 fbc0 	bl	8003d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ba:	2305      	movs	r3, #5
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4807      	ldr	r0, [pc, #28]	; (80015e4 <HAL_SPI_MspInit+0x118>)
 80015c6:	f002 fbaf 	bl	8003d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80015ca:	bf00      	nop
 80015cc:	3730      	adds	r7, #48	; 0x30
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40013000 	.word	0x40013000
 80015d8:	58024400 	.word	0x58024400
 80015dc:	58020000 	.word	0x58020000
 80015e0:	58020c00 	.word	0x58020c00
 80015e4:	58021800 	.word	0x58021800

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_MspInit+0x30>)
 80015f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015f4:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_MspInit+0x30>)
 80015f6:	f043 0302 	orr.w	r3, r3, #2
 80015fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_MspInit+0x30>)
 8001600:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	58024400 	.word	0x58024400

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001620:	e7fe      	b.n	8001620 <NMI_Handler+0x4>

08001622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <MemManage_Handler+0x4>

0800162e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <UsageFault_Handler+0x4>

0800163a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001668:	f000 f92a 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <DMA1_Stream0_IRQHandler+0x10>)
 8001676:	f001 f839 	bl	80026ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	24000234 	.word	0x24000234

08001684 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <DMA2_Stream0_IRQHandler+0x10>)
 800168a:	f001 f82f 	bl	80026ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	240002ac 	.word	0x240002ac

08001698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800169c:	4b32      	ldr	r3, [pc, #200]	; (8001768 <SystemInit+0xd0>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a2:	4a31      	ldr	r2, [pc, #196]	; (8001768 <SystemInit+0xd0>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <SystemInit+0xd4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	2b06      	cmp	r3, #6
 80016b6:	d807      	bhi.n	80016c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016b8:	4b2c      	ldr	r3, [pc, #176]	; (800176c <SystemInit+0xd4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 030f 	bic.w	r3, r3, #15
 80016c0:	4a2a      	ldr	r2, [pc, #168]	; (800176c <SystemInit+0xd4>)
 80016c2:	f043 0307 	orr.w	r3, r3, #7
 80016c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016c8:	4b29      	ldr	r3, [pc, #164]	; (8001770 <SystemInit+0xd8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a28      	ldr	r2, [pc, #160]	; (8001770 <SystemInit+0xd8>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016d4:	4b26      	ldr	r3, [pc, #152]	; (8001770 <SystemInit+0xd8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <SystemInit+0xd8>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4924      	ldr	r1, [pc, #144]	; (8001770 <SystemInit+0xd8>)
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <SystemInit+0xdc>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <SystemInit+0xd4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <SystemInit+0xd4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 030f 	bic.w	r3, r3, #15
 80016fa:	4a1c      	ldr	r2, [pc, #112]	; (800176c <SystemInit+0xd4>)
 80016fc:	f043 0307 	orr.w	r3, r3, #7
 8001700:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <SystemInit+0xd8>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <SystemInit+0xd8>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <SystemInit+0xd8>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <SystemInit+0xd8>)
 8001716:	4a18      	ldr	r2, [pc, #96]	; (8001778 <SystemInit+0xe0>)
 8001718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <SystemInit+0xd8>)
 800171c:	4a17      	ldr	r2, [pc, #92]	; (800177c <SystemInit+0xe4>)
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <SystemInit+0xd8>)
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <SystemInit+0xe8>)
 8001724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <SystemInit+0xd8>)
 8001728:	2200      	movs	r2, #0
 800172a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <SystemInit+0xd8>)
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <SystemInit+0xe8>)
 8001730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <SystemInit+0xd8>)
 8001734:	2200      	movs	r2, #0
 8001736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <SystemInit+0xd8>)
 800173a:	4a11      	ldr	r2, [pc, #68]	; (8001780 <SystemInit+0xe8>)
 800173c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <SystemInit+0xd8>)
 8001740:	2200      	movs	r2, #0
 8001742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <SystemInit+0xd8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a09      	ldr	r2, [pc, #36]	; (8001770 <SystemInit+0xd8>)
 800174a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <SystemInit+0xd8>)
 8001752:	2200      	movs	r2, #0
 8001754:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <SystemInit+0xec>)
 8001758:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800175c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00
 800176c:	52002000 	.word	0x52002000
 8001770:	58024400 	.word	0x58024400
 8001774:	eaf6ed7f 	.word	0xeaf6ed7f
 8001778:	02020200 	.word	0x02020200
 800177c:	01ff0000 	.word	0x01ff0000
 8001780:	01010280 	.word	0x01010280
 8001784:	52004000 	.word	0x52004000

08001788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800178c:	f7ff ff84 	bl	8001698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001790:	480c      	ldr	r0, [pc, #48]	; (80017c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001792:	490d      	ldr	r1, [pc, #52]	; (80017c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001794:	4a0d      	ldr	r2, [pc, #52]	; (80017cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a8:	4c0a      	ldr	r4, [pc, #40]	; (80017d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b6:	f007 fcc7 	bl	8009148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ba:	f7ff fbc3 	bl	8000f44 <main>
  bx  lr
 80017be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017c0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80017c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017c8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80017cc:	080091c8 	.word	0x080091c8
  ldr r2, =_sbss
 80017d0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80017d4:	240003b4 	.word	0x240003b4

080017d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <ADC3_IRQHandler>
	...

080017dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e2:	2003      	movs	r0, #3
 80017e4:	f000 f980 	bl	8001ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017e8:	f003 fa2a 	bl	8004c40 <HAL_RCC_GetSysClockFreq>
 80017ec:	4602      	mov	r2, r0
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_Init+0x68>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	f003 030f 	and.w	r3, r3, #15
 80017f8:	4913      	ldr	r1, [pc, #76]	; (8001848 <HAL_Init+0x6c>)
 80017fa:	5ccb      	ldrb	r3, [r1, r3]
 80017fc:	f003 031f 	and.w	r3, r3, #31
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
 8001804:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_Init+0x68>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_Init+0x6c>)
 8001810:	5cd3      	ldrb	r3, [r2, r3]
 8001812:	f003 031f 	and.w	r3, r3, #31
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	fa22 f303 	lsr.w	r3, r2, r3
 800181c:	4a0b      	ldr	r2, [pc, #44]	; (800184c <HAL_Init+0x70>)
 800181e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001820:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <HAL_Init+0x74>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001826:	200f      	movs	r0, #15
 8001828:	f000 f814 	bl	8001854 <HAL_InitTick>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e002      	b.n	800183c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001836:	f7ff fed7 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	58024400 	.word	0x58024400
 8001848:	080091a8 	.word	0x080091a8
 800184c:	24000004 	.word	0x24000004
 8001850:	24000000 	.word	0x24000000

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_InitTick+0x60>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e021      	b.n	80018ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <HAL_InitTick+0x64>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_InitTick+0x60>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f965 	bl	8001b4e <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 f92f 	bl	8001afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x68>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	2400000c 	.word	0x2400000c
 80018b8:	24000000 	.word	0x24000000
 80018bc:	24000008 	.word	0x24000008

080018c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x20>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x24>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_IncTick+0x24>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	2400000c 	.word	0x2400000c
 80018e4:	240003b0 	.word	0x240003b0

080018e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_GetTick+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	240003b0 	.word	0x240003b0

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff ffee 	bl	80018e8 <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_Delay+0x44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001926:	bf00      	nop
 8001928:	f7ff ffde 	bl	80018e8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2400000c 	.word	0x2400000c

08001948 <__NVIC_SetPriorityGrouping>:
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <__NVIC_SetPriorityGrouping+0x40>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	4313      	orrs	r3, r2
 8001974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <__NVIC_SetPriorityGrouping+0x40>)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	60d3      	str	r3, [r2, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00
 800198c:	05fa0000 	.word	0x05fa0000

08001990 <__NVIC_GetPriorityGrouping>:
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4907      	ldr	r1, [pc, #28]	; (80019e4 <__NVIC_EnableIRQ+0x38>)
 80019c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <__NVIC_SetPriority>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db0a      	blt.n	8001a12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	490c      	ldr	r1, [pc, #48]	; (8001a34 <__NVIC_SetPriority+0x4c>)
 8001a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a10:	e00a      	b.n	8001a28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4908      	ldr	r1, [pc, #32]	; (8001a38 <__NVIC_SetPriority+0x50>)
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	440b      	add	r3, r1
 8001a26:	761a      	strb	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <NVIC_EncodePriority>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	bf28      	it	cs
 8001a5a:	2304      	movcs	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3304      	adds	r3, #4
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d902      	bls.n	8001a6c <NVIC_EncodePriority+0x30>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3b03      	subs	r3, #3
 8001a6a:	e000      	b.n	8001a6e <NVIC_EncodePriority+0x32>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	401a      	ands	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43d9      	mvns	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	4313      	orrs	r3, r2
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	; 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab4:	d301      	bcc.n	8001aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00f      	b.n	8001ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <SysTick_Config+0x40>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f7ff ff8e 	bl	80019e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <SysTick_Config+0x40>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <SysTick_Config+0x40>)
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	e000e010 	.word	0xe000e010

08001ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff29 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b0c:	f7ff ff40 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001b10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	6978      	ldr	r0, [r7, #20]
 8001b18:	f7ff ff90 	bl	8001a3c <NVIC_EncodePriority>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff5f 	bl	80019e8 <__NVIC_SetPriority>
}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff33 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ffa4 	bl	8001aa4 <SysTick_Config>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff feba 	bl	80018e8 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e312      	b.n	80021a6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a66      	ldr	r2, [pc, #408]	; (8001d20 <HAL_DMA_Init+0x1b8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d04a      	beq.n	8001c20 <HAL_DMA_Init+0xb8>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a65      	ldr	r2, [pc, #404]	; (8001d24 <HAL_DMA_Init+0x1bc>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d045      	beq.n	8001c20 <HAL_DMA_Init+0xb8>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a63      	ldr	r2, [pc, #396]	; (8001d28 <HAL_DMA_Init+0x1c0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d040      	beq.n	8001c20 <HAL_DMA_Init+0xb8>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a62      	ldr	r2, [pc, #392]	; (8001d2c <HAL_DMA_Init+0x1c4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d03b      	beq.n	8001c20 <HAL_DMA_Init+0xb8>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a60      	ldr	r2, [pc, #384]	; (8001d30 <HAL_DMA_Init+0x1c8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d036      	beq.n	8001c20 <HAL_DMA_Init+0xb8>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a5f      	ldr	r2, [pc, #380]	; (8001d34 <HAL_DMA_Init+0x1cc>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d031      	beq.n	8001c20 <HAL_DMA_Init+0xb8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a5d      	ldr	r2, [pc, #372]	; (8001d38 <HAL_DMA_Init+0x1d0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d02c      	beq.n	8001c20 <HAL_DMA_Init+0xb8>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a5c      	ldr	r2, [pc, #368]	; (8001d3c <HAL_DMA_Init+0x1d4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d027      	beq.n	8001c20 <HAL_DMA_Init+0xb8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a5a      	ldr	r2, [pc, #360]	; (8001d40 <HAL_DMA_Init+0x1d8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d022      	beq.n	8001c20 <HAL_DMA_Init+0xb8>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a59      	ldr	r2, [pc, #356]	; (8001d44 <HAL_DMA_Init+0x1dc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d01d      	beq.n	8001c20 <HAL_DMA_Init+0xb8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a57      	ldr	r2, [pc, #348]	; (8001d48 <HAL_DMA_Init+0x1e0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d018      	beq.n	8001c20 <HAL_DMA_Init+0xb8>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a56      	ldr	r2, [pc, #344]	; (8001d4c <HAL_DMA_Init+0x1e4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <HAL_DMA_Init+0xb8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a54      	ldr	r2, [pc, #336]	; (8001d50 <HAL_DMA_Init+0x1e8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00e      	beq.n	8001c20 <HAL_DMA_Init+0xb8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a53      	ldr	r2, [pc, #332]	; (8001d54 <HAL_DMA_Init+0x1ec>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d009      	beq.n	8001c20 <HAL_DMA_Init+0xb8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a51      	ldr	r2, [pc, #324]	; (8001d58 <HAL_DMA_Init+0x1f0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d004      	beq.n	8001c20 <HAL_DMA_Init+0xb8>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a50      	ldr	r2, [pc, #320]	; (8001d5c <HAL_DMA_Init+0x1f4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d101      	bne.n	8001c24 <HAL_DMA_Init+0xbc>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_DMA_Init+0xbe>
 8001c24:	2300      	movs	r3, #0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 813c 	beq.w	8001ea4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a37      	ldr	r2, [pc, #220]	; (8001d20 <HAL_DMA_Init+0x1b8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d04a      	beq.n	8001cdc <HAL_DMA_Init+0x174>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a36      	ldr	r2, [pc, #216]	; (8001d24 <HAL_DMA_Init+0x1bc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d045      	beq.n	8001cdc <HAL_DMA_Init+0x174>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a34      	ldr	r2, [pc, #208]	; (8001d28 <HAL_DMA_Init+0x1c0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d040      	beq.n	8001cdc <HAL_DMA_Init+0x174>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a33      	ldr	r2, [pc, #204]	; (8001d2c <HAL_DMA_Init+0x1c4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d03b      	beq.n	8001cdc <HAL_DMA_Init+0x174>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a31      	ldr	r2, [pc, #196]	; (8001d30 <HAL_DMA_Init+0x1c8>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d036      	beq.n	8001cdc <HAL_DMA_Init+0x174>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a30      	ldr	r2, [pc, #192]	; (8001d34 <HAL_DMA_Init+0x1cc>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d031      	beq.n	8001cdc <HAL_DMA_Init+0x174>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a2e      	ldr	r2, [pc, #184]	; (8001d38 <HAL_DMA_Init+0x1d0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d02c      	beq.n	8001cdc <HAL_DMA_Init+0x174>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a2d      	ldr	r2, [pc, #180]	; (8001d3c <HAL_DMA_Init+0x1d4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d027      	beq.n	8001cdc <HAL_DMA_Init+0x174>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a2b      	ldr	r2, [pc, #172]	; (8001d40 <HAL_DMA_Init+0x1d8>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d022      	beq.n	8001cdc <HAL_DMA_Init+0x174>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a2a      	ldr	r2, [pc, #168]	; (8001d44 <HAL_DMA_Init+0x1dc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d01d      	beq.n	8001cdc <HAL_DMA_Init+0x174>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a28      	ldr	r2, [pc, #160]	; (8001d48 <HAL_DMA_Init+0x1e0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d018      	beq.n	8001cdc <HAL_DMA_Init+0x174>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a27      	ldr	r2, [pc, #156]	; (8001d4c <HAL_DMA_Init+0x1e4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d013      	beq.n	8001cdc <HAL_DMA_Init+0x174>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a25      	ldr	r2, [pc, #148]	; (8001d50 <HAL_DMA_Init+0x1e8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00e      	beq.n	8001cdc <HAL_DMA_Init+0x174>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a24      	ldr	r2, [pc, #144]	; (8001d54 <HAL_DMA_Init+0x1ec>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d009      	beq.n	8001cdc <HAL_DMA_Init+0x174>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a22      	ldr	r2, [pc, #136]	; (8001d58 <HAL_DMA_Init+0x1f0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d004      	beq.n	8001cdc <HAL_DMA_Init+0x174>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <HAL_DMA_Init+0x1f4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d108      	bne.n	8001cee <HAL_DMA_Init+0x186>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e007      	b.n	8001cfe <HAL_DMA_Init+0x196>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0201 	bic.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cfe:	e02f      	b.n	8001d60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d00:	f7ff fdf2 	bl	80018e8 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d928      	bls.n	8001d60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2220      	movs	r2, #32
 8001d12:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2203      	movs	r2, #3
 8001d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e242      	b.n	80021a6 <HAL_DMA_Init+0x63e>
 8001d20:	40020010 	.word	0x40020010
 8001d24:	40020028 	.word	0x40020028
 8001d28:	40020040 	.word	0x40020040
 8001d2c:	40020058 	.word	0x40020058
 8001d30:	40020070 	.word	0x40020070
 8001d34:	40020088 	.word	0x40020088
 8001d38:	400200a0 	.word	0x400200a0
 8001d3c:	400200b8 	.word	0x400200b8
 8001d40:	40020410 	.word	0x40020410
 8001d44:	40020428 	.word	0x40020428
 8001d48:	40020440 	.word	0x40020440
 8001d4c:	40020458 	.word	0x40020458
 8001d50:	40020470 	.word	0x40020470
 8001d54:	40020488 	.word	0x40020488
 8001d58:	400204a0 	.word	0x400204a0
 8001d5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1c8      	bne.n	8001d00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4b83      	ldr	r3, [pc, #524]	; (8001f88 <HAL_DMA_Init+0x420>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d107      	bne.n	8001dc4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b28      	cmp	r3, #40	; 0x28
 8001dca:	d903      	bls.n	8001dd4 <HAL_DMA_Init+0x26c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8001dd2:	d91f      	bls.n	8001e14 <HAL_DMA_Init+0x2ac>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b3e      	cmp	r3, #62	; 0x3e
 8001dda:	d903      	bls.n	8001de4 <HAL_DMA_Init+0x27c>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b42      	cmp	r3, #66	; 0x42
 8001de2:	d917      	bls.n	8001e14 <HAL_DMA_Init+0x2ac>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b46      	cmp	r3, #70	; 0x46
 8001dea:	d903      	bls.n	8001df4 <HAL_DMA_Init+0x28c>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b48      	cmp	r3, #72	; 0x48
 8001df2:	d90f      	bls.n	8001e14 <HAL_DMA_Init+0x2ac>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b4e      	cmp	r3, #78	; 0x4e
 8001dfa:	d903      	bls.n	8001e04 <HAL_DMA_Init+0x29c>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b52      	cmp	r3, #82	; 0x52
 8001e02:	d907      	bls.n	8001e14 <HAL_DMA_Init+0x2ac>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b73      	cmp	r3, #115	; 0x73
 8001e0a:	d905      	bls.n	8001e18 <HAL_DMA_Init+0x2b0>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b77      	cmp	r3, #119	; 0x77
 8001e12:	d801      	bhi.n	8001e18 <HAL_DMA_Init+0x2b0>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_DMA_Init+0x2b2>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e24:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f023 0307 	bic.w	r3, r3, #7
 8001e3c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d117      	bne.n	8001e80 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00e      	beq.n	8001e80 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f001 fdd6 	bl	8003a14 <DMA_CheckFifoParam>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d008      	beq.n	8001e80 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2240      	movs	r2, #64	; 0x40
 8001e72:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e192      	b.n	80021a6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f001 fd11 	bl	80038b0 <DMA_CalcBaseAndBitshift>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	223f      	movs	r2, #63	; 0x3f
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	e0c8      	b.n	8002036 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a38      	ldr	r2, [pc, #224]	; (8001f8c <HAL_DMA_Init+0x424>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d022      	beq.n	8001ef4 <HAL_DMA_Init+0x38c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a37      	ldr	r2, [pc, #220]	; (8001f90 <HAL_DMA_Init+0x428>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d01d      	beq.n	8001ef4 <HAL_DMA_Init+0x38c>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a35      	ldr	r2, [pc, #212]	; (8001f94 <HAL_DMA_Init+0x42c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d018      	beq.n	8001ef4 <HAL_DMA_Init+0x38c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a34      	ldr	r2, [pc, #208]	; (8001f98 <HAL_DMA_Init+0x430>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d013      	beq.n	8001ef4 <HAL_DMA_Init+0x38c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a32      	ldr	r2, [pc, #200]	; (8001f9c <HAL_DMA_Init+0x434>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00e      	beq.n	8001ef4 <HAL_DMA_Init+0x38c>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a31      	ldr	r2, [pc, #196]	; (8001fa0 <HAL_DMA_Init+0x438>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d009      	beq.n	8001ef4 <HAL_DMA_Init+0x38c>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a2f      	ldr	r2, [pc, #188]	; (8001fa4 <HAL_DMA_Init+0x43c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d004      	beq.n	8001ef4 <HAL_DMA_Init+0x38c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a2e      	ldr	r2, [pc, #184]	; (8001fa8 <HAL_DMA_Init+0x440>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_DMA_Init+0x390>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_DMA_Init+0x392>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8092 	beq.w	8002024 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a21      	ldr	r2, [pc, #132]	; (8001f8c <HAL_DMA_Init+0x424>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d021      	beq.n	8001f4e <HAL_DMA_Init+0x3e6>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <HAL_DMA_Init+0x428>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d01c      	beq.n	8001f4e <HAL_DMA_Init+0x3e6>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1e      	ldr	r2, [pc, #120]	; (8001f94 <HAL_DMA_Init+0x42c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d017      	beq.n	8001f4e <HAL_DMA_Init+0x3e6>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <HAL_DMA_Init+0x430>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d012      	beq.n	8001f4e <HAL_DMA_Init+0x3e6>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <HAL_DMA_Init+0x434>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00d      	beq.n	8001f4e <HAL_DMA_Init+0x3e6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a1a      	ldr	r2, [pc, #104]	; (8001fa0 <HAL_DMA_Init+0x438>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d008      	beq.n	8001f4e <HAL_DMA_Init+0x3e6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_DMA_Init+0x43c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d003      	beq.n	8001f4e <HAL_DMA_Init+0x3e6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_DMA_Init+0x440>)
 8001f4c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_DMA_Init+0x444>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b40      	cmp	r3, #64	; 0x40
 8001f74:	d01c      	beq.n	8001fb0 <HAL_DMA_Init+0x448>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b80      	cmp	r3, #128	; 0x80
 8001f7c:	d102      	bne.n	8001f84 <HAL_DMA_Init+0x41c>
 8001f7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f82:	e016      	b.n	8001fb2 <HAL_DMA_Init+0x44a>
 8001f84:	2300      	movs	r3, #0
 8001f86:	e014      	b.n	8001fb2 <HAL_DMA_Init+0x44a>
 8001f88:	fe10803f 	.word	0xfe10803f
 8001f8c:	58025408 	.word	0x58025408
 8001f90:	5802541c 	.word	0x5802541c
 8001f94:	58025430 	.word	0x58025430
 8001f98:	58025444 	.word	0x58025444
 8001f9c:	58025458 	.word	0x58025458
 8001fa0:	5802546c 	.word	0x5802546c
 8001fa4:	58025480 	.word	0x58025480
 8001fa8:	58025494 	.word	0x58025494
 8001fac:	fffe000f 	.word	0xfffe000f
 8001fb0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68d2      	ldr	r2, [r2, #12]
 8001fb6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001fc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001fd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001fe0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b6e      	ldr	r3, [pc, #440]	; (80021b0 <HAL_DMA_Init+0x648>)
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a6e      	ldr	r2, [pc, #440]	; (80021b4 <HAL_DMA_Init+0x64c>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	009a      	lsls	r2, r3, #2
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f001 fc51 	bl	80038b0 <DMA_CalcBaseAndBitshift>
 800200e:	4603      	mov	r3, r0
 8002010:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	2201      	movs	r2, #1
 800201c:	409a      	lsls	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	e008      	b.n	8002036 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2240      	movs	r2, #64	; 0x40
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2203      	movs	r2, #3
 800202e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0b7      	b.n	80021a6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a5f      	ldr	r2, [pc, #380]	; (80021b8 <HAL_DMA_Init+0x650>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d072      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a5d      	ldr	r2, [pc, #372]	; (80021bc <HAL_DMA_Init+0x654>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d06d      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a5c      	ldr	r2, [pc, #368]	; (80021c0 <HAL_DMA_Init+0x658>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d068      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a5a      	ldr	r2, [pc, #360]	; (80021c4 <HAL_DMA_Init+0x65c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d063      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a59      	ldr	r2, [pc, #356]	; (80021c8 <HAL_DMA_Init+0x660>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d05e      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a57      	ldr	r2, [pc, #348]	; (80021cc <HAL_DMA_Init+0x664>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d059      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a56      	ldr	r2, [pc, #344]	; (80021d0 <HAL_DMA_Init+0x668>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d054      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a54      	ldr	r2, [pc, #336]	; (80021d4 <HAL_DMA_Init+0x66c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d04f      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a53      	ldr	r2, [pc, #332]	; (80021d8 <HAL_DMA_Init+0x670>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d04a      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a51      	ldr	r2, [pc, #324]	; (80021dc <HAL_DMA_Init+0x674>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d045      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a50      	ldr	r2, [pc, #320]	; (80021e0 <HAL_DMA_Init+0x678>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d040      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a4e      	ldr	r2, [pc, #312]	; (80021e4 <HAL_DMA_Init+0x67c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d03b      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a4d      	ldr	r2, [pc, #308]	; (80021e8 <HAL_DMA_Init+0x680>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d036      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a4b      	ldr	r2, [pc, #300]	; (80021ec <HAL_DMA_Init+0x684>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d031      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a4a      	ldr	r2, [pc, #296]	; (80021f0 <HAL_DMA_Init+0x688>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d02c      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a48      	ldr	r2, [pc, #288]	; (80021f4 <HAL_DMA_Init+0x68c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d027      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a47      	ldr	r2, [pc, #284]	; (80021f8 <HAL_DMA_Init+0x690>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d022      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a45      	ldr	r2, [pc, #276]	; (80021fc <HAL_DMA_Init+0x694>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01d      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a44      	ldr	r2, [pc, #272]	; (8002200 <HAL_DMA_Init+0x698>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d018      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a42      	ldr	r2, [pc, #264]	; (8002204 <HAL_DMA_Init+0x69c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d013      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a41      	ldr	r2, [pc, #260]	; (8002208 <HAL_DMA_Init+0x6a0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00e      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a3f      	ldr	r2, [pc, #252]	; (800220c <HAL_DMA_Init+0x6a4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d009      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a3e      	ldr	r2, [pc, #248]	; (8002210 <HAL_DMA_Init+0x6a8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d004      	beq.n	8002126 <HAL_DMA_Init+0x5be>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a3c      	ldr	r2, [pc, #240]	; (8002214 <HAL_DMA_Init+0x6ac>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d101      	bne.n	800212a <HAL_DMA_Init+0x5c2>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_DMA_Init+0x5c4>
 800212a:	2300      	movs	r3, #0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d032      	beq.n	8002196 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f001 fceb 	bl	8003b0c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b80      	cmp	r3, #128	; 0x80
 800213c:	d102      	bne.n	8002144 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002158:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d010      	beq.n	8002184 <HAL_DMA_Init+0x61c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b08      	cmp	r3, #8
 8002168:	d80c      	bhi.n	8002184 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f001 fd68 	bl	8003c40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	e008      	b.n	8002196 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	a7fdabf8 	.word	0xa7fdabf8
 80021b4:	cccccccd 	.word	0xcccccccd
 80021b8:	40020010 	.word	0x40020010
 80021bc:	40020028 	.word	0x40020028
 80021c0:	40020040 	.word	0x40020040
 80021c4:	40020058 	.word	0x40020058
 80021c8:	40020070 	.word	0x40020070
 80021cc:	40020088 	.word	0x40020088
 80021d0:	400200a0 	.word	0x400200a0
 80021d4:	400200b8 	.word	0x400200b8
 80021d8:	40020410 	.word	0x40020410
 80021dc:	40020428 	.word	0x40020428
 80021e0:	40020440 	.word	0x40020440
 80021e4:	40020458 	.word	0x40020458
 80021e8:	40020470 	.word	0x40020470
 80021ec:	40020488 	.word	0x40020488
 80021f0:	400204a0 	.word	0x400204a0
 80021f4:	400204b8 	.word	0x400204b8
 80021f8:	58025408 	.word	0x58025408
 80021fc:	5802541c 	.word	0x5802541c
 8002200:	58025430 	.word	0x58025430
 8002204:	58025444 	.word	0x58025444
 8002208:	58025458 	.word	0x58025458
 800220c:	5802546c 	.word	0x5802546c
 8002210:	58025480 	.word	0x58025480
 8002214:	58025494 	.word	0x58025494

08002218 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e226      	b.n	8002682 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_DMA_Start_IT+0x2a>
 800223e:	2302      	movs	r3, #2
 8002240:	e21f      	b.n	8002682 <HAL_DMA_Start_IT+0x46a>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b01      	cmp	r3, #1
 8002254:	f040 820a 	bne.w	800266c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a68      	ldr	r2, [pc, #416]	; (800240c <HAL_DMA_Start_IT+0x1f4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d04a      	beq.n	8002306 <HAL_DMA_Start_IT+0xee>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a66      	ldr	r2, [pc, #408]	; (8002410 <HAL_DMA_Start_IT+0x1f8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d045      	beq.n	8002306 <HAL_DMA_Start_IT+0xee>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a65      	ldr	r2, [pc, #404]	; (8002414 <HAL_DMA_Start_IT+0x1fc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d040      	beq.n	8002306 <HAL_DMA_Start_IT+0xee>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a63      	ldr	r2, [pc, #396]	; (8002418 <HAL_DMA_Start_IT+0x200>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d03b      	beq.n	8002306 <HAL_DMA_Start_IT+0xee>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a62      	ldr	r2, [pc, #392]	; (800241c <HAL_DMA_Start_IT+0x204>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d036      	beq.n	8002306 <HAL_DMA_Start_IT+0xee>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a60      	ldr	r2, [pc, #384]	; (8002420 <HAL_DMA_Start_IT+0x208>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d031      	beq.n	8002306 <HAL_DMA_Start_IT+0xee>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a5f      	ldr	r2, [pc, #380]	; (8002424 <HAL_DMA_Start_IT+0x20c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d02c      	beq.n	8002306 <HAL_DMA_Start_IT+0xee>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a5d      	ldr	r2, [pc, #372]	; (8002428 <HAL_DMA_Start_IT+0x210>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d027      	beq.n	8002306 <HAL_DMA_Start_IT+0xee>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a5c      	ldr	r2, [pc, #368]	; (800242c <HAL_DMA_Start_IT+0x214>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d022      	beq.n	8002306 <HAL_DMA_Start_IT+0xee>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a5a      	ldr	r2, [pc, #360]	; (8002430 <HAL_DMA_Start_IT+0x218>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d01d      	beq.n	8002306 <HAL_DMA_Start_IT+0xee>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a59      	ldr	r2, [pc, #356]	; (8002434 <HAL_DMA_Start_IT+0x21c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d018      	beq.n	8002306 <HAL_DMA_Start_IT+0xee>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a57      	ldr	r2, [pc, #348]	; (8002438 <HAL_DMA_Start_IT+0x220>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <HAL_DMA_Start_IT+0xee>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a56      	ldr	r2, [pc, #344]	; (800243c <HAL_DMA_Start_IT+0x224>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00e      	beq.n	8002306 <HAL_DMA_Start_IT+0xee>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a54      	ldr	r2, [pc, #336]	; (8002440 <HAL_DMA_Start_IT+0x228>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d009      	beq.n	8002306 <HAL_DMA_Start_IT+0xee>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a53      	ldr	r2, [pc, #332]	; (8002444 <HAL_DMA_Start_IT+0x22c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d004      	beq.n	8002306 <HAL_DMA_Start_IT+0xee>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a51      	ldr	r2, [pc, #324]	; (8002448 <HAL_DMA_Start_IT+0x230>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d108      	bne.n	8002318 <HAL_DMA_Start_IT+0x100>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	e007      	b.n	8002328 <HAL_DMA_Start_IT+0x110>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f001 f912 	bl	8003558 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a34      	ldr	r2, [pc, #208]	; (800240c <HAL_DMA_Start_IT+0x1f4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d04a      	beq.n	80023d4 <HAL_DMA_Start_IT+0x1bc>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a33      	ldr	r2, [pc, #204]	; (8002410 <HAL_DMA_Start_IT+0x1f8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d045      	beq.n	80023d4 <HAL_DMA_Start_IT+0x1bc>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a31      	ldr	r2, [pc, #196]	; (8002414 <HAL_DMA_Start_IT+0x1fc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d040      	beq.n	80023d4 <HAL_DMA_Start_IT+0x1bc>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a30      	ldr	r2, [pc, #192]	; (8002418 <HAL_DMA_Start_IT+0x200>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d03b      	beq.n	80023d4 <HAL_DMA_Start_IT+0x1bc>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a2e      	ldr	r2, [pc, #184]	; (800241c <HAL_DMA_Start_IT+0x204>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d036      	beq.n	80023d4 <HAL_DMA_Start_IT+0x1bc>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a2d      	ldr	r2, [pc, #180]	; (8002420 <HAL_DMA_Start_IT+0x208>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d031      	beq.n	80023d4 <HAL_DMA_Start_IT+0x1bc>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a2b      	ldr	r2, [pc, #172]	; (8002424 <HAL_DMA_Start_IT+0x20c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d02c      	beq.n	80023d4 <HAL_DMA_Start_IT+0x1bc>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a2a      	ldr	r2, [pc, #168]	; (8002428 <HAL_DMA_Start_IT+0x210>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d027      	beq.n	80023d4 <HAL_DMA_Start_IT+0x1bc>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a28      	ldr	r2, [pc, #160]	; (800242c <HAL_DMA_Start_IT+0x214>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d022      	beq.n	80023d4 <HAL_DMA_Start_IT+0x1bc>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a27      	ldr	r2, [pc, #156]	; (8002430 <HAL_DMA_Start_IT+0x218>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d01d      	beq.n	80023d4 <HAL_DMA_Start_IT+0x1bc>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a25      	ldr	r2, [pc, #148]	; (8002434 <HAL_DMA_Start_IT+0x21c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d018      	beq.n	80023d4 <HAL_DMA_Start_IT+0x1bc>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a24      	ldr	r2, [pc, #144]	; (8002438 <HAL_DMA_Start_IT+0x220>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d013      	beq.n	80023d4 <HAL_DMA_Start_IT+0x1bc>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a22      	ldr	r2, [pc, #136]	; (800243c <HAL_DMA_Start_IT+0x224>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00e      	beq.n	80023d4 <HAL_DMA_Start_IT+0x1bc>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a21      	ldr	r2, [pc, #132]	; (8002440 <HAL_DMA_Start_IT+0x228>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d009      	beq.n	80023d4 <HAL_DMA_Start_IT+0x1bc>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <HAL_DMA_Start_IT+0x22c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d004      	beq.n	80023d4 <HAL_DMA_Start_IT+0x1bc>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1e      	ldr	r2, [pc, #120]	; (8002448 <HAL_DMA_Start_IT+0x230>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d101      	bne.n	80023d8 <HAL_DMA_Start_IT+0x1c0>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <HAL_DMA_Start_IT+0x1c2>
 80023d8:	2300      	movs	r3, #0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d036      	beq.n	800244c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 021e 	bic.w	r2, r3, #30
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0216 	orr.w	r2, r2, #22
 80023f0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d03e      	beq.n	8002478 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0208 	orr.w	r2, r2, #8
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e035      	b.n	8002478 <HAL_DMA_Start_IT+0x260>
 800240c:	40020010 	.word	0x40020010
 8002410:	40020028 	.word	0x40020028
 8002414:	40020040 	.word	0x40020040
 8002418:	40020058 	.word	0x40020058
 800241c:	40020070 	.word	0x40020070
 8002420:	40020088 	.word	0x40020088
 8002424:	400200a0 	.word	0x400200a0
 8002428:	400200b8 	.word	0x400200b8
 800242c:	40020410 	.word	0x40020410
 8002430:	40020428 	.word	0x40020428
 8002434:	40020440 	.word	0x40020440
 8002438:	40020458 	.word	0x40020458
 800243c:	40020470 	.word	0x40020470
 8002440:	40020488 	.word	0x40020488
 8002444:	400204a0 	.word	0x400204a0
 8002448:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 020e 	bic.w	r2, r3, #14
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 020a 	orr.w	r2, r2, #10
 800245e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	2b00      	cmp	r3, #0
 8002466:	d007      	beq.n	8002478 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0204 	orr.w	r2, r2, #4
 8002476:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a83      	ldr	r2, [pc, #524]	; (800268c <HAL_DMA_Start_IT+0x474>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d072      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a82      	ldr	r2, [pc, #520]	; (8002690 <HAL_DMA_Start_IT+0x478>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d06d      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a80      	ldr	r2, [pc, #512]	; (8002694 <HAL_DMA_Start_IT+0x47c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d068      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a7f      	ldr	r2, [pc, #508]	; (8002698 <HAL_DMA_Start_IT+0x480>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d063      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a7d      	ldr	r2, [pc, #500]	; (800269c <HAL_DMA_Start_IT+0x484>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d05e      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a7c      	ldr	r2, [pc, #496]	; (80026a0 <HAL_DMA_Start_IT+0x488>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d059      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a7a      	ldr	r2, [pc, #488]	; (80026a4 <HAL_DMA_Start_IT+0x48c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d054      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a79      	ldr	r2, [pc, #484]	; (80026a8 <HAL_DMA_Start_IT+0x490>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d04f      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a77      	ldr	r2, [pc, #476]	; (80026ac <HAL_DMA_Start_IT+0x494>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d04a      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a76      	ldr	r2, [pc, #472]	; (80026b0 <HAL_DMA_Start_IT+0x498>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d045      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a74      	ldr	r2, [pc, #464]	; (80026b4 <HAL_DMA_Start_IT+0x49c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d040      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a73      	ldr	r2, [pc, #460]	; (80026b8 <HAL_DMA_Start_IT+0x4a0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d03b      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a71      	ldr	r2, [pc, #452]	; (80026bc <HAL_DMA_Start_IT+0x4a4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d036      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a70      	ldr	r2, [pc, #448]	; (80026c0 <HAL_DMA_Start_IT+0x4a8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d031      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a6e      	ldr	r2, [pc, #440]	; (80026c4 <HAL_DMA_Start_IT+0x4ac>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d02c      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6d      	ldr	r2, [pc, #436]	; (80026c8 <HAL_DMA_Start_IT+0x4b0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d027      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a6b      	ldr	r2, [pc, #428]	; (80026cc <HAL_DMA_Start_IT+0x4b4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d022      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6a      	ldr	r2, [pc, #424]	; (80026d0 <HAL_DMA_Start_IT+0x4b8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d01d      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a68      	ldr	r2, [pc, #416]	; (80026d4 <HAL_DMA_Start_IT+0x4bc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d018      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a67      	ldr	r2, [pc, #412]	; (80026d8 <HAL_DMA_Start_IT+0x4c0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d013      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a65      	ldr	r2, [pc, #404]	; (80026dc <HAL_DMA_Start_IT+0x4c4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00e      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a64      	ldr	r2, [pc, #400]	; (80026e0 <HAL_DMA_Start_IT+0x4c8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d009      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a62      	ldr	r2, [pc, #392]	; (80026e4 <HAL_DMA_Start_IT+0x4cc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d004      	beq.n	8002568 <HAL_DMA_Start_IT+0x350>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a61      	ldr	r2, [pc, #388]	; (80026e8 <HAL_DMA_Start_IT+0x4d0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d101      	bne.n	800256c <HAL_DMA_Start_IT+0x354>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_DMA_Start_IT+0x356>
 800256c:	2300      	movs	r3, #0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01a      	beq.n	80025a8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800258e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a37      	ldr	r2, [pc, #220]	; (800268c <HAL_DMA_Start_IT+0x474>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d04a      	beq.n	8002648 <HAL_DMA_Start_IT+0x430>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a36      	ldr	r2, [pc, #216]	; (8002690 <HAL_DMA_Start_IT+0x478>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d045      	beq.n	8002648 <HAL_DMA_Start_IT+0x430>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a34      	ldr	r2, [pc, #208]	; (8002694 <HAL_DMA_Start_IT+0x47c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d040      	beq.n	8002648 <HAL_DMA_Start_IT+0x430>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a33      	ldr	r2, [pc, #204]	; (8002698 <HAL_DMA_Start_IT+0x480>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d03b      	beq.n	8002648 <HAL_DMA_Start_IT+0x430>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a31      	ldr	r2, [pc, #196]	; (800269c <HAL_DMA_Start_IT+0x484>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d036      	beq.n	8002648 <HAL_DMA_Start_IT+0x430>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a30      	ldr	r2, [pc, #192]	; (80026a0 <HAL_DMA_Start_IT+0x488>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d031      	beq.n	8002648 <HAL_DMA_Start_IT+0x430>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a2e      	ldr	r2, [pc, #184]	; (80026a4 <HAL_DMA_Start_IT+0x48c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d02c      	beq.n	8002648 <HAL_DMA_Start_IT+0x430>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2d      	ldr	r2, [pc, #180]	; (80026a8 <HAL_DMA_Start_IT+0x490>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d027      	beq.n	8002648 <HAL_DMA_Start_IT+0x430>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a2b      	ldr	r2, [pc, #172]	; (80026ac <HAL_DMA_Start_IT+0x494>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d022      	beq.n	8002648 <HAL_DMA_Start_IT+0x430>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a2a      	ldr	r2, [pc, #168]	; (80026b0 <HAL_DMA_Start_IT+0x498>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d01d      	beq.n	8002648 <HAL_DMA_Start_IT+0x430>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a28      	ldr	r2, [pc, #160]	; (80026b4 <HAL_DMA_Start_IT+0x49c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d018      	beq.n	8002648 <HAL_DMA_Start_IT+0x430>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a27      	ldr	r2, [pc, #156]	; (80026b8 <HAL_DMA_Start_IT+0x4a0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d013      	beq.n	8002648 <HAL_DMA_Start_IT+0x430>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a25      	ldr	r2, [pc, #148]	; (80026bc <HAL_DMA_Start_IT+0x4a4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00e      	beq.n	8002648 <HAL_DMA_Start_IT+0x430>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a24      	ldr	r2, [pc, #144]	; (80026c0 <HAL_DMA_Start_IT+0x4a8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d009      	beq.n	8002648 <HAL_DMA_Start_IT+0x430>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a22      	ldr	r2, [pc, #136]	; (80026c4 <HAL_DMA_Start_IT+0x4ac>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d004      	beq.n	8002648 <HAL_DMA_Start_IT+0x430>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a21      	ldr	r2, [pc, #132]	; (80026c8 <HAL_DMA_Start_IT+0x4b0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d108      	bne.n	800265a <HAL_DMA_Start_IT+0x442>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	e012      	b.n	8002680 <HAL_DMA_Start_IT+0x468>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0201 	orr.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e009      	b.n	8002680 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002672:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002680:	7dfb      	ldrb	r3, [r7, #23]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40020010 	.word	0x40020010
 8002690:	40020028 	.word	0x40020028
 8002694:	40020040 	.word	0x40020040
 8002698:	40020058 	.word	0x40020058
 800269c:	40020070 	.word	0x40020070
 80026a0:	40020088 	.word	0x40020088
 80026a4:	400200a0 	.word	0x400200a0
 80026a8:	400200b8 	.word	0x400200b8
 80026ac:	40020410 	.word	0x40020410
 80026b0:	40020428 	.word	0x40020428
 80026b4:	40020440 	.word	0x40020440
 80026b8:	40020458 	.word	0x40020458
 80026bc:	40020470 	.word	0x40020470
 80026c0:	40020488 	.word	0x40020488
 80026c4:	400204a0 	.word	0x400204a0
 80026c8:	400204b8 	.word	0x400204b8
 80026cc:	58025408 	.word	0x58025408
 80026d0:	5802541c 	.word	0x5802541c
 80026d4:	58025430 	.word	0x58025430
 80026d8:	58025444 	.word	0x58025444
 80026dc:	58025458 	.word	0x58025458
 80026e0:	5802546c 	.word	0x5802546c
 80026e4:	58025480 	.word	0x58025480
 80026e8:	58025494 	.word	0x58025494

080026ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	; 0x28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026f8:	4b67      	ldr	r3, [pc, #412]	; (8002898 <HAL_DMA_IRQHandler+0x1ac>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a67      	ldr	r2, [pc, #412]	; (800289c <HAL_DMA_IRQHandler+0x1b0>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0a9b      	lsrs	r3, r3, #10
 8002704:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002710:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a5f      	ldr	r2, [pc, #380]	; (80028a0 <HAL_DMA_IRQHandler+0x1b4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d04a      	beq.n	80027be <HAL_DMA_IRQHandler+0xd2>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a5d      	ldr	r2, [pc, #372]	; (80028a4 <HAL_DMA_IRQHandler+0x1b8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d045      	beq.n	80027be <HAL_DMA_IRQHandler+0xd2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a5c      	ldr	r2, [pc, #368]	; (80028a8 <HAL_DMA_IRQHandler+0x1bc>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d040      	beq.n	80027be <HAL_DMA_IRQHandler+0xd2>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a5a      	ldr	r2, [pc, #360]	; (80028ac <HAL_DMA_IRQHandler+0x1c0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d03b      	beq.n	80027be <HAL_DMA_IRQHandler+0xd2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a59      	ldr	r2, [pc, #356]	; (80028b0 <HAL_DMA_IRQHandler+0x1c4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d036      	beq.n	80027be <HAL_DMA_IRQHandler+0xd2>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a57      	ldr	r2, [pc, #348]	; (80028b4 <HAL_DMA_IRQHandler+0x1c8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d031      	beq.n	80027be <HAL_DMA_IRQHandler+0xd2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a56      	ldr	r2, [pc, #344]	; (80028b8 <HAL_DMA_IRQHandler+0x1cc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d02c      	beq.n	80027be <HAL_DMA_IRQHandler+0xd2>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a54      	ldr	r2, [pc, #336]	; (80028bc <HAL_DMA_IRQHandler+0x1d0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d027      	beq.n	80027be <HAL_DMA_IRQHandler+0xd2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a53      	ldr	r2, [pc, #332]	; (80028c0 <HAL_DMA_IRQHandler+0x1d4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d022      	beq.n	80027be <HAL_DMA_IRQHandler+0xd2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a51      	ldr	r2, [pc, #324]	; (80028c4 <HAL_DMA_IRQHandler+0x1d8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d01d      	beq.n	80027be <HAL_DMA_IRQHandler+0xd2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a50      	ldr	r2, [pc, #320]	; (80028c8 <HAL_DMA_IRQHandler+0x1dc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d018      	beq.n	80027be <HAL_DMA_IRQHandler+0xd2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a4e      	ldr	r2, [pc, #312]	; (80028cc <HAL_DMA_IRQHandler+0x1e0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <HAL_DMA_IRQHandler+0xd2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a4d      	ldr	r2, [pc, #308]	; (80028d0 <HAL_DMA_IRQHandler+0x1e4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00e      	beq.n	80027be <HAL_DMA_IRQHandler+0xd2>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a4b      	ldr	r2, [pc, #300]	; (80028d4 <HAL_DMA_IRQHandler+0x1e8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d009      	beq.n	80027be <HAL_DMA_IRQHandler+0xd2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a4a      	ldr	r2, [pc, #296]	; (80028d8 <HAL_DMA_IRQHandler+0x1ec>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d004      	beq.n	80027be <HAL_DMA_IRQHandler+0xd2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a48      	ldr	r2, [pc, #288]	; (80028dc <HAL_DMA_IRQHandler+0x1f0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <HAL_DMA_IRQHandler+0xd6>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_DMA_IRQHandler+0xd8>
 80027c2:	2300      	movs	r3, #0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 842b 	beq.w	8003020 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	2208      	movs	r2, #8
 80027d4:	409a      	lsls	r2, r3
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80a2 	beq.w	8002924 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2e      	ldr	r2, [pc, #184]	; (80028a0 <HAL_DMA_IRQHandler+0x1b4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d04a      	beq.n	8002880 <HAL_DMA_IRQHandler+0x194>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2d      	ldr	r2, [pc, #180]	; (80028a4 <HAL_DMA_IRQHandler+0x1b8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d045      	beq.n	8002880 <HAL_DMA_IRQHandler+0x194>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a2b      	ldr	r2, [pc, #172]	; (80028a8 <HAL_DMA_IRQHandler+0x1bc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d040      	beq.n	8002880 <HAL_DMA_IRQHandler+0x194>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a2a      	ldr	r2, [pc, #168]	; (80028ac <HAL_DMA_IRQHandler+0x1c0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d03b      	beq.n	8002880 <HAL_DMA_IRQHandler+0x194>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a28      	ldr	r2, [pc, #160]	; (80028b0 <HAL_DMA_IRQHandler+0x1c4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d036      	beq.n	8002880 <HAL_DMA_IRQHandler+0x194>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a27      	ldr	r2, [pc, #156]	; (80028b4 <HAL_DMA_IRQHandler+0x1c8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d031      	beq.n	8002880 <HAL_DMA_IRQHandler+0x194>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a25      	ldr	r2, [pc, #148]	; (80028b8 <HAL_DMA_IRQHandler+0x1cc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d02c      	beq.n	8002880 <HAL_DMA_IRQHandler+0x194>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a24      	ldr	r2, [pc, #144]	; (80028bc <HAL_DMA_IRQHandler+0x1d0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d027      	beq.n	8002880 <HAL_DMA_IRQHandler+0x194>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <HAL_DMA_IRQHandler+0x1d4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d022      	beq.n	8002880 <HAL_DMA_IRQHandler+0x194>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <HAL_DMA_IRQHandler+0x1d8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d01d      	beq.n	8002880 <HAL_DMA_IRQHandler+0x194>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <HAL_DMA_IRQHandler+0x1dc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d018      	beq.n	8002880 <HAL_DMA_IRQHandler+0x194>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1e      	ldr	r2, [pc, #120]	; (80028cc <HAL_DMA_IRQHandler+0x1e0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d013      	beq.n	8002880 <HAL_DMA_IRQHandler+0x194>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <HAL_DMA_IRQHandler+0x1e4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00e      	beq.n	8002880 <HAL_DMA_IRQHandler+0x194>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1b      	ldr	r2, [pc, #108]	; (80028d4 <HAL_DMA_IRQHandler+0x1e8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d009      	beq.n	8002880 <HAL_DMA_IRQHandler+0x194>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_DMA_IRQHandler+0x1ec>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d004      	beq.n	8002880 <HAL_DMA_IRQHandler+0x194>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a18      	ldr	r2, [pc, #96]	; (80028dc <HAL_DMA_IRQHandler+0x1f0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d12f      	bne.n	80028e0 <HAL_DMA_IRQHandler+0x1f4>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	bf14      	ite	ne
 800288e:	2301      	movne	r3, #1
 8002890:	2300      	moveq	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	e02e      	b.n	80028f4 <HAL_DMA_IRQHandler+0x208>
 8002896:	bf00      	nop
 8002898:	24000000 	.word	0x24000000
 800289c:	1b4e81b5 	.word	0x1b4e81b5
 80028a0:	40020010 	.word	0x40020010
 80028a4:	40020028 	.word	0x40020028
 80028a8:	40020040 	.word	0x40020040
 80028ac:	40020058 	.word	0x40020058
 80028b0:	40020070 	.word	0x40020070
 80028b4:	40020088 	.word	0x40020088
 80028b8:	400200a0 	.word	0x400200a0
 80028bc:	400200b8 	.word	0x400200b8
 80028c0:	40020410 	.word	0x40020410
 80028c4:	40020428 	.word	0x40020428
 80028c8:	40020440 	.word	0x40020440
 80028cc:	40020458 	.word	0x40020458
 80028d0:	40020470 	.word	0x40020470
 80028d4:	40020488 	.word	0x40020488
 80028d8:	400204a0 	.word	0x400204a0
 80028dc:	400204b8 	.word	0x400204b8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf14      	ite	ne
 80028ee:	2301      	movne	r3, #1
 80028f0:	2300      	moveq	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d015      	beq.n	8002924 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0204 	bic.w	r2, r2, #4
 8002906:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	2208      	movs	r2, #8
 8002912:	409a      	lsls	r2, r3
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291c:	f043 0201 	orr.w	r2, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	fa22 f303 	lsr.w	r3, r2, r3
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d06e      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a69      	ldr	r2, [pc, #420]	; (8002ae4 <HAL_DMA_IRQHandler+0x3f8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d04a      	beq.n	80029da <HAL_DMA_IRQHandler+0x2ee>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a67      	ldr	r2, [pc, #412]	; (8002ae8 <HAL_DMA_IRQHandler+0x3fc>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d045      	beq.n	80029da <HAL_DMA_IRQHandler+0x2ee>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a66      	ldr	r2, [pc, #408]	; (8002aec <HAL_DMA_IRQHandler+0x400>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d040      	beq.n	80029da <HAL_DMA_IRQHandler+0x2ee>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a64      	ldr	r2, [pc, #400]	; (8002af0 <HAL_DMA_IRQHandler+0x404>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d03b      	beq.n	80029da <HAL_DMA_IRQHandler+0x2ee>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a63      	ldr	r2, [pc, #396]	; (8002af4 <HAL_DMA_IRQHandler+0x408>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d036      	beq.n	80029da <HAL_DMA_IRQHandler+0x2ee>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a61      	ldr	r2, [pc, #388]	; (8002af8 <HAL_DMA_IRQHandler+0x40c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d031      	beq.n	80029da <HAL_DMA_IRQHandler+0x2ee>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a60      	ldr	r2, [pc, #384]	; (8002afc <HAL_DMA_IRQHandler+0x410>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d02c      	beq.n	80029da <HAL_DMA_IRQHandler+0x2ee>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a5e      	ldr	r2, [pc, #376]	; (8002b00 <HAL_DMA_IRQHandler+0x414>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d027      	beq.n	80029da <HAL_DMA_IRQHandler+0x2ee>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a5d      	ldr	r2, [pc, #372]	; (8002b04 <HAL_DMA_IRQHandler+0x418>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d022      	beq.n	80029da <HAL_DMA_IRQHandler+0x2ee>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a5b      	ldr	r2, [pc, #364]	; (8002b08 <HAL_DMA_IRQHandler+0x41c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01d      	beq.n	80029da <HAL_DMA_IRQHandler+0x2ee>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a5a      	ldr	r2, [pc, #360]	; (8002b0c <HAL_DMA_IRQHandler+0x420>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d018      	beq.n	80029da <HAL_DMA_IRQHandler+0x2ee>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a58      	ldr	r2, [pc, #352]	; (8002b10 <HAL_DMA_IRQHandler+0x424>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_DMA_IRQHandler+0x2ee>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a57      	ldr	r2, [pc, #348]	; (8002b14 <HAL_DMA_IRQHandler+0x428>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00e      	beq.n	80029da <HAL_DMA_IRQHandler+0x2ee>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a55      	ldr	r2, [pc, #340]	; (8002b18 <HAL_DMA_IRQHandler+0x42c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_DMA_IRQHandler+0x2ee>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a54      	ldr	r2, [pc, #336]	; (8002b1c <HAL_DMA_IRQHandler+0x430>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_DMA_IRQHandler+0x2ee>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a52      	ldr	r2, [pc, #328]	; (8002b20 <HAL_DMA_IRQHandler+0x434>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10a      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x304>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf14      	ite	ne
 80029e8:	2301      	movne	r3, #1
 80029ea:	2300      	moveq	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	e003      	b.n	80029f8 <HAL_DMA_IRQHandler+0x30c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2300      	movs	r3, #0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00d      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2201      	movs	r2, #1
 8002a06:	409a      	lsls	r2, r3
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	f043 0202 	orr.w	r2, r3, #2
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2204      	movs	r2, #4
 8002a22:	409a      	lsls	r2, r3
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 808f 	beq.w	8002b4c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a2c      	ldr	r2, [pc, #176]	; (8002ae4 <HAL_DMA_IRQHandler+0x3f8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d04a      	beq.n	8002ace <HAL_DMA_IRQHandler+0x3e2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ae8 <HAL_DMA_IRQHandler+0x3fc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d045      	beq.n	8002ace <HAL_DMA_IRQHandler+0x3e2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a29      	ldr	r2, [pc, #164]	; (8002aec <HAL_DMA_IRQHandler+0x400>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d040      	beq.n	8002ace <HAL_DMA_IRQHandler+0x3e2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a27      	ldr	r2, [pc, #156]	; (8002af0 <HAL_DMA_IRQHandler+0x404>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d03b      	beq.n	8002ace <HAL_DMA_IRQHandler+0x3e2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <HAL_DMA_IRQHandler+0x408>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d036      	beq.n	8002ace <HAL_DMA_IRQHandler+0x3e2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a24      	ldr	r2, [pc, #144]	; (8002af8 <HAL_DMA_IRQHandler+0x40c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d031      	beq.n	8002ace <HAL_DMA_IRQHandler+0x3e2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a23      	ldr	r2, [pc, #140]	; (8002afc <HAL_DMA_IRQHandler+0x410>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d02c      	beq.n	8002ace <HAL_DMA_IRQHandler+0x3e2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a21      	ldr	r2, [pc, #132]	; (8002b00 <HAL_DMA_IRQHandler+0x414>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d027      	beq.n	8002ace <HAL_DMA_IRQHandler+0x3e2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a20      	ldr	r2, [pc, #128]	; (8002b04 <HAL_DMA_IRQHandler+0x418>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d022      	beq.n	8002ace <HAL_DMA_IRQHandler+0x3e2>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1e      	ldr	r2, [pc, #120]	; (8002b08 <HAL_DMA_IRQHandler+0x41c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d01d      	beq.n	8002ace <HAL_DMA_IRQHandler+0x3e2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <HAL_DMA_IRQHandler+0x420>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d018      	beq.n	8002ace <HAL_DMA_IRQHandler+0x3e2>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1b      	ldr	r2, [pc, #108]	; (8002b10 <HAL_DMA_IRQHandler+0x424>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d013      	beq.n	8002ace <HAL_DMA_IRQHandler+0x3e2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1a      	ldr	r2, [pc, #104]	; (8002b14 <HAL_DMA_IRQHandler+0x428>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d00e      	beq.n	8002ace <HAL_DMA_IRQHandler+0x3e2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a18      	ldr	r2, [pc, #96]	; (8002b18 <HAL_DMA_IRQHandler+0x42c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d009      	beq.n	8002ace <HAL_DMA_IRQHandler+0x3e2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a17      	ldr	r2, [pc, #92]	; (8002b1c <HAL_DMA_IRQHandler+0x430>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d004      	beq.n	8002ace <HAL_DMA_IRQHandler+0x3e2>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a15      	ldr	r2, [pc, #84]	; (8002b20 <HAL_DMA_IRQHandler+0x434>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d12a      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x438>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e023      	b.n	8002b2c <HAL_DMA_IRQHandler+0x440>
 8002ae4:	40020010 	.word	0x40020010
 8002ae8:	40020028 	.word	0x40020028
 8002aec:	40020040 	.word	0x40020040
 8002af0:	40020058 	.word	0x40020058
 8002af4:	40020070 	.word	0x40020070
 8002af8:	40020088 	.word	0x40020088
 8002afc:	400200a0 	.word	0x400200a0
 8002b00:	400200b8 	.word	0x400200b8
 8002b04:	40020410 	.word	0x40020410
 8002b08:	40020428 	.word	0x40020428
 8002b0c:	40020440 	.word	0x40020440
 8002b10:	40020458 	.word	0x40020458
 8002b14:	40020470 	.word	0x40020470
 8002b18:	40020488 	.word	0x40020488
 8002b1c:	400204a0 	.word	0x400204a0
 8002b20:	400204b8 	.word	0x400204b8
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00d      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	2204      	movs	r2, #4
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	f043 0204 	orr.w	r2, r3, #4
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	2210      	movs	r2, #16
 8002b56:	409a      	lsls	r2, r3
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80a6 	beq.w	8002cae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a85      	ldr	r2, [pc, #532]	; (8002d7c <HAL_DMA_IRQHandler+0x690>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d04a      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x516>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a83      	ldr	r2, [pc, #524]	; (8002d80 <HAL_DMA_IRQHandler+0x694>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d045      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x516>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a82      	ldr	r2, [pc, #520]	; (8002d84 <HAL_DMA_IRQHandler+0x698>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d040      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x516>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a80      	ldr	r2, [pc, #512]	; (8002d88 <HAL_DMA_IRQHandler+0x69c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d03b      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x516>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a7f      	ldr	r2, [pc, #508]	; (8002d8c <HAL_DMA_IRQHandler+0x6a0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d036      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x516>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a7d      	ldr	r2, [pc, #500]	; (8002d90 <HAL_DMA_IRQHandler+0x6a4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d031      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x516>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a7c      	ldr	r2, [pc, #496]	; (8002d94 <HAL_DMA_IRQHandler+0x6a8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d02c      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x516>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a7a      	ldr	r2, [pc, #488]	; (8002d98 <HAL_DMA_IRQHandler+0x6ac>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d027      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x516>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a79      	ldr	r2, [pc, #484]	; (8002d9c <HAL_DMA_IRQHandler+0x6b0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d022      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x516>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a77      	ldr	r2, [pc, #476]	; (8002da0 <HAL_DMA_IRQHandler+0x6b4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01d      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x516>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a76      	ldr	r2, [pc, #472]	; (8002da4 <HAL_DMA_IRQHandler+0x6b8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d018      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x516>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a74      	ldr	r2, [pc, #464]	; (8002da8 <HAL_DMA_IRQHandler+0x6bc>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x516>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a73      	ldr	r2, [pc, #460]	; (8002dac <HAL_DMA_IRQHandler+0x6c0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00e      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x516>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a71      	ldr	r2, [pc, #452]	; (8002db0 <HAL_DMA_IRQHandler+0x6c4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d009      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x516>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a70      	ldr	r2, [pc, #448]	; (8002db4 <HAL_DMA_IRQHandler+0x6c8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d004      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x516>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a6e      	ldr	r2, [pc, #440]	; (8002db8 <HAL_DMA_IRQHandler+0x6cc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10a      	bne.n	8002c18 <HAL_DMA_IRQHandler+0x52c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	bf14      	ite	ne
 8002c10:	2301      	movne	r3, #1
 8002c12:	2300      	moveq	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e009      	b.n	8002c2c <HAL_DMA_IRQHandler+0x540>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d03e      	beq.n	8002cae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	2210      	movs	r2, #16
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d018      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d108      	bne.n	8002c6e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d024      	beq.n	8002cae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
 8002c6c:	e01f      	b.n	8002cae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d01b      	beq.n	8002cae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
 8002c7e:	e016      	b.n	8002cae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d107      	bne.n	8002c9e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0208 	bic.w	r2, r2, #8
 8002c9c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb2:	f003 031f 	and.w	r3, r3, #31
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8110 	beq.w	8002ee4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a2c      	ldr	r2, [pc, #176]	; (8002d7c <HAL_DMA_IRQHandler+0x690>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d04a      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x678>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a2b      	ldr	r2, [pc, #172]	; (8002d80 <HAL_DMA_IRQHandler+0x694>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d045      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x678>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <HAL_DMA_IRQHandler+0x698>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d040      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x678>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a28      	ldr	r2, [pc, #160]	; (8002d88 <HAL_DMA_IRQHandler+0x69c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d03b      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x678>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a26      	ldr	r2, [pc, #152]	; (8002d8c <HAL_DMA_IRQHandler+0x6a0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d036      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x678>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a25      	ldr	r2, [pc, #148]	; (8002d90 <HAL_DMA_IRQHandler+0x6a4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d031      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x678>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a23      	ldr	r2, [pc, #140]	; (8002d94 <HAL_DMA_IRQHandler+0x6a8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d02c      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x678>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a22      	ldr	r2, [pc, #136]	; (8002d98 <HAL_DMA_IRQHandler+0x6ac>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d027      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x678>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a20      	ldr	r2, [pc, #128]	; (8002d9c <HAL_DMA_IRQHandler+0x6b0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d022      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x678>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1f      	ldr	r2, [pc, #124]	; (8002da0 <HAL_DMA_IRQHandler+0x6b4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d01d      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x678>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <HAL_DMA_IRQHandler+0x6b8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d018      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x678>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <HAL_DMA_IRQHandler+0x6bc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x678>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a1a      	ldr	r2, [pc, #104]	; (8002dac <HAL_DMA_IRQHandler+0x6c0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00e      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x678>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <HAL_DMA_IRQHandler+0x6c4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d009      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x678>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <HAL_DMA_IRQHandler+0x6c8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d004      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x678>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a16      	ldr	r2, [pc, #88]	; (8002db8 <HAL_DMA_IRQHandler+0x6cc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d12b      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x6d0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bf14      	ite	ne
 8002d72:	2301      	movne	r3, #1
 8002d74:	2300      	moveq	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	e02a      	b.n	8002dd0 <HAL_DMA_IRQHandler+0x6e4>
 8002d7a:	bf00      	nop
 8002d7c:	40020010 	.word	0x40020010
 8002d80:	40020028 	.word	0x40020028
 8002d84:	40020040 	.word	0x40020040
 8002d88:	40020058 	.word	0x40020058
 8002d8c:	40020070 	.word	0x40020070
 8002d90:	40020088 	.word	0x40020088
 8002d94:	400200a0 	.word	0x400200a0
 8002d98:	400200b8 	.word	0x400200b8
 8002d9c:	40020410 	.word	0x40020410
 8002da0:	40020428 	.word	0x40020428
 8002da4:	40020440 	.word	0x40020440
 8002da8:	40020458 	.word	0x40020458
 8002dac:	40020470 	.word	0x40020470
 8002db0:	40020488 	.word	0x40020488
 8002db4:	400204a0 	.word	0x400204a0
 8002db8:	400204b8 	.word	0x400204b8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	bf14      	ite	ne
 8002dca:	2301      	movne	r3, #1
 8002dcc:	2300      	moveq	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8087 	beq.w	8002ee4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	2220      	movs	r2, #32
 8002de0:	409a      	lsls	r2, r3
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d139      	bne.n	8002e66 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0216 	bic.w	r2, r2, #22
 8002e00:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e10:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <HAL_DMA_IRQHandler+0x736>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0208 	bic.w	r2, r2, #8
 8002e30:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	223f      	movs	r2, #63	; 0x3f
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 834a 	beq.w	80034f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
          }
          return;
 8002e64:	e344      	b.n	80034f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d018      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d108      	bne.n	8002e94 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d02c      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4798      	blx	r3
 8002e92:	e027      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d023      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
 8002ea4:	e01e      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10f      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0210 	bic.w	r2, r2, #16
 8002ec2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8306 	beq.w	80034fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 8088 	beq.w	800300c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2204      	movs	r2, #4
 8002f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a7a      	ldr	r2, [pc, #488]	; (80030f4 <HAL_DMA_IRQHandler+0xa08>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d04a      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x8b8>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a79      	ldr	r2, [pc, #484]	; (80030f8 <HAL_DMA_IRQHandler+0xa0c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d045      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x8b8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a77      	ldr	r2, [pc, #476]	; (80030fc <HAL_DMA_IRQHandler+0xa10>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d040      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x8b8>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a76      	ldr	r2, [pc, #472]	; (8003100 <HAL_DMA_IRQHandler+0xa14>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d03b      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x8b8>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a74      	ldr	r2, [pc, #464]	; (8003104 <HAL_DMA_IRQHandler+0xa18>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d036      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x8b8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a73      	ldr	r2, [pc, #460]	; (8003108 <HAL_DMA_IRQHandler+0xa1c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d031      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x8b8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a71      	ldr	r2, [pc, #452]	; (800310c <HAL_DMA_IRQHandler+0xa20>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d02c      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x8b8>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a70      	ldr	r2, [pc, #448]	; (8003110 <HAL_DMA_IRQHandler+0xa24>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d027      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x8b8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a6e      	ldr	r2, [pc, #440]	; (8003114 <HAL_DMA_IRQHandler+0xa28>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d022      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x8b8>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a6d      	ldr	r2, [pc, #436]	; (8003118 <HAL_DMA_IRQHandler+0xa2c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d01d      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x8b8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a6b      	ldr	r2, [pc, #428]	; (800311c <HAL_DMA_IRQHandler+0xa30>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d018      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x8b8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a6a      	ldr	r2, [pc, #424]	; (8003120 <HAL_DMA_IRQHandler+0xa34>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d013      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x8b8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a68      	ldr	r2, [pc, #416]	; (8003124 <HAL_DMA_IRQHandler+0xa38>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00e      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x8b8>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a67      	ldr	r2, [pc, #412]	; (8003128 <HAL_DMA_IRQHandler+0xa3c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d009      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x8b8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a65      	ldr	r2, [pc, #404]	; (800312c <HAL_DMA_IRQHandler+0xa40>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x8b8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a64      	ldr	r2, [pc, #400]	; (8003130 <HAL_DMA_IRQHandler+0xa44>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d108      	bne.n	8002fb6 <HAL_DMA_IRQHandler+0x8ca>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	e007      	b.n	8002fc6 <HAL_DMA_IRQHandler+0x8da>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0201 	bic.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d307      	bcc.n	8002fe2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f2      	bne.n	8002fc6 <HAL_DMA_IRQHandler+0x8da>
 8002fe0:	e000      	b.n	8002fe4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002fe2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d004      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002ffa:	e003      	b.n	8003004 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 8272 	beq.w	80034fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
 800301e:	e26c      	b.n	80034fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a43      	ldr	r2, [pc, #268]	; (8003134 <HAL_DMA_IRQHandler+0xa48>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d022      	beq.n	8003070 <HAL_DMA_IRQHandler+0x984>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a42      	ldr	r2, [pc, #264]	; (8003138 <HAL_DMA_IRQHandler+0xa4c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d01d      	beq.n	8003070 <HAL_DMA_IRQHandler+0x984>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a40      	ldr	r2, [pc, #256]	; (800313c <HAL_DMA_IRQHandler+0xa50>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d018      	beq.n	8003070 <HAL_DMA_IRQHandler+0x984>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a3f      	ldr	r2, [pc, #252]	; (8003140 <HAL_DMA_IRQHandler+0xa54>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <HAL_DMA_IRQHandler+0x984>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a3d      	ldr	r2, [pc, #244]	; (8003144 <HAL_DMA_IRQHandler+0xa58>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00e      	beq.n	8003070 <HAL_DMA_IRQHandler+0x984>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a3c      	ldr	r2, [pc, #240]	; (8003148 <HAL_DMA_IRQHandler+0xa5c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d009      	beq.n	8003070 <HAL_DMA_IRQHandler+0x984>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a3a      	ldr	r2, [pc, #232]	; (800314c <HAL_DMA_IRQHandler+0xa60>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_DMA_IRQHandler+0x984>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a39      	ldr	r2, [pc, #228]	; (8003150 <HAL_DMA_IRQHandler+0xa64>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d101      	bne.n	8003074 <HAL_DMA_IRQHandler+0x988>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_DMA_IRQHandler+0x98a>
 8003074:	2300      	movs	r3, #0
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 823f 	beq.w	80034fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	2204      	movs	r2, #4
 800308e:	409a      	lsls	r2, r3
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80cd 	beq.w	8003234 <HAL_DMA_IRQHandler+0xb48>
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80c7 	beq.w	8003234 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	2204      	movs	r2, #4
 80030b0:	409a      	lsls	r2, r3
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d049      	beq.n	8003154 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8210 	beq.w	80034f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030dc:	e20a      	b.n	80034f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 8206 	beq.w	80034f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030f0:	e200      	b.n	80034f4 <HAL_DMA_IRQHandler+0xe08>
 80030f2:	bf00      	nop
 80030f4:	40020010 	.word	0x40020010
 80030f8:	40020028 	.word	0x40020028
 80030fc:	40020040 	.word	0x40020040
 8003100:	40020058 	.word	0x40020058
 8003104:	40020070 	.word	0x40020070
 8003108:	40020088 	.word	0x40020088
 800310c:	400200a0 	.word	0x400200a0
 8003110:	400200b8 	.word	0x400200b8
 8003114:	40020410 	.word	0x40020410
 8003118:	40020428 	.word	0x40020428
 800311c:	40020440 	.word	0x40020440
 8003120:	40020458 	.word	0x40020458
 8003124:	40020470 	.word	0x40020470
 8003128:	40020488 	.word	0x40020488
 800312c:	400204a0 	.word	0x400204a0
 8003130:	400204b8 	.word	0x400204b8
 8003134:	58025408 	.word	0x58025408
 8003138:	5802541c 	.word	0x5802541c
 800313c:	58025430 	.word	0x58025430
 8003140:	58025444 	.word	0x58025444
 8003144:	58025458 	.word	0x58025458
 8003148:	5802546c 	.word	0x5802546c
 800314c:	58025480 	.word	0x58025480
 8003150:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d160      	bne.n	8003220 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a7f      	ldr	r2, [pc, #508]	; (8003360 <HAL_DMA_IRQHandler+0xc74>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d04a      	beq.n	80031fe <HAL_DMA_IRQHandler+0xb12>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a7d      	ldr	r2, [pc, #500]	; (8003364 <HAL_DMA_IRQHandler+0xc78>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d045      	beq.n	80031fe <HAL_DMA_IRQHandler+0xb12>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7c      	ldr	r2, [pc, #496]	; (8003368 <HAL_DMA_IRQHandler+0xc7c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d040      	beq.n	80031fe <HAL_DMA_IRQHandler+0xb12>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a7a      	ldr	r2, [pc, #488]	; (800336c <HAL_DMA_IRQHandler+0xc80>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d03b      	beq.n	80031fe <HAL_DMA_IRQHandler+0xb12>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a79      	ldr	r2, [pc, #484]	; (8003370 <HAL_DMA_IRQHandler+0xc84>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d036      	beq.n	80031fe <HAL_DMA_IRQHandler+0xb12>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a77      	ldr	r2, [pc, #476]	; (8003374 <HAL_DMA_IRQHandler+0xc88>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d031      	beq.n	80031fe <HAL_DMA_IRQHandler+0xb12>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a76      	ldr	r2, [pc, #472]	; (8003378 <HAL_DMA_IRQHandler+0xc8c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d02c      	beq.n	80031fe <HAL_DMA_IRQHandler+0xb12>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a74      	ldr	r2, [pc, #464]	; (800337c <HAL_DMA_IRQHandler+0xc90>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d027      	beq.n	80031fe <HAL_DMA_IRQHandler+0xb12>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a73      	ldr	r2, [pc, #460]	; (8003380 <HAL_DMA_IRQHandler+0xc94>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d022      	beq.n	80031fe <HAL_DMA_IRQHandler+0xb12>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a71      	ldr	r2, [pc, #452]	; (8003384 <HAL_DMA_IRQHandler+0xc98>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01d      	beq.n	80031fe <HAL_DMA_IRQHandler+0xb12>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a70      	ldr	r2, [pc, #448]	; (8003388 <HAL_DMA_IRQHandler+0xc9c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d018      	beq.n	80031fe <HAL_DMA_IRQHandler+0xb12>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a6e      	ldr	r2, [pc, #440]	; (800338c <HAL_DMA_IRQHandler+0xca0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_DMA_IRQHandler+0xb12>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a6d      	ldr	r2, [pc, #436]	; (8003390 <HAL_DMA_IRQHandler+0xca4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00e      	beq.n	80031fe <HAL_DMA_IRQHandler+0xb12>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a6b      	ldr	r2, [pc, #428]	; (8003394 <HAL_DMA_IRQHandler+0xca8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d009      	beq.n	80031fe <HAL_DMA_IRQHandler+0xb12>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a6a      	ldr	r2, [pc, #424]	; (8003398 <HAL_DMA_IRQHandler+0xcac>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d004      	beq.n	80031fe <HAL_DMA_IRQHandler+0xb12>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a68      	ldr	r2, [pc, #416]	; (800339c <HAL_DMA_IRQHandler+0xcb0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d108      	bne.n	8003210 <HAL_DMA_IRQHandler+0xb24>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0208 	bic.w	r2, r2, #8
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e007      	b.n	8003220 <HAL_DMA_IRQHandler+0xb34>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0204 	bic.w	r2, r2, #4
 800321e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 8165 	beq.w	80034f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003232:	e15f      	b.n	80034f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	2202      	movs	r2, #2
 800323e:	409a      	lsls	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80c5 	beq.w	80033d4 <HAL_DMA_IRQHandler+0xce8>
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80bf 	beq.w	80033d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	2202      	movs	r2, #2
 8003260:	409a      	lsls	r2, r3
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d018      	beq.n	80032a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 813a 	beq.w	80034f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800328c:	e134      	b.n	80034f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8130 	beq.w	80034f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032a0:	e12a      	b.n	80034f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f040 8089 	bne.w	80033c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2b      	ldr	r2, [pc, #172]	; (8003360 <HAL_DMA_IRQHandler+0xc74>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d04a      	beq.n	800334e <HAL_DMA_IRQHandler+0xc62>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a29      	ldr	r2, [pc, #164]	; (8003364 <HAL_DMA_IRQHandler+0xc78>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d045      	beq.n	800334e <HAL_DMA_IRQHandler+0xc62>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a28      	ldr	r2, [pc, #160]	; (8003368 <HAL_DMA_IRQHandler+0xc7c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d040      	beq.n	800334e <HAL_DMA_IRQHandler+0xc62>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a26      	ldr	r2, [pc, #152]	; (800336c <HAL_DMA_IRQHandler+0xc80>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d03b      	beq.n	800334e <HAL_DMA_IRQHandler+0xc62>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a25      	ldr	r2, [pc, #148]	; (8003370 <HAL_DMA_IRQHandler+0xc84>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d036      	beq.n	800334e <HAL_DMA_IRQHandler+0xc62>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a23      	ldr	r2, [pc, #140]	; (8003374 <HAL_DMA_IRQHandler+0xc88>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d031      	beq.n	800334e <HAL_DMA_IRQHandler+0xc62>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a22      	ldr	r2, [pc, #136]	; (8003378 <HAL_DMA_IRQHandler+0xc8c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d02c      	beq.n	800334e <HAL_DMA_IRQHandler+0xc62>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a20      	ldr	r2, [pc, #128]	; (800337c <HAL_DMA_IRQHandler+0xc90>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d027      	beq.n	800334e <HAL_DMA_IRQHandler+0xc62>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1f      	ldr	r2, [pc, #124]	; (8003380 <HAL_DMA_IRQHandler+0xc94>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d022      	beq.n	800334e <HAL_DMA_IRQHandler+0xc62>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1d      	ldr	r2, [pc, #116]	; (8003384 <HAL_DMA_IRQHandler+0xc98>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01d      	beq.n	800334e <HAL_DMA_IRQHandler+0xc62>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1c      	ldr	r2, [pc, #112]	; (8003388 <HAL_DMA_IRQHandler+0xc9c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d018      	beq.n	800334e <HAL_DMA_IRQHandler+0xc62>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1a      	ldr	r2, [pc, #104]	; (800338c <HAL_DMA_IRQHandler+0xca0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <HAL_DMA_IRQHandler+0xc62>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a19      	ldr	r2, [pc, #100]	; (8003390 <HAL_DMA_IRQHandler+0xca4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00e      	beq.n	800334e <HAL_DMA_IRQHandler+0xc62>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a17      	ldr	r2, [pc, #92]	; (8003394 <HAL_DMA_IRQHandler+0xca8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d009      	beq.n	800334e <HAL_DMA_IRQHandler+0xc62>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a16      	ldr	r2, [pc, #88]	; (8003398 <HAL_DMA_IRQHandler+0xcac>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_DMA_IRQHandler+0xc62>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a14      	ldr	r2, [pc, #80]	; (800339c <HAL_DMA_IRQHandler+0xcb0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d128      	bne.n	80033a0 <HAL_DMA_IRQHandler+0xcb4>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0214 	bic.w	r2, r2, #20
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e027      	b.n	80033b0 <HAL_DMA_IRQHandler+0xcc4>
 8003360:	40020010 	.word	0x40020010
 8003364:	40020028 	.word	0x40020028
 8003368:	40020040 	.word	0x40020040
 800336c:	40020058 	.word	0x40020058
 8003370:	40020070 	.word	0x40020070
 8003374:	40020088 	.word	0x40020088
 8003378:	400200a0 	.word	0x400200a0
 800337c:	400200b8 	.word	0x400200b8
 8003380:	40020410 	.word	0x40020410
 8003384:	40020428 	.word	0x40020428
 8003388:	40020440 	.word	0x40020440
 800338c:	40020458 	.word	0x40020458
 8003390:	40020470 	.word	0x40020470
 8003394:	40020488 	.word	0x40020488
 8003398:	400204a0 	.word	0x400204a0
 800339c:	400204b8 	.word	0x400204b8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 020a 	bic.w	r2, r2, #10
 80033ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8097 	beq.w	80034f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033d2:	e091      	b.n	80034f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	2208      	movs	r2, #8
 80033de:	409a      	lsls	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8088 	beq.w	80034fa <HAL_DMA_IRQHandler+0xe0e>
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8082 	beq.w	80034fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a41      	ldr	r2, [pc, #260]	; (8003500 <HAL_DMA_IRQHandler+0xe14>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d04a      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdaa>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a3f      	ldr	r2, [pc, #252]	; (8003504 <HAL_DMA_IRQHandler+0xe18>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d045      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdaa>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a3e      	ldr	r2, [pc, #248]	; (8003508 <HAL_DMA_IRQHandler+0xe1c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d040      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdaa>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a3c      	ldr	r2, [pc, #240]	; (800350c <HAL_DMA_IRQHandler+0xe20>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d03b      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdaa>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a3b      	ldr	r2, [pc, #236]	; (8003510 <HAL_DMA_IRQHandler+0xe24>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d036      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdaa>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a39      	ldr	r2, [pc, #228]	; (8003514 <HAL_DMA_IRQHandler+0xe28>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d031      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdaa>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a38      	ldr	r2, [pc, #224]	; (8003518 <HAL_DMA_IRQHandler+0xe2c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d02c      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdaa>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a36      	ldr	r2, [pc, #216]	; (800351c <HAL_DMA_IRQHandler+0xe30>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d027      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdaa>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a35      	ldr	r2, [pc, #212]	; (8003520 <HAL_DMA_IRQHandler+0xe34>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d022      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdaa>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a33      	ldr	r2, [pc, #204]	; (8003524 <HAL_DMA_IRQHandler+0xe38>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01d      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdaa>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a32      	ldr	r2, [pc, #200]	; (8003528 <HAL_DMA_IRQHandler+0xe3c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d018      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdaa>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a30      	ldr	r2, [pc, #192]	; (800352c <HAL_DMA_IRQHandler+0xe40>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdaa>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a2f      	ldr	r2, [pc, #188]	; (8003530 <HAL_DMA_IRQHandler+0xe44>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00e      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdaa>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a2d      	ldr	r2, [pc, #180]	; (8003534 <HAL_DMA_IRQHandler+0xe48>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d009      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdaa>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <HAL_DMA_IRQHandler+0xe4c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d004      	beq.n	8003496 <HAL_DMA_IRQHandler+0xdaa>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a2a      	ldr	r2, [pc, #168]	; (800353c <HAL_DMA_IRQHandler+0xe50>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d108      	bne.n	80034a8 <HAL_DMA_IRQHandler+0xdbc>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 021c 	bic.w	r2, r2, #28
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	e007      	b.n	80034b8 <HAL_DMA_IRQHandler+0xdcc>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 020e 	bic.w	r2, r2, #14
 80034b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2201      	movs	r2, #1
 80034c2:	409a      	lsls	r2, r3
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
 80034ee:	e004      	b.n	80034fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80034f0:	bf00      	nop
 80034f2:	e002      	b.n	80034fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034f4:	bf00      	nop
 80034f6:	e000      	b.n	80034fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80034fa:	3728      	adds	r7, #40	; 0x28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40020010 	.word	0x40020010
 8003504:	40020028 	.word	0x40020028
 8003508:	40020040 	.word	0x40020040
 800350c:	40020058 	.word	0x40020058
 8003510:	40020070 	.word	0x40020070
 8003514:	40020088 	.word	0x40020088
 8003518:	400200a0 	.word	0x400200a0
 800351c:	400200b8 	.word	0x400200b8
 8003520:	40020410 	.word	0x40020410
 8003524:	40020428 	.word	0x40020428
 8003528:	40020440 	.word	0x40020440
 800352c:	40020458 	.word	0x40020458
 8003530:	40020470 	.word	0x40020470
 8003534:	40020488 	.word	0x40020488
 8003538:	400204a0 	.word	0x400204a0
 800353c:	400204b8 	.word	0x400204b8

08003540 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a7f      	ldr	r2, [pc, #508]	; (8003774 <DMA_SetConfig+0x21c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d072      	beq.n	8003662 <DMA_SetConfig+0x10a>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a7d      	ldr	r2, [pc, #500]	; (8003778 <DMA_SetConfig+0x220>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d06d      	beq.n	8003662 <DMA_SetConfig+0x10a>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a7c      	ldr	r2, [pc, #496]	; (800377c <DMA_SetConfig+0x224>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d068      	beq.n	8003662 <DMA_SetConfig+0x10a>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a7a      	ldr	r2, [pc, #488]	; (8003780 <DMA_SetConfig+0x228>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d063      	beq.n	8003662 <DMA_SetConfig+0x10a>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a79      	ldr	r2, [pc, #484]	; (8003784 <DMA_SetConfig+0x22c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d05e      	beq.n	8003662 <DMA_SetConfig+0x10a>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a77      	ldr	r2, [pc, #476]	; (8003788 <DMA_SetConfig+0x230>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d059      	beq.n	8003662 <DMA_SetConfig+0x10a>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a76      	ldr	r2, [pc, #472]	; (800378c <DMA_SetConfig+0x234>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d054      	beq.n	8003662 <DMA_SetConfig+0x10a>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a74      	ldr	r2, [pc, #464]	; (8003790 <DMA_SetConfig+0x238>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d04f      	beq.n	8003662 <DMA_SetConfig+0x10a>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a73      	ldr	r2, [pc, #460]	; (8003794 <DMA_SetConfig+0x23c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d04a      	beq.n	8003662 <DMA_SetConfig+0x10a>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a71      	ldr	r2, [pc, #452]	; (8003798 <DMA_SetConfig+0x240>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d045      	beq.n	8003662 <DMA_SetConfig+0x10a>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a70      	ldr	r2, [pc, #448]	; (800379c <DMA_SetConfig+0x244>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d040      	beq.n	8003662 <DMA_SetConfig+0x10a>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a6e      	ldr	r2, [pc, #440]	; (80037a0 <DMA_SetConfig+0x248>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d03b      	beq.n	8003662 <DMA_SetConfig+0x10a>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a6d      	ldr	r2, [pc, #436]	; (80037a4 <DMA_SetConfig+0x24c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d036      	beq.n	8003662 <DMA_SetConfig+0x10a>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a6b      	ldr	r2, [pc, #428]	; (80037a8 <DMA_SetConfig+0x250>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d031      	beq.n	8003662 <DMA_SetConfig+0x10a>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6a      	ldr	r2, [pc, #424]	; (80037ac <DMA_SetConfig+0x254>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d02c      	beq.n	8003662 <DMA_SetConfig+0x10a>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a68      	ldr	r2, [pc, #416]	; (80037b0 <DMA_SetConfig+0x258>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d027      	beq.n	8003662 <DMA_SetConfig+0x10a>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a67      	ldr	r2, [pc, #412]	; (80037b4 <DMA_SetConfig+0x25c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d022      	beq.n	8003662 <DMA_SetConfig+0x10a>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a65      	ldr	r2, [pc, #404]	; (80037b8 <DMA_SetConfig+0x260>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d01d      	beq.n	8003662 <DMA_SetConfig+0x10a>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a64      	ldr	r2, [pc, #400]	; (80037bc <DMA_SetConfig+0x264>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d018      	beq.n	8003662 <DMA_SetConfig+0x10a>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a62      	ldr	r2, [pc, #392]	; (80037c0 <DMA_SetConfig+0x268>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d013      	beq.n	8003662 <DMA_SetConfig+0x10a>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a61      	ldr	r2, [pc, #388]	; (80037c4 <DMA_SetConfig+0x26c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00e      	beq.n	8003662 <DMA_SetConfig+0x10a>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a5f      	ldr	r2, [pc, #380]	; (80037c8 <DMA_SetConfig+0x270>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d009      	beq.n	8003662 <DMA_SetConfig+0x10a>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a5e      	ldr	r2, [pc, #376]	; (80037cc <DMA_SetConfig+0x274>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d004      	beq.n	8003662 <DMA_SetConfig+0x10a>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a5c      	ldr	r2, [pc, #368]	; (80037d0 <DMA_SetConfig+0x278>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d101      	bne.n	8003666 <DMA_SetConfig+0x10e>
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <DMA_SetConfig+0x110>
 8003666:	2300      	movs	r3, #0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00d      	beq.n	8003688 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003674:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d004      	beq.n	8003688 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003686:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a39      	ldr	r2, [pc, #228]	; (8003774 <DMA_SetConfig+0x21c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d04a      	beq.n	8003728 <DMA_SetConfig+0x1d0>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a38      	ldr	r2, [pc, #224]	; (8003778 <DMA_SetConfig+0x220>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d045      	beq.n	8003728 <DMA_SetConfig+0x1d0>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a36      	ldr	r2, [pc, #216]	; (800377c <DMA_SetConfig+0x224>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d040      	beq.n	8003728 <DMA_SetConfig+0x1d0>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a35      	ldr	r2, [pc, #212]	; (8003780 <DMA_SetConfig+0x228>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d03b      	beq.n	8003728 <DMA_SetConfig+0x1d0>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a33      	ldr	r2, [pc, #204]	; (8003784 <DMA_SetConfig+0x22c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d036      	beq.n	8003728 <DMA_SetConfig+0x1d0>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a32      	ldr	r2, [pc, #200]	; (8003788 <DMA_SetConfig+0x230>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d031      	beq.n	8003728 <DMA_SetConfig+0x1d0>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a30      	ldr	r2, [pc, #192]	; (800378c <DMA_SetConfig+0x234>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d02c      	beq.n	8003728 <DMA_SetConfig+0x1d0>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a2f      	ldr	r2, [pc, #188]	; (8003790 <DMA_SetConfig+0x238>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d027      	beq.n	8003728 <DMA_SetConfig+0x1d0>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a2d      	ldr	r2, [pc, #180]	; (8003794 <DMA_SetConfig+0x23c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d022      	beq.n	8003728 <DMA_SetConfig+0x1d0>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a2c      	ldr	r2, [pc, #176]	; (8003798 <DMA_SetConfig+0x240>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d01d      	beq.n	8003728 <DMA_SetConfig+0x1d0>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a2a      	ldr	r2, [pc, #168]	; (800379c <DMA_SetConfig+0x244>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d018      	beq.n	8003728 <DMA_SetConfig+0x1d0>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a29      	ldr	r2, [pc, #164]	; (80037a0 <DMA_SetConfig+0x248>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d013      	beq.n	8003728 <DMA_SetConfig+0x1d0>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a27      	ldr	r2, [pc, #156]	; (80037a4 <DMA_SetConfig+0x24c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00e      	beq.n	8003728 <DMA_SetConfig+0x1d0>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a26      	ldr	r2, [pc, #152]	; (80037a8 <DMA_SetConfig+0x250>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d009      	beq.n	8003728 <DMA_SetConfig+0x1d0>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a24      	ldr	r2, [pc, #144]	; (80037ac <DMA_SetConfig+0x254>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <DMA_SetConfig+0x1d0>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a23      	ldr	r2, [pc, #140]	; (80037b0 <DMA_SetConfig+0x258>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d101      	bne.n	800372c <DMA_SetConfig+0x1d4>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <DMA_SetConfig+0x1d6>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d059      	beq.n	80037e6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	223f      	movs	r2, #63	; 0x3f
 800373c:	409a      	lsls	r2, r3
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003750:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d138      	bne.n	80037d4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003772:	e086      	b.n	8003882 <DMA_SetConfig+0x32a>
 8003774:	40020010 	.word	0x40020010
 8003778:	40020028 	.word	0x40020028
 800377c:	40020040 	.word	0x40020040
 8003780:	40020058 	.word	0x40020058
 8003784:	40020070 	.word	0x40020070
 8003788:	40020088 	.word	0x40020088
 800378c:	400200a0 	.word	0x400200a0
 8003790:	400200b8 	.word	0x400200b8
 8003794:	40020410 	.word	0x40020410
 8003798:	40020428 	.word	0x40020428
 800379c:	40020440 	.word	0x40020440
 80037a0:	40020458 	.word	0x40020458
 80037a4:	40020470 	.word	0x40020470
 80037a8:	40020488 	.word	0x40020488
 80037ac:	400204a0 	.word	0x400204a0
 80037b0:	400204b8 	.word	0x400204b8
 80037b4:	58025408 	.word	0x58025408
 80037b8:	5802541c 	.word	0x5802541c
 80037bc:	58025430 	.word	0x58025430
 80037c0:	58025444 	.word	0x58025444
 80037c4:	58025458 	.word	0x58025458
 80037c8:	5802546c 	.word	0x5802546c
 80037cc:	58025480 	.word	0x58025480
 80037d0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	60da      	str	r2, [r3, #12]
}
 80037e4:	e04d      	b.n	8003882 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a29      	ldr	r2, [pc, #164]	; (8003890 <DMA_SetConfig+0x338>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d022      	beq.n	8003836 <DMA_SetConfig+0x2de>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a27      	ldr	r2, [pc, #156]	; (8003894 <DMA_SetConfig+0x33c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d01d      	beq.n	8003836 <DMA_SetConfig+0x2de>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a26      	ldr	r2, [pc, #152]	; (8003898 <DMA_SetConfig+0x340>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d018      	beq.n	8003836 <DMA_SetConfig+0x2de>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a24      	ldr	r2, [pc, #144]	; (800389c <DMA_SetConfig+0x344>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <DMA_SetConfig+0x2de>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a23      	ldr	r2, [pc, #140]	; (80038a0 <DMA_SetConfig+0x348>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00e      	beq.n	8003836 <DMA_SetConfig+0x2de>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a21      	ldr	r2, [pc, #132]	; (80038a4 <DMA_SetConfig+0x34c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d009      	beq.n	8003836 <DMA_SetConfig+0x2de>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a20      	ldr	r2, [pc, #128]	; (80038a8 <DMA_SetConfig+0x350>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <DMA_SetConfig+0x2de>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1e      	ldr	r2, [pc, #120]	; (80038ac <DMA_SetConfig+0x354>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <DMA_SetConfig+0x2e2>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <DMA_SetConfig+0x2e4>
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	2201      	movs	r2, #1
 800384a:	409a      	lsls	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d108      	bne.n	8003872 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	60da      	str	r2, [r3, #12]
}
 8003870:	e007      	b.n	8003882 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	60da      	str	r2, [r3, #12]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	58025408 	.word	0x58025408
 8003894:	5802541c 	.word	0x5802541c
 8003898:	58025430 	.word	0x58025430
 800389c:	58025444 	.word	0x58025444
 80038a0:	58025458 	.word	0x58025458
 80038a4:	5802546c 	.word	0x5802546c
 80038a8:	58025480 	.word	0x58025480
 80038ac:	58025494 	.word	0x58025494

080038b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a42      	ldr	r2, [pc, #264]	; (80039c8 <DMA_CalcBaseAndBitshift+0x118>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d04a      	beq.n	8003958 <DMA_CalcBaseAndBitshift+0xa8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a41      	ldr	r2, [pc, #260]	; (80039cc <DMA_CalcBaseAndBitshift+0x11c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d045      	beq.n	8003958 <DMA_CalcBaseAndBitshift+0xa8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a3f      	ldr	r2, [pc, #252]	; (80039d0 <DMA_CalcBaseAndBitshift+0x120>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d040      	beq.n	8003958 <DMA_CalcBaseAndBitshift+0xa8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a3e      	ldr	r2, [pc, #248]	; (80039d4 <DMA_CalcBaseAndBitshift+0x124>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d03b      	beq.n	8003958 <DMA_CalcBaseAndBitshift+0xa8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a3c      	ldr	r2, [pc, #240]	; (80039d8 <DMA_CalcBaseAndBitshift+0x128>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d036      	beq.n	8003958 <DMA_CalcBaseAndBitshift+0xa8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a3b      	ldr	r2, [pc, #236]	; (80039dc <DMA_CalcBaseAndBitshift+0x12c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d031      	beq.n	8003958 <DMA_CalcBaseAndBitshift+0xa8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a39      	ldr	r2, [pc, #228]	; (80039e0 <DMA_CalcBaseAndBitshift+0x130>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d02c      	beq.n	8003958 <DMA_CalcBaseAndBitshift+0xa8>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a38      	ldr	r2, [pc, #224]	; (80039e4 <DMA_CalcBaseAndBitshift+0x134>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d027      	beq.n	8003958 <DMA_CalcBaseAndBitshift+0xa8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a36      	ldr	r2, [pc, #216]	; (80039e8 <DMA_CalcBaseAndBitshift+0x138>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d022      	beq.n	8003958 <DMA_CalcBaseAndBitshift+0xa8>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a35      	ldr	r2, [pc, #212]	; (80039ec <DMA_CalcBaseAndBitshift+0x13c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d01d      	beq.n	8003958 <DMA_CalcBaseAndBitshift+0xa8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a33      	ldr	r2, [pc, #204]	; (80039f0 <DMA_CalcBaseAndBitshift+0x140>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d018      	beq.n	8003958 <DMA_CalcBaseAndBitshift+0xa8>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a32      	ldr	r2, [pc, #200]	; (80039f4 <DMA_CalcBaseAndBitshift+0x144>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d013      	beq.n	8003958 <DMA_CalcBaseAndBitshift+0xa8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a30      	ldr	r2, [pc, #192]	; (80039f8 <DMA_CalcBaseAndBitshift+0x148>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00e      	beq.n	8003958 <DMA_CalcBaseAndBitshift+0xa8>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a2f      	ldr	r2, [pc, #188]	; (80039fc <DMA_CalcBaseAndBitshift+0x14c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d009      	beq.n	8003958 <DMA_CalcBaseAndBitshift+0xa8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a2d      	ldr	r2, [pc, #180]	; (8003a00 <DMA_CalcBaseAndBitshift+0x150>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <DMA_CalcBaseAndBitshift+0xa8>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a2c      	ldr	r2, [pc, #176]	; (8003a04 <DMA_CalcBaseAndBitshift+0x154>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d101      	bne.n	800395c <DMA_CalcBaseAndBitshift+0xac>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <DMA_CalcBaseAndBitshift+0xae>
 800395c:	2300      	movs	r3, #0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d024      	beq.n	80039ac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	3b10      	subs	r3, #16
 800396a:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <DMA_CalcBaseAndBitshift+0x158>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	4a24      	ldr	r2, [pc, #144]	; (8003a0c <DMA_CalcBaseAndBitshift+0x15c>)
 800397c:	5cd3      	ldrb	r3, [r2, r3]
 800397e:	461a      	mov	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b03      	cmp	r3, #3
 8003988:	d908      	bls.n	800399c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	4b1f      	ldr	r3, [pc, #124]	; (8003a10 <DMA_CalcBaseAndBitshift+0x160>)
 8003992:	4013      	ands	r3, r2
 8003994:	1d1a      	adds	r2, r3, #4
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	659a      	str	r2, [r3, #88]	; 0x58
 800399a:	e00d      	b.n	80039b8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <DMA_CalcBaseAndBitshift+0x160>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6593      	str	r3, [r2, #88]	; 0x58
 80039aa:	e005      	b.n	80039b8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	40020010 	.word	0x40020010
 80039cc:	40020028 	.word	0x40020028
 80039d0:	40020040 	.word	0x40020040
 80039d4:	40020058 	.word	0x40020058
 80039d8:	40020070 	.word	0x40020070
 80039dc:	40020088 	.word	0x40020088
 80039e0:	400200a0 	.word	0x400200a0
 80039e4:	400200b8 	.word	0x400200b8
 80039e8:	40020410 	.word	0x40020410
 80039ec:	40020428 	.word	0x40020428
 80039f0:	40020440 	.word	0x40020440
 80039f4:	40020458 	.word	0x40020458
 80039f8:	40020470 	.word	0x40020470
 80039fc:	40020488 	.word	0x40020488
 8003a00:	400204a0 	.word	0x400204a0
 8003a04:	400204b8 	.word	0x400204b8
 8003a08:	aaaaaaab 	.word	0xaaaaaaab
 8003a0c:	080091b8 	.word	0x080091b8
 8003a10:	fffffc00 	.word	0xfffffc00

08003a14 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d120      	bne.n	8003a6a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d858      	bhi.n	8003ae2 <DMA_CheckFifoParam+0xce>
 8003a30:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <DMA_CheckFifoParam+0x24>)
 8003a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a36:	bf00      	nop
 8003a38:	08003a49 	.word	0x08003a49
 8003a3c:	08003a5b 	.word	0x08003a5b
 8003a40:	08003a49 	.word	0x08003a49
 8003a44:	08003ae3 	.word	0x08003ae3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d048      	beq.n	8003ae6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a58:	e045      	b.n	8003ae6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a62:	d142      	bne.n	8003aea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a68:	e03f      	b.n	8003aea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a72:	d123      	bne.n	8003abc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d838      	bhi.n	8003aee <DMA_CheckFifoParam+0xda>
 8003a7c:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <DMA_CheckFifoParam+0x70>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003a95 	.word	0x08003a95
 8003a88:	08003a9b 	.word	0x08003a9b
 8003a8c:	08003a95 	.word	0x08003a95
 8003a90:	08003aad 	.word	0x08003aad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
        break;
 8003a98:	e030      	b.n	8003afc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d025      	beq.n	8003af2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003aaa:	e022      	b.n	8003af2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ab4:	d11f      	bne.n	8003af6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003aba:	e01c      	b.n	8003af6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d902      	bls.n	8003aca <DMA_CheckFifoParam+0xb6>
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d003      	beq.n	8003ad0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ac8:	e018      	b.n	8003afc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ace:	e015      	b.n	8003afc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00e      	beq.n	8003afa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
    break;
 8003ae0:	e00b      	b.n	8003afa <DMA_CheckFifoParam+0xe6>
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e00a      	b.n	8003afc <DMA_CheckFifoParam+0xe8>
        break;
 8003ae6:	bf00      	nop
 8003ae8:	e008      	b.n	8003afc <DMA_CheckFifoParam+0xe8>
        break;
 8003aea:	bf00      	nop
 8003aec:	e006      	b.n	8003afc <DMA_CheckFifoParam+0xe8>
        break;
 8003aee:	bf00      	nop
 8003af0:	e004      	b.n	8003afc <DMA_CheckFifoParam+0xe8>
        break;
 8003af2:	bf00      	nop
 8003af4:	e002      	b.n	8003afc <DMA_CheckFifoParam+0xe8>
        break;
 8003af6:	bf00      	nop
 8003af8:	e000      	b.n	8003afc <DMA_CheckFifoParam+0xe8>
    break;
 8003afa:	bf00      	nop
    }
  }

  return status;
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop

08003b0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a38      	ldr	r2, [pc, #224]	; (8003c00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d022      	beq.n	8003b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a36      	ldr	r2, [pc, #216]	; (8003c04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d01d      	beq.n	8003b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a35      	ldr	r2, [pc, #212]	; (8003c08 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d018      	beq.n	8003b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a33      	ldr	r2, [pc, #204]	; (8003c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a32      	ldr	r2, [pc, #200]	; (8003c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00e      	beq.n	8003b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a30      	ldr	r2, [pc, #192]	; (8003c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d009      	beq.n	8003b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a2f      	ldr	r2, [pc, #188]	; (8003c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d004      	beq.n	8003b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a2d      	ldr	r2, [pc, #180]	; (8003c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d101      	bne.n	8003b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01a      	beq.n	8003baa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	3b08      	subs	r3, #8
 8003b7c:	4a28      	ldr	r2, [pc, #160]	; (8003c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	461a      	mov	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a24      	ldr	r2, [pc, #144]	; (8003c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003b98:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003ba8:	e024      	b.n	8003bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	3b10      	subs	r3, #16
 8003bb2:	4a1e      	ldr	r2, [pc, #120]	; (8003c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4a1c      	ldr	r2, [pc, #112]	; (8003c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d806      	bhi.n	8003bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d902      	bls.n	8003bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3308      	adds	r3, #8
 8003bd0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	461a      	mov	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a16      	ldr	r2, [pc, #88]	; (8003c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003be4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	2201      	movs	r2, #1
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	58025408 	.word	0x58025408
 8003c04:	5802541c 	.word	0x5802541c
 8003c08:	58025430 	.word	0x58025430
 8003c0c:	58025444 	.word	0x58025444
 8003c10:	58025458 	.word	0x58025458
 8003c14:	5802546c 	.word	0x5802546c
 8003c18:	58025480 	.word	0x58025480
 8003c1c:	58025494 	.word	0x58025494
 8003c20:	cccccccd 	.word	0xcccccccd
 8003c24:	16009600 	.word	0x16009600
 8003c28:	58025880 	.word	0x58025880
 8003c2c:	aaaaaaab 	.word	0xaaaaaaab
 8003c30:	400204b8 	.word	0x400204b8
 8003c34:	4002040f 	.word	0x4002040f
 8003c38:	10008200 	.word	0x10008200
 8003c3c:	40020880 	.word	0x40020880

08003c40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d04a      	beq.n	8003cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d847      	bhi.n	8003cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a25      	ldr	r2, [pc, #148]	; (8003cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d022      	beq.n	8003cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d01d      	beq.n	8003cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a22      	ldr	r2, [pc, #136]	; (8003d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d018      	beq.n	8003cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a21      	ldr	r2, [pc, #132]	; (8003d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d013      	beq.n	8003cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00e      	beq.n	8003cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1e      	ldr	r2, [pc, #120]	; (8003d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d009      	beq.n	8003cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a1c      	ldr	r2, [pc, #112]	; (8003d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1b      	ldr	r2, [pc, #108]	; (8003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003cc8:	671a      	str	r2, [r3, #112]	; 0x70
 8003cca:	e009      	b.n	8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a11      	ldr	r2, [pc, #68]	; (8003d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003cde:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	58025408 	.word	0x58025408
 8003cfc:	5802541c 	.word	0x5802541c
 8003d00:	58025430 	.word	0x58025430
 8003d04:	58025444 	.word	0x58025444
 8003d08:	58025458 	.word	0x58025458
 8003d0c:	5802546c 	.word	0x5802546c
 8003d10:	58025480 	.word	0x58025480
 8003d14:	58025494 	.word	0x58025494
 8003d18:	1600963f 	.word	0x1600963f
 8003d1c:	58025940 	.word	0x58025940
 8003d20:	1000823f 	.word	0x1000823f
 8003d24:	40020940 	.word	0x40020940

08003d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b089      	sub	sp, #36	; 0x24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003d36:	4b86      	ldr	r3, [pc, #536]	; (8003f50 <HAL_GPIO_Init+0x228>)
 8003d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d3a:	e18c      	b.n	8004056 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	2101      	movs	r1, #1
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	fa01 f303 	lsl.w	r3, r1, r3
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 817e 	beq.w	8004050 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d005      	beq.n	8003d6c <HAL_GPIO_Init+0x44>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d130      	bne.n	8003dce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	2203      	movs	r2, #3
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003da2:	2201      	movs	r2, #1
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43db      	mvns	r3, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4013      	ands	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	f003 0201 	and.w	r2, r3, #1
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d017      	beq.n	8003e0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	2203      	movs	r2, #3
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d123      	bne.n	8003e5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	08da      	lsrs	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3208      	adds	r2, #8
 8003e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	220f      	movs	r2, #15
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	08da      	lsrs	r2, r3, #3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3208      	adds	r2, #8
 8003e58:	69b9      	ldr	r1, [r7, #24]
 8003e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	2203      	movs	r2, #3
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4013      	ands	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 0203 	and.w	r2, r3, #3
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 80d8 	beq.w	8004050 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ea0:	4b2c      	ldr	r3, [pc, #176]	; (8003f54 <HAL_GPIO_Init+0x22c>)
 8003ea2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ea6:	4a2b      	ldr	r2, [pc, #172]	; (8003f54 <HAL_GPIO_Init+0x22c>)
 8003ea8:	f043 0302 	orr.w	r3, r3, #2
 8003eac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003eb0:	4b28      	ldr	r3, [pc, #160]	; (8003f54 <HAL_GPIO_Init+0x22c>)
 8003eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ebe:	4a26      	ldr	r2, [pc, #152]	; (8003f58 <HAL_GPIO_Init+0x230>)
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	220f      	movs	r2, #15
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a1d      	ldr	r2, [pc, #116]	; (8003f5c <HAL_GPIO_Init+0x234>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d04a      	beq.n	8003f80 <HAL_GPIO_Init+0x258>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a1c      	ldr	r2, [pc, #112]	; (8003f60 <HAL_GPIO_Init+0x238>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d02b      	beq.n	8003f4a <HAL_GPIO_Init+0x222>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a1b      	ldr	r2, [pc, #108]	; (8003f64 <HAL_GPIO_Init+0x23c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d025      	beq.n	8003f46 <HAL_GPIO_Init+0x21e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a1a      	ldr	r2, [pc, #104]	; (8003f68 <HAL_GPIO_Init+0x240>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01f      	beq.n	8003f42 <HAL_GPIO_Init+0x21a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a19      	ldr	r2, [pc, #100]	; (8003f6c <HAL_GPIO_Init+0x244>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d019      	beq.n	8003f3e <HAL_GPIO_Init+0x216>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <HAL_GPIO_Init+0x248>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_GPIO_Init+0x212>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <HAL_GPIO_Init+0x24c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00d      	beq.n	8003f36 <HAL_GPIO_Init+0x20e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <HAL_GPIO_Init+0x250>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d007      	beq.n	8003f32 <HAL_GPIO_Init+0x20a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <HAL_GPIO_Init+0x254>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d101      	bne.n	8003f2e <HAL_GPIO_Init+0x206>
 8003f2a:	2309      	movs	r3, #9
 8003f2c:	e029      	b.n	8003f82 <HAL_GPIO_Init+0x25a>
 8003f2e:	230a      	movs	r3, #10
 8003f30:	e027      	b.n	8003f82 <HAL_GPIO_Init+0x25a>
 8003f32:	2307      	movs	r3, #7
 8003f34:	e025      	b.n	8003f82 <HAL_GPIO_Init+0x25a>
 8003f36:	2306      	movs	r3, #6
 8003f38:	e023      	b.n	8003f82 <HAL_GPIO_Init+0x25a>
 8003f3a:	2305      	movs	r3, #5
 8003f3c:	e021      	b.n	8003f82 <HAL_GPIO_Init+0x25a>
 8003f3e:	2304      	movs	r3, #4
 8003f40:	e01f      	b.n	8003f82 <HAL_GPIO_Init+0x25a>
 8003f42:	2303      	movs	r3, #3
 8003f44:	e01d      	b.n	8003f82 <HAL_GPIO_Init+0x25a>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e01b      	b.n	8003f82 <HAL_GPIO_Init+0x25a>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e019      	b.n	8003f82 <HAL_GPIO_Init+0x25a>
 8003f4e:	bf00      	nop
 8003f50:	58000080 	.word	0x58000080
 8003f54:	58024400 	.word	0x58024400
 8003f58:	58000400 	.word	0x58000400
 8003f5c:	58020000 	.word	0x58020000
 8003f60:	58020400 	.word	0x58020400
 8003f64:	58020800 	.word	0x58020800
 8003f68:	58020c00 	.word	0x58020c00
 8003f6c:	58021000 	.word	0x58021000
 8003f70:	58021400 	.word	0x58021400
 8003f74:	58021800 	.word	0x58021800
 8003f78:	58021c00 	.word	0x58021c00
 8003f7c:	58022400 	.word	0x58022400
 8003f80:	2300      	movs	r3, #0
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	f002 0203 	and.w	r2, r2, #3
 8003f88:	0092      	lsls	r2, r2, #2
 8003f8a:	4093      	lsls	r3, r2
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f92:	4938      	ldr	r1, [pc, #224]	; (8004074 <HAL_GPIO_Init+0x34c>)
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	089b      	lsrs	r3, r3, #2
 8003f98:	3302      	adds	r3, #2
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	43db      	mvns	r3, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	43db      	mvns	r3, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4013      	ands	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	3301      	adds	r3, #1
 8004054:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	f47f ae6b 	bne.w	8003d3c <HAL_GPIO_Init+0x14>
  }
}
 8004066:	bf00      	nop
 8004068:	bf00      	nop
 800406a:	3724      	adds	r7, #36	; 0x24
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	58000400 	.word	0x58000400

08004078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
 8004084:	4613      	mov	r3, r2
 8004086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004088:	787b      	ldrb	r3, [r7, #1]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800408e:	887a      	ldrh	r2, [r7, #2]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004094:	e003      	b.n	800409e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004096:	887b      	ldrh	r3, [r7, #2]
 8004098:	041a      	lsls	r2, r3, #16
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	619a      	str	r2, [r3, #24]
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_PWREx_ConfigSupply+0x70>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d00a      	beq.n	80040d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80040c0:	4b16      	ldr	r3, [pc, #88]	; (800411c <HAL_PWREx_ConfigSupply+0x70>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d001      	beq.n	80040d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e01f      	b.n	8004112 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e01d      	b.n	8004112 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80040d6:	4b11      	ldr	r3, [pc, #68]	; (800411c <HAL_PWREx_ConfigSupply+0x70>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f023 0207 	bic.w	r2, r3, #7
 80040de:	490f      	ldr	r1, [pc, #60]	; (800411c <HAL_PWREx_ConfigSupply+0x70>)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80040e6:	f7fd fbff 	bl	80018e8 <HAL_GetTick>
 80040ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040ec:	e009      	b.n	8004102 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040ee:	f7fd fbfb 	bl	80018e8 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040fc:	d901      	bls.n	8004102 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e007      	b.n	8004112 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_PWREx_ConfigSupply+0x70>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800410a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410e:	d1ee      	bne.n	80040ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	58024800 	.word	0x58024800

08004120 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08c      	sub	sp, #48	; 0x30
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e3c8      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 8087 	beq.w	800424e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004140:	4b88      	ldr	r3, [pc, #544]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800414a:	4b86      	ldr	r3, [pc, #536]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004152:	2b10      	cmp	r3, #16
 8004154:	d007      	beq.n	8004166 <HAL_RCC_OscConfig+0x46>
 8004156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004158:	2b18      	cmp	r3, #24
 800415a:	d110      	bne.n	800417e <HAL_RCC_OscConfig+0x5e>
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d10b      	bne.n	800417e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004166:	4b7f      	ldr	r3, [pc, #508]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d06c      	beq.n	800424c <HAL_RCC_OscConfig+0x12c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d168      	bne.n	800424c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e3a2      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004186:	d106      	bne.n	8004196 <HAL_RCC_OscConfig+0x76>
 8004188:	4b76      	ldr	r3, [pc, #472]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a75      	ldr	r2, [pc, #468]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 800418e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	e02e      	b.n	80041f4 <HAL_RCC_OscConfig+0xd4>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10c      	bne.n	80041b8 <HAL_RCC_OscConfig+0x98>
 800419e:	4b71      	ldr	r3, [pc, #452]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a70      	ldr	r2, [pc, #448]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80041a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	4b6e      	ldr	r3, [pc, #440]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a6d      	ldr	r2, [pc, #436]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80041b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	e01d      	b.n	80041f4 <HAL_RCC_OscConfig+0xd4>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c0:	d10c      	bne.n	80041dc <HAL_RCC_OscConfig+0xbc>
 80041c2:	4b68      	ldr	r3, [pc, #416]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a67      	ldr	r2, [pc, #412]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80041c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	4b65      	ldr	r3, [pc, #404]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a64      	ldr	r2, [pc, #400]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e00b      	b.n	80041f4 <HAL_RCC_OscConfig+0xd4>
 80041dc:	4b61      	ldr	r3, [pc, #388]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a60      	ldr	r2, [pc, #384]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80041e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	4b5e      	ldr	r3, [pc, #376]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a5d      	ldr	r2, [pc, #372]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80041ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d013      	beq.n	8004224 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fd fb74 	bl	80018e8 <HAL_GetTick>
 8004200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004204:	f7fd fb70 	bl	80018e8 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e356      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004216:	4b53      	ldr	r3, [pc, #332]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0xe4>
 8004222:	e014      	b.n	800424e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd fb60 	bl	80018e8 <HAL_GetTick>
 8004228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800422c:	f7fd fb5c 	bl	80018e8 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e342      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800423e:	4b49      	ldr	r3, [pc, #292]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x10c>
 800424a:	e000      	b.n	800424e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 808c 	beq.w	8004374 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800425c:	4b41      	ldr	r3, [pc, #260]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004264:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004266:	4b3f      	ldr	r3, [pc, #252]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <HAL_RCC_OscConfig+0x162>
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	2b18      	cmp	r3, #24
 8004276:	d137      	bne.n	80042e8 <HAL_RCC_OscConfig+0x1c8>
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d132      	bne.n	80042e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004282:	4b38      	ldr	r3, [pc, #224]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_RCC_OscConfig+0x17a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e314      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800429a:	4b32      	ldr	r3, [pc, #200]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 0219 	bic.w	r2, r3, #25
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	492f      	ldr	r1, [pc, #188]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fd fb1c 	bl	80018e8 <HAL_GetTick>
 80042b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b4:	f7fd fb18 	bl	80018e8 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e2fe      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042c6:	4b27      	ldr	r3, [pc, #156]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d2:	4b24      	ldr	r3, [pc, #144]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	061b      	lsls	r3, r3, #24
 80042e0:	4920      	ldr	r1, [pc, #128]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042e6:	e045      	b.n	8004374 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d026      	beq.n	800433e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042f0:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f023 0219 	bic.w	r2, r3, #25
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4919      	ldr	r1, [pc, #100]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004302:	f7fd faf1 	bl	80018e8 <HAL_GetTick>
 8004306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800430a:	f7fd faed 	bl	80018e8 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e2d3      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800431c:	4b11      	ldr	r3, [pc, #68]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004328:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	061b      	lsls	r3, r3, #24
 8004336:	490b      	ldr	r1, [pc, #44]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 8004338:	4313      	orrs	r3, r2
 800433a:	604b      	str	r3, [r1, #4]
 800433c:	e01a      	b.n	8004374 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a08      	ldr	r2, [pc, #32]	; (8004364 <HAL_RCC_OscConfig+0x244>)
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434a:	f7fd facd 	bl	80018e8 <HAL_GetTick>
 800434e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004350:	e00a      	b.n	8004368 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004352:	f7fd fac9 	bl	80018e8 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d903      	bls.n	8004368 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e2af      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
 8004364:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004368:	4b96      	ldr	r3, [pc, #600]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1ee      	bne.n	8004352 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	d06a      	beq.n	8004456 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004380:	4b90      	ldr	r3, [pc, #576]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004388:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800438a:	4b8e      	ldr	r3, [pc, #568]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 800438c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b08      	cmp	r3, #8
 8004394:	d007      	beq.n	80043a6 <HAL_RCC_OscConfig+0x286>
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b18      	cmp	r3, #24
 800439a:	d11b      	bne.n	80043d4 <HAL_RCC_OscConfig+0x2b4>
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d116      	bne.n	80043d4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043a6:	4b87      	ldr	r3, [pc, #540]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_RCC_OscConfig+0x29e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	2b80      	cmp	r3, #128	; 0x80
 80043b8:	d001      	beq.n	80043be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e282      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043be:	4b81      	ldr	r3, [pc, #516]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	061b      	lsls	r3, r3, #24
 80043cc:	497d      	ldr	r1, [pc, #500]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043d2:	e040      	b.n	8004456 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d023      	beq.n	8004424 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043dc:	4b79      	ldr	r3, [pc, #484]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a78      	ldr	r2, [pc, #480]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 80043e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fd fa7e 	bl	80018e8 <HAL_GetTick>
 80043ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80043f0:	f7fd fa7a 	bl	80018e8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e260      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004402:	4b70      	ldr	r3, [pc, #448]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800440e:	4b6d      	ldr	r3, [pc, #436]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	061b      	lsls	r3, r3, #24
 800441c:	4969      	ldr	r1, [pc, #420]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 800441e:	4313      	orrs	r3, r2
 8004420:	60cb      	str	r3, [r1, #12]
 8004422:	e018      	b.n	8004456 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004424:	4b67      	ldr	r3, [pc, #412]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a66      	ldr	r2, [pc, #408]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 800442a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800442e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fd fa5a 	bl	80018e8 <HAL_GetTick>
 8004434:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004438:	f7fd fa56 	bl	80018e8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e23c      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800444a:	4b5e      	ldr	r3, [pc, #376]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d036      	beq.n	80044d0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d019      	beq.n	800449e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800446a:	4b56      	ldr	r3, [pc, #344]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 800446c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446e:	4a55      	ldr	r2, [pc, #340]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004476:	f7fd fa37 	bl	80018e8 <HAL_GetTick>
 800447a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800447e:	f7fd fa33 	bl	80018e8 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e219      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004490:	4b4c      	ldr	r3, [pc, #304]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 8004492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x35e>
 800449c:	e018      	b.n	80044d0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800449e:	4b49      	ldr	r3, [pc, #292]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 80044a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a2:	4a48      	ldr	r2, [pc, #288]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 80044a4:	f023 0301 	bic.w	r3, r3, #1
 80044a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044aa:	f7fd fa1d 	bl	80018e8 <HAL_GetTick>
 80044ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b2:	f7fd fa19 	bl	80018e8 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e1ff      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044c4:	4b3f      	ldr	r3, [pc, #252]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 80044c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f0      	bne.n	80044b2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d036      	beq.n	800454a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d019      	beq.n	8004518 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044e4:	4b37      	ldr	r3, [pc, #220]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a36      	ldr	r2, [pc, #216]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 80044ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044f0:	f7fd f9fa 	bl	80018e8 <HAL_GetTick>
 80044f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044f8:	f7fd f9f6 	bl	80018e8 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e1dc      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800450a:	4b2e      	ldr	r3, [pc, #184]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCC_OscConfig+0x3d8>
 8004516:	e018      	b.n	800454a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004518:	4b2a      	ldr	r3, [pc, #168]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a29      	ldr	r2, [pc, #164]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 800451e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004522:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004524:	f7fd f9e0 	bl	80018e8 <HAL_GetTick>
 8004528:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800452c:	f7fd f9dc 	bl	80018e8 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e1c2      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800453e:	4b21      	ldr	r3, [pc, #132]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 8086 	beq.w	8004664 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <HAL_RCC_OscConfig+0x4a8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1a      	ldr	r2, [pc, #104]	; (80045c8 <HAL_RCC_OscConfig+0x4a8>)
 800455e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004562:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004564:	f7fd f9c0 	bl	80018e8 <HAL_GetTick>
 8004568:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456c:	f7fd f9bc 	bl	80018e8 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	; 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e1a2      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800457e:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <HAL_RCC_OscConfig+0x4a8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d106      	bne.n	80045a0 <HAL_RCC_OscConfig+0x480>
 8004592:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a0b      	ldr	r2, [pc, #44]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	6713      	str	r3, [r2, #112]	; 0x70
 800459e:	e032      	b.n	8004606 <HAL_RCC_OscConfig+0x4e6>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d111      	bne.n	80045cc <HAL_RCC_OscConfig+0x4ac>
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 80045aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ac:	4a05      	ldr	r2, [pc, #20]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	6713      	str	r3, [r2, #112]	; 0x70
 80045b4:	4b03      	ldr	r3, [pc, #12]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 80045b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b8:	4a02      	ldr	r2, [pc, #8]	; (80045c4 <HAL_RCC_OscConfig+0x4a4>)
 80045ba:	f023 0304 	bic.w	r3, r3, #4
 80045be:	6713      	str	r3, [r2, #112]	; 0x70
 80045c0:	e021      	b.n	8004606 <HAL_RCC_OscConfig+0x4e6>
 80045c2:	bf00      	nop
 80045c4:	58024400 	.word	0x58024400
 80045c8:	58024800 	.word	0x58024800
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b05      	cmp	r3, #5
 80045d2:	d10c      	bne.n	80045ee <HAL_RCC_OscConfig+0x4ce>
 80045d4:	4b83      	ldr	r3, [pc, #524]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	4a82      	ldr	r2, [pc, #520]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 80045da:	f043 0304 	orr.w	r3, r3, #4
 80045de:	6713      	str	r3, [r2, #112]	; 0x70
 80045e0:	4b80      	ldr	r3, [pc, #512]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	4a7f      	ldr	r2, [pc, #508]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	6713      	str	r3, [r2, #112]	; 0x70
 80045ec:	e00b      	b.n	8004606 <HAL_RCC_OscConfig+0x4e6>
 80045ee:	4b7d      	ldr	r3, [pc, #500]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	4a7c      	ldr	r2, [pc, #496]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 80045f4:	f023 0301 	bic.w	r3, r3, #1
 80045f8:	6713      	str	r3, [r2, #112]	; 0x70
 80045fa:	4b7a      	ldr	r3, [pc, #488]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	4a79      	ldr	r2, [pc, #484]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 8004600:	f023 0304 	bic.w	r3, r3, #4
 8004604:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d015      	beq.n	800463a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460e:	f7fd f96b 	bl	80018e8 <HAL_GetTick>
 8004612:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004614:	e00a      	b.n	800462c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fd f967 	bl	80018e8 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	; 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e14b      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800462c:	4b6d      	ldr	r3, [pc, #436]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0ee      	beq.n	8004616 <HAL_RCC_OscConfig+0x4f6>
 8004638:	e014      	b.n	8004664 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463a:	f7fd f955 	bl	80018e8 <HAL_GetTick>
 800463e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004640:	e00a      	b.n	8004658 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7fd f951 	bl	80018e8 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e135      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004658:	4b62      	ldr	r3, [pc, #392]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1ee      	bne.n	8004642 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 812a 	beq.w	80048c2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800466e:	4b5d      	ldr	r3, [pc, #372]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004676:	2b18      	cmp	r3, #24
 8004678:	f000 80ba 	beq.w	80047f0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	2b02      	cmp	r3, #2
 8004682:	f040 8095 	bne.w	80047b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004686:	4b57      	ldr	r3, [pc, #348]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a56      	ldr	r2, [pc, #344]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 800468c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004692:	f7fd f929 	bl	80018e8 <HAL_GetTick>
 8004696:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469a:	f7fd f925 	bl	80018e8 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e10b      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046ac:	4b4d      	ldr	r3, [pc, #308]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f0      	bne.n	800469a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046b8:	4b4a      	ldr	r3, [pc, #296]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 80046ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046bc:	4b4a      	ldr	r3, [pc, #296]	; (80047e8 <HAL_RCC_OscConfig+0x6c8>)
 80046be:	4013      	ands	r3, r2
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046c8:	0112      	lsls	r2, r2, #4
 80046ca:	430a      	orrs	r2, r1
 80046cc:	4945      	ldr	r1, [pc, #276]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	628b      	str	r3, [r1, #40]	; 0x28
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	3b01      	subs	r3, #1
 80046d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e0:	3b01      	subs	r3, #1
 80046e2:	025b      	lsls	r3, r3, #9
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	3b01      	subs	r3, #1
 80046ee:	041b      	lsls	r3, r3, #16
 80046f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fa:	3b01      	subs	r3, #1
 80046fc:	061b      	lsls	r3, r3, #24
 80046fe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004702:	4938      	ldr	r1, [pc, #224]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 8004704:	4313      	orrs	r3, r2
 8004706:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004708:	4b36      	ldr	r3, [pc, #216]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	4a35      	ldr	r2, [pc, #212]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004714:	4b33      	ldr	r3, [pc, #204]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 8004716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004718:	4b34      	ldr	r3, [pc, #208]	; (80047ec <HAL_RCC_OscConfig+0x6cc>)
 800471a:	4013      	ands	r3, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004720:	00d2      	lsls	r2, r2, #3
 8004722:	4930      	ldr	r1, [pc, #192]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 8004724:	4313      	orrs	r3, r2
 8004726:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004728:	4b2e      	ldr	r3, [pc, #184]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	f023 020c 	bic.w	r2, r3, #12
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	492b      	ldr	r1, [pc, #172]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 8004736:	4313      	orrs	r3, r2
 8004738:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800473a:	4b2a      	ldr	r3, [pc, #168]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	f023 0202 	bic.w	r2, r3, #2
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	4927      	ldr	r1, [pc, #156]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800474c:	4b25      	ldr	r3, [pc, #148]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	4a24      	ldr	r2, [pc, #144]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 8004752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004756:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004758:	4b22      	ldr	r3, [pc, #136]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	4a21      	ldr	r2, [pc, #132]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 800475e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004764:	4b1f      	ldr	r3, [pc, #124]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	4a1e      	ldr	r2, [pc, #120]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 800476a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800476e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004770:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	4a1b      	ldr	r2, [pc, #108]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800477c:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 8004782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fd f8ae 	bl	80018e8 <HAL_GetTick>
 800478c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004790:	f7fd f8aa 	bl	80018e8 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e090      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x670>
 80047ae:	e088      	b.n	80048c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b0:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a0b      	ldr	r2, [pc, #44]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 80047b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fd f894 	bl	80018e8 <HAL_GetTick>
 80047c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fd f890 	bl	80018e8 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e076      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047d6:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <HAL_RCC_OscConfig+0x6c4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x6a4>
 80047e2:	e06e      	b.n	80048c2 <HAL_RCC_OscConfig+0x7a2>
 80047e4:	58024400 	.word	0x58024400
 80047e8:	fffffc0c 	.word	0xfffffc0c
 80047ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80047f0:	4b36      	ldr	r3, [pc, #216]	; (80048cc <HAL_RCC_OscConfig+0x7ac>)
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047f6:	4b35      	ldr	r3, [pc, #212]	; (80048cc <HAL_RCC_OscConfig+0x7ac>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	2b01      	cmp	r3, #1
 8004802:	d031      	beq.n	8004868 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f003 0203 	and.w	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800480e:	429a      	cmp	r2, r3
 8004810:	d12a      	bne.n	8004868 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481e:	429a      	cmp	r2, r3
 8004820:	d122      	bne.n	8004868 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800482e:	429a      	cmp	r2, r3
 8004830:	d11a      	bne.n	8004868 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	0a5b      	lsrs	r3, r3, #9
 8004836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d111      	bne.n	8004868 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	0c1b      	lsrs	r3, r3, #16
 8004848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d108      	bne.n	8004868 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	0e1b      	lsrs	r3, r3, #24
 800485a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004864:	429a      	cmp	r2, r3
 8004866:	d001      	beq.n	800486c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e02b      	b.n	80048c4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800486c:	4b17      	ldr	r3, [pc, #92]	; (80048cc <HAL_RCC_OscConfig+0x7ac>)
 800486e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004870:	08db      	lsrs	r3, r3, #3
 8004872:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004876:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	429a      	cmp	r2, r3
 8004880:	d01f      	beq.n	80048c2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <HAL_RCC_OscConfig+0x7ac>)
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	4a11      	ldr	r2, [pc, #68]	; (80048cc <HAL_RCC_OscConfig+0x7ac>)
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800488e:	f7fd f82b 	bl	80018e8 <HAL_GetTick>
 8004892:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004894:	bf00      	nop
 8004896:	f7fd f827 	bl	80018e8 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	4293      	cmp	r3, r2
 80048a0:	d0f9      	beq.n	8004896 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048a2:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <HAL_RCC_OscConfig+0x7ac>)
 80048a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a6:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <HAL_RCC_OscConfig+0x7b0>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048ae:	00d2      	lsls	r2, r2, #3
 80048b0:	4906      	ldr	r1, [pc, #24]	; (80048cc <HAL_RCC_OscConfig+0x7ac>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <HAL_RCC_OscConfig+0x7ac>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	4a04      	ldr	r2, [pc, #16]	; (80048cc <HAL_RCC_OscConfig+0x7ac>)
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3730      	adds	r7, #48	; 0x30
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	58024400 	.word	0x58024400
 80048d0:	ffff0007 	.word	0xffff0007

080048d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e19c      	b.n	8004c22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048e8:	4b8a      	ldr	r3, [pc, #552]	; (8004b14 <HAL_RCC_ClockConfig+0x240>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d910      	bls.n	8004918 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f6:	4b87      	ldr	r3, [pc, #540]	; (8004b14 <HAL_RCC_ClockConfig+0x240>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f023 020f 	bic.w	r2, r3, #15
 80048fe:	4985      	ldr	r1, [pc, #532]	; (8004b14 <HAL_RCC_ClockConfig+0x240>)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	4313      	orrs	r3, r2
 8004904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004906:	4b83      	ldr	r3, [pc, #524]	; (8004b14 <HAL_RCC_ClockConfig+0x240>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d001      	beq.n	8004918 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e184      	b.n	8004c22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d010      	beq.n	8004946 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	4b7b      	ldr	r3, [pc, #492]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004930:	429a      	cmp	r2, r3
 8004932:	d908      	bls.n	8004946 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004934:	4b78      	ldr	r3, [pc, #480]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	4975      	ldr	r1, [pc, #468]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004942:	4313      	orrs	r3, r2
 8004944:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d010      	beq.n	8004974 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695a      	ldr	r2, [r3, #20]
 8004956:	4b70      	ldr	r3, [pc, #448]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800495e:	429a      	cmp	r2, r3
 8004960:	d908      	bls.n	8004974 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004962:	4b6d      	ldr	r3, [pc, #436]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	496a      	ldr	r1, [pc, #424]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004970:	4313      	orrs	r3, r2
 8004972:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	d010      	beq.n	80049a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699a      	ldr	r2, [r3, #24]
 8004984:	4b64      	ldr	r3, [pc, #400]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800498c:	429a      	cmp	r2, r3
 800498e:	d908      	bls.n	80049a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004990:	4b61      	ldr	r3, [pc, #388]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	495e      	ldr	r1, [pc, #376]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d010      	beq.n	80049d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69da      	ldr	r2, [r3, #28]
 80049b2:	4b59      	ldr	r3, [pc, #356]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d908      	bls.n	80049d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049be:	4b56      	ldr	r3, [pc, #344]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	4953      	ldr	r1, [pc, #332]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d010      	beq.n	80049fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	4b4d      	ldr	r3, [pc, #308]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d908      	bls.n	80049fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ec:	4b4a      	ldr	r3, [pc, #296]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f023 020f 	bic.w	r2, r3, #15
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4947      	ldr	r1, [pc, #284]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d055      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a0a:	4b43      	ldr	r3, [pc, #268]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	4940      	ldr	r1, [pc, #256]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d107      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a24:	4b3c      	ldr	r3, [pc, #240]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d121      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0f6      	b.n	8004c22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d107      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a3c:	4b36      	ldr	r3, [pc, #216]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d115      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0ea      	b.n	8004c22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d107      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a54:	4b30      	ldr	r3, [pc, #192]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d109      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0de      	b.n	8004c22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a64:	4b2c      	ldr	r3, [pc, #176]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0d6      	b.n	8004c22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a74:	4b28      	ldr	r3, [pc, #160]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	f023 0207 	bic.w	r2, r3, #7
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4925      	ldr	r1, [pc, #148]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a86:	f7fc ff2f 	bl	80018e8 <HAL_GetTick>
 8004a8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8c:	e00a      	b.n	8004aa4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a8e:	f7fc ff2b 	bl	80018e8 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e0be      	b.n	8004c22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa4:	4b1c      	ldr	r3, [pc, #112]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d1eb      	bne.n	8004a8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d010      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d208      	bcs.n	8004ae4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad2:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	f023 020f 	bic.w	r2, r3, #15
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	490e      	ldr	r1, [pc, #56]	; (8004b18 <HAL_RCC_ClockConfig+0x244>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <HAL_RCC_ClockConfig+0x240>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d214      	bcs.n	8004b1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af2:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <HAL_RCC_ClockConfig+0x240>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f023 020f 	bic.w	r2, r3, #15
 8004afa:	4906      	ldr	r1, [pc, #24]	; (8004b14 <HAL_RCC_ClockConfig+0x240>)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b02:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <HAL_RCC_ClockConfig+0x240>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e086      	b.n	8004c22 <HAL_RCC_ClockConfig+0x34e>
 8004b14:	52002000 	.word	0x52002000
 8004b18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d010      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	4b3f      	ldr	r3, [pc, #252]	; (8004c2c <HAL_RCC_ClockConfig+0x358>)
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d208      	bcs.n	8004b4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b38:	4b3c      	ldr	r3, [pc, #240]	; (8004c2c <HAL_RCC_ClockConfig+0x358>)
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	4939      	ldr	r1, [pc, #228]	; (8004c2c <HAL_RCC_ClockConfig+0x358>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d010      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	4b34      	ldr	r3, [pc, #208]	; (8004c2c <HAL_RCC_ClockConfig+0x358>)
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d208      	bcs.n	8004b78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b66:	4b31      	ldr	r3, [pc, #196]	; (8004c2c <HAL_RCC_ClockConfig+0x358>)
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	492e      	ldr	r1, [pc, #184]	; (8004c2c <HAL_RCC_ClockConfig+0x358>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d010      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699a      	ldr	r2, [r3, #24]
 8004b88:	4b28      	ldr	r3, [pc, #160]	; (8004c2c <HAL_RCC_ClockConfig+0x358>)
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d208      	bcs.n	8004ba6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b94:	4b25      	ldr	r3, [pc, #148]	; (8004c2c <HAL_RCC_ClockConfig+0x358>)
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	4922      	ldr	r1, [pc, #136]	; (8004c2c <HAL_RCC_ClockConfig+0x358>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d010      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <HAL_RCC_ClockConfig+0x358>)
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d208      	bcs.n	8004bd4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004bc2:	4b1a      	ldr	r3, [pc, #104]	; (8004c2c <HAL_RCC_ClockConfig+0x358>)
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	4917      	ldr	r1, [pc, #92]	; (8004c2c <HAL_RCC_ClockConfig+0x358>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004bd4:	f000 f834 	bl	8004c40 <HAL_RCC_GetSysClockFreq>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <HAL_RCC_ClockConfig+0x358>)
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	0a1b      	lsrs	r3, r3, #8
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	4912      	ldr	r1, [pc, #72]	; (8004c30 <HAL_RCC_ClockConfig+0x35c>)
 8004be6:	5ccb      	ldrb	r3, [r1, r3]
 8004be8:	f003 031f 	and.w	r3, r3, #31
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bf2:	4b0e      	ldr	r3, [pc, #56]	; (8004c2c <HAL_RCC_ClockConfig+0x358>)
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	4a0d      	ldr	r2, [pc, #52]	; (8004c30 <HAL_RCC_ClockConfig+0x35c>)
 8004bfc:	5cd3      	ldrb	r3, [r2, r3]
 8004bfe:	f003 031f 	and.w	r3, r3, #31
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	fa22 f303 	lsr.w	r3, r2, r3
 8004c08:	4a0a      	ldr	r2, [pc, #40]	; (8004c34 <HAL_RCC_ClockConfig+0x360>)
 8004c0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c0c:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <HAL_RCC_ClockConfig+0x364>)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004c12:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <HAL_RCC_ClockConfig+0x368>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fc fe1c 	bl	8001854 <HAL_InitTick>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	58024400 	.word	0x58024400
 8004c30:	080091a8 	.word	0x080091a8
 8004c34:	24000004 	.word	0x24000004
 8004c38:	24000000 	.word	0x24000000
 8004c3c:	24000008 	.word	0x24000008

08004c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b089      	sub	sp, #36	; 0x24
 8004c44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c46:	4bb3      	ldr	r3, [pc, #716]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c4e:	2b18      	cmp	r3, #24
 8004c50:	f200 8155 	bhi.w	8004efe <HAL_RCC_GetSysClockFreq+0x2be>
 8004c54:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004cc1 	.word	0x08004cc1
 8004c60:	08004eff 	.word	0x08004eff
 8004c64:	08004eff 	.word	0x08004eff
 8004c68:	08004eff 	.word	0x08004eff
 8004c6c:	08004eff 	.word	0x08004eff
 8004c70:	08004eff 	.word	0x08004eff
 8004c74:	08004eff 	.word	0x08004eff
 8004c78:	08004eff 	.word	0x08004eff
 8004c7c:	08004ce7 	.word	0x08004ce7
 8004c80:	08004eff 	.word	0x08004eff
 8004c84:	08004eff 	.word	0x08004eff
 8004c88:	08004eff 	.word	0x08004eff
 8004c8c:	08004eff 	.word	0x08004eff
 8004c90:	08004eff 	.word	0x08004eff
 8004c94:	08004eff 	.word	0x08004eff
 8004c98:	08004eff 	.word	0x08004eff
 8004c9c:	08004ced 	.word	0x08004ced
 8004ca0:	08004eff 	.word	0x08004eff
 8004ca4:	08004eff 	.word	0x08004eff
 8004ca8:	08004eff 	.word	0x08004eff
 8004cac:	08004eff 	.word	0x08004eff
 8004cb0:	08004eff 	.word	0x08004eff
 8004cb4:	08004eff 	.word	0x08004eff
 8004cb8:	08004eff 	.word	0x08004eff
 8004cbc:	08004cf3 	.word	0x08004cf3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cc0:	4b94      	ldr	r3, [pc, #592]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d009      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ccc:	4b91      	ldr	r3, [pc, #580]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	08db      	lsrs	r3, r3, #3
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	4a90      	ldr	r2, [pc, #576]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004cde:	e111      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ce0:	4b8d      	ldr	r3, [pc, #564]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ce2:	61bb      	str	r3, [r7, #24]
      break;
 8004ce4:	e10e      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004ce6:	4b8d      	ldr	r3, [pc, #564]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ce8:	61bb      	str	r3, [r7, #24]
      break;
 8004cea:	e10b      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004cec:	4b8c      	ldr	r3, [pc, #560]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004cee:	61bb      	str	r3, [r7, #24]
      break;
 8004cf0:	e108      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cf2:	4b88      	ldr	r3, [pc, #544]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004cfc:	4b85      	ldr	r3, [pc, #532]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d08:	4b82      	ldr	r3, [pc, #520]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d12:	4b80      	ldr	r3, [pc, #512]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d16:	08db      	lsrs	r3, r3, #3
 8004d18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80e1 	beq.w	8004ef8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	f000 8083 	beq.w	8004e44 <HAL_RCC_GetSysClockFreq+0x204>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	f200 80a1 	bhi.w	8004e88 <HAL_RCC_GetSysClockFreq+0x248>
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_RCC_GetSysClockFreq+0x114>
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d056      	beq.n	8004e00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d52:	e099      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d54:	4b6f      	ldr	r3, [pc, #444]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d02d      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d60:	4b6c      	ldr	r3, [pc, #432]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	08db      	lsrs	r3, r3, #3
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	4a6b      	ldr	r2, [pc, #428]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	ee07 3a90 	vmov	s15, r3
 8004d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8a:	4b62      	ldr	r3, [pc, #392]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004dba:	e087      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004f28 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dce:	4b51      	ldr	r3, [pc, #324]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8004de2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004dfe:	e065      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004f2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e12:	4b40      	ldr	r3, [pc, #256]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e42:	e043      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004f30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e56:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e86:	e021      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e92:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004f2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9a:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004f24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004eca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004ecc:	4b11      	ldr	r3, [pc, #68]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	0a5b      	lsrs	r3, r3, #9
 8004ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	ee07 3a90 	vmov	s15, r3
 8004ee0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ee4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ef0:	ee17 3a90 	vmov	r3, s15
 8004ef4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004ef6:	e005      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61bb      	str	r3, [r7, #24]
      break;
 8004efc:	e002      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004efe:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f00:	61bb      	str	r3, [r7, #24]
      break;
 8004f02:	bf00      	nop
  }

  return sysclockfreq;
 8004f04:	69bb      	ldr	r3, [r7, #24]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3724      	adds	r7, #36	; 0x24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	58024400 	.word	0x58024400
 8004f18:	03d09000 	.word	0x03d09000
 8004f1c:	003d0900 	.word	0x003d0900
 8004f20:	017d7840 	.word	0x017d7840
 8004f24:	46000000 	.word	0x46000000
 8004f28:	4c742400 	.word	0x4c742400
 8004f2c:	4a742400 	.word	0x4a742400
 8004f30:	4bbebc20 	.word	0x4bbebc20

08004f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f3a:	f7ff fe81 	bl	8004c40 <HAL_RCC_GetSysClockFreq>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	0a1b      	lsrs	r3, r3, #8
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	490f      	ldr	r1, [pc, #60]	; (8004f88 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f4c:	5ccb      	ldrb	r3, [r1, r3]
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	fa22 f303 	lsr.w	r3, r2, r3
 8004f56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f62:	5cd3      	ldrb	r3, [r2, r3]
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6e:	4a07      	ldr	r2, [pc, #28]	; (8004f8c <HAL_RCC_GetHCLKFreq+0x58>)
 8004f70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f72:	4a07      	ldr	r2, [pc, #28]	; (8004f90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f78:	4b04      	ldr	r3, [pc, #16]	; (8004f8c <HAL_RCC_GetHCLKFreq+0x58>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	58024400 	.word	0x58024400
 8004f88:	080091a8 	.word	0x080091a8
 8004f8c:	24000004 	.word	0x24000004
 8004f90:	24000000 	.word	0x24000000

08004f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f98:	f7ff ffcc 	bl	8004f34 <HAL_RCC_GetHCLKFreq>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	091b      	lsrs	r3, r3, #4
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	4904      	ldr	r1, [pc, #16]	; (8004fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004faa:	5ccb      	ldrb	r3, [r1, r3]
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	080091a8 	.word	0x080091a8

08004fc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc4:	b0c6      	sub	sp, #280	; 0x118
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004fe4:	2500      	movs	r5, #0
 8004fe6:	ea54 0305 	orrs.w	r3, r4, r5
 8004fea:	d049      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ff2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ff6:	d02f      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ff8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ffc:	d828      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ffe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005002:	d01a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005008:	d822      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800500e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005012:	d007      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005014:	e01c      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005016:	4bab      	ldr	r3, [pc, #684]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	4aaa      	ldr	r2, [pc, #680]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800501c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005020:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005022:	e01a      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005028:	3308      	adds	r3, #8
 800502a:	2102      	movs	r1, #2
 800502c:	4618      	mov	r0, r3
 800502e:	f002 fa49 	bl	80074c4 <RCCEx_PLL2_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005038:	e00f      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800503a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800503e:	3328      	adds	r3, #40	; 0x28
 8005040:	2102      	movs	r1, #2
 8005042:	4618      	mov	r0, r3
 8005044:	f002 faf0 	bl	8007628 <RCCEx_PLL3_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800504e:	e004      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005056:	e000      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800505a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005062:	4b98      	ldr	r3, [pc, #608]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005066:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800506a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800506e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005070:	4a94      	ldr	r2, [pc, #592]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005072:	430b      	orrs	r3, r1
 8005074:	6513      	str	r3, [r2, #80]	; 0x50
 8005076:	e003      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800507c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800508c:	f04f 0900 	mov.w	r9, #0
 8005090:	ea58 0309 	orrs.w	r3, r8, r9
 8005094:	d047      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800509a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509c:	2b04      	cmp	r3, #4
 800509e:	d82a      	bhi.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80050a0:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050bd 	.word	0x080050bd
 80050ac:	080050cb 	.word	0x080050cb
 80050b0:	080050e1 	.word	0x080050e1
 80050b4:	080050ff 	.word	0x080050ff
 80050b8:	080050ff 	.word	0x080050ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050bc:	4b81      	ldr	r3, [pc, #516]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	4a80      	ldr	r2, [pc, #512]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050c8:	e01a      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ce:	3308      	adds	r3, #8
 80050d0:	2100      	movs	r1, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f002 f9f6 	bl	80074c4 <RCCEx_PLL2_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050de:	e00f      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e4:	3328      	adds	r3, #40	; 0x28
 80050e6:	2100      	movs	r1, #0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f002 fa9d 	bl	8007628 <RCCEx_PLL3_Config>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050f4:	e004      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80050fc:	e000      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80050fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005100:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005108:	4b6e      	ldr	r3, [pc, #440]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800510a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510c:	f023 0107 	bic.w	r1, r3, #7
 8005110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005116:	4a6b      	ldr	r2, [pc, #428]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005118:	430b      	orrs	r3, r1
 800511a:	6513      	str	r3, [r2, #80]	; 0x50
 800511c:	e003      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005122:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005132:	f04f 0b00 	mov.w	fp, #0
 8005136:	ea5a 030b 	orrs.w	r3, sl, fp
 800513a:	d05b      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800513c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005140:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005144:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005148:	d03b      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800514a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800514e:	d834      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005150:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005154:	d037      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005156:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800515a:	d82e      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800515c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005160:	d033      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005162:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005166:	d828      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800516c:	d01a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800516e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005172:	d822      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005178:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800517c:	d007      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800517e:	e01c      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005180:	4b50      	ldr	r3, [pc, #320]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	4a4f      	ldr	r2, [pc, #316]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800518a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800518c:	e01e      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800518e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005192:	3308      	adds	r3, #8
 8005194:	2100      	movs	r1, #0
 8005196:	4618      	mov	r0, r3
 8005198:	f002 f994 	bl	80074c4 <RCCEx_PLL2_Config>
 800519c:	4603      	mov	r3, r0
 800519e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80051a2:	e013      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051a8:	3328      	adds	r3, #40	; 0x28
 80051aa:	2100      	movs	r1, #0
 80051ac:	4618      	mov	r0, r3
 80051ae:	f002 fa3b 	bl	8007628 <RCCEx_PLL3_Config>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051b8:	e008      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80051c0:	e004      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80051c2:	bf00      	nop
 80051c4:	e002      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80051c6:	bf00      	nop
 80051c8:	e000      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80051ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80051d4:	4b3b      	ldr	r3, [pc, #236]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80051d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80051dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80051e4:	4a37      	ldr	r2, [pc, #220]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80051e6:	430b      	orrs	r3, r1
 80051e8:	6593      	str	r3, [r2, #88]	; 0x58
 80051ea:	e003      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80051f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005200:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005204:	2300      	movs	r3, #0
 8005206:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800520a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800520e:	460b      	mov	r3, r1
 8005210:	4313      	orrs	r3, r2
 8005212:	d05d      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005218:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800521c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005220:	d03b      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005222:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005226:	d834      	bhi.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005228:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800522c:	d037      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800522e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005232:	d82e      	bhi.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005234:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005238:	d033      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800523a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800523e:	d828      	bhi.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005240:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005244:	d01a      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005246:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800524a:	d822      	bhi.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005254:	d007      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005256:	e01c      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005258:	4b1a      	ldr	r3, [pc, #104]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	4a19      	ldr	r2, [pc, #100]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800525e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005264:	e01e      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800526a:	3308      	adds	r3, #8
 800526c:	2100      	movs	r1, #0
 800526e:	4618      	mov	r0, r3
 8005270:	f002 f928 	bl	80074c4 <RCCEx_PLL2_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800527a:	e013      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800527c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005280:	3328      	adds	r3, #40	; 0x28
 8005282:	2100      	movs	r1, #0
 8005284:	4618      	mov	r0, r3
 8005286:	f002 f9cf 	bl	8007628 <RCCEx_PLL3_Config>
 800528a:	4603      	mov	r3, r0
 800528c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005290:	e008      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005298:	e004      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800529a:	bf00      	nop
 800529c:	e002      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80052a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10d      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80052ac:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80052b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052bc:	4a01      	ldr	r2, [pc, #4]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052be:	430b      	orrs	r3, r1
 80052c0:	6593      	str	r3, [r2, #88]	; 0x58
 80052c2:	e005      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80052c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80052d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80052dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80052e0:	2300      	movs	r3, #0
 80052e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052e6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4313      	orrs	r3, r2
 80052ee:	d03a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f6:	2b30      	cmp	r3, #48	; 0x30
 80052f8:	d01f      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80052fa:	2b30      	cmp	r3, #48	; 0x30
 80052fc:	d819      	bhi.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d00c      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005302:	2b20      	cmp	r3, #32
 8005304:	d815      	bhi.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d019      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800530a:	2b10      	cmp	r3, #16
 800530c:	d111      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800530e:	4baa      	ldr	r3, [pc, #680]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	4aa9      	ldr	r2, [pc, #676]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005318:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800531a:	e011      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800531c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005320:	3308      	adds	r3, #8
 8005322:	2102      	movs	r1, #2
 8005324:	4618      	mov	r0, r3
 8005326:	f002 f8cd 	bl	80074c4 <RCCEx_PLL2_Config>
 800532a:	4603      	mov	r3, r0
 800532c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005330:	e006      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005338:	e002      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800533a:	bf00      	nop
 800533c:	e000      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800533e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005340:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10a      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005348:	4b9b      	ldr	r3, [pc, #620]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800534a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005356:	4a98      	ldr	r2, [pc, #608]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005358:	430b      	orrs	r3, r1
 800535a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800535c:	e003      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005362:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005372:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005376:	2300      	movs	r3, #0
 8005378:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800537c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005380:	460b      	mov	r3, r1
 8005382:	4313      	orrs	r3, r2
 8005384:	d051      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800538a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800538c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005390:	d035      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005396:	d82e      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005398:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800539c:	d031      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800539e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053a2:	d828      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80053a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a8:	d01a      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80053aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ae:	d822      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80053b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b8:	d007      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80053ba:	e01c      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053bc:	4b7e      	ldr	r3, [pc, #504]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	4a7d      	ldr	r2, [pc, #500]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053c8:	e01c      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ce:	3308      	adds	r3, #8
 80053d0:	2100      	movs	r1, #0
 80053d2:	4618      	mov	r0, r3
 80053d4:	f002 f876 	bl	80074c4 <RCCEx_PLL2_Config>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053de:	e011      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e4:	3328      	adds	r3, #40	; 0x28
 80053e6:	2100      	movs	r1, #0
 80053e8:	4618      	mov	r0, r3
 80053ea:	f002 f91d 	bl	8007628 <RCCEx_PLL3_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053f4:	e006      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80053fc:	e002      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80053fe:	bf00      	nop
 8005400:	e000      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005404:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800540c:	4b6a      	ldr	r3, [pc, #424]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800540e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005410:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541a:	4a67      	ldr	r2, [pc, #412]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800541c:	430b      	orrs	r3, r1
 800541e:	6513      	str	r3, [r2, #80]	; 0x50
 8005420:	e003      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005422:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005426:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800542a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005436:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800543a:	2300      	movs	r3, #0
 800543c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005440:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005444:	460b      	mov	r3, r1
 8005446:	4313      	orrs	r3, r2
 8005448:	d053      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800544a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800544e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005454:	d033      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005456:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800545a:	d82c      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800545c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005460:	d02f      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005462:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005466:	d826      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005468:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800546c:	d02b      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800546e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005472:	d820      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005478:	d012      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800547a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800547e:	d81a      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d022      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005488:	d115      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800548a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800548e:	3308      	adds	r3, #8
 8005490:	2101      	movs	r1, #1
 8005492:	4618      	mov	r0, r3
 8005494:	f002 f816 	bl	80074c4 <RCCEx_PLL2_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800549e:	e015      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a4:	3328      	adds	r3, #40	; 0x28
 80054a6:	2101      	movs	r1, #1
 80054a8:	4618      	mov	r0, r3
 80054aa:	f002 f8bd 	bl	8007628 <RCCEx_PLL3_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80054b4:	e00a      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80054bc:	e006      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80054be:	bf00      	nop
 80054c0:	e004      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80054c2:	bf00      	nop
 80054c4:	e002      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80054c6:	bf00      	nop
 80054c8:	e000      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80054ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80054d4:	4b38      	ldr	r3, [pc, #224]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80054d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80054dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e2:	4a35      	ldr	r2, [pc, #212]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80054e4:	430b      	orrs	r3, r1
 80054e6:	6513      	str	r3, [r2, #80]	; 0x50
 80054e8:	e003      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80054f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80054fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005502:	2300      	movs	r3, #0
 8005504:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005508:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800550c:	460b      	mov	r3, r1
 800550e:	4313      	orrs	r3, r2
 8005510:	d058      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800551a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800551e:	d033      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005524:	d82c      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552a:	d02f      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800552c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005530:	d826      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005532:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005536:	d02b      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005538:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800553c:	d820      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800553e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005542:	d012      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005548:	d81a      	bhi.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d022      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800554e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005552:	d115      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005558:	3308      	adds	r3, #8
 800555a:	2101      	movs	r1, #1
 800555c:	4618      	mov	r0, r3
 800555e:	f001 ffb1 	bl	80074c4 <RCCEx_PLL2_Config>
 8005562:	4603      	mov	r3, r0
 8005564:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005568:	e015      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800556a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800556e:	3328      	adds	r3, #40	; 0x28
 8005570:	2101      	movs	r1, #1
 8005572:	4618      	mov	r0, r3
 8005574:	f002 f858 	bl	8007628 <RCCEx_PLL3_Config>
 8005578:	4603      	mov	r3, r0
 800557a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800557e:	e00a      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005586:	e006      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005588:	bf00      	nop
 800558a:	e004      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800558c:	bf00      	nop
 800558e:	e002      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005590:	bf00      	nop
 8005592:	e000      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005596:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10e      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800559e:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80055a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80055a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80055ae:	4a02      	ldr	r2, [pc, #8]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80055b0:	430b      	orrs	r3, r1
 80055b2:	6593      	str	r3, [r2, #88]	; 0x58
 80055b4:	e006      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80055b6:	bf00      	nop
 80055b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80055c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80055d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055d4:	2300      	movs	r3, #0
 80055d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80055da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80055de:	460b      	mov	r3, r1
 80055e0:	4313      	orrs	r3, r2
 80055e2:	d037      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80055e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ee:	d00e      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80055f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055f4:	d816      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d018      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80055fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055fe:	d111      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005600:	4bc4      	ldr	r3, [pc, #784]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	4ac3      	ldr	r2, [pc, #780]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800560a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800560c:	e00f      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800560e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005612:	3308      	adds	r3, #8
 8005614:	2101      	movs	r1, #1
 8005616:	4618      	mov	r0, r3
 8005618:	f001 ff54 	bl	80074c4 <RCCEx_PLL2_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005622:	e004      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800562a:	e000      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800562c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10a      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005636:	4bb7      	ldr	r3, [pc, #732]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800563a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800563e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005644:	4ab3      	ldr	r2, [pc, #716]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005646:	430b      	orrs	r3, r1
 8005648:	6513      	str	r3, [r2, #80]	; 0x50
 800564a:	e003      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005650:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005660:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005664:	2300      	movs	r3, #0
 8005666:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800566a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800566e:	460b      	mov	r3, r1
 8005670:	4313      	orrs	r3, r2
 8005672:	d039      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567a:	2b03      	cmp	r3, #3
 800567c:	d81c      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800567e:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005684:	080056c1 	.word	0x080056c1
 8005688:	08005695 	.word	0x08005695
 800568c:	080056a3 	.word	0x080056a3
 8005690:	080056c1 	.word	0x080056c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005694:	4b9f      	ldr	r3, [pc, #636]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	4a9e      	ldr	r2, [pc, #632]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800569a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800569e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80056a0:	e00f      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056a6:	3308      	adds	r3, #8
 80056a8:	2102      	movs	r1, #2
 80056aa:	4618      	mov	r0, r3
 80056ac:	f001 ff0a 	bl	80074c4 <RCCEx_PLL2_Config>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80056b6:	e004      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80056be:	e000      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80056c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80056ca:	4b92      	ldr	r3, [pc, #584]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ce:	f023 0103 	bic.w	r1, r3, #3
 80056d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d8:	4a8e      	ldr	r2, [pc, #568]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056da:	430b      	orrs	r3, r1
 80056dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056de:	e003      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80056f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056f8:	2300      	movs	r3, #0
 80056fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005702:	460b      	mov	r3, r1
 8005704:	4313      	orrs	r3, r2
 8005706:	f000 8099 	beq.w	800583c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800570a:	4b83      	ldr	r3, [pc, #524]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a82      	ldr	r2, [pc, #520]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005714:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005716:	f7fc f8e7 	bl	80018e8 <HAL_GetTick>
 800571a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800571e:	e00b      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005720:	f7fc f8e2 	bl	80018e8 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b64      	cmp	r3, #100	; 0x64
 800572e:	d903      	bls.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005736:	e005      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005738:	4b77      	ldr	r3, [pc, #476]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0ed      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005744:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005748:	2b00      	cmp	r3, #0
 800574a:	d173      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800574c:	4b71      	ldr	r3, [pc, #452]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800574e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005754:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005758:	4053      	eors	r3, r2
 800575a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575e:	2b00      	cmp	r3, #0
 8005760:	d015      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005762:	4b6c      	ldr	r3, [pc, #432]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800576e:	4b69      	ldr	r3, [pc, #420]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	4a68      	ldr	r2, [pc, #416]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005778:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800577a:	4b66      	ldr	r3, [pc, #408]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	4a65      	ldr	r2, [pc, #404]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005784:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005786:	4a63      	ldr	r2, [pc, #396]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800578e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005792:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800579a:	d118      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579c:	f7fc f8a4 	bl	80018e8 <HAL_GetTick>
 80057a0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057a4:	e00d      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a6:	f7fc f89f 	bl	80018e8 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057b0:	1ad2      	subs	r2, r2, r3
 80057b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d903      	bls.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80057c0:	e005      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057c2:	4b54      	ldr	r3, [pc, #336]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0eb      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80057ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d129      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057e6:	d10e      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80057e8:	4b4a      	ldr	r3, [pc, #296]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80057f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057f8:	091a      	lsrs	r2, r3, #4
 80057fa:	4b48      	ldr	r3, [pc, #288]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	4a45      	ldr	r2, [pc, #276]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005800:	430b      	orrs	r3, r1
 8005802:	6113      	str	r3, [r2, #16]
 8005804:	e005      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005806:	4b43      	ldr	r3, [pc, #268]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	4a42      	ldr	r2, [pc, #264]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800580c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005810:	6113      	str	r3, [r2, #16]
 8005812:	4b40      	ldr	r3, [pc, #256]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005814:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800581e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005822:	4a3c      	ldr	r2, [pc, #240]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005824:	430b      	orrs	r3, r1
 8005826:	6713      	str	r3, [r2, #112]	; 0x70
 8005828:	e008      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800582a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800582e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8005832:	e003      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005834:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005838:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800583c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	f002 0301 	and.w	r3, r2, #1
 8005848:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800584c:	2300      	movs	r3, #0
 800584e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005852:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005856:	460b      	mov	r3, r1
 8005858:	4313      	orrs	r3, r2
 800585a:	f000 808f 	beq.w	800597c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800585e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005862:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005864:	2b28      	cmp	r3, #40	; 0x28
 8005866:	d871      	bhi.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005868:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586e:	bf00      	nop
 8005870:	08005955 	.word	0x08005955
 8005874:	0800594d 	.word	0x0800594d
 8005878:	0800594d 	.word	0x0800594d
 800587c:	0800594d 	.word	0x0800594d
 8005880:	0800594d 	.word	0x0800594d
 8005884:	0800594d 	.word	0x0800594d
 8005888:	0800594d 	.word	0x0800594d
 800588c:	0800594d 	.word	0x0800594d
 8005890:	08005921 	.word	0x08005921
 8005894:	0800594d 	.word	0x0800594d
 8005898:	0800594d 	.word	0x0800594d
 800589c:	0800594d 	.word	0x0800594d
 80058a0:	0800594d 	.word	0x0800594d
 80058a4:	0800594d 	.word	0x0800594d
 80058a8:	0800594d 	.word	0x0800594d
 80058ac:	0800594d 	.word	0x0800594d
 80058b0:	08005937 	.word	0x08005937
 80058b4:	0800594d 	.word	0x0800594d
 80058b8:	0800594d 	.word	0x0800594d
 80058bc:	0800594d 	.word	0x0800594d
 80058c0:	0800594d 	.word	0x0800594d
 80058c4:	0800594d 	.word	0x0800594d
 80058c8:	0800594d 	.word	0x0800594d
 80058cc:	0800594d 	.word	0x0800594d
 80058d0:	08005955 	.word	0x08005955
 80058d4:	0800594d 	.word	0x0800594d
 80058d8:	0800594d 	.word	0x0800594d
 80058dc:	0800594d 	.word	0x0800594d
 80058e0:	0800594d 	.word	0x0800594d
 80058e4:	0800594d 	.word	0x0800594d
 80058e8:	0800594d 	.word	0x0800594d
 80058ec:	0800594d 	.word	0x0800594d
 80058f0:	08005955 	.word	0x08005955
 80058f4:	0800594d 	.word	0x0800594d
 80058f8:	0800594d 	.word	0x0800594d
 80058fc:	0800594d 	.word	0x0800594d
 8005900:	0800594d 	.word	0x0800594d
 8005904:	0800594d 	.word	0x0800594d
 8005908:	0800594d 	.word	0x0800594d
 800590c:	0800594d 	.word	0x0800594d
 8005910:	08005955 	.word	0x08005955
 8005914:	58024400 	.word	0x58024400
 8005918:	58024800 	.word	0x58024800
 800591c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005924:	3308      	adds	r3, #8
 8005926:	2101      	movs	r1, #1
 8005928:	4618      	mov	r0, r3
 800592a:	f001 fdcb 	bl	80074c4 <RCCEx_PLL2_Config>
 800592e:	4603      	mov	r3, r0
 8005930:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005934:	e00f      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800593a:	3328      	adds	r3, #40	; 0x28
 800593c:	2101      	movs	r1, #1
 800593e:	4618      	mov	r0, r3
 8005940:	f001 fe72 	bl	8007628 <RCCEx_PLL3_Config>
 8005944:	4603      	mov	r3, r0
 8005946:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800594a:	e004      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005952:	e000      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005956:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800595e:	4bbf      	ldr	r3, [pc, #764]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800596a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800596c:	4abb      	ldr	r2, [pc, #748]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800596e:	430b      	orrs	r3, r1
 8005970:	6553      	str	r3, [r2, #84]	; 0x54
 8005972:	e003      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005974:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005978:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800597c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	f002 0302 	and.w	r3, r2, #2
 8005988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800598c:	2300      	movs	r3, #0
 800598e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005992:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005996:	460b      	mov	r3, r1
 8005998:	4313      	orrs	r3, r2
 800599a:	d041      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800599c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a2:	2b05      	cmp	r3, #5
 80059a4:	d824      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80059a6:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80059a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ac:	080059f9 	.word	0x080059f9
 80059b0:	080059c5 	.word	0x080059c5
 80059b4:	080059db 	.word	0x080059db
 80059b8:	080059f9 	.word	0x080059f9
 80059bc:	080059f9 	.word	0x080059f9
 80059c0:	080059f9 	.word	0x080059f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c8:	3308      	adds	r3, #8
 80059ca:	2101      	movs	r1, #1
 80059cc:	4618      	mov	r0, r3
 80059ce:	f001 fd79 	bl	80074c4 <RCCEx_PLL2_Config>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80059d8:	e00f      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059de:	3328      	adds	r3, #40	; 0x28
 80059e0:	2101      	movs	r1, #1
 80059e2:	4618      	mov	r0, r3
 80059e4:	f001 fe20 	bl	8007628 <RCCEx_PLL3_Config>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80059ee:	e004      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80059f6:	e000      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80059f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10a      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005a02:	4b96      	ldr	r3, [pc, #600]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a06:	f023 0107 	bic.w	r1, r3, #7
 8005a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a10:	4a92      	ldr	r2, [pc, #584]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a12:	430b      	orrs	r3, r1
 8005a14:	6553      	str	r3, [r2, #84]	; 0x54
 8005a16:	e003      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a28:	f002 0304 	and.w	r3, r2, #4
 8005a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a30:	2300      	movs	r3, #0
 8005a32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a36:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	d044      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a48:	2b05      	cmp	r3, #5
 8005a4a:	d825      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005a4c:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005aa1 	.word	0x08005aa1
 8005a58:	08005a6d 	.word	0x08005a6d
 8005a5c:	08005a83 	.word	0x08005a83
 8005a60:	08005aa1 	.word	0x08005aa1
 8005a64:	08005aa1 	.word	0x08005aa1
 8005a68:	08005aa1 	.word	0x08005aa1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a70:	3308      	adds	r3, #8
 8005a72:	2101      	movs	r1, #1
 8005a74:	4618      	mov	r0, r3
 8005a76:	f001 fd25 	bl	80074c4 <RCCEx_PLL2_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005a80:	e00f      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a86:	3328      	adds	r3, #40	; 0x28
 8005a88:	2101      	movs	r1, #1
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f001 fdcc 	bl	8007628 <RCCEx_PLL3_Config>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005a96:	e004      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10b      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005aaa:	4b6c      	ldr	r3, [pc, #432]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aae:	f023 0107 	bic.w	r1, r3, #7
 8005ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aba:	4a68      	ldr	r2, [pc, #416]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005abc:	430b      	orrs	r3, r1
 8005abe:	6593      	str	r3, [r2, #88]	; 0x58
 8005ac0:	e003      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ac6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	f002 0320 	and.w	r3, r2, #32
 8005ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ada:	2300      	movs	r3, #0
 8005adc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ae0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	d055      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005af6:	d033      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005afc:	d82c      	bhi.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b02:	d02f      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b08:	d826      	bhi.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005b0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b0e:	d02b      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005b10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b14:	d820      	bhi.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b1a:	d012      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b20:	d81a      	bhi.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d022      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005b26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b2a:	d115      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b30:	3308      	adds	r3, #8
 8005b32:	2100      	movs	r1, #0
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 fcc5 	bl	80074c4 <RCCEx_PLL2_Config>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b40:	e015      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b46:	3328      	adds	r3, #40	; 0x28
 8005b48:	2102      	movs	r1, #2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f001 fd6c 	bl	8007628 <RCCEx_PLL3_Config>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b56:	e00a      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005b5e:	e006      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005b60:	bf00      	nop
 8005b62:	e004      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005b64:	bf00      	nop
 8005b66:	e002      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005b68:	bf00      	nop
 8005b6a:	e000      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10b      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b76:	4b39      	ldr	r3, [pc, #228]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b86:	4a35      	ldr	r2, [pc, #212]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	6553      	str	r3, [r2, #84]	; 0x54
 8005b8c:	e003      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b92:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005ba2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	d058      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bbe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005bc2:	d033      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005bc4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005bc8:	d82c      	bhi.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bce:	d02f      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd4:	d826      	bhi.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005bd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bda:	d02b      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005bdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005be0:	d820      	bhi.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005be6:	d012      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bec:	d81a      	bhi.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d022      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf6:	d115      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	2100      	movs	r1, #0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 fc5f 	bl	80074c4 <RCCEx_PLL2_Config>
 8005c06:	4603      	mov	r3, r0
 8005c08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c0c:	e015      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c12:	3328      	adds	r3, #40	; 0x28
 8005c14:	2102      	movs	r1, #2
 8005c16:	4618      	mov	r0, r3
 8005c18:	f001 fd06 	bl	8007628 <RCCEx_PLL3_Config>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c22:	e00a      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005c2a:	e006      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005c2c:	bf00      	nop
 8005c2e:	e004      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005c30:	bf00      	nop
 8005c32:	e002      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005c34:	bf00      	nop
 8005c36:	e000      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10e      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c42:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c46:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c52:	4a02      	ldr	r2, [pc, #8]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c54:	430b      	orrs	r3, r1
 8005c56:	6593      	str	r3, [r2, #88]	; 0x58
 8005c58:	e006      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005c5a:	bf00      	nop
 8005c5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005c74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c7e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005c82:	460b      	mov	r3, r1
 8005c84:	4313      	orrs	r3, r2
 8005c86:	d055      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c94:	d033      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005c96:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c9a:	d82c      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca0:	d02f      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca6:	d826      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ca8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005cac:	d02b      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005cae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005cb2:	d820      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cb8:	d012      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005cba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cbe:	d81a      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d022      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cc8:	d115      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cce:	3308      	adds	r3, #8
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f001 fbf6 	bl	80074c4 <RCCEx_PLL2_Config>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005cde:	e015      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce4:	3328      	adds	r3, #40	; 0x28
 8005ce6:	2102      	movs	r1, #2
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f001 fc9d 	bl	8007628 <RCCEx_PLL3_Config>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005cf4:	e00a      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005cfc:	e006      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005cfe:	bf00      	nop
 8005d00:	e004      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005d02:	bf00      	nop
 8005d04:	e002      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10b      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d14:	4ba0      	ldr	r3, [pc, #640]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d18:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d24:	4a9c      	ldr	r2, [pc, #624]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d26:	430b      	orrs	r3, r1
 8005d28:	6593      	str	r3, [r2, #88]	; 0x58
 8005d2a:	e003      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	f002 0308 	and.w	r3, r2, #8
 8005d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d44:	2300      	movs	r3, #0
 8005d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005d4a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4313      	orrs	r3, r2
 8005d52:	d01e      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d60:	d10c      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d66:	3328      	adds	r3, #40	; 0x28
 8005d68:	2102      	movs	r1, #2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f001 fc5c 	bl	8007628 <RCCEx_PLL3_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005d7c:	4b86      	ldr	r3, [pc, #536]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d8c:	4a82      	ldr	r2, [pc, #520]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	f002 0310 	and.w	r3, r2, #16
 8005d9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005da2:	2300      	movs	r3, #0
 8005da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005da8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005dac:	460b      	mov	r3, r1
 8005dae:	4313      	orrs	r3, r2
 8005db0:	d01e      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dbe:	d10c      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc4:	3328      	adds	r3, #40	; 0x28
 8005dc6:	2102      	movs	r1, #2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f001 fc2d 	bl	8007628 <RCCEx_PLL3_Config>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dda:	4b6f      	ldr	r3, [pc, #444]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dea:	4a6b      	ldr	r2, [pc, #428]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dec:	430b      	orrs	r3, r1
 8005dee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005dfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dfe:	2300      	movs	r3, #0
 8005e00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e02:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005e06:	460b      	mov	r3, r1
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	d03e      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e18:	d022      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005e1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e1e:	d81b      	bhi.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e28:	d00b      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005e2a:	e015      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e30:	3308      	adds	r3, #8
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 fb45 	bl	80074c4 <RCCEx_PLL2_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e40:	e00f      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e46:	3328      	adds	r3, #40	; 0x28
 8005e48:	2102      	movs	r1, #2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f001 fbec 	bl	8007628 <RCCEx_PLL3_Config>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e56:	e004      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005e5e:	e000      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10b      	bne.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e6a:	4b4b      	ldr	r3, [pc, #300]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e7a:	4a47      	ldr	r2, [pc, #284]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8005e80:	e003      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e86:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e92:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005e96:	673b      	str	r3, [r7, #112]	; 0x70
 8005e98:	2300      	movs	r3, #0
 8005e9a:	677b      	str	r3, [r7, #116]	; 0x74
 8005e9c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	d03b      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eb2:	d01f      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005eb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eb8:	d818      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ebe:	d003      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005ec0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ec4:	d007      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005ec6:	e011      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec8:	4b33      	ldr	r3, [pc, #204]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	4a32      	ldr	r2, [pc, #200]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ed4:	e00f      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eda:	3328      	adds	r3, #40	; 0x28
 8005edc:	2101      	movs	r1, #1
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f001 fba2 	bl	8007628 <RCCEx_PLL3_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005eea:	e004      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005ef2:	e000      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ef6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10b      	bne.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005efe:	4b26      	ldr	r3, [pc, #152]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f02:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f0e:	4a22      	ldr	r2, [pc, #136]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f10:	430b      	orrs	r3, r1
 8005f12:	6553      	str	r3, [r2, #84]	; 0x54
 8005f14:	e003      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f1a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f30:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005f34:	460b      	mov	r3, r1
 8005f36:	4313      	orrs	r3, r2
 8005f38:	d034      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f48:	d007      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005f4a:	e011      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f4c:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	4a11      	ldr	r2, [pc, #68]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f58:	e00e      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5e:	3308      	adds	r3, #8
 8005f60:	2102      	movs	r1, #2
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 faae 	bl	80074c4 <RCCEx_PLL2_Config>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f6e:	e003      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10d      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005f80:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8e:	4a02      	ldr	r2, [pc, #8]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f90:	430b      	orrs	r3, r1
 8005f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f94:	e006      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005f96:	bf00      	nop
 8005f98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fa0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005fb0:	663b      	str	r3, [r7, #96]	; 0x60
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	667b      	str	r3, [r7, #100]	; 0x64
 8005fb6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	d00c      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc4:	3328      	adds	r3, #40	; 0x28
 8005fc6:	2102      	movs	r1, #2
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 fb2d 	bl	8007628 <RCCEx_PLL3_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005fe6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fe8:	2300      	movs	r3, #0
 8005fea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	d036      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ffc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006000:	d018      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006006:	d811      	bhi.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800600c:	d014      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800600e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006012:	d80b      	bhi.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006014:	2b00      	cmp	r3, #0
 8006016:	d011      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800601c:	d106      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800601e:	4bb7      	ldr	r3, [pc, #732]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	4ab6      	ldr	r2, [pc, #728]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006028:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800602a:	e008      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006032:	e004      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006034:	bf00      	nop
 8006036:	e002      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006038:	bf00      	nop
 800603a:	e000      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800603c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800603e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006046:	4bad      	ldr	r3, [pc, #692]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800604e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006054:	4aa9      	ldr	r2, [pc, #676]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006056:	430b      	orrs	r3, r1
 8006058:	6553      	str	r3, [r2, #84]	; 0x54
 800605a:	e003      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006060:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006070:	653b      	str	r3, [r7, #80]	; 0x50
 8006072:	2300      	movs	r3, #0
 8006074:	657b      	str	r3, [r7, #84]	; 0x54
 8006076:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800607a:	460b      	mov	r3, r1
 800607c:	4313      	orrs	r3, r2
 800607e:	d009      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006080:	4b9e      	ldr	r3, [pc, #632]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006084:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800608c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608e:	4a9b      	ldr	r2, [pc, #620]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006090:	430b      	orrs	r3, r1
 8006092:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80060a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80060a2:	2300      	movs	r3, #0
 80060a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80060aa:	460b      	mov	r3, r1
 80060ac:	4313      	orrs	r3, r2
 80060ae:	d009      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060b0:	4b92      	ldr	r3, [pc, #584]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80060b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060be:	4a8f      	ldr	r2, [pc, #572]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060c0:	430b      	orrs	r3, r1
 80060c2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80060c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060cc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80060d0:	643b      	str	r3, [r7, #64]	; 0x40
 80060d2:	2300      	movs	r3, #0
 80060d4:	647b      	str	r3, [r7, #68]	; 0x44
 80060d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80060da:	460b      	mov	r3, r1
 80060dc:	4313      	orrs	r3, r2
 80060de:	d00e      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060e0:	4b86      	ldr	r3, [pc, #536]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	4a85      	ldr	r2, [pc, #532]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060ea:	6113      	str	r3, [r2, #16]
 80060ec:	4b83      	ldr	r3, [pc, #524]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060ee:	6919      	ldr	r1, [r3, #16]
 80060f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060f8:	4a80      	ldr	r2, [pc, #512]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060fa:	430b      	orrs	r3, r1
 80060fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80060fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800610a:	63bb      	str	r3, [r7, #56]	; 0x38
 800610c:	2300      	movs	r3, #0
 800610e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006110:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006114:	460b      	mov	r3, r1
 8006116:	4313      	orrs	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800611a:	4b78      	ldr	r3, [pc, #480]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800611c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800611e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006128:	4a74      	ldr	r2, [pc, #464]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800612a:	430b      	orrs	r3, r1
 800612c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800612e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800613a:	633b      	str	r3, [r7, #48]	; 0x30
 800613c:	2300      	movs	r3, #0
 800613e:	637b      	str	r3, [r7, #52]	; 0x34
 8006140:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006144:	460b      	mov	r3, r1
 8006146:	4313      	orrs	r3, r2
 8006148:	d00a      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800614a:	4b6c      	ldr	r3, [pc, #432]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800614c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615a:	4a68      	ldr	r2, [pc, #416]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800615c:	430b      	orrs	r3, r1
 800615e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006168:	2100      	movs	r1, #0
 800616a:	62b9      	str	r1, [r7, #40]	; 0x28
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006172:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006176:	460b      	mov	r3, r1
 8006178:	4313      	orrs	r3, r2
 800617a:	d011      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800617c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006180:	3308      	adds	r3, #8
 8006182:	2100      	movs	r1, #0
 8006184:	4618      	mov	r0, r3
 8006186:	f001 f99d 	bl	80074c4 <RCCEx_PLL2_Config>
 800618a:	4603      	mov	r3, r0
 800618c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006190:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006198:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800619c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80061a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	2100      	movs	r1, #0
 80061aa:	6239      	str	r1, [r7, #32]
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
 80061b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80061b6:	460b      	mov	r3, r1
 80061b8:	4313      	orrs	r3, r2
 80061ba:	d011      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c0:	3308      	adds	r3, #8
 80061c2:	2101      	movs	r1, #1
 80061c4:	4618      	mov	r0, r3
 80061c6:	f001 f97d 	bl	80074c4 <RCCEx_PLL2_Config>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80061d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d003      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80061e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	2100      	movs	r1, #0
 80061ea:	61b9      	str	r1, [r7, #24]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80061f6:	460b      	mov	r3, r1
 80061f8:	4313      	orrs	r3, r2
 80061fa:	d011      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006200:	3308      	adds	r3, #8
 8006202:	2102      	movs	r1, #2
 8006204:	4618      	mov	r0, r3
 8006206:	f001 f95d 	bl	80074c4 <RCCEx_PLL2_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006210:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006218:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800621c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006228:	2100      	movs	r1, #0
 800622a:	6139      	str	r1, [r7, #16]
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006236:	460b      	mov	r3, r1
 8006238:	4313      	orrs	r3, r2
 800623a:	d011      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800623c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006240:	3328      	adds	r3, #40	; 0x28
 8006242:	2100      	movs	r1, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f001 f9ef 	bl	8007628 <RCCEx_PLL3_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006250:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006258:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800625c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	2100      	movs	r1, #0
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	f003 0310 	and.w	r3, r3, #16
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006276:	460b      	mov	r3, r1
 8006278:	4313      	orrs	r3, r2
 800627a:	d011      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800627c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006280:	3328      	adds	r3, #40	; 0x28
 8006282:	2101      	movs	r1, #1
 8006284:	4618      	mov	r0, r3
 8006286:	f001 f9cf 	bl	8007628 <RCCEx_PLL3_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006290:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006298:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800629c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80062a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	2100      	movs	r1, #0
 80062aa:	6039      	str	r1, [r7, #0]
 80062ac:	f003 0320 	and.w	r3, r3, #32
 80062b0:	607b      	str	r3, [r7, #4]
 80062b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80062b6:	460b      	mov	r3, r1
 80062b8:	4313      	orrs	r3, r2
 80062ba:	d011      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c0:	3328      	adds	r3, #40	; 0x28
 80062c2:	2102      	movs	r1, #2
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 f9af 	bl	8007628 <RCCEx_PLL3_Config>
 80062ca:	4603      	mov	r3, r0
 80062cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80062d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80062e0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e000      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80062f4:	46bd      	mov	sp, r7
 80062f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062fa:	bf00      	nop
 80062fc:	58024400 	.word	0x58024400

08006300 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b090      	sub	sp, #64	; 0x40
 8006304:	af00      	add	r7, sp, #0
 8006306:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800630a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800630e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006312:	430b      	orrs	r3, r1
 8006314:	f040 8094 	bne.w	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006318:	4b9b      	ldr	r3, [pc, #620]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800631a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	2b04      	cmp	r3, #4
 8006326:	f200 8087 	bhi.w	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800632a:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800632c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006330:	08006345 	.word	0x08006345
 8006334:	0800636d 	.word	0x0800636d
 8006338:	08006395 	.word	0x08006395
 800633c:	08006431 	.word	0x08006431
 8006340:	080063bd 	.word	0x080063bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006344:	4b90      	ldr	r3, [pc, #576]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006350:	d108      	bne.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006356:	4618      	mov	r0, r3
 8006358:	f000 ff62 	bl	8007220 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006360:	f000 bc93 	b.w	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006368:	f000 bc8f 	b.w	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800636c:	4b86      	ldr	r3, [pc, #536]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006378:	d108      	bne.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800637a:	f107 0318 	add.w	r3, r7, #24
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fca6 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006388:	f000 bc7f 	b.w	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800638c:	2300      	movs	r3, #0
 800638e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006390:	f000 bc7b 	b.w	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006394:	4b7c      	ldr	r3, [pc, #496]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800639c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063a0:	d108      	bne.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063a2:	f107 030c 	add.w	r3, r7, #12
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fde6 	bl	8006f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063b0:	f000 bc6b 	b.w	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063b8:	f000 bc67 	b.w	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063bc:	4b72      	ldr	r3, [pc, #456]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063c6:	4b70      	ldr	r3, [pc, #448]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d10c      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80063d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d109      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063d8:	4b6b      	ldr	r3, [pc, #428]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	08db      	lsrs	r3, r3, #3
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	4a6a      	ldr	r2, [pc, #424]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80063e4:	fa22 f303 	lsr.w	r3, r2, r3
 80063e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ea:	e01f      	b.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063ec:	4b66      	ldr	r3, [pc, #408]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f8:	d106      	bne.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80063fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006400:	d102      	bne.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006402:	4b63      	ldr	r3, [pc, #396]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006406:	e011      	b.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006408:	4b5f      	ldr	r3, [pc, #380]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006414:	d106      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800641c:	d102      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800641e:	4b5d      	ldr	r3, [pc, #372]	; (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006422:	e003      	b.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006428:	f000 bc2f 	b.w	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800642c:	f000 bc2d 	b.w	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006430:	4b59      	ldr	r3, [pc, #356]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006434:	f000 bc29 	b.w	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006438:	2300      	movs	r3, #0
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800643c:	f000 bc25 	b.w	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006444:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006448:	430b      	orrs	r3, r1
 800644a:	f040 80a7 	bne.w	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800644e:	4b4e      	ldr	r3, [pc, #312]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006452:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006456:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800645e:	d054      	beq.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006466:	f200 808b 	bhi.w	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006470:	f000 8083 	beq.w	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800647a:	f200 8081 	bhi.w	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006484:	d02f      	beq.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800648c:	d878      	bhi.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	2b00      	cmp	r3, #0
 8006492:	d004      	beq.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800649a:	d012      	beq.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800649c:	e070      	b.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800649e:	4b3a      	ldr	r3, [pc, #232]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064aa:	d107      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 feb5 	bl	8007220 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064ba:	e3e6      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064c0:	e3e3      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064c2:	4b31      	ldr	r3, [pc, #196]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064ce:	d107      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064d0:	f107 0318 	add.w	r3, r7, #24
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fbfb 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064de:	e3d4      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064e0:	2300      	movs	r3, #0
 80064e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064e4:	e3d1      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064e6:	4b28      	ldr	r3, [pc, #160]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064f2:	d107      	bne.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064f4:	f107 030c 	add.w	r3, r7, #12
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 fd3d 	bl	8006f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006502:	e3c2      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006504:	2300      	movs	r3, #0
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006508:	e3bf      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800650a:	4b1f      	ldr	r3, [pc, #124]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800650c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006512:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006514:	4b1c      	ldr	r3, [pc, #112]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b04      	cmp	r3, #4
 800651e:	d10c      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8006520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006522:	2b00      	cmp	r3, #0
 8006524:	d109      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006526:	4b18      	ldr	r3, [pc, #96]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	08db      	lsrs	r3, r3, #3
 800652c:	f003 0303 	and.w	r3, r3, #3
 8006530:	4a16      	ldr	r2, [pc, #88]	; (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006532:	fa22 f303 	lsr.w	r3, r2, r3
 8006536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006538:	e01e      	b.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800653a:	4b13      	ldr	r3, [pc, #76]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006546:	d106      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800654e:	d102      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006550:	4b0f      	ldr	r3, [pc, #60]	; (8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006554:	e010      	b.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006556:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006562:	d106      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800656a:	d102      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800656c:	4b09      	ldr	r3, [pc, #36]	; (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800656e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006570:	e002      	b.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006576:	e388      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006578:	e387      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800657a:	4b07      	ldr	r3, [pc, #28]	; (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800657c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800657e:	e384      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006584:	e381      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006586:	bf00      	nop
 8006588:	58024400 	.word	0x58024400
 800658c:	03d09000 	.word	0x03d09000
 8006590:	003d0900 	.word	0x003d0900
 8006594:	017d7840 	.word	0x017d7840
 8006598:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800659c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065a0:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80065a4:	430b      	orrs	r3, r1
 80065a6:	f040 809c 	bne.w	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80065aa:	4b9e      	ldr	r3, [pc, #632]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80065b2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065ba:	d054      	beq.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065c2:	f200 808b 	bhi.w	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80065cc:	f000 8083 	beq.w	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80065d6:	f200 8081 	bhi.w	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065e0:	d02f      	beq.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065e8:	d878      	bhi.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d004      	beq.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80065f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065f6:	d012      	beq.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80065f8:	e070      	b.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065fa:	4b8a      	ldr	r3, [pc, #552]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006602:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006606:	d107      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fe07 	bl	8007220 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006616:	e338      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800661c:	e335      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800661e:	4b81      	ldr	r3, [pc, #516]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800662a:	d107      	bne.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800662c:	f107 0318 	add.w	r3, r7, #24
 8006630:	4618      	mov	r0, r3
 8006632:	f000 fb4d 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800663a:	e326      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006640:	e323      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006642:	4b78      	ldr	r3, [pc, #480]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800664a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800664e:	d107      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006650:	f107 030c 	add.w	r3, r7, #12
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fc8f 	bl	8006f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800665e:	e314      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006664:	e311      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006666:	4b6f      	ldr	r3, [pc, #444]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800666a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800666e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006670:	4b6c      	ldr	r3, [pc, #432]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b04      	cmp	r3, #4
 800667a:	d10c      	bne.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800667c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667e:	2b00      	cmp	r3, #0
 8006680:	d109      	bne.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006682:	4b68      	ldr	r3, [pc, #416]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	08db      	lsrs	r3, r3, #3
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	4a66      	ldr	r2, [pc, #408]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800668e:	fa22 f303 	lsr.w	r3, r2, r3
 8006692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006694:	e01e      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006696:	4b63      	ldr	r3, [pc, #396]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066a2:	d106      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80066a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066aa:	d102      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066ac:	4b5f      	ldr	r3, [pc, #380]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80066ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066b0:	e010      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066b2:	4b5c      	ldr	r3, [pc, #368]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066be:	d106      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80066c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066c6:	d102      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066c8:	4b59      	ldr	r3, [pc, #356]	; (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80066ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066cc:	e002      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80066ce:	2300      	movs	r3, #0
 80066d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80066d2:	e2da      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80066d4:	e2d9      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066d6:	4b57      	ldr	r3, [pc, #348]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066da:	e2d6      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80066dc:	2300      	movs	r3, #0
 80066de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066e0:	e2d3      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80066e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066e6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80066ea:	430b      	orrs	r3, r1
 80066ec:	f040 80a7 	bne.w	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80066f0:	4b4c      	ldr	r3, [pc, #304]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80066f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006700:	d055      	beq.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006708:	f200 8096 	bhi.w	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800670c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006712:	f000 8084 	beq.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800671c:	f200 808c 	bhi.w	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006726:	d030      	beq.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800672e:	f200 8083 	bhi.w	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	2b00      	cmp	r3, #0
 8006736:	d004      	beq.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800673e:	d012      	beq.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006740:	e07a      	b.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006742:	4b38      	ldr	r3, [pc, #224]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800674e:	d107      	bne.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fd63 	bl	8007220 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800675e:	e294      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006764:	e291      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006766:	4b2f      	ldr	r3, [pc, #188]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800676e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006772:	d107      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006774:	f107 0318 	add.w	r3, r7, #24
 8006778:	4618      	mov	r0, r3
 800677a:	f000 faa9 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006782:	e282      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006784:	2300      	movs	r3, #0
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006788:	e27f      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800678a:	4b26      	ldr	r3, [pc, #152]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006796:	d107      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006798:	f107 030c 	add.w	r3, r7, #12
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fbeb 	bl	8006f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067a6:	e270      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067a8:	2300      	movs	r3, #0
 80067aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ac:	e26d      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067ae:	4b1d      	ldr	r3, [pc, #116]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067b8:	4b1a      	ldr	r3, [pc, #104]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d10c      	bne.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80067c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d109      	bne.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067ca:	4b16      	ldr	r3, [pc, #88]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	08db      	lsrs	r3, r3, #3
 80067d0:	f003 0303 	and.w	r3, r3, #3
 80067d4:	4a14      	ldr	r2, [pc, #80]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80067d6:	fa22 f303 	lsr.w	r3, r2, r3
 80067da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067dc:	e01e      	b.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067de:	4b11      	ldr	r3, [pc, #68]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ea:	d106      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80067ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067f2:	d102      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067f4:	4b0d      	ldr	r3, [pc, #52]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067f8:	e010      	b.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067fa:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006806:	d106      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800680e:	d102      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006810:	4b07      	ldr	r3, [pc, #28]	; (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006814:	e002      	b.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800681a:	e236      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800681c:	e235      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800681e:	4b05      	ldr	r3, [pc, #20]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006822:	e232      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006824:	58024400 	.word	0x58024400
 8006828:	03d09000 	.word	0x03d09000
 800682c:	003d0900 	.word	0x003d0900
 8006830:	017d7840 	.word	0x017d7840
 8006834:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800683c:	e225      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800683e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006842:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006846:	430b      	orrs	r3, r1
 8006848:	f040 8085 	bne.w	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800684c:	4b9c      	ldr	r3, [pc, #624]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800684e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006850:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006854:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800685c:	d06b      	beq.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006864:	d874      	bhi.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006868:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800686c:	d056      	beq.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006874:	d86c      	bhi.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006878:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800687c:	d03b      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800687e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006880:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006884:	d864      	bhi.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800688c:	d021      	beq.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006894:	d85c      	bhi.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006898:	2b00      	cmp	r3, #0
 800689a:	d004      	beq.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800689c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a2:	d004      	beq.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80068a4:	e054      	b.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80068a6:	f7fe fb75 	bl	8004f94 <HAL_RCC_GetPCLK1Freq>
 80068aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80068ac:	e1ed      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068ae:	4b84      	ldr	r3, [pc, #528]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068ba:	d107      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068bc:	f107 0318 	add.w	r3, r7, #24
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fa05 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ca:	e1de      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068d0:	e1db      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068d2:	4b7b      	ldr	r3, [pc, #492]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068de:	d107      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068e0:	f107 030c 	add.w	r3, r7, #12
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fb47 	bl	8006f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ee:	e1cc      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068f4:	e1c9      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068f6:	4b72      	ldr	r3, [pc, #456]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d109      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006902:	4b6f      	ldr	r3, [pc, #444]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	08db      	lsrs	r3, r3, #3
 8006908:	f003 0303 	and.w	r3, r3, #3
 800690c:	4a6d      	ldr	r2, [pc, #436]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800690e:	fa22 f303 	lsr.w	r3, r2, r3
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006914:	e1b9      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800691a:	e1b6      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800691c:	4b68      	ldr	r3, [pc, #416]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006928:	d102      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800692a:	4b67      	ldr	r3, [pc, #412]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800692c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800692e:	e1ac      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006934:	e1a9      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006936:	4b62      	ldr	r3, [pc, #392]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800693e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006942:	d102      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8006944:	4b61      	ldr	r3, [pc, #388]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006948:	e19f      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800694a:	2300      	movs	r3, #0
 800694c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800694e:	e19c      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006954:	e199      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800695a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800695e:	430b      	orrs	r3, r1
 8006960:	d173      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006962:	4b57      	ldr	r3, [pc, #348]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006966:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800696a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006972:	d02f      	beq.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800697a:	d863      	bhi.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	2b00      	cmp	r3, #0
 8006980:	d004      	beq.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006988:	d012      	beq.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800698a:	e05b      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800698c:	4b4c      	ldr	r3, [pc, #304]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006998:	d107      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800699a:	f107 0318 	add.w	r3, r7, #24
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 f996 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069a8:	e16f      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ae:	e16c      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069b0:	4b43      	ldr	r3, [pc, #268]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069bc:	d107      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069be:	f107 030c 	add.w	r3, r7, #12
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fad8 	bl	8006f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069cc:	e15d      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d2:	e15a      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069d4:	4b3a      	ldr	r3, [pc, #232]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80069d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069dc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069de:	4b38      	ldr	r3, [pc, #224]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d10c      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80069ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d109      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069f0:	4b33      	ldr	r3, [pc, #204]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	08db      	lsrs	r3, r3, #3
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	4a32      	ldr	r2, [pc, #200]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80069fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a02:	e01e      	b.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a04:	4b2e      	ldr	r3, [pc, #184]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a10:	d106      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a18:	d102      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a1a:	4b2b      	ldr	r3, [pc, #172]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a1e:	e010      	b.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a20:	4b27      	ldr	r3, [pc, #156]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a2c:	d106      	bne.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a34:	d102      	bne.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a36:	4b25      	ldr	r3, [pc, #148]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a3a:	e002      	b.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a40:	e123      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a42:	e122      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a48:	e11f      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006a4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a4e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006a52:	430b      	orrs	r3, r1
 8006a54:	d13c      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006a56:	4b1a      	ldr	r3, [pc, #104]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a5e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d004      	beq.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a6c:	d012      	beq.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8006a6e:	e023      	b.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a70:	4b13      	ldr	r3, [pc, #76]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a7c:	d107      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fbcc 	bl	8007220 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a8c:	e0fd      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a92:	e0fa      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a94:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aa0:	d107      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aa2:	f107 0318 	add.w	r3, r7, #24
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 f912 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ab0:	e0eb      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ab6:	e0e8      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006abc:	e0e5      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006abe:	bf00      	nop
 8006ac0:	58024400 	.word	0x58024400
 8006ac4:	03d09000 	.word	0x03d09000
 8006ac8:	003d0900 	.word	0x003d0900
 8006acc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006ad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ad4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006ad8:	430b      	orrs	r3, r1
 8006ada:	f040 8085 	bne.w	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006ade:	4b6d      	ldr	r3, [pc, #436]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006ae6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aee:	d06b      	beq.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006af6:	d874      	bhi.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006afe:	d056      	beq.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b06:	d86c      	bhi.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b0e:	d03b      	beq.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8006b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b16:	d864      	bhi.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b1e:	d021      	beq.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b26:	d85c      	bhi.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d004      	beq.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b34:	d004      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006b36:	e054      	b.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006b38:	f000 f8b4 	bl	8006ca4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006b3c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b3e:	e0a4      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b40:	4b54      	ldr	r3, [pc, #336]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b4c:	d107      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b4e:	f107 0318 	add.w	r3, r7, #24
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 f8bc 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b5c:	e095      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b62:	e092      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b64:	4b4b      	ldr	r3, [pc, #300]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b70:	d107      	bne.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b72:	f107 030c 	add.w	r3, r7, #12
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 f9fe 	bl	8006f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b80:	e083      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b86:	e080      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b88:	4b42      	ldr	r3, [pc, #264]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d109      	bne.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b94:	4b3f      	ldr	r3, [pc, #252]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	08db      	lsrs	r3, r3, #3
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	4a3e      	ldr	r2, [pc, #248]	; (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ba6:	e070      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bac:	e06d      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006bae:	4b39      	ldr	r3, [pc, #228]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bba:	d102      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006bbc:	4b37      	ldr	r3, [pc, #220]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bc0:	e063      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bc6:	e060      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006bc8:	4b32      	ldr	r3, [pc, #200]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bd4:	d102      	bne.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8006bd6:	4b32      	ldr	r3, [pc, #200]	; (8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bda:	e056      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006be0:	e053      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006be6:	e050      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bec:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	d148      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006bf4:	4b27      	ldr	r3, [pc, #156]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bfc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c04:	d02a      	beq.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c0c:	d838      	bhi.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d004      	beq.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c1a:	d00d      	beq.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006c1c:	e030      	b.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c1e:	4b1d      	ldr	r3, [pc, #116]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c2a:	d102      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006c2c:	4b1c      	ldr	r3, [pc, #112]	; (8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c30:	e02b      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c36:	e028      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c38:	4b16      	ldr	r3, [pc, #88]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c44:	d107      	bne.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fae8 	bl	8007220 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c54:	e019      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c5a:	e016      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c5c:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c68:	d107      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c6a:	f107 0318 	add.w	r3, r7, #24
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 f82e 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c78:	e007      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c7e:	e004      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c84:	e001      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3740      	adds	r7, #64	; 0x40
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	58024400 	.word	0x58024400
 8006c98:	03d09000 	.word	0x03d09000
 8006c9c:	003d0900 	.word	0x003d0900
 8006ca0:	017d7840 	.word	0x017d7840

08006ca4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ca8:	f7fe f944 	bl	8004f34 <HAL_RCC_GetHCLKFreq>
 8006cac:	4602      	mov	r2, r0
 8006cae:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	091b      	lsrs	r3, r3, #4
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	4904      	ldr	r1, [pc, #16]	; (8006ccc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006cba:	5ccb      	ldrb	r3, [r1, r3]
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	58024400 	.word	0x58024400
 8006ccc:	080091a8 	.word	0x080091a8

08006cd0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b089      	sub	sp, #36	; 0x24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cd8:	4ba1      	ldr	r3, [pc, #644]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	f003 0303 	and.w	r3, r3, #3
 8006ce0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006ce2:	4b9f      	ldr	r3, [pc, #636]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce6:	0b1b      	lsrs	r3, r3, #12
 8006ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006cee:	4b9c      	ldr	r3, [pc, #624]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	091b      	lsrs	r3, r3, #4
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006cfa:	4b99      	ldr	r3, [pc, #612]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfe:	08db      	lsrs	r3, r3, #3
 8006d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	fb02 f303 	mul.w	r3, r2, r3
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8111 	beq.w	8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	f000 8083 	beq.w	8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	f200 80a1 	bhi.w	8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d056      	beq.n	8006de8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006d3a:	e099      	b.n	8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d3c:	4b88      	ldr	r3, [pc, #544]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d02d      	beq.n	8006da4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d48:	4b85      	ldr	r3, [pc, #532]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	08db      	lsrs	r3, r3, #3
 8006d4e:	f003 0303 	and.w	r3, r3, #3
 8006d52:	4a84      	ldr	r2, [pc, #528]	; (8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d54:	fa22 f303 	lsr.w	r3, r2, r3
 8006d58:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d72:	4b7b      	ldr	r3, [pc, #492]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006da2:	e087      	b.n	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	ee07 3a90 	vmov	s15, r3
 8006daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006f6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db6:	4b6a      	ldr	r3, [pc, #424]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dbe:	ee07 3a90 	vmov	s15, r3
 8006dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006de6:	e065      	b.n	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	ee07 3a90 	vmov	s15, r3
 8006dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfa:	4b59      	ldr	r3, [pc, #356]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e2a:	e043      	b.n	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3e:	4b48      	ldr	r3, [pc, #288]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e6e:	e021      	b.n	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e82:	4b37      	ldr	r3, [pc, #220]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006f68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006eb4:	4b2a      	ldr	r3, [pc, #168]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb8:	0a5b      	lsrs	r3, r3, #9
 8006eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ece:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eda:	ee17 2a90 	vmov	r2, s15
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006ee2:	4b1f      	ldr	r3, [pc, #124]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	0c1b      	lsrs	r3, r3, #16
 8006ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eec:	ee07 3a90 	vmov	s15, r3
 8006ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ef8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006efc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f08:	ee17 2a90 	vmov	r2, s15
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006f10:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f14:	0e1b      	lsrs	r3, r3, #24
 8006f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f36:	ee17 2a90 	vmov	r2, s15
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f3e:	e008      	b.n	8006f52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	609a      	str	r2, [r3, #8]
}
 8006f52:	bf00      	nop
 8006f54:	3724      	adds	r7, #36	; 0x24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	58024400 	.word	0x58024400
 8006f64:	03d09000 	.word	0x03d09000
 8006f68:	46000000 	.word	0x46000000
 8006f6c:	4c742400 	.word	0x4c742400
 8006f70:	4a742400 	.word	0x4a742400
 8006f74:	4bbebc20 	.word	0x4bbebc20

08006f78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b089      	sub	sp, #36	; 0x24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f80:	4ba1      	ldr	r3, [pc, #644]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f84:	f003 0303 	and.w	r3, r3, #3
 8006f88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006f8a:	4b9f      	ldr	r3, [pc, #636]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8e:	0d1b      	lsrs	r3, r3, #20
 8006f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006f96:	4b9c      	ldr	r3, [pc, #624]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	0a1b      	lsrs	r3, r3, #8
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006fa2:	4b99      	ldr	r3, [pc, #612]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa6:	08db      	lsrs	r3, r3, #3
 8006fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	fb02 f303 	mul.w	r3, r2, r3
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 8111 	beq.w	80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	f000 8083 	beq.w	80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	f200 80a1 	bhi.w	8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d003      	beq.n	8006fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d056      	beq.n	8007090 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006fe2:	e099      	b.n	8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fe4:	4b88      	ldr	r3, [pc, #544]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0320 	and.w	r3, r3, #32
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d02d      	beq.n	800704c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ff0:	4b85      	ldr	r3, [pc, #532]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	08db      	lsrs	r3, r3, #3
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	4a84      	ldr	r2, [pc, #528]	; (800720c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8007000:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	ee07 3a90 	vmov	s15, r3
 8007008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800701a:	4b7b      	ldr	r3, [pc, #492]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800702a:	ed97 6a03 	vldr	s12, [r7, #12]
 800702e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007210 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800703a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800703e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007046:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800704a:	e087      	b.n	800715c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007056:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007214 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800705a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705e:	4b6a      	ldr	r3, [pc, #424]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007072:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007210 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800708e:	e065      	b.n	800715c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007218 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800709e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a2:	4b59      	ldr	r3, [pc, #356]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007210 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d2:	e043      	b.n	800715c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800721c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80070e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e6:	4b48      	ldr	r3, [pc, #288]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007210 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800710a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007116:	e021      	b.n	800715c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007122:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007218 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800712a:	4b37      	ldr	r3, [pc, #220]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713a:	ed97 6a03 	vldr	s12, [r7, #12]
 800713e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007210 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800714a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800714e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800715a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800715c:	4b2a      	ldr	r3, [pc, #168]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800715e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007160:	0a5b      	lsrs	r3, r3, #9
 8007162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007172:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007176:	edd7 6a07 	vldr	s13, [r7, #28]
 800717a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800717e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007182:	ee17 2a90 	vmov	r2, s15
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800718a:	4b1f      	ldr	r3, [pc, #124]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	0c1b      	lsrs	r3, r3, #16
 8007190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007194:	ee07 3a90 	vmov	s15, r3
 8007198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071b0:	ee17 2a90 	vmov	r2, s15
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80071b8:	4b13      	ldr	r3, [pc, #76]	; (8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	0e1b      	lsrs	r3, r3, #24
 80071be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80071d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071de:	ee17 2a90 	vmov	r2, s15
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80071e6:	e008      	b.n	80071fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	609a      	str	r2, [r3, #8]
}
 80071fa:	bf00      	nop
 80071fc:	3724      	adds	r7, #36	; 0x24
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	58024400 	.word	0x58024400
 800720c:	03d09000 	.word	0x03d09000
 8007210:	46000000 	.word	0x46000000
 8007214:	4c742400 	.word	0x4c742400
 8007218:	4a742400 	.word	0x4a742400
 800721c:	4bbebc20 	.word	0x4bbebc20

08007220 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007220:	b480      	push	{r7}
 8007222:	b089      	sub	sp, #36	; 0x24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007228:	4ba0      	ldr	r3, [pc, #640]	; (80074ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722c:	f003 0303 	and.w	r3, r3, #3
 8007230:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007232:	4b9e      	ldr	r3, [pc, #632]	; (80074ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007236:	091b      	lsrs	r3, r3, #4
 8007238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800723c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800723e:	4b9b      	ldr	r3, [pc, #620]	; (80074ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007248:	4b98      	ldr	r3, [pc, #608]	; (80074ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800724a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724c:	08db      	lsrs	r3, r3, #3
 800724e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	fb02 f303 	mul.w	r3, r2, r3
 8007258:	ee07 3a90 	vmov	s15, r3
 800725c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007260:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 8111 	beq.w	800748e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	2b02      	cmp	r3, #2
 8007270:	f000 8083 	beq.w	800737a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	2b02      	cmp	r3, #2
 8007278:	f200 80a1 	bhi.w	80073be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d056      	beq.n	8007336 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007288:	e099      	b.n	80073be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800728a:	4b88      	ldr	r3, [pc, #544]	; (80074ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0320 	and.w	r3, r3, #32
 8007292:	2b00      	cmp	r3, #0
 8007294:	d02d      	beq.n	80072f2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007296:	4b85      	ldr	r3, [pc, #532]	; (80074ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	08db      	lsrs	r3, r3, #3
 800729c:	f003 0303 	and.w	r3, r3, #3
 80072a0:	4a83      	ldr	r2, [pc, #524]	; (80074b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80072a2:	fa22 f303 	lsr.w	r3, r2, r3
 80072a6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	ee07 3a90 	vmov	s15, r3
 80072b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c0:	4b7a      	ldr	r3, [pc, #488]	; (80074ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c8:	ee07 3a90 	vmov	s15, r3
 80072cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80072d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80074b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072f0:	e087      	b.n	8007402 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	ee07 3a90 	vmov	s15, r3
 80072f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80074b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007304:	4b69      	ldr	r3, [pc, #420]	; (80074ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730c:	ee07 3a90 	vmov	s15, r3
 8007310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007314:	ed97 6a03 	vldr	s12, [r7, #12]
 8007318:	eddf 5a66 	vldr	s11, [pc, #408]	; 80074b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800731c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007320:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007324:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007328:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007330:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007334:	e065      	b.n	8007402 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	ee07 3a90 	vmov	s15, r3
 800733c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007340:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80074bc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007348:	4b58      	ldr	r3, [pc, #352]	; (80074ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800734a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007350:	ee07 3a90 	vmov	s15, r3
 8007354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007358:	ed97 6a03 	vldr	s12, [r7, #12]
 800735c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80074b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007360:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007364:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800736c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007374:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007378:	e043      	b.n	8007402 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	ee07 3a90 	vmov	s15, r3
 8007380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007384:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80074c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800738c:	4b47      	ldr	r3, [pc, #284]	; (80074ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800738e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007394:	ee07 3a90 	vmov	s15, r3
 8007398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739c:	ed97 6a03 	vldr	s12, [r7, #12]
 80073a0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80074b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80073a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073bc:	e021      	b.n	8007402 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	ee07 3a90 	vmov	s15, r3
 80073c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80074b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80073cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073d0:	4b36      	ldr	r3, [pc, #216]	; (80074ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d8:	ee07 3a90 	vmov	s15, r3
 80073dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80073e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80074b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80073e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007400:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007402:	4b2a      	ldr	r3, [pc, #168]	; (80074ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007406:	0a5b      	lsrs	r3, r3, #9
 8007408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800740c:	ee07 3a90 	vmov	s15, r3
 8007410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007414:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007418:	ee37 7a87 	vadd.f32	s14, s15, s14
 800741c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007428:	ee17 2a90 	vmov	r2, s15
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007430:	4b1e      	ldr	r3, [pc, #120]	; (80074ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007434:	0c1b      	lsrs	r3, r3, #16
 8007436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800744a:	edd7 6a07 	vldr	s13, [r7, #28]
 800744e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007456:	ee17 2a90 	vmov	r2, s15
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800745e:	4b13      	ldr	r3, [pc, #76]	; (80074ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	0e1b      	lsrs	r3, r3, #24
 8007464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007468:	ee07 3a90 	vmov	s15, r3
 800746c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007470:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007474:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007478:	edd7 6a07 	vldr	s13, [r7, #28]
 800747c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007484:	ee17 2a90 	vmov	r2, s15
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800748c:	e008      	b.n	80074a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	609a      	str	r2, [r3, #8]
}
 80074a0:	bf00      	nop
 80074a2:	3724      	adds	r7, #36	; 0x24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	58024400 	.word	0x58024400
 80074b0:	03d09000 	.word	0x03d09000
 80074b4:	46000000 	.word	0x46000000
 80074b8:	4c742400 	.word	0x4c742400
 80074bc:	4a742400 	.word	0x4a742400
 80074c0:	4bbebc20 	.word	0x4bbebc20

080074c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074d2:	4b53      	ldr	r3, [pc, #332]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d101      	bne.n	80074e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e099      	b.n	8007616 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80074e2:	4b4f      	ldr	r3, [pc, #316]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a4e      	ldr	r2, [pc, #312]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 80074e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ee:	f7fa f9fb 	bl	80018e8 <HAL_GetTick>
 80074f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074f4:	e008      	b.n	8007508 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074f6:	f7fa f9f7 	bl	80018e8 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d901      	bls.n	8007508 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e086      	b.n	8007616 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007508:	4b45      	ldr	r3, [pc, #276]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1f0      	bne.n	80074f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007514:	4b42      	ldr	r3, [pc, #264]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 8007516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007518:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	031b      	lsls	r3, r3, #12
 8007522:	493f      	ldr	r1, [pc, #252]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 8007524:	4313      	orrs	r3, r2
 8007526:	628b      	str	r3, [r1, #40]	; 0x28
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	3b01      	subs	r3, #1
 800752e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	3b01      	subs	r3, #1
 8007538:	025b      	lsls	r3, r3, #9
 800753a:	b29b      	uxth	r3, r3
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	3b01      	subs	r3, #1
 8007544:	041b      	lsls	r3, r3, #16
 8007546:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	3b01      	subs	r3, #1
 8007552:	061b      	lsls	r3, r3, #24
 8007554:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007558:	4931      	ldr	r1, [pc, #196]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 800755a:	4313      	orrs	r3, r2
 800755c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800755e:	4b30      	ldr	r3, [pc, #192]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 8007560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007562:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	492d      	ldr	r1, [pc, #180]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 800756c:	4313      	orrs	r3, r2
 800756e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007570:	4b2b      	ldr	r3, [pc, #172]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 8007572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007574:	f023 0220 	bic.w	r2, r3, #32
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	4928      	ldr	r1, [pc, #160]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 800757e:	4313      	orrs	r3, r2
 8007580:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007582:	4b27      	ldr	r3, [pc, #156]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 8007584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007586:	4a26      	ldr	r2, [pc, #152]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 8007588:	f023 0310 	bic.w	r3, r3, #16
 800758c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800758e:	4b24      	ldr	r3, [pc, #144]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 8007590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007592:	4b24      	ldr	r3, [pc, #144]	; (8007624 <RCCEx_PLL2_Config+0x160>)
 8007594:	4013      	ands	r3, r2
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	69d2      	ldr	r2, [r2, #28]
 800759a:	00d2      	lsls	r2, r2, #3
 800759c:	4920      	ldr	r1, [pc, #128]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80075a2:	4b1f      	ldr	r3, [pc, #124]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a6:	4a1e      	ldr	r2, [pc, #120]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075a8:	f043 0310 	orr.w	r3, r3, #16
 80075ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d106      	bne.n	80075c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80075b4:	4b1a      	ldr	r3, [pc, #104]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	4a19      	ldr	r2, [pc, #100]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075c0:	e00f      	b.n	80075e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d106      	bne.n	80075d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80075c8:	4b15      	ldr	r3, [pc, #84]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	4a14      	ldr	r2, [pc, #80]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075d4:	e005      	b.n	80075e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80075d6:	4b12      	ldr	r3, [pc, #72]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075da:	4a11      	ldr	r2, [pc, #68]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80075e2:	4b0f      	ldr	r3, [pc, #60]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a0e      	ldr	r2, [pc, #56]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ee:	f7fa f97b 	bl	80018e8 <HAL_GetTick>
 80075f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075f4:	e008      	b.n	8007608 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075f6:	f7fa f977 	bl	80018e8 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b02      	cmp	r3, #2
 8007602:	d901      	bls.n	8007608 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e006      	b.n	8007616 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007608:	4b05      	ldr	r3, [pc, #20]	; (8007620 <RCCEx_PLL2_Config+0x15c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d0f0      	beq.n	80075f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	58024400 	.word	0x58024400
 8007624:	ffff0007 	.word	0xffff0007

08007628 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007636:	4b53      	ldr	r3, [pc, #332]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763a:	f003 0303 	and.w	r3, r3, #3
 800763e:	2b03      	cmp	r3, #3
 8007640:	d101      	bne.n	8007646 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e099      	b.n	800777a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007646:	4b4f      	ldr	r3, [pc, #316]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a4e      	ldr	r2, [pc, #312]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 800764c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007652:	f7fa f949 	bl	80018e8 <HAL_GetTick>
 8007656:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007658:	e008      	b.n	800766c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800765a:	f7fa f945 	bl	80018e8 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d901      	bls.n	800766c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e086      	b.n	800777a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800766c:	4b45      	ldr	r3, [pc, #276]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1f0      	bne.n	800765a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007678:	4b42      	ldr	r3, [pc, #264]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 800767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	051b      	lsls	r3, r3, #20
 8007686:	493f      	ldr	r1, [pc, #252]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007688:	4313      	orrs	r3, r2
 800768a:	628b      	str	r3, [r1, #40]	; 0x28
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	3b01      	subs	r3, #1
 8007692:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	3b01      	subs	r3, #1
 800769c:	025b      	lsls	r3, r3, #9
 800769e:	b29b      	uxth	r3, r3
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	041b      	lsls	r3, r3, #16
 80076aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	061b      	lsls	r3, r3, #24
 80076b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076bc:	4931      	ldr	r1, [pc, #196]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80076c2:	4b30      	ldr	r3, [pc, #192]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	492d      	ldr	r1, [pc, #180]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076d0:	4313      	orrs	r3, r2
 80076d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80076d4:	4b2b      	ldr	r3, [pc, #172]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	4928      	ldr	r1, [pc, #160]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076e6:	4b27      	ldr	r3, [pc, #156]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ea:	4a26      	ldr	r2, [pc, #152]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076f2:	4b24      	ldr	r3, [pc, #144]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076f6:	4b24      	ldr	r3, [pc, #144]	; (8007788 <RCCEx_PLL3_Config+0x160>)
 80076f8:	4013      	ands	r3, r2
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	69d2      	ldr	r2, [r2, #28]
 80076fe:	00d2      	lsls	r2, r2, #3
 8007700:	4920      	ldr	r1, [pc, #128]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007702:	4313      	orrs	r3, r2
 8007704:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007706:	4b1f      	ldr	r3, [pc, #124]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770a:	4a1e      	ldr	r2, [pc, #120]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 800770c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007710:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d106      	bne.n	8007726 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007718:	4b1a      	ldr	r3, [pc, #104]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	4a19      	ldr	r2, [pc, #100]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 800771e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007722:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007724:	e00f      	b.n	8007746 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d106      	bne.n	800773a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800772c:	4b15      	ldr	r3, [pc, #84]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	4a14      	ldr	r2, [pc, #80]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007732:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007736:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007738:	e005      	b.n	8007746 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800773a:	4b12      	ldr	r3, [pc, #72]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 800773c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773e:	4a11      	ldr	r2, [pc, #68]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007744:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007746:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a0e      	ldr	r2, [pc, #56]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 800774c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007752:	f7fa f8c9 	bl	80018e8 <HAL_GetTick>
 8007756:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007758:	e008      	b.n	800776c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800775a:	f7fa f8c5 	bl	80018e8 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d901      	bls.n	800776c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e006      	b.n	800777a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800776c:	4b05      	ldr	r3, [pc, #20]	; (8007784 <RCCEx_PLL3_Config+0x15c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0f0      	beq.n	800775a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007778:	7bfb      	ldrb	r3, [r7, #15]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	58024400 	.word	0x58024400
 8007788:	ffff0007 	.word	0xffff0007

0800778c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b02      	cmp	r3, #2
 800779e:	d904      	bls.n	80077aa <HAL_SAI_InitProtocol+0x1e>
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	3b03      	subs	r3, #3
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d812      	bhi.n	80077ce <HAL_SAI_InitProtocol+0x42>
 80077a8:	e008      	b.n	80077bc <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	68b9      	ldr	r1, [r7, #8]
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 fb8b 	bl	8007ecc <SAI_InitI2S>
 80077b6:	4603      	mov	r3, r0
 80077b8:	75fb      	strb	r3, [r7, #23]
      break;
 80077ba:	e00b      	b.n	80077d4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	68b9      	ldr	r1, [r7, #8]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 fc34 	bl	8008030 <SAI_InitPCM>
 80077c8:	4603      	mov	r3, r0
 80077ca:	75fb      	strb	r3, [r7, #23]
      break;
 80077cc:	e002      	b.n	80077d4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	75fb      	strb	r3, [r7, #23]
      break;
 80077d2:	bf00      	nop
  }

  if (status == HAL_OK)
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d104      	bne.n	80077e4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 f808 	bl	80077f0 <HAL_SAI_Init>
 80077e0:	4603      	mov	r3, r0
 80077e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80077e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08a      	sub	sp, #40	; 0x28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e201      	b.n	8007c06 <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007808:	2b01      	cmp	r3, #1
 800780a:	d113      	bne.n	8007834 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a99      	ldr	r2, [pc, #612]	; (8007a78 <HAL_SAI_Init+0x288>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d004      	beq.n	8007820 <HAL_SAI_Init+0x30>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a98      	ldr	r2, [pc, #608]	; (8007a7c <HAL_SAI_Init+0x28c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d107      	bne.n	8007830 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007824:	2b01      	cmp	r3, #1
 8007826:	d103      	bne.n	8007830 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e1e8      	b.n	8007c06 <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a8f      	ldr	r2, [pc, #572]	; (8007a78 <HAL_SAI_Init+0x288>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d004      	beq.n	8007848 <HAL_SAI_Init+0x58>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a8f      	ldr	r2, [pc, #572]	; (8007a80 <HAL_SAI_Init+0x290>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d102      	bne.n	800784e <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8007848:	4b8e      	ldr	r3, [pc, #568]	; (8007a84 <HAL_SAI_Init+0x294>)
 800784a:	61bb      	str	r3, [r7, #24]
 800784c:	e00e      	b.n	800786c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a8a      	ldr	r2, [pc, #552]	; (8007a7c <HAL_SAI_Init+0x28c>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d004      	beq.n	8007862 <HAL_SAI_Init+0x72>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a8a      	ldr	r2, [pc, #552]	; (8007a88 <HAL_SAI_Init+0x298>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d102      	bne.n	8007868 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8007862:	4b8a      	ldr	r3, [pc, #552]	; (8007a8c <HAL_SAI_Init+0x29c>)
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	e001      	b.n	800786c <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e1cc      	b.n	8007c06 <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d106      	bne.n	8007886 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7f9 fce7 	bl	8001254 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fc8c 	bl	80081a4 <SAI_Disable>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e1b7      	b.n	8007c06 <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2202      	movs	r2, #2
 800789a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d00c      	beq.n	80078c0 <HAL_SAI_Init+0xd0>
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d80d      	bhi.n	80078c6 <HAL_SAI_Init+0xd6>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <HAL_SAI_Init+0xc4>
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d003      	beq.n	80078ba <HAL_SAI_Init+0xca>
 80078b2:	e008      	b.n	80078c6 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80078b4:	2300      	movs	r3, #0
 80078b6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80078b8:	e008      	b.n	80078cc <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80078ba:	2310      	movs	r3, #16
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80078be:	e005      	b.n	80078cc <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80078c0:	2320      	movs	r3, #32
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80078c4:	e002      	b.n	80078cc <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80078ca:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	2b05      	cmp	r3, #5
 80078d2:	d822      	bhi.n	800791a <HAL_SAI_Init+0x12a>
 80078d4:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <HAL_SAI_Init+0xec>)
 80078d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078da:	bf00      	nop
 80078dc:	080078f5 	.word	0x080078f5
 80078e0:	080078fb 	.word	0x080078fb
 80078e4:	08007903 	.word	0x08007903
 80078e8:	0800791b 	.word	0x0800791b
 80078ec:	0800791b 	.word	0x0800791b
 80078f0:	0800790b 	.word	0x0800790b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80078f4:	2300      	movs	r3, #0
 80078f6:	61fb      	str	r3, [r7, #28]
      break;
 80078f8:	e012      	b.n	8007920 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80078fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078fe:	61fb      	str	r3, [r7, #28]
      break;
 8007900:	e00e      	b.n	8007920 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007902:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007906:	61fb      	str	r3, [r7, #28]
      break;
 8007908:	e00a      	b.n	8007920 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800790a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800790e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	f043 0303 	orr.w	r3, r3, #3
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007918:	e002      	b.n	8007920 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800791a:	2300      	movs	r3, #0
 800791c:	61fb      	str	r3, [r7, #28]
      break;
 800791e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007924:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 808a 	beq.w	8007a44 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a4f      	ldr	r2, [pc, #316]	; (8007a78 <HAL_SAI_Init+0x288>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d004      	beq.n	8007948 <HAL_SAI_Init+0x158>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a4f      	ldr	r2, [pc, #316]	; (8007a80 <HAL_SAI_Init+0x290>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d106      	bne.n	8007956 <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007948:	f44f 7080 	mov.w	r0, #256	; 0x100
 800794c:	f04f 0100 	mov.w	r1, #0
 8007950:	f7fe fcd6 	bl	8006300 <HAL_RCCEx_GetPeriphCLKFreq>
 8007954:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a48      	ldr	r2, [pc, #288]	; (8007a7c <HAL_SAI_Init+0x28c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d106      	bne.n	800796e <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8007960:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007964:	f04f 0100 	mov.w	r1, #0
 8007968:	f7fe fcca 	bl	8006300 <HAL_RCCEx_GetPeriphCLKFreq>
 800796c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a45      	ldr	r2, [pc, #276]	; (8007a88 <HAL_SAI_Init+0x298>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d106      	bne.n	8007986 <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007978:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800797c:	f04f 0100 	mov.w	r1, #0
 8007980:	f7fe fcbe 	bl	8006300 <HAL_RCCEx_GetPeriphCLKFreq>
 8007984:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800798e:	d120      	bne.n	80079d2 <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007994:	2b04      	cmp	r3, #4
 8007996:	d102      	bne.n	800799e <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8007998:	2340      	movs	r3, #64	; 0x40
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	e00a      	b.n	80079b4 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a2:	2b08      	cmp	r3, #8
 80079a4:	d103      	bne.n	80079ae <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80079a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	e002      	b.n	80079b4 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	4613      	mov	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	4619      	mov	r1, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	fb02 f303 	mul.w	r3, r2, r3
 80079ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80079ce:	613b      	str	r3, [r7, #16]
 80079d0:	e017      	b.n	8007a02 <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079da:	d101      	bne.n	80079e0 <HAL_SAI_Init+0x1f0>
 80079dc:	2302      	movs	r3, #2
 80079de:	e000      	b.n	80079e2 <HAL_SAI_Init+0x1f2>
 80079e0:	2301      	movs	r3, #1
 80079e2:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	4619      	mov	r1, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a1b      	ldr	r3, [r3, #32]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	fb02 f303 	mul.w	r3, r2, r3
 80079fa:	021b      	lsls	r3, r3, #8
 80079fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a00:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	4a22      	ldr	r2, [pc, #136]	; (8007a90 <HAL_SAI_Init+0x2a0>)
 8007a06:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0a:	08da      	lsrs	r2, r3, #3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007a10:	6939      	ldr	r1, [r7, #16]
 8007a12:	4b1f      	ldr	r3, [pc, #124]	; (8007a90 <HAL_SAI_Init+0x2a0>)
 8007a14:	fba3 2301 	umull	r2, r3, r3, r1
 8007a18:	08da      	lsrs	r2, r3, #3
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	1aca      	subs	r2, r1, r3
 8007a24:	2a08      	cmp	r2, #8
 8007a26:	d904      	bls.n	8007a32 <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	1c5a      	adds	r2, r3, #1
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d104      	bne.n	8007a44 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3e:	085a      	lsrs	r2, r3, #1
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <HAL_SAI_Init+0x264>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d109      	bne.n	8007a68 <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d101      	bne.n	8007a60 <HAL_SAI_Init+0x270>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e001      	b.n	8007a64 <HAL_SAI_Init+0x274>
 8007a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a64:	623b      	str	r3, [r7, #32]
 8007a66:	e017      	b.n	8007a98 <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d111      	bne.n	8007a94 <HAL_SAI_Init+0x2a4>
 8007a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a74:	e00f      	b.n	8007a96 <HAL_SAI_Init+0x2a6>
 8007a76:	bf00      	nop
 8007a78:	40015804 	.word	0x40015804
 8007a7c:	58005404 	.word	0x58005404
 8007a80:	40015824 	.word	0x40015824
 8007a84:	40015800 	.word	0x40015800
 8007a88:	58005424 	.word	0x58005424
 8007a8c:	58005400 	.word	0x58005400
 8007a90:	cccccccd 	.word	0xcccccccd
 8007a94:	2300      	movs	r3, #0
 8007a96:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6819      	ldr	r1, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	4b5b      	ldr	r3, [pc, #364]	; (8007c10 <HAL_SAI_Init+0x420>)
 8007aa4:	400b      	ands	r3, r1
 8007aa6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6819      	ldr	r1, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007abc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8007ad0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007adc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	051b      	lsls	r3, r3, #20
 8007ae4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007aea:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6859      	ldr	r1, [r3, #4]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	4b43      	ldr	r3, [pc, #268]	; (8007c14 <HAL_SAI_Init+0x424>)
 8007b06:	400b      	ands	r3, r1
 8007b08:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6859      	ldr	r1, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	69da      	ldr	r2, [r3, #28]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6899      	ldr	r1, [r3, #8]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	4b39      	ldr	r3, [pc, #228]	; (8007c18 <HAL_SAI_Init+0x428>)
 8007b34:	400b      	ands	r3, r1
 8007b36:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6899      	ldr	r1, [r3, #8]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b42:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007b48:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8007b4e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8007b54:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007b5e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68d9      	ldr	r1, [r3, #12]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007b76:	400b      	ands	r3, r1
 8007b78:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68d9      	ldr	r1, [r3, #12]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b88:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b8e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007b90:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b96:	3b01      	subs	r3, #1
 8007b98:	021b      	lsls	r3, r3, #8
 8007b9a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a1c      	ldr	r2, [pc, #112]	; (8007c1c <HAL_SAI_Init+0x42c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d004      	beq.n	8007bb8 <HAL_SAI_Init+0x3c8>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a1b      	ldr	r2, [pc, #108]	; (8007c20 <HAL_SAI_Init+0x430>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d119      	bne.n	8007bec <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bbc:	f023 0201 	bic.w	r2, r3, #1
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d10e      	bne.n	8007bec <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be4:	f043 0201 	orr.w	r2, r3, #1
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3728      	adds	r7, #40	; 0x28
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	f005c010 	.word	0xf005c010
 8007c14:	ffff1ff0 	.word	0xffff1ff0
 8007c18:	fff88000 	.word	0xfff88000
 8007c1c:	40015804 	.word	0x40015804
 8007c20:	58005404 	.word	0x58005404

08007c24 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007c32:	f7f9 fe59 	bl	80018e8 <HAL_GetTick>
 8007c36:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <HAL_SAI_Transmit_DMA+0x20>
 8007c3e:	88fb      	ldrh	r3, [r7, #6]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e098      	b.n	8007d7a <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	f040 8091 	bne.w	8007d78 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d101      	bne.n	8007c64 <HAL_SAI_Transmit_DMA+0x40>
 8007c60:	2302      	movs	r3, #2
 8007c62:	e08a      	b.n	8007d7a <HAL_SAI_Transmit_DMA+0x156>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	88fa      	ldrh	r2, [r7, #6]
 8007c76:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	88fa      	ldrh	r2, [r7, #6]
 8007c7e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2212      	movs	r2, #18
 8007c8e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c98:	4a3a      	ldr	r2, [pc, #232]	; (8007d84 <HAL_SAI_Transmit_DMA+0x160>)
 8007c9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ca2:	4a39      	ldr	r2, [pc, #228]	; (8007d88 <HAL_SAI_Transmit_DMA+0x164>)
 8007ca4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cac:	4a37      	ldr	r2, [pc, #220]	; (8007d8c <HAL_SAI_Transmit_DMA+0x168>)
 8007cae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	331c      	adds	r3, #28
 8007ccc:	461a      	mov	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007cd4:	f7fa faa0 	bl	8002218 <HAL_DMA_Start_IT>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e047      	b.n	8007d7a <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007cea:	2100      	movs	r1, #0
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 fa21 	bl	8008134 <SAI_InterruptFlag>
 8007cf2:	4601      	mov	r1, r0
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691a      	ldr	r2, [r3, #16]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007d10:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007d12:	e015      	b.n	8007d40 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007d14:	f7f9 fde8 	bl	80018e8 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d22:	d90d      	bls.n	8007d40 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e01c      	b.n	8007d7a <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0e2      	beq.n	8007d14 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d107      	bne.n	8007d6c <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d6a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	e000      	b.n	8007d7a <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8007d78:	2302      	movs	r3, #2
  }
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	08008279 	.word	0x08008279
 8007d88:	08008219 	.word	0x08008219
 8007d8c:	08008311 	.word	0x08008311

08007d90 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <HAL_SAI_Receive_DMA+0x1a>
 8007da4:	88fb      	ldrh	r3, [r7, #6]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e079      	b.n	8007ea2 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d172      	bne.n	8007ea0 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d101      	bne.n	8007dc8 <HAL_SAI_Receive_DMA+0x38>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	e06c      	b.n	8007ea2 <HAL_SAI_Receive_DMA+0x112>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	88fa      	ldrh	r2, [r7, #6]
 8007dda:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	88fa      	ldrh	r2, [r7, #6]
 8007de2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2222      	movs	r2, #34	; 0x22
 8007df2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dfc:	4a2b      	ldr	r2, [pc, #172]	; (8007eac <HAL_SAI_Receive_DMA+0x11c>)
 8007dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e06:	4a2a      	ldr	r2, [pc, #168]	; (8007eb0 <HAL_SAI_Receive_DMA+0x120>)
 8007e08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e10:	4a28      	ldr	r2, [pc, #160]	; (8007eb4 <HAL_SAI_Receive_DMA+0x124>)
 8007e12:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	331c      	adds	r3, #28
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e30:	461a      	mov	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007e38:	f7fa f9ee 	bl	8002218 <HAL_DMA_Start_IT>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d005      	beq.n	8007e4e <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e029      	b.n	8007ea2 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007e4e:	2100      	movs	r1, #0
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 f96f 	bl	8008134 <SAI_InterruptFlag>
 8007e56:	4601      	mov	r1, r0
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	691a      	ldr	r2, [r3, #16]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007e74:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d107      	bne.n	8007e94 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007e92:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	e000      	b.n	8007ea2 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8007ea0:	2302      	movs	r3, #2
  }
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	080082f5 	.word	0x080082f5
 8007eb0:	08008295 	.word	0x08008295
 8007eb4:	08008311 	.word	0x08008311

08007eb8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <SAI_InitI2S+0x2e>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d103      	bne.n	8007f02 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	651a      	str	r2, [r3, #80]	; 0x50
 8007f00:	e002      	b.n	8007f08 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007f0e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f16:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e077      	b.n	8008022 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d107      	bne.n	8007f48 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007f44:	665a      	str	r2, [r3, #100]	; 0x64
 8007f46:	e006      	b.n	8007f56 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f4e:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b03      	cmp	r3, #3
 8007f5a:	d84f      	bhi.n	8007ffc <SAI_InitI2S+0x130>
 8007f5c:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <SAI_InitI2S+0x98>)
 8007f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f62:	bf00      	nop
 8007f64:	08007f75 	.word	0x08007f75
 8007f68:	08007f97 	.word	0x08007f97
 8007f6c:	08007fb9 	.word	0x08007fb9
 8007f70:	08007fdb 	.word	0x08007fdb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2280      	movs	r2, #128	; 0x80
 8007f78:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	085b      	lsrs	r3, r3, #1
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	085b      	lsrs	r3, r3, #1
 8007f88:	011a      	lsls	r2, r3, #4
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2240      	movs	r2, #64	; 0x40
 8007f92:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f94:	e035      	b.n	8008002 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2280      	movs	r2, #128	; 0x80
 8007f9a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	085b      	lsrs	r3, r3, #1
 8007fa0:	019a      	lsls	r2, r3, #6
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	085b      	lsrs	r3, r3, #1
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2280      	movs	r2, #128	; 0x80
 8007fb4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007fb6:	e024      	b.n	8008002 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	22c0      	movs	r2, #192	; 0xc0
 8007fbc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	085b      	lsrs	r3, r3, #1
 8007fc2:	019a      	lsls	r2, r3, #6
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	085b      	lsrs	r3, r3, #1
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2280      	movs	r2, #128	; 0x80
 8007fd6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007fd8:	e013      	b.n	8008002 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	22e0      	movs	r2, #224	; 0xe0
 8007fde:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	085b      	lsrs	r3, r3, #1
 8007fe4:	019a      	lsls	r2, r3, #6
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	085b      	lsrs	r3, r3, #1
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2280      	movs	r2, #128	; 0x80
 8007ff8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007ffa:	e002      	b.n	8008002 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8008000:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2b02      	cmp	r3, #2
 8008006:	d10b      	bne.n	8008020 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d102      	bne.n	8008014 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2210      	movs	r2, #16
 8008012:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b02      	cmp	r3, #2
 8008018:	d102      	bne.n	8008020 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2208      	movs	r2, #8
 800801e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
}
 8008022:	4618      	mov	r0, r3
 8008024:	371c      	adds	r7, #28
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop

08008030 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
 800803c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <SAI_InitPCM+0x2e>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	2b02      	cmp	r3, #2
 800805c:	d103      	bne.n	8008066 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2201      	movs	r2, #1
 8008062:	651a      	str	r2, [r3, #80]	; 0x50
 8008064:	e002      	b.n	800806c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008078:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008080:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008094:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b04      	cmp	r3, #4
 800809a:	d103      	bne.n	80080a4 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2201      	movs	r2, #1
 80080a0:	659a      	str	r2, [r3, #88]	; 0x58
 80080a2:	e002      	b.n	80080aa <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	220d      	movs	r2, #13
 80080a8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d837      	bhi.n	8008120 <SAI_InitPCM+0xf0>
 80080b0:	a201      	add	r2, pc, #4	; (adr r2, 80080b8 <SAI_InitPCM+0x88>)
 80080b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b6:	bf00      	nop
 80080b8:	080080c9 	.word	0x080080c9
 80080bc:	080080df 	.word	0x080080df
 80080c0:	080080f5 	.word	0x080080f5
 80080c4:	0800810b 	.word	0x0800810b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2280      	movs	r2, #128	; 0x80
 80080cc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	011a      	lsls	r2, r3, #4
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2240      	movs	r2, #64	; 0x40
 80080da:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80080dc:	e023      	b.n	8008126 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2280      	movs	r2, #128	; 0x80
 80080e2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2280      	movs	r2, #128	; 0x80
 80080f0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80080f2:	e018      	b.n	8008126 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	22c0      	movs	r2, #192	; 0xc0
 80080f8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2280      	movs	r2, #128	; 0x80
 8008106:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008108:	e00d      	b.n	8008126 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	22e0      	movs	r2, #224	; 0xe0
 800810e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2280      	movs	r2, #128	; 0x80
 800811c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800811e:	e002      	b.n	8008126 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	75fb      	strb	r3, [r7, #23]
      break;
 8008124:	bf00      	nop
  }

  return status;
 8008126:	7dfb      	ldrb	r3, [r7, #23]
}
 8008128:	4618      	mov	r0, r3
 800812a:	371c      	adds	r7, #28
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008140:	2301      	movs	r3, #1
 8008142:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008144:	78fb      	ldrb	r3, [r7, #3]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d103      	bne.n	8008152 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f043 0308 	orr.w	r3, r3, #8
 8008150:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008156:	2b08      	cmp	r3, #8
 8008158:	d10b      	bne.n	8008172 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800815e:	2b03      	cmp	r3, #3
 8008160:	d003      	beq.n	800816a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d103      	bne.n	8008172 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f043 0310 	orr.w	r3, r3, #16
 8008170:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	2b03      	cmp	r3, #3
 8008178:	d003      	beq.n	8008182 <SAI_InterruptFlag+0x4e>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	2b02      	cmp	r3, #2
 8008180:	d104      	bne.n	800818c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	e003      	b.n	8008194 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f043 0304 	orr.w	r3, r3, #4
 8008192:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008194:	68fb      	ldr	r3, [r7, #12]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
	...

080081a4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80081ac:	4b18      	ldr	r3, [pc, #96]	; (8008210 <SAI_Disable+0x6c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a18      	ldr	r2, [pc, #96]	; (8008214 <SAI_Disable+0x70>)
 80081b2:	fba2 2303 	umull	r2, r3, r2, r3
 80081b6:	0b1b      	lsrs	r3, r3, #12
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80081ce:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10a      	bne.n	80081ec <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	72fb      	strb	r3, [r7, #11]
      break;
 80081ea:	e009      	b.n	8008200 <SAI_Disable+0x5c>
    }
    count--;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e7      	bne.n	80081d0 <SAI_Disable+0x2c>

  return status;
 8008200:	7afb      	ldrb	r3, [r7, #11]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	24000000 	.word	0x24000000
 8008214:	95cbec1b 	.word	0x95cbec1b

08008218 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008224:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800822e:	d01c      	beq.n	800826a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008246:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008248:	2100      	movs	r1, #0
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f7ff ff72 	bl	8008134 <SAI_InterruptFlag>
 8008250:	4603      	mov	r3, r0
 8008252:	43d9      	mvns	r1, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	691a      	ldr	r2, [r3, #16]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	400a      	ands	r2, r1
 8008260:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f7f8 fc3a 	bl	8000ae4 <HAL_SAI_TxCpltCallback>
#endif
}
 8008270:	bf00      	nop
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008284:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f7f8 fc8e 	bl	8000ba8 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800828c:	bf00      	nop
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082aa:	d01c      	beq.n	80082e6 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80082ba:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80082c4:	2100      	movs	r1, #0
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f7ff ff34 	bl	8008134 <SAI_InterruptFlag>
 80082cc:	4603      	mov	r3, r0
 80082ce:	43d9      	mvns	r1, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691a      	ldr	r2, [r3, #16]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	400a      	ands	r2, r1
 80082dc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7f8 fcc0 	bl	8000c6c <HAL_SAI_RxCpltCallback>
#endif
}
 80082ec:	bf00      	nop
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f7f8 fd68 	bl	8000dd8 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008308:	bf00      	nop
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831c:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7fb f90e 	bl	8003540 <HAL_DMA_GetError>
 8008324:	4603      	mov	r3, r0
 8008326:	2b02      	cmp	r3, #2
 8008328:	d01d      	beq.n	8008366 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008330:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008348:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f7ff ff2a 	bl	80081a4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f7ff fda9 	bl	8007eb8 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8008366:	bf00      	nop
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e02b      	b.n	80083dc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	d106      	bne.n	800839e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7f8 f9fd 	bl	8000798 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2202      	movs	r2, #2
 80083a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	3304      	adds	r3, #4
 80083ae:	4619      	mov	r1, r3
 80083b0:	4610      	mov	r0, r2
 80083b2:	f000 fdbf 	bl	8008f34 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	461a      	mov	r2, r3
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	f000 fe13 	bl	8008fec <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80083c6:	4b07      	ldr	r3, [pc, #28]	; (80083e4 <HAL_SDRAM_Init+0x74>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a06      	ldr	r2, [pc, #24]	; (80083e4 <HAL_SDRAM_Init+0x74>)
 80083cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083d0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	52004000 	.word	0x52004000

080083e8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80083fa:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d101      	bne.n	8008406 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008402:	2302      	movs	r3, #2
 8008404:	e021      	b.n	800844a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d002      	beq.n	8008412 <HAL_SDRAM_SendCommand+0x2a>
 800840c:	7dfb      	ldrb	r3, [r7, #23]
 800840e:	2b05      	cmp	r3, #5
 8008410:	d118      	bne.n	8008444 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2202      	movs	r2, #2
 8008416:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	68b9      	ldr	r1, [r7, #8]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fe4c 	bl	80090c0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b02      	cmp	r3, #2
 800842e:	d104      	bne.n	800843a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2205      	movs	r2, #5
 8008434:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008438:	e006      	b.n	8008448 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008442:	e001      	b.n	8008448 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e000      	b.n	800844a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b082      	sub	sp, #8
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b02      	cmp	r3, #2
 8008466:	d101      	bne.n	800846c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008468:	2302      	movs	r3, #2
 800846a:	e016      	b.n	800849a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b01      	cmp	r3, #1
 8008476:	d10f      	bne.n	8008498 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fe3e 	bl	8009108 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	e000      	b.n	800849a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
}
 800849a:	4618      	mov	r0, r3
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
	...

080084a4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e10f      	b.n	80086d6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a87      	ldr	r2, [pc, #540]	; (80086e0 <HAL_SPI_Init+0x23c>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d00f      	beq.n	80084e6 <HAL_SPI_Init+0x42>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a86      	ldr	r2, [pc, #536]	; (80086e4 <HAL_SPI_Init+0x240>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d00a      	beq.n	80084e6 <HAL_SPI_Init+0x42>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a84      	ldr	r2, [pc, #528]	; (80086e8 <HAL_SPI_Init+0x244>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d005      	beq.n	80084e6 <HAL_SPI_Init+0x42>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	2b0f      	cmp	r3, #15
 80084e0:	d901      	bls.n	80084e6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e0f7      	b.n	80086d6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fd08 	bl	8008efc <SPI_GetPacketSize>
 80084ec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a7b      	ldr	r2, [pc, #492]	; (80086e0 <HAL_SPI_Init+0x23c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d00c      	beq.n	8008512 <HAL_SPI_Init+0x6e>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a79      	ldr	r2, [pc, #484]	; (80086e4 <HAL_SPI_Init+0x240>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d007      	beq.n	8008512 <HAL_SPI_Init+0x6e>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a78      	ldr	r2, [pc, #480]	; (80086e8 <HAL_SPI_Init+0x244>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d002      	beq.n	8008512 <HAL_SPI_Init+0x6e>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2b08      	cmp	r3, #8
 8008510:	d811      	bhi.n	8008536 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008516:	4a72      	ldr	r2, [pc, #456]	; (80086e0 <HAL_SPI_Init+0x23c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d009      	beq.n	8008530 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a70      	ldr	r2, [pc, #448]	; (80086e4 <HAL_SPI_Init+0x240>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d004      	beq.n	8008530 <HAL_SPI_Init+0x8c>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a6f      	ldr	r2, [pc, #444]	; (80086e8 <HAL_SPI_Init+0x244>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d104      	bne.n	800853a <HAL_SPI_Init+0x96>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2b10      	cmp	r3, #16
 8008534:	d901      	bls.n	800853a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e0cd      	b.n	80086d6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b00      	cmp	r3, #0
 8008544:	d106      	bne.n	8008554 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7f8 ffbc 	bl	80014cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2202      	movs	r2, #2
 8008558:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 0201 	bic.w	r2, r2, #1
 800856a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008576:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008580:	d119      	bne.n	80085b6 <HAL_SPI_Init+0x112>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800858a:	d103      	bne.n	8008594 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008590:	2b00      	cmp	r3, #0
 8008592:	d008      	beq.n	80085a6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10c      	bne.n	80085b6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80085a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085a4:	d107      	bne.n	80085b6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00f      	beq.n	80085e2 <HAL_SPI_Init+0x13e>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	2b06      	cmp	r3, #6
 80085c8:	d90b      	bls.n	80085e2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	e007      	b.n	80085f2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	69da      	ldr	r2, [r3, #28]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fa:	431a      	orrs	r2, r3
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	431a      	orrs	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008604:	ea42 0103 	orr.w	r1, r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68da      	ldr	r2, [r3, #12]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	430a      	orrs	r2, r1
 8008612:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	431a      	orrs	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008622:	431a      	orrs	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	431a      	orrs	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	431a      	orrs	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	431a      	orrs	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	431a      	orrs	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	431a      	orrs	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008646:	431a      	orrs	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	431a      	orrs	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008652:	ea42 0103 	orr.w	r1, r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	430a      	orrs	r2, r1
 8008660:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d113      	bne.n	8008692 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800867c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008690:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 0201 	bic.w	r2, r2, #1
 80086a0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	40013000 	.word	0x40013000
 80086e4:	40003800 	.word	0x40003800
 80086e8:	40003c00 	.word	0x40003c00

080086ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08e      	sub	sp, #56	; 0x38
 80086f0:	af02      	add	r7, sp, #8
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3320      	adds	r3, #32
 8008700:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3330      	adds	r3, #48	; 0x30
 8008708:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870e:	095b      	lsrs	r3, r3, #5
 8008710:	b29b      	uxth	r3, r3
 8008712:	3301      	adds	r3, #1
 8008714:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008716:	f7f9 f8e7 	bl	80018e8 <HAL_GetTick>
 800871a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800871c:	887b      	ldrh	r3, [r7, #2]
 800871e:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8008720:	887b      	ldrh	r3, [r7, #2]
 8008722:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b01      	cmp	r3, #1
 800872e:	d001      	beq.n	8008734 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8008730:	2302      	movs	r3, #2
 8008732:	e310      	b.n	8008d56 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <HAL_SPI_TransmitReceive+0x5a>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <HAL_SPI_TransmitReceive+0x5a>
 8008740:	887b      	ldrh	r3, [r7, #2]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e305      	b.n	8008d56 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008750:	2b01      	cmp	r3, #1
 8008752:	d101      	bne.n	8008758 <HAL_SPI_TransmitReceive+0x6c>
 8008754:	2302      	movs	r3, #2
 8008756:	e2fe      	b.n	8008d56 <HAL_SPI_TransmitReceive+0x66a>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2205      	movs	r2, #5
 8008764:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	887a      	ldrh	r2, [r7, #2]
 800877a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	887a      	ldrh	r2, [r7, #2]
 8008782:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	887a      	ldrh	r2, [r7, #2]
 8008790:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	887a      	ldrh	r2, [r7, #2]
 8008798:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 80087b6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a70      	ldr	r2, [pc, #448]	; (8008980 <HAL_SPI_TransmitReceive+0x294>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d009      	beq.n	80087d6 <HAL_SPI_TransmitReceive+0xea>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a6f      	ldr	r2, [pc, #444]	; (8008984 <HAL_SPI_TransmitReceive+0x298>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d004      	beq.n	80087d6 <HAL_SPI_TransmitReceive+0xea>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a6d      	ldr	r2, [pc, #436]	; (8008988 <HAL_SPI_TransmitReceive+0x29c>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d102      	bne.n	80087dc <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80087d6:	2310      	movs	r3, #16
 80087d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087da:	e001      	b.n	80087e0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80087dc:	2308      	movs	r3, #8
 80087de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	4b69      	ldr	r3, [pc, #420]	; (800898c <HAL_SPI_TransmitReceive+0x2a0>)
 80087e8:	4013      	ands	r3, r2
 80087ea:	8879      	ldrh	r1, [r7, #2]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	6812      	ldr	r2, [r2, #0]
 80087f0:	430b      	orrs	r3, r1
 80087f2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f042 0201 	orr.w	r2, r2, #1
 8008802:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800880c:	d107      	bne.n	800881e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800881c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	2b0f      	cmp	r3, #15
 8008824:	f240 80a2 	bls.w	800896c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8008828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882a:	089b      	lsrs	r3, r3, #2
 800882c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800882e:	e094      	b.n	800895a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b02      	cmp	r3, #2
 800883c:	d120      	bne.n	8008880 <HAL_SPI_TransmitReceive+0x194>
 800883e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01d      	beq.n	8008880 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008844:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008846:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800884c:	429a      	cmp	r2, r3
 800884e:	d217      	bcs.n	8008880 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6812      	ldr	r2, [r2, #0]
 800885a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008860:	1d1a      	adds	r2, r3, #4
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800886c:	b29b      	uxth	r3, r3
 800886e:	3b01      	subs	r3, #1
 8008870:	b29a      	uxth	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800887e:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8008888:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800888a:	2b00      	cmp	r3, #0
 800888c:	d065      	beq.n	800895a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	2b01      	cmp	r3, #1
 800889a:	d118      	bne.n	80088ce <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80088a6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ac:	1d1a      	adds	r2, r3, #4
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b29a      	uxth	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80088cc:	e045      	b.n	800895a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80088ce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80088d0:	8bfb      	ldrh	r3, [r7, #30]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d21d      	bcs.n	8008912 <HAL_SPI_TransmitReceive+0x226>
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d018      	beq.n	8008912 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80088ea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088f0:	1d1a      	adds	r2, r3, #4
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	3b01      	subs	r3, #1
 8008900:	b29a      	uxth	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800890e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008910:	e023      	b.n	800895a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008912:	f7f8 ffe9 	bl	80018e8 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800891e:	429a      	cmp	r2, r3
 8008920:	d803      	bhi.n	800892a <HAL_SPI_TransmitReceive+0x23e>
 8008922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008928:	d102      	bne.n	8008930 <HAL_SPI_TransmitReceive+0x244>
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	2b00      	cmp	r3, #0
 800892e:	d114      	bne.n	800895a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 fa15 	bl	8008d60 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800893c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e1fd      	b.n	8008d56 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800895a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800895c:	2b00      	cmp	r3, #0
 800895e:	f47f af67 	bne.w	8008830 <HAL_SPI_TransmitReceive+0x144>
 8008962:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008964:	2b00      	cmp	r3, #0
 8008966:	f47f af63 	bne.w	8008830 <HAL_SPI_TransmitReceive+0x144>
 800896a:	e1ce      	b.n	8008d0a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	2b07      	cmp	r3, #7
 8008972:	f240 81c2 	bls.w	8008cfa <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8008976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008978:	085b      	lsrs	r3, r3, #1
 800897a:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800897c:	e0c9      	b.n	8008b12 <HAL_SPI_TransmitReceive+0x426>
 800897e:	bf00      	nop
 8008980:	40013000 	.word	0x40013000
 8008984:	40003800 	.word	0x40003800
 8008988:	40003c00 	.word	0x40003c00
 800898c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	f003 0302 	and.w	r3, r3, #2
 800899a:	2b02      	cmp	r3, #2
 800899c:	d11f      	bne.n	80089de <HAL_SPI_TransmitReceive+0x2f2>
 800899e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d01c      	beq.n	80089de <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80089a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80089a6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80089a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089aa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d216      	bcs.n	80089de <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089b4:	881a      	ldrh	r2, [r3, #0]
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089be:	1c9a      	adds	r2, r3, #2
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	3b01      	subs	r3, #1
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089dc:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80089e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 8092 	beq.w	8008b12 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d118      	bne.n	8008a2e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a00:	6a3a      	ldr	r2, [r7, #32]
 8008a02:	8812      	ldrh	r2, [r2, #0]
 8008a04:	b292      	uxth	r2, r2
 8008a06:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a0c:	1c9a      	adds	r2, r3, #2
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a2a:	853b      	strh	r3, [r7, #40]	; 0x28
 8008a2c:	e071      	b.n	8008b12 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008a2e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008a30:	8bfb      	ldrh	r3, [r7, #30]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d228      	bcs.n	8008a88 <HAL_SPI_TransmitReceive+0x39c>
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d023      	beq.n	8008a88 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a44:	6a3a      	ldr	r2, [r7, #32]
 8008a46:	8812      	ldrh	r2, [r2, #0]
 8008a48:	b292      	uxth	r2, r2
 8008a4a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a50:	1c9a      	adds	r2, r3, #2
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a5a:	6a3a      	ldr	r2, [r7, #32]
 8008a5c:	8812      	ldrh	r2, [r2, #0]
 8008a5e:	b292      	uxth	r2, r2
 8008a60:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a66:	1c9a      	adds	r2, r3, #2
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	3b02      	subs	r3, #2
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a84:	853b      	strh	r3, [r7, #40]	; 0x28
 8008a86:	e044      	b.n	8008b12 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008a88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d11d      	bne.n	8008aca <HAL_SPI_TransmitReceive+0x3de>
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d018      	beq.n	8008aca <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a9c:	6a3a      	ldr	r2, [r7, #32]
 8008a9e:	8812      	ldrh	r2, [r2, #0]
 8008aa0:	b292      	uxth	r2, r2
 8008aa2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aa8:	1c9a      	adds	r2, r3, #2
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ac6:	853b      	strh	r3, [r7, #40]	; 0x28
 8008ac8:	e023      	b.n	8008b12 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008aca:	f7f8 ff0d 	bl	80018e8 <HAL_GetTick>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d803      	bhi.n	8008ae2 <HAL_SPI_TransmitReceive+0x3f6>
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae0:	d102      	bne.n	8008ae8 <HAL_SPI_TransmitReceive+0x3fc>
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d114      	bne.n	8008b12 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 f939 	bl	8008d60 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008af4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e121      	b.n	8008d56 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008b12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f47f af3b 	bne.w	8008990 <HAL_SPI_TransmitReceive+0x2a4>
 8008b1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f47f af37 	bne.w	8008990 <HAL_SPI_TransmitReceive+0x2a4>
 8008b22:	e0f2      	b.n	8008d0a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d121      	bne.n	8008b76 <HAL_SPI_TransmitReceive+0x48a>
 8008b32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d01e      	beq.n	8008b76 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008b38:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008b3a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d218      	bcs.n	8008b76 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3320      	adds	r3, #32
 8008b4e:	7812      	ldrb	r2, [r2, #0]
 8008b50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	3b01      	subs	r3, #1
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b74:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	695b      	ldr	r3, [r3, #20]
 8008b7c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8008b7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 80ba 	beq.w	8008cfa <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d11b      	bne.n	8008bcc <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ba0:	7812      	ldrb	r2, [r2, #0]
 8008ba2:	b2d2      	uxtb	r2, r2
 8008ba4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008baa:	1c5a      	adds	r2, r3, #1
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bc8:	853b      	strh	r3, [r7, #40]	; 0x28
 8008bca:	e096      	b.n	8008cfa <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008bcc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008bce:	8bfb      	ldrh	r3, [r7, #30]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d24a      	bcs.n	8008c6a <HAL_SPI_TransmitReceive+0x57e>
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d045      	beq.n	8008c6a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bea:	7812      	ldrb	r2, [r2, #0]
 8008bec:	b2d2      	uxtb	r2, r2
 8008bee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bf4:	1c5a      	adds	r2, r3, #1
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c06:	7812      	ldrb	r2, [r2, #0]
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c10:	1c5a      	adds	r2, r3, #1
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c22:	7812      	ldrb	r2, [r2, #0]
 8008c24:	b2d2      	uxtb	r2, r2
 8008c26:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c3e:	7812      	ldrb	r2, [r2, #0]
 8008c40:	b2d2      	uxtb	r2, r2
 8008c42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	3b04      	subs	r3, #4
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c66:	853b      	strh	r3, [r7, #40]	; 0x28
 8008c68:	e047      	b.n	8008cfa <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008c6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c6c:	2b03      	cmp	r3, #3
 8008c6e:	d820      	bhi.n	8008cb2 <HAL_SPI_TransmitReceive+0x5c6>
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d01b      	beq.n	8008cb2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c86:	7812      	ldrb	r2, [r2, #0]
 8008c88:	b2d2      	uxtb	r2, r2
 8008c8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008cae:	853b      	strh	r3, [r7, #40]	; 0x28
 8008cb0:	e023      	b.n	8008cfa <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cb2:	f7f8 fe19 	bl	80018e8 <HAL_GetTick>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d803      	bhi.n	8008cca <HAL_SPI_TransmitReceive+0x5de>
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc8:	d102      	bne.n	8008cd0 <HAL_SPI_TransmitReceive+0x5e4>
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d114      	bne.n	8008cfa <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 f845 	bl	8008d60 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e02d      	b.n	8008d56 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008cfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f47f af11 	bne.w	8008b24 <HAL_SPI_TransmitReceive+0x438>
 8008d02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f47f af0d 	bne.w	8008b24 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d10:	2200      	movs	r2, #0
 8008d12:	2108      	movs	r1, #8
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 f8c3 	bl	8008ea0 <SPI_WaitOnFlagUntilTimeout>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d007      	beq.n	8008d30 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d26:	f043 0220 	orr.w	r2, r3, #32
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 f815 	bl	8008d60 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e000      	b.n	8008d56 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8008d54:	2300      	movs	r3, #0
  }
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3730      	adds	r7, #48	; 0x30
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop

08008d60 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	699a      	ldr	r2, [r3, #24]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f042 0208 	orr.w	r2, r2, #8
 8008d7e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	699a      	ldr	r2, [r3, #24]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f042 0210 	orr.w	r2, r2, #16
 8008d8e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 0201 	bic.w	r2, r2, #1
 8008d9e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6919      	ldr	r1, [r3, #16]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	4b3c      	ldr	r3, [pc, #240]	; (8008e9c <SPI_CloseTransfer+0x13c>)
 8008dac:	400b      	ands	r3, r1
 8008dae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008dbe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	d014      	beq.n	8008df6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f003 0320 	and.w	r3, r3, #32
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00f      	beq.n	8008df6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ddc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	699a      	ldr	r2, [r3, #24]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f042 0220 	orr.w	r2, r2, #32
 8008df4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d014      	beq.n	8008e2c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00f      	beq.n	8008e2c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e12:	f043 0204 	orr.w	r2, r3, #4
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	699a      	ldr	r2, [r3, #24]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e2a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00f      	beq.n	8008e56 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e3c:	f043 0201 	orr.w	r2, r3, #1
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	699a      	ldr	r2, [r3, #24]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e54:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00f      	beq.n	8008e80 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e66:	f043 0208 	orr.w	r2, r3, #8
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	699a      	ldr	r2, [r3, #24]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e7e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008e90:	bf00      	nop
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	fffffc90 	.word	0xfffffc90

08008ea0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	603b      	str	r3, [r7, #0]
 8008eac:	4613      	mov	r3, r2
 8008eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008eb0:	e010      	b.n	8008ed4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eb2:	f7f8 fd19 	bl	80018e8 <HAL_GetTick>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d803      	bhi.n	8008eca <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec8:	d102      	bne.n	8008ed0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e00f      	b.n	8008ef4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	695a      	ldr	r2, [r3, #20]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	4013      	ands	r3, r2
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	bf0c      	ite	eq
 8008ee4:	2301      	moveq	r3, #1
 8008ee6:	2300      	movne	r3, #0
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	461a      	mov	r2, r3
 8008eec:	79fb      	ldrb	r3, [r7, #7]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d0df      	beq.n	8008eb2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f08:	095b      	lsrs	r3, r3, #5
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	3301      	adds	r3, #1
 8008f14:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	3307      	adds	r3, #7
 8008f1a:	08db      	lsrs	r3, r3, #3
 8008f1c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	fb02 f303 	mul.w	r3, r2, r3
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3714      	adds	r7, #20
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
	...

08008f34 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d121      	bne.n	8008f8a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	4b27      	ldr	r3, [pc, #156]	; (8008fe8 <FMC_SDRAM_Init+0xb4>)
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	6851      	ldr	r1, [r2, #4]
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	6892      	ldr	r2, [r2, #8]
 8008f56:	4311      	orrs	r1, r2
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	68d2      	ldr	r2, [r2, #12]
 8008f5c:	4311      	orrs	r1, r2
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	6912      	ldr	r2, [r2, #16]
 8008f62:	4311      	orrs	r1, r2
 8008f64:	683a      	ldr	r2, [r7, #0]
 8008f66:	6952      	ldr	r2, [r2, #20]
 8008f68:	4311      	orrs	r1, r2
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	6992      	ldr	r2, [r2, #24]
 8008f6e:	4311      	orrs	r1, r2
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	69d2      	ldr	r2, [r2, #28]
 8008f74:	4311      	orrs	r1, r2
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	6a12      	ldr	r2, [r2, #32]
 8008f7a:	4311      	orrs	r1, r2
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f80:	430a      	orrs	r2, r1
 8008f82:	431a      	orrs	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	e026      	b.n	8008fd8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	69d9      	ldr	r1, [r3, #28]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	4319      	orrs	r1, r3
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa0:	430b      	orrs	r3, r1
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	4b0e      	ldr	r3, [pc, #56]	; (8008fe8 <FMC_SDRAM_Init+0xb4>)
 8008fae:	4013      	ands	r3, r2
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	6851      	ldr	r1, [r2, #4]
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	6892      	ldr	r2, [r2, #8]
 8008fb8:	4311      	orrs	r1, r2
 8008fba:	683a      	ldr	r2, [r7, #0]
 8008fbc:	68d2      	ldr	r2, [r2, #12]
 8008fbe:	4311      	orrs	r1, r2
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	6912      	ldr	r2, [r2, #16]
 8008fc4:	4311      	orrs	r1, r2
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	6952      	ldr	r2, [r2, #20]
 8008fca:	4311      	orrs	r1, r2
 8008fcc:	683a      	ldr	r2, [r7, #0]
 8008fce:	6992      	ldr	r2, [r2, #24]
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	431a      	orrs	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	ffff8000 	.word	0xffff8000

08008fec <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d128      	bne.n	8009050 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	1e59      	subs	r1, r3, #1
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	3b01      	subs	r3, #1
 8009012:	011b      	lsls	r3, r3, #4
 8009014:	4319      	orrs	r1, r3
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	3b01      	subs	r3, #1
 800901c:	021b      	lsls	r3, r3, #8
 800901e:	4319      	orrs	r1, r3
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	3b01      	subs	r3, #1
 8009026:	031b      	lsls	r3, r3, #12
 8009028:	4319      	orrs	r1, r3
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	3b01      	subs	r3, #1
 8009030:	041b      	lsls	r3, r3, #16
 8009032:	4319      	orrs	r1, r3
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	3b01      	subs	r3, #1
 800903a:	051b      	lsls	r3, r3, #20
 800903c:	4319      	orrs	r1, r3
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	3b01      	subs	r3, #1
 8009044:	061b      	lsls	r3, r3, #24
 8009046:	430b      	orrs	r3, r1
 8009048:	431a      	orrs	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	609a      	str	r2, [r3, #8]
 800904e:	e02d      	b.n	80090ac <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	4b19      	ldr	r3, [pc, #100]	; (80090bc <FMC_SDRAM_Timing_Init+0xd0>)
 8009056:	4013      	ands	r3, r2
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	68d2      	ldr	r2, [r2, #12]
 800905c:	3a01      	subs	r2, #1
 800905e:	0311      	lsls	r1, r2, #12
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	6952      	ldr	r2, [r2, #20]
 8009064:	3a01      	subs	r2, #1
 8009066:	0512      	lsls	r2, r2, #20
 8009068:	430a      	orrs	r2, r1
 800906a:	431a      	orrs	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	1e59      	subs	r1, r3, #1
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	3b01      	subs	r3, #1
 8009084:	011b      	lsls	r3, r3, #4
 8009086:	4319      	orrs	r1, r3
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	3b01      	subs	r3, #1
 800908e:	021b      	lsls	r3, r3, #8
 8009090:	4319      	orrs	r1, r3
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	3b01      	subs	r3, #1
 8009098:	041b      	lsls	r3, r3, #16
 800909a:	4319      	orrs	r1, r3
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	3b01      	subs	r3, #1
 80090a2:	061b      	lsls	r3, r3, #24
 80090a4:	430b      	orrs	r3, r1
 80090a6:	431a      	orrs	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	ff0f0fff 	.word	0xff0f0fff

080090c0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	691a      	ldr	r2, [r3, #16]
 80090d0:	4b0c      	ldr	r3, [pc, #48]	; (8009104 <FMC_SDRAM_SendCommand+0x44>)
 80090d2:	4013      	ands	r3, r2
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	6811      	ldr	r1, [r2, #0]
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	6852      	ldr	r2, [r2, #4]
 80090dc:	4311      	orrs	r1, r2
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	6892      	ldr	r2, [r2, #8]
 80090e2:	3a01      	subs	r2, #1
 80090e4:	0152      	lsls	r2, r2, #5
 80090e6:	4311      	orrs	r1, r2
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	68d2      	ldr	r2, [r2, #12]
 80090ec:	0252      	lsls	r2, r2, #9
 80090ee:	430a      	orrs	r2, r1
 80090f0:	431a      	orrs	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	ffc00000 	.word	0xffc00000

08009108 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	695a      	ldr	r2, [r3, #20]
 8009116:	4b07      	ldr	r3, [pc, #28]	; (8009134 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009118:	4013      	ands	r3, r2
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	0052      	lsls	r2, r2, #1
 800911e:	431a      	orrs	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	ffffc001 	.word	0xffffc001

08009138 <memset>:
 8009138:	4402      	add	r2, r0
 800913a:	4603      	mov	r3, r0
 800913c:	4293      	cmp	r3, r2
 800913e:	d100      	bne.n	8009142 <memset+0xa>
 8009140:	4770      	bx	lr
 8009142:	f803 1b01 	strb.w	r1, [r3], #1
 8009146:	e7f9      	b.n	800913c <memset+0x4>

08009148 <__libc_init_array>:
 8009148:	b570      	push	{r4, r5, r6, lr}
 800914a:	4d0d      	ldr	r5, [pc, #52]	; (8009180 <__libc_init_array+0x38>)
 800914c:	4c0d      	ldr	r4, [pc, #52]	; (8009184 <__libc_init_array+0x3c>)
 800914e:	1b64      	subs	r4, r4, r5
 8009150:	10a4      	asrs	r4, r4, #2
 8009152:	2600      	movs	r6, #0
 8009154:	42a6      	cmp	r6, r4
 8009156:	d109      	bne.n	800916c <__libc_init_array+0x24>
 8009158:	4d0b      	ldr	r5, [pc, #44]	; (8009188 <__libc_init_array+0x40>)
 800915a:	4c0c      	ldr	r4, [pc, #48]	; (800918c <__libc_init_array+0x44>)
 800915c:	f000 f818 	bl	8009190 <_init>
 8009160:	1b64      	subs	r4, r4, r5
 8009162:	10a4      	asrs	r4, r4, #2
 8009164:	2600      	movs	r6, #0
 8009166:	42a6      	cmp	r6, r4
 8009168:	d105      	bne.n	8009176 <__libc_init_array+0x2e>
 800916a:	bd70      	pop	{r4, r5, r6, pc}
 800916c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009170:	4798      	blx	r3
 8009172:	3601      	adds	r6, #1
 8009174:	e7ee      	b.n	8009154 <__libc_init_array+0xc>
 8009176:	f855 3b04 	ldr.w	r3, [r5], #4
 800917a:	4798      	blx	r3
 800917c:	3601      	adds	r6, #1
 800917e:	e7f2      	b.n	8009166 <__libc_init_array+0x1e>
 8009180:	080091c0 	.word	0x080091c0
 8009184:	080091c0 	.word	0x080091c0
 8009188:	080091c0 	.word	0x080091c0
 800918c:	080091c4 	.word	0x080091c4

08009190 <_init>:
 8009190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009192:	bf00      	nop
 8009194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009196:	bc08      	pop	{r3}
 8009198:	469e      	mov	lr, r3
 800919a:	4770      	bx	lr

0800919c <_fini>:
 800919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919e:	bf00      	nop
 80091a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a2:	bc08      	pop	{r3}
 80091a4:	469e      	mov	lr, r3
 80091a6:	4770      	bx	lr
