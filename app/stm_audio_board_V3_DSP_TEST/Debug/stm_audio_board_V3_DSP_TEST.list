
stm_audio_board_V3_DSP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .sdram_section 0002ee00  c0000000  c0000000  00030000  2**2
                  ALLOC
  2 .text         00008e94  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009178  08009178  00019178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800917c  0800917c  0001917c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08009180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0002f194  24000010  08009190  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2402f1a4  08009190  0002f1a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00011570  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002579  00000000  00000000  000315f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000d60  00000000  00000000  00033b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000a2d  00000000  00000000  000348d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00032f53  00000000  00000000  000352fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000137fa  00000000  00000000  00068250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014473b  00000000  00000000  0007ba4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003710  00000000  00000000  001c0188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000092  00000000  00000000  001c3898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08009148 	.word	0x08009148

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08009148 	.word	0x08009148

0800030c <ad1939_write_reg>:
#include "AD1939_driver.h"


// send bytes
int ad1939_write_reg(uint8_t reg_address, uint8_t data){
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af02      	add	r7, sp, #8
 8000312:	4603      	mov	r3, r0
 8000314:	460a      	mov	r2, r1
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]
	int8_t retval = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	73fb      	strb	r3, [r7, #15]
	TXdata[0] = AD1939_Global_Address_Write;
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <ad1939_write_reg+0x4c>)
 8000322:	2208      	movs	r2, #8
 8000324:	701a      	strb	r2, [r3, #0]
	TXdata[1] = reg_address;
 8000326:	4a0c      	ldr	r2, [pc, #48]	; (8000358 <ad1939_write_reg+0x4c>)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	7053      	strb	r3, [r2, #1]
	TXdata[2] = data;
 800032c:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <ad1939_write_reg+0x4c>)
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	7093      	strb	r3, [r2, #2]

//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000332:	4b0a      	ldr	r3, [pc, #40]	; (800035c <ad1939_write_reg+0x50>)
 8000334:	6818      	ldr	r0, [r3, #0]
 8000336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2303      	movs	r3, #3
 800033e:	4a08      	ldr	r2, [pc, #32]	; (8000360 <ad1939_write_reg+0x54>)
 8000340:	4905      	ldr	r1, [pc, #20]	; (8000358 <ad1939_write_reg+0x4c>)
 8000342:	f008 f9af 	bl	80086a4 <HAL_SPI_TransmitReceive>
 8000346:	4603      	mov	r3, r0
 8000348:	73fb      	strb	r3, [r7, #15]
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 //HAL_Delay(10);
	return retval;
 800034a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	24000030 	.word	0x24000030
 800035c:	2400002c 	.word	0x2400002c
 8000360:	24000034 	.word	0x24000034

08000364 <ad1939_pll_locked>:

	return retval;
}

int ad1939_pll_locked()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af02      	add	r7, sp, #8
	TXdata[0] = AD1939_Global_Address_Read;
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <ad1939_pll_locked+0x3c>)
 800036c:	2209      	movs	r2, #9
 800036e:	701a      	strb	r2, [r3, #0]
	TXdata[1] = AD1939_PLL_Control_1;
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000372:	2201      	movs	r2, #1
 8000374:	705a      	strb	r2, [r3, #1]
	TXdata[2] = 0b00000100;
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000378:	2204      	movs	r2, #4
 800037a:	709a      	strb	r2, [r3, #2]
	HAL_Delay(10);
 800037c:	200a      	movs	r0, #10
 800037e:	f001 fa9b 	bl	80018b8 <HAL_Delay>
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <ad1939_pll_locked+0x40>)
 8000384:	6818      	ldr	r0, [r3, #0]
 8000386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	2303      	movs	r3, #3
 800038e:	4a06      	ldr	r2, [pc, #24]	; (80003a8 <ad1939_pll_locked+0x44>)
 8000390:	4903      	ldr	r1, [pc, #12]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000392:	f008 f987 	bl	80086a4 <HAL_SPI_TransmitReceive>
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 return 0;
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	24000030 	.word	0x24000030
 80003a4:	2400002c 	.word	0x2400002c
 80003a8:	24000034 	.word	0x24000034

080003ac <ad1939_init>:

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
    AD1939_spi = hspi_codec;
 80003b4:	4a3d      	ldr	r2, [pc, #244]	; (80004ac <ad1939_init+0x100>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6013      	str	r3, [r2, #0]

    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 80003ba:	21be      	movs	r1, #190	; 0xbe
 80003bc:	2000      	movs	r0, #0
 80003be:	f7ff ffa5 	bl	800030c <ad1939_write_reg>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d002      	beq.n	80003ce <ad1939_init+0x22>
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295
 80003cc:	e069      	b.n	80004a2 <ad1939_init+0xf6>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 80003ce:	2104      	movs	r1, #4
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff ff9b 	bl	800030c <ad1939_write_reg>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d002      	beq.n	80003e2 <ad1939_init+0x36>
 80003dc:	f04f 33ff 	mov.w	r3, #4294967295
 80003e0:	e05f      	b.n	80004a2 <ad1939_init+0xf6>





    HAL_Delay(100);
 80003e2:	2064      	movs	r0, #100	; 0x64
 80003e4:	f001 fa68 	bl	80018b8 <HAL_Delay>

    if(ad1939_pll_locked()){
 80003e8:	f7ff ffbc 	bl	8000364 <ad1939_pll_locked>
    // 192 khz
    //    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000100)) return -1;
    // 96 khz
//            if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000010)) return -1;
    // 48 Khz
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b01000000)) return -1;
 80003ec:	2140      	movs	r1, #64	; 0x40
 80003ee:	2002      	movs	r0, #2
 80003f0:	f7ff ff8c 	bl	800030c <ad1939_write_reg>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d002      	beq.n	8000400 <ad1939_init+0x54>
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
 80003fe:	e050      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000100)) return -1; // Slave setup
 8000400:	2104      	movs	r1, #4
 8000402:	2003      	movs	r0, #3
 8000404:	f7ff ff82 	bl	800030c <ad1939_write_reg>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d002      	beq.n	8000414 <ad1939_init+0x68>
 800040e:	f04f 33ff 	mov.w	r3, #4294967295
 8000412:	e046      	b.n	80004a2 <ad1939_init+0xf6>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 8000414:	2100      	movs	r1, #0
 8000416:	2004      	movs	r0, #4
 8000418:	f7ff ff78 	bl	800030c <ad1939_write_reg>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d002      	beq.n	8000428 <ad1939_init+0x7c>
 8000422:	f04f 33ff 	mov.w	r3, #4294967295
 8000426:	e03c      	b.n	80004a2 <ad1939_init+0xf6>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 8000428:	2100      	movs	r1, #0
 800042a:	2005      	movs	r0, #5
 800042c:	f7ff ff6e 	bl	800030c <ad1939_write_reg>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d002      	beq.n	800043c <ad1939_init+0x90>
 8000436:	f04f 33ff 	mov.w	r3, #4294967295
 800043a:	e032      	b.n	80004a2 <ad1939_init+0xf6>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 800043c:	2100      	movs	r1, #0
 800043e:	2008      	movs	r0, #8
 8000440:	f7ff ff64 	bl	800030c <ad1939_write_reg>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d002      	beq.n	8000450 <ad1939_init+0xa4>
 800044a:	f04f 33ff 	mov.w	r3, #4294967295
 800044e:	e028      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 8000450:	2100      	movs	r1, #0
 8000452:	2009      	movs	r0, #9
 8000454:	f7ff ff5a 	bl	800030c <ad1939_write_reg>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d002      	beq.n	8000464 <ad1939_init+0xb8>
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
 8000462:	e01e      	b.n	80004a2 <ad1939_init+0xf6>
    // 192 khz
	//    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b10000000)) return -1;
    // 96khz
//        if (ad1939_write_reg(AD1939_ADC_Control_0, 0b01000000)) return -1;
        // 48 Khz
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 8000464:	2100      	movs	r1, #0
 8000466:	200e      	movs	r0, #14
 8000468:	f7ff ff50 	bl	800030c <ad1939_write_reg>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d002      	beq.n	8000478 <ad1939_init+0xcc>
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
 8000476:	e014      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0b00100000 )) return -1;
 8000478:	2120      	movs	r1, #32
 800047a:	200f      	movs	r0, #15
 800047c:	f7ff ff46 	bl	800030c <ad1939_write_reg>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d002      	beq.n	800048c <ad1939_init+0xe0>
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	e00a      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 800048c:	2100      	movs	r1, #0
 800048e:	2010      	movs	r0, #16
 8000490:	f7ff ff3c 	bl	800030c <ad1939_write_reg>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d002      	beq.n	80004a0 <ad1939_init+0xf4>
 800049a:	f04f 33ff 	mov.w	r3, #4294967295
 800049e:	e000      	b.n	80004a2 <ad1939_init+0xf6>



    return 0; // Return 0 if all writes are successful
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	2400002c 	.word	0x2400002c

080004b0 <HAL_SAI_TxCpltCallback>:
volatile uint8_t 			ADC_HALF_COMPLETE_FLAG = 0;
volatile uint8_t 			DAC_HALF_COMPLETE_FLAG = 0;
volatile uint32_t input_i2s_buffer_au32[16];
volatile uint32_t output_i2s_buffer_au32[16];

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
 80004b0:	b480      	push	{r7}
 80004b2:	b08b      	sub	sp, #44	; 0x2c
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 0;
 80004b8:	4b2a      	ldr	r3, [pc, #168]	; (8000564 <HAL_SAI_TxCpltCallback+0xb4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
 80004be:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <HAL_SAI_TxCpltCallback+0xb8>)
 80004c0:	617b      	str	r3, [r7, #20]
 80004c2:	2340      	movs	r3, #64	; 0x40
 80004c4:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	dd1d      	ble.n	8000508 <HAL_SAI_TxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	f003 021f 	and.w	r2, r3, #31
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	4413      	add	r3, r2
 80004d6:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004dc:	f3bf 8f4f 	dsb	sy
}
 80004e0:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80004e2:	4a22      	ldr	r2, [pc, #136]	; (800056c <HAL_SAI_TxCpltCallback+0xbc>)
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	3320      	adds	r3, #32
 80004ee:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	3b20      	subs	r3, #32
 80004f4:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	dcf2      	bgt.n	80004e2 <HAL_SAI_TxCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 80004fc:	f3bf 8f4f 	dsb	sy
}
 8000500:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000502:	f3bf 8f6f 	isb	sy
}
 8000506:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000508:	bf00      	nop
 800050a:	4b19      	ldr	r3, [pc, #100]	; (8000570 <HAL_SAI_TxCpltCallback+0xc0>)
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
 800050e:	2340      	movs	r3, #64	; 0x40
 8000510:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000512:	6a3b      	ldr	r3, [r7, #32]
 8000514:	2b00      	cmp	r3, #0
 8000516:	dd1d      	ble.n	8000554 <HAL_SAI_TxCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051a:	f003 021f 	and.w	r2, r3, #31
 800051e:	6a3b      	ldr	r3, [r7, #32]
 8000520:	4413      	add	r3, r2
 8000522:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000528:	f3bf 8f4f 	dsb	sy
}
 800052c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800052e:	4a0f      	ldr	r2, [pc, #60]	; (800056c <HAL_SAI_TxCpltCallback+0xbc>)
 8000530:	69bb      	ldr	r3, [r7, #24]
 8000532:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000536:	69bb      	ldr	r3, [r7, #24]
 8000538:	3320      	adds	r3, #32
 800053a:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	3b20      	subs	r3, #32
 8000540:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	2b00      	cmp	r3, #0
 8000546:	dcf2      	bgt.n	800052e <HAL_SAI_TxCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000548:	f3bf 8f4f 	dsb	sy
}
 800054c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800054e:	f3bf 8f6f 	isb	sy
}
 8000552:	bf00      	nop
}
 8000554:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000556:	bf00      	nop
 8000558:	372c      	adds	r7, #44	; 0x2c
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	24000315 	.word	0x24000315
 8000568:	24000318 	.word	0x24000318
 800056c:	e000ed00 	.word	0xe000ed00
 8000570:	24000358 	.word	0x24000358

08000574 <HAL_SAI_TxHalfCpltCallback>:
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000574:	b480      	push	{r7}
 8000576:	b08b      	sub	sp, #44	; 0x2c
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 1;
 800057c:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <HAL_SAI_TxHalfCpltCallback+0xb4>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
 8000582:	4b2a      	ldr	r3, [pc, #168]	; (800062c <HAL_SAI_TxHalfCpltCallback+0xb8>)
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	2340      	movs	r3, #64	; 0x40
 8000588:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	2b00      	cmp	r3, #0
 800058e:	dd1d      	ble.n	80005cc <HAL_SAI_TxHalfCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	f003 021f 	and.w	r2, r3, #31
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	4413      	add	r3, r2
 800059a:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80005a0:	f3bf 8f4f 	dsb	sy
}
 80005a4:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80005a6:	4a22      	ldr	r2, [pc, #136]	; (8000630 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	3320      	adds	r3, #32
 80005b2:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3b20      	subs	r3, #32
 80005b8:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	dcf2      	bgt.n	80005a6 <HAL_SAI_TxHalfCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 80005c0:	f3bf 8f4f 	dsb	sy
}
 80005c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c6:	f3bf 8f6f 	isb	sy
}
 80005ca:	bf00      	nop
}
 80005cc:	bf00      	nop
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <HAL_SAI_TxHalfCpltCallback+0xc0>)
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
 80005d2:	2340      	movs	r3, #64	; 0x40
 80005d4:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 80005d6:	6a3b      	ldr	r3, [r7, #32]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dd1d      	ble.n	8000618 <HAL_SAI_TxHalfCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80005dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005de:	f003 021f 	and.w	r2, r3, #31
 80005e2:	6a3b      	ldr	r3, [r7, #32]
 80005e4:	4413      	add	r3, r2
 80005e6:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80005e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ec:	f3bf 8f4f 	dsb	sy
}
 80005f0:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 80005f4:	69bb      	ldr	r3, [r7, #24]
 80005f6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	3320      	adds	r3, #32
 80005fe:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	3b20      	subs	r3, #32
 8000604:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	2b00      	cmp	r3, #0
 800060a:	dcf2      	bgt.n	80005f2 <HAL_SAI_TxHalfCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 800060c:	f3bf 8f4f 	dsb	sy
}
 8000610:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000612:	f3bf 8f6f 	isb	sy
}
 8000616:	bf00      	nop
}
 8000618:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
		SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 800061a:	bf00      	nop
 800061c:	372c      	adds	r7, #44	; 0x2c
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	24000315 	.word	0x24000315
 800062c:	24000318 	.word	0x24000318
 8000630:	e000ed00 	.word	0xe000ed00
 8000634:	24000358 	.word	0x24000358

08000638 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000638:	b480      	push	{r7}
 800063a:	b093      	sub	sp, #76	; 0x4c
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 0;
 8000640:	4b54      	ldr	r3, [pc, #336]	; (8000794 <HAL_SAI_RxCpltCallback+0x15c>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	4b54      	ldr	r3, [pc, #336]	; (8000798 <HAL_SAI_RxCpltCallback+0x160>)
 8000648:	617b      	str	r3, [r7, #20]
 800064a:	2340      	movs	r3, #64	; 0x40
 800064c:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	2b00      	cmp	r3, #0
 8000652:	dd1d      	ble.n	8000690 <HAL_SAI_RxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	f003 021f 	and.w	r2, r3, #31
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	4413      	add	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000664:	f3bf 8f4f 	dsb	sy
}
 8000668:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800066a:	4a4c      	ldr	r2, [pc, #304]	; (800079c <HAL_SAI_RxCpltCallback+0x164>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	3320      	adds	r3, #32
 8000676:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3b20      	subs	r3, #32
 800067c:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b00      	cmp	r3, #0
 8000682:	dcf2      	bgt.n	800066a <HAL_SAI_RxCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000684:	f3bf 8f4f 	dsb	sy
}
 8000688:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800068a:	f3bf 8f6f 	isb	sy
}
 800068e:	bf00      	nop
}
 8000690:	bf00      	nop
 8000692:	4b43      	ldr	r3, [pc, #268]	; (80007a0 <HAL_SAI_RxCpltCallback+0x168>)
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
 8000696:	2340      	movs	r3, #64	; 0x40
 8000698:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	2b00      	cmp	r3, #0
 800069e:	dd1d      	ble.n	80006dc <HAL_SAI_RxCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	f003 021f 	and.w	r2, r3, #31
 80006a6:	6a3b      	ldr	r3, [r7, #32]
 80006a8:	4413      	add	r3, r2
 80006aa:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80006ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 80006b0:	f3bf 8f4f 	dsb	sy
}
 80006b4:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80006b6:	4a39      	ldr	r2, [pc, #228]	; (800079c <HAL_SAI_RxCpltCallback+0x164>)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	3320      	adds	r3, #32
 80006c2:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	3b20      	subs	r3, #32
 80006c8:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	dcf2      	bgt.n	80006b6 <HAL_SAI_RxCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 80006d0:	f3bf 8f4f 	dsb	sy
}
 80006d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d6:	f3bf 8f6f 	isb	sy
}
 80006da:	bf00      	nop
}
 80006dc:	bf00      	nop

	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	output_i2s_buffer_au32[14] = input_i2s_buffer_au32[10];
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <HAL_SAI_RxCpltCallback+0x160>)
 80006e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e2:	4a2f      	ldr	r2, [pc, #188]	; (80007a0 <HAL_SAI_RxCpltCallback+0x168>)
 80006e4:	6393      	str	r3, [r2, #56]	; 0x38
	output_i2s_buffer_au32[15] = input_i2s_buffer_au32[11];
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <HAL_SAI_RxCpltCallback+0x160>)
 80006e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ea:	4a2d      	ldr	r2, [pc, #180]	; (80007a0 <HAL_SAI_RxCpltCallback+0x168>)
 80006ec:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006ee:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <HAL_SAI_RxCpltCallback+0x160>)
 80006f0:	637b      	str	r3, [r7, #52]	; 0x34
 80006f2:	2340      	movs	r3, #64	; 0x40
 80006f4:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 80006f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dd1d      	ble.n	8000738 <HAL_SAI_RxCpltCallback+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80006fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006fe:	f003 021f 	and.w	r2, r3, #31
 8000702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000704:	4413      	add	r3, r2
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 800070c:	f3bf 8f4f 	dsb	sy
}
 8000710:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <HAL_SAI_RxCpltCallback+0x164>)
 8000714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000716:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800071a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071c:	3320      	adds	r3, #32
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000722:	3b20      	subs	r3, #32
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf2      	bgt.n	8000712 <HAL_SAI_RxCpltCallback+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 800072c:	f3bf 8f4f 	dsb	sy
}
 8000730:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000732:	f3bf 8f6f 	isb	sy
}
 8000736:	bf00      	nop
}
 8000738:	bf00      	nop
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <HAL_SAI_RxCpltCallback+0x168>)
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
 800073e:	2340      	movs	r3, #64	; 0x40
 8000740:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8000742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000744:	2b00      	cmp	r3, #0
 8000746:	dd1d      	ble.n	8000784 <HAL_SAI_RxCpltCallback+0x14c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800074a:	f003 021f 	and.w	r2, r3, #31
 800074e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000750:	4413      	add	r3, r2
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8000758:	f3bf 8f4f 	dsb	sy
}
 800075c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <HAL_SAI_RxCpltCallback+0x164>)
 8000760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000762:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000768:	3320      	adds	r3, #32
 800076a:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800076c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800076e:	3b20      	subs	r3, #32
 8000770:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 8000772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000774:	2b00      	cmp	r3, #0
 8000776:	dcf2      	bgt.n	800075e <HAL_SAI_RxCpltCallback+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8000778:	f3bf 8f4f 	dsb	sy
}
 800077c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800077e:	f3bf 8f6f 	isb	sy
}
 8000782:	bf00      	nop
}
 8000784:	bf00      	nop

	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000786:	bf00      	nop
 8000788:	374c      	adds	r7, #76	; 0x4c
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	24000314 	.word	0x24000314
 8000798:	24000318 	.word	0x24000318
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	24000358 	.word	0x24000358

080007a4 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 80007a4:	b480      	push	{r7}
 80007a6:	b093      	sub	sp, #76	; 0x4c
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 1;
 80007ac:	4b54      	ldr	r3, [pc, #336]	; (8000900 <HAL_SAI_RxHalfCpltCallback+0x15c>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	4b54      	ldr	r3, [pc, #336]	; (8000904 <HAL_SAI_RxHalfCpltCallback+0x160>)
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	2340      	movs	r3, #64	; 0x40
 80007b8:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dd1d      	ble.n	80007fc <HAL_SAI_RxHalfCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	f003 021f 	and.w	r2, r3, #31
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	4413      	add	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80007d0:	f3bf 8f4f 	dsb	sy
}
 80007d4:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80007d6:	4a4c      	ldr	r2, [pc, #304]	; (8000908 <HAL_SAI_RxHalfCpltCallback+0x164>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	3320      	adds	r3, #32
 80007e2:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3b20      	subs	r3, #32
 80007e8:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dcf2      	bgt.n	80007d6 <HAL_SAI_RxHalfCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 80007f0:	f3bf 8f4f 	dsb	sy
}
 80007f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f6:	f3bf 8f6f 	isb	sy
}
 80007fa:	bf00      	nop
}
 80007fc:	bf00      	nop
 80007fe:	4b43      	ldr	r3, [pc, #268]	; (800090c <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
 8000802:	2340      	movs	r3, #64	; 0x40
 8000804:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	2b00      	cmp	r3, #0
 800080a:	dd1d      	ble.n	8000848 <HAL_SAI_RxHalfCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080e:	f003 021f 	and.w	r2, r3, #31
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	4413      	add	r3, r2
 8000816:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 800081c:	f3bf 8f4f 	dsb	sy
}
 8000820:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000822:	4a39      	ldr	r2, [pc, #228]	; (8000908 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	3320      	adds	r3, #32
 800082e:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	3b20      	subs	r3, #32
 8000834:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	2b00      	cmp	r3, #0
 800083a:	dcf2      	bgt.n	8000822 <HAL_SAI_RxHalfCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 800083c:	f3bf 8f4f 	dsb	sy
}
 8000840:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000842:	f3bf 8f6f 	isb	sy
}
 8000846:	bf00      	nop
}
 8000848:	bf00      	nop


	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	output_i2s_buffer_au32[6] = input_i2s_buffer_au32[2];
 800084a:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <HAL_SAI_RxHalfCpltCallback+0x160>)
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	4a2f      	ldr	r2, [pc, #188]	; (800090c <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000850:	6193      	str	r3, [r2, #24]
	output_i2s_buffer_au32[7] = input_i2s_buffer_au32[3];
 8000852:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	4a2d      	ldr	r2, [pc, #180]	; (800090c <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <HAL_SAI_RxHalfCpltCallback+0x168>)
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
 800085e:	2340      	movs	r3, #64	; 0x40
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 8000862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000864:	2b00      	cmp	r3, #0
 8000866:	dd1d      	ble.n	80008a4 <HAL_SAI_RxHalfCpltCallback+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800086a:	f003 021f 	and.w	r2, r3, #31
 800086e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000870:	4413      	add	r3, r2
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 8000878:	f3bf 8f4f 	dsb	sy
}
 800087c:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800087e:	4a22      	ldr	r2, [pc, #136]	; (8000908 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000882:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000888:	3320      	adds	r3, #32
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088e:	3b20      	subs	r3, #32
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000894:	2b00      	cmp	r3, #0
 8000896:	dcf2      	bgt.n	800087e <HAL_SAI_RxHalfCpltCallback+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 8000898:	f3bf 8f4f 	dsb	sy
}
 800089c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800089e:	f3bf 8f6f 	isb	sy
}
 80008a2:	bf00      	nop
}
 80008a4:	bf00      	nop
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <HAL_SAI_RxHalfCpltCallback+0x160>)
 80008a8:	647b      	str	r3, [r7, #68]	; 0x44
 80008aa:	2340      	movs	r3, #64	; 0x40
 80008ac:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 80008ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	dd1d      	ble.n	80008f0 <HAL_SAI_RxHalfCpltCallback+0x14c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80008b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008b6:	f003 021f 	and.w	r2, r3, #31
 80008ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008bc:	4413      	add	r3, r2
 80008be:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80008c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 80008c4:	f3bf 8f4f 	dsb	sy
}
 80008c8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <HAL_SAI_RxHalfCpltCallback+0x164>)
 80008cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008ce:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80008d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008d4:	3320      	adds	r3, #32
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80008d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008da:	3b20      	subs	r3, #32
 80008dc:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 80008de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	dcf2      	bgt.n	80008ca <HAL_SAI_RxHalfCpltCallback+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 80008e4:	f3bf 8f4f 	dsb	sy
}
 80008e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008ea:	f3bf 8f6f 	isb	sy
}
 80008ee:	bf00      	nop
}
 80008f0:	bf00      	nop

	SCB_CleanDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
}
 80008f2:	bf00      	nop
 80008f4:	374c      	adds	r7, #76	; 0x4c
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	24000314 	.word	0x24000314
 8000904:	24000318 	.word	0x24000318
 8000908:	e000ed00 	.word	0xe000ed00
 800090c:	24000358 	.word	0x24000358

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08e      	sub	sp, #56	; 0x38
 8000914:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000916:	4b9a      	ldr	r3, [pc, #616]	; (8000b80 <main+0x270>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091e:	2b00      	cmp	r3, #0
 8000920:	d11b      	bne.n	800095a <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8000922:	f3bf 8f4f 	dsb	sy
}
 8000926:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000928:	f3bf 8f6f 	isb	sy
}
 800092c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800092e:	4b94      	ldr	r3, [pc, #592]	; (8000b80 <main+0x270>)
 8000930:	2200      	movs	r2, #0
 8000932:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000936:	f3bf 8f4f 	dsb	sy
}
 800093a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800093c:	f3bf 8f6f 	isb	sy
}
 8000940:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000942:	4b8f      	ldr	r3, [pc, #572]	; (8000b80 <main+0x270>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	4a8e      	ldr	r2, [pc, #568]	; (8000b80 <main+0x270>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800094e:	f3bf 8f4f 	dsb	sy
}
 8000952:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000954:	f3bf 8f6f 	isb	sy
}
 8000958:	e000      	b.n	800095c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800095a:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800095c:	4b88      	ldr	r3, [pc, #544]	; (8000b80 <main+0x270>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000964:	2b00      	cmp	r3, #0
 8000966:	d138      	bne.n	80009da <main+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000968:	4b85      	ldr	r3, [pc, #532]	; (8000b80 <main+0x270>)
 800096a:	2200      	movs	r2, #0
 800096c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000970:	f3bf 8f4f 	dsb	sy
}
 8000974:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000976:	4b82      	ldr	r3, [pc, #520]	; (8000b80 <main+0x270>)
 8000978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800097c:	60bb      	str	r3, [r7, #8]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	0b5b      	lsrs	r3, r3, #13
 8000982:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000986:	607b      	str	r3, [r7, #4]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000990:	603b      	str	r3, [r7, #0]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	015a      	lsls	r2, r3, #5
 8000996:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800099a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800099c:	683a      	ldr	r2, [r7, #0]
 800099e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009a0:	4977      	ldr	r1, [pc, #476]	; (8000b80 <main+0x270>)
 80009a2:	4313      	orrs	r3, r2
 80009a4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	1e5a      	subs	r2, r3, #1
 80009ac:	603a      	str	r2, [r7, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1ef      	bne.n	8000992 <main+0x82>
    } while(sets-- != 0U);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	607a      	str	r2, [r7, #4]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1e5      	bne.n	8000988 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80009bc:	f3bf 8f4f 	dsb	sy
}
 80009c0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009c2:	4b6f      	ldr	r3, [pc, #444]	; (8000b80 <main+0x270>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a6e      	ldr	r2, [pc, #440]	; (8000b80 <main+0x270>)
 80009c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ce:	f3bf 8f4f 	dsb	sy
}
 80009d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009d4:	f3bf 8f6f 	isb	sy
}
 80009d8:	e000      	b.n	80009dc <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009da:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009dc:	f000 feda 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f8de 	bl	8000ba0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009e4:	f000 f94a 	bl	8000c7c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e8:	f000 faf4 	bl	8000fd4 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ec:	f000 fa30 	bl	8000e50 <MX_DMA_Init>
  MX_SAI1_Init();
 80009f0:	f000 f978 	bl	8000ce4 <MX_SAI1_Init>
  MX_SPI1_Init();
 80009f4:	f000 f9d6 	bl	8000da4 <MX_SPI1_Init>
  MX_FMC_Init();
 80009f8:	f000 fa62 	bl	8000ec0 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  // init SAI interface
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, output_i2s_buffer_au32, 	16);
 80009fc:	2210      	movs	r2, #16
 80009fe:	4961      	ldr	r1, [pc, #388]	; (8000b84 <main+0x274>)
 8000a00:	4861      	ldr	r0, [pc, #388]	; (8000b88 <main+0x278>)
 8000a02:	f007 f8eb 	bl	8007bdc <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, input_i2s_buffer_au32, 	16);
 8000a06:	2210      	movs	r2, #16
 8000a08:	4960      	ldr	r1, [pc, #384]	; (8000b8c <main+0x27c>)
 8000a0a:	4861      	ldr	r0, [pc, #388]	; (8000b90 <main+0x280>)
 8000a0c:	f007 f99c 	bl	8007d48 <HAL_SAI_Receive_DMA>

  // init CODEC
	ad1939_init(&hspi1);
 8000a10:	4860      	ldr	r0, [pc, #384]	; (8000b94 <main+0x284>)
 8000a12:	f7ff fccb 	bl	80003ac <ad1939_init>
  {
	  uint32_t fmctestStart;
	  uint32_t fmctestStop;


	  fmctestStart = HAL_GetTick();
 8000a16:	f000 ff43 	bl	80018a0 <HAL_GetTick>
 8000a1a:	6178      	str	r0, [r7, #20]
	  uint32_t errorCounter =0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34




	  for(uint8_t j=0; j<250;j++){
 8000a20:	2300      	movs	r3, #0
 8000a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000a26:	e043      	b.n	8000ab0 <main+0x1a0>
	  			  fmctestStart = HAL_GetTick();
 8000a28:	f000 ff3a 	bl	80018a0 <HAL_GetTick>
 8000a2c:	6178      	str	r0, [r7, #20]
	  			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a32:	e00e      	b.n	8000a52 <main+0x142>
	  				normal_array[counter] = j;
 8000a34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a40:	4a55      	ldr	r2, [pc, #340]	; (8000b98 <main+0x288>)
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4413      	add	r3, r2
 8000a48:	edc3 7a00 	vstr	s15, [r3]
	  			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4e:	3301      	adds	r3, #1
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a54:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d9eb      	bls.n	8000a34 <main+0x124>
	  				  //*(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) = (uint8_t) j;
	  			  }



	  			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a60:	e016      	b.n	8000a90 <main+0x180>
	  //				  if(*(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) != j){
	  //					  errorCounter++;
	  //				  }
	  				  if(normal_array[counter] != j){
 8000a62:	4a4d      	ldr	r2, [pc, #308]	; (8000b98 <main+0x288>)
 8000a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	ed93 7a00 	vldr	s14, [r3]
 8000a6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a72:	ee07 3a90 	vmov	s15, r3
 8000a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a7a:	eeb4 7a67 	vcmp.f32	s14, s15
 8000a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a82:	d002      	beq.n	8000a8a <main+0x17a>
	  							  errorCounter++;
 8000a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a86:	3301      	adds	r3, #1
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
	  			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d9e3      	bls.n	8000a62 <main+0x152>
	  						  }

	  			  }
	  			  fmctestStop = (HAL_GetTick()-fmctestStart);
 8000a9a:	f000 ff01 	bl	80018a0 <HAL_GetTick>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	60fb      	str	r3, [r7, #12]
	  for(uint8_t j=0; j<250;j++){
 8000aa6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aaa:	3301      	adds	r3, #1
 8000aac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000ab0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ab4:	2bf9      	cmp	r3, #249	; 0xf9
 8000ab6:	d9b7      	bls.n	8000a28 <main+0x118>
	  		  }

	  for(uint32_t i = 0; i<10000;i++){
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
 8000abc:	e04e      	b.n	8000b5c <main+0x24c>

		  for(uint8_t j=0; j<250;j++){
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000ac4:	e043      	b.n	8000b4e <main+0x23e>
			  fmctestStart = HAL_GetTick();
 8000ac6:	f000 feeb 	bl	80018a0 <HAL_GetTick>
 8000aca:	6178      	str	r0, [r7, #20]
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	e00e      	b.n	8000af0 <main+0x1e0>
				  sdram_array[counter] = j;
 8000ad2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ad6:	ee07 3a90 	vmov	s15, r3
 8000ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ade:	4a2f      	ldr	r2, [pc, #188]	; (8000b9c <main+0x28c>)
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	edc3 7a00 	vstr	s15, [r3]
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3301      	adds	r3, #1
 8000aee:	61fb      	str	r3, [r7, #28]
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d9eb      	bls.n	8000ad2 <main+0x1c2>
				  //*(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) = (uint8_t) j;
			  }



			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
 8000afe:	e016      	b.n	8000b2e <main+0x21e>
//				  if(*(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) != j){
//					  errorCounter++;
//				  }
				  if(sdram_array[counter] != j){
 8000b00:	4a26      	ldr	r2, [pc, #152]	; (8000b9c <main+0x28c>)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	ed93 7a00 	vldr	s14, [r3]
 8000b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b10:	ee07 3a90 	vmov	s15, r3
 8000b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b18:	eeb4 7a67 	vcmp.f32	s14, s15
 8000b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b20:	d002      	beq.n	8000b28 <main+0x218>
							  errorCounter++;
 8000b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b24:	3301      	adds	r3, #1
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d9e3      	bls.n	8000b00 <main+0x1f0>
						  }

			  }
			  fmctestStop = (HAL_GetTick()-fmctestStart);
 8000b38:	f000 feb2 	bl	80018a0 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	60fb      	str	r3, [r7, #12]
		  for(uint8_t j=0; j<250;j++){
 8000b44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b48:	3301      	adds	r3, #1
 8000b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b52:	2bf9      	cmp	r3, #249	; 0xf9
 8000b54:	d9b7      	bls.n	8000ac6 <main+0x1b6>
	  for(uint32_t i = 0; i<10000;i++){
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	3301      	adds	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d9ab      	bls.n	8000abe <main+0x1ae>
		  }

	  }

	  if(errorCounter){
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d000      	beq.n	8000b6e <main+0x25e>
		  while(1){
 8000b6c:	e7fe      	b.n	8000b6c <main+0x25c>

		  }
	  }

	  uint8_t var = *(__IO uint8_t*)(SDRAM_ADDRESS_START);
 8000b6e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	74fb      	strb	r3, [r7, #19]
	  HAL_Delay(50);
 8000b76:	2032      	movs	r0, #50	; 0x32
 8000b78:	f000 fe9e 	bl	80018b8 <HAL_Delay>
  {
 8000b7c:	e74b      	b.n	8000a16 <main+0x106>
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00
 8000b84:	24000358 	.word	0x24000358
 8000b88:	24000038 	.word	0x24000038
 8000b8c:	24000318 	.word	0x24000318
 8000b90:	240000d0 	.word	0x240000d0
 8000b94:	24000258 	.word	0x24000258
 8000b98:	24000398 	.word	0x24000398
 8000b9c:	c0000000 	.word	0xc0000000

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b09c      	sub	sp, #112	; 0x70
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	224c      	movs	r2, #76	; 0x4c
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f008 fa9e 	bl	80090f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f008 fa98 	bl	80090f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f003 fa4f 	bl	8004064 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <SystemClock_Config+0xd8>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	4a2a      	ldr	r2, [pc, #168]	; (8000c78 <SystemClock_Config+0xd8>)
 8000bd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bd4:	6193      	str	r3, [r2, #24]
 8000bd6:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <SystemClock_Config+0xd8>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000be2:	bf00      	nop
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <SystemClock_Config+0xd8>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bf0:	d1f8      	bne.n	8000be4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c00:	2302      	movs	r3, #2
 8000c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000c08:	232c      	movs	r3, #44	; 0x2c
 8000c0a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f003 fa55 	bl	80040d8 <HAL_RCC_OscConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c34:	f000 fa5e 	bl	80010f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c38:	233f      	movs	r3, #63	; 0x3f
 8000c3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c44:	2308      	movs	r3, #8
 8000c46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c48:	2340      	movs	r3, #64	; 0x40
 8000c4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c4c:	2340      	movs	r3, #64	; 0x40
 8000c4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c56:	2340      	movs	r3, #64	; 0x40
 8000c58:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2103      	movs	r1, #3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 fe14 	bl	800488c <HAL_RCC_ClockConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000c6a:	f000 fa43 	bl	80010f4 <Error_Handler>
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3770      	adds	r7, #112	; 0x70
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	58024800 	.word	0x58024800

08000c7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0ae      	sub	sp, #184	; 0xb8
 8000c80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c82:	463b      	mov	r3, r7
 8000c84:	22b8      	movs	r2, #184	; 0xb8
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f008 fa31 	bl	80090f0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 8000c8e:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8000c92:	f04f 0300 	mov.w	r3, #0
 8000c96:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 8000c9e:	230f      	movs	r3, #15
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000cae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 8000cb8:	f640 3386 	movw	r3, #2950	; 0xb86
 8000cbc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000cc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f004 f954 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8000cd6:	f000 fa0d 	bl	80010f4 <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	37b8      	adds	r7, #184	; 0xb8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <MX_SAI1_Init+0xb0>)
 8000cea:	4a2b      	ldr	r2, [pc, #172]	; (8000d98 <MX_SAI1_Init+0xb4>)
 8000cec:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_SAI1_Init+0xb0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <MX_SAI1_Init+0xb0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cfa:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <MX_SAI1_Init+0xb0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <MX_SAI1_Init+0xb0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d06:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <MX_SAI1_Init+0xb0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000d0c:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <MX_SAI1_Init+0xb0>)
 8000d0e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000d12:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <MX_SAI1_Init+0xb0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <MX_SAI1_Init+0xb0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_SAI1_Init+0xb0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d26:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <MX_SAI1_Init+0xb0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	2202      	movs	r2, #2
 8000d30:	2100      	movs	r1, #0
 8000d32:	4818      	ldr	r0, [pc, #96]	; (8000d94 <MX_SAI1_Init+0xb0>)
 8000d34:	f006 fd06 	bl	8007744 <HAL_SAI_InitProtocol>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8000d3e:	f000 f9d9 	bl	80010f4 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_SAI1_Init+0xb8>)
 8000d44:	4a16      	ldr	r2, [pc, #88]	; (8000da0 <MX_SAI1_Init+0xbc>)
 8000d46:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_SAI1_Init+0xb8>)
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_SAI1_Init+0xb8>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_SAI1_Init+0xb8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MX_SAI1_Init+0xb8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_SAI1_Init+0xb8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <MX_SAI1_Init+0xb8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_SAI1_Init+0xb8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_SAI1_Init+0xb8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8000d78:	2308      	movs	r3, #8
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4807      	ldr	r0, [pc, #28]	; (8000d9c <MX_SAI1_Init+0xb8>)
 8000d80:	f006 fce0 	bl	8007744 <HAL_SAI_InitProtocol>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000d8a:	f000 f9b3 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	24000038 	.word	0x24000038
 8000d98:	40015804 	.word	0x40015804
 8000d9c:	240000d0 	.word	0x240000d0
 8000da0:	40015824 	.word	0x40015824

08000da4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000daa:	4a28      	ldr	r2, [pc, #160]	; (8000e4c <MX_SPI1_Init+0xa8>)
 8000dac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000db0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000db4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000db6:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000dbe:	2207      	movs	r2, #7
 8000dc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000dd0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000dd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000dd8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ddc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000df8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e10:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <MX_SPI1_Init+0xa4>)
 8000e36:	f007 fb11 	bl	800845c <HAL_SPI_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000e40:	f000 f958 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	24000258 	.word	0x24000258
 8000e4c:	40013000 	.word	0x40013000

08000e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <MX_DMA_Init+0x6c>)
 8000e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e5c:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <MX_DMA_Init+0x6c>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_DMA_Init+0x6c>)
 8000e68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_DMA_Init+0x6c>)
 8000e76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <MX_DMA_Init+0x6c>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <MX_DMA_Init+0x6c>)
 8000e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	200b      	movs	r0, #11
 8000e98:	f000 fe0d 	bl	8001ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e9c:	200b      	movs	r0, #11
 8000e9e:	f000 fe24 	bl	8001aea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2038      	movs	r0, #56	; 0x38
 8000ea8:	f000 fe05 	bl	8001ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000eac:	2038      	movs	r0, #56	; 0x38
 8000eae:	f000 fe1c 	bl	8001aea <HAL_NVIC_EnableIRQ>

}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	58024400 	.word	0x58024400

08000ec0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000eda:	4b3c      	ldr	r3, [pc, #240]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000edc:	4a3c      	ldr	r2, [pc, #240]	; (8000fd0 <MX_FMC_Init+0x110>)
 8000ede:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000ee0:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ee6:	4b39      	ldr	r3, [pc, #228]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000eec:	4b37      	ldr	r3, [pc, #220]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ef2:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000ef4:	2210      	movs	r2, #16
 8000ef6:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000ef8:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000efe:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000f00:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f04:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f06:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000f0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f12:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f14:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000f16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f1c:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000f26:	2307      	movs	r3, #7
 8000f28:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8000f2e:	2306      	movs	r3, #6
 8000f30:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000f32:	2303      	movs	r3, #3
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000f36:	2302      	movs	r3, #2
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4821      	ldr	r0, [pc, #132]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000f46:	f007 f9ef 	bl	8008328 <HAL_SDRAM_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8000f50:	f000 f8d0 	bl	80010f4 <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
   FMC_SDRAM_CommandTypeDef Command;
   /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
   /* Step 3: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000f54:	2301      	movs	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1; /* configure the Target Bank bits */
 8000f58:	2310      	movs	r3, #16
 8000f5a:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber      = 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4817      	ldr	r0, [pc, #92]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000f6e:	f007 fa17 	bl	80083a0 <HAL_SDRAM_SendCommand>
    HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000f72:	2001      	movs	r0, #1
 8000f74:	f000 fca0 	bl	80018b8 <HAL_Delay>
    /* Step 5: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000f78:	2302      	movs	r3, #2
 8000f7a:	607b      	str	r3, [r7, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f82:	4619      	mov	r1, r3
 8000f84:	4811      	ldr	r0, [pc, #68]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000f86:	f007 fa0b 	bl	80083a0 <HAL_SDRAM_SendCommand>
    /* Step 6: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	607b      	str	r3, [r7, #4]
    Command.AutoRefreshNumber      = 2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	60fb      	str	r3, [r7, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480c      	ldr	r0, [pc, #48]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000f9c:	f007 fa00 	bl	80083a0 <HAL_SDRAM_SendCommand>
    /* Step 7: Program the external memory mode register */
    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	607b      	str	r3, [r7, #4]
    Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000fa4:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000fa8:	613b      	str	r3, [r7, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000fb4:	f007 f9f4 	bl	80083a0 <HAL_SDRAM_SendCommand>
    /* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
    /* Set the device refresh rate
     * COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
             = [(32ms/2048) * 270/2MHz] - 20 = 2089*/

    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 2156);
 8000fb8:	f640 016c 	movw	r1, #2156	; 0x86c
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <MX_FMC_Init+0x10c>)
 8000fbe:	f007 fa24 	bl	800840a <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3730      	adds	r7, #48	; 0x30
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	240002e0 	.word	0x240002e0
 8000fd0:	52004140 	.word	0x52004140

08000fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08c      	sub	sp, #48	; 0x30
 8000fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fea:	4b40      	ldr	r3, [pc, #256]	; (80010ec <MX_GPIO_Init+0x118>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff0:	4a3e      	ldr	r2, [pc, #248]	; (80010ec <MX_GPIO_Init+0x118>)
 8000ff2:	f043 0310 	orr.w	r3, r3, #16
 8000ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffa:	4b3c      	ldr	r3, [pc, #240]	; (80010ec <MX_GPIO_Init+0x118>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	61bb      	str	r3, [r7, #24]
 8001006:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001008:	4b38      	ldr	r3, [pc, #224]	; (80010ec <MX_GPIO_Init+0x118>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100e:	4a37      	ldr	r2, [pc, #220]	; (80010ec <MX_GPIO_Init+0x118>)
 8001010:	f043 0320 	orr.w	r3, r3, #32
 8001014:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001018:	4b34      	ldr	r3, [pc, #208]	; (80010ec <MX_GPIO_Init+0x118>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	f003 0320 	and.w	r3, r3, #32
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <MX_GPIO_Init+0x118>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102c:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <MX_GPIO_Init+0x118>)
 800102e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <MX_GPIO_Init+0x118>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	4b29      	ldr	r3, [pc, #164]	; (80010ec <MX_GPIO_Init+0x118>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104a:	4a28      	ldr	r2, [pc, #160]	; (80010ec <MX_GPIO_Init+0x118>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001054:	4b25      	ldr	r3, [pc, #148]	; (80010ec <MX_GPIO_Init+0x118>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <MX_GPIO_Init+0x118>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001068:	4a20      	ldr	r2, [pc, #128]	; (80010ec <MX_GPIO_Init+0x118>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001072:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <MX_GPIO_Init+0x118>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_GPIO_Init+0x118>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001086:	4a19      	ldr	r2, [pc, #100]	; (80010ec <MX_GPIO_Init+0x118>)
 8001088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800108c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_GPIO_Init+0x118>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <MX_GPIO_Init+0x118>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a4:	4a11      	ldr	r2, [pc, #68]	; (80010ec <MX_GPIO_Init+0x118>)
 80010a6:	f043 0308 	orr.w	r3, r3, #8
 80010aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_GPIO_Init+0x118>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	2120      	movs	r1, #32
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <MX_GPIO_Init+0x11c>)
 80010c2:	f002 ffb5 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010c6:	2320      	movs	r3, #32
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <MX_GPIO_Init+0x11c>)
 80010de:	f002 fdff 	bl	8003ce0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e2:	bf00      	nop
 80010e4:	3730      	adds	r7, #48	; 0x30
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	58024400 	.word	0x58024400
 80010f0:	58021800 	.word	0x58021800

080010f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010f8:	b672      	cpsid	i
}
 80010fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010fc:	e7fe      	b.n	80010fc <Error_Handler+0x8>
	...

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_MspInit+0x30>)
 8001108:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800110c:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_MspInit+0x30>)
 800110e:	f043 0302 	orr.w	r3, r3, #2
 8001112:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_MspInit+0x30>)
 8001118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	58024400 	.word	0x58024400

08001134 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a3a      	ldr	r2, [pc, #232]	; (800123c <HAL_SPI_MspInit+0x108>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d16d      	bne.n	8001232 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001156:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <HAL_SPI_MspInit+0x10c>)
 8001158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800115c:	4a38      	ldr	r2, [pc, #224]	; (8001240 <HAL_SPI_MspInit+0x10c>)
 800115e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001162:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001166:	4b36      	ldr	r3, [pc, #216]	; (8001240 <HAL_SPI_MspInit+0x10c>)
 8001168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800116c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <HAL_SPI_MspInit+0x10c>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	4a31      	ldr	r2, [pc, #196]	; (8001240 <HAL_SPI_MspInit+0x10c>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001184:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <HAL_SPI_MspInit+0x10c>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <HAL_SPI_MspInit+0x10c>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001198:	4a29      	ldr	r2, [pc, #164]	; (8001240 <HAL_SPI_MspInit+0x10c>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <HAL_SPI_MspInit+0x10c>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b0:	4b23      	ldr	r3, [pc, #140]	; (8001240 <HAL_SPI_MspInit+0x10c>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	4a22      	ldr	r2, [pc, #136]	; (8001240 <HAL_SPI_MspInit+0x10c>)
 80011b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <HAL_SPI_MspInit+0x10c>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> SPI1_MISO
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 80011ce:	f248 0340 	movw	r3, #32832	; 0x8040
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011e0:	2305      	movs	r3, #5
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4816      	ldr	r0, [pc, #88]	; (8001244 <HAL_SPI_MspInit+0x110>)
 80011ec:	f002 fd78 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001200:	2305      	movs	r3, #5
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <HAL_SPI_MspInit+0x114>)
 800120c:	f002 fd68 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001210:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001222:	2305      	movs	r3, #5
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	4807      	ldr	r0, [pc, #28]	; (800124c <HAL_SPI_MspInit+0x118>)
 800122e:	f002 fd57 	bl	8003ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3730      	adds	r7, #48	; 0x30
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40013000 	.word	0x40013000
 8001240:	58024400 	.word	0x58024400
 8001244:	58020000 	.word	0x58020000
 8001248:	58020c00 	.word	0x58020c00
 800124c:	58021800 	.word	0x58021800

08001250 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001250:	b580      	push	{r7, lr}
 8001252:	b0b6      	sub	sp, #216	; 0xd8
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001256:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001266:	4b5b      	ldr	r3, [pc, #364]	; (80013d4 <HAL_FMC_MspInit+0x184>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f040 80ae 	bne.w	80013cc <HAL_FMC_MspInit+0x17c>
    return;
  }
  FMC_Initialized = 1;
 8001270:	4b58      	ldr	r3, [pc, #352]	; (80013d4 <HAL_FMC_MspInit+0x184>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	22b8      	movs	r2, #184	; 0xb8
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f007 ff36 	bl	80090f0 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001290:	2300      	movs	r3, #0
 8001292:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	4618      	mov	r0, r3
 800129a:	f003 fe6d 	bl	8004f78 <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80012a4:	f7ff ff26 	bl	80010f4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012a8:	4b4b      	ldr	r3, [pc, #300]	; (80013d8 <HAL_FMC_MspInit+0x188>)
 80012aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012ae:	4a4a      	ldr	r2, [pc, #296]	; (80013d8 <HAL_FMC_MspInit+0x188>)
 80012b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012b4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80012b8:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <HAL_FMC_MspInit+0x188>)
 80012ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012c6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80012ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012e0:	230c      	movs	r3, #12
 80012e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012ea:	4619      	mov	r1, r3
 80012ec:	483b      	ldr	r0, [pc, #236]	; (80013dc <HAL_FMC_MspInit+0x18c>)
 80012ee:	f002 fcf7 	bl	8003ce0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80012f2:	230d      	movs	r3, #13
 80012f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800130a:	230c      	movs	r3, #12
 800130c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001310:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001314:	4619      	mov	r1, r3
 8001316:	4832      	ldr	r0, [pc, #200]	; (80013e0 <HAL_FMC_MspInit+0x190>)
 8001318:	f002 fce2 	bl	8003ce0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800131c:	2330      	movs	r3, #48	; 0x30
 800131e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001334:	230c      	movs	r3, #12
 8001336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800133e:	4619      	mov	r1, r3
 8001340:	4828      	ldr	r0, [pc, #160]	; (80013e4 <HAL_FMC_MspInit+0x194>)
 8001342:	f002 fccd 	bl	8003ce0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8001346:	f248 1311 	movw	r3, #33041	; 0x8111
 800134a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001360:	230c      	movs	r3, #12
 8001362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001366:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800136a:	4619      	mov	r1, r3
 800136c:	481e      	ldr	r0, [pc, #120]	; (80013e8 <HAL_FMC_MspInit+0x198>)
 800136e:	f002 fcb7 	bl	8003ce0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001372:	f24e 7383 	movw	r3, #59267	; 0xe783
 8001376:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800138c:	230c      	movs	r3, #12
 800138e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001392:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001396:	4619      	mov	r1, r3
 8001398:	4814      	ldr	r0, [pc, #80]	; (80013ec <HAL_FMC_MspInit+0x19c>)
 800139a:	f002 fca1 	bl	8003ce0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800139e:	f24c 7303 	movw	r3, #50947	; 0xc703
 80013a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013b8:	230c      	movs	r3, #12
 80013ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013be:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013c2:	4619      	mov	r1, r3
 80013c4:	480a      	ldr	r0, [pc, #40]	; (80013f0 <HAL_FMC_MspInit+0x1a0>)
 80013c6:	f002 fc8b 	bl	8003ce0 <HAL_GPIO_Init>
 80013ca:	e000      	b.n	80013ce <HAL_FMC_MspInit+0x17e>
    return;
 80013cc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80013ce:	37d8      	adds	r7, #216	; 0xd8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2402f198 	.word	0x2402f198
 80013d8:	58024400 	.word	0x58024400
 80013dc:	58021400 	.word	0x58021400
 80013e0:	58020800 	.word	0x58020800
 80013e4:	58020000 	.word	0x58020000
 80013e8:	58021800 	.word	0x58021800
 80013ec:	58021000 	.word	0x58021000
 80013f0:	58020c00 	.word	0x58020c00

080013f4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80013fc:	f7ff ff28 	bl	8001250 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a66      	ldr	r2, [pc, #408]	; (80015b0 <HAL_SAI_MspInit+0x1a8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d160      	bne.n	80014dc <HAL_SAI_MspInit+0xd4>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800141a:	4b66      	ldr	r3, [pc, #408]	; (80015b4 <HAL_SAI_MspInit+0x1ac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10e      	bne.n	8001440 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001422:	4b65      	ldr	r3, [pc, #404]	; (80015b8 <HAL_SAI_MspInit+0x1b0>)
 8001424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001428:	4a63      	ldr	r2, [pc, #396]	; (80015b8 <HAL_SAI_MspInit+0x1b0>)
 800142a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800142e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001432:	4b61      	ldr	r3, [pc, #388]	; (80015b8 <HAL_SAI_MspInit+0x1b0>)
 8001434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001440:	4b5c      	ldr	r3, [pc, #368]	; (80015b4 <HAL_SAI_MspInit+0x1ac>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	4a5b      	ldr	r2, [pc, #364]	; (80015b4 <HAL_SAI_MspInit+0x1ac>)
 8001448:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800144a:	2370      	movs	r3, #112	; 0x70
 800144c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800145a:	2306      	movs	r3, #6
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	4855      	ldr	r0, [pc, #340]	; (80015bc <HAL_SAI_MspInit+0x1b4>)
 8001466:	f002 fc3b 	bl	8003ce0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 800146a:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <HAL_SAI_MspInit+0x1b8>)
 800146c:	4a55      	ldr	r2, [pc, #340]	; (80015c4 <HAL_SAI_MspInit+0x1bc>)
 800146e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001470:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <HAL_SAI_MspInit+0x1b8>)
 8001472:	2257      	movs	r2, #87	; 0x57
 8001474:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001476:	4b52      	ldr	r3, [pc, #328]	; (80015c0 <HAL_SAI_MspInit+0x1b8>)
 8001478:	2240      	movs	r2, #64	; 0x40
 800147a:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800147c:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <HAL_SAI_MspInit+0x1b8>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001482:	4b4f      	ldr	r3, [pc, #316]	; (80015c0 <HAL_SAI_MspInit+0x1b8>)
 8001484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001488:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800148a:	4b4d      	ldr	r3, [pc, #308]	; (80015c0 <HAL_SAI_MspInit+0x1b8>)
 800148c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001490:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001492:	4b4b      	ldr	r3, [pc, #300]	; (80015c0 <HAL_SAI_MspInit+0x1b8>)
 8001494:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001498:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800149a:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <HAL_SAI_MspInit+0x1b8>)
 800149c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a0:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014a2:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <HAL_SAI_MspInit+0x1b8>)
 80014a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014a8:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014aa:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <HAL_SAI_MspInit+0x1b8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80014b0:	4843      	ldr	r0, [pc, #268]	; (80015c0 <HAL_SAI_MspInit+0x1b8>)
 80014b2:	f000 fb35 	bl	8001b20 <HAL_DMA_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 80014bc:	f7ff fe1a 	bl	80010f4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a3f      	ldr	r2, [pc, #252]	; (80015c0 <HAL_SAI_MspInit+0x1b8>)
 80014c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80014c8:	4a3d      	ldr	r2, [pc, #244]	; (80015c0 <HAL_SAI_MspInit+0x1b8>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a3b      	ldr	r2, [pc, #236]	; (80015c0 <HAL_SAI_MspInit+0x1b8>)
 80014d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80014d6:	4a3a      	ldr	r2, [pc, #232]	; (80015c0 <HAL_SAI_MspInit+0x1b8>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a39      	ldr	r2, [pc, #228]	; (80015c8 <HAL_SAI_MspInit+0x1c0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d160      	bne.n	80015a8 <HAL_SAI_MspInit+0x1a0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80014e6:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <HAL_SAI_MspInit+0x1ac>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10e      	bne.n	800150c <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80014ee:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <HAL_SAI_MspInit+0x1b0>)
 80014f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014f4:	4a30      	ldr	r2, [pc, #192]	; (80015b8 <HAL_SAI_MspInit+0x1b0>)
 80014f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <HAL_SAI_MspInit+0x1b0>)
 8001500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800150c:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <HAL_SAI_MspInit+0x1ac>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	4a28      	ldr	r2, [pc, #160]	; (80015b4 <HAL_SAI_MspInit+0x1ac>)
 8001514:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001516:	2308      	movs	r3, #8
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001526:	2306      	movs	r3, #6
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4822      	ldr	r0, [pc, #136]	; (80015bc <HAL_SAI_MspInit+0x1b4>)
 8001532:	f002 fbd5 	bl	8003ce0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream0;
 8001536:	4b25      	ldr	r3, [pc, #148]	; (80015cc <HAL_SAI_MspInit+0x1c4>)
 8001538:	4a25      	ldr	r2, [pc, #148]	; (80015d0 <HAL_SAI_MspInit+0x1c8>)
 800153a:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800153c:	4b23      	ldr	r3, [pc, #140]	; (80015cc <HAL_SAI_MspInit+0x1c4>)
 800153e:	2258      	movs	r2, #88	; 0x58
 8001540:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_SAI_MspInit+0x1c4>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001548:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_SAI_MspInit+0x1c4>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800154e:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <HAL_SAI_MspInit+0x1c4>)
 8001550:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001554:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_SAI_MspInit+0x1c4>)
 8001558:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800155c:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800155e:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <HAL_SAI_MspInit+0x1c4>)
 8001560:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001564:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_SAI_MspInit+0x1c4>)
 8001568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800156c:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_SAI_MspInit+0x1c4>)
 8001570:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001574:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_SAI_MspInit+0x1c4>)
 8001578:	2200      	movs	r2, #0
 800157a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800157c:	4813      	ldr	r0, [pc, #76]	; (80015cc <HAL_SAI_MspInit+0x1c4>)
 800157e:	f000 facf 	bl	8001b20 <HAL_DMA_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 8001588:	f7ff fdb4 	bl	80010f4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <HAL_SAI_MspInit+0x1c4>)
 8001590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <HAL_SAI_MspInit+0x1c4>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <HAL_SAI_MspInit+0x1c4>)
 800159e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_SAI_MspInit+0x1c4>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	; 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40015804 	.word	0x40015804
 80015b4:	2402f19c 	.word	0x2402f19c
 80015b8:	58024400 	.word	0x58024400
 80015bc:	58021000 	.word	0x58021000
 80015c0:	24000168 	.word	0x24000168
 80015c4:	40020010 	.word	0x40020010
 80015c8:	40015824 	.word	0x40015824
 80015cc:	240001e0 	.word	0x240001e0
 80015d0:	40020410 	.word	0x40020410

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x4>

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001620:	f000 f92a 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <DMA1_Stream0_IRQHandler+0x10>)
 800162e:	f001 f839 	bl	80026a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	24000168 	.word	0x24000168

0800163c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <DMA2_Stream0_IRQHandler+0x10>)
 8001642:	f001 f82f 	bl	80026a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	240001e0 	.word	0x240001e0

08001650 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001654:	4b32      	ldr	r3, [pc, #200]	; (8001720 <SystemInit+0xd0>)
 8001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800165a:	4a31      	ldr	r2, [pc, #196]	; (8001720 <SystemInit+0xd0>)
 800165c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <SystemInit+0xd4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	2b06      	cmp	r3, #6
 800166e:	d807      	bhi.n	8001680 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <SystemInit+0xd4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 030f 	bic.w	r3, r3, #15
 8001678:	4a2a      	ldr	r2, [pc, #168]	; (8001724 <SystemInit+0xd4>)
 800167a:	f043 0307 	orr.w	r3, r3, #7
 800167e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <SystemInit+0xd8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a28      	ldr	r2, [pc, #160]	; (8001728 <SystemInit+0xd8>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800168c:	4b26      	ldr	r3, [pc, #152]	; (8001728 <SystemInit+0xd8>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <SystemInit+0xd8>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4924      	ldr	r1, [pc, #144]	; (8001728 <SystemInit+0xd8>)
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <SystemInit+0xdc>)
 800169a:	4013      	ands	r3, r2
 800169c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <SystemInit+0xd4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <SystemInit+0xd4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 030f 	bic.w	r3, r3, #15
 80016b2:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <SystemInit+0xd4>)
 80016b4:	f043 0307 	orr.w	r3, r3, #7
 80016b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <SystemInit+0xd8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <SystemInit+0xd8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <SystemInit+0xd8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <SystemInit+0xd8>)
 80016ce:	4a18      	ldr	r2, [pc, #96]	; (8001730 <SystemInit+0xe0>)
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <SystemInit+0xd8>)
 80016d4:	4a17      	ldr	r2, [pc, #92]	; (8001734 <SystemInit+0xe4>)
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <SystemInit+0xd8>)
 80016da:	4a17      	ldr	r2, [pc, #92]	; (8001738 <SystemInit+0xe8>)
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <SystemInit+0xd8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <SystemInit+0xd8>)
 80016e6:	4a14      	ldr	r2, [pc, #80]	; (8001738 <SystemInit+0xe8>)
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <SystemInit+0xd8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <SystemInit+0xd8>)
 80016f2:	4a11      	ldr	r2, [pc, #68]	; (8001738 <SystemInit+0xe8>)
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <SystemInit+0xd8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <SystemInit+0xd8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a09      	ldr	r2, [pc, #36]	; (8001728 <SystemInit+0xd8>)
 8001702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001706:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <SystemInit+0xd8>)
 800170a:	2200      	movs	r2, #0
 800170c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <SystemInit+0xec>)
 8001710:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001714:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	52002000 	.word	0x52002000
 8001728:	58024400 	.word	0x58024400
 800172c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001730:	02020200 	.word	0x02020200
 8001734:	01ff0000 	.word	0x01ff0000
 8001738:	01010280 	.word	0x01010280
 800173c:	52004000 	.word	0x52004000

08001740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001778 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001744:	f7ff ff84 	bl	8001650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001760:	4c0a      	ldr	r4, [pc, #40]	; (800178c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176e:	f007 fcc7 	bl	8009100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001772:	f7ff f8cd 	bl	8000910 <main>
  bx  lr
 8001776:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001778:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800177c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001780:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001784:	08009180 	.word	0x08009180
  ldr r2, =_sbss
 8001788:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800178c:	2402f1a4 	.word	0x2402f1a4

08001790 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC3_IRQHandler>
	...

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179a:	2003      	movs	r0, #3
 800179c:	f000 f980 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017a0:	f003 fa2a 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_Init+0x68>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	4913      	ldr	r1, [pc, #76]	; (8001800 <HAL_Init+0x6c>)
 80017b2:	5ccb      	ldrb	r3, [r1, r3]
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
 80017bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_Init+0x68>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <HAL_Init+0x6c>)
 80017c8:	5cd3      	ldrb	r3, [r2, r3]
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	fa22 f303 	lsr.w	r3, r2, r3
 80017d4:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <HAL_Init+0x70>)
 80017d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017d8:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <HAL_Init+0x74>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017de:	200f      	movs	r0, #15
 80017e0:	f000 f814 	bl	800180c <HAL_InitTick>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e002      	b.n	80017f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017ee:	f7ff fc87 	bl	8001100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	58024400 	.word	0x58024400
 8001800:	08009160 	.word	0x08009160
 8001804:	24000004 	.word	0x24000004
 8001808:	24000000 	.word	0x24000000

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_InitTick+0x60>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e021      	b.n	8001864 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_InitTick+0x64>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_InitTick+0x60>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f965 	bl	8001b06 <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f92f 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x68>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2400000c 	.word	0x2400000c
 8001870:	24000000 	.word	0x24000000
 8001874:	24000008 	.word	0x24000008

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	2400000c 	.word	0x2400000c
 800189c:	2402f1a0 	.word	0x2402f1a0

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2402f1a0 	.word	0x2402f1a0

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2400000c 	.word	0x2400000c

08001900 <__NVIC_SetPriorityGrouping>:
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <__NVIC_SetPriorityGrouping+0x40>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 800192a:	4313      	orrs	r3, r2
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <__NVIC_SetPriorityGrouping+0x40>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00
 8001944:	05fa0000 	.word	0x05fa0000

08001948 <__NVIC_GetPriorityGrouping>:
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4907      	ldr	r1, [pc, #28]	; (800199c <__NVIC_EnableIRQ+0x38>)
 800197e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff29 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff40 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff90 	bl	80019f4 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5f 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff33 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffa4 	bl	8001a5c <SysTick_Config>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001b28:	f7ff feba 	bl	80018a0 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e312      	b.n	800215e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a66      	ldr	r2, [pc, #408]	; (8001cd8 <HAL_DMA_Init+0x1b8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d04a      	beq.n	8001bd8 <HAL_DMA_Init+0xb8>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a65      	ldr	r2, [pc, #404]	; (8001cdc <HAL_DMA_Init+0x1bc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d045      	beq.n	8001bd8 <HAL_DMA_Init+0xb8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a63      	ldr	r2, [pc, #396]	; (8001ce0 <HAL_DMA_Init+0x1c0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d040      	beq.n	8001bd8 <HAL_DMA_Init+0xb8>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a62      	ldr	r2, [pc, #392]	; (8001ce4 <HAL_DMA_Init+0x1c4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d03b      	beq.n	8001bd8 <HAL_DMA_Init+0xb8>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a60      	ldr	r2, [pc, #384]	; (8001ce8 <HAL_DMA_Init+0x1c8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d036      	beq.n	8001bd8 <HAL_DMA_Init+0xb8>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a5f      	ldr	r2, [pc, #380]	; (8001cec <HAL_DMA_Init+0x1cc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d031      	beq.n	8001bd8 <HAL_DMA_Init+0xb8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a5d      	ldr	r2, [pc, #372]	; (8001cf0 <HAL_DMA_Init+0x1d0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d02c      	beq.n	8001bd8 <HAL_DMA_Init+0xb8>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a5c      	ldr	r2, [pc, #368]	; (8001cf4 <HAL_DMA_Init+0x1d4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d027      	beq.n	8001bd8 <HAL_DMA_Init+0xb8>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a5a      	ldr	r2, [pc, #360]	; (8001cf8 <HAL_DMA_Init+0x1d8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d022      	beq.n	8001bd8 <HAL_DMA_Init+0xb8>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a59      	ldr	r2, [pc, #356]	; (8001cfc <HAL_DMA_Init+0x1dc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d01d      	beq.n	8001bd8 <HAL_DMA_Init+0xb8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a57      	ldr	r2, [pc, #348]	; (8001d00 <HAL_DMA_Init+0x1e0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d018      	beq.n	8001bd8 <HAL_DMA_Init+0xb8>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a56      	ldr	r2, [pc, #344]	; (8001d04 <HAL_DMA_Init+0x1e4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d013      	beq.n	8001bd8 <HAL_DMA_Init+0xb8>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a54      	ldr	r2, [pc, #336]	; (8001d08 <HAL_DMA_Init+0x1e8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00e      	beq.n	8001bd8 <HAL_DMA_Init+0xb8>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a53      	ldr	r2, [pc, #332]	; (8001d0c <HAL_DMA_Init+0x1ec>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d009      	beq.n	8001bd8 <HAL_DMA_Init+0xb8>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a51      	ldr	r2, [pc, #324]	; (8001d10 <HAL_DMA_Init+0x1f0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d004      	beq.n	8001bd8 <HAL_DMA_Init+0xb8>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a50      	ldr	r2, [pc, #320]	; (8001d14 <HAL_DMA_Init+0x1f4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_DMA_Init+0xbc>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_DMA_Init+0xbe>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 813c 	beq.w	8001e5c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a37      	ldr	r2, [pc, #220]	; (8001cd8 <HAL_DMA_Init+0x1b8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d04a      	beq.n	8001c94 <HAL_DMA_Init+0x174>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a36      	ldr	r2, [pc, #216]	; (8001cdc <HAL_DMA_Init+0x1bc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d045      	beq.n	8001c94 <HAL_DMA_Init+0x174>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a34      	ldr	r2, [pc, #208]	; (8001ce0 <HAL_DMA_Init+0x1c0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d040      	beq.n	8001c94 <HAL_DMA_Init+0x174>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a33      	ldr	r2, [pc, #204]	; (8001ce4 <HAL_DMA_Init+0x1c4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d03b      	beq.n	8001c94 <HAL_DMA_Init+0x174>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a31      	ldr	r2, [pc, #196]	; (8001ce8 <HAL_DMA_Init+0x1c8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d036      	beq.n	8001c94 <HAL_DMA_Init+0x174>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a30      	ldr	r2, [pc, #192]	; (8001cec <HAL_DMA_Init+0x1cc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d031      	beq.n	8001c94 <HAL_DMA_Init+0x174>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a2e      	ldr	r2, [pc, #184]	; (8001cf0 <HAL_DMA_Init+0x1d0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d02c      	beq.n	8001c94 <HAL_DMA_Init+0x174>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a2d      	ldr	r2, [pc, #180]	; (8001cf4 <HAL_DMA_Init+0x1d4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d027      	beq.n	8001c94 <HAL_DMA_Init+0x174>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a2b      	ldr	r2, [pc, #172]	; (8001cf8 <HAL_DMA_Init+0x1d8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d022      	beq.n	8001c94 <HAL_DMA_Init+0x174>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a2a      	ldr	r2, [pc, #168]	; (8001cfc <HAL_DMA_Init+0x1dc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d01d      	beq.n	8001c94 <HAL_DMA_Init+0x174>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a28      	ldr	r2, [pc, #160]	; (8001d00 <HAL_DMA_Init+0x1e0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d018      	beq.n	8001c94 <HAL_DMA_Init+0x174>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_DMA_Init+0x1e4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d013      	beq.n	8001c94 <HAL_DMA_Init+0x174>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <HAL_DMA_Init+0x1e8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00e      	beq.n	8001c94 <HAL_DMA_Init+0x174>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a24      	ldr	r2, [pc, #144]	; (8001d0c <HAL_DMA_Init+0x1ec>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d009      	beq.n	8001c94 <HAL_DMA_Init+0x174>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a22      	ldr	r2, [pc, #136]	; (8001d10 <HAL_DMA_Init+0x1f0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d004      	beq.n	8001c94 <HAL_DMA_Init+0x174>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a21      	ldr	r2, [pc, #132]	; (8001d14 <HAL_DMA_Init+0x1f4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d108      	bne.n	8001ca6 <HAL_DMA_Init+0x186>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0201 	bic.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e007      	b.n	8001cb6 <HAL_DMA_Init+0x196>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0201 	bic.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cb6:	e02f      	b.n	8001d18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cb8:	f7ff fdf2 	bl	80018a0 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	d928      	bls.n	8001d18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2203      	movs	r2, #3
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e242      	b.n	800215e <HAL_DMA_Init+0x63e>
 8001cd8:	40020010 	.word	0x40020010
 8001cdc:	40020028 	.word	0x40020028
 8001ce0:	40020040 	.word	0x40020040
 8001ce4:	40020058 	.word	0x40020058
 8001ce8:	40020070 	.word	0x40020070
 8001cec:	40020088 	.word	0x40020088
 8001cf0:	400200a0 	.word	0x400200a0
 8001cf4:	400200b8 	.word	0x400200b8
 8001cf8:	40020410 	.word	0x40020410
 8001cfc:	40020428 	.word	0x40020428
 8001d00:	40020440 	.word	0x40020440
 8001d04:	40020458 	.word	0x40020458
 8001d08:	40020470 	.word	0x40020470
 8001d0c:	40020488 	.word	0x40020488
 8001d10:	400204a0 	.word	0x400204a0
 8001d14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1c8      	bne.n	8001cb8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4b83      	ldr	r3, [pc, #524]	; (8001f40 <HAL_DMA_Init+0x420>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d107      	bne.n	8001d7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	4313      	orrs	r3, r2
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b28      	cmp	r3, #40	; 0x28
 8001d82:	d903      	bls.n	8001d8c <HAL_DMA_Init+0x26c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b2e      	cmp	r3, #46	; 0x2e
 8001d8a:	d91f      	bls.n	8001dcc <HAL_DMA_Init+0x2ac>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b3e      	cmp	r3, #62	; 0x3e
 8001d92:	d903      	bls.n	8001d9c <HAL_DMA_Init+0x27c>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b42      	cmp	r3, #66	; 0x42
 8001d9a:	d917      	bls.n	8001dcc <HAL_DMA_Init+0x2ac>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b46      	cmp	r3, #70	; 0x46
 8001da2:	d903      	bls.n	8001dac <HAL_DMA_Init+0x28c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b48      	cmp	r3, #72	; 0x48
 8001daa:	d90f      	bls.n	8001dcc <HAL_DMA_Init+0x2ac>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b4e      	cmp	r3, #78	; 0x4e
 8001db2:	d903      	bls.n	8001dbc <HAL_DMA_Init+0x29c>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b52      	cmp	r3, #82	; 0x52
 8001dba:	d907      	bls.n	8001dcc <HAL_DMA_Init+0x2ac>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b73      	cmp	r3, #115	; 0x73
 8001dc2:	d905      	bls.n	8001dd0 <HAL_DMA_Init+0x2b0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b77      	cmp	r3, #119	; 0x77
 8001dca:	d801      	bhi.n	8001dd0 <HAL_DMA_Init+0x2b0>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_DMA_Init+0x2b2>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ddc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f023 0307 	bic.w	r3, r3, #7
 8001df4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d117      	bne.n	8001e38 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00e      	beq.n	8001e38 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f001 fdd6 	bl	80039cc <DMA_CheckFifoParam>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d008      	beq.n	8001e38 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2240      	movs	r2, #64	; 0x40
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e192      	b.n	800215e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f001 fd11 	bl	8003868 <DMA_CalcBaseAndBitshift>
 8001e46:	4603      	mov	r3, r0
 8001e48:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	223f      	movs	r2, #63	; 0x3f
 8001e54:	409a      	lsls	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	e0c8      	b.n	8001fee <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a38      	ldr	r2, [pc, #224]	; (8001f44 <HAL_DMA_Init+0x424>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d022      	beq.n	8001eac <HAL_DMA_Init+0x38c>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a37      	ldr	r2, [pc, #220]	; (8001f48 <HAL_DMA_Init+0x428>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d01d      	beq.n	8001eac <HAL_DMA_Init+0x38c>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a35      	ldr	r2, [pc, #212]	; (8001f4c <HAL_DMA_Init+0x42c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d018      	beq.n	8001eac <HAL_DMA_Init+0x38c>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a34      	ldr	r2, [pc, #208]	; (8001f50 <HAL_DMA_Init+0x430>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <HAL_DMA_Init+0x38c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a32      	ldr	r2, [pc, #200]	; (8001f54 <HAL_DMA_Init+0x434>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00e      	beq.n	8001eac <HAL_DMA_Init+0x38c>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a31      	ldr	r2, [pc, #196]	; (8001f58 <HAL_DMA_Init+0x438>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_DMA_Init+0x38c>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a2f      	ldr	r2, [pc, #188]	; (8001f5c <HAL_DMA_Init+0x43c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d004      	beq.n	8001eac <HAL_DMA_Init+0x38c>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a2e      	ldr	r2, [pc, #184]	; (8001f60 <HAL_DMA_Init+0x440>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d101      	bne.n	8001eb0 <HAL_DMA_Init+0x390>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <HAL_DMA_Init+0x392>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 8092 	beq.w	8001fdc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a21      	ldr	r2, [pc, #132]	; (8001f44 <HAL_DMA_Init+0x424>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d021      	beq.n	8001f06 <HAL_DMA_Init+0x3e6>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a20      	ldr	r2, [pc, #128]	; (8001f48 <HAL_DMA_Init+0x428>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d01c      	beq.n	8001f06 <HAL_DMA_Init+0x3e6>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <HAL_DMA_Init+0x42c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d017      	beq.n	8001f06 <HAL_DMA_Init+0x3e6>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <HAL_DMA_Init+0x430>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d012      	beq.n	8001f06 <HAL_DMA_Init+0x3e6>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <HAL_DMA_Init+0x434>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00d      	beq.n	8001f06 <HAL_DMA_Init+0x3e6>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <HAL_DMA_Init+0x438>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d008      	beq.n	8001f06 <HAL_DMA_Init+0x3e6>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <HAL_DMA_Init+0x43c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d003      	beq.n	8001f06 <HAL_DMA_Init+0x3e6>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <HAL_DMA_Init+0x440>)
 8001f04:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_DMA_Init+0x444>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b40      	cmp	r3, #64	; 0x40
 8001f2c:	d01c      	beq.n	8001f68 <HAL_DMA_Init+0x448>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b80      	cmp	r3, #128	; 0x80
 8001f34:	d102      	bne.n	8001f3c <HAL_DMA_Init+0x41c>
 8001f36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f3a:	e016      	b.n	8001f6a <HAL_DMA_Init+0x44a>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e014      	b.n	8001f6a <HAL_DMA_Init+0x44a>
 8001f40:	fe10803f 	.word	0xfe10803f
 8001f44:	58025408 	.word	0x58025408
 8001f48:	5802541c 	.word	0x5802541c
 8001f4c:	58025430 	.word	0x58025430
 8001f50:	58025444 	.word	0x58025444
 8001f54:	58025458 	.word	0x58025458
 8001f58:	5802546c 	.word	0x5802546c
 8001f5c:	58025480 	.word	0x58025480
 8001f60:	58025494 	.word	0x58025494
 8001f64:	fffe000f 	.word	0xfffe000f
 8001f68:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68d2      	ldr	r2, [r2, #12]
 8001f6e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f98:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b6e      	ldr	r3, [pc, #440]	; (8002168 <HAL_DMA_Init+0x648>)
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a6e      	ldr	r2, [pc, #440]	; (800216c <HAL_DMA_Init+0x64c>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	009a      	lsls	r2, r3, #2
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f001 fc51 	bl	8003868 <DMA_CalcBaseAndBitshift>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	e008      	b.n	8001fee <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2240      	movs	r2, #64	; 0x40
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0b7      	b.n	800215e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a5f      	ldr	r2, [pc, #380]	; (8002170 <HAL_DMA_Init+0x650>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d072      	beq.n	80020de <HAL_DMA_Init+0x5be>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a5d      	ldr	r2, [pc, #372]	; (8002174 <HAL_DMA_Init+0x654>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d06d      	beq.n	80020de <HAL_DMA_Init+0x5be>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a5c      	ldr	r2, [pc, #368]	; (8002178 <HAL_DMA_Init+0x658>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d068      	beq.n	80020de <HAL_DMA_Init+0x5be>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a5a      	ldr	r2, [pc, #360]	; (800217c <HAL_DMA_Init+0x65c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d063      	beq.n	80020de <HAL_DMA_Init+0x5be>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a59      	ldr	r2, [pc, #356]	; (8002180 <HAL_DMA_Init+0x660>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d05e      	beq.n	80020de <HAL_DMA_Init+0x5be>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a57      	ldr	r2, [pc, #348]	; (8002184 <HAL_DMA_Init+0x664>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d059      	beq.n	80020de <HAL_DMA_Init+0x5be>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a56      	ldr	r2, [pc, #344]	; (8002188 <HAL_DMA_Init+0x668>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d054      	beq.n	80020de <HAL_DMA_Init+0x5be>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a54      	ldr	r2, [pc, #336]	; (800218c <HAL_DMA_Init+0x66c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d04f      	beq.n	80020de <HAL_DMA_Init+0x5be>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a53      	ldr	r2, [pc, #332]	; (8002190 <HAL_DMA_Init+0x670>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d04a      	beq.n	80020de <HAL_DMA_Init+0x5be>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a51      	ldr	r2, [pc, #324]	; (8002194 <HAL_DMA_Init+0x674>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d045      	beq.n	80020de <HAL_DMA_Init+0x5be>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a50      	ldr	r2, [pc, #320]	; (8002198 <HAL_DMA_Init+0x678>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d040      	beq.n	80020de <HAL_DMA_Init+0x5be>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a4e      	ldr	r2, [pc, #312]	; (800219c <HAL_DMA_Init+0x67c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d03b      	beq.n	80020de <HAL_DMA_Init+0x5be>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a4d      	ldr	r2, [pc, #308]	; (80021a0 <HAL_DMA_Init+0x680>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d036      	beq.n	80020de <HAL_DMA_Init+0x5be>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a4b      	ldr	r2, [pc, #300]	; (80021a4 <HAL_DMA_Init+0x684>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d031      	beq.n	80020de <HAL_DMA_Init+0x5be>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a4a      	ldr	r2, [pc, #296]	; (80021a8 <HAL_DMA_Init+0x688>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d02c      	beq.n	80020de <HAL_DMA_Init+0x5be>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a48      	ldr	r2, [pc, #288]	; (80021ac <HAL_DMA_Init+0x68c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d027      	beq.n	80020de <HAL_DMA_Init+0x5be>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a47      	ldr	r2, [pc, #284]	; (80021b0 <HAL_DMA_Init+0x690>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d022      	beq.n	80020de <HAL_DMA_Init+0x5be>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a45      	ldr	r2, [pc, #276]	; (80021b4 <HAL_DMA_Init+0x694>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01d      	beq.n	80020de <HAL_DMA_Init+0x5be>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a44      	ldr	r2, [pc, #272]	; (80021b8 <HAL_DMA_Init+0x698>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d018      	beq.n	80020de <HAL_DMA_Init+0x5be>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a42      	ldr	r2, [pc, #264]	; (80021bc <HAL_DMA_Init+0x69c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_DMA_Init+0x5be>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a41      	ldr	r2, [pc, #260]	; (80021c0 <HAL_DMA_Init+0x6a0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00e      	beq.n	80020de <HAL_DMA_Init+0x5be>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a3f      	ldr	r2, [pc, #252]	; (80021c4 <HAL_DMA_Init+0x6a4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d009      	beq.n	80020de <HAL_DMA_Init+0x5be>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a3e      	ldr	r2, [pc, #248]	; (80021c8 <HAL_DMA_Init+0x6a8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d004      	beq.n	80020de <HAL_DMA_Init+0x5be>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a3c      	ldr	r2, [pc, #240]	; (80021cc <HAL_DMA_Init+0x6ac>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <HAL_DMA_Init+0x5c2>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <HAL_DMA_Init+0x5c4>
 80020e2:	2300      	movs	r3, #0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d032      	beq.n	800214e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f001 fceb 	bl	8003ac4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b80      	cmp	r3, #128	; 0x80
 80020f4:	d102      	bne.n	80020fc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002110:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d010      	beq.n	800213c <HAL_DMA_Init+0x61c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b08      	cmp	r3, #8
 8002120:	d80c      	bhi.n	800213c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f001 fd68 	bl	8003bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	e008      	b.n	800214e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	a7fdabf8 	.word	0xa7fdabf8
 800216c:	cccccccd 	.word	0xcccccccd
 8002170:	40020010 	.word	0x40020010
 8002174:	40020028 	.word	0x40020028
 8002178:	40020040 	.word	0x40020040
 800217c:	40020058 	.word	0x40020058
 8002180:	40020070 	.word	0x40020070
 8002184:	40020088 	.word	0x40020088
 8002188:	400200a0 	.word	0x400200a0
 800218c:	400200b8 	.word	0x400200b8
 8002190:	40020410 	.word	0x40020410
 8002194:	40020428 	.word	0x40020428
 8002198:	40020440 	.word	0x40020440
 800219c:	40020458 	.word	0x40020458
 80021a0:	40020470 	.word	0x40020470
 80021a4:	40020488 	.word	0x40020488
 80021a8:	400204a0 	.word	0x400204a0
 80021ac:	400204b8 	.word	0x400204b8
 80021b0:	58025408 	.word	0x58025408
 80021b4:	5802541c 	.word	0x5802541c
 80021b8:	58025430 	.word	0x58025430
 80021bc:	58025444 	.word	0x58025444
 80021c0:	58025458 	.word	0x58025458
 80021c4:	5802546c 	.word	0x5802546c
 80021c8:	58025480 	.word	0x58025480
 80021cc:	58025494 	.word	0x58025494

080021d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e226      	b.n	800263a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_DMA_Start_IT+0x2a>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e21f      	b.n	800263a <HAL_DMA_Start_IT+0x46a>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	f040 820a 	bne.w	8002624 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a68      	ldr	r2, [pc, #416]	; (80023c4 <HAL_DMA_Start_IT+0x1f4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d04a      	beq.n	80022be <HAL_DMA_Start_IT+0xee>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a66      	ldr	r2, [pc, #408]	; (80023c8 <HAL_DMA_Start_IT+0x1f8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d045      	beq.n	80022be <HAL_DMA_Start_IT+0xee>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a65      	ldr	r2, [pc, #404]	; (80023cc <HAL_DMA_Start_IT+0x1fc>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d040      	beq.n	80022be <HAL_DMA_Start_IT+0xee>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a63      	ldr	r2, [pc, #396]	; (80023d0 <HAL_DMA_Start_IT+0x200>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d03b      	beq.n	80022be <HAL_DMA_Start_IT+0xee>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a62      	ldr	r2, [pc, #392]	; (80023d4 <HAL_DMA_Start_IT+0x204>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d036      	beq.n	80022be <HAL_DMA_Start_IT+0xee>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a60      	ldr	r2, [pc, #384]	; (80023d8 <HAL_DMA_Start_IT+0x208>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d031      	beq.n	80022be <HAL_DMA_Start_IT+0xee>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a5f      	ldr	r2, [pc, #380]	; (80023dc <HAL_DMA_Start_IT+0x20c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d02c      	beq.n	80022be <HAL_DMA_Start_IT+0xee>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a5d      	ldr	r2, [pc, #372]	; (80023e0 <HAL_DMA_Start_IT+0x210>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d027      	beq.n	80022be <HAL_DMA_Start_IT+0xee>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a5c      	ldr	r2, [pc, #368]	; (80023e4 <HAL_DMA_Start_IT+0x214>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d022      	beq.n	80022be <HAL_DMA_Start_IT+0xee>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a5a      	ldr	r2, [pc, #360]	; (80023e8 <HAL_DMA_Start_IT+0x218>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d01d      	beq.n	80022be <HAL_DMA_Start_IT+0xee>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a59      	ldr	r2, [pc, #356]	; (80023ec <HAL_DMA_Start_IT+0x21c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d018      	beq.n	80022be <HAL_DMA_Start_IT+0xee>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a57      	ldr	r2, [pc, #348]	; (80023f0 <HAL_DMA_Start_IT+0x220>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <HAL_DMA_Start_IT+0xee>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a56      	ldr	r2, [pc, #344]	; (80023f4 <HAL_DMA_Start_IT+0x224>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00e      	beq.n	80022be <HAL_DMA_Start_IT+0xee>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a54      	ldr	r2, [pc, #336]	; (80023f8 <HAL_DMA_Start_IT+0x228>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d009      	beq.n	80022be <HAL_DMA_Start_IT+0xee>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a53      	ldr	r2, [pc, #332]	; (80023fc <HAL_DMA_Start_IT+0x22c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d004      	beq.n	80022be <HAL_DMA_Start_IT+0xee>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a51      	ldr	r2, [pc, #324]	; (8002400 <HAL_DMA_Start_IT+0x230>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d108      	bne.n	80022d0 <HAL_DMA_Start_IT+0x100>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0201 	bic.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	e007      	b.n	80022e0 <HAL_DMA_Start_IT+0x110>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f001 f912 	bl	8003510 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a34      	ldr	r2, [pc, #208]	; (80023c4 <HAL_DMA_Start_IT+0x1f4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d04a      	beq.n	800238c <HAL_DMA_Start_IT+0x1bc>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a33      	ldr	r2, [pc, #204]	; (80023c8 <HAL_DMA_Start_IT+0x1f8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d045      	beq.n	800238c <HAL_DMA_Start_IT+0x1bc>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a31      	ldr	r2, [pc, #196]	; (80023cc <HAL_DMA_Start_IT+0x1fc>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d040      	beq.n	800238c <HAL_DMA_Start_IT+0x1bc>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a30      	ldr	r2, [pc, #192]	; (80023d0 <HAL_DMA_Start_IT+0x200>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d03b      	beq.n	800238c <HAL_DMA_Start_IT+0x1bc>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a2e      	ldr	r2, [pc, #184]	; (80023d4 <HAL_DMA_Start_IT+0x204>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d036      	beq.n	800238c <HAL_DMA_Start_IT+0x1bc>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a2d      	ldr	r2, [pc, #180]	; (80023d8 <HAL_DMA_Start_IT+0x208>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d031      	beq.n	800238c <HAL_DMA_Start_IT+0x1bc>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a2b      	ldr	r2, [pc, #172]	; (80023dc <HAL_DMA_Start_IT+0x20c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d02c      	beq.n	800238c <HAL_DMA_Start_IT+0x1bc>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2a      	ldr	r2, [pc, #168]	; (80023e0 <HAL_DMA_Start_IT+0x210>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d027      	beq.n	800238c <HAL_DMA_Start_IT+0x1bc>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <HAL_DMA_Start_IT+0x214>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d022      	beq.n	800238c <HAL_DMA_Start_IT+0x1bc>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a27      	ldr	r2, [pc, #156]	; (80023e8 <HAL_DMA_Start_IT+0x218>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d01d      	beq.n	800238c <HAL_DMA_Start_IT+0x1bc>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a25      	ldr	r2, [pc, #148]	; (80023ec <HAL_DMA_Start_IT+0x21c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d018      	beq.n	800238c <HAL_DMA_Start_IT+0x1bc>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a24      	ldr	r2, [pc, #144]	; (80023f0 <HAL_DMA_Start_IT+0x220>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d013      	beq.n	800238c <HAL_DMA_Start_IT+0x1bc>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <HAL_DMA_Start_IT+0x224>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00e      	beq.n	800238c <HAL_DMA_Start_IT+0x1bc>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <HAL_DMA_Start_IT+0x228>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d009      	beq.n	800238c <HAL_DMA_Start_IT+0x1bc>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <HAL_DMA_Start_IT+0x22c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d004      	beq.n	800238c <HAL_DMA_Start_IT+0x1bc>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1e      	ldr	r2, [pc, #120]	; (8002400 <HAL_DMA_Start_IT+0x230>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d101      	bne.n	8002390 <HAL_DMA_Start_IT+0x1c0>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_DMA_Start_IT+0x1c2>
 8002390:	2300      	movs	r3, #0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d036      	beq.n	8002404 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 021e 	bic.w	r2, r3, #30
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0216 	orr.w	r2, r2, #22
 80023a8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d03e      	beq.n	8002430 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0208 	orr.w	r2, r2, #8
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e035      	b.n	8002430 <HAL_DMA_Start_IT+0x260>
 80023c4:	40020010 	.word	0x40020010
 80023c8:	40020028 	.word	0x40020028
 80023cc:	40020040 	.word	0x40020040
 80023d0:	40020058 	.word	0x40020058
 80023d4:	40020070 	.word	0x40020070
 80023d8:	40020088 	.word	0x40020088
 80023dc:	400200a0 	.word	0x400200a0
 80023e0:	400200b8 	.word	0x400200b8
 80023e4:	40020410 	.word	0x40020410
 80023e8:	40020428 	.word	0x40020428
 80023ec:	40020440 	.word	0x40020440
 80023f0:	40020458 	.word	0x40020458
 80023f4:	40020470 	.word	0x40020470
 80023f8:	40020488 	.word	0x40020488
 80023fc:	400204a0 	.word	0x400204a0
 8002400:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 020e 	bic.w	r2, r3, #14
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 020a 	orr.w	r2, r2, #10
 8002416:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0204 	orr.w	r2, r2, #4
 800242e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a83      	ldr	r2, [pc, #524]	; (8002644 <HAL_DMA_Start_IT+0x474>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d072      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a82      	ldr	r2, [pc, #520]	; (8002648 <HAL_DMA_Start_IT+0x478>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d06d      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a80      	ldr	r2, [pc, #512]	; (800264c <HAL_DMA_Start_IT+0x47c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d068      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7f      	ldr	r2, [pc, #508]	; (8002650 <HAL_DMA_Start_IT+0x480>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d063      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a7d      	ldr	r2, [pc, #500]	; (8002654 <HAL_DMA_Start_IT+0x484>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d05e      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7c      	ldr	r2, [pc, #496]	; (8002658 <HAL_DMA_Start_IT+0x488>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d059      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a7a      	ldr	r2, [pc, #488]	; (800265c <HAL_DMA_Start_IT+0x48c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d054      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a79      	ldr	r2, [pc, #484]	; (8002660 <HAL_DMA_Start_IT+0x490>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d04f      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a77      	ldr	r2, [pc, #476]	; (8002664 <HAL_DMA_Start_IT+0x494>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d04a      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a76      	ldr	r2, [pc, #472]	; (8002668 <HAL_DMA_Start_IT+0x498>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d045      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a74      	ldr	r2, [pc, #464]	; (800266c <HAL_DMA_Start_IT+0x49c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d040      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a73      	ldr	r2, [pc, #460]	; (8002670 <HAL_DMA_Start_IT+0x4a0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d03b      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a71      	ldr	r2, [pc, #452]	; (8002674 <HAL_DMA_Start_IT+0x4a4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d036      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a70      	ldr	r2, [pc, #448]	; (8002678 <HAL_DMA_Start_IT+0x4a8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d031      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a6e      	ldr	r2, [pc, #440]	; (800267c <HAL_DMA_Start_IT+0x4ac>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d02c      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a6d      	ldr	r2, [pc, #436]	; (8002680 <HAL_DMA_Start_IT+0x4b0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d027      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a6b      	ldr	r2, [pc, #428]	; (8002684 <HAL_DMA_Start_IT+0x4b4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d022      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a6a      	ldr	r2, [pc, #424]	; (8002688 <HAL_DMA_Start_IT+0x4b8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d01d      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a68      	ldr	r2, [pc, #416]	; (800268c <HAL_DMA_Start_IT+0x4bc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d018      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a67      	ldr	r2, [pc, #412]	; (8002690 <HAL_DMA_Start_IT+0x4c0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d013      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a65      	ldr	r2, [pc, #404]	; (8002694 <HAL_DMA_Start_IT+0x4c4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00e      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a64      	ldr	r2, [pc, #400]	; (8002698 <HAL_DMA_Start_IT+0x4c8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d009      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a62      	ldr	r2, [pc, #392]	; (800269c <HAL_DMA_Start_IT+0x4cc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_DMA_Start_IT+0x350>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a61      	ldr	r2, [pc, #388]	; (80026a0 <HAL_DMA_Start_IT+0x4d0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_DMA_Start_IT+0x354>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_DMA_Start_IT+0x356>
 8002524:	2300      	movs	r3, #0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01a      	beq.n	8002560 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002546:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800255e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a37      	ldr	r2, [pc, #220]	; (8002644 <HAL_DMA_Start_IT+0x474>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d04a      	beq.n	8002600 <HAL_DMA_Start_IT+0x430>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a36      	ldr	r2, [pc, #216]	; (8002648 <HAL_DMA_Start_IT+0x478>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d045      	beq.n	8002600 <HAL_DMA_Start_IT+0x430>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a34      	ldr	r2, [pc, #208]	; (800264c <HAL_DMA_Start_IT+0x47c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d040      	beq.n	8002600 <HAL_DMA_Start_IT+0x430>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a33      	ldr	r2, [pc, #204]	; (8002650 <HAL_DMA_Start_IT+0x480>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d03b      	beq.n	8002600 <HAL_DMA_Start_IT+0x430>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a31      	ldr	r2, [pc, #196]	; (8002654 <HAL_DMA_Start_IT+0x484>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d036      	beq.n	8002600 <HAL_DMA_Start_IT+0x430>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a30      	ldr	r2, [pc, #192]	; (8002658 <HAL_DMA_Start_IT+0x488>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <HAL_DMA_Start_IT+0x430>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a2e      	ldr	r2, [pc, #184]	; (800265c <HAL_DMA_Start_IT+0x48c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d02c      	beq.n	8002600 <HAL_DMA_Start_IT+0x430>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2d      	ldr	r2, [pc, #180]	; (8002660 <HAL_DMA_Start_IT+0x490>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d027      	beq.n	8002600 <HAL_DMA_Start_IT+0x430>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a2b      	ldr	r2, [pc, #172]	; (8002664 <HAL_DMA_Start_IT+0x494>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d022      	beq.n	8002600 <HAL_DMA_Start_IT+0x430>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a2a      	ldr	r2, [pc, #168]	; (8002668 <HAL_DMA_Start_IT+0x498>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d01d      	beq.n	8002600 <HAL_DMA_Start_IT+0x430>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a28      	ldr	r2, [pc, #160]	; (800266c <HAL_DMA_Start_IT+0x49c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d018      	beq.n	8002600 <HAL_DMA_Start_IT+0x430>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a27      	ldr	r2, [pc, #156]	; (8002670 <HAL_DMA_Start_IT+0x4a0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d013      	beq.n	8002600 <HAL_DMA_Start_IT+0x430>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a25      	ldr	r2, [pc, #148]	; (8002674 <HAL_DMA_Start_IT+0x4a4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00e      	beq.n	8002600 <HAL_DMA_Start_IT+0x430>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a24      	ldr	r2, [pc, #144]	; (8002678 <HAL_DMA_Start_IT+0x4a8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d009      	beq.n	8002600 <HAL_DMA_Start_IT+0x430>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a22      	ldr	r2, [pc, #136]	; (800267c <HAL_DMA_Start_IT+0x4ac>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d004      	beq.n	8002600 <HAL_DMA_Start_IT+0x430>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a21      	ldr	r2, [pc, #132]	; (8002680 <HAL_DMA_Start_IT+0x4b0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d108      	bne.n	8002612 <HAL_DMA_Start_IT+0x442>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e012      	b.n	8002638 <HAL_DMA_Start_IT+0x468>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	e009      	b.n	8002638 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800262a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002638:	7dfb      	ldrb	r3, [r7, #23]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40020010 	.word	0x40020010
 8002648:	40020028 	.word	0x40020028
 800264c:	40020040 	.word	0x40020040
 8002650:	40020058 	.word	0x40020058
 8002654:	40020070 	.word	0x40020070
 8002658:	40020088 	.word	0x40020088
 800265c:	400200a0 	.word	0x400200a0
 8002660:	400200b8 	.word	0x400200b8
 8002664:	40020410 	.word	0x40020410
 8002668:	40020428 	.word	0x40020428
 800266c:	40020440 	.word	0x40020440
 8002670:	40020458 	.word	0x40020458
 8002674:	40020470 	.word	0x40020470
 8002678:	40020488 	.word	0x40020488
 800267c:	400204a0 	.word	0x400204a0
 8002680:	400204b8 	.word	0x400204b8
 8002684:	58025408 	.word	0x58025408
 8002688:	5802541c 	.word	0x5802541c
 800268c:	58025430 	.word	0x58025430
 8002690:	58025444 	.word	0x58025444
 8002694:	58025458 	.word	0x58025458
 8002698:	5802546c 	.word	0x5802546c
 800269c:	58025480 	.word	0x58025480
 80026a0:	58025494 	.word	0x58025494

080026a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026b0:	4b67      	ldr	r3, [pc, #412]	; (8002850 <HAL_DMA_IRQHandler+0x1ac>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a67      	ldr	r2, [pc, #412]	; (8002854 <HAL_DMA_IRQHandler+0x1b0>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	0a9b      	lsrs	r3, r3, #10
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a5f      	ldr	r2, [pc, #380]	; (8002858 <HAL_DMA_IRQHandler+0x1b4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d04a      	beq.n	8002776 <HAL_DMA_IRQHandler+0xd2>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a5d      	ldr	r2, [pc, #372]	; (800285c <HAL_DMA_IRQHandler+0x1b8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d045      	beq.n	8002776 <HAL_DMA_IRQHandler+0xd2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a5c      	ldr	r2, [pc, #368]	; (8002860 <HAL_DMA_IRQHandler+0x1bc>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d040      	beq.n	8002776 <HAL_DMA_IRQHandler+0xd2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a5a      	ldr	r2, [pc, #360]	; (8002864 <HAL_DMA_IRQHandler+0x1c0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d03b      	beq.n	8002776 <HAL_DMA_IRQHandler+0xd2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a59      	ldr	r2, [pc, #356]	; (8002868 <HAL_DMA_IRQHandler+0x1c4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d036      	beq.n	8002776 <HAL_DMA_IRQHandler+0xd2>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a57      	ldr	r2, [pc, #348]	; (800286c <HAL_DMA_IRQHandler+0x1c8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d031      	beq.n	8002776 <HAL_DMA_IRQHandler+0xd2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a56      	ldr	r2, [pc, #344]	; (8002870 <HAL_DMA_IRQHandler+0x1cc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d02c      	beq.n	8002776 <HAL_DMA_IRQHandler+0xd2>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a54      	ldr	r2, [pc, #336]	; (8002874 <HAL_DMA_IRQHandler+0x1d0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d027      	beq.n	8002776 <HAL_DMA_IRQHandler+0xd2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a53      	ldr	r2, [pc, #332]	; (8002878 <HAL_DMA_IRQHandler+0x1d4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d022      	beq.n	8002776 <HAL_DMA_IRQHandler+0xd2>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a51      	ldr	r2, [pc, #324]	; (800287c <HAL_DMA_IRQHandler+0x1d8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01d      	beq.n	8002776 <HAL_DMA_IRQHandler+0xd2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a50      	ldr	r2, [pc, #320]	; (8002880 <HAL_DMA_IRQHandler+0x1dc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d018      	beq.n	8002776 <HAL_DMA_IRQHandler+0xd2>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a4e      	ldr	r2, [pc, #312]	; (8002884 <HAL_DMA_IRQHandler+0x1e0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <HAL_DMA_IRQHandler+0xd2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a4d      	ldr	r2, [pc, #308]	; (8002888 <HAL_DMA_IRQHandler+0x1e4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d00e      	beq.n	8002776 <HAL_DMA_IRQHandler+0xd2>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a4b      	ldr	r2, [pc, #300]	; (800288c <HAL_DMA_IRQHandler+0x1e8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d009      	beq.n	8002776 <HAL_DMA_IRQHandler+0xd2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a4a      	ldr	r2, [pc, #296]	; (8002890 <HAL_DMA_IRQHandler+0x1ec>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d004      	beq.n	8002776 <HAL_DMA_IRQHandler+0xd2>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a48      	ldr	r2, [pc, #288]	; (8002894 <HAL_DMA_IRQHandler+0x1f0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_DMA_IRQHandler+0xd6>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_DMA_IRQHandler+0xd8>
 800277a:	2300      	movs	r3, #0
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 842b 	beq.w	8002fd8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	2208      	movs	r2, #8
 800278c:	409a      	lsls	r2, r3
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 80a2 	beq.w	80028dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a2e      	ldr	r2, [pc, #184]	; (8002858 <HAL_DMA_IRQHandler+0x1b4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d04a      	beq.n	8002838 <HAL_DMA_IRQHandler+0x194>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a2d      	ldr	r2, [pc, #180]	; (800285c <HAL_DMA_IRQHandler+0x1b8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d045      	beq.n	8002838 <HAL_DMA_IRQHandler+0x194>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a2b      	ldr	r2, [pc, #172]	; (8002860 <HAL_DMA_IRQHandler+0x1bc>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d040      	beq.n	8002838 <HAL_DMA_IRQHandler+0x194>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a2a      	ldr	r2, [pc, #168]	; (8002864 <HAL_DMA_IRQHandler+0x1c0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d03b      	beq.n	8002838 <HAL_DMA_IRQHandler+0x194>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a28      	ldr	r2, [pc, #160]	; (8002868 <HAL_DMA_IRQHandler+0x1c4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d036      	beq.n	8002838 <HAL_DMA_IRQHandler+0x194>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a27      	ldr	r2, [pc, #156]	; (800286c <HAL_DMA_IRQHandler+0x1c8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d031      	beq.n	8002838 <HAL_DMA_IRQHandler+0x194>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a25      	ldr	r2, [pc, #148]	; (8002870 <HAL_DMA_IRQHandler+0x1cc>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d02c      	beq.n	8002838 <HAL_DMA_IRQHandler+0x194>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a24      	ldr	r2, [pc, #144]	; (8002874 <HAL_DMA_IRQHandler+0x1d0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d027      	beq.n	8002838 <HAL_DMA_IRQHandler+0x194>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a22      	ldr	r2, [pc, #136]	; (8002878 <HAL_DMA_IRQHandler+0x1d4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d022      	beq.n	8002838 <HAL_DMA_IRQHandler+0x194>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a21      	ldr	r2, [pc, #132]	; (800287c <HAL_DMA_IRQHandler+0x1d8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d01d      	beq.n	8002838 <HAL_DMA_IRQHandler+0x194>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1f      	ldr	r2, [pc, #124]	; (8002880 <HAL_DMA_IRQHandler+0x1dc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d018      	beq.n	8002838 <HAL_DMA_IRQHandler+0x194>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1e      	ldr	r2, [pc, #120]	; (8002884 <HAL_DMA_IRQHandler+0x1e0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d013      	beq.n	8002838 <HAL_DMA_IRQHandler+0x194>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <HAL_DMA_IRQHandler+0x1e4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00e      	beq.n	8002838 <HAL_DMA_IRQHandler+0x194>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1b      	ldr	r2, [pc, #108]	; (800288c <HAL_DMA_IRQHandler+0x1e8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d009      	beq.n	8002838 <HAL_DMA_IRQHandler+0x194>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a19      	ldr	r2, [pc, #100]	; (8002890 <HAL_DMA_IRQHandler+0x1ec>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d004      	beq.n	8002838 <HAL_DMA_IRQHandler+0x194>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a18      	ldr	r2, [pc, #96]	; (8002894 <HAL_DMA_IRQHandler+0x1f0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d12f      	bne.n	8002898 <HAL_DMA_IRQHandler+0x1f4>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf14      	ite	ne
 8002846:	2301      	movne	r3, #1
 8002848:	2300      	moveq	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	e02e      	b.n	80028ac <HAL_DMA_IRQHandler+0x208>
 800284e:	bf00      	nop
 8002850:	24000000 	.word	0x24000000
 8002854:	1b4e81b5 	.word	0x1b4e81b5
 8002858:	40020010 	.word	0x40020010
 800285c:	40020028 	.word	0x40020028
 8002860:	40020040 	.word	0x40020040
 8002864:	40020058 	.word	0x40020058
 8002868:	40020070 	.word	0x40020070
 800286c:	40020088 	.word	0x40020088
 8002870:	400200a0 	.word	0x400200a0
 8002874:	400200b8 	.word	0x400200b8
 8002878:	40020410 	.word	0x40020410
 800287c:	40020428 	.word	0x40020428
 8002880:	40020440 	.word	0x40020440
 8002884:	40020458 	.word	0x40020458
 8002888:	40020470 	.word	0x40020470
 800288c:	40020488 	.word	0x40020488
 8002890:	400204a0 	.word	0x400204a0
 8002894:	400204b8 	.word	0x400204b8
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bf14      	ite	ne
 80028a6:	2301      	movne	r3, #1
 80028a8:	2300      	moveq	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d015      	beq.n	80028dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0204 	bic.w	r2, r2, #4
 80028be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2208      	movs	r2, #8
 80028ca:	409a      	lsls	r2, r3
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0201 	orr.w	r2, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d06e      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a69      	ldr	r2, [pc, #420]	; (8002a9c <HAL_DMA_IRQHandler+0x3f8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d04a      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2ee>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a67      	ldr	r2, [pc, #412]	; (8002aa0 <HAL_DMA_IRQHandler+0x3fc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d045      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2ee>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a66      	ldr	r2, [pc, #408]	; (8002aa4 <HAL_DMA_IRQHandler+0x400>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d040      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2ee>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a64      	ldr	r2, [pc, #400]	; (8002aa8 <HAL_DMA_IRQHandler+0x404>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d03b      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2ee>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a63      	ldr	r2, [pc, #396]	; (8002aac <HAL_DMA_IRQHandler+0x408>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d036      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2ee>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a61      	ldr	r2, [pc, #388]	; (8002ab0 <HAL_DMA_IRQHandler+0x40c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d031      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2ee>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a60      	ldr	r2, [pc, #384]	; (8002ab4 <HAL_DMA_IRQHandler+0x410>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d02c      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2ee>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a5e      	ldr	r2, [pc, #376]	; (8002ab8 <HAL_DMA_IRQHandler+0x414>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d027      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2ee>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a5d      	ldr	r2, [pc, #372]	; (8002abc <HAL_DMA_IRQHandler+0x418>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d022      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2ee>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a5b      	ldr	r2, [pc, #364]	; (8002ac0 <HAL_DMA_IRQHandler+0x41c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d01d      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2ee>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a5a      	ldr	r2, [pc, #360]	; (8002ac4 <HAL_DMA_IRQHandler+0x420>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d018      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2ee>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a58      	ldr	r2, [pc, #352]	; (8002ac8 <HAL_DMA_IRQHandler+0x424>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2ee>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a57      	ldr	r2, [pc, #348]	; (8002acc <HAL_DMA_IRQHandler+0x428>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00e      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2ee>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a55      	ldr	r2, [pc, #340]	; (8002ad0 <HAL_DMA_IRQHandler+0x42c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d009      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2ee>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a54      	ldr	r2, [pc, #336]	; (8002ad4 <HAL_DMA_IRQHandler+0x430>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d004      	beq.n	8002992 <HAL_DMA_IRQHandler+0x2ee>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a52      	ldr	r2, [pc, #328]	; (8002ad8 <HAL_DMA_IRQHandler+0x434>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10a      	bne.n	80029a8 <HAL_DMA_IRQHandler+0x304>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e003      	b.n	80029b0 <HAL_DMA_IRQHandler+0x30c>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00d      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	2201      	movs	r2, #1
 80029be:	409a      	lsls	r2, r3
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c8:	f043 0202 	orr.w	r2, r3, #2
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	2204      	movs	r2, #4
 80029da:	409a      	lsls	r2, r3
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 808f 	beq.w	8002b04 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2c      	ldr	r2, [pc, #176]	; (8002a9c <HAL_DMA_IRQHandler+0x3f8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d04a      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x3e2>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a2a      	ldr	r2, [pc, #168]	; (8002aa0 <HAL_DMA_IRQHandler+0x3fc>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d045      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x3e2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a29      	ldr	r2, [pc, #164]	; (8002aa4 <HAL_DMA_IRQHandler+0x400>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d040      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x3e2>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a27      	ldr	r2, [pc, #156]	; (8002aa8 <HAL_DMA_IRQHandler+0x404>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d03b      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x3e2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a26      	ldr	r2, [pc, #152]	; (8002aac <HAL_DMA_IRQHandler+0x408>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d036      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x3e2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a24      	ldr	r2, [pc, #144]	; (8002ab0 <HAL_DMA_IRQHandler+0x40c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d031      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x3e2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <HAL_DMA_IRQHandler+0x410>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d02c      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x3e2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <HAL_DMA_IRQHandler+0x414>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d027      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x3e2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a20      	ldr	r2, [pc, #128]	; (8002abc <HAL_DMA_IRQHandler+0x418>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d022      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x3e2>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1e      	ldr	r2, [pc, #120]	; (8002ac0 <HAL_DMA_IRQHandler+0x41c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01d      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x3e2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <HAL_DMA_IRQHandler+0x420>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d018      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x3e2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <HAL_DMA_IRQHandler+0x424>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x3e2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <HAL_DMA_IRQHandler+0x428>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00e      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x3e2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <HAL_DMA_IRQHandler+0x42c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d009      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x3e2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a17      	ldr	r2, [pc, #92]	; (8002ad4 <HAL_DMA_IRQHandler+0x430>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d004      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x3e2>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a15      	ldr	r2, [pc, #84]	; (8002ad8 <HAL_DMA_IRQHandler+0x434>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d12a      	bne.n	8002adc <HAL_DMA_IRQHandler+0x438>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e023      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x440>
 8002a9c:	40020010 	.word	0x40020010
 8002aa0:	40020028 	.word	0x40020028
 8002aa4:	40020040 	.word	0x40020040
 8002aa8:	40020058 	.word	0x40020058
 8002aac:	40020070 	.word	0x40020070
 8002ab0:	40020088 	.word	0x40020088
 8002ab4:	400200a0 	.word	0x400200a0
 8002ab8:	400200b8 	.word	0x400200b8
 8002abc:	40020410 	.word	0x40020410
 8002ac0:	40020428 	.word	0x40020428
 8002ac4:	40020440 	.word	0x40020440
 8002ac8:	40020458 	.word	0x40020458
 8002acc:	40020470 	.word	0x40020470
 8002ad0:	40020488 	.word	0x40020488
 8002ad4:	400204a0 	.word	0x400204a0
 8002ad8:	400204b8 	.word	0x400204b8
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00d      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	2204      	movs	r2, #4
 8002af2:	409a      	lsls	r2, r3
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80a6 	beq.w	8002c66 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a85      	ldr	r2, [pc, #532]	; (8002d34 <HAL_DMA_IRQHandler+0x690>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d04a      	beq.n	8002bba <HAL_DMA_IRQHandler+0x516>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a83      	ldr	r2, [pc, #524]	; (8002d38 <HAL_DMA_IRQHandler+0x694>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d045      	beq.n	8002bba <HAL_DMA_IRQHandler+0x516>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a82      	ldr	r2, [pc, #520]	; (8002d3c <HAL_DMA_IRQHandler+0x698>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d040      	beq.n	8002bba <HAL_DMA_IRQHandler+0x516>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a80      	ldr	r2, [pc, #512]	; (8002d40 <HAL_DMA_IRQHandler+0x69c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d03b      	beq.n	8002bba <HAL_DMA_IRQHandler+0x516>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a7f      	ldr	r2, [pc, #508]	; (8002d44 <HAL_DMA_IRQHandler+0x6a0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d036      	beq.n	8002bba <HAL_DMA_IRQHandler+0x516>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a7d      	ldr	r2, [pc, #500]	; (8002d48 <HAL_DMA_IRQHandler+0x6a4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d031      	beq.n	8002bba <HAL_DMA_IRQHandler+0x516>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a7c      	ldr	r2, [pc, #496]	; (8002d4c <HAL_DMA_IRQHandler+0x6a8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d02c      	beq.n	8002bba <HAL_DMA_IRQHandler+0x516>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a7a      	ldr	r2, [pc, #488]	; (8002d50 <HAL_DMA_IRQHandler+0x6ac>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d027      	beq.n	8002bba <HAL_DMA_IRQHandler+0x516>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a79      	ldr	r2, [pc, #484]	; (8002d54 <HAL_DMA_IRQHandler+0x6b0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d022      	beq.n	8002bba <HAL_DMA_IRQHandler+0x516>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a77      	ldr	r2, [pc, #476]	; (8002d58 <HAL_DMA_IRQHandler+0x6b4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d01d      	beq.n	8002bba <HAL_DMA_IRQHandler+0x516>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a76      	ldr	r2, [pc, #472]	; (8002d5c <HAL_DMA_IRQHandler+0x6b8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d018      	beq.n	8002bba <HAL_DMA_IRQHandler+0x516>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a74      	ldr	r2, [pc, #464]	; (8002d60 <HAL_DMA_IRQHandler+0x6bc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d013      	beq.n	8002bba <HAL_DMA_IRQHandler+0x516>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a73      	ldr	r2, [pc, #460]	; (8002d64 <HAL_DMA_IRQHandler+0x6c0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d00e      	beq.n	8002bba <HAL_DMA_IRQHandler+0x516>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a71      	ldr	r2, [pc, #452]	; (8002d68 <HAL_DMA_IRQHandler+0x6c4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d009      	beq.n	8002bba <HAL_DMA_IRQHandler+0x516>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a70      	ldr	r2, [pc, #448]	; (8002d6c <HAL_DMA_IRQHandler+0x6c8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d004      	beq.n	8002bba <HAL_DMA_IRQHandler+0x516>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a6e      	ldr	r2, [pc, #440]	; (8002d70 <HAL_DMA_IRQHandler+0x6cc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d10a      	bne.n	8002bd0 <HAL_DMA_IRQHandler+0x52c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf14      	ite	ne
 8002bc8:	2301      	movne	r3, #1
 8002bca:	2300      	moveq	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e009      	b.n	8002be4 <HAL_DMA_IRQHandler+0x540>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d03e      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d018      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d108      	bne.n	8002c26 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d024      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	4798      	blx	r3
 8002c24:	e01f      	b.n	8002c66 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d01b      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
 8002c36:	e016      	b.n	8002c66 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d107      	bne.n	8002c56 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0208 	bic.w	r2, r2, #8
 8002c54:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	2220      	movs	r2, #32
 8002c70:	409a      	lsls	r2, r3
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8110 	beq.w	8002e9c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2c      	ldr	r2, [pc, #176]	; (8002d34 <HAL_DMA_IRQHandler+0x690>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d04a      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x678>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a2b      	ldr	r2, [pc, #172]	; (8002d38 <HAL_DMA_IRQHandler+0x694>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d045      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x678>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a29      	ldr	r2, [pc, #164]	; (8002d3c <HAL_DMA_IRQHandler+0x698>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d040      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x678>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <HAL_DMA_IRQHandler+0x69c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d03b      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x678>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a26      	ldr	r2, [pc, #152]	; (8002d44 <HAL_DMA_IRQHandler+0x6a0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d036      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x678>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <HAL_DMA_IRQHandler+0x6a4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d031      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x678>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a23      	ldr	r2, [pc, #140]	; (8002d4c <HAL_DMA_IRQHandler+0x6a8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d02c      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x678>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a22      	ldr	r2, [pc, #136]	; (8002d50 <HAL_DMA_IRQHandler+0x6ac>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d027      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x678>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a20      	ldr	r2, [pc, #128]	; (8002d54 <HAL_DMA_IRQHandler+0x6b0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d022      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x678>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1f      	ldr	r2, [pc, #124]	; (8002d58 <HAL_DMA_IRQHandler+0x6b4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d01d      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x678>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <HAL_DMA_IRQHandler+0x6b8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d018      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x678>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1c      	ldr	r2, [pc, #112]	; (8002d60 <HAL_DMA_IRQHandler+0x6bc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d013      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x678>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1a      	ldr	r2, [pc, #104]	; (8002d64 <HAL_DMA_IRQHandler+0x6c0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00e      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x678>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_DMA_IRQHandler+0x6c4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x678>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a17      	ldr	r2, [pc, #92]	; (8002d6c <HAL_DMA_IRQHandler+0x6c8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x678>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <HAL_DMA_IRQHandler+0x6cc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d12b      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x6d0>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	e02a      	b.n	8002d88 <HAL_DMA_IRQHandler+0x6e4>
 8002d32:	bf00      	nop
 8002d34:	40020010 	.word	0x40020010
 8002d38:	40020028 	.word	0x40020028
 8002d3c:	40020040 	.word	0x40020040
 8002d40:	40020058 	.word	0x40020058
 8002d44:	40020070 	.word	0x40020070
 8002d48:	40020088 	.word	0x40020088
 8002d4c:	400200a0 	.word	0x400200a0
 8002d50:	400200b8 	.word	0x400200b8
 8002d54:	40020410 	.word	0x40020410
 8002d58:	40020428 	.word	0x40020428
 8002d5c:	40020440 	.word	0x40020440
 8002d60:	40020458 	.word	0x40020458
 8002d64:	40020470 	.word	0x40020470
 8002d68:	40020488 	.word	0x40020488
 8002d6c:	400204a0 	.word	0x400204a0
 8002d70:	400204b8 	.word	0x400204b8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bf14      	ite	ne
 8002d82:	2301      	movne	r3, #1
 8002d84:	2300      	moveq	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8087 	beq.w	8002e9c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	2220      	movs	r2, #32
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d139      	bne.n	8002e1e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0216 	bic.w	r2, r2, #22
 8002db8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dc8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <HAL_DMA_IRQHandler+0x736>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0208 	bic.w	r2, r2, #8
 8002de8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	223f      	movs	r2, #63	; 0x3f
 8002df4:	409a      	lsls	r2, r3
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 834a 	beq.w	80034a8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4798      	blx	r3
          }
          return;
 8002e1c:	e344      	b.n	80034a8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d018      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d108      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d02c      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	4798      	blx	r3
 8002e4a:	e027      	b.n	8002e9c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d023      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	4798      	blx	r3
 8002e5c:	e01e      	b.n	8002e9c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10f      	bne.n	8002e8c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0210 	bic.w	r2, r2, #16
 8002e7a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 8306 	beq.w	80034b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8088 	beq.w	8002fc4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a7a      	ldr	r2, [pc, #488]	; (80030ac <HAL_DMA_IRQHandler+0xa08>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d04a      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x8b8>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a79      	ldr	r2, [pc, #484]	; (80030b0 <HAL_DMA_IRQHandler+0xa0c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d045      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x8b8>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a77      	ldr	r2, [pc, #476]	; (80030b4 <HAL_DMA_IRQHandler+0xa10>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d040      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x8b8>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a76      	ldr	r2, [pc, #472]	; (80030b8 <HAL_DMA_IRQHandler+0xa14>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d03b      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x8b8>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a74      	ldr	r2, [pc, #464]	; (80030bc <HAL_DMA_IRQHandler+0xa18>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d036      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x8b8>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a73      	ldr	r2, [pc, #460]	; (80030c0 <HAL_DMA_IRQHandler+0xa1c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d031      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x8b8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a71      	ldr	r2, [pc, #452]	; (80030c4 <HAL_DMA_IRQHandler+0xa20>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d02c      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x8b8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a70      	ldr	r2, [pc, #448]	; (80030c8 <HAL_DMA_IRQHandler+0xa24>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d027      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x8b8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a6e      	ldr	r2, [pc, #440]	; (80030cc <HAL_DMA_IRQHandler+0xa28>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d022      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x8b8>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a6d      	ldr	r2, [pc, #436]	; (80030d0 <HAL_DMA_IRQHandler+0xa2c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d01d      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x8b8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a6b      	ldr	r2, [pc, #428]	; (80030d4 <HAL_DMA_IRQHandler+0xa30>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d018      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x8b8>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a6a      	ldr	r2, [pc, #424]	; (80030d8 <HAL_DMA_IRQHandler+0xa34>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d013      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x8b8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a68      	ldr	r2, [pc, #416]	; (80030dc <HAL_DMA_IRQHandler+0xa38>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00e      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x8b8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a67      	ldr	r2, [pc, #412]	; (80030e0 <HAL_DMA_IRQHandler+0xa3c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d009      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x8b8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a65      	ldr	r2, [pc, #404]	; (80030e4 <HAL_DMA_IRQHandler+0xa40>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d004      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x8b8>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a64      	ldr	r2, [pc, #400]	; (80030e8 <HAL_DMA_IRQHandler+0xa44>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d108      	bne.n	8002f6e <HAL_DMA_IRQHandler+0x8ca>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e007      	b.n	8002f7e <HAL_DMA_IRQHandler+0x8da>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0201 	bic.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3301      	adds	r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d307      	bcc.n	8002f9a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f2      	bne.n	8002f7e <HAL_DMA_IRQHandler+0x8da>
 8002f98:	e000      	b.n	8002f9c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002f9a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d004      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2203      	movs	r2, #3
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002fb2:	e003      	b.n	8002fbc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8272 	beq.w	80034b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	4798      	blx	r3
 8002fd6:	e26c      	b.n	80034b2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a43      	ldr	r2, [pc, #268]	; (80030ec <HAL_DMA_IRQHandler+0xa48>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d022      	beq.n	8003028 <HAL_DMA_IRQHandler+0x984>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a42      	ldr	r2, [pc, #264]	; (80030f0 <HAL_DMA_IRQHandler+0xa4c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d01d      	beq.n	8003028 <HAL_DMA_IRQHandler+0x984>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a40      	ldr	r2, [pc, #256]	; (80030f4 <HAL_DMA_IRQHandler+0xa50>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d018      	beq.n	8003028 <HAL_DMA_IRQHandler+0x984>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a3f      	ldr	r2, [pc, #252]	; (80030f8 <HAL_DMA_IRQHandler+0xa54>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d013      	beq.n	8003028 <HAL_DMA_IRQHandler+0x984>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a3d      	ldr	r2, [pc, #244]	; (80030fc <HAL_DMA_IRQHandler+0xa58>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00e      	beq.n	8003028 <HAL_DMA_IRQHandler+0x984>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a3c      	ldr	r2, [pc, #240]	; (8003100 <HAL_DMA_IRQHandler+0xa5c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d009      	beq.n	8003028 <HAL_DMA_IRQHandler+0x984>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a3a      	ldr	r2, [pc, #232]	; (8003104 <HAL_DMA_IRQHandler+0xa60>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d004      	beq.n	8003028 <HAL_DMA_IRQHandler+0x984>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a39      	ldr	r2, [pc, #228]	; (8003108 <HAL_DMA_IRQHandler+0xa64>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d101      	bne.n	800302c <HAL_DMA_IRQHandler+0x988>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <HAL_DMA_IRQHandler+0x98a>
 800302c:	2300      	movs	r3, #0
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 823f 	beq.w	80034b2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2204      	movs	r2, #4
 8003046:	409a      	lsls	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80cd 	beq.w	80031ec <HAL_DMA_IRQHandler+0xb48>
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80c7 	beq.w	80031ec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	2204      	movs	r2, #4
 8003068:	409a      	lsls	r2, r3
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d049      	beq.n	800310c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 8210 	beq.w	80034ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003094:	e20a      	b.n	80034ac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 8206 	beq.w	80034ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030a8:	e200      	b.n	80034ac <HAL_DMA_IRQHandler+0xe08>
 80030aa:	bf00      	nop
 80030ac:	40020010 	.word	0x40020010
 80030b0:	40020028 	.word	0x40020028
 80030b4:	40020040 	.word	0x40020040
 80030b8:	40020058 	.word	0x40020058
 80030bc:	40020070 	.word	0x40020070
 80030c0:	40020088 	.word	0x40020088
 80030c4:	400200a0 	.word	0x400200a0
 80030c8:	400200b8 	.word	0x400200b8
 80030cc:	40020410 	.word	0x40020410
 80030d0:	40020428 	.word	0x40020428
 80030d4:	40020440 	.word	0x40020440
 80030d8:	40020458 	.word	0x40020458
 80030dc:	40020470 	.word	0x40020470
 80030e0:	40020488 	.word	0x40020488
 80030e4:	400204a0 	.word	0x400204a0
 80030e8:	400204b8 	.word	0x400204b8
 80030ec:	58025408 	.word	0x58025408
 80030f0:	5802541c 	.word	0x5802541c
 80030f4:	58025430 	.word	0x58025430
 80030f8:	58025444 	.word	0x58025444
 80030fc:	58025458 	.word	0x58025458
 8003100:	5802546c 	.word	0x5802546c
 8003104:	58025480 	.word	0x58025480
 8003108:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d160      	bne.n	80031d8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a7f      	ldr	r2, [pc, #508]	; (8003318 <HAL_DMA_IRQHandler+0xc74>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d04a      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xb12>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a7d      	ldr	r2, [pc, #500]	; (800331c <HAL_DMA_IRQHandler+0xc78>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d045      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xb12>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a7c      	ldr	r2, [pc, #496]	; (8003320 <HAL_DMA_IRQHandler+0xc7c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d040      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xb12>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a7a      	ldr	r2, [pc, #488]	; (8003324 <HAL_DMA_IRQHandler+0xc80>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d03b      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xb12>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a79      	ldr	r2, [pc, #484]	; (8003328 <HAL_DMA_IRQHandler+0xc84>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d036      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xb12>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a77      	ldr	r2, [pc, #476]	; (800332c <HAL_DMA_IRQHandler+0xc88>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d031      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xb12>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a76      	ldr	r2, [pc, #472]	; (8003330 <HAL_DMA_IRQHandler+0xc8c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d02c      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xb12>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a74      	ldr	r2, [pc, #464]	; (8003334 <HAL_DMA_IRQHandler+0xc90>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d027      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xb12>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a73      	ldr	r2, [pc, #460]	; (8003338 <HAL_DMA_IRQHandler+0xc94>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d022      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xb12>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a71      	ldr	r2, [pc, #452]	; (800333c <HAL_DMA_IRQHandler+0xc98>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d01d      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xb12>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a70      	ldr	r2, [pc, #448]	; (8003340 <HAL_DMA_IRQHandler+0xc9c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d018      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xb12>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a6e      	ldr	r2, [pc, #440]	; (8003344 <HAL_DMA_IRQHandler+0xca0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d013      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xb12>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a6d      	ldr	r2, [pc, #436]	; (8003348 <HAL_DMA_IRQHandler+0xca4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00e      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xb12>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a6b      	ldr	r2, [pc, #428]	; (800334c <HAL_DMA_IRQHandler+0xca8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d009      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xb12>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a6a      	ldr	r2, [pc, #424]	; (8003350 <HAL_DMA_IRQHandler+0xcac>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d004      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xb12>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a68      	ldr	r2, [pc, #416]	; (8003354 <HAL_DMA_IRQHandler+0xcb0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d108      	bne.n	80031c8 <HAL_DMA_IRQHandler+0xb24>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0208 	bic.w	r2, r2, #8
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	e007      	b.n	80031d8 <HAL_DMA_IRQHandler+0xb34>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0204 	bic.w	r2, r2, #4
 80031d6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8165 	beq.w	80034ac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031ea:	e15f      	b.n	80034ac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	2202      	movs	r2, #2
 80031f6:	409a      	lsls	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80c5 	beq.w	800338c <HAL_DMA_IRQHandler+0xce8>
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80bf 	beq.w	800338c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	2202      	movs	r2, #2
 8003218:	409a      	lsls	r2, r3
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d018      	beq.n	800325a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 813a 	beq.w	80034b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003244:	e134      	b.n	80034b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 8130 	beq.w	80034b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003258:	e12a      	b.n	80034b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 8089 	bne.w	8003378 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a2b      	ldr	r2, [pc, #172]	; (8003318 <HAL_DMA_IRQHandler+0xc74>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d04a      	beq.n	8003306 <HAL_DMA_IRQHandler+0xc62>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a29      	ldr	r2, [pc, #164]	; (800331c <HAL_DMA_IRQHandler+0xc78>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d045      	beq.n	8003306 <HAL_DMA_IRQHandler+0xc62>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a28      	ldr	r2, [pc, #160]	; (8003320 <HAL_DMA_IRQHandler+0xc7c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d040      	beq.n	8003306 <HAL_DMA_IRQHandler+0xc62>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a26      	ldr	r2, [pc, #152]	; (8003324 <HAL_DMA_IRQHandler+0xc80>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d03b      	beq.n	8003306 <HAL_DMA_IRQHandler+0xc62>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a25      	ldr	r2, [pc, #148]	; (8003328 <HAL_DMA_IRQHandler+0xc84>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d036      	beq.n	8003306 <HAL_DMA_IRQHandler+0xc62>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a23      	ldr	r2, [pc, #140]	; (800332c <HAL_DMA_IRQHandler+0xc88>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d031      	beq.n	8003306 <HAL_DMA_IRQHandler+0xc62>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a22      	ldr	r2, [pc, #136]	; (8003330 <HAL_DMA_IRQHandler+0xc8c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d02c      	beq.n	8003306 <HAL_DMA_IRQHandler+0xc62>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a20      	ldr	r2, [pc, #128]	; (8003334 <HAL_DMA_IRQHandler+0xc90>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d027      	beq.n	8003306 <HAL_DMA_IRQHandler+0xc62>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1f      	ldr	r2, [pc, #124]	; (8003338 <HAL_DMA_IRQHandler+0xc94>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d022      	beq.n	8003306 <HAL_DMA_IRQHandler+0xc62>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1d      	ldr	r2, [pc, #116]	; (800333c <HAL_DMA_IRQHandler+0xc98>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d01d      	beq.n	8003306 <HAL_DMA_IRQHandler+0xc62>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1c      	ldr	r2, [pc, #112]	; (8003340 <HAL_DMA_IRQHandler+0xc9c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d018      	beq.n	8003306 <HAL_DMA_IRQHandler+0xc62>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1a      	ldr	r2, [pc, #104]	; (8003344 <HAL_DMA_IRQHandler+0xca0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <HAL_DMA_IRQHandler+0xc62>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a19      	ldr	r2, [pc, #100]	; (8003348 <HAL_DMA_IRQHandler+0xca4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00e      	beq.n	8003306 <HAL_DMA_IRQHandler+0xc62>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a17      	ldr	r2, [pc, #92]	; (800334c <HAL_DMA_IRQHandler+0xca8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d009      	beq.n	8003306 <HAL_DMA_IRQHandler+0xc62>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a16      	ldr	r2, [pc, #88]	; (8003350 <HAL_DMA_IRQHandler+0xcac>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d004      	beq.n	8003306 <HAL_DMA_IRQHandler+0xc62>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a14      	ldr	r2, [pc, #80]	; (8003354 <HAL_DMA_IRQHandler+0xcb0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d128      	bne.n	8003358 <HAL_DMA_IRQHandler+0xcb4>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0214 	bic.w	r2, r2, #20
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	e027      	b.n	8003368 <HAL_DMA_IRQHandler+0xcc4>
 8003318:	40020010 	.word	0x40020010
 800331c:	40020028 	.word	0x40020028
 8003320:	40020040 	.word	0x40020040
 8003324:	40020058 	.word	0x40020058
 8003328:	40020070 	.word	0x40020070
 800332c:	40020088 	.word	0x40020088
 8003330:	400200a0 	.word	0x400200a0
 8003334:	400200b8 	.word	0x400200b8
 8003338:	40020410 	.word	0x40020410
 800333c:	40020428 	.word	0x40020428
 8003340:	40020440 	.word	0x40020440
 8003344:	40020458 	.word	0x40020458
 8003348:	40020470 	.word	0x40020470
 800334c:	40020488 	.word	0x40020488
 8003350:	400204a0 	.word	0x400204a0
 8003354:	400204b8 	.word	0x400204b8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 020a 	bic.w	r2, r2, #10
 8003366:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8097 	beq.w	80034b0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800338a:	e091      	b.n	80034b0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	2208      	movs	r2, #8
 8003396:	409a      	lsls	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8088 	beq.w	80034b2 <HAL_DMA_IRQHandler+0xe0e>
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8082 	beq.w	80034b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a41      	ldr	r2, [pc, #260]	; (80034b8 <HAL_DMA_IRQHandler+0xe14>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d04a      	beq.n	800344e <HAL_DMA_IRQHandler+0xdaa>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a3f      	ldr	r2, [pc, #252]	; (80034bc <HAL_DMA_IRQHandler+0xe18>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d045      	beq.n	800344e <HAL_DMA_IRQHandler+0xdaa>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a3e      	ldr	r2, [pc, #248]	; (80034c0 <HAL_DMA_IRQHandler+0xe1c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d040      	beq.n	800344e <HAL_DMA_IRQHandler+0xdaa>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a3c      	ldr	r2, [pc, #240]	; (80034c4 <HAL_DMA_IRQHandler+0xe20>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d03b      	beq.n	800344e <HAL_DMA_IRQHandler+0xdaa>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a3b      	ldr	r2, [pc, #236]	; (80034c8 <HAL_DMA_IRQHandler+0xe24>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d036      	beq.n	800344e <HAL_DMA_IRQHandler+0xdaa>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a39      	ldr	r2, [pc, #228]	; (80034cc <HAL_DMA_IRQHandler+0xe28>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d031      	beq.n	800344e <HAL_DMA_IRQHandler+0xdaa>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a38      	ldr	r2, [pc, #224]	; (80034d0 <HAL_DMA_IRQHandler+0xe2c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d02c      	beq.n	800344e <HAL_DMA_IRQHandler+0xdaa>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a36      	ldr	r2, [pc, #216]	; (80034d4 <HAL_DMA_IRQHandler+0xe30>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d027      	beq.n	800344e <HAL_DMA_IRQHandler+0xdaa>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a35      	ldr	r2, [pc, #212]	; (80034d8 <HAL_DMA_IRQHandler+0xe34>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d022      	beq.n	800344e <HAL_DMA_IRQHandler+0xdaa>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a33      	ldr	r2, [pc, #204]	; (80034dc <HAL_DMA_IRQHandler+0xe38>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d01d      	beq.n	800344e <HAL_DMA_IRQHandler+0xdaa>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a32      	ldr	r2, [pc, #200]	; (80034e0 <HAL_DMA_IRQHandler+0xe3c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d018      	beq.n	800344e <HAL_DMA_IRQHandler+0xdaa>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a30      	ldr	r2, [pc, #192]	; (80034e4 <HAL_DMA_IRQHandler+0xe40>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_DMA_IRQHandler+0xdaa>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a2f      	ldr	r2, [pc, #188]	; (80034e8 <HAL_DMA_IRQHandler+0xe44>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00e      	beq.n	800344e <HAL_DMA_IRQHandler+0xdaa>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a2d      	ldr	r2, [pc, #180]	; (80034ec <HAL_DMA_IRQHandler+0xe48>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d009      	beq.n	800344e <HAL_DMA_IRQHandler+0xdaa>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a2c      	ldr	r2, [pc, #176]	; (80034f0 <HAL_DMA_IRQHandler+0xe4c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d004      	beq.n	800344e <HAL_DMA_IRQHandler+0xdaa>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a2a      	ldr	r2, [pc, #168]	; (80034f4 <HAL_DMA_IRQHandler+0xe50>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d108      	bne.n	8003460 <HAL_DMA_IRQHandler+0xdbc>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 021c 	bic.w	r2, r2, #28
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	e007      	b.n	8003470 <HAL_DMA_IRQHandler+0xdcc>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 020e 	bic.w	r2, r2, #14
 800346e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	2201      	movs	r2, #1
 800347a:	409a      	lsls	r2, r3
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
 80034a6:	e004      	b.n	80034b2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80034a8:	bf00      	nop
 80034aa:	e002      	b.n	80034b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ac:	bf00      	nop
 80034ae:	e000      	b.n	80034b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034b0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80034b2:	3728      	adds	r7, #40	; 0x28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40020010 	.word	0x40020010
 80034bc:	40020028 	.word	0x40020028
 80034c0:	40020040 	.word	0x40020040
 80034c4:	40020058 	.word	0x40020058
 80034c8:	40020070 	.word	0x40020070
 80034cc:	40020088 	.word	0x40020088
 80034d0:	400200a0 	.word	0x400200a0
 80034d4:	400200b8 	.word	0x400200b8
 80034d8:	40020410 	.word	0x40020410
 80034dc:	40020428 	.word	0x40020428
 80034e0:	40020440 	.word	0x40020440
 80034e4:	40020458 	.word	0x40020458
 80034e8:	40020470 	.word	0x40020470
 80034ec:	40020488 	.word	0x40020488
 80034f0:	400204a0 	.word	0x400204a0
 80034f4:	400204b8 	.word	0x400204b8

080034f8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003528:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a7f      	ldr	r2, [pc, #508]	; (800372c <DMA_SetConfig+0x21c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d072      	beq.n	800361a <DMA_SetConfig+0x10a>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a7d      	ldr	r2, [pc, #500]	; (8003730 <DMA_SetConfig+0x220>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d06d      	beq.n	800361a <DMA_SetConfig+0x10a>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a7c      	ldr	r2, [pc, #496]	; (8003734 <DMA_SetConfig+0x224>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d068      	beq.n	800361a <DMA_SetConfig+0x10a>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a7a      	ldr	r2, [pc, #488]	; (8003738 <DMA_SetConfig+0x228>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d063      	beq.n	800361a <DMA_SetConfig+0x10a>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a79      	ldr	r2, [pc, #484]	; (800373c <DMA_SetConfig+0x22c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d05e      	beq.n	800361a <DMA_SetConfig+0x10a>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a77      	ldr	r2, [pc, #476]	; (8003740 <DMA_SetConfig+0x230>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d059      	beq.n	800361a <DMA_SetConfig+0x10a>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a76      	ldr	r2, [pc, #472]	; (8003744 <DMA_SetConfig+0x234>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d054      	beq.n	800361a <DMA_SetConfig+0x10a>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a74      	ldr	r2, [pc, #464]	; (8003748 <DMA_SetConfig+0x238>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d04f      	beq.n	800361a <DMA_SetConfig+0x10a>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a73      	ldr	r2, [pc, #460]	; (800374c <DMA_SetConfig+0x23c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d04a      	beq.n	800361a <DMA_SetConfig+0x10a>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a71      	ldr	r2, [pc, #452]	; (8003750 <DMA_SetConfig+0x240>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d045      	beq.n	800361a <DMA_SetConfig+0x10a>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a70      	ldr	r2, [pc, #448]	; (8003754 <DMA_SetConfig+0x244>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d040      	beq.n	800361a <DMA_SetConfig+0x10a>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a6e      	ldr	r2, [pc, #440]	; (8003758 <DMA_SetConfig+0x248>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d03b      	beq.n	800361a <DMA_SetConfig+0x10a>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a6d      	ldr	r2, [pc, #436]	; (800375c <DMA_SetConfig+0x24c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d036      	beq.n	800361a <DMA_SetConfig+0x10a>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a6b      	ldr	r2, [pc, #428]	; (8003760 <DMA_SetConfig+0x250>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d031      	beq.n	800361a <DMA_SetConfig+0x10a>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a6a      	ldr	r2, [pc, #424]	; (8003764 <DMA_SetConfig+0x254>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d02c      	beq.n	800361a <DMA_SetConfig+0x10a>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a68      	ldr	r2, [pc, #416]	; (8003768 <DMA_SetConfig+0x258>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d027      	beq.n	800361a <DMA_SetConfig+0x10a>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a67      	ldr	r2, [pc, #412]	; (800376c <DMA_SetConfig+0x25c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d022      	beq.n	800361a <DMA_SetConfig+0x10a>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a65      	ldr	r2, [pc, #404]	; (8003770 <DMA_SetConfig+0x260>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01d      	beq.n	800361a <DMA_SetConfig+0x10a>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a64      	ldr	r2, [pc, #400]	; (8003774 <DMA_SetConfig+0x264>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d018      	beq.n	800361a <DMA_SetConfig+0x10a>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a62      	ldr	r2, [pc, #392]	; (8003778 <DMA_SetConfig+0x268>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <DMA_SetConfig+0x10a>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a61      	ldr	r2, [pc, #388]	; (800377c <DMA_SetConfig+0x26c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00e      	beq.n	800361a <DMA_SetConfig+0x10a>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a5f      	ldr	r2, [pc, #380]	; (8003780 <DMA_SetConfig+0x270>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d009      	beq.n	800361a <DMA_SetConfig+0x10a>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a5e      	ldr	r2, [pc, #376]	; (8003784 <DMA_SetConfig+0x274>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <DMA_SetConfig+0x10a>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a5c      	ldr	r2, [pc, #368]	; (8003788 <DMA_SetConfig+0x278>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <DMA_SetConfig+0x10e>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <DMA_SetConfig+0x110>
 800361e:	2300      	movs	r3, #0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800362c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d004      	beq.n	8003640 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800363e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a39      	ldr	r2, [pc, #228]	; (800372c <DMA_SetConfig+0x21c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d04a      	beq.n	80036e0 <DMA_SetConfig+0x1d0>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a38      	ldr	r2, [pc, #224]	; (8003730 <DMA_SetConfig+0x220>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d045      	beq.n	80036e0 <DMA_SetConfig+0x1d0>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a36      	ldr	r2, [pc, #216]	; (8003734 <DMA_SetConfig+0x224>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d040      	beq.n	80036e0 <DMA_SetConfig+0x1d0>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a35      	ldr	r2, [pc, #212]	; (8003738 <DMA_SetConfig+0x228>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d03b      	beq.n	80036e0 <DMA_SetConfig+0x1d0>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a33      	ldr	r2, [pc, #204]	; (800373c <DMA_SetConfig+0x22c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d036      	beq.n	80036e0 <DMA_SetConfig+0x1d0>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a32      	ldr	r2, [pc, #200]	; (8003740 <DMA_SetConfig+0x230>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d031      	beq.n	80036e0 <DMA_SetConfig+0x1d0>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a30      	ldr	r2, [pc, #192]	; (8003744 <DMA_SetConfig+0x234>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d02c      	beq.n	80036e0 <DMA_SetConfig+0x1d0>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a2f      	ldr	r2, [pc, #188]	; (8003748 <DMA_SetConfig+0x238>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d027      	beq.n	80036e0 <DMA_SetConfig+0x1d0>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2d      	ldr	r2, [pc, #180]	; (800374c <DMA_SetConfig+0x23c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d022      	beq.n	80036e0 <DMA_SetConfig+0x1d0>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a2c      	ldr	r2, [pc, #176]	; (8003750 <DMA_SetConfig+0x240>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d01d      	beq.n	80036e0 <DMA_SetConfig+0x1d0>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a2a      	ldr	r2, [pc, #168]	; (8003754 <DMA_SetConfig+0x244>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d018      	beq.n	80036e0 <DMA_SetConfig+0x1d0>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a29      	ldr	r2, [pc, #164]	; (8003758 <DMA_SetConfig+0x248>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d013      	beq.n	80036e0 <DMA_SetConfig+0x1d0>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a27      	ldr	r2, [pc, #156]	; (800375c <DMA_SetConfig+0x24c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00e      	beq.n	80036e0 <DMA_SetConfig+0x1d0>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a26      	ldr	r2, [pc, #152]	; (8003760 <DMA_SetConfig+0x250>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d009      	beq.n	80036e0 <DMA_SetConfig+0x1d0>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a24      	ldr	r2, [pc, #144]	; (8003764 <DMA_SetConfig+0x254>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d004      	beq.n	80036e0 <DMA_SetConfig+0x1d0>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a23      	ldr	r2, [pc, #140]	; (8003768 <DMA_SetConfig+0x258>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d101      	bne.n	80036e4 <DMA_SetConfig+0x1d4>
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <DMA_SetConfig+0x1d6>
 80036e4:	2300      	movs	r3, #0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d059      	beq.n	800379e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	223f      	movs	r2, #63	; 0x3f
 80036f4:	409a      	lsls	r2, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003708:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	d138      	bne.n	800378c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800372a:	e086      	b.n	800383a <DMA_SetConfig+0x32a>
 800372c:	40020010 	.word	0x40020010
 8003730:	40020028 	.word	0x40020028
 8003734:	40020040 	.word	0x40020040
 8003738:	40020058 	.word	0x40020058
 800373c:	40020070 	.word	0x40020070
 8003740:	40020088 	.word	0x40020088
 8003744:	400200a0 	.word	0x400200a0
 8003748:	400200b8 	.word	0x400200b8
 800374c:	40020410 	.word	0x40020410
 8003750:	40020428 	.word	0x40020428
 8003754:	40020440 	.word	0x40020440
 8003758:	40020458 	.word	0x40020458
 800375c:	40020470 	.word	0x40020470
 8003760:	40020488 	.word	0x40020488
 8003764:	400204a0 	.word	0x400204a0
 8003768:	400204b8 	.word	0x400204b8
 800376c:	58025408 	.word	0x58025408
 8003770:	5802541c 	.word	0x5802541c
 8003774:	58025430 	.word	0x58025430
 8003778:	58025444 	.word	0x58025444
 800377c:	58025458 	.word	0x58025458
 8003780:	5802546c 	.word	0x5802546c
 8003784:	58025480 	.word	0x58025480
 8003788:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	60da      	str	r2, [r3, #12]
}
 800379c:	e04d      	b.n	800383a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a29      	ldr	r2, [pc, #164]	; (8003848 <DMA_SetConfig+0x338>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d022      	beq.n	80037ee <DMA_SetConfig+0x2de>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a27      	ldr	r2, [pc, #156]	; (800384c <DMA_SetConfig+0x33c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d01d      	beq.n	80037ee <DMA_SetConfig+0x2de>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a26      	ldr	r2, [pc, #152]	; (8003850 <DMA_SetConfig+0x340>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d018      	beq.n	80037ee <DMA_SetConfig+0x2de>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a24      	ldr	r2, [pc, #144]	; (8003854 <DMA_SetConfig+0x344>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <DMA_SetConfig+0x2de>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a23      	ldr	r2, [pc, #140]	; (8003858 <DMA_SetConfig+0x348>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00e      	beq.n	80037ee <DMA_SetConfig+0x2de>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a21      	ldr	r2, [pc, #132]	; (800385c <DMA_SetConfig+0x34c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d009      	beq.n	80037ee <DMA_SetConfig+0x2de>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a20      	ldr	r2, [pc, #128]	; (8003860 <DMA_SetConfig+0x350>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d004      	beq.n	80037ee <DMA_SetConfig+0x2de>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1e      	ldr	r2, [pc, #120]	; (8003864 <DMA_SetConfig+0x354>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d101      	bne.n	80037f2 <DMA_SetConfig+0x2e2>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <DMA_SetConfig+0x2e4>
 80037f2:	2300      	movs	r3, #0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d020      	beq.n	800383a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	2201      	movs	r2, #1
 8003802:	409a      	lsls	r2, r3
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	d108      	bne.n	800382a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	60da      	str	r2, [r3, #12]
}
 8003828:	e007      	b.n	800383a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	60da      	str	r2, [r3, #12]
}
 800383a:	bf00      	nop
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	58025408 	.word	0x58025408
 800384c:	5802541c 	.word	0x5802541c
 8003850:	58025430 	.word	0x58025430
 8003854:	58025444 	.word	0x58025444
 8003858:	58025458 	.word	0x58025458
 800385c:	5802546c 	.word	0x5802546c
 8003860:	58025480 	.word	0x58025480
 8003864:	58025494 	.word	0x58025494

08003868 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a42      	ldr	r2, [pc, #264]	; (8003980 <DMA_CalcBaseAndBitshift+0x118>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d04a      	beq.n	8003910 <DMA_CalcBaseAndBitshift+0xa8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a41      	ldr	r2, [pc, #260]	; (8003984 <DMA_CalcBaseAndBitshift+0x11c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d045      	beq.n	8003910 <DMA_CalcBaseAndBitshift+0xa8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a3f      	ldr	r2, [pc, #252]	; (8003988 <DMA_CalcBaseAndBitshift+0x120>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d040      	beq.n	8003910 <DMA_CalcBaseAndBitshift+0xa8>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a3e      	ldr	r2, [pc, #248]	; (800398c <DMA_CalcBaseAndBitshift+0x124>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d03b      	beq.n	8003910 <DMA_CalcBaseAndBitshift+0xa8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a3c      	ldr	r2, [pc, #240]	; (8003990 <DMA_CalcBaseAndBitshift+0x128>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d036      	beq.n	8003910 <DMA_CalcBaseAndBitshift+0xa8>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a3b      	ldr	r2, [pc, #236]	; (8003994 <DMA_CalcBaseAndBitshift+0x12c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d031      	beq.n	8003910 <DMA_CalcBaseAndBitshift+0xa8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a39      	ldr	r2, [pc, #228]	; (8003998 <DMA_CalcBaseAndBitshift+0x130>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d02c      	beq.n	8003910 <DMA_CalcBaseAndBitshift+0xa8>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a38      	ldr	r2, [pc, #224]	; (800399c <DMA_CalcBaseAndBitshift+0x134>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d027      	beq.n	8003910 <DMA_CalcBaseAndBitshift+0xa8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a36      	ldr	r2, [pc, #216]	; (80039a0 <DMA_CalcBaseAndBitshift+0x138>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d022      	beq.n	8003910 <DMA_CalcBaseAndBitshift+0xa8>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a35      	ldr	r2, [pc, #212]	; (80039a4 <DMA_CalcBaseAndBitshift+0x13c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d01d      	beq.n	8003910 <DMA_CalcBaseAndBitshift+0xa8>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a33      	ldr	r2, [pc, #204]	; (80039a8 <DMA_CalcBaseAndBitshift+0x140>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d018      	beq.n	8003910 <DMA_CalcBaseAndBitshift+0xa8>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a32      	ldr	r2, [pc, #200]	; (80039ac <DMA_CalcBaseAndBitshift+0x144>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d013      	beq.n	8003910 <DMA_CalcBaseAndBitshift+0xa8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a30      	ldr	r2, [pc, #192]	; (80039b0 <DMA_CalcBaseAndBitshift+0x148>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00e      	beq.n	8003910 <DMA_CalcBaseAndBitshift+0xa8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2f      	ldr	r2, [pc, #188]	; (80039b4 <DMA_CalcBaseAndBitshift+0x14c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d009      	beq.n	8003910 <DMA_CalcBaseAndBitshift+0xa8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2d      	ldr	r2, [pc, #180]	; (80039b8 <DMA_CalcBaseAndBitshift+0x150>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <DMA_CalcBaseAndBitshift+0xa8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a2c      	ldr	r2, [pc, #176]	; (80039bc <DMA_CalcBaseAndBitshift+0x154>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d101      	bne.n	8003914 <DMA_CalcBaseAndBitshift+0xac>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <DMA_CalcBaseAndBitshift+0xae>
 8003914:	2300      	movs	r3, #0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d024      	beq.n	8003964 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	3b10      	subs	r3, #16
 8003922:	4a27      	ldr	r2, [pc, #156]	; (80039c0 <DMA_CalcBaseAndBitshift+0x158>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	4a24      	ldr	r2, [pc, #144]	; (80039c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003934:	5cd3      	ldrb	r3, [r2, r3]
 8003936:	461a      	mov	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b03      	cmp	r3, #3
 8003940:	d908      	bls.n	8003954 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	4b1f      	ldr	r3, [pc, #124]	; (80039c8 <DMA_CalcBaseAndBitshift+0x160>)
 800394a:	4013      	ands	r3, r2
 800394c:	1d1a      	adds	r2, r3, #4
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	659a      	str	r2, [r3, #88]	; 0x58
 8003952:	e00d      	b.n	8003970 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <DMA_CalcBaseAndBitshift+0x160>)
 800395c:	4013      	ands	r3, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6593      	str	r3, [r2, #88]	; 0x58
 8003962:	e005      	b.n	8003970 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	40020010 	.word	0x40020010
 8003984:	40020028 	.word	0x40020028
 8003988:	40020040 	.word	0x40020040
 800398c:	40020058 	.word	0x40020058
 8003990:	40020070 	.word	0x40020070
 8003994:	40020088 	.word	0x40020088
 8003998:	400200a0 	.word	0x400200a0
 800399c:	400200b8 	.word	0x400200b8
 80039a0:	40020410 	.word	0x40020410
 80039a4:	40020428 	.word	0x40020428
 80039a8:	40020440 	.word	0x40020440
 80039ac:	40020458 	.word	0x40020458
 80039b0:	40020470 	.word	0x40020470
 80039b4:	40020488 	.word	0x40020488
 80039b8:	400204a0 	.word	0x400204a0
 80039bc:	400204b8 	.word	0x400204b8
 80039c0:	aaaaaaab 	.word	0xaaaaaaab
 80039c4:	08009170 	.word	0x08009170
 80039c8:	fffffc00 	.word	0xfffffc00

080039cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d120      	bne.n	8003a22 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d858      	bhi.n	8003a9a <DMA_CheckFifoParam+0xce>
 80039e8:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <DMA_CheckFifoParam+0x24>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003a01 	.word	0x08003a01
 80039f4:	08003a13 	.word	0x08003a13
 80039f8:	08003a01 	.word	0x08003a01
 80039fc:	08003a9b 	.word	0x08003a9b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d048      	beq.n	8003a9e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a10:	e045      	b.n	8003a9e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a1a:	d142      	bne.n	8003aa2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a20:	e03f      	b.n	8003aa2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2a:	d123      	bne.n	8003a74 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d838      	bhi.n	8003aa6 <DMA_CheckFifoParam+0xda>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <DMA_CheckFifoParam+0x70>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a4d 	.word	0x08003a4d
 8003a40:	08003a53 	.word	0x08003a53
 8003a44:	08003a4d 	.word	0x08003a4d
 8003a48:	08003a65 	.word	0x08003a65
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
        break;
 8003a50:	e030      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d025      	beq.n	8003aaa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a62:	e022      	b.n	8003aaa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a6c:	d11f      	bne.n	8003aae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a72:	e01c      	b.n	8003aae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d902      	bls.n	8003a82 <DMA_CheckFifoParam+0xb6>
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d003      	beq.n	8003a88 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003a80:	e018      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
        break;
 8003a86:	e015      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00e      	beq.n	8003ab2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
    break;
 8003a98:	e00b      	b.n	8003ab2 <DMA_CheckFifoParam+0xe6>
        break;
 8003a9a:	bf00      	nop
 8003a9c:	e00a      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
        break;
 8003a9e:	bf00      	nop
 8003aa0:	e008      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
        break;
 8003aa2:	bf00      	nop
 8003aa4:	e006      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
        break;
 8003aa6:	bf00      	nop
 8003aa8:	e004      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
        break;
 8003aaa:	bf00      	nop
 8003aac:	e002      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
        break;
 8003aae:	bf00      	nop
 8003ab0:	e000      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
    break;
 8003ab2:	bf00      	nop
    }
  }

  return status;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop

08003ac4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a38      	ldr	r2, [pc, #224]	; (8003bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d022      	beq.n	8003b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a36      	ldr	r2, [pc, #216]	; (8003bbc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01d      	beq.n	8003b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a35      	ldr	r2, [pc, #212]	; (8003bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d018      	beq.n	8003b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a33      	ldr	r2, [pc, #204]	; (8003bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d013      	beq.n	8003b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a32      	ldr	r2, [pc, #200]	; (8003bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00e      	beq.n	8003b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a30      	ldr	r2, [pc, #192]	; (8003bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a2f      	ldr	r2, [pc, #188]	; (8003bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d004      	beq.n	8003b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a2d      	ldr	r2, [pc, #180]	; (8003bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003b26:	2300      	movs	r3, #0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01a      	beq.n	8003b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	3b08      	subs	r3, #8
 8003b34:	4a28      	ldr	r2, [pc, #160]	; (8003bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4b26      	ldr	r3, [pc, #152]	; (8003bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	461a      	mov	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a24      	ldr	r2, [pc, #144]	; (8003be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003b50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	2201      	movs	r2, #1
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003b60:	e024      	b.n	8003bac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	3b10      	subs	r3, #16
 8003b6a:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4a1c      	ldr	r2, [pc, #112]	; (8003be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d806      	bhi.n	8003b8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4a1b      	ldr	r2, [pc, #108]	; (8003bec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d902      	bls.n	8003b8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3308      	adds	r3, #8
 8003b88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4b18      	ldr	r3, [pc, #96]	; (8003bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	461a      	mov	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a16      	ldr	r2, [pc, #88]	; (8003bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003b9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	58025408 	.word	0x58025408
 8003bbc:	5802541c 	.word	0x5802541c
 8003bc0:	58025430 	.word	0x58025430
 8003bc4:	58025444 	.word	0x58025444
 8003bc8:	58025458 	.word	0x58025458
 8003bcc:	5802546c 	.word	0x5802546c
 8003bd0:	58025480 	.word	0x58025480
 8003bd4:	58025494 	.word	0x58025494
 8003bd8:	cccccccd 	.word	0xcccccccd
 8003bdc:	16009600 	.word	0x16009600
 8003be0:	58025880 	.word	0x58025880
 8003be4:	aaaaaaab 	.word	0xaaaaaaab
 8003be8:	400204b8 	.word	0x400204b8
 8003bec:	4002040f 	.word	0x4002040f
 8003bf0:	10008200 	.word	0x10008200
 8003bf4:	40020880 	.word	0x40020880

08003bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d04a      	beq.n	8003ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d847      	bhi.n	8003ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a25      	ldr	r2, [pc, #148]	; (8003cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d022      	beq.n	8003c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a24      	ldr	r2, [pc, #144]	; (8003cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d01d      	beq.n	8003c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a22      	ldr	r2, [pc, #136]	; (8003cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d018      	beq.n	8003c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a21      	ldr	r2, [pc, #132]	; (8003cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d013      	beq.n	8003c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00e      	beq.n	8003c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1e      	ldr	r2, [pc, #120]	; (8003cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d009      	beq.n	8003c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d101      	bne.n	8003c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4b17      	ldr	r3, [pc, #92]	; (8003cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	461a      	mov	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a15      	ldr	r2, [pc, #84]	; (8003cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003c80:	671a      	str	r2, [r3, #112]	; 0x70
 8003c82:	e009      	b.n	8003c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a11      	ldr	r2, [pc, #68]	; (8003cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003c96:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	58025408 	.word	0x58025408
 8003cb4:	5802541c 	.word	0x5802541c
 8003cb8:	58025430 	.word	0x58025430
 8003cbc:	58025444 	.word	0x58025444
 8003cc0:	58025458 	.word	0x58025458
 8003cc4:	5802546c 	.word	0x5802546c
 8003cc8:	58025480 	.word	0x58025480
 8003ccc:	58025494 	.word	0x58025494
 8003cd0:	1600963f 	.word	0x1600963f
 8003cd4:	58025940 	.word	0x58025940
 8003cd8:	1000823f 	.word	0x1000823f
 8003cdc:	40020940 	.word	0x40020940

08003ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003cee:	4b86      	ldr	r3, [pc, #536]	; (8003f08 <HAL_GPIO_Init+0x228>)
 8003cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cf2:	e18c      	b.n	800400e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 817e 	beq.w	8004008 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d005      	beq.n	8003d24 <HAL_GPIO_Init+0x44>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d130      	bne.n	8003d86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	2203      	movs	r2, #3
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4013      	ands	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	f003 0201 	and.w	r2, r3, #1
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d017      	beq.n	8003dc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d123      	bne.n	8003e16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	08da      	lsrs	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3208      	adds	r2, #8
 8003dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	220f      	movs	r2, #15
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	08da      	lsrs	r2, r3, #3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3208      	adds	r2, #8
 8003e10:	69b9      	ldr	r1, [r7, #24]
 8003e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	2203      	movs	r2, #3
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43db      	mvns	r3, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 0203 	and.w	r2, r3, #3
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80d8 	beq.w	8004008 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e58:	4b2c      	ldr	r3, [pc, #176]	; (8003f0c <HAL_GPIO_Init+0x22c>)
 8003e5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e5e:	4a2b      	ldr	r2, [pc, #172]	; (8003f0c <HAL_GPIO_Init+0x22c>)
 8003e60:	f043 0302 	orr.w	r3, r3, #2
 8003e64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e68:	4b28      	ldr	r3, [pc, #160]	; (8003f0c <HAL_GPIO_Init+0x22c>)
 8003e6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e76:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <HAL_GPIO_Init+0x230>)
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	089b      	lsrs	r3, r3, #2
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	220f      	movs	r2, #15
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4013      	ands	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a1d      	ldr	r2, [pc, #116]	; (8003f14 <HAL_GPIO_Init+0x234>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d04a      	beq.n	8003f38 <HAL_GPIO_Init+0x258>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a1c      	ldr	r2, [pc, #112]	; (8003f18 <HAL_GPIO_Init+0x238>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d02b      	beq.n	8003f02 <HAL_GPIO_Init+0x222>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a1b      	ldr	r2, [pc, #108]	; (8003f1c <HAL_GPIO_Init+0x23c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d025      	beq.n	8003efe <HAL_GPIO_Init+0x21e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a1a      	ldr	r2, [pc, #104]	; (8003f20 <HAL_GPIO_Init+0x240>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01f      	beq.n	8003efa <HAL_GPIO_Init+0x21a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a19      	ldr	r2, [pc, #100]	; (8003f24 <HAL_GPIO_Init+0x244>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d019      	beq.n	8003ef6 <HAL_GPIO_Init+0x216>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_GPIO_Init+0x248>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <HAL_GPIO_Init+0x212>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a17      	ldr	r2, [pc, #92]	; (8003f2c <HAL_GPIO_Init+0x24c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00d      	beq.n	8003eee <HAL_GPIO_Init+0x20e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <HAL_GPIO_Init+0x250>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d007      	beq.n	8003eea <HAL_GPIO_Init+0x20a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a15      	ldr	r2, [pc, #84]	; (8003f34 <HAL_GPIO_Init+0x254>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d101      	bne.n	8003ee6 <HAL_GPIO_Init+0x206>
 8003ee2:	2309      	movs	r3, #9
 8003ee4:	e029      	b.n	8003f3a <HAL_GPIO_Init+0x25a>
 8003ee6:	230a      	movs	r3, #10
 8003ee8:	e027      	b.n	8003f3a <HAL_GPIO_Init+0x25a>
 8003eea:	2307      	movs	r3, #7
 8003eec:	e025      	b.n	8003f3a <HAL_GPIO_Init+0x25a>
 8003eee:	2306      	movs	r3, #6
 8003ef0:	e023      	b.n	8003f3a <HAL_GPIO_Init+0x25a>
 8003ef2:	2305      	movs	r3, #5
 8003ef4:	e021      	b.n	8003f3a <HAL_GPIO_Init+0x25a>
 8003ef6:	2304      	movs	r3, #4
 8003ef8:	e01f      	b.n	8003f3a <HAL_GPIO_Init+0x25a>
 8003efa:	2303      	movs	r3, #3
 8003efc:	e01d      	b.n	8003f3a <HAL_GPIO_Init+0x25a>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e01b      	b.n	8003f3a <HAL_GPIO_Init+0x25a>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e019      	b.n	8003f3a <HAL_GPIO_Init+0x25a>
 8003f06:	bf00      	nop
 8003f08:	58000080 	.word	0x58000080
 8003f0c:	58024400 	.word	0x58024400
 8003f10:	58000400 	.word	0x58000400
 8003f14:	58020000 	.word	0x58020000
 8003f18:	58020400 	.word	0x58020400
 8003f1c:	58020800 	.word	0x58020800
 8003f20:	58020c00 	.word	0x58020c00
 8003f24:	58021000 	.word	0x58021000
 8003f28:	58021400 	.word	0x58021400
 8003f2c:	58021800 	.word	0x58021800
 8003f30:	58021c00 	.word	0x58021c00
 8003f34:	58022400 	.word	0x58022400
 8003f38:	2300      	movs	r3, #0
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	f002 0203 	and.w	r2, r2, #3
 8003f40:	0092      	lsls	r2, r2, #2
 8003f42:	4093      	lsls	r3, r2
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f4a:	4938      	ldr	r1, [pc, #224]	; (800402c <HAL_GPIO_Init+0x34c>)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	3302      	adds	r3, #2
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003f7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4013      	ands	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	3301      	adds	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	f47f ae6b 	bne.w	8003cf4 <HAL_GPIO_Init+0x14>
  }
}
 800401e:	bf00      	nop
 8004020:	bf00      	nop
 8004022:	3724      	adds	r7, #36	; 0x24
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	58000400 	.word	0x58000400

08004030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	807b      	strh	r3, [r7, #2]
 800403c:	4613      	mov	r3, r2
 800403e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004040:	787b      	ldrb	r3, [r7, #1]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004046:	887a      	ldrh	r2, [r7, #2]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800404c:	e003      	b.n	8004056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800404e:	887b      	ldrh	r3, [r7, #2]
 8004050:	041a      	lsls	r2, r3, #16
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	619a      	str	r2, [r3, #24]
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_PWREx_ConfigSupply+0x70>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d00a      	beq.n	800408e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004078:	4b16      	ldr	r3, [pc, #88]	; (80040d4 <HAL_PWREx_ConfigSupply+0x70>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	429a      	cmp	r2, r3
 8004084:	d001      	beq.n	800408a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e01f      	b.n	80040ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e01d      	b.n	80040ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800408e:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <HAL_PWREx_ConfigSupply+0x70>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f023 0207 	bic.w	r2, r3, #7
 8004096:	490f      	ldr	r1, [pc, #60]	; (80040d4 <HAL_PWREx_ConfigSupply+0x70>)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4313      	orrs	r3, r2
 800409c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800409e:	f7fd fbff 	bl	80018a0 <HAL_GetTick>
 80040a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040a4:	e009      	b.n	80040ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040a6:	f7fd fbfb 	bl	80018a0 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040b4:	d901      	bls.n	80040ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e007      	b.n	80040ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_PWREx_ConfigSupply+0x70>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c6:	d1ee      	bne.n	80040a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	58024800 	.word	0x58024800

080040d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08c      	sub	sp, #48	; 0x30
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e3c8      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 8087 	beq.w	8004206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f8:	4b88      	ldr	r3, [pc, #544]	; (800431c <HAL_RCC_OscConfig+0x244>)
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004102:	4b86      	ldr	r3, [pc, #536]	; (800431c <HAL_RCC_OscConfig+0x244>)
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	2b10      	cmp	r3, #16
 800410c:	d007      	beq.n	800411e <HAL_RCC_OscConfig+0x46>
 800410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004110:	2b18      	cmp	r3, #24
 8004112:	d110      	bne.n	8004136 <HAL_RCC_OscConfig+0x5e>
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d10b      	bne.n	8004136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411e:	4b7f      	ldr	r3, [pc, #508]	; (800431c <HAL_RCC_OscConfig+0x244>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d06c      	beq.n	8004204 <HAL_RCC_OscConfig+0x12c>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d168      	bne.n	8004204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e3a2      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413e:	d106      	bne.n	800414e <HAL_RCC_OscConfig+0x76>
 8004140:	4b76      	ldr	r3, [pc, #472]	; (800431c <HAL_RCC_OscConfig+0x244>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a75      	ldr	r2, [pc, #468]	; (800431c <HAL_RCC_OscConfig+0x244>)
 8004146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	e02e      	b.n	80041ac <HAL_RCC_OscConfig+0xd4>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10c      	bne.n	8004170 <HAL_RCC_OscConfig+0x98>
 8004156:	4b71      	ldr	r3, [pc, #452]	; (800431c <HAL_RCC_OscConfig+0x244>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a70      	ldr	r2, [pc, #448]	; (800431c <HAL_RCC_OscConfig+0x244>)
 800415c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	4b6e      	ldr	r3, [pc, #440]	; (800431c <HAL_RCC_OscConfig+0x244>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a6d      	ldr	r2, [pc, #436]	; (800431c <HAL_RCC_OscConfig+0x244>)
 8004168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	e01d      	b.n	80041ac <HAL_RCC_OscConfig+0xd4>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0xbc>
 800417a:	4b68      	ldr	r3, [pc, #416]	; (800431c <HAL_RCC_OscConfig+0x244>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a67      	ldr	r2, [pc, #412]	; (800431c <HAL_RCC_OscConfig+0x244>)
 8004180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	4b65      	ldr	r3, [pc, #404]	; (800431c <HAL_RCC_OscConfig+0x244>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a64      	ldr	r2, [pc, #400]	; (800431c <HAL_RCC_OscConfig+0x244>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e00b      	b.n	80041ac <HAL_RCC_OscConfig+0xd4>
 8004194:	4b61      	ldr	r3, [pc, #388]	; (800431c <HAL_RCC_OscConfig+0x244>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a60      	ldr	r2, [pc, #384]	; (800431c <HAL_RCC_OscConfig+0x244>)
 800419a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	4b5e      	ldr	r3, [pc, #376]	; (800431c <HAL_RCC_OscConfig+0x244>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a5d      	ldr	r2, [pc, #372]	; (800431c <HAL_RCC_OscConfig+0x244>)
 80041a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d013      	beq.n	80041dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd fb74 	bl	80018a0 <HAL_GetTick>
 80041b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041bc:	f7fd fb70 	bl	80018a0 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b64      	cmp	r3, #100	; 0x64
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e356      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041ce:	4b53      	ldr	r3, [pc, #332]	; (800431c <HAL_RCC_OscConfig+0x244>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0xe4>
 80041da:	e014      	b.n	8004206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fd fb60 	bl	80018a0 <HAL_GetTick>
 80041e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e4:	f7fd fb5c 	bl	80018a0 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e342      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041f6:	4b49      	ldr	r3, [pc, #292]	; (800431c <HAL_RCC_OscConfig+0x244>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x10c>
 8004202:	e000      	b.n	8004206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 808c 	beq.w	800432c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004214:	4b41      	ldr	r3, [pc, #260]	; (800431c <HAL_RCC_OscConfig+0x244>)
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800421c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800421e:	4b3f      	ldr	r3, [pc, #252]	; (800431c <HAL_RCC_OscConfig+0x244>)
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <HAL_RCC_OscConfig+0x162>
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	2b18      	cmp	r3, #24
 800422e:	d137      	bne.n	80042a0 <HAL_RCC_OscConfig+0x1c8>
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d132      	bne.n	80042a0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800423a:	4b38      	ldr	r3, [pc, #224]	; (800431c <HAL_RCC_OscConfig+0x244>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <HAL_RCC_OscConfig+0x17a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e314      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004252:	4b32      	ldr	r3, [pc, #200]	; (800431c <HAL_RCC_OscConfig+0x244>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 0219 	bic.w	r2, r3, #25
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	492f      	ldr	r1, [pc, #188]	; (800431c <HAL_RCC_OscConfig+0x244>)
 8004260:	4313      	orrs	r3, r2
 8004262:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fd fb1c 	bl	80018a0 <HAL_GetTick>
 8004268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800426c:	f7fd fb18 	bl	80018a0 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e2fe      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800427e:	4b27      	ldr	r3, [pc, #156]	; (800431c <HAL_RCC_OscConfig+0x244>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428a:	4b24      	ldr	r3, [pc, #144]	; (800431c <HAL_RCC_OscConfig+0x244>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	061b      	lsls	r3, r3, #24
 8004298:	4920      	ldr	r1, [pc, #128]	; (800431c <HAL_RCC_OscConfig+0x244>)
 800429a:	4313      	orrs	r3, r2
 800429c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800429e:	e045      	b.n	800432c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d026      	beq.n	80042f6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042a8:	4b1c      	ldr	r3, [pc, #112]	; (800431c <HAL_RCC_OscConfig+0x244>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f023 0219 	bic.w	r2, r3, #25
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4919      	ldr	r1, [pc, #100]	; (800431c <HAL_RCC_OscConfig+0x244>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ba:	f7fd faf1 	bl	80018a0 <HAL_GetTick>
 80042be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c2:	f7fd faed 	bl	80018a0 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e2d3      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042d4:	4b11      	ldr	r3, [pc, #68]	; (800431c <HAL_RCC_OscConfig+0x244>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f0      	beq.n	80042c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e0:	4b0e      	ldr	r3, [pc, #56]	; (800431c <HAL_RCC_OscConfig+0x244>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	061b      	lsls	r3, r3, #24
 80042ee:	490b      	ldr	r1, [pc, #44]	; (800431c <HAL_RCC_OscConfig+0x244>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	604b      	str	r3, [r1, #4]
 80042f4:	e01a      	b.n	800432c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042f6:	4b09      	ldr	r3, [pc, #36]	; (800431c <HAL_RCC_OscConfig+0x244>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a08      	ldr	r2, [pc, #32]	; (800431c <HAL_RCC_OscConfig+0x244>)
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004302:	f7fd facd 	bl	80018a0 <HAL_GetTick>
 8004306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004308:	e00a      	b.n	8004320 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800430a:	f7fd fac9 	bl	80018a0 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d903      	bls.n	8004320 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e2af      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
 800431c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004320:	4b96      	ldr	r3, [pc, #600]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ee      	bne.n	800430a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b00      	cmp	r3, #0
 8004336:	d06a      	beq.n	800440e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004338:	4b90      	ldr	r3, [pc, #576]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004340:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004342:	4b8e      	ldr	r3, [pc, #568]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	2b08      	cmp	r3, #8
 800434c:	d007      	beq.n	800435e <HAL_RCC_OscConfig+0x286>
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b18      	cmp	r3, #24
 8004352:	d11b      	bne.n	800438c <HAL_RCC_OscConfig+0x2b4>
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b01      	cmp	r3, #1
 800435c:	d116      	bne.n	800438c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800435e:	4b87      	ldr	r3, [pc, #540]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_RCC_OscConfig+0x29e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	2b80      	cmp	r3, #128	; 0x80
 8004370:	d001      	beq.n	8004376 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e282      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004376:	4b81      	ldr	r3, [pc, #516]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	061b      	lsls	r3, r3, #24
 8004384:	497d      	ldr	r1, [pc, #500]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 8004386:	4313      	orrs	r3, r2
 8004388:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800438a:	e040      	b.n	800440e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d023      	beq.n	80043dc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004394:	4b79      	ldr	r3, [pc, #484]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a78      	ldr	r2, [pc, #480]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 800439a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fd fa7e 	bl	80018a0 <HAL_GetTick>
 80043a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80043a8:	f7fd fa7a 	bl	80018a0 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e260      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043ba:	4b70      	ldr	r3, [pc, #448]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043c6:	4b6d      	ldr	r3, [pc, #436]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	061b      	lsls	r3, r3, #24
 80043d4:	4969      	ldr	r1, [pc, #420]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60cb      	str	r3, [r1, #12]
 80043da:	e018      	b.n	800440e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80043dc:	4b67      	ldr	r3, [pc, #412]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a66      	ldr	r2, [pc, #408]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 80043e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fd fa5a 	bl	80018a0 <HAL_GetTick>
 80043ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80043f0:	f7fd fa56 	bl	80018a0 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e23c      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004402:	4b5e      	ldr	r3, [pc, #376]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d036      	beq.n	8004488 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d019      	beq.n	8004456 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004422:	4b56      	ldr	r3, [pc, #344]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 8004424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004426:	4a55      	ldr	r2, [pc, #340]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 8004428:	f043 0301 	orr.w	r3, r3, #1
 800442c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442e:	f7fd fa37 	bl	80018a0 <HAL_GetTick>
 8004432:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004436:	f7fd fa33 	bl	80018a0 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e219      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004448:	4b4c      	ldr	r3, [pc, #304]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 800444a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCC_OscConfig+0x35e>
 8004454:	e018      	b.n	8004488 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004456:	4b49      	ldr	r3, [pc, #292]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 8004458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445a:	4a48      	ldr	r2, [pc, #288]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004462:	f7fd fa1d 	bl	80018a0 <HAL_GetTick>
 8004466:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446a:	f7fd fa19 	bl	80018a0 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e1ff      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800447c:	4b3f      	ldr	r3, [pc, #252]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 800447e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f0      	bne.n	800446a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d036      	beq.n	8004502 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d019      	beq.n	80044d0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800449c:	4b37      	ldr	r3, [pc, #220]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a36      	ldr	r2, [pc, #216]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 80044a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044a8:	f7fd f9fa 	bl	80018a0 <HAL_GetTick>
 80044ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044b0:	f7fd f9f6 	bl	80018a0 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e1dc      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044c2:	4b2e      	ldr	r3, [pc, #184]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0x3d8>
 80044ce:	e018      	b.n	8004502 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044d0:	4b2a      	ldr	r3, [pc, #168]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a29      	ldr	r2, [pc, #164]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 80044d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044dc:	f7fd f9e0 	bl	80018a0 <HAL_GetTick>
 80044e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044e4:	f7fd f9dc 	bl	80018a0 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e1c2      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044f6:	4b21      	ldr	r3, [pc, #132]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 8086 	beq.w	800461c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004510:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <HAL_RCC_OscConfig+0x4a8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1a      	ldr	r2, [pc, #104]	; (8004580 <HAL_RCC_OscConfig+0x4a8>)
 8004516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800451c:	f7fd f9c0 	bl	80018a0 <HAL_GetTick>
 8004520:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004524:	f7fd f9bc 	bl	80018a0 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	; 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e1a2      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004536:	4b12      	ldr	r3, [pc, #72]	; (8004580 <HAL_RCC_OscConfig+0x4a8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d106      	bne.n	8004558 <HAL_RCC_OscConfig+0x480>
 800454a:	4b0c      	ldr	r3, [pc, #48]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	4a0b      	ldr	r2, [pc, #44]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	6713      	str	r3, [r2, #112]	; 0x70
 8004556:	e032      	b.n	80045be <HAL_RCC_OscConfig+0x4e6>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d111      	bne.n	8004584 <HAL_RCC_OscConfig+0x4ac>
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004564:	4a05      	ldr	r2, [pc, #20]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	6713      	str	r3, [r2, #112]	; 0x70
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	4a02      	ldr	r2, [pc, #8]	; (800457c <HAL_RCC_OscConfig+0x4a4>)
 8004572:	f023 0304 	bic.w	r3, r3, #4
 8004576:	6713      	str	r3, [r2, #112]	; 0x70
 8004578:	e021      	b.n	80045be <HAL_RCC_OscConfig+0x4e6>
 800457a:	bf00      	nop
 800457c:	58024400 	.word	0x58024400
 8004580:	58024800 	.word	0x58024800
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b05      	cmp	r3, #5
 800458a:	d10c      	bne.n	80045a6 <HAL_RCC_OscConfig+0x4ce>
 800458c:	4b83      	ldr	r3, [pc, #524]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	4a82      	ldr	r2, [pc, #520]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 8004592:	f043 0304 	orr.w	r3, r3, #4
 8004596:	6713      	str	r3, [r2, #112]	; 0x70
 8004598:	4b80      	ldr	r3, [pc, #512]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	4a7f      	ldr	r2, [pc, #508]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	6713      	str	r3, [r2, #112]	; 0x70
 80045a4:	e00b      	b.n	80045be <HAL_RCC_OscConfig+0x4e6>
 80045a6:	4b7d      	ldr	r3, [pc, #500]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	4a7c      	ldr	r2, [pc, #496]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 80045ac:	f023 0301 	bic.w	r3, r3, #1
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
 80045b2:	4b7a      	ldr	r3, [pc, #488]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	4a79      	ldr	r2, [pc, #484]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 80045b8:	f023 0304 	bic.w	r3, r3, #4
 80045bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d015      	beq.n	80045f2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c6:	f7fd f96b 	bl	80018a0 <HAL_GetTick>
 80045ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045cc:	e00a      	b.n	80045e4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ce:	f7fd f967 	bl	80018a0 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045dc:	4293      	cmp	r3, r2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e14b      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045e4:	4b6d      	ldr	r3, [pc, #436]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 80045e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0ee      	beq.n	80045ce <HAL_RCC_OscConfig+0x4f6>
 80045f0:	e014      	b.n	800461c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f2:	f7fd f955 	bl	80018a0 <HAL_GetTick>
 80045f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045f8:	e00a      	b.n	8004610 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fa:	f7fd f951 	bl	80018a0 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	f241 3288 	movw	r2, #5000	; 0x1388
 8004608:	4293      	cmp	r3, r2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e135      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004610:	4b62      	ldr	r3, [pc, #392]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1ee      	bne.n	80045fa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 812a 	beq.w	800487a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004626:	4b5d      	ldr	r3, [pc, #372]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800462e:	2b18      	cmp	r3, #24
 8004630:	f000 80ba 	beq.w	80047a8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	2b02      	cmp	r3, #2
 800463a:	f040 8095 	bne.w	8004768 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463e:	4b57      	ldr	r3, [pc, #348]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a56      	ldr	r2, [pc, #344]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 8004644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7fd f929 	bl	80018a0 <HAL_GetTick>
 800464e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004652:	f7fd f925 	bl	80018a0 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e10b      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004664:	4b4d      	ldr	r3, [pc, #308]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1f0      	bne.n	8004652 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004670:	4b4a      	ldr	r3, [pc, #296]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 8004672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004674:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <HAL_RCC_OscConfig+0x6c8>)
 8004676:	4013      	ands	r3, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004680:	0112      	lsls	r2, r2, #4
 8004682:	430a      	orrs	r2, r1
 8004684:	4945      	ldr	r1, [pc, #276]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 8004686:	4313      	orrs	r3, r2
 8004688:	628b      	str	r3, [r1, #40]	; 0x28
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	3b01      	subs	r3, #1
 8004690:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004698:	3b01      	subs	r3, #1
 800469a:	025b      	lsls	r3, r3, #9
 800469c:	b29b      	uxth	r3, r3
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	3b01      	subs	r3, #1
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b2:	3b01      	subs	r3, #1
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046ba:	4938      	ldr	r1, [pc, #224]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80046c0:	4b36      	ldr	r3, [pc, #216]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	4a35      	ldr	r2, [pc, #212]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046cc:	4b33      	ldr	r3, [pc, #204]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 80046ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d0:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <HAL_RCC_OscConfig+0x6cc>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046d8:	00d2      	lsls	r2, r2, #3
 80046da:	4930      	ldr	r1, [pc, #192]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80046e0:	4b2e      	ldr	r3, [pc, #184]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	f023 020c 	bic.w	r2, r3, #12
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	492b      	ldr	r1, [pc, #172]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80046f2:	4b2a      	ldr	r3, [pc, #168]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	f023 0202 	bic.w	r2, r3, #2
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fe:	4927      	ldr	r1, [pc, #156]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 8004700:	4313      	orrs	r3, r2
 8004702:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004704:	4b25      	ldr	r3, [pc, #148]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	4a24      	ldr	r2, [pc, #144]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 800470a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800470e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004710:	4b22      	ldr	r3, [pc, #136]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	4a21      	ldr	r2, [pc, #132]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 8004716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800471a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800471c:	4b1f      	ldr	r3, [pc, #124]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	4a1e      	ldr	r2, [pc, #120]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 8004722:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004728:	4b1c      	ldr	r3, [pc, #112]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	4a1b      	ldr	r2, [pc, #108]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004734:	4b19      	ldr	r3, [pc, #100]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a18      	ldr	r2, [pc, #96]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 800473a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800473e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fd f8ae 	bl	80018a0 <HAL_GetTick>
 8004744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004748:	f7fd f8aa 	bl	80018a0 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e090      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800475a:	4b10      	ldr	r3, [pc, #64]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCC_OscConfig+0x670>
 8004766:	e088      	b.n	800487a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004768:	4b0c      	ldr	r3, [pc, #48]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a0b      	ldr	r2, [pc, #44]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 800476e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fd f894 	bl	80018a0 <HAL_GetTick>
 8004778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477c:	f7fd f890 	bl	80018a0 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e076      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800478e:	4b03      	ldr	r3, [pc, #12]	; (800479c <HAL_RCC_OscConfig+0x6c4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x6a4>
 800479a:	e06e      	b.n	800487a <HAL_RCC_OscConfig+0x7a2>
 800479c:	58024400 	.word	0x58024400
 80047a0:	fffffc0c 	.word	0xfffffc0c
 80047a4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80047a8:	4b36      	ldr	r3, [pc, #216]	; (8004884 <HAL_RCC_OscConfig+0x7ac>)
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047ae:	4b35      	ldr	r3, [pc, #212]	; (8004884 <HAL_RCC_OscConfig+0x7ac>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d031      	beq.n	8004820 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f003 0203 	and.w	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d12a      	bne.n	8004820 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d122      	bne.n	8004820 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d11a      	bne.n	8004820 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	0a5b      	lsrs	r3, r3, #9
 80047ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d111      	bne.n	8004820 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	0c1b      	lsrs	r3, r3, #16
 8004800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d108      	bne.n	8004820 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	0e1b      	lsrs	r3, r3, #24
 8004812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e02b      	b.n	800487c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004824:	4b17      	ldr	r3, [pc, #92]	; (8004884 <HAL_RCC_OscConfig+0x7ac>)
 8004826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004828:	08db      	lsrs	r3, r3, #3
 800482a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800482e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	429a      	cmp	r2, r3
 8004838:	d01f      	beq.n	800487a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <HAL_RCC_OscConfig+0x7ac>)
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	4a11      	ldr	r2, [pc, #68]	; (8004884 <HAL_RCC_OscConfig+0x7ac>)
 8004840:	f023 0301 	bic.w	r3, r3, #1
 8004844:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004846:	f7fd f82b 	bl	80018a0 <HAL_GetTick>
 800484a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800484c:	bf00      	nop
 800484e:	f7fd f827 	bl	80018a0 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	4293      	cmp	r3, r2
 8004858:	d0f9      	beq.n	800484e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800485a:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <HAL_RCC_OscConfig+0x7ac>)
 800485c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <HAL_RCC_OscConfig+0x7b0>)
 8004860:	4013      	ands	r3, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004866:	00d2      	lsls	r2, r2, #3
 8004868:	4906      	ldr	r1, [pc, #24]	; (8004884 <HAL_RCC_OscConfig+0x7ac>)
 800486a:	4313      	orrs	r3, r2
 800486c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCC_OscConfig+0x7ac>)
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	4a04      	ldr	r2, [pc, #16]	; (8004884 <HAL_RCC_OscConfig+0x7ac>)
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3730      	adds	r7, #48	; 0x30
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	58024400 	.word	0x58024400
 8004888:	ffff0007 	.word	0xffff0007

0800488c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e19c      	b.n	8004bda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048a0:	4b8a      	ldr	r3, [pc, #552]	; (8004acc <HAL_RCC_ClockConfig+0x240>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d910      	bls.n	80048d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ae:	4b87      	ldr	r3, [pc, #540]	; (8004acc <HAL_RCC_ClockConfig+0x240>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f023 020f 	bic.w	r2, r3, #15
 80048b6:	4985      	ldr	r1, [pc, #532]	; (8004acc <HAL_RCC_ClockConfig+0x240>)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b83      	ldr	r3, [pc, #524]	; (8004acc <HAL_RCC_ClockConfig+0x240>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e184      	b.n	8004bda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d010      	beq.n	80048fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	4b7b      	ldr	r3, [pc, #492]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d908      	bls.n	80048fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048ec:	4b78      	ldr	r3, [pc, #480]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	4975      	ldr	r1, [pc, #468]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d010      	beq.n	800492c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695a      	ldr	r2, [r3, #20]
 800490e:	4b70      	ldr	r3, [pc, #448]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004916:	429a      	cmp	r2, r3
 8004918:	d908      	bls.n	800492c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800491a:	4b6d      	ldr	r3, [pc, #436]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	496a      	ldr	r1, [pc, #424]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 8004928:	4313      	orrs	r3, r2
 800492a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	d010      	beq.n	800495a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699a      	ldr	r2, [r3, #24]
 800493c:	4b64      	ldr	r3, [pc, #400]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004944:	429a      	cmp	r2, r3
 8004946:	d908      	bls.n	800495a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004948:	4b61      	ldr	r3, [pc, #388]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	495e      	ldr	r1, [pc, #376]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 8004956:	4313      	orrs	r3, r2
 8004958:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b00      	cmp	r3, #0
 8004964:	d010      	beq.n	8004988 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	4b59      	ldr	r3, [pc, #356]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004972:	429a      	cmp	r2, r3
 8004974:	d908      	bls.n	8004988 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004976:	4b56      	ldr	r3, [pc, #344]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	4953      	ldr	r1, [pc, #332]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 8004984:	4313      	orrs	r3, r2
 8004986:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d010      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	4b4d      	ldr	r3, [pc, #308]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d908      	bls.n	80049b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a4:	4b4a      	ldr	r3, [pc, #296]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f023 020f 	bic.w	r2, r3, #15
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4947      	ldr	r1, [pc, #284]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d055      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049c2:	4b43      	ldr	r3, [pc, #268]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	4940      	ldr	r1, [pc, #256]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d107      	bne.n	80049ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049dc:	4b3c      	ldr	r3, [pc, #240]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d121      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0f6      	b.n	8004bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d107      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049f4:	4b36      	ldr	r3, [pc, #216]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d115      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0ea      	b.n	8004bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d107      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a0c:	4b30      	ldr	r3, [pc, #192]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0de      	b.n	8004bda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a1c:	4b2c      	ldr	r3, [pc, #176]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0d6      	b.n	8004bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a2c:	4b28      	ldr	r3, [pc, #160]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f023 0207 	bic.w	r2, r3, #7
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4925      	ldr	r1, [pc, #148]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3e:	f7fc ff2f 	bl	80018a0 <HAL_GetTick>
 8004a42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a44:	e00a      	b.n	8004a5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a46:	f7fc ff2b 	bl	80018a0 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e0be      	b.n	8004bda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5c:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d1eb      	bne.n	8004a46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d010      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d208      	bcs.n	8004a9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a8a:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f023 020f 	bic.w	r2, r3, #15
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	490e      	ldr	r1, [pc, #56]	; (8004ad0 <HAL_RCC_ClockConfig+0x244>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <HAL_RCC_ClockConfig+0x240>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d214      	bcs.n	8004ad4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	4b08      	ldr	r3, [pc, #32]	; (8004acc <HAL_RCC_ClockConfig+0x240>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f023 020f 	bic.w	r2, r3, #15
 8004ab2:	4906      	ldr	r1, [pc, #24]	; (8004acc <HAL_RCC_ClockConfig+0x240>)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aba:	4b04      	ldr	r3, [pc, #16]	; (8004acc <HAL_RCC_ClockConfig+0x240>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e086      	b.n	8004bda <HAL_RCC_ClockConfig+0x34e>
 8004acc:	52002000 	.word	0x52002000
 8004ad0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d010      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	4b3f      	ldr	r3, [pc, #252]	; (8004be4 <HAL_RCC_ClockConfig+0x358>)
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d208      	bcs.n	8004b02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004af0:	4b3c      	ldr	r3, [pc, #240]	; (8004be4 <HAL_RCC_ClockConfig+0x358>)
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	4939      	ldr	r1, [pc, #228]	; (8004be4 <HAL_RCC_ClockConfig+0x358>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d010      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	4b34      	ldr	r3, [pc, #208]	; (8004be4 <HAL_RCC_ClockConfig+0x358>)
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d208      	bcs.n	8004b30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b1e:	4b31      	ldr	r3, [pc, #196]	; (8004be4 <HAL_RCC_ClockConfig+0x358>)
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	492e      	ldr	r1, [pc, #184]	; (8004be4 <HAL_RCC_ClockConfig+0x358>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d010      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	4b28      	ldr	r3, [pc, #160]	; (8004be4 <HAL_RCC_ClockConfig+0x358>)
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d208      	bcs.n	8004b5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b4c:	4b25      	ldr	r3, [pc, #148]	; (8004be4 <HAL_RCC_ClockConfig+0x358>)
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	4922      	ldr	r1, [pc, #136]	; (8004be4 <HAL_RCC_ClockConfig+0x358>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d010      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69da      	ldr	r2, [r3, #28]
 8004b6e:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <HAL_RCC_ClockConfig+0x358>)
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d208      	bcs.n	8004b8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <HAL_RCC_ClockConfig+0x358>)
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	4917      	ldr	r1, [pc, #92]	; (8004be4 <HAL_RCC_ClockConfig+0x358>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b8c:	f000 f834 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <HAL_RCC_ClockConfig+0x358>)
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	0a1b      	lsrs	r3, r3, #8
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	4912      	ldr	r1, [pc, #72]	; (8004be8 <HAL_RCC_ClockConfig+0x35c>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004baa:	4b0e      	ldr	r3, [pc, #56]	; (8004be4 <HAL_RCC_ClockConfig+0x358>)
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	4a0d      	ldr	r2, [pc, #52]	; (8004be8 <HAL_RCC_ClockConfig+0x35c>)
 8004bb4:	5cd3      	ldrb	r3, [r2, r3]
 8004bb6:	f003 031f 	and.w	r3, r3, #31
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc0:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <HAL_RCC_ClockConfig+0x360>)
 8004bc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bc4:	4a0a      	ldr	r2, [pc, #40]	; (8004bf0 <HAL_RCC_ClockConfig+0x364>)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004bca:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <HAL_RCC_ClockConfig+0x368>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc fe1c 	bl	800180c <HAL_InitTick>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	58024400 	.word	0x58024400
 8004be8:	08009160 	.word	0x08009160
 8004bec:	24000004 	.word	0x24000004
 8004bf0:	24000000 	.word	0x24000000
 8004bf4:	24000008 	.word	0x24000008

08004bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b089      	sub	sp, #36	; 0x24
 8004bfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bfe:	4bb3      	ldr	r3, [pc, #716]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c06:	2b18      	cmp	r3, #24
 8004c08:	f200 8155 	bhi.w	8004eb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8004c0c:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c12:	bf00      	nop
 8004c14:	08004c79 	.word	0x08004c79
 8004c18:	08004eb7 	.word	0x08004eb7
 8004c1c:	08004eb7 	.word	0x08004eb7
 8004c20:	08004eb7 	.word	0x08004eb7
 8004c24:	08004eb7 	.word	0x08004eb7
 8004c28:	08004eb7 	.word	0x08004eb7
 8004c2c:	08004eb7 	.word	0x08004eb7
 8004c30:	08004eb7 	.word	0x08004eb7
 8004c34:	08004c9f 	.word	0x08004c9f
 8004c38:	08004eb7 	.word	0x08004eb7
 8004c3c:	08004eb7 	.word	0x08004eb7
 8004c40:	08004eb7 	.word	0x08004eb7
 8004c44:	08004eb7 	.word	0x08004eb7
 8004c48:	08004eb7 	.word	0x08004eb7
 8004c4c:	08004eb7 	.word	0x08004eb7
 8004c50:	08004eb7 	.word	0x08004eb7
 8004c54:	08004ca5 	.word	0x08004ca5
 8004c58:	08004eb7 	.word	0x08004eb7
 8004c5c:	08004eb7 	.word	0x08004eb7
 8004c60:	08004eb7 	.word	0x08004eb7
 8004c64:	08004eb7 	.word	0x08004eb7
 8004c68:	08004eb7 	.word	0x08004eb7
 8004c6c:	08004eb7 	.word	0x08004eb7
 8004c70:	08004eb7 	.word	0x08004eb7
 8004c74:	08004cab 	.word	0x08004cab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c78:	4b94      	ldr	r3, [pc, #592]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d009      	beq.n	8004c98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c84:	4b91      	ldr	r3, [pc, #580]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	08db      	lsrs	r3, r3, #3
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	4a90      	ldr	r2, [pc, #576]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c90:	fa22 f303 	lsr.w	r3, r2, r3
 8004c94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004c96:	e111      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c98:	4b8d      	ldr	r3, [pc, #564]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c9a:	61bb      	str	r3, [r7, #24]
      break;
 8004c9c:	e10e      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004c9e:	4b8d      	ldr	r3, [pc, #564]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ca0:	61bb      	str	r3, [r7, #24]
      break;
 8004ca2:	e10b      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004ca4:	4b8c      	ldr	r3, [pc, #560]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004ca6:	61bb      	str	r3, [r7, #24]
      break;
 8004ca8:	e108      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004caa:	4b88      	ldr	r3, [pc, #544]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004cb4:	4b85      	ldr	r3, [pc, #532]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004cc0:	4b82      	ldr	r3, [pc, #520]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004cca:	4b80      	ldr	r3, [pc, #512]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cce:	08db      	lsrs	r3, r3, #3
 8004cd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80e1 	beq.w	8004eb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	f000 8083 	beq.w	8004dfc <HAL_RCC_GetSysClockFreq+0x204>
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	f200 80a1 	bhi.w	8004e40 <HAL_RCC_GetSysClockFreq+0x248>
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0x114>
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d056      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d0a:	e099      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d0c:	4b6f      	ldr	r3, [pc, #444]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d02d      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d18:	4b6c      	ldr	r3, [pc, #432]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	08db      	lsrs	r3, r3, #3
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	4a6b      	ldr	r2, [pc, #428]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
 8004d28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	ee07 3a90 	vmov	s15, r3
 8004d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d42:	4b62      	ldr	r3, [pc, #392]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d56:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004d72:	e087      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004ee0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d86:	4b51      	ldr	r3, [pc, #324]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004db6:	e065      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004ee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dca:	4b40      	ldr	r3, [pc, #256]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dde:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004dfa:	e043      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004ee8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0e:	4b2f      	ldr	r3, [pc, #188]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e3e:	e021      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004ee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e52:	4b1e      	ldr	r3, [pc, #120]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004e84:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	0a5b      	lsrs	r3, r3, #9
 8004e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e8e:	3301      	adds	r3, #1
 8004e90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	ee07 3a90 	vmov	s15, r3
 8004e98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea8:	ee17 3a90 	vmov	r3, s15
 8004eac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004eae:	e005      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61bb      	str	r3, [r7, #24]
      break;
 8004eb4:	e002      	b.n	8004ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004eb6:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004eb8:	61bb      	str	r3, [r7, #24]
      break;
 8004eba:	bf00      	nop
  }

  return sysclockfreq;
 8004ebc:	69bb      	ldr	r3, [r7, #24]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3724      	adds	r7, #36	; 0x24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	58024400 	.word	0x58024400
 8004ed0:	03d09000 	.word	0x03d09000
 8004ed4:	003d0900 	.word	0x003d0900
 8004ed8:	017d7840 	.word	0x017d7840
 8004edc:	46000000 	.word	0x46000000
 8004ee0:	4c742400 	.word	0x4c742400
 8004ee4:	4a742400 	.word	0x4a742400
 8004ee8:	4bbebc20 	.word	0x4bbebc20

08004eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ef2:	f7ff fe81 	bl	8004bf8 <HAL_RCC_GetSysClockFreq>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	4b10      	ldr	r3, [pc, #64]	; (8004f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	0a1b      	lsrs	r3, r3, #8
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	490f      	ldr	r1, [pc, #60]	; (8004f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f04:	5ccb      	ldrb	r3, [r1, r3]
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f10:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	4a09      	ldr	r2, [pc, #36]	; (8004f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f1a:	5cd3      	ldrb	r3, [r2, r3]
 8004f1c:	f003 031f 	and.w	r3, r3, #31
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	fa22 f303 	lsr.w	r3, r2, r3
 8004f26:	4a07      	ldr	r2, [pc, #28]	; (8004f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f2a:	4a07      	ldr	r2, [pc, #28]	; (8004f48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f30:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f32:	681b      	ldr	r3, [r3, #0]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	58024400 	.word	0x58024400
 8004f40:	08009160 	.word	0x08009160
 8004f44:	24000004 	.word	0x24000004
 8004f48:	24000000 	.word	0x24000000

08004f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f50:	f7ff ffcc 	bl	8004eec <HAL_RCC_GetHCLKFreq>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	091b      	lsrs	r3, r3, #4
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	4904      	ldr	r1, [pc, #16]	; (8004f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f62:	5ccb      	ldrb	r3, [r1, r3]
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	58024400 	.word	0x58024400
 8004f74:	08009160 	.word	0x08009160

08004f78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f7c:	b0c6      	sub	sp, #280	; 0x118
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f84:	2300      	movs	r3, #0
 8004f86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004f9c:	2500      	movs	r5, #0
 8004f9e:	ea54 0305 	orrs.w	r3, r4, r5
 8004fa2:	d049      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004faa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fae:	d02f      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004fb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fb4:	d828      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004fb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fba:	d01a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004fbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fc0:	d822      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fca:	d007      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fcc:	e01c      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fce:	4bab      	ldr	r3, [pc, #684]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	4aaa      	ldr	r2, [pc, #680]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004fda:	e01a      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	2102      	movs	r1, #2
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f002 fa49 	bl	800747c <RCCEx_PLL2_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ff0:	e00f      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff6:	3328      	adds	r3, #40	; 0x28
 8004ff8:	2102      	movs	r1, #2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f002 faf0 	bl	80075e0 <RCCEx_PLL3_Config>
 8005000:	4603      	mov	r3, r0
 8005002:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005006:	e004      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800500e:	e000      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005012:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10a      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800501a:	4b98      	ldr	r3, [pc, #608]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800501c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005028:	4a94      	ldr	r2, [pc, #592]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800502a:	430b      	orrs	r3, r1
 800502c:	6513      	str	r3, [r2, #80]	; 0x50
 800502e:	e003      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005030:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005034:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005044:	f04f 0900 	mov.w	r9, #0
 8005048:	ea58 0309 	orrs.w	r3, r8, r9
 800504c:	d047      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800504e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005054:	2b04      	cmp	r3, #4
 8005056:	d82a      	bhi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	08005075 	.word	0x08005075
 8005064:	08005083 	.word	0x08005083
 8005068:	08005099 	.word	0x08005099
 800506c:	080050b7 	.word	0x080050b7
 8005070:	080050b7 	.word	0x080050b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005074:	4b81      	ldr	r3, [pc, #516]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	4a80      	ldr	r2, [pc, #512]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800507a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800507e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005080:	e01a      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005086:	3308      	adds	r3, #8
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f002 f9f6 	bl	800747c <RCCEx_PLL2_Config>
 8005090:	4603      	mov	r3, r0
 8005092:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005096:	e00f      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800509c:	3328      	adds	r3, #40	; 0x28
 800509e:	2100      	movs	r1, #0
 80050a0:	4618      	mov	r0, r3
 80050a2:	f002 fa9d 	bl	80075e0 <RCCEx_PLL3_Config>
 80050a6:	4603      	mov	r3, r0
 80050a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050ac:	e004      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80050b4:	e000      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80050b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050c0:	4b6e      	ldr	r3, [pc, #440]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c4:	f023 0107 	bic.w	r1, r3, #7
 80050c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ce:	4a6b      	ldr	r2, [pc, #428]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050d0:	430b      	orrs	r3, r1
 80050d2:	6513      	str	r3, [r2, #80]	; 0x50
 80050d4:	e003      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80050de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80050ea:	f04f 0b00 	mov.w	fp, #0
 80050ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80050f2:	d05b      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80050f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050fc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005100:	d03b      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005102:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005106:	d834      	bhi.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005108:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800510c:	d037      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800510e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005112:	d82e      	bhi.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005114:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005118:	d033      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800511a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800511e:	d828      	bhi.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005124:	d01a      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800512a:	d822      	bhi.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005130:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005134:	d007      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005136:	e01c      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005138:	4b50      	ldr	r3, [pc, #320]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	4a4f      	ldr	r2, [pc, #316]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800513e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005142:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005144:	e01e      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514a:	3308      	adds	r3, #8
 800514c:	2100      	movs	r1, #0
 800514e:	4618      	mov	r0, r3
 8005150:	f002 f994 	bl	800747c <RCCEx_PLL2_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800515a:	e013      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800515c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005160:	3328      	adds	r3, #40	; 0x28
 8005162:	2100      	movs	r1, #0
 8005164:	4618      	mov	r0, r3
 8005166:	f002 fa3b 	bl	80075e0 <RCCEx_PLL3_Config>
 800516a:	4603      	mov	r3, r0
 800516c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005170:	e008      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005178:	e004      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800517a:	bf00      	nop
 800517c:	e002      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800517e:	bf00      	nop
 8005180:	e000      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005184:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10b      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800518c:	4b3b      	ldr	r3, [pc, #236]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800518e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005190:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005198:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800519c:	4a37      	ldr	r2, [pc, #220]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800519e:	430b      	orrs	r3, r1
 80051a0:	6593      	str	r3, [r2, #88]	; 0x58
 80051a2:	e003      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80051ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80051b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051bc:	2300      	movs	r3, #0
 80051be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80051c6:	460b      	mov	r3, r1
 80051c8:	4313      	orrs	r3, r2
 80051ca:	d05d      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80051cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051d4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80051d8:	d03b      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80051da:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80051de:	d834      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80051e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051e4:	d037      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80051e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051ea:	d82e      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80051ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051f0:	d033      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80051f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051f6:	d828      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80051f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051fc:	d01a      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80051fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005202:	d822      	bhi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800520c:	d007      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800520e:	e01c      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005210:	4b1a      	ldr	r3, [pc, #104]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	4a19      	ldr	r2, [pc, #100]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800521a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800521c:	e01e      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800521e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005222:	3308      	adds	r3, #8
 8005224:	2100      	movs	r1, #0
 8005226:	4618      	mov	r0, r3
 8005228:	f002 f928 	bl	800747c <RCCEx_PLL2_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005232:	e013      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005238:	3328      	adds	r3, #40	; 0x28
 800523a:	2100      	movs	r1, #0
 800523c:	4618      	mov	r0, r3
 800523e:	f002 f9cf 	bl	80075e0 <RCCEx_PLL3_Config>
 8005242:	4603      	mov	r3, r0
 8005244:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005248:	e008      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005250:	e004      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005252:	bf00      	nop
 8005254:	e002      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005256:	bf00      	nop
 8005258:	e000      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800525a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800525c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10d      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005268:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800526c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005270:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005274:	4a01      	ldr	r2, [pc, #4]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005276:	430b      	orrs	r3, r1
 8005278:	6593      	str	r3, [r2, #88]	; 0x58
 800527a:	e005      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800527c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005280:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005284:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005294:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005298:	2300      	movs	r3, #0
 800529a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800529e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4313      	orrs	r3, r2
 80052a6:	d03a      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80052a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ae:	2b30      	cmp	r3, #48	; 0x30
 80052b0:	d01f      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80052b2:	2b30      	cmp	r3, #48	; 0x30
 80052b4:	d819      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x372>
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d00c      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	d815      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x372>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d019      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80052c2:	2b10      	cmp	r3, #16
 80052c4:	d111      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c6:	4baa      	ldr	r3, [pc, #680]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	4aa9      	ldr	r2, [pc, #676]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80052d2:	e011      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d8:	3308      	adds	r3, #8
 80052da:	2102      	movs	r1, #2
 80052dc:	4618      	mov	r0, r3
 80052de:	f002 f8cd 	bl	800747c <RCCEx_PLL2_Config>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80052e8:	e006      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80052f0:	e002      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80052f2:	bf00      	nop
 80052f4:	e000      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80052f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005300:	4b9b      	ldr	r3, [pc, #620]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005304:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530e:	4a98      	ldr	r2, [pc, #608]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005310:	430b      	orrs	r3, r1
 8005312:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005314:	e003      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005316:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800531a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800531e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800532a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800532e:	2300      	movs	r3, #0
 8005330:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005334:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005338:	460b      	mov	r3, r1
 800533a:	4313      	orrs	r3, r2
 800533c:	d051      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800533e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005348:	d035      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800534a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800534e:	d82e      	bhi.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005350:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005354:	d031      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005356:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800535a:	d828      	bhi.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x436>
 800535c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005360:	d01a      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005366:	d822      	bhi.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800536c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005370:	d007      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005372:	e01c      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005374:	4b7e      	ldr	r3, [pc, #504]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	4a7d      	ldr	r2, [pc, #500]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800537a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800537e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005380:	e01c      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005386:	3308      	adds	r3, #8
 8005388:	2100      	movs	r1, #0
 800538a:	4618      	mov	r0, r3
 800538c:	f002 f876 	bl	800747c <RCCEx_PLL2_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005396:	e011      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539c:	3328      	adds	r3, #40	; 0x28
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f002 f91d 	bl	80075e0 <RCCEx_PLL3_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053ac:	e006      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80053b4:	e002      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80053b6:	bf00      	nop
 80053b8:	e000      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80053ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80053c4:	4b6a      	ldr	r3, [pc, #424]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80053cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d2:	4a67      	ldr	r2, [pc, #412]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053d4:	430b      	orrs	r3, r1
 80053d6:	6513      	str	r3, [r2, #80]	; 0x50
 80053d8:	e003      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80053e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80053ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053f2:	2300      	movs	r3, #0
 80053f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053f8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4313      	orrs	r3, r2
 8005400:	d053      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800540c:	d033      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800540e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005412:	d82c      	bhi.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005414:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005418:	d02f      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800541a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800541e:	d826      	bhi.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005420:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005424:	d02b      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005426:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800542a:	d820      	bhi.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800542c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005430:	d012      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005436:	d81a      	bhi.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005438:	2b00      	cmp	r3, #0
 800543a:	d022      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800543c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005440:	d115      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005446:	3308      	adds	r3, #8
 8005448:	2101      	movs	r1, #1
 800544a:	4618      	mov	r0, r3
 800544c:	f002 f816 	bl	800747c <RCCEx_PLL2_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005456:	e015      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545c:	3328      	adds	r3, #40	; 0x28
 800545e:	2101      	movs	r1, #1
 8005460:	4618      	mov	r0, r3
 8005462:	f002 f8bd 	bl	80075e0 <RCCEx_PLL3_Config>
 8005466:	4603      	mov	r3, r0
 8005468:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800546c:	e00a      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005474:	e006      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005476:	bf00      	nop
 8005478:	e004      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800547a:	bf00      	nop
 800547c:	e002      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800547e:	bf00      	nop
 8005480:	e000      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005484:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800548c:	4b38      	ldr	r3, [pc, #224]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800549a:	4a35      	ldr	r2, [pc, #212]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800549c:	430b      	orrs	r3, r1
 800549e:	6513      	str	r3, [r2, #80]	; 0x50
 80054a0:	e003      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80054aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80054b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054ba:	2300      	movs	r3, #0
 80054bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054c0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054c4:	460b      	mov	r3, r1
 80054c6:	4313      	orrs	r3, r2
 80054c8:	d058      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80054ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054d6:	d033      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80054d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054dc:	d82c      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80054de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e2:	d02f      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e8:	d826      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80054ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054ee:	d02b      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80054f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054f4:	d820      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80054f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054fa:	d012      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80054fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005500:	d81a      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005502:	2b00      	cmp	r3, #0
 8005504:	d022      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800550a:	d115      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800550c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005510:	3308      	adds	r3, #8
 8005512:	2101      	movs	r1, #1
 8005514:	4618      	mov	r0, r3
 8005516:	f001 ffb1 	bl	800747c <RCCEx_PLL2_Config>
 800551a:	4603      	mov	r3, r0
 800551c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005520:	e015      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005526:	3328      	adds	r3, #40	; 0x28
 8005528:	2101      	movs	r1, #1
 800552a:	4618      	mov	r0, r3
 800552c:	f002 f858 	bl	80075e0 <RCCEx_PLL3_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005536:	e00a      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800553e:	e006      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005540:	bf00      	nop
 8005542:	e004      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005544:	bf00      	nop
 8005546:	e002      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005548:	bf00      	nop
 800554a:	e000      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800554c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800554e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10e      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005556:	4b06      	ldr	r3, [pc, #24]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800555e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005562:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005566:	4a02      	ldr	r2, [pc, #8]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005568:	430b      	orrs	r3, r1
 800556a:	6593      	str	r3, [r2, #88]	; 0x58
 800556c:	e006      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800556e:	bf00      	nop
 8005570:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005574:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005578:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800557c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005584:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005588:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800558c:	2300      	movs	r3, #0
 800558e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005592:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005596:	460b      	mov	r3, r1
 8005598:	4313      	orrs	r3, r2
 800559a:	d037      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800559c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a6:	d00e      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80055a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ac:	d816      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x664>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d018      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80055b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055b6:	d111      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055b8:	4bc4      	ldr	r3, [pc, #784]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	4ac3      	ldr	r2, [pc, #780]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80055c4:	e00f      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ca:	3308      	adds	r3, #8
 80055cc:	2101      	movs	r1, #1
 80055ce:	4618      	mov	r0, r3
 80055d0:	f001 ff54 	bl	800747c <RCCEx_PLL2_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80055da:	e004      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80055e2:	e000      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80055e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055ee:	4bb7      	ldr	r3, [pc, #732]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80055f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fc:	4ab3      	ldr	r2, [pc, #716]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055fe:	430b      	orrs	r3, r1
 8005600:	6513      	str	r3, [r2, #80]	; 0x50
 8005602:	e003      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005604:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005608:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800560c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005618:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800561c:	2300      	movs	r3, #0
 800561e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005622:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005626:	460b      	mov	r3, r1
 8005628:	4313      	orrs	r3, r2
 800562a:	d039      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800562c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005632:	2b03      	cmp	r3, #3
 8005634:	d81c      	bhi.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005636:	a201      	add	r2, pc, #4	; (adr r2, 800563c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	08005679 	.word	0x08005679
 8005640:	0800564d 	.word	0x0800564d
 8005644:	0800565b 	.word	0x0800565b
 8005648:	08005679 	.word	0x08005679
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564c:	4b9f      	ldr	r3, [pc, #636]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	4a9e      	ldr	r2, [pc, #632]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005656:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005658:	e00f      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800565a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800565e:	3308      	adds	r3, #8
 8005660:	2102      	movs	r1, #2
 8005662:	4618      	mov	r0, r3
 8005664:	f001 ff0a 	bl	800747c <RCCEx_PLL2_Config>
 8005668:	4603      	mov	r3, r0
 800566a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800566e:	e004      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005676:	e000      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800567a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005682:	4b92      	ldr	r3, [pc, #584]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005686:	f023 0103 	bic.w	r1, r3, #3
 800568a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005690:	4a8e      	ldr	r2, [pc, #568]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005692:	430b      	orrs	r3, r1
 8005694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005696:	e003      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005698:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800569c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80056ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056b0:	2300      	movs	r3, #0
 80056b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4313      	orrs	r3, r2
 80056be:	f000 8099 	beq.w	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056c2:	4b83      	ldr	r3, [pc, #524]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a82      	ldr	r2, [pc, #520]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80056c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056ce:	f7fc f8e7 	bl	80018a0 <HAL_GetTick>
 80056d2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056d6:	e00b      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d8:	f7fc f8e2 	bl	80018a0 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b64      	cmp	r3, #100	; 0x64
 80056e6:	d903      	bls.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80056ee:	e005      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056f0:	4b77      	ldr	r3, [pc, #476]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0ed      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80056fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005700:	2b00      	cmp	r3, #0
 8005702:	d173      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005704:	4b71      	ldr	r3, [pc, #452]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005706:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800570c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005710:	4053      	eors	r3, r2
 8005712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005716:	2b00      	cmp	r3, #0
 8005718:	d015      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800571a:	4b6c      	ldr	r3, [pc, #432]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800571c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005722:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005726:	4b69      	ldr	r3, [pc, #420]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572a:	4a68      	ldr	r2, [pc, #416]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800572c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005730:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005732:	4b66      	ldr	r3, [pc, #408]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	4a65      	ldr	r2, [pc, #404]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800573e:	4a63      	ldr	r2, [pc, #396]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005744:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800574a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800574e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005752:	d118      	bne.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7fc f8a4 	bl	80018a0 <HAL_GetTick>
 8005758:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800575c:	e00d      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800575e:	f7fc f89f 	bl	80018a0 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005768:	1ad2      	subs	r2, r2, r3
 800576a:	f241 3388 	movw	r3, #5000	; 0x1388
 800576e:	429a      	cmp	r2, r3
 8005770:	d903      	bls.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8005778:	e005      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800577a:	4b54      	ldr	r3, [pc, #336]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0eb      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005786:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800578a:	2b00      	cmp	r3, #0
 800578c:	d129      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800578e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005792:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800579e:	d10e      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x846>
 80057a0:	4b4a      	ldr	r3, [pc, #296]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80057a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057b0:	091a      	lsrs	r2, r3, #4
 80057b2:	4b48      	ldr	r3, [pc, #288]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	4a45      	ldr	r2, [pc, #276]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057b8:	430b      	orrs	r3, r1
 80057ba:	6113      	str	r3, [r2, #16]
 80057bc:	e005      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x852>
 80057be:	4b43      	ldr	r3, [pc, #268]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	4a42      	ldr	r2, [pc, #264]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80057c8:	6113      	str	r3, [r2, #16]
 80057ca:	4b40      	ldr	r3, [pc, #256]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80057ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057da:	4a3c      	ldr	r2, [pc, #240]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057dc:	430b      	orrs	r3, r1
 80057de:	6713      	str	r3, [r2, #112]	; 0x70
 80057e0:	e008      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80057ea:	e003      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fc:	f002 0301 	and.w	r3, r2, #1
 8005800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005804:	2300      	movs	r3, #0
 8005806:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800580a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800580e:	460b      	mov	r3, r1
 8005810:	4313      	orrs	r3, r2
 8005812:	f000 808f 	beq.w	8005934 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800581c:	2b28      	cmp	r3, #40	; 0x28
 800581e:	d871      	bhi.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005820:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005826:	bf00      	nop
 8005828:	0800590d 	.word	0x0800590d
 800582c:	08005905 	.word	0x08005905
 8005830:	08005905 	.word	0x08005905
 8005834:	08005905 	.word	0x08005905
 8005838:	08005905 	.word	0x08005905
 800583c:	08005905 	.word	0x08005905
 8005840:	08005905 	.word	0x08005905
 8005844:	08005905 	.word	0x08005905
 8005848:	080058d9 	.word	0x080058d9
 800584c:	08005905 	.word	0x08005905
 8005850:	08005905 	.word	0x08005905
 8005854:	08005905 	.word	0x08005905
 8005858:	08005905 	.word	0x08005905
 800585c:	08005905 	.word	0x08005905
 8005860:	08005905 	.word	0x08005905
 8005864:	08005905 	.word	0x08005905
 8005868:	080058ef 	.word	0x080058ef
 800586c:	08005905 	.word	0x08005905
 8005870:	08005905 	.word	0x08005905
 8005874:	08005905 	.word	0x08005905
 8005878:	08005905 	.word	0x08005905
 800587c:	08005905 	.word	0x08005905
 8005880:	08005905 	.word	0x08005905
 8005884:	08005905 	.word	0x08005905
 8005888:	0800590d 	.word	0x0800590d
 800588c:	08005905 	.word	0x08005905
 8005890:	08005905 	.word	0x08005905
 8005894:	08005905 	.word	0x08005905
 8005898:	08005905 	.word	0x08005905
 800589c:	08005905 	.word	0x08005905
 80058a0:	08005905 	.word	0x08005905
 80058a4:	08005905 	.word	0x08005905
 80058a8:	0800590d 	.word	0x0800590d
 80058ac:	08005905 	.word	0x08005905
 80058b0:	08005905 	.word	0x08005905
 80058b4:	08005905 	.word	0x08005905
 80058b8:	08005905 	.word	0x08005905
 80058bc:	08005905 	.word	0x08005905
 80058c0:	08005905 	.word	0x08005905
 80058c4:	08005905 	.word	0x08005905
 80058c8:	0800590d 	.word	0x0800590d
 80058cc:	58024400 	.word	0x58024400
 80058d0:	58024800 	.word	0x58024800
 80058d4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058dc:	3308      	adds	r3, #8
 80058de:	2101      	movs	r1, #1
 80058e0:	4618      	mov	r0, r3
 80058e2:	f001 fdcb 	bl	800747c <RCCEx_PLL2_Config>
 80058e6:	4603      	mov	r3, r0
 80058e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80058ec:	e00f      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f2:	3328      	adds	r3, #40	; 0x28
 80058f4:	2101      	movs	r1, #1
 80058f6:	4618      	mov	r0, r3
 80058f8:	f001 fe72 	bl	80075e0 <RCCEx_PLL3_Config>
 80058fc:	4603      	mov	r3, r0
 80058fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005902:	e004      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800590a:	e000      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800590c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800590e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005916:	4bbf      	ldr	r3, [pc, #764]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800591e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005924:	4abb      	ldr	r2, [pc, #748]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005926:	430b      	orrs	r3, r1
 8005928:	6553      	str	r3, [r2, #84]	; 0x54
 800592a:	e003      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005930:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f002 0302 	and.w	r3, r2, #2
 8005940:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005944:	2300      	movs	r3, #0
 8005946:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800594a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800594e:	460b      	mov	r3, r1
 8005950:	4313      	orrs	r3, r2
 8005952:	d041      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800595a:	2b05      	cmp	r3, #5
 800595c:	d824      	bhi.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800595e:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	080059b1 	.word	0x080059b1
 8005968:	0800597d 	.word	0x0800597d
 800596c:	08005993 	.word	0x08005993
 8005970:	080059b1 	.word	0x080059b1
 8005974:	080059b1 	.word	0x080059b1
 8005978:	080059b1 	.word	0x080059b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800597c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005980:	3308      	adds	r3, #8
 8005982:	2101      	movs	r1, #1
 8005984:	4618      	mov	r0, r3
 8005986:	f001 fd79 	bl	800747c <RCCEx_PLL2_Config>
 800598a:	4603      	mov	r3, r0
 800598c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005990:	e00f      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005996:	3328      	adds	r3, #40	; 0x28
 8005998:	2101      	movs	r1, #1
 800599a:	4618      	mov	r0, r3
 800599c:	f001 fe20 	bl	80075e0 <RCCEx_PLL3_Config>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80059a6:	e004      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80059ae:	e000      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80059b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80059ba:	4b96      	ldr	r3, [pc, #600]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80059bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059be:	f023 0107 	bic.w	r1, r3, #7
 80059c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c8:	4a92      	ldr	r2, [pc, #584]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80059ca:	430b      	orrs	r3, r1
 80059cc:	6553      	str	r3, [r2, #84]	; 0x54
 80059ce:	e003      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	f002 0304 	and.w	r3, r2, #4
 80059e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059e8:	2300      	movs	r3, #0
 80059ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059ee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80059f2:	460b      	mov	r3, r1
 80059f4:	4313      	orrs	r3, r2
 80059f6:	d044      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80059f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a00:	2b05      	cmp	r3, #5
 8005a02:	d825      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005a04:	a201      	add	r2, pc, #4	; (adr r2, 8005a0c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0a:	bf00      	nop
 8005a0c:	08005a59 	.word	0x08005a59
 8005a10:	08005a25 	.word	0x08005a25
 8005a14:	08005a3b 	.word	0x08005a3b
 8005a18:	08005a59 	.word	0x08005a59
 8005a1c:	08005a59 	.word	0x08005a59
 8005a20:	08005a59 	.word	0x08005a59
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a28:	3308      	adds	r3, #8
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f001 fd25 	bl	800747c <RCCEx_PLL2_Config>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005a38:	e00f      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a3e:	3328      	adds	r3, #40	; 0x28
 8005a40:	2101      	movs	r1, #1
 8005a42:	4618      	mov	r0, r3
 8005a44:	f001 fdcc 	bl	80075e0 <RCCEx_PLL3_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005a4e:	e004      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005a56:	e000      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10b      	bne.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a62:	4b6c      	ldr	r3, [pc, #432]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a66:	f023 0107 	bic.w	r1, r3, #7
 8005a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a72:	4a68      	ldr	r2, [pc, #416]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a74:	430b      	orrs	r3, r1
 8005a76:	6593      	str	r3, [r2, #88]	; 0x58
 8005a78:	e003      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8a:	f002 0320 	and.w	r3, r2, #32
 8005a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a92:	2300      	movs	r3, #0
 8005a94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a98:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	d055      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aae:	d033      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ab4:	d82c      	bhi.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aba:	d02f      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac0:	d826      	bhi.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005ac2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ac6:	d02b      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005ac8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005acc:	d820      	bhi.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005ace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad2:	d012      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad8:	d81a      	bhi.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d022      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005ade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ae2:	d115      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ae8:	3308      	adds	r3, #8
 8005aea:	2100      	movs	r1, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 fcc5 	bl	800747c <RCCEx_PLL2_Config>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005af8:	e015      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005afe:	3328      	adds	r3, #40	; 0x28
 8005b00:	2102      	movs	r1, #2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f001 fd6c 	bl	80075e0 <RCCEx_PLL3_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b0e:	e00a      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005b16:	e006      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005b18:	bf00      	nop
 8005b1a:	e004      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005b1c:	bf00      	nop
 8005b1e:	e002      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005b20:	bf00      	nop
 8005b22:	e000      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10b      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b2e:	4b39      	ldr	r3, [pc, #228]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b32:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b3e:	4a35      	ldr	r2, [pc, #212]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b40:	430b      	orrs	r3, r1
 8005b42:	6553      	str	r3, [r2, #84]	; 0x54
 8005b44:	e003      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b4a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005b5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b64:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	d058      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b7a:	d033      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005b7c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b80:	d82c      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b86:	d02f      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8c:	d826      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005b8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b92:	d02b      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005b94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b98:	d820      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9e:	d012      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba4:	d81a      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d022      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bae:	d115      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb4:	3308      	adds	r3, #8
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f001 fc5f 	bl	800747c <RCCEx_PLL2_Config>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005bc4:	e015      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bca:	3328      	adds	r3, #40	; 0x28
 8005bcc:	2102      	movs	r1, #2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 fd06 	bl	80075e0 <RCCEx_PLL3_Config>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005bda:	e00a      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005be2:	e006      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005be4:	bf00      	nop
 8005be6:	e004      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005be8:	bf00      	nop
 8005bea:	e002      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005bec:	bf00      	nop
 8005bee:	e000      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10e      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005bfa:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfe:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c0a:	4a02      	ldr	r2, [pc, #8]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8005c10:	e006      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005c12:	bf00      	nop
 8005c14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005c2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c30:	2300      	movs	r3, #0
 8005c32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c36:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	d055      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c48:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c4c:	d033      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005c4e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c52:	d82c      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c58:	d02f      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c5e:	d826      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005c60:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c64:	d02b      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005c66:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c6a:	d820      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c70:	d012      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c76:	d81a      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d022      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c80:	d115      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c86:	3308      	adds	r3, #8
 8005c88:	2100      	movs	r1, #0
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f001 fbf6 	bl	800747c <RCCEx_PLL2_Config>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005c96:	e015      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c9c:	3328      	adds	r3, #40	; 0x28
 8005c9e:	2102      	movs	r1, #2
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f001 fc9d 	bl	80075e0 <RCCEx_PLL3_Config>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005cac:	e00a      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005cb4:	e006      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005cb6:	bf00      	nop
 8005cb8:	e004      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005cba:	bf00      	nop
 8005cbc:	e002      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005cbe:	bf00      	nop
 8005cc0:	e000      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005cc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10b      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005ccc:	4ba0      	ldr	r3, [pc, #640]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cdc:	4a9c      	ldr	r2, [pc, #624]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cde:	430b      	orrs	r3, r1
 8005ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ce2:	e003      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ce8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f002 0308 	and.w	r3, r2, #8
 8005cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005d02:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005d06:	460b      	mov	r3, r1
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	d01e      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d18:	d10c      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d1e:	3328      	adds	r3, #40	; 0x28
 8005d20:	2102      	movs	r1, #2
 8005d22:	4618      	mov	r0, r3
 8005d24:	f001 fc5c 	bl	80075e0 <RCCEx_PLL3_Config>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005d34:	4b86      	ldr	r3, [pc, #536]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d44:	4a82      	ldr	r2, [pc, #520]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d46:	430b      	orrs	r3, r1
 8005d48:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	f002 0310 	and.w	r3, r2, #16
 8005d56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d60:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005d64:	460b      	mov	r3, r1
 8005d66:	4313      	orrs	r3, r2
 8005d68:	d01e      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d76:	d10c      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d7c:	3328      	adds	r3, #40	; 0x28
 8005d7e:	2102      	movs	r1, #2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f001 fc2d 	bl	80075e0 <RCCEx_PLL3_Config>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d92:	4b6f      	ldr	r3, [pc, #444]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005da2:	4a6b      	ldr	r2, [pc, #428]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005da4:	430b      	orrs	r3, r1
 8005da6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005db4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005db6:	2300      	movs	r3, #0
 8005db8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005dba:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	d03e      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005dcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dd0:	d022      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dd6:	d81b      	bhi.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de0:	d00b      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005de2:	e015      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de8:	3308      	adds	r3, #8
 8005dea:	2100      	movs	r1, #0
 8005dec:	4618      	mov	r0, r3
 8005dee:	f001 fb45 	bl	800747c <RCCEx_PLL2_Config>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005df8:	e00f      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfe:	3328      	adds	r3, #40	; 0x28
 8005e00:	2102      	movs	r1, #2
 8005e02:	4618      	mov	r0, r3
 8005e04:	f001 fbec 	bl	80075e0 <RCCEx_PLL3_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e0e:	e004      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005e16:	e000      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10b      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e22:	4b4b      	ldr	r3, [pc, #300]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e26:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e32:	4a47      	ldr	r2, [pc, #284]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e34:	430b      	orrs	r3, r1
 8005e36:	6593      	str	r3, [r2, #88]	; 0x58
 8005e38:	e003      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e3e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8005e50:	2300      	movs	r3, #0
 8005e52:	677b      	str	r3, [r7, #116]	; 0x74
 8005e54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	d03b      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e6a:	d01f      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005e6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e70:	d818      	bhi.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e76:	d003      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005e78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e7c:	d007      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005e7e:	e011      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e80:	4b33      	ldr	r3, [pc, #204]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	4a32      	ldr	r2, [pc, #200]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005e8c:	e00f      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e92:	3328      	adds	r3, #40	; 0x28
 8005e94:	2101      	movs	r1, #1
 8005e96:	4618      	mov	r0, r3
 8005e98:	f001 fba2 	bl	80075e0 <RCCEx_PLL3_Config>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ea2:	e004      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005eaa:	e000      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005eb6:	4b26      	ldr	r3, [pc, #152]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec6:	4a22      	ldr	r2, [pc, #136]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ec8:	430b      	orrs	r3, r1
 8005eca:	6553      	str	r3, [r2, #84]	; 0x54
 8005ecc:	e003      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ece:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ed2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005ee2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ee8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005eec:	460b      	mov	r3, r1
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	d034      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f00:	d007      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005f02:	e011      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f04:	4b12      	ldr	r3, [pc, #72]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	4a11      	ldr	r2, [pc, #68]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f10:	e00e      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f16:	3308      	adds	r3, #8
 8005f18:	2102      	movs	r1, #2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 faae 	bl	800747c <RCCEx_PLL2_Config>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f26:	e003      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10d      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005f38:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f46:	4a02      	ldr	r2, [pc, #8]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f4c:	e006      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005f4e:	bf00      	nop
 8005f50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005f68:	663b      	str	r3, [r7, #96]	; 0x60
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	667b      	str	r3, [r7, #100]	; 0x64
 8005f6e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005f72:	460b      	mov	r3, r1
 8005f74:	4313      	orrs	r3, r2
 8005f76:	d00c      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7c:	3328      	adds	r3, #40	; 0x28
 8005f7e:	2102      	movs	r1, #2
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 fb2d 	bl	80075e0 <RCCEx_PLL3_Config>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005f9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fa4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4313      	orrs	r3, r2
 8005fac:	d036      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fb8:	d018      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fbe:	d811      	bhi.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc4:	d014      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fca:	d80b      	bhi.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d011      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd4:	d106      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fd6:	4bb7      	ldr	r3, [pc, #732]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	4ab6      	ldr	r2, [pc, #728]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005fea:	e004      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005fec:	bf00      	nop
 8005fee:	e002      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005ff0:	bf00      	nop
 8005ff2:	e000      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10a      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ffe:	4bad      	ldr	r3, [pc, #692]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006002:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800600c:	4aa9      	ldr	r2, [pc, #676]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800600e:	430b      	orrs	r3, r1
 8006010:	6553      	str	r3, [r2, #84]	; 0x54
 8006012:	e003      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006014:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006018:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006024:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006028:	653b      	str	r3, [r7, #80]	; 0x50
 800602a:	2300      	movs	r3, #0
 800602c:	657b      	str	r3, [r7, #84]	; 0x54
 800602e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006032:	460b      	mov	r3, r1
 8006034:	4313      	orrs	r3, r2
 8006036:	d009      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006038:	4b9e      	ldr	r3, [pc, #632]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800603a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006046:	4a9b      	ldr	r2, [pc, #620]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006048:	430b      	orrs	r3, r1
 800604a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800604c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006058:	64bb      	str	r3, [r7, #72]	; 0x48
 800605a:	2300      	movs	r3, #0
 800605c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800605e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006062:	460b      	mov	r3, r1
 8006064:	4313      	orrs	r3, r2
 8006066:	d009      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006068:	4b92      	ldr	r3, [pc, #584]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800606a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006076:	4a8f      	ldr	r2, [pc, #572]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006078:	430b      	orrs	r3, r1
 800607a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006088:	643b      	str	r3, [r7, #64]	; 0x40
 800608a:	2300      	movs	r3, #0
 800608c:	647b      	str	r3, [r7, #68]	; 0x44
 800608e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006092:	460b      	mov	r3, r1
 8006094:	4313      	orrs	r3, r2
 8006096:	d00e      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006098:	4b86      	ldr	r3, [pc, #536]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	4a85      	ldr	r2, [pc, #532]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800609e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060a2:	6113      	str	r3, [r2, #16]
 80060a4:	4b83      	ldr	r3, [pc, #524]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060a6:	6919      	ldr	r1, [r3, #16]
 80060a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80060b0:	4a80      	ldr	r2, [pc, #512]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060b2:	430b      	orrs	r3, r1
 80060b4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80060b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060be:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80060c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80060c4:	2300      	movs	r3, #0
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80060cc:	460b      	mov	r3, r1
 80060ce:	4313      	orrs	r3, r2
 80060d0:	d009      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80060d2:	4b78      	ldr	r3, [pc, #480]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80060da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e0:	4a74      	ldr	r2, [pc, #464]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060e2:	430b      	orrs	r3, r1
 80060e4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80060f2:	633b      	str	r3, [r7, #48]	; 0x30
 80060f4:	2300      	movs	r3, #0
 80060f6:	637b      	str	r3, [r7, #52]	; 0x34
 80060f8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80060fc:	460b      	mov	r3, r1
 80060fe:	4313      	orrs	r3, r2
 8006100:	d00a      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006102:	4b6c      	ldr	r3, [pc, #432]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006106:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800610a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800610e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006112:	4a68      	ldr	r2, [pc, #416]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006114:	430b      	orrs	r3, r1
 8006116:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	2100      	movs	r1, #0
 8006122:	62b9      	str	r1, [r7, #40]	; 0x28
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800612a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800612e:	460b      	mov	r3, r1
 8006130:	4313      	orrs	r3, r2
 8006132:	d011      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006138:	3308      	adds	r3, #8
 800613a:	2100      	movs	r1, #0
 800613c:	4618      	mov	r0, r3
 800613e:	f001 f99d 	bl	800747c <RCCEx_PLL2_Config>
 8006142:	4603      	mov	r3, r0
 8006144:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006148:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006150:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006154:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	2100      	movs	r1, #0
 8006162:	6239      	str	r1, [r7, #32]
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	627b      	str	r3, [r7, #36]	; 0x24
 800616a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800616e:	460b      	mov	r3, r1
 8006170:	4313      	orrs	r3, r2
 8006172:	d011      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006178:	3308      	adds	r3, #8
 800617a:	2101      	movs	r1, #1
 800617c:	4618      	mov	r0, r3
 800617e:	f001 f97d 	bl	800747c <RCCEx_PLL2_Config>
 8006182:	4603      	mov	r3, r0
 8006184:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006188:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006190:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006194:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	2100      	movs	r1, #0
 80061a2:	61b9      	str	r1, [r7, #24]
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	61fb      	str	r3, [r7, #28]
 80061aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80061ae:	460b      	mov	r3, r1
 80061b0:	4313      	orrs	r3, r2
 80061b2:	d011      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b8:	3308      	adds	r3, #8
 80061ba:	2102      	movs	r1, #2
 80061bc:	4618      	mov	r0, r3
 80061be:	f001 f95d 	bl	800747c <RCCEx_PLL2_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80061c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80061d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	2100      	movs	r1, #0
 80061e2:	6139      	str	r1, [r7, #16]
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80061ee:	460b      	mov	r3, r1
 80061f0:	4313      	orrs	r3, r2
 80061f2:	d011      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f8:	3328      	adds	r3, #40	; 0x28
 80061fa:	2100      	movs	r1, #0
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 f9ef 	bl	80075e0 <RCCEx_PLL3_Config>
 8006202:	4603      	mov	r3, r0
 8006204:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006208:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006210:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006214:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	2100      	movs	r1, #0
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	f003 0310 	and.w	r3, r3, #16
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800622e:	460b      	mov	r3, r1
 8006230:	4313      	orrs	r3, r2
 8006232:	d011      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006238:	3328      	adds	r3, #40	; 0x28
 800623a:	2101      	movs	r1, #1
 800623c:	4618      	mov	r0, r3
 800623e:	f001 f9cf 	bl	80075e0 <RCCEx_PLL3_Config>
 8006242:	4603      	mov	r3, r0
 8006244:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006248:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006250:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006254:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	2100      	movs	r1, #0
 8006262:	6039      	str	r1, [r7, #0]
 8006264:	f003 0320 	and.w	r3, r3, #32
 8006268:	607b      	str	r3, [r7, #4]
 800626a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800626e:	460b      	mov	r3, r1
 8006270:	4313      	orrs	r3, r2
 8006272:	d011      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006278:	3328      	adds	r3, #40	; 0x28
 800627a:	2102      	movs	r1, #2
 800627c:	4618      	mov	r0, r3
 800627e:	f001 f9af 	bl	80075e0 <RCCEx_PLL3_Config>
 8006282:	4603      	mov	r3, r0
 8006284:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006288:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006290:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006294:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8006298:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	e000      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80062ac:	46bd      	mov	sp, r7
 80062ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062b2:	bf00      	nop
 80062b4:	58024400 	.word	0x58024400

080062b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b090      	sub	sp, #64	; 0x40
 80062bc:	af00      	add	r7, sp, #0
 80062be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80062c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80062ca:	430b      	orrs	r3, r1
 80062cc:	f040 8094 	bne.w	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80062d0:	4b9b      	ldr	r3, [pc, #620]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	2b04      	cmp	r3, #4
 80062de:	f200 8087 	bhi.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80062e2:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80062e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e8:	080062fd 	.word	0x080062fd
 80062ec:	08006325 	.word	0x08006325
 80062f0:	0800634d 	.word	0x0800634d
 80062f4:	080063e9 	.word	0x080063e9
 80062f8:	08006375 	.word	0x08006375
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062fc:	4b90      	ldr	r3, [pc, #576]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006304:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006308:	d108      	bne.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800630a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800630e:	4618      	mov	r0, r3
 8006310:	f000 ff62 	bl	80071d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006318:	f000 bc93 	b.w	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800631c:	2300      	movs	r3, #0
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006320:	f000 bc8f 	b.w	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006324:	4b86      	ldr	r3, [pc, #536]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800632c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006330:	d108      	bne.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006332:	f107 0318 	add.w	r3, r7, #24
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fca6 	bl	8006c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006340:	f000 bc7f 	b.w	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006344:	2300      	movs	r3, #0
 8006346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006348:	f000 bc7b 	b.w	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800634c:	4b7c      	ldr	r3, [pc, #496]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006358:	d108      	bne.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800635a:	f107 030c 	add.w	r3, r7, #12
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fde6 	bl	8006f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006368:	f000 bc6b 	b.w	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006370:	f000 bc67 	b.w	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006374:	4b72      	ldr	r3, [pc, #456]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006378:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800637c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800637e:	4b70      	ldr	r3, [pc, #448]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b04      	cmp	r3, #4
 8006388:	d10c      	bne.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800638a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638c:	2b00      	cmp	r3, #0
 800638e:	d109      	bne.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006390:	4b6b      	ldr	r3, [pc, #428]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	08db      	lsrs	r3, r3, #3
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	4a6a      	ldr	r2, [pc, #424]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800639c:	fa22 f303 	lsr.w	r3, r2, r3
 80063a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063a2:	e01f      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063a4:	4b66      	ldr	r3, [pc, #408]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b0:	d106      	bne.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80063b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063b8:	d102      	bne.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063ba:	4b63      	ldr	r3, [pc, #396]	; (8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80063bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063be:	e011      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063c0:	4b5f      	ldr	r3, [pc, #380]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063cc:	d106      	bne.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80063ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063d4:	d102      	bne.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063d6:	4b5d      	ldr	r3, [pc, #372]	; (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063da:	e003      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80063e0:	f000 bc2f 	b.w	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80063e4:	f000 bc2d 	b.w	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80063e8:	4b59      	ldr	r3, [pc, #356]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80063ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063ec:	f000 bc29 	b.w	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80063f0:	2300      	movs	r3, #0
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063f4:	f000 bc25 	b.w	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80063f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063fc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006400:	430b      	orrs	r3, r1
 8006402:	f040 80a7 	bne.w	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006406:	4b4e      	ldr	r3, [pc, #312]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800640e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006416:	d054      	beq.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800641e:	f200 808b 	bhi.w	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006428:	f000 8083 	beq.w	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006432:	f200 8081 	bhi.w	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800643c:	d02f      	beq.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006444:	d878      	bhi.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006452:	d012      	beq.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8006454:	e070      	b.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006456:	4b3a      	ldr	r3, [pc, #232]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006462:	d107      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006468:	4618      	mov	r0, r3
 800646a:	f000 feb5 	bl	80071d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006472:	e3e6      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006474:	2300      	movs	r3, #0
 8006476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006478:	e3e3      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800647a:	4b31      	ldr	r3, [pc, #196]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006486:	d107      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006488:	f107 0318 	add.w	r3, r7, #24
 800648c:	4618      	mov	r0, r3
 800648e:	f000 fbfb 	bl	8006c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006496:	e3d4      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006498:	2300      	movs	r3, #0
 800649a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800649c:	e3d1      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800649e:	4b28      	ldr	r3, [pc, #160]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064aa:	d107      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064ac:	f107 030c 	add.w	r3, r7, #12
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 fd3d 	bl	8006f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064ba:	e3c2      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064c0:	e3bf      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064c2:	4b1f      	ldr	r3, [pc, #124]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80064c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064cc:	4b1c      	ldr	r3, [pc, #112]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d10c      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80064d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064de:	4b18      	ldr	r3, [pc, #96]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	08db      	lsrs	r3, r3, #3
 80064e4:	f003 0303 	and.w	r3, r3, #3
 80064e8:	4a16      	ldr	r2, [pc, #88]	; (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80064ea:	fa22 f303 	lsr.w	r3, r2, r3
 80064ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064f0:	e01e      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064f2:	4b13      	ldr	r3, [pc, #76]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064fe:	d106      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006506:	d102      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006508:	4b0f      	ldr	r3, [pc, #60]	; (8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800650a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800650c:	e010      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800650e:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800651a:	d106      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800651c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006522:	d102      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006524:	4b09      	ldr	r3, [pc, #36]	; (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006528:	e002      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800652e:	e388      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006530:	e387      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006532:	4b07      	ldr	r3, [pc, #28]	; (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006536:	e384      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800653c:	e381      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800653e:	bf00      	nop
 8006540:	58024400 	.word	0x58024400
 8006544:	03d09000 	.word	0x03d09000
 8006548:	003d0900 	.word	0x003d0900
 800654c:	017d7840 	.word	0x017d7840
 8006550:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006558:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800655c:	430b      	orrs	r3, r1
 800655e:	f040 809c 	bne.w	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006562:	4b9e      	ldr	r3, [pc, #632]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006566:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800656a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006572:	d054      	beq.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800657a:	f200 808b 	bhi.w	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006580:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006584:	f000 8083 	beq.w	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800658e:	f200 8081 	bhi.w	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006598:	d02f      	beq.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065a0:	d878      	bhi.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065ae:	d012      	beq.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80065b0:	e070      	b.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065b2:	4b8a      	ldr	r3, [pc, #552]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065be:	d107      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fe07 	bl	80071d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065ce:	e338      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d4:	e335      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065d6:	4b81      	ldr	r3, [pc, #516]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065e2:	d107      	bne.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065e4:	f107 0318 	add.w	r3, r7, #24
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fb4d 	bl	8006c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065f2:	e326      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065f8:	e323      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065fa:	4b78      	ldr	r3, [pc, #480]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006606:	d107      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006608:	f107 030c 	add.w	r3, r7, #12
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fc8f 	bl	8006f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006616:	e314      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800661c:	e311      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800661e:	4b6f      	ldr	r3, [pc, #444]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006622:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006626:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006628:	4b6c      	ldr	r3, [pc, #432]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b04      	cmp	r3, #4
 8006632:	d10c      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006636:	2b00      	cmp	r3, #0
 8006638:	d109      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800663a:	4b68      	ldr	r3, [pc, #416]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	08db      	lsrs	r3, r3, #3
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	4a66      	ldr	r2, [pc, #408]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006646:	fa22 f303 	lsr.w	r3, r2, r3
 800664a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800664c:	e01e      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800664e:	4b63      	ldr	r3, [pc, #396]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800665a:	d106      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800665c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006662:	d102      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006664:	4b5f      	ldr	r3, [pc, #380]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006668:	e010      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800666a:	4b5c      	ldr	r3, [pc, #368]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006676:	d106      	bne.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8006678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800667e:	d102      	bne.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006680:	4b59      	ldr	r3, [pc, #356]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006684:	e002      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006686:	2300      	movs	r3, #0
 8006688:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800668a:	e2da      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800668c:	e2d9      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800668e:	4b57      	ldr	r3, [pc, #348]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006690:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006692:	e2d6      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006698:	e2d3      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800669a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800669e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80066a2:	430b      	orrs	r3, r1
 80066a4:	f040 80a7 	bne.w	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80066a8:	4b4c      	ldr	r3, [pc, #304]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80066b0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066b8:	d055      	beq.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066c0:	f200 8096 	bhi.w	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80066c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066ca:	f000 8084 	beq.w	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066d4:	f200 808c 	bhi.w	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80066d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066de:	d030      	beq.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80066e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e6:	f200 8083 	bhi.w	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80066ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80066f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f6:	d012      	beq.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80066f8:	e07a      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066fa:	4b38      	ldr	r3, [pc, #224]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006706:	d107      	bne.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800670c:	4618      	mov	r0, r3
 800670e:	f000 fd63 	bl	80071d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006716:	e294      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800671c:	e291      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800671e:	4b2f      	ldr	r3, [pc, #188]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800672a:	d107      	bne.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800672c:	f107 0318 	add.w	r3, r7, #24
 8006730:	4618      	mov	r0, r3
 8006732:	f000 faa9 	bl	8006c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800673a:	e282      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006740:	e27f      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006742:	4b26      	ldr	r3, [pc, #152]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800674a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800674e:	d107      	bne.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006750:	f107 030c 	add.w	r3, r7, #12
 8006754:	4618      	mov	r0, r3
 8006756:	f000 fbeb 	bl	8006f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800675e:	e270      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006764:	e26d      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006766:	4b1d      	ldr	r3, [pc, #116]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800676e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006770:	4b1a      	ldr	r3, [pc, #104]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b04      	cmp	r3, #4
 800677a:	d10c      	bne.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800677c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006782:	4b16      	ldr	r3, [pc, #88]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	08db      	lsrs	r3, r3, #3
 8006788:	f003 0303 	and.w	r3, r3, #3
 800678c:	4a14      	ldr	r2, [pc, #80]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800678e:	fa22 f303 	lsr.w	r3, r2, r3
 8006792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006794:	e01e      	b.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006796:	4b11      	ldr	r3, [pc, #68]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067a2:	d106      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80067a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067aa:	d102      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067ac:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80067ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067b0:	e010      	b.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067b2:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067be:	d106      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80067c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067c6:	d102      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067c8:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067cc:	e002      	b.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80067d2:	e236      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80067d4:	e235      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80067d6:	4b05      	ldr	r3, [pc, #20]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80067d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067da:	e232      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80067dc:	58024400 	.word	0x58024400
 80067e0:	03d09000 	.word	0x03d09000
 80067e4:	003d0900 	.word	0x003d0900
 80067e8:	017d7840 	.word	0x017d7840
 80067ec:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067f4:	e225      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80067f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067fa:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80067fe:	430b      	orrs	r3, r1
 8006800:	f040 8085 	bne.w	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006804:	4b9c      	ldr	r3, [pc, #624]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006808:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800680c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006814:	d06b      	beq.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800681c:	d874      	bhi.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800681e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006820:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006824:	d056      	beq.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800682c:	d86c      	bhi.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006830:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006834:	d03b      	beq.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006838:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800683c:	d864      	bhi.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800683e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006844:	d021      	beq.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800684c:	d85c      	bhi.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800684e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006850:	2b00      	cmp	r3, #0
 8006852:	d004      	beq.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800685a:	d004      	beq.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800685c:	e054      	b.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800685e:	f7fe fb75 	bl	8004f4c <HAL_RCC_GetPCLK1Freq>
 8006862:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006864:	e1ed      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006866:	4b84      	ldr	r3, [pc, #528]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800686e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006872:	d107      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006874:	f107 0318 	add.w	r3, r7, #24
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fa05 	bl	8006c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006882:	e1de      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006888:	e1db      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800688a:	4b7b      	ldr	r3, [pc, #492]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006896:	d107      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006898:	f107 030c 	add.w	r3, r7, #12
 800689c:	4618      	mov	r0, r3
 800689e:	f000 fb47 	bl	8006f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068a6:	e1cc      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068ac:	e1c9      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068ae:	4b72      	ldr	r3, [pc, #456]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d109      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068ba:	4b6f      	ldr	r3, [pc, #444]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	08db      	lsrs	r3, r3, #3
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	4a6d      	ldr	r2, [pc, #436]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80068c6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068cc:	e1b9      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80068ce:	2300      	movs	r3, #0
 80068d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068d2:	e1b6      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80068d4:	4b68      	ldr	r3, [pc, #416]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e0:	d102      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80068e2:	4b67      	ldr	r3, [pc, #412]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80068e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068e6:	e1ac      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80068e8:	2300      	movs	r3, #0
 80068ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068ec:	e1a9      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80068ee:	4b62      	ldr	r3, [pc, #392]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068fa:	d102      	bne.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80068fc:	4b61      	ldr	r3, [pc, #388]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80068fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006900:	e19f      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006906:	e19c      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800690c:	e199      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800690e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006912:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006916:	430b      	orrs	r3, r1
 8006918:	d173      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800691a:	4b57      	ldr	r3, [pc, #348]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800691c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006922:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800692a:	d02f      	beq.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800692c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006932:	d863      	bhi.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	2b00      	cmp	r3, #0
 8006938:	d004      	beq.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800693a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006940:	d012      	beq.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006942:	e05b      	b.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006944:	4b4c      	ldr	r3, [pc, #304]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800694c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006950:	d107      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006952:	f107 0318 	add.w	r3, r7, #24
 8006956:	4618      	mov	r0, r3
 8006958:	f000 f996 	bl	8006c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006960:	e16f      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006966:	e16c      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006968:	4b43      	ldr	r3, [pc, #268]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006974:	d107      	bne.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006976:	f107 030c 	add.w	r3, r7, #12
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fad8 	bl	8006f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006984:	e15d      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800698a:	e15a      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800698c:	4b3a      	ldr	r3, [pc, #232]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800698e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006990:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006994:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006996:	4b38      	ldr	r3, [pc, #224]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0304 	and.w	r3, r3, #4
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d10c      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80069a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d109      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069a8:	4b33      	ldr	r3, [pc, #204]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	08db      	lsrs	r3, r3, #3
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	4a32      	ldr	r2, [pc, #200]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80069b4:	fa22 f303 	lsr.w	r3, r2, r3
 80069b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ba:	e01e      	b.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069bc:	4b2e      	ldr	r3, [pc, #184]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c8:	d106      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80069ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069d0:	d102      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069d2:	4b2b      	ldr	r3, [pc, #172]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d6:	e010      	b.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069d8:	4b27      	ldr	r3, [pc, #156]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069e4:	d106      	bne.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80069e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ec:	d102      	bne.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069ee:	4b25      	ldr	r3, [pc, #148]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80069f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069f2:	e002      	b.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80069f8:	e123      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80069fa:	e122      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a00:	e11f      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a06:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006a0a:	430b      	orrs	r3, r1
 8006a0c:	d13c      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006a0e:	4b1a      	ldr	r3, [pc, #104]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a16:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a24:	d012      	beq.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8006a26:	e023      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a28:	4b13      	ldr	r3, [pc, #76]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a34:	d107      	bne.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fbcc 	bl	80071d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a44:	e0fd      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a4a:	e0fa      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a58:	d107      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a5a:	f107 0318 	add.w	r3, r7, #24
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 f912 	bl	8006c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a68:	e0eb      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a6e:	e0e8      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a74:	e0e5      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a76:	bf00      	nop
 8006a78:	58024400 	.word	0x58024400
 8006a7c:	03d09000 	.word	0x03d09000
 8006a80:	003d0900 	.word	0x003d0900
 8006a84:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a8c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006a90:	430b      	orrs	r3, r1
 8006a92:	f040 8085 	bne.w	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006a96:	4b6d      	ldr	r3, [pc, #436]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006a9e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aa6:	d06b      	beq.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aae:	d874      	bhi.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab6:	d056      	beq.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006abe:	d86c      	bhi.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ac6:	d03b      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ace:	d864      	bhi.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ad6:	d021      	beq.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ade:	d85c      	bhi.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d004      	beq.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aec:	d004      	beq.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006aee:	e054      	b.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006af0:	f000 f8b4 	bl	8006c5c <HAL_RCCEx_GetD3PCLK1Freq>
 8006af4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006af6:	e0a4      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006af8:	4b54      	ldr	r3, [pc, #336]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b04:	d107      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b06:	f107 0318 	add.w	r3, r7, #24
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 f8bc 	bl	8006c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b14:	e095      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b1a:	e092      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b1c:	4b4b      	ldr	r3, [pc, #300]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b28:	d107      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b2a:	f107 030c 	add.w	r3, r7, #12
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f9fe 	bl	8006f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b38:	e083      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b3e:	e080      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b40:	4b42      	ldr	r3, [pc, #264]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d109      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b4c:	4b3f      	ldr	r3, [pc, #252]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	08db      	lsrs	r3, r3, #3
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	4a3e      	ldr	r2, [pc, #248]	; (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b5e:	e070      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b64:	e06d      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006b66:	4b39      	ldr	r3, [pc, #228]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b72:	d102      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006b74:	4b37      	ldr	r3, [pc, #220]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b78:	e063      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b7e:	e060      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b80:	4b32      	ldr	r3, [pc, #200]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b8c:	d102      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8006b8e:	4b32      	ldr	r3, [pc, #200]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006b90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b92:	e056      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b98:	e053      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b9e:	e050      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ba4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	d148      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006bac:	4b27      	ldr	r3, [pc, #156]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bb4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bbc:	d02a      	beq.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bc4:	d838      	bhi.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d004      	beq.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bd2:	d00d      	beq.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006bd4:	e030      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006bd6:	4b1d      	ldr	r3, [pc, #116]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006be2:	d102      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006be4:	4b1c      	ldr	r3, [pc, #112]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006be8:	e02b      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bee:	e028      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bf0:	4b16      	ldr	r3, [pc, #88]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bfc:	d107      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fae8 	bl	80071d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c0c:	e019      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c12:	e016      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c14:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c20:	d107      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c22:	f107 0318 	add.w	r3, r7, #24
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 f82e 	bl	8006c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c30:	e007      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c36:	e004      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c3c:	e001      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3740      	adds	r7, #64	; 0x40
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	58024400 	.word	0x58024400
 8006c50:	03d09000 	.word	0x03d09000
 8006c54:	003d0900 	.word	0x003d0900
 8006c58:	017d7840 	.word	0x017d7840

08006c5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006c60:	f7fe f944 	bl	8004eec <HAL_RCC_GetHCLKFreq>
 8006c64:	4602      	mov	r2, r0
 8006c66:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	091b      	lsrs	r3, r3, #4
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	4904      	ldr	r1, [pc, #16]	; (8006c84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006c72:	5ccb      	ldrb	r3, [r1, r3]
 8006c74:	f003 031f 	and.w	r3, r3, #31
 8006c78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	58024400 	.word	0x58024400
 8006c84:	08009160 	.word	0x08009160

08006c88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b089      	sub	sp, #36	; 0x24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c90:	4ba1      	ldr	r3, [pc, #644]	; (8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c94:	f003 0303 	and.w	r3, r3, #3
 8006c98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006c9a:	4b9f      	ldr	r3, [pc, #636]	; (8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9e:	0b1b      	lsrs	r3, r3, #12
 8006ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ca4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006ca6:	4b9c      	ldr	r3, [pc, #624]	; (8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006caa:	091b      	lsrs	r3, r3, #4
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006cb2:	4b99      	ldr	r3, [pc, #612]	; (8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb6:	08db      	lsrs	r3, r3, #3
 8006cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	fb02 f303 	mul.w	r3, r2, r3
 8006cc2:	ee07 3a90 	vmov	s15, r3
 8006cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 8111 	beq.w	8006ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	f000 8083 	beq.w	8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	f200 80a1 	bhi.w	8006e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d056      	beq.n	8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006cf2:	e099      	b.n	8006e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cf4:	4b88      	ldr	r3, [pc, #544]	; (8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d02d      	beq.n	8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d00:	4b85      	ldr	r3, [pc, #532]	; (8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	08db      	lsrs	r3, r3, #3
 8006d06:	f003 0303 	and.w	r3, r3, #3
 8006d0a:	4a84      	ldr	r2, [pc, #528]	; (8006f1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	ee07 3a90 	vmov	s15, r3
 8006d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d2a:	4b7b      	ldr	r3, [pc, #492]	; (8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d5a:	e087      	b.n	8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006f24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6e:	4b6a      	ldr	r3, [pc, #424]	; (8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d76:	ee07 3a90 	vmov	s15, r3
 8006d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d9e:	e065      	b.n	8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006daa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db2:	4b59      	ldr	r3, [pc, #356]	; (8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006de2:	e043      	b.n	8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df6:	4b48      	ldr	r3, [pc, #288]	; (8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e26:	e021      	b.n	8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3a:	4b37      	ldr	r3, [pc, #220]	; (8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006e6c:	4b2a      	ldr	r3, [pc, #168]	; (8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	0a5b      	lsrs	r3, r3, #9
 8006e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e86:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e92:	ee17 2a90 	vmov	r2, s15
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006e9a:	4b1f      	ldr	r3, [pc, #124]	; (8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	0c1b      	lsrs	r3, r3, #16
 8006ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ea4:	ee07 3a90 	vmov	s15, r3
 8006ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ec0:	ee17 2a90 	vmov	r2, s15
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006ec8:	4b13      	ldr	r3, [pc, #76]	; (8006f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	0e1b      	lsrs	r3, r3, #24
 8006ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eee:	ee17 2a90 	vmov	r2, s15
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006ef6:	e008      	b.n	8006f0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	609a      	str	r2, [r3, #8]
}
 8006f0a:	bf00      	nop
 8006f0c:	3724      	adds	r7, #36	; 0x24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	58024400 	.word	0x58024400
 8006f1c:	03d09000 	.word	0x03d09000
 8006f20:	46000000 	.word	0x46000000
 8006f24:	4c742400 	.word	0x4c742400
 8006f28:	4a742400 	.word	0x4a742400
 8006f2c:	4bbebc20 	.word	0x4bbebc20

08006f30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b089      	sub	sp, #36	; 0x24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f38:	4ba1      	ldr	r3, [pc, #644]	; (80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3c:	f003 0303 	and.w	r3, r3, #3
 8006f40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006f42:	4b9f      	ldr	r3, [pc, #636]	; (80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f46:	0d1b      	lsrs	r3, r3, #20
 8006f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006f4e:	4b9c      	ldr	r3, [pc, #624]	; (80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	0a1b      	lsrs	r3, r3, #8
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006f5a:	4b99      	ldr	r3, [pc, #612]	; (80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5e:	08db      	lsrs	r3, r3, #3
 8006f60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	fb02 f303 	mul.w	r3, r2, r3
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 8111 	beq.w	80071a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	f000 8083 	beq.w	800708c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	f200 80a1 	bhi.w	80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d056      	beq.n	8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006f9a:	e099      	b.n	80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f9c:	4b88      	ldr	r3, [pc, #544]	; (80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0320 	and.w	r3, r3, #32
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d02d      	beq.n	8007004 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fa8:	4b85      	ldr	r3, [pc, #532]	; (80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	08db      	lsrs	r3, r3, #3
 8006fae:	f003 0303 	and.w	r3, r3, #3
 8006fb2:	4a84      	ldr	r2, [pc, #528]	; (80071c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	ee07 3a90 	vmov	s15, r3
 8006fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fd2:	4b7b      	ldr	r3, [pc, #492]	; (80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fda:	ee07 3a90 	vmov	s15, r3
 8006fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fe6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007002:	e087      	b.n	8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80071cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007016:	4b6a      	ldr	r3, [pc, #424]	; (80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007026:	ed97 6a03 	vldr	s12, [r7, #12]
 800702a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800702e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800703a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800703e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007046:	e065      	b.n	8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007052:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705a:	4b59      	ldr	r3, [pc, #356]	; (80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800705c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706a:	ed97 6a03 	vldr	s12, [r7, #12]
 800706e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800707e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800708a:	e043      	b.n	8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800709a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709e:	4b48      	ldr	r3, [pc, #288]	; (80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ce:	e021      	b.n	8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80070de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e2:	4b37      	ldr	r3, [pc, #220]	; (80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007112:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007114:	4b2a      	ldr	r3, [pc, #168]	; (80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	0a5b      	lsrs	r3, r3, #9
 800711a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800712a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800712e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800713a:	ee17 2a90 	vmov	r2, s15
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007142:	4b1f      	ldr	r3, [pc, #124]	; (80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	0c1b      	lsrs	r3, r3, #16
 8007148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800714c:	ee07 3a90 	vmov	s15, r3
 8007150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007154:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007158:	ee37 7a87 	vadd.f32	s14, s15, s14
 800715c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007168:	ee17 2a90 	vmov	r2, s15
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007170:	4b13      	ldr	r3, [pc, #76]	; (80071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007174:	0e1b      	lsrs	r3, r3, #24
 8007176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007182:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007186:	ee37 7a87 	vadd.f32	s14, s15, s14
 800718a:	edd7 6a07 	vldr	s13, [r7, #28]
 800718e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007196:	ee17 2a90 	vmov	r2, s15
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800719e:	e008      	b.n	80071b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	609a      	str	r2, [r3, #8]
}
 80071b2:	bf00      	nop
 80071b4:	3724      	adds	r7, #36	; 0x24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	58024400 	.word	0x58024400
 80071c4:	03d09000 	.word	0x03d09000
 80071c8:	46000000 	.word	0x46000000
 80071cc:	4c742400 	.word	0x4c742400
 80071d0:	4a742400 	.word	0x4a742400
 80071d4:	4bbebc20 	.word	0x4bbebc20

080071d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80071d8:	b480      	push	{r7}
 80071da:	b089      	sub	sp, #36	; 0x24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071e0:	4ba0      	ldr	r3, [pc, #640]	; (8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e4:	f003 0303 	and.w	r3, r3, #3
 80071e8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80071ea:	4b9e      	ldr	r3, [pc, #632]	; (8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ee:	091b      	lsrs	r3, r3, #4
 80071f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071f4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80071f6:	4b9b      	ldr	r3, [pc, #620]	; (8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007200:	4b98      	ldr	r3, [pc, #608]	; (8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007204:	08db      	lsrs	r3, r3, #3
 8007206:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	fb02 f303 	mul.w	r3, r2, r3
 8007210:	ee07 3a90 	vmov	s15, r3
 8007214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007218:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 8111 	beq.w	8007446 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	2b02      	cmp	r3, #2
 8007228:	f000 8083 	beq.w	8007332 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	2b02      	cmp	r3, #2
 8007230:	f200 80a1 	bhi.w	8007376 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d056      	beq.n	80072ee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007240:	e099      	b.n	8007376 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007242:	4b88      	ldr	r3, [pc, #544]	; (8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	d02d      	beq.n	80072aa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800724e:	4b85      	ldr	r3, [pc, #532]	; (8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	08db      	lsrs	r3, r3, #3
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	4a83      	ldr	r2, [pc, #524]	; (8007468 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800725a:	fa22 f303 	lsr.w	r3, r2, r3
 800725e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	ee07 3a90 	vmov	s15, r3
 8007270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007278:	4b7a      	ldr	r3, [pc, #488]	; (8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800727a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007280:	ee07 3a90 	vmov	s15, r3
 8007284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007288:	ed97 6a03 	vldr	s12, [r7, #12]
 800728c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800746c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007290:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800729c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072a8:	e087      	b.n	80073ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	ee07 3a90 	vmov	s15, r3
 80072b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007470 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80072b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072bc:	4b69      	ldr	r3, [pc, #420]	; (8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c4:	ee07 3a90 	vmov	s15, r3
 80072c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80072d0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800746c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ec:	e065      	b.n	80073ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	ee07 3a90 	vmov	s15, r3
 80072f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007474 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80072fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007300:	4b58      	ldr	r3, [pc, #352]	; (8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007308:	ee07 3a90 	vmov	s15, r3
 800730c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007310:	ed97 6a03 	vldr	s12, [r7, #12]
 8007314:	eddf 5a55 	vldr	s11, [pc, #340]	; 800746c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007318:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007330:	e043      	b.n	80073ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	ee07 3a90 	vmov	s15, r3
 8007338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007478 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007344:	4b47      	ldr	r3, [pc, #284]	; (8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734c:	ee07 3a90 	vmov	s15, r3
 8007350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007354:	ed97 6a03 	vldr	s12, [r7, #12]
 8007358:	eddf 5a44 	vldr	s11, [pc, #272]	; 800746c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800735c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007364:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800736c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007370:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007374:	e021      	b.n	80073ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	ee07 3a90 	vmov	s15, r3
 800737c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007380:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007470 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007388:	4b36      	ldr	r3, [pc, #216]	; (8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800738a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007390:	ee07 3a90 	vmov	s15, r3
 8007394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007398:	ed97 6a03 	vldr	s12, [r7, #12]
 800739c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800746c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80073a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073b8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80073ba:	4b2a      	ldr	r3, [pc, #168]	; (8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073be:	0a5b      	lsrs	r3, r3, #9
 80073c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c4:	ee07 3a90 	vmov	s15, r3
 80073c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80073d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e0:	ee17 2a90 	vmov	r2, s15
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80073e8:	4b1e      	ldr	r3, [pc, #120]	; (8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ec:	0c1b      	lsrs	r3, r3, #16
 80073ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007402:	edd7 6a07 	vldr	s13, [r7, #28]
 8007406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800740a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800740e:	ee17 2a90 	vmov	r2, s15
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007416:	4b13      	ldr	r3, [pc, #76]	; (8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741a:	0e1b      	lsrs	r3, r3, #24
 800741c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007420:	ee07 3a90 	vmov	s15, r3
 8007424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007428:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800742c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007430:	edd7 6a07 	vldr	s13, [r7, #28]
 8007434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800743c:	ee17 2a90 	vmov	r2, s15
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007444:	e008      	b.n	8007458 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	609a      	str	r2, [r3, #8]
}
 8007458:	bf00      	nop
 800745a:	3724      	adds	r7, #36	; 0x24
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	58024400 	.word	0x58024400
 8007468:	03d09000 	.word	0x03d09000
 800746c:	46000000 	.word	0x46000000
 8007470:	4c742400 	.word	0x4c742400
 8007474:	4a742400 	.word	0x4a742400
 8007478:	4bbebc20 	.word	0x4bbebc20

0800747c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800748a:	4b53      	ldr	r3, [pc, #332]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 800748c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748e:	f003 0303 	and.w	r3, r3, #3
 8007492:	2b03      	cmp	r3, #3
 8007494:	d101      	bne.n	800749a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e099      	b.n	80075ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800749a:	4b4f      	ldr	r3, [pc, #316]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a4e      	ldr	r2, [pc, #312]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 80074a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074a6:	f7fa f9fb 	bl	80018a0 <HAL_GetTick>
 80074aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074ac:	e008      	b.n	80074c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074ae:	f7fa f9f7 	bl	80018a0 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d901      	bls.n	80074c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e086      	b.n	80075ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074c0:	4b45      	ldr	r3, [pc, #276]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1f0      	bne.n	80074ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80074cc:	4b42      	ldr	r3, [pc, #264]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 80074ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	031b      	lsls	r3, r3, #12
 80074da:	493f      	ldr	r1, [pc, #252]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	628b      	str	r3, [r1, #40]	; 0x28
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	025b      	lsls	r3, r3, #9
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	431a      	orrs	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	041b      	lsls	r3, r3, #16
 80074fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	3b01      	subs	r3, #1
 800750a:	061b      	lsls	r3, r3, #24
 800750c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007510:	4931      	ldr	r1, [pc, #196]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 8007512:	4313      	orrs	r3, r2
 8007514:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007516:	4b30      	ldr	r3, [pc, #192]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 8007518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	492d      	ldr	r1, [pc, #180]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 8007524:	4313      	orrs	r3, r2
 8007526:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007528:	4b2b      	ldr	r3, [pc, #172]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	f023 0220 	bic.w	r2, r3, #32
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	4928      	ldr	r1, [pc, #160]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 8007536:	4313      	orrs	r3, r2
 8007538:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800753a:	4b27      	ldr	r3, [pc, #156]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	4a26      	ldr	r2, [pc, #152]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 8007540:	f023 0310 	bic.w	r3, r3, #16
 8007544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007546:	4b24      	ldr	r3, [pc, #144]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 8007548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800754a:	4b24      	ldr	r3, [pc, #144]	; (80075dc <RCCEx_PLL2_Config+0x160>)
 800754c:	4013      	ands	r3, r2
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	69d2      	ldr	r2, [r2, #28]
 8007552:	00d2      	lsls	r2, r2, #3
 8007554:	4920      	ldr	r1, [pc, #128]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 8007556:	4313      	orrs	r3, r2
 8007558:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800755a:	4b1f      	ldr	r3, [pc, #124]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 800755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755e:	4a1e      	ldr	r2, [pc, #120]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 8007560:	f043 0310 	orr.w	r3, r3, #16
 8007564:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d106      	bne.n	800757a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800756c:	4b1a      	ldr	r3, [pc, #104]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 800756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007570:	4a19      	ldr	r2, [pc, #100]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 8007572:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007576:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007578:	e00f      	b.n	800759a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d106      	bne.n	800758e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007580:	4b15      	ldr	r3, [pc, #84]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	4a14      	ldr	r2, [pc, #80]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 8007586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800758a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800758c:	e005      	b.n	800759a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800758e:	4b12      	ldr	r3, [pc, #72]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007592:	4a11      	ldr	r2, [pc, #68]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 8007594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007598:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800759a:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a0e      	ldr	r2, [pc, #56]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 80075a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075a6:	f7fa f97b 	bl	80018a0 <HAL_GetTick>
 80075aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075ac:	e008      	b.n	80075c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075ae:	f7fa f977 	bl	80018a0 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d901      	bls.n	80075c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e006      	b.n	80075ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075c0:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <RCCEx_PLL2_Config+0x15c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d0f0      	beq.n	80075ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	58024400 	.word	0x58024400
 80075dc:	ffff0007 	.word	0xffff0007

080075e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075ee:	4b53      	ldr	r3, [pc, #332]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 80075f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f2:	f003 0303 	and.w	r3, r3, #3
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d101      	bne.n	80075fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e099      	b.n	8007732 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80075fe:	4b4f      	ldr	r3, [pc, #316]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a4e      	ldr	r2, [pc, #312]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 8007604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800760a:	f7fa f949 	bl	80018a0 <HAL_GetTick>
 800760e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007610:	e008      	b.n	8007624 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007612:	f7fa f945 	bl	80018a0 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e086      	b.n	8007732 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007624:	4b45      	ldr	r3, [pc, #276]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1f0      	bne.n	8007612 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007630:	4b42      	ldr	r3, [pc, #264]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	051b      	lsls	r3, r3, #20
 800763e:	493f      	ldr	r1, [pc, #252]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 8007640:	4313      	orrs	r3, r2
 8007642:	628b      	str	r3, [r1, #40]	; 0x28
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	3b01      	subs	r3, #1
 800764a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	3b01      	subs	r3, #1
 8007654:	025b      	lsls	r3, r3, #9
 8007656:	b29b      	uxth	r3, r3
 8007658:	431a      	orrs	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	3b01      	subs	r3, #1
 8007660:	041b      	lsls	r3, r3, #16
 8007662:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	3b01      	subs	r3, #1
 800766e:	061b      	lsls	r3, r3, #24
 8007670:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007674:	4931      	ldr	r1, [pc, #196]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 8007676:	4313      	orrs	r3, r2
 8007678:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800767a:	4b30      	ldr	r3, [pc, #192]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 800767c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	492d      	ldr	r1, [pc, #180]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 8007688:	4313      	orrs	r3, r2
 800768a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800768c:	4b2b      	ldr	r3, [pc, #172]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	4928      	ldr	r1, [pc, #160]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 800769a:	4313      	orrs	r3, r2
 800769c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800769e:	4b27      	ldr	r3, [pc, #156]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 80076a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a2:	4a26      	ldr	r2, [pc, #152]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 80076a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076aa:	4b24      	ldr	r3, [pc, #144]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 80076ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076ae:	4b24      	ldr	r3, [pc, #144]	; (8007740 <RCCEx_PLL3_Config+0x160>)
 80076b0:	4013      	ands	r3, r2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	69d2      	ldr	r2, [r2, #28]
 80076b6:	00d2      	lsls	r2, r2, #3
 80076b8:	4920      	ldr	r1, [pc, #128]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80076be:	4b1f      	ldr	r3, [pc, #124]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 80076c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c2:	4a1e      	ldr	r2, [pc, #120]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 80076c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d106      	bne.n	80076de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80076d0:	4b1a      	ldr	r3, [pc, #104]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	4a19      	ldr	r2, [pc, #100]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 80076d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076dc:	e00f      	b.n	80076fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d106      	bne.n	80076f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80076e4:	4b15      	ldr	r3, [pc, #84]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	4a14      	ldr	r2, [pc, #80]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 80076ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076f0:	e005      	b.n	80076fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80076f2:	4b12      	ldr	r3, [pc, #72]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 80076f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f6:	4a11      	ldr	r2, [pc, #68]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 80076f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80076fe:	4b0f      	ldr	r3, [pc, #60]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a0e      	ldr	r2, [pc, #56]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 8007704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800770a:	f7fa f8c9 	bl	80018a0 <HAL_GetTick>
 800770e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007710:	e008      	b.n	8007724 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007712:	f7fa f8c5 	bl	80018a0 <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	2b02      	cmp	r3, #2
 800771e:	d901      	bls.n	8007724 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e006      	b.n	8007732 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007724:	4b05      	ldr	r3, [pc, #20]	; (800773c <RCCEx_PLL3_Config+0x15c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0f0      	beq.n	8007712 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007730:	7bfb      	ldrb	r3, [r7, #15]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	58024400 	.word	0x58024400
 8007740:	ffff0007 	.word	0xffff0007

08007744 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b02      	cmp	r3, #2
 8007756:	d904      	bls.n	8007762 <HAL_SAI_InitProtocol+0x1e>
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	3b03      	subs	r3, #3
 800775c:	2b01      	cmp	r3, #1
 800775e:	d812      	bhi.n	8007786 <HAL_SAI_InitProtocol+0x42>
 8007760:	e008      	b.n	8007774 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	68b9      	ldr	r1, [r7, #8]
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 fb8b 	bl	8007e84 <SAI_InitI2S>
 800776e:	4603      	mov	r3, r0
 8007770:	75fb      	strb	r3, [r7, #23]
      break;
 8007772:	e00b      	b.n	800778c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	68b9      	ldr	r1, [r7, #8]
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 fc34 	bl	8007fe8 <SAI_InitPCM>
 8007780:	4603      	mov	r3, r0
 8007782:	75fb      	strb	r3, [r7, #23]
      break;
 8007784:	e002      	b.n	800778c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	75fb      	strb	r3, [r7, #23]
      break;
 800778a:	bf00      	nop
  }

  if (status == HAL_OK)
 800778c:	7dfb      	ldrb	r3, [r7, #23]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d104      	bne.n	800779c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 f808 	bl	80077a8 <HAL_SAI_Init>
 8007798:	4603      	mov	r3, r0
 800779a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800779c:	7dfb      	ldrb	r3, [r7, #23]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	; 0x28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e201      	b.n	8007bbe <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d113      	bne.n	80077ec <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a99      	ldr	r2, [pc, #612]	; (8007a30 <HAL_SAI_Init+0x288>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d004      	beq.n	80077d8 <HAL_SAI_Init+0x30>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a98      	ldr	r2, [pc, #608]	; (8007a34 <HAL_SAI_Init+0x28c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d107      	bne.n	80077e8 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d103      	bne.n	80077e8 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e1e8      	b.n	8007bbe <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a8f      	ldr	r2, [pc, #572]	; (8007a30 <HAL_SAI_Init+0x288>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d004      	beq.n	8007800 <HAL_SAI_Init+0x58>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a8f      	ldr	r2, [pc, #572]	; (8007a38 <HAL_SAI_Init+0x290>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d102      	bne.n	8007806 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8007800:	4b8e      	ldr	r3, [pc, #568]	; (8007a3c <HAL_SAI_Init+0x294>)
 8007802:	61bb      	str	r3, [r7, #24]
 8007804:	e00e      	b.n	8007824 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a8a      	ldr	r2, [pc, #552]	; (8007a34 <HAL_SAI_Init+0x28c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d004      	beq.n	800781a <HAL_SAI_Init+0x72>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a8a      	ldr	r2, [pc, #552]	; (8007a40 <HAL_SAI_Init+0x298>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d102      	bne.n	8007820 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800781a:	4b8a      	ldr	r3, [pc, #552]	; (8007a44 <HAL_SAI_Init+0x29c>)
 800781c:	61bb      	str	r3, [r7, #24]
 800781e:	e001      	b.n	8007824 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e1cc      	b.n	8007bbe <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d106      	bne.n	800783e <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7f9 fde5 	bl	8001408 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fc8c 	bl	800815c <SAI_Disable>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e1b7      	b.n	8007bbe <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2202      	movs	r2, #2
 8007852:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d00c      	beq.n	8007878 <HAL_SAI_Init+0xd0>
 800785e:	2b02      	cmp	r3, #2
 8007860:	d80d      	bhi.n	800787e <HAL_SAI_Init+0xd6>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <HAL_SAI_Init+0xc4>
 8007866:	2b01      	cmp	r3, #1
 8007868:	d003      	beq.n	8007872 <HAL_SAI_Init+0xca>
 800786a:	e008      	b.n	800787e <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007870:	e008      	b.n	8007884 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007872:	2310      	movs	r3, #16
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007876:	e005      	b.n	8007884 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007878:	2320      	movs	r3, #32
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800787c:	e002      	b.n	8007884 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800787e:	2300      	movs	r3, #0
 8007880:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007882:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	2b05      	cmp	r3, #5
 800788a:	d822      	bhi.n	80078d2 <HAL_SAI_Init+0x12a>
 800788c:	a201      	add	r2, pc, #4	; (adr r2, 8007894 <HAL_SAI_Init+0xec>)
 800788e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007892:	bf00      	nop
 8007894:	080078ad 	.word	0x080078ad
 8007898:	080078b3 	.word	0x080078b3
 800789c:	080078bb 	.word	0x080078bb
 80078a0:	080078d3 	.word	0x080078d3
 80078a4:	080078d3 	.word	0x080078d3
 80078a8:	080078c3 	.word	0x080078c3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80078ac:	2300      	movs	r3, #0
 80078ae:	61fb      	str	r3, [r7, #28]
      break;
 80078b0:	e012      	b.n	80078d8 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80078b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078b6:	61fb      	str	r3, [r7, #28]
      break;
 80078b8:	e00e      	b.n	80078d8 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80078ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078be:	61fb      	str	r3, [r7, #28]
      break;
 80078c0:	e00a      	b.n	80078d8 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80078c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078c6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	f043 0303 	orr.w	r3, r3, #3
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80078d0:	e002      	b.n	80078d8 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61fb      	str	r3, [r7, #28]
      break;
 80078d6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078dc:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 808a 	beq.w	80079fc <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a4f      	ldr	r2, [pc, #316]	; (8007a30 <HAL_SAI_Init+0x288>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d004      	beq.n	8007900 <HAL_SAI_Init+0x158>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a4f      	ldr	r2, [pc, #316]	; (8007a38 <HAL_SAI_Init+0x290>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d106      	bne.n	800790e <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007900:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007904:	f04f 0100 	mov.w	r1, #0
 8007908:	f7fe fcd6 	bl	80062b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800790c:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a48      	ldr	r2, [pc, #288]	; (8007a34 <HAL_SAI_Init+0x28c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d106      	bne.n	8007926 <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8007918:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800791c:	f04f 0100 	mov.w	r1, #0
 8007920:	f7fe fcca 	bl	80062b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007924:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a45      	ldr	r2, [pc, #276]	; (8007a40 <HAL_SAI_Init+0x298>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d106      	bne.n	800793e <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8007930:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007934:	f04f 0100 	mov.w	r1, #0
 8007938:	f7fe fcbe 	bl	80062b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800793c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007946:	d120      	bne.n	800798a <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800794c:	2b04      	cmp	r3, #4
 800794e:	d102      	bne.n	8007956 <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8007950:	2340      	movs	r3, #64	; 0x40
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	e00a      	b.n	800796c <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795a:	2b08      	cmp	r3, #8
 800795c:	d103      	bne.n	8007966 <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800795e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	e002      	b.n	800796c <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	4613      	mov	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	4619      	mov	r1, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	fbb1 f3f3 	udiv	r3, r1, r3
 8007986:	613b      	str	r3, [r7, #16]
 8007988:	e017      	b.n	80079ba <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007992:	d101      	bne.n	8007998 <HAL_SAI_Init+0x1f0>
 8007994:	2302      	movs	r3, #2
 8007996:	e000      	b.n	800799a <HAL_SAI_Init+0x1f2>
 8007998:	2301      	movs	r3, #1
 800799a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	4613      	mov	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	4619      	mov	r1, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	fb02 f303 	mul.w	r3, r2, r3
 80079b2:	021b      	lsls	r3, r3, #8
 80079b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80079b8:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	4a22      	ldr	r2, [pc, #136]	; (8007a48 <HAL_SAI_Init+0x2a0>)
 80079be:	fba2 2303 	umull	r2, r3, r2, r3
 80079c2:	08da      	lsrs	r2, r3, #3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80079c8:	6939      	ldr	r1, [r7, #16]
 80079ca:	4b1f      	ldr	r3, [pc, #124]	; (8007a48 <HAL_SAI_Init+0x2a0>)
 80079cc:	fba3 2301 	umull	r2, r3, r3, r1
 80079d0:	08da      	lsrs	r2, r3, #3
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	1aca      	subs	r2, r1, r3
 80079dc:	2a08      	cmp	r2, #8
 80079de:	d904      	bls.n	80079ea <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	d104      	bne.n	80079fc <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	085a      	lsrs	r2, r3, #1
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <HAL_SAI_Init+0x264>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d109      	bne.n	8007a20 <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_SAI_Init+0x270>
 8007a14:	2300      	movs	r3, #0
 8007a16:	e001      	b.n	8007a1c <HAL_SAI_Init+0x274>
 8007a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a1c:	623b      	str	r3, [r7, #32]
 8007a1e:	e017      	b.n	8007a50 <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d111      	bne.n	8007a4c <HAL_SAI_Init+0x2a4>
 8007a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a2c:	e00f      	b.n	8007a4e <HAL_SAI_Init+0x2a6>
 8007a2e:	bf00      	nop
 8007a30:	40015804 	.word	0x40015804
 8007a34:	58005404 	.word	0x58005404
 8007a38:	40015824 	.word	0x40015824
 8007a3c:	40015800 	.word	0x40015800
 8007a40:	58005424 	.word	0x58005424
 8007a44:	58005400 	.word	0x58005400
 8007a48:	cccccccd 	.word	0xcccccccd
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6819      	ldr	r1, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	4b5b      	ldr	r3, [pc, #364]	; (8007bc8 <HAL_SAI_Init+0x420>)
 8007a5c:	400b      	ands	r3, r1
 8007a5e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6819      	ldr	r1, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685a      	ldr	r2, [r3, #4]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a74:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8007a88:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a94:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9a:	051b      	lsls	r3, r3, #20
 8007a9c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007aa2:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6859      	ldr	r1, [r3, #4]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	4b43      	ldr	r3, [pc, #268]	; (8007bcc <HAL_SAI_Init+0x424>)
 8007abe:	400b      	ands	r3, r1
 8007ac0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6859      	ldr	r1, [r3, #4]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	69da      	ldr	r2, [r3, #28]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6899      	ldr	r1, [r3, #8]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	4b39      	ldr	r3, [pc, #228]	; (8007bd0 <HAL_SAI_Init+0x428>)
 8007aec:	400b      	ands	r3, r1
 8007aee:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6899      	ldr	r1, [r3, #8]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afa:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007b00:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8007b06:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8007b0c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b12:	3b01      	subs	r3, #1
 8007b14:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007b16:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68d9      	ldr	r1, [r3, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007b2e:	400b      	ands	r3, r1
 8007b30:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68d9      	ldr	r1, [r3, #12]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b40:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b46:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007b48:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	021b      	lsls	r3, r3, #8
 8007b52:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a1c      	ldr	r2, [pc, #112]	; (8007bd4 <HAL_SAI_Init+0x42c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d004      	beq.n	8007b70 <HAL_SAI_Init+0x3c8>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a1b      	ldr	r2, [pc, #108]	; (8007bd8 <HAL_SAI_Init+0x430>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d119      	bne.n	8007ba4 <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b74:	f023 0201 	bic.w	r2, r3, #1
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d10e      	bne.n	8007ba4 <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007b92:	431a      	orrs	r2, r3
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9c:	f043 0201 	orr.w	r2, r3, #1
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3728      	adds	r7, #40	; 0x28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	f005c010 	.word	0xf005c010
 8007bcc:	ffff1ff0 	.word	0xffff1ff0
 8007bd0:	fff88000 	.word	0xfff88000
 8007bd4:	40015804 	.word	0x40015804
 8007bd8:	58005404 	.word	0x58005404

08007bdc <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	4613      	mov	r3, r2
 8007be8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007bea:	f7f9 fe59 	bl	80018a0 <HAL_GetTick>
 8007bee:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <HAL_SAI_Transmit_DMA+0x20>
 8007bf6:	88fb      	ldrh	r3, [r7, #6]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e098      	b.n	8007d32 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	f040 8091 	bne.w	8007d30 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d101      	bne.n	8007c1c <HAL_SAI_Transmit_DMA+0x40>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e08a      	b.n	8007d32 <HAL_SAI_Transmit_DMA+0x156>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	88fa      	ldrh	r2, [r7, #6]
 8007c2e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	88fa      	ldrh	r2, [r7, #6]
 8007c36:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2212      	movs	r2, #18
 8007c46:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c50:	4a3a      	ldr	r2, [pc, #232]	; (8007d3c <HAL_SAI_Transmit_DMA+0x160>)
 8007c52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c5a:	4a39      	ldr	r2, [pc, #228]	; (8007d40 <HAL_SAI_Transmit_DMA+0x164>)
 8007c5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c64:	4a37      	ldr	r2, [pc, #220]	; (8007d44 <HAL_SAI_Transmit_DMA+0x168>)
 8007c66:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c6e:	2200      	movs	r2, #0
 8007c70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	331c      	adds	r3, #28
 8007c84:	461a      	mov	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007c8c:	f7fa faa0 	bl	80021d0 <HAL_DMA_Start_IT>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d005      	beq.n	8007ca2 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e047      	b.n	8007d32 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 fa21 	bl	80080ec <SAI_InterruptFlag>
 8007caa:	4601      	mov	r1, r0
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691a      	ldr	r2, [r3, #16]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007cc8:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007cca:	e015      	b.n	8007cf8 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007ccc:	f7f9 fde8 	bl	80018a0 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cda:	d90d      	bls.n	8007cf8 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ce2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e01c      	b.n	8007d32 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0e2      	beq.n	8007ccc <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d107      	bne.n	8007d24 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d22:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	e000      	b.n	8007d32 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8007d30:	2302      	movs	r3, #2
  }
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3718      	adds	r7, #24
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	08008231 	.word	0x08008231
 8007d40:	080081d1 	.word	0x080081d1
 8007d44:	080082c9 	.word	0x080082c9

08007d48 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	4613      	mov	r3, r2
 8007d54:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <HAL_SAI_Receive_DMA+0x1a>
 8007d5c:	88fb      	ldrh	r3, [r7, #6]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e079      	b.n	8007e5a <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d172      	bne.n	8007e58 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d101      	bne.n	8007d80 <HAL_SAI_Receive_DMA+0x38>
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	e06c      	b.n	8007e5a <HAL_SAI_Receive_DMA+0x112>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	88fa      	ldrh	r2, [r7, #6]
 8007d92:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	88fa      	ldrh	r2, [r7, #6]
 8007d9a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2222      	movs	r2, #34	; 0x22
 8007daa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007db4:	4a2b      	ldr	r2, [pc, #172]	; (8007e64 <HAL_SAI_Receive_DMA+0x11c>)
 8007db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dbe:	4a2a      	ldr	r2, [pc, #168]	; (8007e68 <HAL_SAI_Receive_DMA+0x120>)
 8007dc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc8:	4a28      	ldr	r2, [pc, #160]	; (8007e6c <HAL_SAI_Receive_DMA+0x124>)
 8007dca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	331c      	adds	r3, #28
 8007de2:	4619      	mov	r1, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007de8:	461a      	mov	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007df0:	f7fa f9ee 	bl	80021d0 <HAL_DMA_Start_IT>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e029      	b.n	8007e5a <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007e06:	2100      	movs	r1, #0
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 f96f 	bl	80080ec <SAI_InterruptFlag>
 8007e0e:	4601      	mov	r1, r0
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	691a      	ldr	r2, [r3, #16]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007e2c:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d107      	bne.n	8007e4c <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007e4a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	e000      	b.n	8007e5a <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8007e58:	2302      	movs	r3, #2
  }
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	080082ad 	.word	0x080082ad
 8007e68:	0800824d 	.word	0x0800824d
 8007e6c:	080082c9 	.word	0x080082c9

08007e70 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <SAI_InitI2S+0x2e>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d103      	bne.n	8007eba <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	651a      	str	r2, [r3, #80]	; 0x50
 8007eb8:	e002      	b.n	8007ec0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007ec6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ece:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e077      	b.n	8007fda <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d107      	bne.n	8007f00 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007efc:	665a      	str	r2, [r3, #100]	; 0x64
 8007efe:	e006      	b.n	8007f0e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f06:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d84f      	bhi.n	8007fb4 <SAI_InitI2S+0x130>
 8007f14:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <SAI_InitI2S+0x98>)
 8007f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1a:	bf00      	nop
 8007f1c:	08007f2d 	.word	0x08007f2d
 8007f20:	08007f4f 	.word	0x08007f4f
 8007f24:	08007f71 	.word	0x08007f71
 8007f28:	08007f93 	.word	0x08007f93
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2280      	movs	r2, #128	; 0x80
 8007f30:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	085b      	lsrs	r3, r3, #1
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	085b      	lsrs	r3, r3, #1
 8007f40:	011a      	lsls	r2, r3, #4
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2240      	movs	r2, #64	; 0x40
 8007f4a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f4c:	e035      	b.n	8007fba <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2280      	movs	r2, #128	; 0x80
 8007f52:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	085b      	lsrs	r3, r3, #1
 8007f58:	019a      	lsls	r2, r3, #6
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	085b      	lsrs	r3, r3, #1
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2280      	movs	r2, #128	; 0x80
 8007f6c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f6e:	e024      	b.n	8007fba <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	22c0      	movs	r2, #192	; 0xc0
 8007f74:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	085b      	lsrs	r3, r3, #1
 8007f7a:	019a      	lsls	r2, r3, #6
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	085b      	lsrs	r3, r3, #1
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2280      	movs	r2, #128	; 0x80
 8007f8e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f90:	e013      	b.n	8007fba <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	22e0      	movs	r2, #224	; 0xe0
 8007f96:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	085b      	lsrs	r3, r3, #1
 8007f9c:	019a      	lsls	r2, r3, #6
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	085b      	lsrs	r3, r3, #1
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2280      	movs	r2, #128	; 0x80
 8007fb0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007fb2:	e002      	b.n	8007fba <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fb8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d10b      	bne.n	8007fd8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d102      	bne.n	8007fcc <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2210      	movs	r2, #16
 8007fca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d102      	bne.n	8007fd8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2208      	movs	r2, #8
 8007fd6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop

08007fe8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d003      	beq.n	8008016 <SAI_InitPCM+0x2e>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	2b02      	cmp	r3, #2
 8008014:	d103      	bne.n	800801e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2201      	movs	r2, #1
 800801a:	651a      	str	r2, [r3, #80]	; 0x50
 800801c:	e002      	b.n	8008024 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008030:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008038:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800804c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2b04      	cmp	r3, #4
 8008052:	d103      	bne.n	800805c <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2201      	movs	r2, #1
 8008058:	659a      	str	r2, [r3, #88]	; 0x58
 800805a:	e002      	b.n	8008062 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	220d      	movs	r2, #13
 8008060:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b03      	cmp	r3, #3
 8008066:	d837      	bhi.n	80080d8 <SAI_InitPCM+0xf0>
 8008068:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <SAI_InitPCM+0x88>)
 800806a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806e:	bf00      	nop
 8008070:	08008081 	.word	0x08008081
 8008074:	08008097 	.word	0x08008097
 8008078:	080080ad 	.word	0x080080ad
 800807c:	080080c3 	.word	0x080080c3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2280      	movs	r2, #128	; 0x80
 8008084:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	011a      	lsls	r2, r3, #4
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2240      	movs	r2, #64	; 0x40
 8008092:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8008094:	e023      	b.n	80080de <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2280      	movs	r2, #128	; 0x80
 800809a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2280      	movs	r2, #128	; 0x80
 80080a8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80080aa:	e018      	b.n	80080de <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	22c0      	movs	r2, #192	; 0xc0
 80080b0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2280      	movs	r2, #128	; 0x80
 80080be:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80080c0:	e00d      	b.n	80080de <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	22e0      	movs	r2, #224	; 0xe0
 80080c6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2280      	movs	r2, #128	; 0x80
 80080d4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80080d6:	e002      	b.n	80080de <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	75fb      	strb	r3, [r7, #23]
      break;
 80080dc:	bf00      	nop
  }

  return status;
 80080de:	7dfb      	ldrb	r3, [r7, #23]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	371c      	adds	r7, #28
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	460b      	mov	r3, r1
 80080f6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80080fc:	78fb      	ldrb	r3, [r7, #3]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d103      	bne.n	800810a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f043 0308 	orr.w	r3, r3, #8
 8008108:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810e:	2b08      	cmp	r3, #8
 8008110:	d10b      	bne.n	800812a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008116:	2b03      	cmp	r3, #3
 8008118:	d003      	beq.n	8008122 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d103      	bne.n	800812a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f043 0310 	orr.w	r3, r3, #16
 8008128:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	2b03      	cmp	r3, #3
 8008130:	d003      	beq.n	800813a <SAI_InterruptFlag+0x4e>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d104      	bne.n	8008144 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	e003      	b.n	800814c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f043 0304 	orr.w	r3, r3, #4
 800814a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800814c:	68fb      	ldr	r3, [r7, #12]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
	...

0800815c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008164:	4b18      	ldr	r3, [pc, #96]	; (80081c8 <SAI_Disable+0x6c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a18      	ldr	r2, [pc, #96]	; (80081cc <SAI_Disable+0x70>)
 800816a:	fba2 2303 	umull	r2, r3, r2, r3
 800816e:	0b1b      	lsrs	r3, r3, #12
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008186:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10a      	bne.n	80081a4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008194:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	72fb      	strb	r3, [r7, #11]
      break;
 80081a2:	e009      	b.n	80081b8 <SAI_Disable+0x5c>
    }
    count--;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e7      	bne.n	8008188 <SAI_Disable+0x2c>

  return status;
 80081b8:	7afb      	ldrb	r3, [r7, #11]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	24000000 	.word	0x24000000
 80081cc:	95cbec1b 	.word	0x95cbec1b

080081d0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081dc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081e6:	d01c      	beq.n	8008222 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80081fe:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008200:	2100      	movs	r1, #0
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f7ff ff72 	bl	80080ec <SAI_InterruptFlag>
 8008208:	4603      	mov	r3, r0
 800820a:	43d9      	mvns	r1, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	691a      	ldr	r2, [r3, #16]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	400a      	ands	r2, r1
 8008218:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f7f8 f944 	bl	80004b0 <HAL_SAI_TxCpltCallback>
#endif
}
 8008228:	bf00      	nop
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7f8 f998 	bl	8000574 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8008244:	bf00      	nop
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008258:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008262:	d01c      	beq.n	800829e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008272:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800827c:	2100      	movs	r1, #0
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f7ff ff34 	bl	80080ec <SAI_InterruptFlag>
 8008284:	4603      	mov	r3, r0
 8008286:	43d9      	mvns	r1, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691a      	ldr	r2, [r3, #16]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	400a      	ands	r2, r1
 8008294:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f7f8 f9ca 	bl	8000638 <HAL_SAI_RxCpltCallback>
#endif
}
 80082a4:	bf00      	nop
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7f8 fa72 	bl	80007a4 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80082c0:	bf00      	nop
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7fb f90e 	bl	80034f8 <HAL_DMA_GetError>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d01d      	beq.n	800831e <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008300:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f7ff ff2a 	bl	800815c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f7ff fda9 	bl	8007e70 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e02b      	b.n	8008394 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	d106      	bne.n	8008356 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7f9 f84f 	bl	80013f4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2202      	movs	r2, #2
 800835a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	3304      	adds	r3, #4
 8008366:	4619      	mov	r1, r3
 8008368:	4610      	mov	r0, r2
 800836a:	f000 fdbf 	bl	8008eec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	461a      	mov	r2, r3
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	f000 fe13 	bl	8008fa4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800837e:	4b07      	ldr	r3, [pc, #28]	; (800839c <HAL_SDRAM_Init+0x74>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a06      	ldr	r2, [pc, #24]	; (800839c <HAL_SDRAM_Init+0x74>)
 8008384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008388:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	52004000 	.word	0x52004000

080083a0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80083b2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d101      	bne.n	80083be <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80083ba:	2302      	movs	r3, #2
 80083bc:	e021      	b.n	8008402 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d002      	beq.n	80083ca <HAL_SDRAM_SendCommand+0x2a>
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	2b05      	cmp	r3, #5
 80083c8:	d118      	bne.n	80083fc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2202      	movs	r2, #2
 80083ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fe4c 	bl	8009078 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d104      	bne.n	80083f2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2205      	movs	r2, #5
 80083ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80083f0:	e006      	b.n	8008400 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80083fa:	e001      	b.n	8008400 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e000      	b.n	8008402 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3718      	adds	r7, #24
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b02      	cmp	r3, #2
 800841e:	d101      	bne.n	8008424 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008420:	2302      	movs	r3, #2
 8008422:	e016      	b.n	8008452 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b01      	cmp	r3, #1
 800842e:	d10f      	bne.n	8008450 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2202      	movs	r2, #2
 8008434:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	4618      	mov	r0, r3
 8008440:	f000 fe3e 	bl	80090c0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	e000      	b.n	8008452 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
}
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
	...

0800845c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e10f      	b.n	800868e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a87      	ldr	r2, [pc, #540]	; (8008698 <HAL_SPI_Init+0x23c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d00f      	beq.n	800849e <HAL_SPI_Init+0x42>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a86      	ldr	r2, [pc, #536]	; (800869c <HAL_SPI_Init+0x240>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00a      	beq.n	800849e <HAL_SPI_Init+0x42>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a84      	ldr	r2, [pc, #528]	; (80086a0 <HAL_SPI_Init+0x244>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d005      	beq.n	800849e <HAL_SPI_Init+0x42>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	2b0f      	cmp	r3, #15
 8008498:	d901      	bls.n	800849e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e0f7      	b.n	800868e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fd08 	bl	8008eb4 <SPI_GetPacketSize>
 80084a4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a7b      	ldr	r2, [pc, #492]	; (8008698 <HAL_SPI_Init+0x23c>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d00c      	beq.n	80084ca <HAL_SPI_Init+0x6e>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a79      	ldr	r2, [pc, #484]	; (800869c <HAL_SPI_Init+0x240>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d007      	beq.n	80084ca <HAL_SPI_Init+0x6e>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a78      	ldr	r2, [pc, #480]	; (80086a0 <HAL_SPI_Init+0x244>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d002      	beq.n	80084ca <HAL_SPI_Init+0x6e>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b08      	cmp	r3, #8
 80084c8:	d811      	bhi.n	80084ee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80084ce:	4a72      	ldr	r2, [pc, #456]	; (8008698 <HAL_SPI_Init+0x23c>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d009      	beq.n	80084e8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a70      	ldr	r2, [pc, #448]	; (800869c <HAL_SPI_Init+0x240>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d004      	beq.n	80084e8 <HAL_SPI_Init+0x8c>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a6f      	ldr	r2, [pc, #444]	; (80086a0 <HAL_SPI_Init+0x244>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d104      	bne.n	80084f2 <HAL_SPI_Init+0x96>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2b10      	cmp	r3, #16
 80084ec:	d901      	bls.n	80084f2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e0cd      	b.n	800868e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d106      	bne.n	800850c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7f8 fe14 	bl	8001134 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2202      	movs	r2, #2
 8008510:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f022 0201 	bic.w	r2, r2, #1
 8008522:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800852e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008538:	d119      	bne.n	800856e <HAL_SPI_Init+0x112>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008542:	d103      	bne.n	800854c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008548:	2b00      	cmp	r3, #0
 800854a:	d008      	beq.n	800855e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10c      	bne.n	800856e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008558:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800855c:	d107      	bne.n	800856e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800856c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00f      	beq.n	800859a <HAL_SPI_Init+0x13e>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	2b06      	cmp	r3, #6
 8008580:	d90b      	bls.n	800859a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	430a      	orrs	r2, r1
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	e007      	b.n	80085aa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	69da      	ldr	r2, [r3, #28]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b2:	431a      	orrs	r2, r3
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	431a      	orrs	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085bc:	ea42 0103 	orr.w	r1, r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68da      	ldr	r2, [r3, #12]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	431a      	orrs	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	431a      	orrs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	431a      	orrs	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	431a      	orrs	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	431a      	orrs	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	431a      	orrs	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	431a      	orrs	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fe:	431a      	orrs	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	431a      	orrs	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800860a:	ea42 0103 	orr.w	r1, r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	430a      	orrs	r2, r1
 8008618:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d113      	bne.n	800864a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008634:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008648:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f022 0201 	bic.w	r2, r2, #1
 8008658:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	430a      	orrs	r2, r1
 800867a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	40013000 	.word	0x40013000
 800869c:	40003800 	.word	0x40003800
 80086a0:	40003c00 	.word	0x40003c00

080086a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08e      	sub	sp, #56	; 0x38
 80086a8:	af02      	add	r7, sp, #8
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3320      	adds	r3, #32
 80086b8:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3330      	adds	r3, #48	; 0x30
 80086c0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c6:	095b      	lsrs	r3, r3, #5
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	3301      	adds	r3, #1
 80086cc:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086ce:	f7f9 f8e7 	bl	80018a0 <HAL_GetTick>
 80086d2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80086d4:	887b      	ldrh	r3, [r7, #2]
 80086d6:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 80086d8:	887b      	ldrh	r3, [r7, #2]
 80086da:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d001      	beq.n	80086ec <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80086e8:	2302      	movs	r3, #2
 80086ea:	e310      	b.n	8008d0e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d005      	beq.n	80086fe <HAL_SPI_TransmitReceive+0x5a>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d002      	beq.n	80086fe <HAL_SPI_TransmitReceive+0x5a>
 80086f8:	887b      	ldrh	r3, [r7, #2]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e305      	b.n	8008d0e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008708:	2b01      	cmp	r3, #1
 800870a:	d101      	bne.n	8008710 <HAL_SPI_TransmitReceive+0x6c>
 800870c:	2302      	movs	r3, #2
 800870e:	e2fe      	b.n	8008d0e <HAL_SPI_TransmitReceive+0x66a>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2205      	movs	r2, #5
 800871c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	887a      	ldrh	r2, [r7, #2]
 8008732:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	887a      	ldrh	r2, [r7, #2]
 800873a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	887a      	ldrh	r2, [r7, #2]
 8008748:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	887a      	ldrh	r2, [r7, #2]
 8008750:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68da      	ldr	r2, [r3, #12]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800876e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a70      	ldr	r2, [pc, #448]	; (8008938 <HAL_SPI_TransmitReceive+0x294>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d009      	beq.n	800878e <HAL_SPI_TransmitReceive+0xea>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a6f      	ldr	r2, [pc, #444]	; (800893c <HAL_SPI_TransmitReceive+0x298>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d004      	beq.n	800878e <HAL_SPI_TransmitReceive+0xea>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a6d      	ldr	r2, [pc, #436]	; (8008940 <HAL_SPI_TransmitReceive+0x29c>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d102      	bne.n	8008794 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800878e:	2310      	movs	r3, #16
 8008790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008792:	e001      	b.n	8008798 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8008794:	2308      	movs	r3, #8
 8008796:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	4b69      	ldr	r3, [pc, #420]	; (8008944 <HAL_SPI_TransmitReceive+0x2a0>)
 80087a0:	4013      	ands	r3, r2
 80087a2:	8879      	ldrh	r1, [r7, #2]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	6812      	ldr	r2, [r2, #0]
 80087a8:	430b      	orrs	r3, r1
 80087aa:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0201 	orr.w	r2, r2, #1
 80087ba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087c4:	d107      	bne.n	80087d6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	2b0f      	cmp	r3, #15
 80087dc:	f240 80a2 	bls.w	8008924 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80087e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e2:	089b      	lsrs	r3, r3, #2
 80087e4:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80087e6:	e094      	b.n	8008912 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d120      	bne.n	8008838 <HAL_SPI_TransmitReceive+0x194>
 80087f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d01d      	beq.n	8008838 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80087fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80087fe:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008802:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008804:	429a      	cmp	r2, r3
 8008806:	d217      	bcs.n	8008838 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6812      	ldr	r2, [r2, #0]
 8008812:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008818:	1d1a      	adds	r2, r3, #4
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008824:	b29b      	uxth	r3, r3
 8008826:	3b01      	subs	r3, #1
 8008828:	b29a      	uxth	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008836:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8008840:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008842:	2b00      	cmp	r3, #0
 8008844:	d065      	beq.n	8008912 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b01      	cmp	r3, #1
 8008852:	d118      	bne.n	8008886 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800885c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800885e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008864:	1d1a      	adds	r2, r3, #4
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008870:	b29b      	uxth	r3, r3
 8008872:	3b01      	subs	r3, #1
 8008874:	b29a      	uxth	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008882:	853b      	strh	r3, [r7, #40]	; 0x28
 8008884:	e045      	b.n	8008912 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008886:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008888:	8bfb      	ldrh	r3, [r7, #30]
 800888a:	429a      	cmp	r2, r3
 800888c:	d21d      	bcs.n	80088ca <HAL_SPI_TransmitReceive+0x226>
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d018      	beq.n	80088ca <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80088a2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088a8:	1d1a      	adds	r2, r3, #4
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	3b01      	subs	r3, #1
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088c6:	853b      	strh	r3, [r7, #40]	; 0x28
 80088c8:	e023      	b.n	8008912 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088ca:	f7f8 ffe9 	bl	80018a0 <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d803      	bhi.n	80088e2 <HAL_SPI_TransmitReceive+0x23e>
 80088da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e0:	d102      	bne.n	80088e8 <HAL_SPI_TransmitReceive+0x244>
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d114      	bne.n	8008912 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 fa15 	bl	8008d18 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e1fd      	b.n	8008d0e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008912:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008914:	2b00      	cmp	r3, #0
 8008916:	f47f af67 	bne.w	80087e8 <HAL_SPI_TransmitReceive+0x144>
 800891a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800891c:	2b00      	cmp	r3, #0
 800891e:	f47f af63 	bne.w	80087e8 <HAL_SPI_TransmitReceive+0x144>
 8008922:	e1ce      	b.n	8008cc2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	2b07      	cmp	r3, #7
 800892a:	f240 81c2 	bls.w	8008cb2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	085b      	lsrs	r3, r3, #1
 8008932:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008934:	e0c9      	b.n	8008aca <HAL_SPI_TransmitReceive+0x426>
 8008936:	bf00      	nop
 8008938:	40013000 	.word	0x40013000
 800893c:	40003800 	.word	0x40003800
 8008940:	40003c00 	.word	0x40003c00
 8008944:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b02      	cmp	r3, #2
 8008954:	d11f      	bne.n	8008996 <HAL_SPI_TransmitReceive+0x2f2>
 8008956:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01c      	beq.n	8008996 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800895c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800895e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008962:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008964:	429a      	cmp	r2, r3
 8008966:	d216      	bcs.n	8008996 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800896c:	881a      	ldrh	r2, [r3, #0]
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008976:	1c9a      	adds	r2, r3, #2
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008982:	b29b      	uxth	r3, r3
 8008984:	3b01      	subs	r3, #1
 8008986:	b29a      	uxth	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008994:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	695b      	ldr	r3, [r3, #20]
 800899c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800899e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f000 8092 	beq.w	8008aca <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d118      	bne.n	80089e6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089b8:	6a3a      	ldr	r2, [r7, #32]
 80089ba:	8812      	ldrh	r2, [r2, #0]
 80089bc:	b292      	uxth	r2, r2
 80089be:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089c4:	1c9a      	adds	r2, r3, #2
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	3b01      	subs	r3, #1
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80089e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80089e4:	e071      	b.n	8008aca <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80089e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80089e8:	8bfb      	ldrh	r3, [r7, #30]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d228      	bcs.n	8008a40 <HAL_SPI_TransmitReceive+0x39c>
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d023      	beq.n	8008a40 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089fc:	6a3a      	ldr	r2, [r7, #32]
 80089fe:	8812      	ldrh	r2, [r2, #0]
 8008a00:	b292      	uxth	r2, r2
 8008a02:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a08:	1c9a      	adds	r2, r3, #2
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a12:	6a3a      	ldr	r2, [r7, #32]
 8008a14:	8812      	ldrh	r2, [r2, #0]
 8008a16:	b292      	uxth	r2, r2
 8008a18:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a1e:	1c9a      	adds	r2, r3, #2
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	3b02      	subs	r3, #2
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a3c:	853b      	strh	r3, [r7, #40]	; 0x28
 8008a3e:	e044      	b.n	8008aca <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008a40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d11d      	bne.n	8008a82 <HAL_SPI_TransmitReceive+0x3de>
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d018      	beq.n	8008a82 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a54:	6a3a      	ldr	r2, [r7, #32]
 8008a56:	8812      	ldrh	r2, [r2, #0]
 8008a58:	b292      	uxth	r2, r2
 8008a5a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a60:	1c9a      	adds	r2, r3, #2
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a7e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008a80:	e023      	b.n	8008aca <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a82:	f7f8 ff0d 	bl	80018a0 <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d803      	bhi.n	8008a9a <HAL_SPI_TransmitReceive+0x3f6>
 8008a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a98:	d102      	bne.n	8008aa0 <HAL_SPI_TransmitReceive+0x3fc>
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d114      	bne.n	8008aca <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f000 f939 	bl	8008d18 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e121      	b.n	8008d0e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008aca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f47f af3b 	bne.w	8008948 <HAL_SPI_TransmitReceive+0x2a4>
 8008ad2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f47f af37 	bne.w	8008948 <HAL_SPI_TransmitReceive+0x2a4>
 8008ada:	e0f2      	b.n	8008cc2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	f003 0302 	and.w	r3, r3, #2
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d121      	bne.n	8008b2e <HAL_SPI_TransmitReceive+0x48a>
 8008aea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01e      	beq.n	8008b2e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008af0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008af2:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d218      	bcs.n	8008b2e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3320      	adds	r3, #32
 8008b06:	7812      	ldrb	r2, [r2, #0]
 8008b08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b0e:	1c5a      	adds	r2, r3, #1
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008b2c:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8008b36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 80ba 	beq.w	8008cb2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d11b      	bne.n	8008b84 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b58:	7812      	ldrb	r2, [r2, #0]
 8008b5a:	b2d2      	uxtb	r2, r2
 8008b5c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	3b01      	subs	r3, #1
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b80:	853b      	strh	r3, [r7, #40]	; 0x28
 8008b82:	e096      	b.n	8008cb2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008b84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008b86:	8bfb      	ldrh	r3, [r7, #30]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d24a      	bcs.n	8008c22 <HAL_SPI_TransmitReceive+0x57e>
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d045      	beq.n	8008c22 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ba2:	7812      	ldrb	r2, [r2, #0]
 8008ba4:	b2d2      	uxtb	r2, r2
 8008ba6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bbe:	7812      	ldrb	r2, [r2, #0]
 8008bc0:	b2d2      	uxtb	r2, r2
 8008bc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bda:	7812      	ldrb	r2, [r2, #0]
 8008bdc:	b2d2      	uxtb	r2, r2
 8008bde:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bf6:	7812      	ldrb	r2, [r2, #0]
 8008bf8:	b2d2      	uxtb	r2, r2
 8008bfa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	3b04      	subs	r3, #4
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c1e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008c20:	e047      	b.n	8008cb2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008c22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	d820      	bhi.n	8008c6a <HAL_SPI_TransmitReceive+0x5c6>
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d01b      	beq.n	8008c6a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c3e:	7812      	ldrb	r2, [r2, #0]
 8008c40:	b2d2      	uxtb	r2, r2
 8008c42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	3b01      	subs	r3, #1
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c66:	853b      	strh	r3, [r7, #40]	; 0x28
 8008c68:	e023      	b.n	8008cb2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c6a:	f7f8 fe19 	bl	80018a0 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d803      	bhi.n	8008c82 <HAL_SPI_TransmitReceive+0x5de>
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c80:	d102      	bne.n	8008c88 <HAL_SPI_TransmitReceive+0x5e4>
 8008c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d114      	bne.n	8008cb2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 f845 	bl	8008d18 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e02d      	b.n	8008d0e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008cb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f47f af11 	bne.w	8008adc <HAL_SPI_TransmitReceive+0x438>
 8008cba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f47f af0d 	bne.w	8008adc <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2108      	movs	r1, #8
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 f8c3 	bl	8008e58 <SPI_WaitOnFlagUntilTimeout>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d007      	beq.n	8008ce8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cde:	f043 0220 	orr.w	r2, r3, #32
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 f815 	bl	8008d18 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e000      	b.n	8008d0e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
  }
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3730      	adds	r7, #48	; 0x30
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop

08008d18 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	699a      	ldr	r2, [r3, #24]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f042 0208 	orr.w	r2, r2, #8
 8008d36:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	699a      	ldr	r2, [r3, #24]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f042 0210 	orr.w	r2, r2, #16
 8008d46:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 0201 	bic.w	r2, r2, #1
 8008d56:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6919      	ldr	r1, [r3, #16]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	4b3c      	ldr	r3, [pc, #240]	; (8008e54 <SPI_CloseTransfer+0x13c>)
 8008d64:	400b      	ands	r3, r1
 8008d66:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	689a      	ldr	r2, [r3, #8]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008d76:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b04      	cmp	r3, #4
 8008d82:	d014      	beq.n	8008dae <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00f      	beq.n	8008dae <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	699a      	ldr	r2, [r3, #24]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f042 0220 	orr.w	r2, r2, #32
 8008dac:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b03      	cmp	r3, #3
 8008db8:	d014      	beq.n	8008de4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00f      	beq.n	8008de4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008dca:	f043 0204 	orr.w	r2, r3, #4
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	699a      	ldr	r2, [r3, #24]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008de2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00f      	beq.n	8008e0e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008df4:	f043 0201 	orr.w	r2, r3, #1
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	699a      	ldr	r2, [r3, #24]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e0c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00f      	beq.n	8008e38 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e1e:	f043 0208 	orr.w	r2, r3, #8
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	699a      	ldr	r2, [r3, #24]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e36:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008e48:	bf00      	nop
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	fffffc90 	.word	0xfffffc90

08008e58 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	603b      	str	r3, [r7, #0]
 8008e64:	4613      	mov	r3, r2
 8008e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008e68:	e010      	b.n	8008e8c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e6a:	f7f8 fd19 	bl	80018a0 <HAL_GetTick>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d803      	bhi.n	8008e82 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e80:	d102      	bne.n	8008e88 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d101      	bne.n	8008e8c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e00f      	b.n	8008eac <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	695a      	ldr	r2, [r3, #20]
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	4013      	ands	r3, r2
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	bf0c      	ite	eq
 8008e9c:	2301      	moveq	r3, #1
 8008e9e:	2300      	movne	r3, #0
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	79fb      	ldrb	r3, [r7, #7]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d0df      	beq.n	8008e6a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec0:	095b      	lsrs	r3, r3, #5
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	3307      	adds	r3, #7
 8008ed2:	08db      	lsrs	r3, r3, #3
 8008ed4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	fb02 f303 	mul.w	r3, r2, r3
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
	...

08008eec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d121      	bne.n	8008f42 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	4b27      	ldr	r3, [pc, #156]	; (8008fa0 <FMC_SDRAM_Init+0xb4>)
 8008f04:	4013      	ands	r3, r2
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	6851      	ldr	r1, [r2, #4]
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	6892      	ldr	r2, [r2, #8]
 8008f0e:	4311      	orrs	r1, r2
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	68d2      	ldr	r2, [r2, #12]
 8008f14:	4311      	orrs	r1, r2
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	6912      	ldr	r2, [r2, #16]
 8008f1a:	4311      	orrs	r1, r2
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	6952      	ldr	r2, [r2, #20]
 8008f20:	4311      	orrs	r1, r2
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	6992      	ldr	r2, [r2, #24]
 8008f26:	4311      	orrs	r1, r2
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	69d2      	ldr	r2, [r2, #28]
 8008f2c:	4311      	orrs	r1, r2
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	6a12      	ldr	r2, [r2, #32]
 8008f32:	4311      	orrs	r1, r2
 8008f34:	683a      	ldr	r2, [r7, #0]
 8008f36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	601a      	str	r2, [r3, #0]
 8008f40:	e026      	b.n	8008f90 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	69d9      	ldr	r1, [r3, #28]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	4319      	orrs	r1, r3
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	4b0e      	ldr	r3, [pc, #56]	; (8008fa0 <FMC_SDRAM_Init+0xb4>)
 8008f66:	4013      	ands	r3, r2
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	6851      	ldr	r1, [r2, #4]
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	6892      	ldr	r2, [r2, #8]
 8008f70:	4311      	orrs	r1, r2
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	68d2      	ldr	r2, [r2, #12]
 8008f76:	4311      	orrs	r1, r2
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	6912      	ldr	r2, [r2, #16]
 8008f7c:	4311      	orrs	r1, r2
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	6952      	ldr	r2, [r2, #20]
 8008f82:	4311      	orrs	r1, r2
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	6992      	ldr	r2, [r2, #24]
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	ffff8000 	.word	0xffff8000

08008fa4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d128      	bne.n	8009008 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	1e59      	subs	r1, r3, #1
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	4319      	orrs	r1, r3
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	021b      	lsls	r3, r3, #8
 8008fd6:	4319      	orrs	r1, r3
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	031b      	lsls	r3, r3, #12
 8008fe0:	4319      	orrs	r1, r3
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	041b      	lsls	r3, r3, #16
 8008fea:	4319      	orrs	r1, r3
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	695b      	ldr	r3, [r3, #20]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	051b      	lsls	r3, r3, #20
 8008ff4:	4319      	orrs	r1, r3
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	061b      	lsls	r3, r3, #24
 8008ffe:	430b      	orrs	r3, r1
 8009000:	431a      	orrs	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	609a      	str	r2, [r3, #8]
 8009006:	e02d      	b.n	8009064 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	4b19      	ldr	r3, [pc, #100]	; (8009074 <FMC_SDRAM_Timing_Init+0xd0>)
 800900e:	4013      	ands	r3, r2
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	68d2      	ldr	r2, [r2, #12]
 8009014:	3a01      	subs	r2, #1
 8009016:	0311      	lsls	r1, r2, #12
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	6952      	ldr	r2, [r2, #20]
 800901c:	3a01      	subs	r2, #1
 800901e:	0512      	lsls	r2, r2, #20
 8009020:	430a      	orrs	r2, r1
 8009022:	431a      	orrs	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	1e59      	subs	r1, r3, #1
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	3b01      	subs	r3, #1
 800903c:	011b      	lsls	r3, r3, #4
 800903e:	4319      	orrs	r1, r3
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	3b01      	subs	r3, #1
 8009046:	021b      	lsls	r3, r3, #8
 8009048:	4319      	orrs	r1, r3
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	3b01      	subs	r3, #1
 8009050:	041b      	lsls	r3, r3, #16
 8009052:	4319      	orrs	r1, r3
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	3b01      	subs	r3, #1
 800905a:	061b      	lsls	r3, r3, #24
 800905c:	430b      	orrs	r3, r1
 800905e:	431a      	orrs	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	ff0f0fff 	.word	0xff0f0fff

08009078 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	691a      	ldr	r2, [r3, #16]
 8009088:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <FMC_SDRAM_SendCommand+0x44>)
 800908a:	4013      	ands	r3, r2
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	6811      	ldr	r1, [r2, #0]
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	6852      	ldr	r2, [r2, #4]
 8009094:	4311      	orrs	r1, r2
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	6892      	ldr	r2, [r2, #8]
 800909a:	3a01      	subs	r2, #1
 800909c:	0152      	lsls	r2, r2, #5
 800909e:	4311      	orrs	r1, r2
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	68d2      	ldr	r2, [r2, #12]
 80090a4:	0252      	lsls	r2, r2, #9
 80090a6:	430a      	orrs	r2, r1
 80090a8:	431a      	orrs	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	ffc00000 	.word	0xffc00000

080090c0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695a      	ldr	r2, [r3, #20]
 80090ce:	4b07      	ldr	r3, [pc, #28]	; (80090ec <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80090d0:	4013      	ands	r3, r2
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	0052      	lsls	r2, r2, #1
 80090d6:	431a      	orrs	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	ffffc001 	.word	0xffffc001

080090f0 <memset>:
 80090f0:	4402      	add	r2, r0
 80090f2:	4603      	mov	r3, r0
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d100      	bne.n	80090fa <memset+0xa>
 80090f8:	4770      	bx	lr
 80090fa:	f803 1b01 	strb.w	r1, [r3], #1
 80090fe:	e7f9      	b.n	80090f4 <memset+0x4>

08009100 <__libc_init_array>:
 8009100:	b570      	push	{r4, r5, r6, lr}
 8009102:	4d0d      	ldr	r5, [pc, #52]	; (8009138 <__libc_init_array+0x38>)
 8009104:	4c0d      	ldr	r4, [pc, #52]	; (800913c <__libc_init_array+0x3c>)
 8009106:	1b64      	subs	r4, r4, r5
 8009108:	10a4      	asrs	r4, r4, #2
 800910a:	2600      	movs	r6, #0
 800910c:	42a6      	cmp	r6, r4
 800910e:	d109      	bne.n	8009124 <__libc_init_array+0x24>
 8009110:	4d0b      	ldr	r5, [pc, #44]	; (8009140 <__libc_init_array+0x40>)
 8009112:	4c0c      	ldr	r4, [pc, #48]	; (8009144 <__libc_init_array+0x44>)
 8009114:	f000 f818 	bl	8009148 <_init>
 8009118:	1b64      	subs	r4, r4, r5
 800911a:	10a4      	asrs	r4, r4, #2
 800911c:	2600      	movs	r6, #0
 800911e:	42a6      	cmp	r6, r4
 8009120:	d105      	bne.n	800912e <__libc_init_array+0x2e>
 8009122:	bd70      	pop	{r4, r5, r6, pc}
 8009124:	f855 3b04 	ldr.w	r3, [r5], #4
 8009128:	4798      	blx	r3
 800912a:	3601      	adds	r6, #1
 800912c:	e7ee      	b.n	800910c <__libc_init_array+0xc>
 800912e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009132:	4798      	blx	r3
 8009134:	3601      	adds	r6, #1
 8009136:	e7f2      	b.n	800911e <__libc_init_array+0x1e>
 8009138:	08009178 	.word	0x08009178
 800913c:	08009178 	.word	0x08009178
 8009140:	08009178 	.word	0x08009178
 8009144:	0800917c 	.word	0x0800917c

08009148 <_init>:
 8009148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914a:	bf00      	nop
 800914c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914e:	bc08      	pop	{r3}
 8009150:	469e      	mov	lr, r3
 8009152:	4770      	bx	lr

08009154 <_fini>:
 8009154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009156:	bf00      	nop
 8009158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800915a:	bc08      	pop	{r3}
 800915c:	469e      	mov	lr, r3
 800915e:	4770      	bx	lr
