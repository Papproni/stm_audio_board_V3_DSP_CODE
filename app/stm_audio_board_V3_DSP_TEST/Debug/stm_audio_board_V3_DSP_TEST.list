
stm_audio_board_V3_DSP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .sdram_section 0000002a  c0000000  c0000000  00030000  2**2
                  ALLOC
  2 .text         0000f4a8  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000070  0800f774  0800f774  0001f774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f7e4  0800f7e4  0001f7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f7e8  0800f7e8  0001f7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  0800f7ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001fe4  24000100  0800f8ec  00020100  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240020e4  0800f8ec  000220e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002012e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000207d9  00000000  00000000  00020171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004f68  00000000  00000000  0004094a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001750  00000000  00000000  000458b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001189  00000000  00000000  00047008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037db7  00000000  00000000  00048191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002427e  00000000  00000000  0007ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014c2ed  00000000  00000000  000a41c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005f08  00000000  00000000  001f04b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000092  00000000  00000000  001f63bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000100 	.word	0x24000100
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800f75c 	.word	0x0800f75c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000104 	.word	0x24000104
 8000308:	0800f75c 	.word	0x0800f75c

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <ad1939_write_reg>:
#include "AD1939_driver.h"


// send bytes
int ad1939_write_reg(uint8_t reg_address, uint8_t data){
 800031c:	b580      	push	{r7, lr}
 800031e:	b086      	sub	sp, #24
 8000320:	af02      	add	r7, sp, #8
 8000322:	4603      	mov	r3, r0
 8000324:	460a      	mov	r2, r1
 8000326:	71fb      	strb	r3, [r7, #7]
 8000328:	4613      	mov	r3, r2
 800032a:	71bb      	strb	r3, [r7, #6]
	int8_t retval = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	73fb      	strb	r3, [r7, #15]
	TXdata[0] = AD1939_Global_Address_Write;
 8000330:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <ad1939_write_reg+0x4c>)
 8000332:	2208      	movs	r2, #8
 8000334:	701a      	strb	r2, [r3, #0]
	TXdata[1] = reg_address;
 8000336:	4a0c      	ldr	r2, [pc, #48]	; (8000368 <ad1939_write_reg+0x4c>)
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	7053      	strb	r3, [r2, #1]
	TXdata[2] = data;
 800033c:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <ad1939_write_reg+0x4c>)
 800033e:	79bb      	ldrb	r3, [r7, #6]
 8000340:	7093      	strb	r3, [r2, #2]

//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000342:	4b0a      	ldr	r3, [pc, #40]	; (800036c <ad1939_write_reg+0x50>)
 8000344:	6818      	ldr	r0, [r3, #0]
 8000346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2303      	movs	r3, #3
 800034e:	4a08      	ldr	r2, [pc, #32]	; (8000370 <ad1939_write_reg+0x54>)
 8000350:	4905      	ldr	r1, [pc, #20]	; (8000368 <ad1939_write_reg+0x4c>)
 8000352:	f00a fc75 	bl	800ac40 <HAL_SPI_TransmitReceive>
 8000356:	4603      	mov	r3, r0
 8000358:	73fb      	strb	r3, [r7, #15]
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 //HAL_Delay(10);
	return retval;
 800035a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800035e:	4618      	mov	r0, r3
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	24000120 	.word	0x24000120
 800036c:	2400011c 	.word	0x2400011c
 8000370:	24000124 	.word	0x24000124

08000374 <ad1939_pll_locked>:

	return retval;
}

int ad1939_pll_locked()
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af02      	add	r7, sp, #8
	TXdata[0] = AD1939_Global_Address_Read;
 800037a:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <ad1939_pll_locked+0x3c>)
 800037c:	2209      	movs	r2, #9
 800037e:	701a      	strb	r2, [r3, #0]
	TXdata[1] = AD1939_PLL_Control_1;
 8000380:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <ad1939_pll_locked+0x3c>)
 8000382:	2201      	movs	r2, #1
 8000384:	705a      	strb	r2, [r3, #1]
	TXdata[2] = 0b00000100;
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <ad1939_pll_locked+0x3c>)
 8000388:	2204      	movs	r2, #4
 800038a:	709a      	strb	r2, [r3, #2]
	HAL_Delay(10);
 800038c:	200a      	movs	r0, #10
 800038e:	f001 fc0d 	bl	8001bac <HAL_Delay>
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <ad1939_pll_locked+0x40>)
 8000394:	6818      	ldr	r0, [r3, #0]
 8000396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800039a:	9300      	str	r3, [sp, #0]
 800039c:	2303      	movs	r3, #3
 800039e:	4a06      	ldr	r2, [pc, #24]	; (80003b8 <ad1939_pll_locked+0x44>)
 80003a0:	4903      	ldr	r1, [pc, #12]	; (80003b0 <ad1939_pll_locked+0x3c>)
 80003a2:	f00a fc4d 	bl	800ac40 <HAL_SPI_TransmitReceive>
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 return 0;
 80003a6:	2300      	movs	r3, #0
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	24000120 	.word	0x24000120
 80003b4:	2400011c 	.word	0x2400011c
 80003b8:	24000124 	.word	0x24000124

080003bc <ad1939_init>:

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
    AD1939_spi = hspi_codec;
 80003c4:	4a3d      	ldr	r2, [pc, #244]	; (80004bc <ad1939_init+0x100>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	6013      	str	r3, [r2, #0]

    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 80003ca:	21be      	movs	r1, #190	; 0xbe
 80003cc:	2000      	movs	r0, #0
 80003ce:	f7ff ffa5 	bl	800031c <ad1939_write_reg>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d002      	beq.n	80003de <ad1939_init+0x22>
 80003d8:	f04f 33ff 	mov.w	r3, #4294967295
 80003dc:	e069      	b.n	80004b2 <ad1939_init+0xf6>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 80003de:	2104      	movs	r1, #4
 80003e0:	2001      	movs	r0, #1
 80003e2:	f7ff ff9b 	bl	800031c <ad1939_write_reg>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <ad1939_init+0x36>
 80003ec:	f04f 33ff 	mov.w	r3, #4294967295
 80003f0:	e05f      	b.n	80004b2 <ad1939_init+0xf6>





    HAL_Delay(100);
 80003f2:	2064      	movs	r0, #100	; 0x64
 80003f4:	f001 fbda 	bl	8001bac <HAL_Delay>

    if(ad1939_pll_locked()){
 80003f8:	f7ff ffbc 	bl	8000374 <ad1939_pll_locked>
    // 192 khz
    //    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000100)) return -1;
    // 96 khz
//            if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000010)) return -1;
    // 48 Khz
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b01000000)) return -1;
 80003fc:	2140      	movs	r1, #64	; 0x40
 80003fe:	2002      	movs	r0, #2
 8000400:	f7ff ff8c 	bl	800031c <ad1939_write_reg>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d002      	beq.n	8000410 <ad1939_init+0x54>
 800040a:	f04f 33ff 	mov.w	r3, #4294967295
 800040e:	e050      	b.n	80004b2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000100)) return -1; // Slave setup
 8000410:	2104      	movs	r1, #4
 8000412:	2003      	movs	r0, #3
 8000414:	f7ff ff82 	bl	800031c <ad1939_write_reg>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d002      	beq.n	8000424 <ad1939_init+0x68>
 800041e:	f04f 33ff 	mov.w	r3, #4294967295
 8000422:	e046      	b.n	80004b2 <ad1939_init+0xf6>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 8000424:	2100      	movs	r1, #0
 8000426:	2004      	movs	r0, #4
 8000428:	f7ff ff78 	bl	800031c <ad1939_write_reg>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d002      	beq.n	8000438 <ad1939_init+0x7c>
 8000432:	f04f 33ff 	mov.w	r3, #4294967295
 8000436:	e03c      	b.n	80004b2 <ad1939_init+0xf6>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 8000438:	2100      	movs	r1, #0
 800043a:	2005      	movs	r0, #5
 800043c:	f7ff ff6e 	bl	800031c <ad1939_write_reg>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d002      	beq.n	800044c <ad1939_init+0x90>
 8000446:	f04f 33ff 	mov.w	r3, #4294967295
 800044a:	e032      	b.n	80004b2 <ad1939_init+0xf6>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 800044c:	2100      	movs	r1, #0
 800044e:	2008      	movs	r0, #8
 8000450:	f7ff ff64 	bl	800031c <ad1939_write_reg>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d002      	beq.n	8000460 <ad1939_init+0xa4>
 800045a:	f04f 33ff 	mov.w	r3, #4294967295
 800045e:	e028      	b.n	80004b2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 8000460:	2100      	movs	r1, #0
 8000462:	2009      	movs	r0, #9
 8000464:	f7ff ff5a 	bl	800031c <ad1939_write_reg>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d002      	beq.n	8000474 <ad1939_init+0xb8>
 800046e:	f04f 33ff 	mov.w	r3, #4294967295
 8000472:	e01e      	b.n	80004b2 <ad1939_init+0xf6>
    // 192 khz
	//    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b10000000)) return -1;
    // 96khz
//        if (ad1939_write_reg(AD1939_ADC_Control_0, 0b01000000)) return -1;
        // 48 Khz
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 8000474:	2100      	movs	r1, #0
 8000476:	200e      	movs	r0, #14
 8000478:	f7ff ff50 	bl	800031c <ad1939_write_reg>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d002      	beq.n	8000488 <ad1939_init+0xcc>
 8000482:	f04f 33ff 	mov.w	r3, #4294967295
 8000486:	e014      	b.n	80004b2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0b00100000 )) return -1;
 8000488:	2120      	movs	r1, #32
 800048a:	200f      	movs	r0, #15
 800048c:	f7ff ff46 	bl	800031c <ad1939_write_reg>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d002      	beq.n	800049c <ad1939_init+0xe0>
 8000496:	f04f 33ff 	mov.w	r3, #4294967295
 800049a:	e00a      	b.n	80004b2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 800049c:	2100      	movs	r1, #0
 800049e:	2010      	movs	r0, #16
 80004a0:	f7ff ff3c 	bl	800031c <ad1939_write_reg>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d002      	beq.n	80004b0 <ad1939_init+0xf4>
 80004aa:	f04f 33ff 	mov.w	r3, #4294967295
 80004ae:	e000      	b.n	80004b2 <ad1939_init+0xf6>



    return 0; // Return 0 if all writes are successful
 80004b0:	2300      	movs	r3, #0
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	2400011c 	.word	0x2400011c

080004c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c6:	4b19      	ldr	r3, [pc, #100]	; (800052c <MX_DMA_Init+0x6c>)
 80004c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004cc:	4a17      	ldr	r2, [pc, #92]	; (800052c <MX_DMA_Init+0x6c>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <MX_DMA_Init+0x6c>)
 80004d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004dc:	f003 0301 	and.w	r3, r3, #1
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_DMA_Init+0x6c>)
 80004e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004ea:	4a10      	ldr	r2, [pc, #64]	; (800052c <MX_DMA_Init+0x6c>)
 80004ec:	f043 0302 	orr.w	r3, r3, #2
 80004f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <MX_DMA_Init+0x6c>)
 80004f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004fa:	f003 0302 	and.w	r3, r3, #2
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	200b      	movs	r0, #11
 8000508:	f001 fc4f 	bl	8001daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800050c:	200b      	movs	r0, #11
 800050e:	f001 fc66 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	2038      	movs	r0, #56	; 0x38
 8000518:	f001 fc47 	bl	8001daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800051c:	2038      	movs	r0, #56	; 0x38
 800051e:	f001 fc5e 	bl	8001dde <HAL_NVIC_EnableIRQ>

}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	58024400 	.word	0x58024400

08000530 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b090      	sub	sp, #64	; 0x40
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]
 8000546:	615a      	str	r2, [r3, #20]
 8000548:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800054a:	4b2c      	ldr	r3, [pc, #176]	; (80005fc <MX_FMC_Init+0xcc>)
 800054c:	4a2c      	ldr	r2, [pc, #176]	; (8000600 <MX_FMC_Init+0xd0>)
 800054e:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000550:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <MX_FMC_Init+0xcc>)
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000556:	4b29      	ldr	r3, [pc, #164]	; (80005fc <MX_FMC_Init+0xcc>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 800055c:	4b27      	ldr	r3, [pc, #156]	; (80005fc <MX_FMC_Init+0xcc>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000562:	4b26      	ldr	r3, [pc, #152]	; (80005fc <MX_FMC_Init+0xcc>)
 8000564:	2210      	movs	r2, #16
 8000566:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000568:	4b24      	ldr	r3, [pc, #144]	; (80005fc <MX_FMC_Init+0xcc>)
 800056a:	2200      	movs	r2, #0
 800056c:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800056e:	4b23      	ldr	r3, [pc, #140]	; (80005fc <MX_FMC_Init+0xcc>)
 8000570:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000574:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000576:	4b21      	ldr	r3, [pc, #132]	; (80005fc <MX_FMC_Init+0xcc>)
 8000578:	2200      	movs	r2, #0
 800057a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <MX_FMC_Init+0xcc>)
 800057e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000582:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000584:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <MX_FMC_Init+0xcc>)
 8000586:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800058a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <MX_FMC_Init+0xcc>)
 800058e:	2200      	movs	r2, #0
 8000590:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000592:	2310      	movs	r3, #16
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000596:	2310      	movs	r3, #16
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 16;
 800059a:	2310      	movs	r3, #16
 800059c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SdramTiming.RowCycleDelay = 16;
 800059e:	2310      	movs	r3, #16
 80005a0:	633b      	str	r3, [r7, #48]	; 0x30
  SdramTiming.WriteRecoveryTime = 16;
 80005a2:	2310      	movs	r3, #16
 80005a4:	637b      	str	r3, [r7, #52]	; 0x34
  SdramTiming.RPDelay = 16;
 80005a6:	2310      	movs	r3, #16
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  SdramTiming.RCDDelay = 16;
 80005aa:	2310      	movs	r3, #16
 80005ac:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80005ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b2:	4619      	mov	r1, r3
 80005b4:	4811      	ldr	r0, [pc, #68]	; (80005fc <MX_FMC_Init+0xcc>)
 80005b6:	f00a f985 	bl	800a8c4 <HAL_SDRAM_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 80005c0:	f000 fe05 	bl	80011ce <Error_Handler>

//    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 2500);


    IS42S16800J_Context_t my_sdram;
    my_sdram.TargetBank  = FMC_SDRAM_CMD_TARGET_BANK1;
 80005c4:	2310      	movs	r3, #16
 80005c6:	607b      	str	r3, [r7, #4]
    my_sdram.RefreshMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80005c8:	2303      	movs	r3, #3
 80005ca:	60bb      	str	r3, [r7, #8]
    my_sdram.RefreshRate = REFRESH_COUNT;
 80005cc:	f240 63d6 	movw	r3, #1750	; 0x6d6
 80005d0:	60fb      	str	r3, [r7, #12]
    my_sdram.CASLatency  = IS42S16800J_CAS_LATENCY_3;
 80005d2:	2330      	movs	r3, #48	; 0x30
 80005d4:	61bb      	str	r3, [r7, #24]
    my_sdram.OperationMode = IS42S16800J_OPERATING_MODE_STANDARD;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
    my_sdram.WriteBurstMode = IS42S16800J_WRITEBURST_MODE_SINGLE;
 80005da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005de:	623b      	str	r3, [r7, #32]
    my_sdram.BurstType 		= IS42S16800J_BURST_TYPE_SEQUENTIAL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
    my_sdram.BurstLength 	= IS42S16800J_BURST_LENGTH_1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]

    IS42S16800J_Init(&hsdram1, &my_sdram);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	4619      	mov	r1, r3
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <MX_FMC_Init+0xcc>)
 80005ee:	f000 f975 	bl	80008dc <IS42S16800J_Init>
  /* USER CODE END FMC_Init 2 */
}
 80005f2:	bf00      	nop
 80005f4:	3740      	adds	r7, #64	; 0x40
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	24000128 	.word	0x24000128
 8000600:	52004140 	.word	0x52004140

08000604 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000604:	b580      	push	{r7, lr}
 8000606:	b0b6      	sub	sp, #216	; 0xd8
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800061a:	4b5b      	ldr	r3, [pc, #364]	; (8000788 <HAL_FMC_MspInit+0x184>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	f040 80ae 	bne.w	8000780 <HAL_FMC_MspInit+0x17c>
    return;
  }
  FMC_Initialized = 1;
 8000624:	4b58      	ldr	r3, [pc, #352]	; (8000788 <HAL_FMC_MspInit+0x184>)
 8000626:	2201      	movs	r2, #1
 8000628:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	22b8      	movs	r2, #184	; 0xb8
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f00f f866 	bl	800f704 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000638:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800063c:	f04f 0300 	mov.w	r3, #0
 8000640:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000644:	2300      	movs	r3, #0
 8000646:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	4618      	mov	r0, r3
 800064e:	f006 ff61 	bl	8007514 <HAL_RCCEx_PeriphCLKConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000658:	f000 fdb9 	bl	80011ce <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800065c:	4b4b      	ldr	r3, [pc, #300]	; (800078c <HAL_FMC_MspInit+0x188>)
 800065e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000662:	4a4a      	ldr	r2, [pc, #296]	; (800078c <HAL_FMC_MspInit+0x188>)
 8000664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000668:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800066c:	4b47      	ldr	r3, [pc, #284]	; (800078c <HAL_FMC_MspInit+0x188>)
 800066e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000672:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800067a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800067e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000694:	230c      	movs	r3, #12
 8000696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800069a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800069e:	4619      	mov	r1, r3
 80006a0:	483b      	ldr	r0, [pc, #236]	; (8000790 <HAL_FMC_MspInit+0x18c>)
 80006a2:	f003 fc97 	bl	8003fd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80006a6:	230d      	movs	r3, #13
 80006a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b8:	2303      	movs	r3, #3
 80006ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006be:	230c      	movs	r3, #12
 80006c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006c8:	4619      	mov	r1, r3
 80006ca:	4832      	ldr	r0, [pc, #200]	; (8000794 <HAL_FMC_MspInit+0x190>)
 80006cc:	f003 fc82 	bl	8003fd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006d0:	2330      	movs	r3, #48	; 0x30
 80006d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006e8:	230c      	movs	r3, #12
 80006ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006f2:	4619      	mov	r1, r3
 80006f4:	4828      	ldr	r0, [pc, #160]	; (8000798 <HAL_FMC_MspInit+0x194>)
 80006f6:	f003 fc6d 	bl	8003fd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 80006fa:	f248 1311 	movw	r3, #33041	; 0x8111
 80006fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000714:	230c      	movs	r3, #12
 8000716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800071a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800071e:	4619      	mov	r1, r3
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <HAL_FMC_MspInit+0x198>)
 8000722:	f003 fc57 	bl	8003fd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000726:	f24e 7383 	movw	r3, #59267	; 0xe783
 800072a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	2302      	movs	r3, #2
 8000730:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000740:	230c      	movs	r3, #12
 8000742:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000746:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800074a:	4619      	mov	r1, r3
 800074c:	4814      	ldr	r0, [pc, #80]	; (80007a0 <HAL_FMC_MspInit+0x19c>)
 800074e:	f003 fc41 	bl	8003fd4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000752:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000756:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800076c:	230c      	movs	r3, #12
 800076e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000772:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000776:	4619      	mov	r1, r3
 8000778:	480a      	ldr	r0, [pc, #40]	; (80007a4 <HAL_FMC_MspInit+0x1a0>)
 800077a:	f003 fc2b 	bl	8003fd4 <HAL_GPIO_Init>
 800077e:	e000      	b.n	8000782 <HAL_FMC_MspInit+0x17e>
    return;
 8000780:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000782:	37d8      	adds	r7, #216	; 0xd8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2400015c 	.word	0x2400015c
 800078c:	58024400 	.word	0x58024400
 8000790:	58021400 	.word	0x58021400
 8000794:	58020800 	.word	0x58020800
 8000798:	58020000 	.word	0x58020000
 800079c:	58021800 	.word	0x58021800
 80007a0:	58021000 	.word	0x58021000
 80007a4:	58020c00 	.word	0x58020c00

080007a8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007b0:	f7ff ff28 	bl	8000604 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	; 0x30
 80007c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d2:	4b40      	ldr	r3, [pc, #256]	; (80008d4 <MX_GPIO_Init+0x118>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d8:	4a3e      	ldr	r2, [pc, #248]	; (80008d4 <MX_GPIO_Init+0x118>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e2:	4b3c      	ldr	r3, [pc, #240]	; (80008d4 <MX_GPIO_Init+0x118>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e8:	f003 0310 	and.w	r3, r3, #16
 80007ec:	61bb      	str	r3, [r7, #24]
 80007ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f0:	4b38      	ldr	r3, [pc, #224]	; (80008d4 <MX_GPIO_Init+0x118>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f6:	4a37      	ldr	r2, [pc, #220]	; (80008d4 <MX_GPIO_Init+0x118>)
 80007f8:	f043 0320 	orr.w	r3, r3, #32
 80007fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000800:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <MX_GPIO_Init+0x118>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000806:	f003 0320 	and.w	r3, r3, #32
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	4b31      	ldr	r3, [pc, #196]	; (80008d4 <MX_GPIO_Init+0x118>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	4a2f      	ldr	r2, [pc, #188]	; (80008d4 <MX_GPIO_Init+0x118>)
 8000816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081e:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <MX_GPIO_Init+0x118>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082c:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <MX_GPIO_Init+0x118>)
 800082e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000832:	4a28      	ldr	r2, [pc, #160]	; (80008d4 <MX_GPIO_Init+0x118>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083c:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <MX_GPIO_Init+0x118>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <MX_GPIO_Init+0x118>)
 800084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000850:	4a20      	ldr	r2, [pc, #128]	; (80008d4 <MX_GPIO_Init+0x118>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_GPIO_Init+0x118>)
 800085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_GPIO_Init+0x118>)
 800086a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <MX_GPIO_Init+0x118>)
 8000870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_GPIO_Init+0x118>)
 800087a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_GPIO_Init+0x118>)
 8000888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088c:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <MX_GPIO_Init+0x118>)
 800088e:	f043 0308 	orr.w	r3, r3, #8
 8000892:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_GPIO_Init+0x118>)
 8000898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089c:	f003 0308 	and.w	r3, r3, #8
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2120      	movs	r1, #32
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <MX_GPIO_Init+0x11c>)
 80008aa:	f003 fd3b 	bl	8004324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008ae:	2320      	movs	r3, #32
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_GPIO_Init+0x11c>)
 80008c6:	f003 fb85 	bl	8003fd4 <HAL_GPIO_Init>

}
 80008ca:	bf00      	nop
 80008cc:	3730      	adds	r7, #48	; 0x30
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	58024400 	.word	0x58024400
 80008d8:	58021800 	.word	0x58021800

080008dc <IS42S16800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S16800J_ERROR;
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S16800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f832 	bl	800095c <IS42S16800J_ClockEnable>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d128      	bne.n	8000950 <IS42S16800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S16800J_Delay(1);
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 f8e2 	bl	8000ac8 <IS42S16800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S16800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S16800J_OK)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f000 f84a 	bl	80009a4 <IS42S16800J_Precharge>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d11c      	bne.n	8000950 <IS42S16800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S16800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S16800J_OK)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	6819      	ldr	r1, [r3, #0]
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	461a      	mov	r2, r3
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f000 f897 	bl	8000a54 <IS42S16800J_RefreshMode>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d111      	bne.n	8000950 <IS42S16800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S16800J_ModeRegConfig(Ctx, pRegMode) == IS42S16800J_OK)
 800092c:	6839      	ldr	r1, [r7, #0]
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f000 f85c 	bl	80009ec <IS42S16800J_ModeRegConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d10a      	bne.n	8000950 <IS42S16800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S16800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S16800J_OK)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	4619      	mov	r1, r3
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f000 f8ad 	bl	8000aa0 <IS42S16800J_RefreshRate>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d101      	bne.n	8000950 <IS42S16800J_Init+0x74>
          {
            ret = IS42S16800J_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8000950:	68fb      	ldr	r3, [r7, #12]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <IS42S16800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_CLK_ENABLE_CMD;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <IS42S16800J_ClockEnable+0x44>)
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800096c:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <IS42S16800J_ClockEnable+0x44>)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <IS42S16800J_ClockEnable+0x44>)
 8000974:	2201      	movs	r2, #1
 8000976:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <IS42S16800J_ClockEnable+0x44>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 800097e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000982:	4907      	ldr	r1, [pc, #28]	; (80009a0 <IS42S16800J_ClockEnable+0x44>)
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f009 ffd9 	bl	800a93c <HAL_SDRAM_SendCommand>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d002      	beq.n	8000996 <IS42S16800J_ClockEnable+0x3a>
  {
    return IS42S16800J_ERROR;
 8000990:	f04f 33ff 	mov.w	r3, #4294967295
 8000994:	e000      	b.n	8000998 <IS42S16800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 8000996:	2300      	movs	r3, #0
  }
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24000160 	.word	0x24000160

080009a4 <IS42S16800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S16800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S16800J_PALL_CMD;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <IS42S16800J_Precharge+0x44>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80009b4:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <IS42S16800J_Precharge+0x44>)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <IS42S16800J_Precharge+0x44>)
 80009bc:	2201      	movs	r2, #1
 80009be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <IS42S16800J_Precharge+0x44>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 80009c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ca:	4907      	ldr	r1, [pc, #28]	; (80009e8 <IS42S16800J_Precharge+0x44>)
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f009 ffb5 	bl	800a93c <HAL_SDRAM_SendCommand>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <IS42S16800J_Precharge+0x3a>
  {
    return IS42S16800J_ERROR;
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	e000      	b.n	80009e0 <IS42S16800J_Precharge+0x3c>
  }
  else
  {
    return IS42S16800J_OK;
 80009de:	2300      	movs	r3, #0
  }
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	24000160 	.word	0x24000160

080009ec <IS42S16800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode: Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S16800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S16800J_Context_t *pRegMode) 
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80009fe:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8000a04:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8000a0a:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000a10:	4313      	orrs	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S16800J_LOAD_MODE_CMD;
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <IS42S16800J_ModeRegConfig+0x64>)
 8000a16:	2204      	movs	r2, #4
 8000a18:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a0c      	ldr	r2, [pc, #48]	; (8000a50 <IS42S16800J_ModeRegConfig+0x64>)
 8000a20:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <IS42S16800J_ModeRegConfig+0x64>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000a28:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <IS42S16800J_ModeRegConfig+0x64>)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a32:	4907      	ldr	r1, [pc, #28]	; (8000a50 <IS42S16800J_ModeRegConfig+0x64>)
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f009 ff81 	bl	800a93c <HAL_SDRAM_SendCommand>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <IS42S16800J_ModeRegConfig+0x5a>
  {
    return IS42S16800J_ERROR;
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	e000      	b.n	8000a48 <IS42S16800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S16800J_OK;
 8000a46:	2300      	movs	r3, #0
  }
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	24000160 	.word	0x24000160

08000a54 <IS42S16800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S16800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S16800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S16800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <IS42S16800J_RefreshMode+0x48>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000a66:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <IS42S16800J_RefreshMode+0x48>)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <IS42S16800J_RefreshMode+0x48>)
 8000a6e:	2208      	movs	r2, #8
 8000a70:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <IS42S16800J_RefreshMode+0x48>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S16800J_TIMEOUT) != HAL_OK)
 8000a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a7c:	4907      	ldr	r1, [pc, #28]	; (8000a9c <IS42S16800J_RefreshMode+0x48>)
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f009 ff5c 	bl	800a93c <HAL_SDRAM_SendCommand>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d002      	beq.n	8000a90 <IS42S16800J_RefreshMode+0x3c>
  {
    return IS42S16800J_ERROR;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e000      	b.n	8000a92 <IS42S16800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S16800J_OK;
 8000a90:	2300      	movs	r3, #0
  }
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	24000160 	.word	0x24000160

08000aa0 <IS42S16800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S16800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000aaa:	6839      	ldr	r1, [r7, #0]
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f009 ff7a 	bl	800a9a6 <HAL_SDRAM_ProgramRefreshRate>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d002      	beq.n	8000abe <IS42S16800J_RefreshRate+0x1e>
  {
    return IS42S16800J_ERROR;
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8000abc:	e000      	b.n	8000ac0 <IS42S16800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S16800J_OK;
 8000abe:	2300      	movs	r3, #0
  }
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <IS42S16800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval IS42S16800J_OK
  */
static int32_t IS42S16800J_Delay(uint32_t Delay)
{  
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000ad0:	f001 f860 	bl	8001b94 <HAL_GetTick>
 8000ad4:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000ad6:	bf00      	nop
 8000ad8:	f001 f85c 	bl	8001b94 <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d8f7      	bhi.n	8000ad8 <IS42S16800J_Delay+0x10>
  {
  }
  return IS42S16800J_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_SAI_TxCpltCallback>:
volatile uint8_t 			ADC_HALF_COMPLETE_FLAG = 0;
volatile uint8_t 			DAC_HALF_COMPLETE_FLAG = 0;
volatile uint32_t input_i2s_buffer_au32[16];
volatile uint32_t output_i2s_buffer_au32[16];

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
 8000af4:	b480      	push	{r7}
 8000af6:	b08b      	sub	sp, #44	; 0x2c
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 0;
 8000afc:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <HAL_SAI_TxCpltCallback+0xb4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <HAL_SAI_TxCpltCallback+0xb8>)
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	2340      	movs	r3, #64	; 0x40
 8000b08:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	dd1d      	ble.n	8000b4c <HAL_SAI_TxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	f003 021f 	and.w	r2, r3, #31
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	4413      	add	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b20:	f3bf 8f4f 	dsb	sy
}
 8000b24:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000b26:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <HAL_SAI_TxCpltCallback+0xbc>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	3320      	adds	r3, #32
 8000b32:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	3b20      	subs	r3, #32
 8000b38:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	dcf2      	bgt.n	8000b26 <HAL_SAI_TxCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b40:	f3bf 8f4f 	dsb	sy
}
 8000b44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b46:	f3bf 8f6f 	isb	sy
}
 8000b4a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000b4c:	bf00      	nop
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_SAI_TxCpltCallback+0xc0>)
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
 8000b52:	2340      	movs	r3, #64	; 0x40
 8000b54:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000b56:	6a3b      	ldr	r3, [r7, #32]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	dd1d      	ble.n	8000b98 <HAL_SAI_TxCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	f003 021f 	and.w	r2, r3, #31
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	4413      	add	r3, r2
 8000b66:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6c:	f3bf 8f4f 	dsb	sy
}
 8000b70:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <HAL_SAI_TxCpltCallback+0xbc>)
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	3320      	adds	r3, #32
 8000b7e:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	3b20      	subs	r3, #32
 8000b84:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	dcf2      	bgt.n	8000b72 <HAL_SAI_TxCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b8c:	f3bf 8f4f 	dsb	sy
}
 8000b90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b92:	f3bf 8f6f 	isb	sy
}
 8000b96:	bf00      	nop
}
 8000b98:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000b9a:	bf00      	nop
 8000b9c:	372c      	adds	r7, #44	; 0x2c
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	24000171 	.word	0x24000171
 8000bac:	24000174 	.word	0x24000174
 8000bb0:	e000ed00 	.word	0xe000ed00
 8000bb4:	240001b4 	.word	0x240001b4

08000bb8 <HAL_SAI_TxHalfCpltCallback>:
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000bb8:	b480      	push	{r7}
 8000bba:	b08b      	sub	sp, #44	; 0x2c
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 1;
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <HAL_SAI_TxHalfCpltCallback+0xb4>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <HAL_SAI_TxHalfCpltCallback+0xb8>)
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	2340      	movs	r3, #64	; 0x40
 8000bcc:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	dd1d      	ble.n	8000c10 <HAL_SAI_TxHalfCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	f003 021f 	and.w	r2, r3, #31
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	4413      	add	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000be4:	f3bf 8f4f 	dsb	sy
}
 8000be8:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000bea:	4a22      	ldr	r2, [pc, #136]	; (8000c74 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3320      	adds	r3, #32
 8000bf6:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3b20      	subs	r3, #32
 8000bfc:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	dcf2      	bgt.n	8000bea <HAL_SAI_TxHalfCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c04:	f3bf 8f4f 	dsb	sy
}
 8000c08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c0a:	f3bf 8f6f 	isb	sy
}
 8000c0e:	bf00      	nop
}
 8000c10:	bf00      	nop
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_SAI_TxHalfCpltCallback+0xc0>)
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
 8000c16:	2340      	movs	r3, #64	; 0x40
 8000c18:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000c1a:	6a3b      	ldr	r3, [r7, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	dd1d      	ble.n	8000c5c <HAL_SAI_TxHalfCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c22:	f003 021f 	and.w	r2, r3, #31
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	4413      	add	r3, r2
 8000c2a:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c30:	f3bf 8f4f 	dsb	sy
}
 8000c34:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	3320      	adds	r3, #32
 8000c42:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	3b20      	subs	r3, #32
 8000c48:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	dcf2      	bgt.n	8000c36 <HAL_SAI_TxHalfCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c50:	f3bf 8f4f 	dsb	sy
}
 8000c54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c56:	f3bf 8f6f 	isb	sy
}
 8000c5a:	bf00      	nop
}
 8000c5c:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
		SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000c5e:	bf00      	nop
 8000c60:	372c      	adds	r7, #44	; 0x2c
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	24000171 	.word	0x24000171
 8000c70:	24000174 	.word	0x24000174
 8000c74:	e000ed00 	.word	0xe000ed00
 8000c78:	240001b4 	.word	0x240001b4

08000c7c <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000c7c:	b480      	push	{r7}
 8000c7e:	b093      	sub	sp, #76	; 0x4c
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 0;
 8000c84:	4b54      	ldr	r3, [pc, #336]	; (8000dd8 <HAL_SAI_RxCpltCallback+0x15c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	4b54      	ldr	r3, [pc, #336]	; (8000ddc <HAL_SAI_RxCpltCallback+0x160>)
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	2340      	movs	r3, #64	; 0x40
 8000c90:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	dd1d      	ble.n	8000cd4 <HAL_SAI_RxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f003 021f 	and.w	r2, r3, #31
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ca8:	f3bf 8f4f 	dsb	sy
}
 8000cac:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000cae:	4a4c      	ldr	r2, [pc, #304]	; (8000de0 <HAL_SAI_RxCpltCallback+0x164>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	3320      	adds	r3, #32
 8000cba:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3b20      	subs	r3, #32
 8000cc0:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	dcf2      	bgt.n	8000cae <HAL_SAI_RxCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc8:	f3bf 8f4f 	dsb	sy
}
 8000ccc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cce:	f3bf 8f6f 	isb	sy
}
 8000cd2:	bf00      	nop
}
 8000cd4:	bf00      	nop
 8000cd6:	4b43      	ldr	r3, [pc, #268]	; (8000de4 <HAL_SAI_RxCpltCallback+0x168>)
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cda:	2340      	movs	r3, #64	; 0x40
 8000cdc:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000cde:	6a3b      	ldr	r3, [r7, #32]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	dd1d      	ble.n	8000d20 <HAL_SAI_RxCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	f003 021f 	and.w	r2, r3, #31
 8000cea:	6a3b      	ldr	r3, [r7, #32]
 8000cec:	4413      	add	r3, r2
 8000cee:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf4:	f3bf 8f4f 	dsb	sy
}
 8000cf8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000cfa:	4a39      	ldr	r2, [pc, #228]	; (8000de0 <HAL_SAI_RxCpltCallback+0x164>)
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	3320      	adds	r3, #32
 8000d06:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	3b20      	subs	r3, #32
 8000d0c:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	dcf2      	bgt.n	8000cfa <HAL_SAI_RxCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d14:	f3bf 8f4f 	dsb	sy
}
 8000d18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d1a:	f3bf 8f6f 	isb	sy
}
 8000d1e:	bf00      	nop
}
 8000d20:	bf00      	nop

	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	output_i2s_buffer_au32[14] = input_i2s_buffer_au32[10];
 8000d22:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <HAL_SAI_RxCpltCallback+0x160>)
 8000d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d26:	4a2f      	ldr	r2, [pc, #188]	; (8000de4 <HAL_SAI_RxCpltCallback+0x168>)
 8000d28:	6393      	str	r3, [r2, #56]	; 0x38
	output_i2s_buffer_au32[15] = input_i2s_buffer_au32[11];
 8000d2a:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <HAL_SAI_RxCpltCallback+0x160>)
 8000d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2e:	4a2d      	ldr	r2, [pc, #180]	; (8000de4 <HAL_SAI_RxCpltCallback+0x168>)
 8000d30:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_SAI_RxCpltCallback+0x160>)
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
 8000d36:	2340      	movs	r3, #64	; 0x40
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 8000d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	dd1d      	ble.n	8000d7c <HAL_SAI_RxCpltCallback+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d42:	f003 021f 	and.w	r2, r3, #31
 8000d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d48:	4413      	add	r3, r2
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 8000d50:	f3bf 8f4f 	dsb	sy
}
 8000d54:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000d56:	4a22      	ldr	r2, [pc, #136]	; (8000de0 <HAL_SAI_RxCpltCallback+0x164>)
 8000d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5a:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d60:	3320      	adds	r3, #32
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d66:	3b20      	subs	r3, #32
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	dcf2      	bgt.n	8000d56 <HAL_SAI_RxCpltCallback+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d70:	f3bf 8f4f 	dsb	sy
}
 8000d74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d76:	f3bf 8f6f 	isb	sy
}
 8000d7a:	bf00      	nop
}
 8000d7c:	bf00      	nop
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_SAI_RxCpltCallback+0x168>)
 8000d80:	647b      	str	r3, [r7, #68]	; 0x44
 8000d82:	2340      	movs	r3, #64	; 0x40
 8000d84:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8000d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	dd1d      	ble.n	8000dc8 <HAL_SAI_RxCpltCallback+0x14c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d8e:	f003 021f 	and.w	r2, r3, #31
 8000d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d94:	4413      	add	r3, r2
 8000d96:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8000d9c:	f3bf 8f4f 	dsb	sy
}
 8000da0:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_SAI_RxCpltCallback+0x164>)
 8000da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000da6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dac:	3320      	adds	r3, #32
 8000dae:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000db2:	3b20      	subs	r3, #32
 8000db4:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 8000db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	dcf2      	bgt.n	8000da2 <HAL_SAI_RxCpltCallback+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8000dbc:	f3bf 8f4f 	dsb	sy
}
 8000dc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dc2:	f3bf 8f6f 	isb	sy
}
 8000dc6:	bf00      	nop
}
 8000dc8:	bf00      	nop

	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000dca:	bf00      	nop
 8000dcc:	374c      	adds	r7, #76	; 0x4c
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	24000170 	.word	0x24000170
 8000ddc:	24000174 	.word	0x24000174
 8000de0:	e000ed00 	.word	0xe000ed00
 8000de4:	240001b4 	.word	0x240001b4

08000de8 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000de8:	b480      	push	{r7}
 8000dea:	b093      	sub	sp, #76	; 0x4c
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 1;
 8000df0:	4b54      	ldr	r3, [pc, #336]	; (8000f44 <HAL_SAI_RxHalfCpltCallback+0x15c>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
 8000df6:	4b54      	ldr	r3, [pc, #336]	; (8000f48 <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	2340      	movs	r3, #64	; 0x40
 8000dfc:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	dd1d      	ble.n	8000e40 <HAL_SAI_RxHalfCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f003 021f 	and.w	r2, r3, #31
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e14:	f3bf 8f4f 	dsb	sy
}
 8000e18:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000e1a:	4a4c      	ldr	r2, [pc, #304]	; (8000f4c <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	3320      	adds	r3, #32
 8000e26:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3b20      	subs	r3, #32
 8000e2c:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	dcf2      	bgt.n	8000e1a <HAL_SAI_RxHalfCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e34:	f3bf 8f4f 	dsb	sy
}
 8000e38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e3a:	f3bf 8f6f 	isb	sy
}
 8000e3e:	bf00      	nop
}
 8000e40:	bf00      	nop
 8000e42:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
 8000e46:	2340      	movs	r3, #64	; 0x40
 8000e48:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000e4a:	6a3b      	ldr	r3, [r7, #32]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	dd1d      	ble.n	8000e8c <HAL_SAI_RxHalfCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	f003 021f 	and.w	r2, r3, #31
 8000e56:	6a3b      	ldr	r3, [r7, #32]
 8000e58:	4413      	add	r3, r2
 8000e5a:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e60:	f3bf 8f4f 	dsb	sy
}
 8000e64:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000e66:	4a39      	ldr	r2, [pc, #228]	; (8000f4c <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	3320      	adds	r3, #32
 8000e72:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	3b20      	subs	r3, #32
 8000e78:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	dcf2      	bgt.n	8000e66 <HAL_SAI_RxHalfCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e80:	f3bf 8f4f 	dsb	sy
}
 8000e84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e86:	f3bf 8f6f 	isb	sy
}
 8000e8a:	bf00      	nop
}
 8000e8c:	bf00      	nop


	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	output_i2s_buffer_au32[6] = input_i2s_buffer_au32[2];
 8000e8e:	4b2e      	ldr	r3, [pc, #184]	; (8000f48 <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	4a2f      	ldr	r2, [pc, #188]	; (8000f50 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000e94:	6193      	str	r3, [r2, #24]
	output_i2s_buffer_au32[7] = input_i2s_buffer_au32[3];
 8000e96:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	4a2d      	ldr	r2, [pc, #180]	; (8000f50 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8000ea2:	2340      	movs	r3, #64	; 0x40
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 8000ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	dd1d      	ble.n	8000ee8 <HAL_SAI_RxHalfCpltCallback+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eae:	f003 021f 	and.w	r2, r3, #31
 8000eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb4:	4413      	add	r3, r2
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 8000ebc:	f3bf 8f4f 	dsb	sy
}
 8000ec0:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000ec2:	4a22      	ldr	r2, [pc, #136]	; (8000f4c <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ecc:	3320      	adds	r3, #32
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed2:	3b20      	subs	r3, #32
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	dcf2      	bgt.n	8000ec2 <HAL_SAI_RxHalfCpltCallback+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 8000edc:	f3bf 8f4f 	dsb	sy
}
 8000ee0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ee2:	f3bf 8f6f 	isb	sy
}
 8000ee6:	bf00      	nop
}
 8000ee8:	bf00      	nop
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000eec:	647b      	str	r3, [r7, #68]	; 0x44
 8000eee:	2340      	movs	r3, #64	; 0x40
 8000ef0:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8000ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	dd1d      	ble.n	8000f34 <HAL_SAI_RxHalfCpltCallback+0x14c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000efa:	f003 021f 	and.w	r2, r3, #31
 8000efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f00:	4413      	add	r3, r2
 8000f02:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f06:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f12:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f18:	3320      	adds	r3, #32
 8000f1a:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f1e:	3b20      	subs	r3, #32
 8000f20:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 8000f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	dcf2      	bgt.n	8000f0e <HAL_SAI_RxHalfCpltCallback+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f28:	f3bf 8f4f 	dsb	sy
}
 8000f2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f2e:	f3bf 8f6f 	isb	sy
}
 8000f32:	bf00      	nop
}
 8000f34:	bf00      	nop

	SCB_CleanDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
}
 8000f36:	bf00      	nop
 8000f38:	374c      	adds	r7, #76	; 0x4c
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	24000170 	.word	0x24000170
 8000f48:	24000174 	.word	0x24000174
 8000f4c:	e000ed00 	.word	0xe000ed00
 8000f50:	240001b4 	.word	0x240001b4

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5a:	f000 fd95 	bl	8001a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5e:	f000 f893 	bl	8001088 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f62:	f000 f901 	bl	8001168 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f7ff fc29 	bl	80007bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000f6a:	f7ff faa9 	bl	80004c0 <MX_DMA_Init>
  MX_SAI1_Init();
 8000f6e:	f000 fa5d 	bl	800142c <MX_SAI1_Init>
  MX_SPI1_Init();
 8000f72:	f000 fba1 	bl	80016b8 <MX_SPI1_Init>
  MX_FMC_Init();
 8000f76:	f7ff fadb 	bl	8000530 <MX_FMC_Init>
  MX_OCTOSPI1_Init();
 8000f7a:	f000 f92d 	bl	80011d8 <MX_OCTOSPI1_Init>
  MX_USB_DEVICE_Init();
 8000f7e:	f00d fead 	bl	800ecdc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // init SAI interface
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, output_i2s_buffer_au32, 	16);
 8000f82:	2210      	movs	r2, #16
 8000f84:	4938      	ldr	r1, [pc, #224]	; (8001068 <main+0x114>)
 8000f86:	4839      	ldr	r0, [pc, #228]	; (800106c <main+0x118>)
 8000f88:	f009 f8f6 	bl	800a178 <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, input_i2s_buffer_au32, 	16);
 8000f8c:	2210      	movs	r2, #16
 8000f8e:	4938      	ldr	r1, [pc, #224]	; (8001070 <main+0x11c>)
 8000f90:	4838      	ldr	r0, [pc, #224]	; (8001074 <main+0x120>)
 8000f92:	f009 f9a7 	bl	800a2e4 <HAL_SAI_Receive_DMA>

  // init CODEC
	ad1939_init(&hspi1);
 8000f96:	4838      	ldr	r0, [pc, #224]	; (8001078 <main+0x124>)
 8000f98:	f7ff fa10 	bl	80003bc <ad1939_init>
  /* USER CODE BEGIN WHILE */
	// FLASH TESTING START



	char* mymsg= "Hello World!";
 8000f9c:	4b37      	ldr	r3, [pc, #220]	; (800107c <main+0x128>)
 8000f9e:	613b      	str	r3, [r7, #16]
  while (1)
  {
	  uint32_t fmctestStart;
	  uint32_t fmctestStop;

	  fmctestStart = HAL_GetTick();
 8000fa0:	f000 fdf8 	bl	8001b94 <HAL_GetTick>
 8000fa4:	60f8      	str	r0, [r7, #12]
	  uint32_t errorCounter =0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t usb_state=0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
	  for(uint32_t i = 0; i<10000;i++){
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
 8000fb2:	e047      	b.n	8001044 <main+0xf0>


		  usb_state = CDC_Transmit_HS((uint8_t*)mymsg, strlen(mymsg));
 8000fb4:	6938      	ldr	r0, [r7, #16]
 8000fb6:	f7ff f9a9 	bl	800030c <strlen>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6938      	ldr	r0, [r7, #16]
 8000fc2:	f00d ff4b 	bl	800ee5c <CDC_Transmit_HS>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	60bb      	str	r3, [r7, #8]
		  HAL_Delay(100);
 8000fca:	2064      	movs	r0, #100	; 0x64
 8000fcc:	f000 fdee 	bl	8001bac <HAL_Delay>

		  for(uint32_t j=256*256-2; j<256*256+200;j++){
 8000fd0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e02e      	b.n	8001036 <main+0xe2>
			  fmctestStart = HAL_GetTick();
 8000fd8:	f000 fddc 	bl	8001b94 <HAL_GetTick>
 8000fdc:	60f8      	str	r0, [r7, #12]
			  uint8_t number_inc = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	71bb      	strb	r3, [r7, #6]
//			  for(uint32_t counter = 1; counter<SDRAM_SIZE; counter=counter+2){
//				  *(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) = (uint8_t) number_inc;
//				  number_inc++;
//			  }

			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	e007      	b.n	8000ff8 <main+0xa4>
			 				  sdram_array[counter] = j;
 8000fe8:	4925      	ldr	r1, [pc, #148]	; (8001080 <main+0x12c>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	2b09      	cmp	r3, #9
 8000ffc:	d9f4      	bls.n	8000fe8 <main+0x94>
//			  				  if(*(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) != j){
//			  					  errorCounter++;
//			  				  }


			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	e00c      	b.n	800101e <main+0xca>
				  if( sdram_array[counter] != j){
 8001004:	4a1e      	ldr	r2, [pc, #120]	; (8001080 <main+0x12c>)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	429a      	cmp	r2, r3
 8001010:	d002      	beq.n	8001018 <main+0xc4>
					  errorCounter++;
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	3301      	adds	r3, #1
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3301      	adds	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b09      	cmp	r3, #9
 8001022:	d9ef      	bls.n	8001004 <main+0xb0>
				  }
			  }
			  fmctestStop = (HAL_GetTick()-fmctestStart);
 8001024:	f000 fdb6 	bl	8001b94 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	603b      	str	r3, [r7, #0]
		  for(uint32_t j=256*256-2; j<256*256+200;j++){
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	3301      	adds	r3, #1
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	4a12      	ldr	r2, [pc, #72]	; (8001084 <main+0x130>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d9cc      	bls.n	8000fd8 <main+0x84>
	  for(uint32_t i = 0; i<10000;i++){
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	3301      	adds	r3, #1
 8001042:	623b      	str	r3, [r7, #32]
 8001044:	6a3b      	ldr	r3, [r7, #32]
 8001046:	f242 720f 	movw	r2, #9999	; 0x270f
 800104a:	4293      	cmp	r3, r2
 800104c:	d9b2      	bls.n	8000fb4 <main+0x60>
		  }

	  }

	  if(errorCounter){
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	2b00      	cmp	r3, #0
 8001052:	d000      	beq.n	8001056 <main+0x102>
		  while(1){
 8001054:	e7fe      	b.n	8001054 <main+0x100>

		  }
	  }

	  uint8_t var = *(__IO uint8_t*)(SDRAM_ADDRESS_START);
 8001056:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(50);
 800105e:	2032      	movs	r0, #50	; 0x32
 8001060:	f000 fda4 	bl	8001bac <HAL_Delay>
  {
 8001064:	e79c      	b.n	8000fa0 <main+0x4c>
 8001066:	bf00      	nop
 8001068:	240001b4 	.word	0x240001b4
 800106c:	24000250 	.word	0x24000250
 8001070:	24000174 	.word	0x24000174
 8001074:	240002e8 	.word	0x240002e8
 8001078:	24000474 	.word	0x24000474
 800107c:	0800f774 	.word	0x0800f774
 8001080:	c0000000 	.word	0xc0000000
 8001084:	000100c7 	.word	0x000100c7

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b09c      	sub	sp, #112	; 0x70
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001092:	224c      	movs	r2, #76	; 0x4c
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00e fb34 	bl	800f704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2220      	movs	r2, #32
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f00e fb2e 	bl	800f704 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010a8:	2002      	movs	r0, #2
 80010aa:	f005 fa99 	bl	80065e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <SystemClock_Config+0xdc>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	4a2b      	ldr	r2, [pc, #172]	; (8001164 <SystemClock_Config+0xdc>)
 80010b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010bc:	6193      	str	r3, [r2, #24]
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <SystemClock_Config+0xdc>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010ca:	bf00      	nop
 80010cc:	4b25      	ldr	r3, [pc, #148]	; (8001164 <SystemClock_Config+0xdc>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010d8:	d1f8      	bne.n	80010cc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010da:	2321      	movs	r3, #33	; 0x21
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e8:	2302      	movs	r3, #2
 80010ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ec:	2302      	movs	r3, #2
 80010ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80010f4:	232c      	movs	r3, #44	; 0x2c
 80010f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001100:	2302      	movs	r3, #2
 8001102:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001104:	230c      	movs	r3, #12
 8001106:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001108:	2300      	movs	r3, #0
 800110a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	4618      	mov	r0, r3
 8001116:	f005 faad 	bl	8006674 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001120:	f000 f855 	bl	80011ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	233f      	movs	r3, #63	; 0x3f
 8001126:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	2303      	movs	r3, #3
 800112a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001130:	2308      	movs	r3, #8
 8001132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001134:	2340      	movs	r3, #64	; 0x40
 8001136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001138:	2340      	movs	r3, #64	; 0x40
 800113a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800113c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001140:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001142:	2340      	movs	r3, #64	; 0x40
 8001144:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2103      	movs	r1, #3
 800114a:	4618      	mov	r0, r3
 800114c:	f005 fe6c 	bl	8006e28 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001156:	f000 f83a 	bl	80011ce <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3770      	adds	r7, #112	; 0x70
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	58024800 	.word	0x58024800

08001168 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0ae      	sub	sp, #184	; 0xb8
 800116c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800116e:	463b      	mov	r3, r7
 8001170:	22b8      	movs	r2, #184	; 0xb8
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f00e fac5 	bl	800f704 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 800117a:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 800117e:	f04f 0300 	mov.w	r3, #0
 8001182:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8001186:	2302      	movs	r3, #2
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 800118a:	230f      	movs	r3, #15
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800118e:	2302      	movs	r3, #2
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001192:	2302      	movs	r3, #2
 8001194:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001196:	2302      	movs	r3, #2
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800119a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 80011a4:	f640 3386 	movw	r3, #2950	; 0xb86
 80011a8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 80011aa:	2302      	movs	r3, #2
 80011ac:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80011ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b4:	463b      	mov	r3, r7
 80011b6:	4618      	mov	r0, r3
 80011b8:	f006 f9ac 	bl	8007514 <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 80011c2:	f000 f804 	bl	80011ce <Error_Handler>
  }
}
 80011c6:	bf00      	nop
 80011c8:	37b8      	adds	r7, #184	; 0xb8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011d2:	b672      	cpsid	i
}
 80011d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <Error_Handler+0x8>

080011d8 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80011de:	463b      	mov	r3, r7
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 80011ee:	4b28      	ldr	r3, [pc, #160]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 80011f0:	4a28      	ldr	r2, [pc, #160]	; (8001294 <MX_OCTOSPI1_Init+0xbc>)
 80011f2:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 80011f6:	2204      	movs	r2, #4
 80011f8:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80011fa:	4b25      	ldr	r3, [pc, #148]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 8001208:	2218      	movs	r2, #24
 800120a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 800120e:	2201      	movs	r2, #1
 8001210:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 4;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 8001226:	2204      	movs	r2, #4
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 800122c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 8001234:	2200      	movs	r2, #0
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 800123a:	2200      	movs	r2, #0
 800123c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 8001240:	2208      	movs	r2, #8
 8001242:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 8001246:	2200      	movs	r2, #0
 8001248:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 800124c:	2200      	movs	r2, #0
 800124e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001250:	480f      	ldr	r0, [pc, #60]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 8001252:	f003 f881 	bl	8004358 <HAL_OSPI_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 800125c:	f7ff ffb7 	bl	80011ce <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001260:	2301      	movs	r3, #1
 8001262:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8001264:	2301      	movs	r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001268:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800126c:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	f241 3288 	movw	r2, #5000	; 0x1388
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_OCTOSPI1_Init+0xb8>)
 8001278:	f003 f93a 	bl	80044f0 <HAL_OSPIM_Config>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 8001282:	f7ff ffa4 	bl	80011ce <Error_Handler>
//	sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
//
//	HAL_OSPI_Command(&hospi1, &sCommand, 1000);
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	240001f4 	.word	0x240001f4
 8001294:	52005000 	.word	0x52005000

08001298 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0ba      	sub	sp, #232	; 0xe8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	22b8      	movs	r2, #184	; 0xb8
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f00e fa23 	bl	800f704 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a56      	ldr	r2, [pc, #344]	; (800141c <HAL_OSPI_MspInit+0x184>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	f040 80a5 	bne.w	8001414 <HAL_OSPI_MspInit+0x17c>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80012ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012da:	f107 0318 	add.w	r3, r7, #24
 80012de:	4618      	mov	r0, r3
 80012e0:	f006 f918 	bl	8007514 <HAL_RCCEx_PeriphCLKConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 80012ea:	f7ff ff70 	bl	80011ce <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80012ee:	4b4c      	ldr	r3, [pc, #304]	; (8001420 <HAL_OSPI_MspInit+0x188>)
 80012f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012f4:	4a4a      	ldr	r2, [pc, #296]	; (8001420 <HAL_OSPI_MspInit+0x188>)
 80012f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80012fe:	4b48      	ldr	r3, [pc, #288]	; (8001420 <HAL_OSPI_MspInit+0x188>)
 8001300:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800130c:	4b44      	ldr	r3, [pc, #272]	; (8001420 <HAL_OSPI_MspInit+0x188>)
 800130e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001312:	4a43      	ldr	r2, [pc, #268]	; (8001420 <HAL_OSPI_MspInit+0x188>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800131c:	4b40      	ldr	r3, [pc, #256]	; (8001420 <HAL_OSPI_MspInit+0x188>)
 800131e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <HAL_OSPI_MspInit+0x188>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	4a3b      	ldr	r2, [pc, #236]	; (8001420 <HAL_OSPI_MspInit+0x188>)
 8001332:	f043 0310 	orr.w	r3, r3, #16
 8001336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133a:	4b39      	ldr	r3, [pc, #228]	; (8001420 <HAL_OSPI_MspInit+0x188>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001348:	4b35      	ldr	r3, [pc, #212]	; (8001420 <HAL_OSPI_MspInit+0x188>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134e:	4a34      	ldr	r2, [pc, #208]	; (8001420 <HAL_OSPI_MspInit+0x188>)
 8001350:	f043 0320 	orr.w	r3, r3, #32
 8001354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001358:	4b31      	ldr	r3, [pc, #196]	; (8001420 <HAL_OSPI_MspInit+0x188>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	f003 0320 	and.w	r3, r3, #32
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> OCTOSPIM_P1_IO0
    PF9     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001366:	2304      	movs	r3, #4
 8001368:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800137e:	2309      	movs	r3, #9
 8001380:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001384:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001388:	4619      	mov	r1, r3
 800138a:	4826      	ldr	r0, [pc, #152]	; (8001424 <HAL_OSPI_MspInit+0x18c>)
 800138c:	f002 fe22 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001390:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001394:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80013aa:	230a      	movs	r3, #10
 80013ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013b4:	4619      	mov	r1, r3
 80013b6:	481c      	ldr	r0, [pc, #112]	; (8001428 <HAL_OSPI_MspInit+0x190>)
 80013b8:	f002 fe0c 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80013d6:	2309      	movs	r3, #9
 80013d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4811      	ldr	r0, [pc, #68]	; (8001428 <HAL_OSPI_MspInit+0x190>)
 80013e4:	f002 fdf6 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8001402:	230b      	movs	r3, #11
 8001404:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001408:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800140c:	4619      	mov	r1, r3
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <HAL_OSPI_MspInit+0x18c>)
 8001410:	f002 fde0 	bl	8003fd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8001414:	bf00      	nop
 8001416:	37e8      	adds	r7, #232	; 0xe8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	52005000 	.word	0x52005000
 8001420:	58024400 	.word	0x58024400
 8001424:	58021000 	.word	0x58021000
 8001428:	58021400 	.word	0x58021400

0800142c <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001430:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <MX_SAI1_Init+0xb0>)
 8001432:	4a2b      	ldr	r2, [pc, #172]	; (80014e0 <MX_SAI1_Init+0xb4>)
 8001434:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <MX_SAI1_Init+0xb0>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <MX_SAI1_Init+0xb0>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <MX_SAI1_Init+0xb0>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001448:	4b24      	ldr	r3, [pc, #144]	; (80014dc <MX_SAI1_Init+0xb0>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <MX_SAI1_Init+0xb0>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001454:	4b21      	ldr	r3, [pc, #132]	; (80014dc <MX_SAI1_Init+0xb0>)
 8001456:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800145a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <MX_SAI1_Init+0xb0>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001462:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <MX_SAI1_Init+0xb0>)
 8001464:	2200      	movs	r2, #0
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <MX_SAI1_Init+0xb0>)
 800146a:	2200      	movs	r2, #0
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <MX_SAI1_Init+0xb0>)
 8001470:	2200      	movs	r2, #0
 8001472:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001474:	2308      	movs	r3, #8
 8001476:	2202      	movs	r2, #2
 8001478:	2100      	movs	r1, #0
 800147a:	4818      	ldr	r0, [pc, #96]	; (80014dc <MX_SAI1_Init+0xb0>)
 800147c:	f008 fc30 	bl	8009ce0 <HAL_SAI_InitProtocol>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8001486:	f7ff fea2 	bl	80011ce <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_SAI1_Init+0xb8>)
 800148c:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <MX_SAI1_Init+0xbc>)
 800148e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_SAI1_Init+0xb8>)
 8001492:	2203      	movs	r2, #3
 8001494:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_SAI1_Init+0xb8>)
 8001498:	2201      	movs	r2, #1
 800149a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_SAI1_Init+0xb8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <MX_SAI1_Init+0xb8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_SAI1_Init+0xb8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <MX_SAI1_Init+0xb8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <MX_SAI1_Init+0xb8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <MX_SAI1_Init+0xb8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 80014c0:	2308      	movs	r3, #8
 80014c2:	2202      	movs	r2, #2
 80014c4:	2100      	movs	r1, #0
 80014c6:	4807      	ldr	r0, [pc, #28]	; (80014e4 <MX_SAI1_Init+0xb8>)
 80014c8:	f008 fc0a 	bl	8009ce0 <HAL_SAI_InitProtocol>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 80014d2:	f7ff fe7c 	bl	80011ce <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	24000250 	.word	0x24000250
 80014e0:	40015804 	.word	0x40015804
 80014e4:	240002e8 	.word	0x240002e8
 80014e8:	40015824 	.word	0x40015824

080014ec <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a66      	ldr	r2, [pc, #408]	; (8001694 <HAL_SAI_MspInit+0x1a8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d160      	bne.n	80015c0 <HAL_SAI_MspInit+0xd4>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80014fe:	4b66      	ldr	r3, [pc, #408]	; (8001698 <HAL_SAI_MspInit+0x1ac>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10e      	bne.n	8001524 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001506:	4b65      	ldr	r3, [pc, #404]	; (800169c <HAL_SAI_MspInit+0x1b0>)
 8001508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800150c:	4a63      	ldr	r2, [pc, #396]	; (800169c <HAL_SAI_MspInit+0x1b0>)
 800150e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001512:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001516:	4b61      	ldr	r3, [pc, #388]	; (800169c <HAL_SAI_MspInit+0x1b0>)
 8001518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800151c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001524:	4b5c      	ldr	r3, [pc, #368]	; (8001698 <HAL_SAI_MspInit+0x1ac>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	4a5b      	ldr	r2, [pc, #364]	; (8001698 <HAL_SAI_MspInit+0x1ac>)
 800152c:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800152e:	2370      	movs	r3, #112	; 0x70
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800153e:	2306      	movs	r3, #6
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4855      	ldr	r0, [pc, #340]	; (80016a0 <HAL_SAI_MspInit+0x1b4>)
 800154a:	f002 fd43 	bl	8003fd4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 800154e:	4b55      	ldr	r3, [pc, #340]	; (80016a4 <HAL_SAI_MspInit+0x1b8>)
 8001550:	4a55      	ldr	r2, [pc, #340]	; (80016a8 <HAL_SAI_MspInit+0x1bc>)
 8001552:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001554:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_SAI_MspInit+0x1b8>)
 8001556:	2257      	movs	r2, #87	; 0x57
 8001558:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800155a:	4b52      	ldr	r3, [pc, #328]	; (80016a4 <HAL_SAI_MspInit+0x1b8>)
 800155c:	2240      	movs	r2, #64	; 0x40
 800155e:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001560:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HAL_SAI_MspInit+0x1b8>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001566:	4b4f      	ldr	r3, [pc, #316]	; (80016a4 <HAL_SAI_MspInit+0x1b8>)
 8001568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800156c:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800156e:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <HAL_SAI_MspInit+0x1b8>)
 8001570:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001574:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001576:	4b4b      	ldr	r3, [pc, #300]	; (80016a4 <HAL_SAI_MspInit+0x1b8>)
 8001578:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157c:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800157e:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <HAL_SAI_MspInit+0x1b8>)
 8001580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001584:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001586:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <HAL_SAI_MspInit+0x1b8>)
 8001588:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800158c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800158e:	4b45      	ldr	r3, [pc, #276]	; (80016a4 <HAL_SAI_MspInit+0x1b8>)
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001594:	4843      	ldr	r0, [pc, #268]	; (80016a4 <HAL_SAI_MspInit+0x1b8>)
 8001596:	f000 fc3d 	bl	8001e14 <HAL_DMA_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 80015a0:	f7ff fe15 	bl	80011ce <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a3f      	ldr	r2, [pc, #252]	; (80016a4 <HAL_SAI_MspInit+0x1b8>)
 80015a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80015ac:	4a3d      	ldr	r2, [pc, #244]	; (80016a4 <HAL_SAI_MspInit+0x1b8>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a3b      	ldr	r2, [pc, #236]	; (80016a4 <HAL_SAI_MspInit+0x1b8>)
 80015b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80015ba:	4a3a      	ldr	r2, [pc, #232]	; (80016a4 <HAL_SAI_MspInit+0x1b8>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a39      	ldr	r2, [pc, #228]	; (80016ac <HAL_SAI_MspInit+0x1c0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d160      	bne.n	800168c <HAL_SAI_MspInit+0x1a0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80015ca:	4b33      	ldr	r3, [pc, #204]	; (8001698 <HAL_SAI_MspInit+0x1ac>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10e      	bne.n	80015f0 <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80015d2:	4b32      	ldr	r3, [pc, #200]	; (800169c <HAL_SAI_MspInit+0x1b0>)
 80015d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015d8:	4a30      	ldr	r2, [pc, #192]	; (800169c <HAL_SAI_MspInit+0x1b0>)
 80015da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015e2:	4b2e      	ldr	r3, [pc, #184]	; (800169c <HAL_SAI_MspInit+0x1b0>)
 80015e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <HAL_SAI_MspInit+0x1ac>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	4a28      	ldr	r2, [pc, #160]	; (8001698 <HAL_SAI_MspInit+0x1ac>)
 80015f8:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015fa:	2308      	movs	r3, #8
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800160a:	2306      	movs	r3, #6
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4822      	ldr	r0, [pc, #136]	; (80016a0 <HAL_SAI_MspInit+0x1b4>)
 8001616:	f002 fcdd 	bl	8003fd4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream0;
 800161a:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_SAI_MspInit+0x1c4>)
 800161c:	4a25      	ldr	r2, [pc, #148]	; (80016b4 <HAL_SAI_MspInit+0x1c8>)
 800161e:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8001620:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <HAL_SAI_MspInit+0x1c4>)
 8001622:	2258      	movs	r2, #88	; 0x58
 8001624:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_SAI_MspInit+0x1c4>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <HAL_SAI_MspInit+0x1c4>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <HAL_SAI_MspInit+0x1c4>)
 8001634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001638:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_SAI_MspInit+0x1c4>)
 800163c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001640:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_SAI_MspInit+0x1c4>)
 8001644:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001648:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_SAI_MspInit+0x1c4>)
 800164c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001650:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_SAI_MspInit+0x1c4>)
 8001654:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001658:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_SAI_MspInit+0x1c4>)
 800165c:	2200      	movs	r2, #0
 800165e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001660:	4813      	ldr	r0, [pc, #76]	; (80016b0 <HAL_SAI_MspInit+0x1c4>)
 8001662:	f000 fbd7 	bl	8001e14 <HAL_DMA_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 800166c:	f7ff fdaf 	bl	80011ce <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <HAL_SAI_MspInit+0x1c4>)
 8001674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <HAL_SAI_MspInit+0x1c4>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <HAL_SAI_MspInit+0x1c4>)
 8001682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_SAI_MspInit+0x1c4>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40015804 	.word	0x40015804
 8001698:	24000470 	.word	0x24000470
 800169c:	58024400 	.word	0x58024400
 80016a0:	58021000 	.word	0x58021000
 80016a4:	24000380 	.word	0x24000380
 80016a8:	40020010 	.word	0x40020010
 80016ac:	40015824 	.word	0x40015824
 80016b0:	240003f8 	.word	0x240003f8
 80016b4:	40020410 	.word	0x40020410

080016b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <MX_SPI1_Init+0xa4>)
 80016be:	4a28      	ldr	r2, [pc, #160]	; (8001760 <MX_SPI1_Init+0xa8>)
 80016c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016c2:	4b26      	ldr	r3, [pc, #152]	; (800175c <MX_SPI1_Init+0xa4>)
 80016c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <MX_SPI1_Init+0xa4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <MX_SPI1_Init+0xa4>)
 80016d2:	2207      	movs	r2, #7
 80016d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <MX_SPI1_Init+0xa4>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <MX_SPI1_Init+0xa4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <MX_SPI1_Init+0xa4>)
 80016e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <MX_SPI1_Init+0xa4>)
 80016ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_SPI1_Init+0xa4>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_SPI1_Init+0xa4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_SPI1_Init+0xa4>)
 8001700:	2200      	movs	r2, #0
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_SPI1_Init+0xa4>)
 8001706:	2200      	movs	r2, #0
 8001708:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_SPI1_Init+0xa4>)
 800170c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001710:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_SPI1_Init+0xa4>)
 8001714:	2200      	movs	r2, #0
 8001716:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_SPI1_Init+0xa4>)
 800171a:	2200      	movs	r2, #0
 800171c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_SPI1_Init+0xa4>)
 8001720:	2200      	movs	r2, #0
 8001722:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <MX_SPI1_Init+0xa4>)
 8001726:	2200      	movs	r2, #0
 8001728:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_SPI1_Init+0xa4>)
 800172c:	2200      	movs	r2, #0
 800172e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MX_SPI1_Init+0xa4>)
 8001732:	2200      	movs	r2, #0
 8001734:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_SPI1_Init+0xa4>)
 8001738:	2200      	movs	r2, #0
 800173a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <MX_SPI1_Init+0xa4>)
 800173e:	2200      	movs	r2, #0
 8001740:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_SPI1_Init+0xa4>)
 8001744:	2200      	movs	r2, #0
 8001746:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_SPI1_Init+0xa4>)
 800174a:	f009 f955 	bl	800a9f8 <HAL_SPI_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001754:	f7ff fd3b 	bl	80011ce <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	24000474 	.word	0x24000474
 8001760:	40013000 	.word	0x40013000

08001764 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a3a      	ldr	r2, [pc, #232]	; (800186c <HAL_SPI_MspInit+0x108>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d16d      	bne.n	8001862 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001786:	4b3a      	ldr	r3, [pc, #232]	; (8001870 <HAL_SPI_MspInit+0x10c>)
 8001788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800178c:	4a38      	ldr	r2, [pc, #224]	; (8001870 <HAL_SPI_MspInit+0x10c>)
 800178e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001792:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001796:	4b36      	ldr	r3, [pc, #216]	; (8001870 <HAL_SPI_MspInit+0x10c>)
 8001798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800179c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <HAL_SPI_MspInit+0x10c>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017aa:	4a31      	ldr	r2, [pc, #196]	; (8001870 <HAL_SPI_MspInit+0x10c>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b4:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <HAL_SPI_MspInit+0x10c>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c2:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <HAL_SPI_MspInit+0x10c>)
 80017c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c8:	4a29      	ldr	r2, [pc, #164]	; (8001870 <HAL_SPI_MspInit+0x10c>)
 80017ca:	f043 0308 	orr.w	r3, r3, #8
 80017ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d2:	4b27      	ldr	r3, [pc, #156]	; (8001870 <HAL_SPI_MspInit+0x10c>)
 80017d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017e0:	4b23      	ldr	r3, [pc, #140]	; (8001870 <HAL_SPI_MspInit+0x10c>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e6:	4a22      	ldr	r2, [pc, #136]	; (8001870 <HAL_SPI_MspInit+0x10c>)
 80017e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_SPI_MspInit+0x10c>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> SPI1_MISO
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 80017fe:	f248 0340 	movw	r3, #32832	; 0x8040
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001810:	2305      	movs	r3, #5
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	4816      	ldr	r0, [pc, #88]	; (8001874 <HAL_SPI_MspInit+0x110>)
 800181c:	f002 fbda 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001830:	2305      	movs	r3, #5
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	4619      	mov	r1, r3
 800183a:	480f      	ldr	r0, [pc, #60]	; (8001878 <HAL_SPI_MspInit+0x114>)
 800183c:	f002 fbca 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001840:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001852:	2305      	movs	r3, #5
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	4619      	mov	r1, r3
 800185c:	4807      	ldr	r0, [pc, #28]	; (800187c <HAL_SPI_MspInit+0x118>)
 800185e:	f002 fbb9 	bl	8003fd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001862:	bf00      	nop
 8001864:	3730      	adds	r7, #48	; 0x30
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40013000 	.word	0x40013000
 8001870:	58024400 	.word	0x58024400
 8001874:	58020000 	.word	0x58020000
 8001878:	58020c00 	.word	0x58020c00
 800187c:	58021800 	.word	0x58021800

08001880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_MspInit+0x30>)
 8001888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_MspInit+0x30>)
 800188e:	f043 0302 	orr.w	r3, r3, #2
 8001892:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_MspInit+0x30>)
 8001898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	58024400 	.word	0x58024400

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018b8:	e7fe      	b.n	80018b8 <NMI_Handler+0x4>

080018ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <MemManage_Handler+0x4>

080018c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001900:	f000 f934 	bl	8001b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <DMA1_Stream0_IRQHandler+0x10>)
 800190e:	f001 f843 	bl	8002998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	24000380 	.word	0x24000380

0800191c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <DMA2_Stream0_IRQHandler+0x10>)
 8001922:	f001 f839 	bl	8002998 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	240003f8 	.word	0x240003f8

08001930 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <OTG_HS_IRQHandler+0x10>)
 8001936:	f003 fcf6 	bl	8005326 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	240019e0 	.word	0x240019e0

08001944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001948:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <SystemInit+0xd0>)
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194e:	4a31      	ldr	r2, [pc, #196]	; (8001a14 <SystemInit+0xd0>)
 8001950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001958:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <SystemInit+0xd4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	2b06      	cmp	r3, #6
 8001962:	d807      	bhi.n	8001974 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001964:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <SystemInit+0xd4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 030f 	bic.w	r3, r3, #15
 800196c:	4a2a      	ldr	r2, [pc, #168]	; (8001a18 <SystemInit+0xd4>)
 800196e:	f043 0307 	orr.w	r3, r3, #7
 8001972:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <SystemInit+0xd8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a28      	ldr	r2, [pc, #160]	; (8001a1c <SystemInit+0xd8>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001980:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <SystemInit+0xd8>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001986:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <SystemInit+0xd8>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4924      	ldr	r1, [pc, #144]	; (8001a1c <SystemInit+0xd8>)
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <SystemInit+0xdc>)
 800198e:	4013      	ands	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001992:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <SystemInit+0xd4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <SystemInit+0xd4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 030f 	bic.w	r3, r3, #15
 80019a6:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <SystemInit+0xd4>)
 80019a8:	f043 0307 	orr.w	r3, r3, #7
 80019ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019ae:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <SystemInit+0xd8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <SystemInit+0xd8>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <SystemInit+0xd8>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <SystemInit+0xd8>)
 80019c2:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <SystemInit+0xe0>)
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <SystemInit+0xd8>)
 80019c8:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <SystemInit+0xe4>)
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <SystemInit+0xd8>)
 80019ce:	4a17      	ldr	r2, [pc, #92]	; (8001a2c <SystemInit+0xe8>)
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <SystemInit+0xd8>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <SystemInit+0xd8>)
 80019da:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <SystemInit+0xe8>)
 80019dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <SystemInit+0xd8>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <SystemInit+0xd8>)
 80019e6:	4a11      	ldr	r2, [pc, #68]	; (8001a2c <SystemInit+0xe8>)
 80019e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <SystemInit+0xd8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <SystemInit+0xd8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <SystemInit+0xd8>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <SystemInit+0xd8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <SystemInit+0xec>)
 8001a04:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a08:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00
 8001a18:	52002000 	.word	0x52002000
 8001a1c:	58024400 	.word	0x58024400
 8001a20:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a24:	02020200 	.word	0x02020200
 8001a28:	01ff0000 	.word	0x01ff0000
 8001a2c:	01010280 	.word	0x01010280
 8001a30:	52004000 	.word	0x52004000

08001a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a38:	f7ff ff84 	bl	8001944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a3e:	490d      	ldr	r1, [pc, #52]	; (8001a74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a44:	e002      	b.n	8001a4c <LoopCopyDataInit>

08001a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4a:	3304      	adds	r3, #4

08001a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a50:	d3f9      	bcc.n	8001a46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a54:	4c0a      	ldr	r4, [pc, #40]	; (8001a80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a58:	e001      	b.n	8001a5e <LoopFillZerobss>

08001a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a5c:	3204      	adds	r2, #4

08001a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a60:	d3fb      	bcc.n	8001a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a62:	f00d fe57 	bl	800f714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a66:	f7ff fa75 	bl	8000f54 <main>
  bx  lr
 8001a6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a6c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001a70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a74:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8001a78:	0800f7ec 	.word	0x0800f7ec
  ldr r2, =_sbss
 8001a7c:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8001a80:	240020e4 	.word	0x240020e4

08001a84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC3_IRQHandler>
	...

08001a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8e:	2003      	movs	r0, #3
 8001a90:	f000 f980 	bl	8001d94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a94:	f005 fb7e 	bl	8007194 <HAL_RCC_GetSysClockFreq>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_Init+0x68>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	4913      	ldr	r1, [pc, #76]	; (8001af4 <HAL_Init+0x6c>)
 8001aa6:	5ccb      	ldrb	r3, [r1, r3]
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_Init+0x68>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <HAL_Init+0x6c>)
 8001abc:	5cd3      	ldrb	r3, [r2, r3]
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac8:	4a0b      	ldr	r2, [pc, #44]	; (8001af8 <HAL_Init+0x70>)
 8001aca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001acc:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_Init+0x74>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad2:	200f      	movs	r0, #15
 8001ad4:	f000 f814 	bl	8001b00 <HAL_InitTick>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e002      	b.n	8001ae8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae2:	f7ff fecd 	bl	8001880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	58024400 	.word	0x58024400
 8001af4:	0800f7cc 	.word	0x0800f7cc
 8001af8:	24000004 	.word	0x24000004
 8001afc:	24000000 	.word	0x24000000

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_InitTick+0x60>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e021      	b.n	8001b58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_InitTick+0x64>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_InitTick+0x60>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f965 	bl	8001dfa <HAL_SYSTICK_Config>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00e      	b.n	8001b58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	d80a      	bhi.n	8001b56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f000 f92f 	bl	8001daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b4c:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <HAL_InitTick+0x68>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	2400000c 	.word	0x2400000c
 8001b64:	24000000 	.word	0x24000000
 8001b68:	24000008 	.word	0x24000008

08001b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x20>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x24>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_IncTick+0x24>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	2400000c 	.word	0x2400000c
 8001b90:	240004fc 	.word	0x240004fc

08001b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_GetTick+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	240004fc 	.word	0x240004fc

08001bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff ffee 	bl	8001b94 <HAL_GetTick>
 8001bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d005      	beq.n	8001bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_Delay+0x44>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd2:	bf00      	nop
 8001bd4:	f7ff ffde 	bl	8001b94 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d8f7      	bhi.n	8001bd4 <HAL_Delay+0x28>
  {
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2400000c 	.word	0x2400000c

08001bf4 <__NVIC_SetPriorityGrouping>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <__NVIC_SetPriorityGrouping+0x40>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <__NVIC_SetPriorityGrouping+0x40>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00
 8001c38:	05fa0000 	.word	0x05fa0000

08001c3c <__NVIC_GetPriorityGrouping>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <__NVIC_GetPriorityGrouping+0x18>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	f003 0307 	and.w	r3, r3, #7
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_EnableIRQ>:
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	db0b      	blt.n	8001c82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	f003 021f 	and.w	r2, r3, #31
 8001c70:	4907      	ldr	r1, [pc, #28]	; (8001c90 <__NVIC_EnableIRQ+0x38>)
 8001c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	2001      	movs	r0, #1
 8001c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000e100 	.word	0xe000e100

08001c94 <__NVIC_SetPriority>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ca0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	db0a      	blt.n	8001cbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	490c      	ldr	r1, [pc, #48]	; (8001ce0 <__NVIC_SetPriority+0x4c>)
 8001cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cbc:	e00a      	b.n	8001cd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4908      	ldr	r1, [pc, #32]	; (8001ce4 <__NVIC_SetPriority+0x50>)
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	3b04      	subs	r3, #4
 8001ccc:	0112      	lsls	r2, r2, #4
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	761a      	strb	r2, [r3, #24]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000e100 	.word	0xe000e100
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <NVIC_EncodePriority>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f1c3 0307 	rsb	r3, r3, #7
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	bf28      	it	cs
 8001d06:	2304      	movcs	r3, #4
 8001d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d902      	bls.n	8001d18 <NVIC_EncodePriority+0x30>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3b03      	subs	r3, #3
 8001d16:	e000      	b.n	8001d1a <NVIC_EncodePriority+0x32>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43da      	mvns	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	43d9      	mvns	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	4313      	orrs	r3, r2
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	; 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d60:	d301      	bcc.n	8001d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00f      	b.n	8001d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <SysTick_Config+0x40>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6e:	210f      	movs	r1, #15
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	f7ff ff8e 	bl	8001c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <SysTick_Config+0x40>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7e:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <SysTick_Config+0x40>)
 8001d80:	2207      	movs	r2, #7
 8001d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	e000e010 	.word	0xe000e010

08001d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff29 	bl	8001bf4 <__NVIC_SetPriorityGrouping>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db8:	f7ff ff40 	bl	8001c3c <__NVIC_GetPriorityGrouping>
 8001dbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7ff ff90 	bl	8001ce8 <NVIC_EncodePriority>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff5f 	bl	8001c94 <__NVIC_SetPriority>
}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff33 	bl	8001c58 <__NVIC_EnableIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffa4 	bl	8001d50 <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001e1c:	f7ff feba 	bl	8001b94 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e312      	b.n	8002452 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a66      	ldr	r2, [pc, #408]	; (8001fcc <HAL_DMA_Init+0x1b8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d04a      	beq.n	8001ecc <HAL_DMA_Init+0xb8>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a65      	ldr	r2, [pc, #404]	; (8001fd0 <HAL_DMA_Init+0x1bc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d045      	beq.n	8001ecc <HAL_DMA_Init+0xb8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a63      	ldr	r2, [pc, #396]	; (8001fd4 <HAL_DMA_Init+0x1c0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d040      	beq.n	8001ecc <HAL_DMA_Init+0xb8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a62      	ldr	r2, [pc, #392]	; (8001fd8 <HAL_DMA_Init+0x1c4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d03b      	beq.n	8001ecc <HAL_DMA_Init+0xb8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a60      	ldr	r2, [pc, #384]	; (8001fdc <HAL_DMA_Init+0x1c8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d036      	beq.n	8001ecc <HAL_DMA_Init+0xb8>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a5f      	ldr	r2, [pc, #380]	; (8001fe0 <HAL_DMA_Init+0x1cc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d031      	beq.n	8001ecc <HAL_DMA_Init+0xb8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a5d      	ldr	r2, [pc, #372]	; (8001fe4 <HAL_DMA_Init+0x1d0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d02c      	beq.n	8001ecc <HAL_DMA_Init+0xb8>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a5c      	ldr	r2, [pc, #368]	; (8001fe8 <HAL_DMA_Init+0x1d4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d027      	beq.n	8001ecc <HAL_DMA_Init+0xb8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a5a      	ldr	r2, [pc, #360]	; (8001fec <HAL_DMA_Init+0x1d8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d022      	beq.n	8001ecc <HAL_DMA_Init+0xb8>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a59      	ldr	r2, [pc, #356]	; (8001ff0 <HAL_DMA_Init+0x1dc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d01d      	beq.n	8001ecc <HAL_DMA_Init+0xb8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a57      	ldr	r2, [pc, #348]	; (8001ff4 <HAL_DMA_Init+0x1e0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d018      	beq.n	8001ecc <HAL_DMA_Init+0xb8>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a56      	ldr	r2, [pc, #344]	; (8001ff8 <HAL_DMA_Init+0x1e4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <HAL_DMA_Init+0xb8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a54      	ldr	r2, [pc, #336]	; (8001ffc <HAL_DMA_Init+0x1e8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00e      	beq.n	8001ecc <HAL_DMA_Init+0xb8>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a53      	ldr	r2, [pc, #332]	; (8002000 <HAL_DMA_Init+0x1ec>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <HAL_DMA_Init+0xb8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a51      	ldr	r2, [pc, #324]	; (8002004 <HAL_DMA_Init+0x1f0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d004      	beq.n	8001ecc <HAL_DMA_Init+0xb8>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a50      	ldr	r2, [pc, #320]	; (8002008 <HAL_DMA_Init+0x1f4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d101      	bne.n	8001ed0 <HAL_DMA_Init+0xbc>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_DMA_Init+0xbe>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 813c 	beq.w	8002150 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a37      	ldr	r2, [pc, #220]	; (8001fcc <HAL_DMA_Init+0x1b8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d04a      	beq.n	8001f88 <HAL_DMA_Init+0x174>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a36      	ldr	r2, [pc, #216]	; (8001fd0 <HAL_DMA_Init+0x1bc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d045      	beq.n	8001f88 <HAL_DMA_Init+0x174>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a34      	ldr	r2, [pc, #208]	; (8001fd4 <HAL_DMA_Init+0x1c0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d040      	beq.n	8001f88 <HAL_DMA_Init+0x174>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a33      	ldr	r2, [pc, #204]	; (8001fd8 <HAL_DMA_Init+0x1c4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d03b      	beq.n	8001f88 <HAL_DMA_Init+0x174>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a31      	ldr	r2, [pc, #196]	; (8001fdc <HAL_DMA_Init+0x1c8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d036      	beq.n	8001f88 <HAL_DMA_Init+0x174>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a30      	ldr	r2, [pc, #192]	; (8001fe0 <HAL_DMA_Init+0x1cc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d031      	beq.n	8001f88 <HAL_DMA_Init+0x174>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a2e      	ldr	r2, [pc, #184]	; (8001fe4 <HAL_DMA_Init+0x1d0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d02c      	beq.n	8001f88 <HAL_DMA_Init+0x174>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a2d      	ldr	r2, [pc, #180]	; (8001fe8 <HAL_DMA_Init+0x1d4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d027      	beq.n	8001f88 <HAL_DMA_Init+0x174>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a2b      	ldr	r2, [pc, #172]	; (8001fec <HAL_DMA_Init+0x1d8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d022      	beq.n	8001f88 <HAL_DMA_Init+0x174>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a2a      	ldr	r2, [pc, #168]	; (8001ff0 <HAL_DMA_Init+0x1dc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d01d      	beq.n	8001f88 <HAL_DMA_Init+0x174>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a28      	ldr	r2, [pc, #160]	; (8001ff4 <HAL_DMA_Init+0x1e0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d018      	beq.n	8001f88 <HAL_DMA_Init+0x174>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a27      	ldr	r2, [pc, #156]	; (8001ff8 <HAL_DMA_Init+0x1e4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_DMA_Init+0x174>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a25      	ldr	r2, [pc, #148]	; (8001ffc <HAL_DMA_Init+0x1e8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00e      	beq.n	8001f88 <HAL_DMA_Init+0x174>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a24      	ldr	r2, [pc, #144]	; (8002000 <HAL_DMA_Init+0x1ec>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d009      	beq.n	8001f88 <HAL_DMA_Init+0x174>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a22      	ldr	r2, [pc, #136]	; (8002004 <HAL_DMA_Init+0x1f0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d004      	beq.n	8001f88 <HAL_DMA_Init+0x174>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a21      	ldr	r2, [pc, #132]	; (8002008 <HAL_DMA_Init+0x1f4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d108      	bne.n	8001f9a <HAL_DMA_Init+0x186>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e007      	b.n	8001faa <HAL_DMA_Init+0x196>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0201 	bic.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001faa:	e02f      	b.n	800200c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fac:	f7ff fdf2 	bl	8001b94 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d928      	bls.n	800200c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e242      	b.n	8002452 <HAL_DMA_Init+0x63e>
 8001fcc:	40020010 	.word	0x40020010
 8001fd0:	40020028 	.word	0x40020028
 8001fd4:	40020040 	.word	0x40020040
 8001fd8:	40020058 	.word	0x40020058
 8001fdc:	40020070 	.word	0x40020070
 8001fe0:	40020088 	.word	0x40020088
 8001fe4:	400200a0 	.word	0x400200a0
 8001fe8:	400200b8 	.word	0x400200b8
 8001fec:	40020410 	.word	0x40020410
 8001ff0:	40020428 	.word	0x40020428
 8001ff4:	40020440 	.word	0x40020440
 8001ff8:	40020458 	.word	0x40020458
 8001ffc:	40020470 	.word	0x40020470
 8002000:	40020488 	.word	0x40020488
 8002004:	400204a0 	.word	0x400204a0
 8002008:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1c8      	bne.n	8001fac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4b83      	ldr	r3, [pc, #524]	; (8002234 <HAL_DMA_Init+0x420>)
 8002026:	4013      	ands	r3, r2
 8002028:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002032:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4313      	orrs	r3, r2
 8002056:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	2b04      	cmp	r3, #4
 800205e:	d107      	bne.n	8002070 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	4313      	orrs	r3, r2
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b28      	cmp	r3, #40	; 0x28
 8002076:	d903      	bls.n	8002080 <HAL_DMA_Init+0x26c>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b2e      	cmp	r3, #46	; 0x2e
 800207e:	d91f      	bls.n	80020c0 <HAL_DMA_Init+0x2ac>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b3e      	cmp	r3, #62	; 0x3e
 8002086:	d903      	bls.n	8002090 <HAL_DMA_Init+0x27c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b42      	cmp	r3, #66	; 0x42
 800208e:	d917      	bls.n	80020c0 <HAL_DMA_Init+0x2ac>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b46      	cmp	r3, #70	; 0x46
 8002096:	d903      	bls.n	80020a0 <HAL_DMA_Init+0x28c>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b48      	cmp	r3, #72	; 0x48
 800209e:	d90f      	bls.n	80020c0 <HAL_DMA_Init+0x2ac>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b4e      	cmp	r3, #78	; 0x4e
 80020a6:	d903      	bls.n	80020b0 <HAL_DMA_Init+0x29c>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b52      	cmp	r3, #82	; 0x52
 80020ae:	d907      	bls.n	80020c0 <HAL_DMA_Init+0x2ac>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b73      	cmp	r3, #115	; 0x73
 80020b6:	d905      	bls.n	80020c4 <HAL_DMA_Init+0x2b0>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b77      	cmp	r3, #119	; 0x77
 80020be:	d801      	bhi.n	80020c4 <HAL_DMA_Init+0x2b0>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <HAL_DMA_Init+0x2b2>
 80020c4:	2300      	movs	r3, #0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020d0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f023 0307 	bic.w	r3, r3, #7
 80020e8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d117      	bne.n	800212c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	4313      	orrs	r3, r2
 8002104:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00e      	beq.n	800212c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f001 fdd6 	bl	8003cc0 <DMA_CheckFifoParam>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2240      	movs	r2, #64	; 0x40
 800211e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e192      	b.n	8002452 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f001 fd11 	bl	8003b5c <DMA_CalcBaseAndBitshift>
 800213a:	4603      	mov	r3, r0
 800213c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	223f      	movs	r2, #63	; 0x3f
 8002148:	409a      	lsls	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	e0c8      	b.n	80022e2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a38      	ldr	r2, [pc, #224]	; (8002238 <HAL_DMA_Init+0x424>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d022      	beq.n	80021a0 <HAL_DMA_Init+0x38c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a37      	ldr	r2, [pc, #220]	; (800223c <HAL_DMA_Init+0x428>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d01d      	beq.n	80021a0 <HAL_DMA_Init+0x38c>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a35      	ldr	r2, [pc, #212]	; (8002240 <HAL_DMA_Init+0x42c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d018      	beq.n	80021a0 <HAL_DMA_Init+0x38c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a34      	ldr	r2, [pc, #208]	; (8002244 <HAL_DMA_Init+0x430>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d013      	beq.n	80021a0 <HAL_DMA_Init+0x38c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a32      	ldr	r2, [pc, #200]	; (8002248 <HAL_DMA_Init+0x434>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00e      	beq.n	80021a0 <HAL_DMA_Init+0x38c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a31      	ldr	r2, [pc, #196]	; (800224c <HAL_DMA_Init+0x438>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d009      	beq.n	80021a0 <HAL_DMA_Init+0x38c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2f      	ldr	r2, [pc, #188]	; (8002250 <HAL_DMA_Init+0x43c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d004      	beq.n	80021a0 <HAL_DMA_Init+0x38c>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2e      	ldr	r2, [pc, #184]	; (8002254 <HAL_DMA_Init+0x440>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_DMA_Init+0x390>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <HAL_DMA_Init+0x392>
 80021a4:	2300      	movs	r3, #0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8092 	beq.w	80022d0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a21      	ldr	r2, [pc, #132]	; (8002238 <HAL_DMA_Init+0x424>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d021      	beq.n	80021fa <HAL_DMA_Init+0x3e6>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a20      	ldr	r2, [pc, #128]	; (800223c <HAL_DMA_Init+0x428>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d01c      	beq.n	80021fa <HAL_DMA_Init+0x3e6>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1e      	ldr	r2, [pc, #120]	; (8002240 <HAL_DMA_Init+0x42c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d017      	beq.n	80021fa <HAL_DMA_Init+0x3e6>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <HAL_DMA_Init+0x430>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d012      	beq.n	80021fa <HAL_DMA_Init+0x3e6>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <HAL_DMA_Init+0x434>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00d      	beq.n	80021fa <HAL_DMA_Init+0x3e6>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1a      	ldr	r2, [pc, #104]	; (800224c <HAL_DMA_Init+0x438>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d008      	beq.n	80021fa <HAL_DMA_Init+0x3e6>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a18      	ldr	r2, [pc, #96]	; (8002250 <HAL_DMA_Init+0x43c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d003      	beq.n	80021fa <HAL_DMA_Init+0x3e6>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a17      	ldr	r2, [pc, #92]	; (8002254 <HAL_DMA_Init+0x440>)
 80021f8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_DMA_Init+0x444>)
 8002216:	4013      	ands	r3, r2
 8002218:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b40      	cmp	r3, #64	; 0x40
 8002220:	d01c      	beq.n	800225c <HAL_DMA_Init+0x448>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b80      	cmp	r3, #128	; 0x80
 8002228:	d102      	bne.n	8002230 <HAL_DMA_Init+0x41c>
 800222a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800222e:	e016      	b.n	800225e <HAL_DMA_Init+0x44a>
 8002230:	2300      	movs	r3, #0
 8002232:	e014      	b.n	800225e <HAL_DMA_Init+0x44a>
 8002234:	fe10803f 	.word	0xfe10803f
 8002238:	58025408 	.word	0x58025408
 800223c:	5802541c 	.word	0x5802541c
 8002240:	58025430 	.word	0x58025430
 8002244:	58025444 	.word	0x58025444
 8002248:	58025458 	.word	0x58025458
 800224c:	5802546c 	.word	0x5802546c
 8002250:	58025480 	.word	0x58025480
 8002254:	58025494 	.word	0x58025494
 8002258:	fffe000f 	.word	0xfffe000f
 800225c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68d2      	ldr	r2, [r2, #12]
 8002262:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002264:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800226c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002274:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800227c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002284:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800228c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4313      	orrs	r3, r2
 8002292:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b6e      	ldr	r3, [pc, #440]	; (800245c <HAL_DMA_Init+0x648>)
 80022a4:	4413      	add	r3, r2
 80022a6:	4a6e      	ldr	r2, [pc, #440]	; (8002460 <HAL_DMA_Init+0x64c>)
 80022a8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	009a      	lsls	r2, r3, #2
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f001 fc51 	bl	8003b5c <DMA_CalcBaseAndBitshift>
 80022ba:	4603      	mov	r3, r0
 80022bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	2201      	movs	r2, #1
 80022c8:	409a      	lsls	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	e008      	b.n	80022e2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2240      	movs	r2, #64	; 0x40
 80022d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2203      	movs	r2, #3
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0b7      	b.n	8002452 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5f      	ldr	r2, [pc, #380]	; (8002464 <HAL_DMA_Init+0x650>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d072      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a5d      	ldr	r2, [pc, #372]	; (8002468 <HAL_DMA_Init+0x654>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d06d      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a5c      	ldr	r2, [pc, #368]	; (800246c <HAL_DMA_Init+0x658>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d068      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a5a      	ldr	r2, [pc, #360]	; (8002470 <HAL_DMA_Init+0x65c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d063      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a59      	ldr	r2, [pc, #356]	; (8002474 <HAL_DMA_Init+0x660>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d05e      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a57      	ldr	r2, [pc, #348]	; (8002478 <HAL_DMA_Init+0x664>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d059      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a56      	ldr	r2, [pc, #344]	; (800247c <HAL_DMA_Init+0x668>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d054      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a54      	ldr	r2, [pc, #336]	; (8002480 <HAL_DMA_Init+0x66c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d04f      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a53      	ldr	r2, [pc, #332]	; (8002484 <HAL_DMA_Init+0x670>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d04a      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a51      	ldr	r2, [pc, #324]	; (8002488 <HAL_DMA_Init+0x674>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d045      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a50      	ldr	r2, [pc, #320]	; (800248c <HAL_DMA_Init+0x678>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d040      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a4e      	ldr	r2, [pc, #312]	; (8002490 <HAL_DMA_Init+0x67c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d03b      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a4d      	ldr	r2, [pc, #308]	; (8002494 <HAL_DMA_Init+0x680>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d036      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a4b      	ldr	r2, [pc, #300]	; (8002498 <HAL_DMA_Init+0x684>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d031      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a4a      	ldr	r2, [pc, #296]	; (800249c <HAL_DMA_Init+0x688>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d02c      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a48      	ldr	r2, [pc, #288]	; (80024a0 <HAL_DMA_Init+0x68c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d027      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a47      	ldr	r2, [pc, #284]	; (80024a4 <HAL_DMA_Init+0x690>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d022      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a45      	ldr	r2, [pc, #276]	; (80024a8 <HAL_DMA_Init+0x694>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01d      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a44      	ldr	r2, [pc, #272]	; (80024ac <HAL_DMA_Init+0x698>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d018      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a42      	ldr	r2, [pc, #264]	; (80024b0 <HAL_DMA_Init+0x69c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d013      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a41      	ldr	r2, [pc, #260]	; (80024b4 <HAL_DMA_Init+0x6a0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00e      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a3f      	ldr	r2, [pc, #252]	; (80024b8 <HAL_DMA_Init+0x6a4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d009      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a3e      	ldr	r2, [pc, #248]	; (80024bc <HAL_DMA_Init+0x6a8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d004      	beq.n	80023d2 <HAL_DMA_Init+0x5be>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a3c      	ldr	r2, [pc, #240]	; (80024c0 <HAL_DMA_Init+0x6ac>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d101      	bne.n	80023d6 <HAL_DMA_Init+0x5c2>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_DMA_Init+0x5c4>
 80023d6:	2300      	movs	r3, #0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d032      	beq.n	8002442 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f001 fceb 	bl	8003db8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b80      	cmp	r3, #128	; 0x80
 80023e8:	d102      	bne.n	80023f0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002404:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d010      	beq.n	8002430 <HAL_DMA_Init+0x61c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b08      	cmp	r3, #8
 8002414:	d80c      	bhi.n	8002430 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f001 fd68 	bl	8003eec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	e008      	b.n	8002442 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	a7fdabf8 	.word	0xa7fdabf8
 8002460:	cccccccd 	.word	0xcccccccd
 8002464:	40020010 	.word	0x40020010
 8002468:	40020028 	.word	0x40020028
 800246c:	40020040 	.word	0x40020040
 8002470:	40020058 	.word	0x40020058
 8002474:	40020070 	.word	0x40020070
 8002478:	40020088 	.word	0x40020088
 800247c:	400200a0 	.word	0x400200a0
 8002480:	400200b8 	.word	0x400200b8
 8002484:	40020410 	.word	0x40020410
 8002488:	40020428 	.word	0x40020428
 800248c:	40020440 	.word	0x40020440
 8002490:	40020458 	.word	0x40020458
 8002494:	40020470 	.word	0x40020470
 8002498:	40020488 	.word	0x40020488
 800249c:	400204a0 	.word	0x400204a0
 80024a0:	400204b8 	.word	0x400204b8
 80024a4:	58025408 	.word	0x58025408
 80024a8:	5802541c 	.word	0x5802541c
 80024ac:	58025430 	.word	0x58025430
 80024b0:	58025444 	.word	0x58025444
 80024b4:	58025458 	.word	0x58025458
 80024b8:	5802546c 	.word	0x5802546c
 80024bc:	58025480 	.word	0x58025480
 80024c0:	58025494 	.word	0x58025494

080024c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e226      	b.n	800292e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_DMA_Start_IT+0x2a>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e21f      	b.n	800292e <HAL_DMA_Start_IT+0x46a>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	f040 820a 	bne.w	8002918 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a68      	ldr	r2, [pc, #416]	; (80026b8 <HAL_DMA_Start_IT+0x1f4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d04a      	beq.n	80025b2 <HAL_DMA_Start_IT+0xee>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a66      	ldr	r2, [pc, #408]	; (80026bc <HAL_DMA_Start_IT+0x1f8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d045      	beq.n	80025b2 <HAL_DMA_Start_IT+0xee>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a65      	ldr	r2, [pc, #404]	; (80026c0 <HAL_DMA_Start_IT+0x1fc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d040      	beq.n	80025b2 <HAL_DMA_Start_IT+0xee>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a63      	ldr	r2, [pc, #396]	; (80026c4 <HAL_DMA_Start_IT+0x200>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d03b      	beq.n	80025b2 <HAL_DMA_Start_IT+0xee>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a62      	ldr	r2, [pc, #392]	; (80026c8 <HAL_DMA_Start_IT+0x204>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d036      	beq.n	80025b2 <HAL_DMA_Start_IT+0xee>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a60      	ldr	r2, [pc, #384]	; (80026cc <HAL_DMA_Start_IT+0x208>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d031      	beq.n	80025b2 <HAL_DMA_Start_IT+0xee>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a5f      	ldr	r2, [pc, #380]	; (80026d0 <HAL_DMA_Start_IT+0x20c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d02c      	beq.n	80025b2 <HAL_DMA_Start_IT+0xee>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a5d      	ldr	r2, [pc, #372]	; (80026d4 <HAL_DMA_Start_IT+0x210>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d027      	beq.n	80025b2 <HAL_DMA_Start_IT+0xee>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a5c      	ldr	r2, [pc, #368]	; (80026d8 <HAL_DMA_Start_IT+0x214>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <HAL_DMA_Start_IT+0xee>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a5a      	ldr	r2, [pc, #360]	; (80026dc <HAL_DMA_Start_IT+0x218>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01d      	beq.n	80025b2 <HAL_DMA_Start_IT+0xee>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a59      	ldr	r2, [pc, #356]	; (80026e0 <HAL_DMA_Start_IT+0x21c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d018      	beq.n	80025b2 <HAL_DMA_Start_IT+0xee>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a57      	ldr	r2, [pc, #348]	; (80026e4 <HAL_DMA_Start_IT+0x220>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_DMA_Start_IT+0xee>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a56      	ldr	r2, [pc, #344]	; (80026e8 <HAL_DMA_Start_IT+0x224>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00e      	beq.n	80025b2 <HAL_DMA_Start_IT+0xee>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a54      	ldr	r2, [pc, #336]	; (80026ec <HAL_DMA_Start_IT+0x228>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_DMA_Start_IT+0xee>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a53      	ldr	r2, [pc, #332]	; (80026f0 <HAL_DMA_Start_IT+0x22c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <HAL_DMA_Start_IT+0xee>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a51      	ldr	r2, [pc, #324]	; (80026f4 <HAL_DMA_Start_IT+0x230>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d108      	bne.n	80025c4 <HAL_DMA_Start_IT+0x100>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e007      	b.n	80025d4 <HAL_DMA_Start_IT+0x110>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f001 f912 	bl	8003804 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a34      	ldr	r2, [pc, #208]	; (80026b8 <HAL_DMA_Start_IT+0x1f4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d04a      	beq.n	8002680 <HAL_DMA_Start_IT+0x1bc>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a33      	ldr	r2, [pc, #204]	; (80026bc <HAL_DMA_Start_IT+0x1f8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d045      	beq.n	8002680 <HAL_DMA_Start_IT+0x1bc>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a31      	ldr	r2, [pc, #196]	; (80026c0 <HAL_DMA_Start_IT+0x1fc>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d040      	beq.n	8002680 <HAL_DMA_Start_IT+0x1bc>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a30      	ldr	r2, [pc, #192]	; (80026c4 <HAL_DMA_Start_IT+0x200>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d03b      	beq.n	8002680 <HAL_DMA_Start_IT+0x1bc>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2e      	ldr	r2, [pc, #184]	; (80026c8 <HAL_DMA_Start_IT+0x204>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d036      	beq.n	8002680 <HAL_DMA_Start_IT+0x1bc>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2d      	ldr	r2, [pc, #180]	; (80026cc <HAL_DMA_Start_IT+0x208>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d031      	beq.n	8002680 <HAL_DMA_Start_IT+0x1bc>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a2b      	ldr	r2, [pc, #172]	; (80026d0 <HAL_DMA_Start_IT+0x20c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d02c      	beq.n	8002680 <HAL_DMA_Start_IT+0x1bc>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2a      	ldr	r2, [pc, #168]	; (80026d4 <HAL_DMA_Start_IT+0x210>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d027      	beq.n	8002680 <HAL_DMA_Start_IT+0x1bc>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a28      	ldr	r2, [pc, #160]	; (80026d8 <HAL_DMA_Start_IT+0x214>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d022      	beq.n	8002680 <HAL_DMA_Start_IT+0x1bc>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a27      	ldr	r2, [pc, #156]	; (80026dc <HAL_DMA_Start_IT+0x218>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d01d      	beq.n	8002680 <HAL_DMA_Start_IT+0x1bc>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <HAL_DMA_Start_IT+0x21c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d018      	beq.n	8002680 <HAL_DMA_Start_IT+0x1bc>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a24      	ldr	r2, [pc, #144]	; (80026e4 <HAL_DMA_Start_IT+0x220>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d013      	beq.n	8002680 <HAL_DMA_Start_IT+0x1bc>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a22      	ldr	r2, [pc, #136]	; (80026e8 <HAL_DMA_Start_IT+0x224>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00e      	beq.n	8002680 <HAL_DMA_Start_IT+0x1bc>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a21      	ldr	r2, [pc, #132]	; (80026ec <HAL_DMA_Start_IT+0x228>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d009      	beq.n	8002680 <HAL_DMA_Start_IT+0x1bc>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <HAL_DMA_Start_IT+0x22c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d004      	beq.n	8002680 <HAL_DMA_Start_IT+0x1bc>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <HAL_DMA_Start_IT+0x230>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d101      	bne.n	8002684 <HAL_DMA_Start_IT+0x1c0>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <HAL_DMA_Start_IT+0x1c2>
 8002684:	2300      	movs	r3, #0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d036      	beq.n	80026f8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f023 021e 	bic.w	r2, r3, #30
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0216 	orr.w	r2, r2, #22
 800269c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d03e      	beq.n	8002724 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0208 	orr.w	r2, r2, #8
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e035      	b.n	8002724 <HAL_DMA_Start_IT+0x260>
 80026b8:	40020010 	.word	0x40020010
 80026bc:	40020028 	.word	0x40020028
 80026c0:	40020040 	.word	0x40020040
 80026c4:	40020058 	.word	0x40020058
 80026c8:	40020070 	.word	0x40020070
 80026cc:	40020088 	.word	0x40020088
 80026d0:	400200a0 	.word	0x400200a0
 80026d4:	400200b8 	.word	0x400200b8
 80026d8:	40020410 	.word	0x40020410
 80026dc:	40020428 	.word	0x40020428
 80026e0:	40020440 	.word	0x40020440
 80026e4:	40020458 	.word	0x40020458
 80026e8:	40020470 	.word	0x40020470
 80026ec:	40020488 	.word	0x40020488
 80026f0:	400204a0 	.word	0x400204a0
 80026f4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 020e 	bic.w	r2, r3, #14
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 020a 	orr.w	r2, r2, #10
 800270a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0204 	orr.w	r2, r2, #4
 8002722:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a83      	ldr	r2, [pc, #524]	; (8002938 <HAL_DMA_Start_IT+0x474>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d072      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a82      	ldr	r2, [pc, #520]	; (800293c <HAL_DMA_Start_IT+0x478>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d06d      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a80      	ldr	r2, [pc, #512]	; (8002940 <HAL_DMA_Start_IT+0x47c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d068      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a7f      	ldr	r2, [pc, #508]	; (8002944 <HAL_DMA_Start_IT+0x480>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d063      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a7d      	ldr	r2, [pc, #500]	; (8002948 <HAL_DMA_Start_IT+0x484>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d05e      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a7c      	ldr	r2, [pc, #496]	; (800294c <HAL_DMA_Start_IT+0x488>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d059      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a7a      	ldr	r2, [pc, #488]	; (8002950 <HAL_DMA_Start_IT+0x48c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d054      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a79      	ldr	r2, [pc, #484]	; (8002954 <HAL_DMA_Start_IT+0x490>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d04f      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a77      	ldr	r2, [pc, #476]	; (8002958 <HAL_DMA_Start_IT+0x494>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d04a      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a76      	ldr	r2, [pc, #472]	; (800295c <HAL_DMA_Start_IT+0x498>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d045      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a74      	ldr	r2, [pc, #464]	; (8002960 <HAL_DMA_Start_IT+0x49c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d040      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a73      	ldr	r2, [pc, #460]	; (8002964 <HAL_DMA_Start_IT+0x4a0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d03b      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a71      	ldr	r2, [pc, #452]	; (8002968 <HAL_DMA_Start_IT+0x4a4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d036      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a70      	ldr	r2, [pc, #448]	; (800296c <HAL_DMA_Start_IT+0x4a8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d031      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a6e      	ldr	r2, [pc, #440]	; (8002970 <HAL_DMA_Start_IT+0x4ac>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d02c      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a6d      	ldr	r2, [pc, #436]	; (8002974 <HAL_DMA_Start_IT+0x4b0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d027      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a6b      	ldr	r2, [pc, #428]	; (8002978 <HAL_DMA_Start_IT+0x4b4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d022      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a6a      	ldr	r2, [pc, #424]	; (800297c <HAL_DMA_Start_IT+0x4b8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d01d      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a68      	ldr	r2, [pc, #416]	; (8002980 <HAL_DMA_Start_IT+0x4bc>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d018      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a67      	ldr	r2, [pc, #412]	; (8002984 <HAL_DMA_Start_IT+0x4c0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a65      	ldr	r2, [pc, #404]	; (8002988 <HAL_DMA_Start_IT+0x4c4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00e      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a64      	ldr	r2, [pc, #400]	; (800298c <HAL_DMA_Start_IT+0x4c8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a62      	ldr	r2, [pc, #392]	; (8002990 <HAL_DMA_Start_IT+0x4cc>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_DMA_Start_IT+0x350>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a61      	ldr	r2, [pc, #388]	; (8002994 <HAL_DMA_Start_IT+0x4d0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d101      	bne.n	8002818 <HAL_DMA_Start_IT+0x354>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_DMA_Start_IT+0x356>
 8002818:	2300      	movs	r3, #0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01a      	beq.n	8002854 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800283a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800284e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002852:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a37      	ldr	r2, [pc, #220]	; (8002938 <HAL_DMA_Start_IT+0x474>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d04a      	beq.n	80028f4 <HAL_DMA_Start_IT+0x430>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a36      	ldr	r2, [pc, #216]	; (800293c <HAL_DMA_Start_IT+0x478>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d045      	beq.n	80028f4 <HAL_DMA_Start_IT+0x430>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a34      	ldr	r2, [pc, #208]	; (8002940 <HAL_DMA_Start_IT+0x47c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d040      	beq.n	80028f4 <HAL_DMA_Start_IT+0x430>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a33      	ldr	r2, [pc, #204]	; (8002944 <HAL_DMA_Start_IT+0x480>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d03b      	beq.n	80028f4 <HAL_DMA_Start_IT+0x430>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a31      	ldr	r2, [pc, #196]	; (8002948 <HAL_DMA_Start_IT+0x484>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d036      	beq.n	80028f4 <HAL_DMA_Start_IT+0x430>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a30      	ldr	r2, [pc, #192]	; (800294c <HAL_DMA_Start_IT+0x488>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d031      	beq.n	80028f4 <HAL_DMA_Start_IT+0x430>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a2e      	ldr	r2, [pc, #184]	; (8002950 <HAL_DMA_Start_IT+0x48c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d02c      	beq.n	80028f4 <HAL_DMA_Start_IT+0x430>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a2d      	ldr	r2, [pc, #180]	; (8002954 <HAL_DMA_Start_IT+0x490>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d027      	beq.n	80028f4 <HAL_DMA_Start_IT+0x430>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2b      	ldr	r2, [pc, #172]	; (8002958 <HAL_DMA_Start_IT+0x494>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d022      	beq.n	80028f4 <HAL_DMA_Start_IT+0x430>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2a      	ldr	r2, [pc, #168]	; (800295c <HAL_DMA_Start_IT+0x498>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d01d      	beq.n	80028f4 <HAL_DMA_Start_IT+0x430>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a28      	ldr	r2, [pc, #160]	; (8002960 <HAL_DMA_Start_IT+0x49c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d018      	beq.n	80028f4 <HAL_DMA_Start_IT+0x430>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a27      	ldr	r2, [pc, #156]	; (8002964 <HAL_DMA_Start_IT+0x4a0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d013      	beq.n	80028f4 <HAL_DMA_Start_IT+0x430>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a25      	ldr	r2, [pc, #148]	; (8002968 <HAL_DMA_Start_IT+0x4a4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00e      	beq.n	80028f4 <HAL_DMA_Start_IT+0x430>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a24      	ldr	r2, [pc, #144]	; (800296c <HAL_DMA_Start_IT+0x4a8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d009      	beq.n	80028f4 <HAL_DMA_Start_IT+0x430>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a22      	ldr	r2, [pc, #136]	; (8002970 <HAL_DMA_Start_IT+0x4ac>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d004      	beq.n	80028f4 <HAL_DMA_Start_IT+0x430>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a21      	ldr	r2, [pc, #132]	; (8002974 <HAL_DMA_Start_IT+0x4b0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d108      	bne.n	8002906 <HAL_DMA_Start_IT+0x442>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	e012      	b.n	800292c <HAL_DMA_Start_IT+0x468>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0201 	orr.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e009      	b.n	800292c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800291e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800292c:	7dfb      	ldrb	r3, [r7, #23]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40020010 	.word	0x40020010
 800293c:	40020028 	.word	0x40020028
 8002940:	40020040 	.word	0x40020040
 8002944:	40020058 	.word	0x40020058
 8002948:	40020070 	.word	0x40020070
 800294c:	40020088 	.word	0x40020088
 8002950:	400200a0 	.word	0x400200a0
 8002954:	400200b8 	.word	0x400200b8
 8002958:	40020410 	.word	0x40020410
 800295c:	40020428 	.word	0x40020428
 8002960:	40020440 	.word	0x40020440
 8002964:	40020458 	.word	0x40020458
 8002968:	40020470 	.word	0x40020470
 800296c:	40020488 	.word	0x40020488
 8002970:	400204a0 	.word	0x400204a0
 8002974:	400204b8 	.word	0x400204b8
 8002978:	58025408 	.word	0x58025408
 800297c:	5802541c 	.word	0x5802541c
 8002980:	58025430 	.word	0x58025430
 8002984:	58025444 	.word	0x58025444
 8002988:	58025458 	.word	0x58025458
 800298c:	5802546c 	.word	0x5802546c
 8002990:	58025480 	.word	0x58025480
 8002994:	58025494 	.word	0x58025494

08002998 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029a4:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <HAL_DMA_IRQHandler+0x1ac>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a67      	ldr	r2, [pc, #412]	; (8002b48 <HAL_DMA_IRQHandler+0x1b0>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	0a9b      	lsrs	r3, r3, #10
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a5f      	ldr	r2, [pc, #380]	; (8002b4c <HAL_DMA_IRQHandler+0x1b4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d04a      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a5d      	ldr	r2, [pc, #372]	; (8002b50 <HAL_DMA_IRQHandler+0x1b8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d045      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a5c      	ldr	r2, [pc, #368]	; (8002b54 <HAL_DMA_IRQHandler+0x1bc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d040      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a5a      	ldr	r2, [pc, #360]	; (8002b58 <HAL_DMA_IRQHandler+0x1c0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d03b      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a59      	ldr	r2, [pc, #356]	; (8002b5c <HAL_DMA_IRQHandler+0x1c4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d036      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a57      	ldr	r2, [pc, #348]	; (8002b60 <HAL_DMA_IRQHandler+0x1c8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d031      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a56      	ldr	r2, [pc, #344]	; (8002b64 <HAL_DMA_IRQHandler+0x1cc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d02c      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a54      	ldr	r2, [pc, #336]	; (8002b68 <HAL_DMA_IRQHandler+0x1d0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d027      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a53      	ldr	r2, [pc, #332]	; (8002b6c <HAL_DMA_IRQHandler+0x1d4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d022      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a51      	ldr	r2, [pc, #324]	; (8002b70 <HAL_DMA_IRQHandler+0x1d8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01d      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a50      	ldr	r2, [pc, #320]	; (8002b74 <HAL_DMA_IRQHandler+0x1dc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d018      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a4e      	ldr	r2, [pc, #312]	; (8002b78 <HAL_DMA_IRQHandler+0x1e0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a4d      	ldr	r2, [pc, #308]	; (8002b7c <HAL_DMA_IRQHandler+0x1e4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00e      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a4b      	ldr	r2, [pc, #300]	; (8002b80 <HAL_DMA_IRQHandler+0x1e8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d009      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a4a      	ldr	r2, [pc, #296]	; (8002b84 <HAL_DMA_IRQHandler+0x1ec>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d004      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xd2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a48      	ldr	r2, [pc, #288]	; (8002b88 <HAL_DMA_IRQHandler+0x1f0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d101      	bne.n	8002a6e <HAL_DMA_IRQHandler+0xd6>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_DMA_IRQHandler+0xd8>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 842b 	beq.w	80032cc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2208      	movs	r2, #8
 8002a80:	409a      	lsls	r2, r3
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80a2 	beq.w	8002bd0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a2e      	ldr	r2, [pc, #184]	; (8002b4c <HAL_DMA_IRQHandler+0x1b4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d04a      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a2d      	ldr	r2, [pc, #180]	; (8002b50 <HAL_DMA_IRQHandler+0x1b8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d045      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2b      	ldr	r2, [pc, #172]	; (8002b54 <HAL_DMA_IRQHandler+0x1bc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d040      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a2a      	ldr	r2, [pc, #168]	; (8002b58 <HAL_DMA_IRQHandler+0x1c0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d03b      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a28      	ldr	r2, [pc, #160]	; (8002b5c <HAL_DMA_IRQHandler+0x1c4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d036      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a27      	ldr	r2, [pc, #156]	; (8002b60 <HAL_DMA_IRQHandler+0x1c8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d031      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a25      	ldr	r2, [pc, #148]	; (8002b64 <HAL_DMA_IRQHandler+0x1cc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d02c      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a24      	ldr	r2, [pc, #144]	; (8002b68 <HAL_DMA_IRQHandler+0x1d0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d027      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a22      	ldr	r2, [pc, #136]	; (8002b6c <HAL_DMA_IRQHandler+0x1d4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d022      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a21      	ldr	r2, [pc, #132]	; (8002b70 <HAL_DMA_IRQHandler+0x1d8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d01d      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1f      	ldr	r2, [pc, #124]	; (8002b74 <HAL_DMA_IRQHandler+0x1dc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d018      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1e      	ldr	r2, [pc, #120]	; (8002b78 <HAL_DMA_IRQHandler+0x1e0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d013      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <HAL_DMA_IRQHandler+0x1e4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00e      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <HAL_DMA_IRQHandler+0x1e8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d009      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <HAL_DMA_IRQHandler+0x1ec>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d004      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x194>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <HAL_DMA_IRQHandler+0x1f0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d12f      	bne.n	8002b8c <HAL_DMA_IRQHandler+0x1f4>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	e02e      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x208>
 8002b42:	bf00      	nop
 8002b44:	24000000 	.word	0x24000000
 8002b48:	1b4e81b5 	.word	0x1b4e81b5
 8002b4c:	40020010 	.word	0x40020010
 8002b50:	40020028 	.word	0x40020028
 8002b54:	40020040 	.word	0x40020040
 8002b58:	40020058 	.word	0x40020058
 8002b5c:	40020070 	.word	0x40020070
 8002b60:	40020088 	.word	0x40020088
 8002b64:	400200a0 	.word	0x400200a0
 8002b68:	400200b8 	.word	0x400200b8
 8002b6c:	40020410 	.word	0x40020410
 8002b70:	40020428 	.word	0x40020428
 8002b74:	40020440 	.word	0x40020440
 8002b78:	40020458 	.word	0x40020458
 8002b7c:	40020470 	.word	0x40020470
 8002b80:	40020488 	.word	0x40020488
 8002b84:	400204a0 	.word	0x400204a0
 8002b88:	400204b8 	.word	0x400204b8
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0204 	bic.w	r2, r2, #4
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	fa22 f303 	lsr.w	r3, r2, r3
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d06e      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a69      	ldr	r2, [pc, #420]	; (8002d90 <HAL_DMA_IRQHandler+0x3f8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d04a      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a67      	ldr	r2, [pc, #412]	; (8002d94 <HAL_DMA_IRQHandler+0x3fc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d045      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a66      	ldr	r2, [pc, #408]	; (8002d98 <HAL_DMA_IRQHandler+0x400>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d040      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a64      	ldr	r2, [pc, #400]	; (8002d9c <HAL_DMA_IRQHandler+0x404>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d03b      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a63      	ldr	r2, [pc, #396]	; (8002da0 <HAL_DMA_IRQHandler+0x408>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d036      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a61      	ldr	r2, [pc, #388]	; (8002da4 <HAL_DMA_IRQHandler+0x40c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d031      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a60      	ldr	r2, [pc, #384]	; (8002da8 <HAL_DMA_IRQHandler+0x410>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d02c      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a5e      	ldr	r2, [pc, #376]	; (8002dac <HAL_DMA_IRQHandler+0x414>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d027      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a5d      	ldr	r2, [pc, #372]	; (8002db0 <HAL_DMA_IRQHandler+0x418>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d022      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a5b      	ldr	r2, [pc, #364]	; (8002db4 <HAL_DMA_IRQHandler+0x41c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01d      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a5a      	ldr	r2, [pc, #360]	; (8002db8 <HAL_DMA_IRQHandler+0x420>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d018      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <HAL_DMA_IRQHandler+0x424>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a57      	ldr	r2, [pc, #348]	; (8002dc0 <HAL_DMA_IRQHandler+0x428>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00e      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a55      	ldr	r2, [pc, #340]	; (8002dc4 <HAL_DMA_IRQHandler+0x42c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d009      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a54      	ldr	r2, [pc, #336]	; (8002dc8 <HAL_DMA_IRQHandler+0x430>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d004      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2ee>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a52      	ldr	r2, [pc, #328]	; (8002dcc <HAL_DMA_IRQHandler+0x434>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d10a      	bne.n	8002c9c <HAL_DMA_IRQHandler+0x304>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e003      	b.n	8002ca4 <HAL_DMA_IRQHandler+0x30c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbc:	f043 0202 	orr.w	r2, r3, #2
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2204      	movs	r2, #4
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 808f 	beq.w	8002df8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a2c      	ldr	r2, [pc, #176]	; (8002d90 <HAL_DMA_IRQHandler+0x3f8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d04a      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a2a      	ldr	r2, [pc, #168]	; (8002d94 <HAL_DMA_IRQHandler+0x3fc>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d045      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <HAL_DMA_IRQHandler+0x400>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d040      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a27      	ldr	r2, [pc, #156]	; (8002d9c <HAL_DMA_IRQHandler+0x404>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d03b      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a26      	ldr	r2, [pc, #152]	; (8002da0 <HAL_DMA_IRQHandler+0x408>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d036      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a24      	ldr	r2, [pc, #144]	; (8002da4 <HAL_DMA_IRQHandler+0x40c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d031      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a23      	ldr	r2, [pc, #140]	; (8002da8 <HAL_DMA_IRQHandler+0x410>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d02c      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a21      	ldr	r2, [pc, #132]	; (8002dac <HAL_DMA_IRQHandler+0x414>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d027      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a20      	ldr	r2, [pc, #128]	; (8002db0 <HAL_DMA_IRQHandler+0x418>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d022      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1e      	ldr	r2, [pc, #120]	; (8002db4 <HAL_DMA_IRQHandler+0x41c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01d      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <HAL_DMA_IRQHandler+0x420>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d018      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1b      	ldr	r2, [pc, #108]	; (8002dbc <HAL_DMA_IRQHandler+0x424>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1a      	ldr	r2, [pc, #104]	; (8002dc0 <HAL_DMA_IRQHandler+0x428>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00e      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_DMA_IRQHandler+0x42c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d009      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a17      	ldr	r2, [pc, #92]	; (8002dc8 <HAL_DMA_IRQHandler+0x430>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x3e2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <HAL_DMA_IRQHandler+0x434>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d12a      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x438>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf14      	ite	ne
 8002d88:	2301      	movne	r3, #1
 8002d8a:	2300      	moveq	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e023      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x440>
 8002d90:	40020010 	.word	0x40020010
 8002d94:	40020028 	.word	0x40020028
 8002d98:	40020040 	.word	0x40020040
 8002d9c:	40020058 	.word	0x40020058
 8002da0:	40020070 	.word	0x40020070
 8002da4:	40020088 	.word	0x40020088
 8002da8:	400200a0 	.word	0x400200a0
 8002dac:	400200b8 	.word	0x400200b8
 8002db0:	40020410 	.word	0x40020410
 8002db4:	40020428 	.word	0x40020428
 8002db8:	40020440 	.word	0x40020440
 8002dbc:	40020458 	.word	0x40020458
 8002dc0:	40020470 	.word	0x40020470
 8002dc4:	40020488 	.word	0x40020488
 8002dc8:	400204a0 	.word	0x400204a0
 8002dcc:	400204b8 	.word	0x400204b8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00d      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	2204      	movs	r2, #4
 8002de6:	409a      	lsls	r2, r3
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	f043 0204 	orr.w	r2, r3, #4
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	2210      	movs	r2, #16
 8002e02:	409a      	lsls	r2, r3
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80a6 	beq.w	8002f5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a85      	ldr	r2, [pc, #532]	; (8003028 <HAL_DMA_IRQHandler+0x690>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d04a      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a83      	ldr	r2, [pc, #524]	; (800302c <HAL_DMA_IRQHandler+0x694>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d045      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a82      	ldr	r2, [pc, #520]	; (8003030 <HAL_DMA_IRQHandler+0x698>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d040      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a80      	ldr	r2, [pc, #512]	; (8003034 <HAL_DMA_IRQHandler+0x69c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d03b      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a7f      	ldr	r2, [pc, #508]	; (8003038 <HAL_DMA_IRQHandler+0x6a0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d036      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a7d      	ldr	r2, [pc, #500]	; (800303c <HAL_DMA_IRQHandler+0x6a4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d031      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a7c      	ldr	r2, [pc, #496]	; (8003040 <HAL_DMA_IRQHandler+0x6a8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d02c      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a7a      	ldr	r2, [pc, #488]	; (8003044 <HAL_DMA_IRQHandler+0x6ac>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d027      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a79      	ldr	r2, [pc, #484]	; (8003048 <HAL_DMA_IRQHandler+0x6b0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d022      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a77      	ldr	r2, [pc, #476]	; (800304c <HAL_DMA_IRQHandler+0x6b4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01d      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a76      	ldr	r2, [pc, #472]	; (8003050 <HAL_DMA_IRQHandler+0x6b8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d018      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a74      	ldr	r2, [pc, #464]	; (8003054 <HAL_DMA_IRQHandler+0x6bc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a73      	ldr	r2, [pc, #460]	; (8003058 <HAL_DMA_IRQHandler+0x6c0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a71      	ldr	r2, [pc, #452]	; (800305c <HAL_DMA_IRQHandler+0x6c4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a70      	ldr	r2, [pc, #448]	; (8003060 <HAL_DMA_IRQHandler+0x6c8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_DMA_IRQHandler+0x516>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a6e      	ldr	r2, [pc, #440]	; (8003064 <HAL_DMA_IRQHandler+0x6cc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d10a      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x52c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e009      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x540>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf14      	ite	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	2300      	moveq	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d03e      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d018      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d108      	bne.n	8002f1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d024      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
 8002f18:	e01f      	b.n	8002f5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d01b      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
 8002f2a:	e016      	b.n	8002f5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d107      	bne.n	8002f4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0208 	bic.w	r2, r2, #8
 8002f48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	2220      	movs	r2, #32
 8002f64:	409a      	lsls	r2, r3
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8110 	beq.w	8003190 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2c      	ldr	r2, [pc, #176]	; (8003028 <HAL_DMA_IRQHandler+0x690>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d04a      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a2b      	ldr	r2, [pc, #172]	; (800302c <HAL_DMA_IRQHandler+0x694>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d045      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a29      	ldr	r2, [pc, #164]	; (8003030 <HAL_DMA_IRQHandler+0x698>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d040      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a28      	ldr	r2, [pc, #160]	; (8003034 <HAL_DMA_IRQHandler+0x69c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d03b      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a26      	ldr	r2, [pc, #152]	; (8003038 <HAL_DMA_IRQHandler+0x6a0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d036      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a25      	ldr	r2, [pc, #148]	; (800303c <HAL_DMA_IRQHandler+0x6a4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d031      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a23      	ldr	r2, [pc, #140]	; (8003040 <HAL_DMA_IRQHandler+0x6a8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02c      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a22      	ldr	r2, [pc, #136]	; (8003044 <HAL_DMA_IRQHandler+0x6ac>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d027      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a20      	ldr	r2, [pc, #128]	; (8003048 <HAL_DMA_IRQHandler+0x6b0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d022      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1f      	ldr	r2, [pc, #124]	; (800304c <HAL_DMA_IRQHandler+0x6b4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d01d      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <HAL_DMA_IRQHandler+0x6b8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d018      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1c      	ldr	r2, [pc, #112]	; (8003054 <HAL_DMA_IRQHandler+0x6bc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d013      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1a      	ldr	r2, [pc, #104]	; (8003058 <HAL_DMA_IRQHandler+0x6c0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00e      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a19      	ldr	r2, [pc, #100]	; (800305c <HAL_DMA_IRQHandler+0x6c4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d009      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a17      	ldr	r2, [pc, #92]	; (8003060 <HAL_DMA_IRQHandler+0x6c8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d004      	beq.n	8003010 <HAL_DMA_IRQHandler+0x678>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a16      	ldr	r2, [pc, #88]	; (8003064 <HAL_DMA_IRQHandler+0x6cc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d12b      	bne.n	8003068 <HAL_DMA_IRQHandler+0x6d0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	bf14      	ite	ne
 800301e:	2301      	movne	r3, #1
 8003020:	2300      	moveq	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	e02a      	b.n	800307c <HAL_DMA_IRQHandler+0x6e4>
 8003026:	bf00      	nop
 8003028:	40020010 	.word	0x40020010
 800302c:	40020028 	.word	0x40020028
 8003030:	40020040 	.word	0x40020040
 8003034:	40020058 	.word	0x40020058
 8003038:	40020070 	.word	0x40020070
 800303c:	40020088 	.word	0x40020088
 8003040:	400200a0 	.word	0x400200a0
 8003044:	400200b8 	.word	0x400200b8
 8003048:	40020410 	.word	0x40020410
 800304c:	40020428 	.word	0x40020428
 8003050:	40020440 	.word	0x40020440
 8003054:	40020458 	.word	0x40020458
 8003058:	40020470 	.word	0x40020470
 800305c:	40020488 	.word	0x40020488
 8003060:	400204a0 	.word	0x400204a0
 8003064:	400204b8 	.word	0x400204b8
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf14      	ite	ne
 8003076:	2301      	movne	r3, #1
 8003078:	2300      	moveq	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8087 	beq.w	8003190 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2220      	movs	r2, #32
 800308c:	409a      	lsls	r2, r3
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b04      	cmp	r3, #4
 800309c:	d139      	bne.n	8003112 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0216 	bic.w	r2, r2, #22
 80030ac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030bc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <HAL_DMA_IRQHandler+0x736>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0208 	bic.w	r2, r2, #8
 80030dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	223f      	movs	r2, #63	; 0x3f
 80030e8:	409a      	lsls	r2, r3
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 834a 	beq.w	800379c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
          }
          return;
 8003110:	e344      	b.n	800379c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d018      	beq.n	8003152 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d108      	bne.n	8003140 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	2b00      	cmp	r3, #0
 8003134:	d02c      	beq.n	8003190 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	4798      	blx	r3
 800313e:	e027      	b.n	8003190 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d023      	beq.n	8003190 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
 8003150:	e01e      	b.n	8003190 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10f      	bne.n	8003180 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0210 	bic.w	r2, r2, #16
 800316e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 8306 	beq.w	80037a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8088 	beq.w	80032b8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2204      	movs	r2, #4
 80031ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a7a      	ldr	r2, [pc, #488]	; (80033a0 <HAL_DMA_IRQHandler+0xa08>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d04a      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a79      	ldr	r2, [pc, #484]	; (80033a4 <HAL_DMA_IRQHandler+0xa0c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d045      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a77      	ldr	r2, [pc, #476]	; (80033a8 <HAL_DMA_IRQHandler+0xa10>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d040      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a76      	ldr	r2, [pc, #472]	; (80033ac <HAL_DMA_IRQHandler+0xa14>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d03b      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a74      	ldr	r2, [pc, #464]	; (80033b0 <HAL_DMA_IRQHandler+0xa18>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d036      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a73      	ldr	r2, [pc, #460]	; (80033b4 <HAL_DMA_IRQHandler+0xa1c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d031      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a71      	ldr	r2, [pc, #452]	; (80033b8 <HAL_DMA_IRQHandler+0xa20>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d02c      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a70      	ldr	r2, [pc, #448]	; (80033bc <HAL_DMA_IRQHandler+0xa24>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d027      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a6e      	ldr	r2, [pc, #440]	; (80033c0 <HAL_DMA_IRQHandler+0xa28>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d022      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a6d      	ldr	r2, [pc, #436]	; (80033c4 <HAL_DMA_IRQHandler+0xa2c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d01d      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a6b      	ldr	r2, [pc, #428]	; (80033c8 <HAL_DMA_IRQHandler+0xa30>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d018      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a6a      	ldr	r2, [pc, #424]	; (80033cc <HAL_DMA_IRQHandler+0xa34>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a68      	ldr	r2, [pc, #416]	; (80033d0 <HAL_DMA_IRQHandler+0xa38>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00e      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <HAL_DMA_IRQHandler+0xa3c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a65      	ldr	r2, [pc, #404]	; (80033d8 <HAL_DMA_IRQHandler+0xa40>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d004      	beq.n	8003250 <HAL_DMA_IRQHandler+0x8b8>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a64      	ldr	r2, [pc, #400]	; (80033dc <HAL_DMA_IRQHandler+0xa44>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d108      	bne.n	8003262 <HAL_DMA_IRQHandler+0x8ca>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	e007      	b.n	8003272 <HAL_DMA_IRQHandler+0x8da>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3301      	adds	r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327a:	429a      	cmp	r2, r3
 800327c:	d307      	bcc.n	800328e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f2      	bne.n	8003272 <HAL_DMA_IRQHandler+0x8da>
 800328c:	e000      	b.n	8003290 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800328e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d004      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2203      	movs	r2, #3
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80032a6:	e003      	b.n	80032b0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8272 	beq.w	80037a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	4798      	blx	r3
 80032ca:	e26c      	b.n	80037a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a43      	ldr	r2, [pc, #268]	; (80033e0 <HAL_DMA_IRQHandler+0xa48>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d022      	beq.n	800331c <HAL_DMA_IRQHandler+0x984>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a42      	ldr	r2, [pc, #264]	; (80033e4 <HAL_DMA_IRQHandler+0xa4c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d01d      	beq.n	800331c <HAL_DMA_IRQHandler+0x984>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a40      	ldr	r2, [pc, #256]	; (80033e8 <HAL_DMA_IRQHandler+0xa50>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d018      	beq.n	800331c <HAL_DMA_IRQHandler+0x984>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a3f      	ldr	r2, [pc, #252]	; (80033ec <HAL_DMA_IRQHandler+0xa54>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d013      	beq.n	800331c <HAL_DMA_IRQHandler+0x984>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a3d      	ldr	r2, [pc, #244]	; (80033f0 <HAL_DMA_IRQHandler+0xa58>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00e      	beq.n	800331c <HAL_DMA_IRQHandler+0x984>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a3c      	ldr	r2, [pc, #240]	; (80033f4 <HAL_DMA_IRQHandler+0xa5c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d009      	beq.n	800331c <HAL_DMA_IRQHandler+0x984>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a3a      	ldr	r2, [pc, #232]	; (80033f8 <HAL_DMA_IRQHandler+0xa60>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d004      	beq.n	800331c <HAL_DMA_IRQHandler+0x984>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a39      	ldr	r2, [pc, #228]	; (80033fc <HAL_DMA_IRQHandler+0xa64>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d101      	bne.n	8003320 <HAL_DMA_IRQHandler+0x988>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <HAL_DMA_IRQHandler+0x98a>
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 823f 	beq.w	80037a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2204      	movs	r2, #4
 800333a:	409a      	lsls	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80cd 	beq.w	80034e0 <HAL_DMA_IRQHandler+0xb48>
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80c7 	beq.w	80034e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	2204      	movs	r2, #4
 800335c:	409a      	lsls	r2, r3
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d049      	beq.n	8003400 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 8210 	beq.w	80037a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003388:	e20a      	b.n	80037a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8206 	beq.w	80037a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800339c:	e200      	b.n	80037a0 <HAL_DMA_IRQHandler+0xe08>
 800339e:	bf00      	nop
 80033a0:	40020010 	.word	0x40020010
 80033a4:	40020028 	.word	0x40020028
 80033a8:	40020040 	.word	0x40020040
 80033ac:	40020058 	.word	0x40020058
 80033b0:	40020070 	.word	0x40020070
 80033b4:	40020088 	.word	0x40020088
 80033b8:	400200a0 	.word	0x400200a0
 80033bc:	400200b8 	.word	0x400200b8
 80033c0:	40020410 	.word	0x40020410
 80033c4:	40020428 	.word	0x40020428
 80033c8:	40020440 	.word	0x40020440
 80033cc:	40020458 	.word	0x40020458
 80033d0:	40020470 	.word	0x40020470
 80033d4:	40020488 	.word	0x40020488
 80033d8:	400204a0 	.word	0x400204a0
 80033dc:	400204b8 	.word	0x400204b8
 80033e0:	58025408 	.word	0x58025408
 80033e4:	5802541c 	.word	0x5802541c
 80033e8:	58025430 	.word	0x58025430
 80033ec:	58025444 	.word	0x58025444
 80033f0:	58025458 	.word	0x58025458
 80033f4:	5802546c 	.word	0x5802546c
 80033f8:	58025480 	.word	0x58025480
 80033fc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d160      	bne.n	80034cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a7f      	ldr	r2, [pc, #508]	; (800360c <HAL_DMA_IRQHandler+0xc74>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d04a      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a7d      	ldr	r2, [pc, #500]	; (8003610 <HAL_DMA_IRQHandler+0xc78>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d045      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a7c      	ldr	r2, [pc, #496]	; (8003614 <HAL_DMA_IRQHandler+0xc7c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d040      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a7a      	ldr	r2, [pc, #488]	; (8003618 <HAL_DMA_IRQHandler+0xc80>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d03b      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a79      	ldr	r2, [pc, #484]	; (800361c <HAL_DMA_IRQHandler+0xc84>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d036      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a77      	ldr	r2, [pc, #476]	; (8003620 <HAL_DMA_IRQHandler+0xc88>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d031      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a76      	ldr	r2, [pc, #472]	; (8003624 <HAL_DMA_IRQHandler+0xc8c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d02c      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a74      	ldr	r2, [pc, #464]	; (8003628 <HAL_DMA_IRQHandler+0xc90>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d027      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a73      	ldr	r2, [pc, #460]	; (800362c <HAL_DMA_IRQHandler+0xc94>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d022      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a71      	ldr	r2, [pc, #452]	; (8003630 <HAL_DMA_IRQHandler+0xc98>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d01d      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a70      	ldr	r2, [pc, #448]	; (8003634 <HAL_DMA_IRQHandler+0xc9c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d018      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a6e      	ldr	r2, [pc, #440]	; (8003638 <HAL_DMA_IRQHandler+0xca0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a6d      	ldr	r2, [pc, #436]	; (800363c <HAL_DMA_IRQHandler+0xca4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00e      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a6b      	ldr	r2, [pc, #428]	; (8003640 <HAL_DMA_IRQHandler+0xca8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d009      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a6a      	ldr	r2, [pc, #424]	; (8003644 <HAL_DMA_IRQHandler+0xcac>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d004      	beq.n	80034aa <HAL_DMA_IRQHandler+0xb12>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a68      	ldr	r2, [pc, #416]	; (8003648 <HAL_DMA_IRQHandler+0xcb0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d108      	bne.n	80034bc <HAL_DMA_IRQHandler+0xb24>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0208 	bic.w	r2, r2, #8
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e007      	b.n	80034cc <HAL_DMA_IRQHandler+0xb34>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0204 	bic.w	r2, r2, #4
 80034ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8165 	beq.w	80037a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034de:	e15f      	b.n	80037a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	2202      	movs	r2, #2
 80034ea:	409a      	lsls	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80c5 	beq.w	8003680 <HAL_DMA_IRQHandler+0xce8>
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80bf 	beq.w	8003680 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	2202      	movs	r2, #2
 800350c:	409a      	lsls	r2, r3
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d018      	beq.n	800354e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 813a 	beq.w	80037a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003538:	e134      	b.n	80037a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8130 	beq.w	80037a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800354c:	e12a      	b.n	80037a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b00      	cmp	r3, #0
 8003556:	f040 8089 	bne.w	800366c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a2b      	ldr	r2, [pc, #172]	; (800360c <HAL_DMA_IRQHandler+0xc74>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d04a      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a29      	ldr	r2, [pc, #164]	; (8003610 <HAL_DMA_IRQHandler+0xc78>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d045      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a28      	ldr	r2, [pc, #160]	; (8003614 <HAL_DMA_IRQHandler+0xc7c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d040      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a26      	ldr	r2, [pc, #152]	; (8003618 <HAL_DMA_IRQHandler+0xc80>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d03b      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a25      	ldr	r2, [pc, #148]	; (800361c <HAL_DMA_IRQHandler+0xc84>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d036      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a23      	ldr	r2, [pc, #140]	; (8003620 <HAL_DMA_IRQHandler+0xc88>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d031      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a22      	ldr	r2, [pc, #136]	; (8003624 <HAL_DMA_IRQHandler+0xc8c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d02c      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a20      	ldr	r2, [pc, #128]	; (8003628 <HAL_DMA_IRQHandler+0xc90>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d027      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1f      	ldr	r2, [pc, #124]	; (800362c <HAL_DMA_IRQHandler+0xc94>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d022      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <HAL_DMA_IRQHandler+0xc98>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d01d      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <HAL_DMA_IRQHandler+0xc9c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d018      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1a      	ldr	r2, [pc, #104]	; (8003638 <HAL_DMA_IRQHandler+0xca0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d013      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a19      	ldr	r2, [pc, #100]	; (800363c <HAL_DMA_IRQHandler+0xca4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00e      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a17      	ldr	r2, [pc, #92]	; (8003640 <HAL_DMA_IRQHandler+0xca8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d009      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a16      	ldr	r2, [pc, #88]	; (8003644 <HAL_DMA_IRQHandler+0xcac>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d004      	beq.n	80035fa <HAL_DMA_IRQHandler+0xc62>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <HAL_DMA_IRQHandler+0xcb0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d128      	bne.n	800364c <HAL_DMA_IRQHandler+0xcb4>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0214 	bic.w	r2, r2, #20
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e027      	b.n	800365c <HAL_DMA_IRQHandler+0xcc4>
 800360c:	40020010 	.word	0x40020010
 8003610:	40020028 	.word	0x40020028
 8003614:	40020040 	.word	0x40020040
 8003618:	40020058 	.word	0x40020058
 800361c:	40020070 	.word	0x40020070
 8003620:	40020088 	.word	0x40020088
 8003624:	400200a0 	.word	0x400200a0
 8003628:	400200b8 	.word	0x400200b8
 800362c:	40020410 	.word	0x40020410
 8003630:	40020428 	.word	0x40020428
 8003634:	40020440 	.word	0x40020440
 8003638:	40020458 	.word	0x40020458
 800363c:	40020470 	.word	0x40020470
 8003640:	40020488 	.word	0x40020488
 8003644:	400204a0 	.word	0x400204a0
 8003648:	400204b8 	.word	0x400204b8
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 020a 	bic.w	r2, r2, #10
 800365a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8097 	beq.w	80037a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800367e:	e091      	b.n	80037a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	2208      	movs	r2, #8
 800368a:	409a      	lsls	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8088 	beq.w	80037a6 <HAL_DMA_IRQHandler+0xe0e>
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 8082 	beq.w	80037a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a41      	ldr	r2, [pc, #260]	; (80037ac <HAL_DMA_IRQHandler+0xe14>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d04a      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a3f      	ldr	r2, [pc, #252]	; (80037b0 <HAL_DMA_IRQHandler+0xe18>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d045      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a3e      	ldr	r2, [pc, #248]	; (80037b4 <HAL_DMA_IRQHandler+0xe1c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d040      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a3c      	ldr	r2, [pc, #240]	; (80037b8 <HAL_DMA_IRQHandler+0xe20>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d03b      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <HAL_DMA_IRQHandler+0xe24>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d036      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a39      	ldr	r2, [pc, #228]	; (80037c0 <HAL_DMA_IRQHandler+0xe28>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d031      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a38      	ldr	r2, [pc, #224]	; (80037c4 <HAL_DMA_IRQHandler+0xe2c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d02c      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a36      	ldr	r2, [pc, #216]	; (80037c8 <HAL_DMA_IRQHandler+0xe30>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d027      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a35      	ldr	r2, [pc, #212]	; (80037cc <HAL_DMA_IRQHandler+0xe34>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d022      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a33      	ldr	r2, [pc, #204]	; (80037d0 <HAL_DMA_IRQHandler+0xe38>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01d      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a32      	ldr	r2, [pc, #200]	; (80037d4 <HAL_DMA_IRQHandler+0xe3c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d018      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a30      	ldr	r2, [pc, #192]	; (80037d8 <HAL_DMA_IRQHandler+0xe40>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a2f      	ldr	r2, [pc, #188]	; (80037dc <HAL_DMA_IRQHandler+0xe44>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00e      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2d      	ldr	r2, [pc, #180]	; (80037e0 <HAL_DMA_IRQHandler+0xe48>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d009      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <HAL_DMA_IRQHandler+0xe4c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_DMA_IRQHandler+0xdaa>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a2a      	ldr	r2, [pc, #168]	; (80037e8 <HAL_DMA_IRQHandler+0xe50>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d108      	bne.n	8003754 <HAL_DMA_IRQHandler+0xdbc>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 021c 	bic.w	r2, r2, #28
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	e007      	b.n	8003764 <HAL_DMA_IRQHandler+0xdcc>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 020e 	bic.w	r2, r2, #14
 8003762:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	2201      	movs	r2, #1
 800376e:	409a      	lsls	r2, r3
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	4798      	blx	r3
 800379a:	e004      	b.n	80037a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800379c:	bf00      	nop
 800379e:	e002      	b.n	80037a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037a0:	bf00      	nop
 80037a2:	e000      	b.n	80037a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80037a6:	3728      	adds	r7, #40	; 0x28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40020010 	.word	0x40020010
 80037b0:	40020028 	.word	0x40020028
 80037b4:	40020040 	.word	0x40020040
 80037b8:	40020058 	.word	0x40020058
 80037bc:	40020070 	.word	0x40020070
 80037c0:	40020088 	.word	0x40020088
 80037c4:	400200a0 	.word	0x400200a0
 80037c8:	400200b8 	.word	0x400200b8
 80037cc:	40020410 	.word	0x40020410
 80037d0:	40020428 	.word	0x40020428
 80037d4:	40020440 	.word	0x40020440
 80037d8:	40020458 	.word	0x40020458
 80037dc:	40020470 	.word	0x40020470
 80037e0:	40020488 	.word	0x40020488
 80037e4:	400204a0 	.word	0x400204a0
 80037e8:	400204b8 	.word	0x400204b8

080037ec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003816:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a7f      	ldr	r2, [pc, #508]	; (8003a20 <DMA_SetConfig+0x21c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d072      	beq.n	800390e <DMA_SetConfig+0x10a>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a7d      	ldr	r2, [pc, #500]	; (8003a24 <DMA_SetConfig+0x220>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d06d      	beq.n	800390e <DMA_SetConfig+0x10a>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a7c      	ldr	r2, [pc, #496]	; (8003a28 <DMA_SetConfig+0x224>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d068      	beq.n	800390e <DMA_SetConfig+0x10a>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a7a      	ldr	r2, [pc, #488]	; (8003a2c <DMA_SetConfig+0x228>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d063      	beq.n	800390e <DMA_SetConfig+0x10a>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a79      	ldr	r2, [pc, #484]	; (8003a30 <DMA_SetConfig+0x22c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d05e      	beq.n	800390e <DMA_SetConfig+0x10a>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a77      	ldr	r2, [pc, #476]	; (8003a34 <DMA_SetConfig+0x230>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d059      	beq.n	800390e <DMA_SetConfig+0x10a>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a76      	ldr	r2, [pc, #472]	; (8003a38 <DMA_SetConfig+0x234>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d054      	beq.n	800390e <DMA_SetConfig+0x10a>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a74      	ldr	r2, [pc, #464]	; (8003a3c <DMA_SetConfig+0x238>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d04f      	beq.n	800390e <DMA_SetConfig+0x10a>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a73      	ldr	r2, [pc, #460]	; (8003a40 <DMA_SetConfig+0x23c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d04a      	beq.n	800390e <DMA_SetConfig+0x10a>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a71      	ldr	r2, [pc, #452]	; (8003a44 <DMA_SetConfig+0x240>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d045      	beq.n	800390e <DMA_SetConfig+0x10a>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a70      	ldr	r2, [pc, #448]	; (8003a48 <DMA_SetConfig+0x244>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d040      	beq.n	800390e <DMA_SetConfig+0x10a>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a6e      	ldr	r2, [pc, #440]	; (8003a4c <DMA_SetConfig+0x248>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d03b      	beq.n	800390e <DMA_SetConfig+0x10a>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a6d      	ldr	r2, [pc, #436]	; (8003a50 <DMA_SetConfig+0x24c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d036      	beq.n	800390e <DMA_SetConfig+0x10a>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a6b      	ldr	r2, [pc, #428]	; (8003a54 <DMA_SetConfig+0x250>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d031      	beq.n	800390e <DMA_SetConfig+0x10a>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6a      	ldr	r2, [pc, #424]	; (8003a58 <DMA_SetConfig+0x254>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d02c      	beq.n	800390e <DMA_SetConfig+0x10a>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a68      	ldr	r2, [pc, #416]	; (8003a5c <DMA_SetConfig+0x258>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d027      	beq.n	800390e <DMA_SetConfig+0x10a>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a67      	ldr	r2, [pc, #412]	; (8003a60 <DMA_SetConfig+0x25c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d022      	beq.n	800390e <DMA_SetConfig+0x10a>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a65      	ldr	r2, [pc, #404]	; (8003a64 <DMA_SetConfig+0x260>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01d      	beq.n	800390e <DMA_SetConfig+0x10a>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a64      	ldr	r2, [pc, #400]	; (8003a68 <DMA_SetConfig+0x264>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d018      	beq.n	800390e <DMA_SetConfig+0x10a>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a62      	ldr	r2, [pc, #392]	; (8003a6c <DMA_SetConfig+0x268>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <DMA_SetConfig+0x10a>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a61      	ldr	r2, [pc, #388]	; (8003a70 <DMA_SetConfig+0x26c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00e      	beq.n	800390e <DMA_SetConfig+0x10a>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a5f      	ldr	r2, [pc, #380]	; (8003a74 <DMA_SetConfig+0x270>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <DMA_SetConfig+0x10a>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a5e      	ldr	r2, [pc, #376]	; (8003a78 <DMA_SetConfig+0x274>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <DMA_SetConfig+0x10a>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a5c      	ldr	r2, [pc, #368]	; (8003a7c <DMA_SetConfig+0x278>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <DMA_SetConfig+0x10e>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <DMA_SetConfig+0x110>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00d      	beq.n	8003934 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003920:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003932:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a39      	ldr	r2, [pc, #228]	; (8003a20 <DMA_SetConfig+0x21c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d04a      	beq.n	80039d4 <DMA_SetConfig+0x1d0>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a38      	ldr	r2, [pc, #224]	; (8003a24 <DMA_SetConfig+0x220>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d045      	beq.n	80039d4 <DMA_SetConfig+0x1d0>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a36      	ldr	r2, [pc, #216]	; (8003a28 <DMA_SetConfig+0x224>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d040      	beq.n	80039d4 <DMA_SetConfig+0x1d0>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a35      	ldr	r2, [pc, #212]	; (8003a2c <DMA_SetConfig+0x228>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d03b      	beq.n	80039d4 <DMA_SetConfig+0x1d0>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a33      	ldr	r2, [pc, #204]	; (8003a30 <DMA_SetConfig+0x22c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d036      	beq.n	80039d4 <DMA_SetConfig+0x1d0>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a32      	ldr	r2, [pc, #200]	; (8003a34 <DMA_SetConfig+0x230>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d031      	beq.n	80039d4 <DMA_SetConfig+0x1d0>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a30      	ldr	r2, [pc, #192]	; (8003a38 <DMA_SetConfig+0x234>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d02c      	beq.n	80039d4 <DMA_SetConfig+0x1d0>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a2f      	ldr	r2, [pc, #188]	; (8003a3c <DMA_SetConfig+0x238>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d027      	beq.n	80039d4 <DMA_SetConfig+0x1d0>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a2d      	ldr	r2, [pc, #180]	; (8003a40 <DMA_SetConfig+0x23c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d022      	beq.n	80039d4 <DMA_SetConfig+0x1d0>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a2c      	ldr	r2, [pc, #176]	; (8003a44 <DMA_SetConfig+0x240>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d01d      	beq.n	80039d4 <DMA_SetConfig+0x1d0>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2a      	ldr	r2, [pc, #168]	; (8003a48 <DMA_SetConfig+0x244>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d018      	beq.n	80039d4 <DMA_SetConfig+0x1d0>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a29      	ldr	r2, [pc, #164]	; (8003a4c <DMA_SetConfig+0x248>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d013      	beq.n	80039d4 <DMA_SetConfig+0x1d0>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <DMA_SetConfig+0x24c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00e      	beq.n	80039d4 <DMA_SetConfig+0x1d0>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <DMA_SetConfig+0x250>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d009      	beq.n	80039d4 <DMA_SetConfig+0x1d0>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a24      	ldr	r2, [pc, #144]	; (8003a58 <DMA_SetConfig+0x254>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d004      	beq.n	80039d4 <DMA_SetConfig+0x1d0>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a23      	ldr	r2, [pc, #140]	; (8003a5c <DMA_SetConfig+0x258>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d101      	bne.n	80039d8 <DMA_SetConfig+0x1d4>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <DMA_SetConfig+0x1d6>
 80039d8:	2300      	movs	r3, #0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d059      	beq.n	8003a92 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	223f      	movs	r2, #63	; 0x3f
 80039e8:	409a      	lsls	r2, r3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039fc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d138      	bne.n	8003a80 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003a1e:	e086      	b.n	8003b2e <DMA_SetConfig+0x32a>
 8003a20:	40020010 	.word	0x40020010
 8003a24:	40020028 	.word	0x40020028
 8003a28:	40020040 	.word	0x40020040
 8003a2c:	40020058 	.word	0x40020058
 8003a30:	40020070 	.word	0x40020070
 8003a34:	40020088 	.word	0x40020088
 8003a38:	400200a0 	.word	0x400200a0
 8003a3c:	400200b8 	.word	0x400200b8
 8003a40:	40020410 	.word	0x40020410
 8003a44:	40020428 	.word	0x40020428
 8003a48:	40020440 	.word	0x40020440
 8003a4c:	40020458 	.word	0x40020458
 8003a50:	40020470 	.word	0x40020470
 8003a54:	40020488 	.word	0x40020488
 8003a58:	400204a0 	.word	0x400204a0
 8003a5c:	400204b8 	.word	0x400204b8
 8003a60:	58025408 	.word	0x58025408
 8003a64:	5802541c 	.word	0x5802541c
 8003a68:	58025430 	.word	0x58025430
 8003a6c:	58025444 	.word	0x58025444
 8003a70:	58025458 	.word	0x58025458
 8003a74:	5802546c 	.word	0x5802546c
 8003a78:	58025480 	.word	0x58025480
 8003a7c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	60da      	str	r2, [r3, #12]
}
 8003a90:	e04d      	b.n	8003b2e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a29      	ldr	r2, [pc, #164]	; (8003b3c <DMA_SetConfig+0x338>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d022      	beq.n	8003ae2 <DMA_SetConfig+0x2de>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a27      	ldr	r2, [pc, #156]	; (8003b40 <DMA_SetConfig+0x33c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01d      	beq.n	8003ae2 <DMA_SetConfig+0x2de>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a26      	ldr	r2, [pc, #152]	; (8003b44 <DMA_SetConfig+0x340>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d018      	beq.n	8003ae2 <DMA_SetConfig+0x2de>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a24      	ldr	r2, [pc, #144]	; (8003b48 <DMA_SetConfig+0x344>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <DMA_SetConfig+0x2de>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a23      	ldr	r2, [pc, #140]	; (8003b4c <DMA_SetConfig+0x348>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00e      	beq.n	8003ae2 <DMA_SetConfig+0x2de>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a21      	ldr	r2, [pc, #132]	; (8003b50 <DMA_SetConfig+0x34c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d009      	beq.n	8003ae2 <DMA_SetConfig+0x2de>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a20      	ldr	r2, [pc, #128]	; (8003b54 <DMA_SetConfig+0x350>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d004      	beq.n	8003ae2 <DMA_SetConfig+0x2de>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1e      	ldr	r2, [pc, #120]	; (8003b58 <DMA_SetConfig+0x354>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <DMA_SetConfig+0x2e2>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <DMA_SetConfig+0x2e4>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d020      	beq.n	8003b2e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	2201      	movs	r2, #1
 8003af6:	409a      	lsls	r2, r3
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b40      	cmp	r3, #64	; 0x40
 8003b0a:	d108      	bne.n	8003b1e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	60da      	str	r2, [r3, #12]
}
 8003b1c:	e007      	b.n	8003b2e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	60da      	str	r2, [r3, #12]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	58025408 	.word	0x58025408
 8003b40:	5802541c 	.word	0x5802541c
 8003b44:	58025430 	.word	0x58025430
 8003b48:	58025444 	.word	0x58025444
 8003b4c:	58025458 	.word	0x58025458
 8003b50:	5802546c 	.word	0x5802546c
 8003b54:	58025480 	.word	0x58025480
 8003b58:	58025494 	.word	0x58025494

08003b5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a42      	ldr	r2, [pc, #264]	; (8003c74 <DMA_CalcBaseAndBitshift+0x118>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d04a      	beq.n	8003c04 <DMA_CalcBaseAndBitshift+0xa8>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a41      	ldr	r2, [pc, #260]	; (8003c78 <DMA_CalcBaseAndBitshift+0x11c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d045      	beq.n	8003c04 <DMA_CalcBaseAndBitshift+0xa8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a3f      	ldr	r2, [pc, #252]	; (8003c7c <DMA_CalcBaseAndBitshift+0x120>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d040      	beq.n	8003c04 <DMA_CalcBaseAndBitshift+0xa8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a3e      	ldr	r2, [pc, #248]	; (8003c80 <DMA_CalcBaseAndBitshift+0x124>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d03b      	beq.n	8003c04 <DMA_CalcBaseAndBitshift+0xa8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a3c      	ldr	r2, [pc, #240]	; (8003c84 <DMA_CalcBaseAndBitshift+0x128>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d036      	beq.n	8003c04 <DMA_CalcBaseAndBitshift+0xa8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a3b      	ldr	r2, [pc, #236]	; (8003c88 <DMA_CalcBaseAndBitshift+0x12c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d031      	beq.n	8003c04 <DMA_CalcBaseAndBitshift+0xa8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a39      	ldr	r2, [pc, #228]	; (8003c8c <DMA_CalcBaseAndBitshift+0x130>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d02c      	beq.n	8003c04 <DMA_CalcBaseAndBitshift+0xa8>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a38      	ldr	r2, [pc, #224]	; (8003c90 <DMA_CalcBaseAndBitshift+0x134>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d027      	beq.n	8003c04 <DMA_CalcBaseAndBitshift+0xa8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a36      	ldr	r2, [pc, #216]	; (8003c94 <DMA_CalcBaseAndBitshift+0x138>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d022      	beq.n	8003c04 <DMA_CalcBaseAndBitshift+0xa8>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a35      	ldr	r2, [pc, #212]	; (8003c98 <DMA_CalcBaseAndBitshift+0x13c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d01d      	beq.n	8003c04 <DMA_CalcBaseAndBitshift+0xa8>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a33      	ldr	r2, [pc, #204]	; (8003c9c <DMA_CalcBaseAndBitshift+0x140>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d018      	beq.n	8003c04 <DMA_CalcBaseAndBitshift+0xa8>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a32      	ldr	r2, [pc, #200]	; (8003ca0 <DMA_CalcBaseAndBitshift+0x144>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d013      	beq.n	8003c04 <DMA_CalcBaseAndBitshift+0xa8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a30      	ldr	r2, [pc, #192]	; (8003ca4 <DMA_CalcBaseAndBitshift+0x148>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00e      	beq.n	8003c04 <DMA_CalcBaseAndBitshift+0xa8>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2f      	ldr	r2, [pc, #188]	; (8003ca8 <DMA_CalcBaseAndBitshift+0x14c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d009      	beq.n	8003c04 <DMA_CalcBaseAndBitshift+0xa8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a2d      	ldr	r2, [pc, #180]	; (8003cac <DMA_CalcBaseAndBitshift+0x150>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d004      	beq.n	8003c04 <DMA_CalcBaseAndBitshift+0xa8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a2c      	ldr	r2, [pc, #176]	; (8003cb0 <DMA_CalcBaseAndBitshift+0x154>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d101      	bne.n	8003c08 <DMA_CalcBaseAndBitshift+0xac>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <DMA_CalcBaseAndBitshift+0xae>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d024      	beq.n	8003c58 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	3b10      	subs	r3, #16
 8003c16:	4a27      	ldr	r2, [pc, #156]	; (8003cb4 <DMA_CalcBaseAndBitshift+0x158>)
 8003c18:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	4a24      	ldr	r2, [pc, #144]	; (8003cb8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003c28:	5cd3      	ldrb	r3, [r2, r3]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d908      	bls.n	8003c48 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4b1f      	ldr	r3, [pc, #124]	; (8003cbc <DMA_CalcBaseAndBitshift+0x160>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	1d1a      	adds	r2, r3, #4
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	659a      	str	r2, [r3, #88]	; 0x58
 8003c46:	e00d      	b.n	8003c64 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <DMA_CalcBaseAndBitshift+0x160>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6593      	str	r3, [r2, #88]	; 0x58
 8003c56:	e005      	b.n	8003c64 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	40020010 	.word	0x40020010
 8003c78:	40020028 	.word	0x40020028
 8003c7c:	40020040 	.word	0x40020040
 8003c80:	40020058 	.word	0x40020058
 8003c84:	40020070 	.word	0x40020070
 8003c88:	40020088 	.word	0x40020088
 8003c8c:	400200a0 	.word	0x400200a0
 8003c90:	400200b8 	.word	0x400200b8
 8003c94:	40020410 	.word	0x40020410
 8003c98:	40020428 	.word	0x40020428
 8003c9c:	40020440 	.word	0x40020440
 8003ca0:	40020458 	.word	0x40020458
 8003ca4:	40020470 	.word	0x40020470
 8003ca8:	40020488 	.word	0x40020488
 8003cac:	400204a0 	.word	0x400204a0
 8003cb0:	400204b8 	.word	0x400204b8
 8003cb4:	aaaaaaab 	.word	0xaaaaaaab
 8003cb8:	0800f7dc 	.word	0x0800f7dc
 8003cbc:	fffffc00 	.word	0xfffffc00

08003cc0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d120      	bne.n	8003d16 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d858      	bhi.n	8003d8e <DMA_CheckFifoParam+0xce>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <DMA_CheckFifoParam+0x24>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003cf5 	.word	0x08003cf5
 8003ce8:	08003d07 	.word	0x08003d07
 8003cec:	08003cf5 	.word	0x08003cf5
 8003cf0:	08003d8f 	.word	0x08003d8f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d048      	beq.n	8003d92 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d04:	e045      	b.n	8003d92 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d0e:	d142      	bne.n	8003d96 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d14:	e03f      	b.n	8003d96 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1e:	d123      	bne.n	8003d68 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d838      	bhi.n	8003d9a <DMA_CheckFifoParam+0xda>
 8003d28:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <DMA_CheckFifoParam+0x70>)
 8003d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2e:	bf00      	nop
 8003d30:	08003d41 	.word	0x08003d41
 8003d34:	08003d47 	.word	0x08003d47
 8003d38:	08003d41 	.word	0x08003d41
 8003d3c:	08003d59 	.word	0x08003d59
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
        break;
 8003d44:	e030      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d025      	beq.n	8003d9e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d56:	e022      	b.n	8003d9e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d60:	d11f      	bne.n	8003da2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d66:	e01c      	b.n	8003da2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d902      	bls.n	8003d76 <DMA_CheckFifoParam+0xb6>
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d003      	beq.n	8003d7c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003d74:	e018      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
        break;
 8003d7a:	e015      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00e      	beq.n	8003da6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8003d8c:	e00b      	b.n	8003da6 <DMA_CheckFifoParam+0xe6>
        break;
 8003d8e:	bf00      	nop
 8003d90:	e00a      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
        break;
 8003d92:	bf00      	nop
 8003d94:	e008      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
        break;
 8003d96:	bf00      	nop
 8003d98:	e006      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
        break;
 8003d9a:	bf00      	nop
 8003d9c:	e004      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
        break;
 8003d9e:	bf00      	nop
 8003da0:	e002      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
        break;
 8003da2:	bf00      	nop
 8003da4:	e000      	b.n	8003da8 <DMA_CheckFifoParam+0xe8>
    break;
 8003da6:	bf00      	nop
    }
  }

  return status;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop

08003db8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a38      	ldr	r2, [pc, #224]	; (8003eac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d022      	beq.n	8003e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a36      	ldr	r2, [pc, #216]	; (8003eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d01d      	beq.n	8003e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a35      	ldr	r2, [pc, #212]	; (8003eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d018      	beq.n	8003e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a33      	ldr	r2, [pc, #204]	; (8003eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d013      	beq.n	8003e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a32      	ldr	r2, [pc, #200]	; (8003ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00e      	beq.n	8003e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a30      	ldr	r2, [pc, #192]	; (8003ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d009      	beq.n	8003e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a2f      	ldr	r2, [pc, #188]	; (8003ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d004      	beq.n	8003e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a2d      	ldr	r2, [pc, #180]	; (8003ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d101      	bne.n	8003e1a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d01a      	beq.n	8003e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	3b08      	subs	r3, #8
 8003e28:	4a28      	ldr	r2, [pc, #160]	; (8003ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a24      	ldr	r2, [pc, #144]	; (8003ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003e44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003e54:	e024      	b.n	8003ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	3b10      	subs	r3, #16
 8003e5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d806      	bhi.n	8003e7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d902      	bls.n	8003e7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3308      	adds	r3, #8
 8003e7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	461a      	mov	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a16      	ldr	r2, [pc, #88]	; (8003ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003e90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	2201      	movs	r2, #1
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ea0:	bf00      	nop
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	58025408 	.word	0x58025408
 8003eb0:	5802541c 	.word	0x5802541c
 8003eb4:	58025430 	.word	0x58025430
 8003eb8:	58025444 	.word	0x58025444
 8003ebc:	58025458 	.word	0x58025458
 8003ec0:	5802546c 	.word	0x5802546c
 8003ec4:	58025480 	.word	0x58025480
 8003ec8:	58025494 	.word	0x58025494
 8003ecc:	cccccccd 	.word	0xcccccccd
 8003ed0:	16009600 	.word	0x16009600
 8003ed4:	58025880 	.word	0x58025880
 8003ed8:	aaaaaaab 	.word	0xaaaaaaab
 8003edc:	400204b8 	.word	0x400204b8
 8003ee0:	4002040f 	.word	0x4002040f
 8003ee4:	10008200 	.word	0x10008200
 8003ee8:	40020880 	.word	0x40020880

08003eec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d04a      	beq.n	8003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d847      	bhi.n	8003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d022      	beq.n	8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a24      	ldr	r2, [pc, #144]	; (8003fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d01d      	beq.n	8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a22      	ldr	r2, [pc, #136]	; (8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d018      	beq.n	8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00e      	beq.n	8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d009      	beq.n	8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d004      	beq.n	8003f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d101      	bne.n	8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a15      	ldr	r2, [pc, #84]	; (8003fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003f74:	671a      	str	r2, [r3, #112]	; 0x70
 8003f76:	e009      	b.n	8003f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	461a      	mov	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a11      	ldr	r2, [pc, #68]	; (8003fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003f8a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	2201      	movs	r2, #1
 8003f92:	409a      	lsls	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	58025408 	.word	0x58025408
 8003fa8:	5802541c 	.word	0x5802541c
 8003fac:	58025430 	.word	0x58025430
 8003fb0:	58025444 	.word	0x58025444
 8003fb4:	58025458 	.word	0x58025458
 8003fb8:	5802546c 	.word	0x5802546c
 8003fbc:	58025480 	.word	0x58025480
 8003fc0:	58025494 	.word	0x58025494
 8003fc4:	1600963f 	.word	0x1600963f
 8003fc8:	58025940 	.word	0x58025940
 8003fcc:	1000823f 	.word	0x1000823f
 8003fd0:	40020940 	.word	0x40020940

08003fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b089      	sub	sp, #36	; 0x24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003fe2:	4b86      	ldr	r3, [pc, #536]	; (80041fc <HAL_GPIO_Init+0x228>)
 8003fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003fe6:	e18c      	b.n	8004302 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	2101      	movs	r1, #1
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 817e 	beq.w	80042fc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	2b01      	cmp	r3, #1
 800400a:	d005      	beq.n	8004018 <HAL_GPIO_Init+0x44>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d130      	bne.n	800407a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	2203      	movs	r2, #3
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4013      	ands	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4313      	orrs	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800404e:	2201      	movs	r2, #1
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	f003 0201 	and.w	r2, r3, #1
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b03      	cmp	r3, #3
 8004084:	d017      	beq.n	80040b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	2203      	movs	r2, #3
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d123      	bne.n	800410a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	08da      	lsrs	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3208      	adds	r2, #8
 80040ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	220f      	movs	r2, #15
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4013      	ands	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	08da      	lsrs	r2, r3, #3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3208      	adds	r2, #8
 8004104:	69b9      	ldr	r1, [r7, #24]
 8004106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	2203      	movs	r2, #3
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 0203 	and.w	r2, r3, #3
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 80d8 	beq.w	80042fc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414c:	4b2c      	ldr	r3, [pc, #176]	; (8004200 <HAL_GPIO_Init+0x22c>)
 800414e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004152:	4a2b      	ldr	r2, [pc, #172]	; (8004200 <HAL_GPIO_Init+0x22c>)
 8004154:	f043 0302 	orr.w	r3, r3, #2
 8004158:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800415c:	4b28      	ldr	r3, [pc, #160]	; (8004200 <HAL_GPIO_Init+0x22c>)
 800415e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800416a:	4a26      	ldr	r2, [pc, #152]	; (8004204 <HAL_GPIO_Init+0x230>)
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	089b      	lsrs	r3, r3, #2
 8004170:	3302      	adds	r3, #2
 8004172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	220f      	movs	r2, #15
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	43db      	mvns	r3, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4013      	ands	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a1d      	ldr	r2, [pc, #116]	; (8004208 <HAL_GPIO_Init+0x234>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d04a      	beq.n	800422c <HAL_GPIO_Init+0x258>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a1c      	ldr	r2, [pc, #112]	; (800420c <HAL_GPIO_Init+0x238>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d02b      	beq.n	80041f6 <HAL_GPIO_Init+0x222>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a1b      	ldr	r2, [pc, #108]	; (8004210 <HAL_GPIO_Init+0x23c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d025      	beq.n	80041f2 <HAL_GPIO_Init+0x21e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a1a      	ldr	r2, [pc, #104]	; (8004214 <HAL_GPIO_Init+0x240>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01f      	beq.n	80041ee <HAL_GPIO_Init+0x21a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a19      	ldr	r2, [pc, #100]	; (8004218 <HAL_GPIO_Init+0x244>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d019      	beq.n	80041ea <HAL_GPIO_Init+0x216>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a18      	ldr	r2, [pc, #96]	; (800421c <HAL_GPIO_Init+0x248>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_GPIO_Init+0x212>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a17      	ldr	r2, [pc, #92]	; (8004220 <HAL_GPIO_Init+0x24c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00d      	beq.n	80041e2 <HAL_GPIO_Init+0x20e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a16      	ldr	r2, [pc, #88]	; (8004224 <HAL_GPIO_Init+0x250>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <HAL_GPIO_Init+0x20a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a15      	ldr	r2, [pc, #84]	; (8004228 <HAL_GPIO_Init+0x254>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <HAL_GPIO_Init+0x206>
 80041d6:	2309      	movs	r3, #9
 80041d8:	e029      	b.n	800422e <HAL_GPIO_Init+0x25a>
 80041da:	230a      	movs	r3, #10
 80041dc:	e027      	b.n	800422e <HAL_GPIO_Init+0x25a>
 80041de:	2307      	movs	r3, #7
 80041e0:	e025      	b.n	800422e <HAL_GPIO_Init+0x25a>
 80041e2:	2306      	movs	r3, #6
 80041e4:	e023      	b.n	800422e <HAL_GPIO_Init+0x25a>
 80041e6:	2305      	movs	r3, #5
 80041e8:	e021      	b.n	800422e <HAL_GPIO_Init+0x25a>
 80041ea:	2304      	movs	r3, #4
 80041ec:	e01f      	b.n	800422e <HAL_GPIO_Init+0x25a>
 80041ee:	2303      	movs	r3, #3
 80041f0:	e01d      	b.n	800422e <HAL_GPIO_Init+0x25a>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e01b      	b.n	800422e <HAL_GPIO_Init+0x25a>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e019      	b.n	800422e <HAL_GPIO_Init+0x25a>
 80041fa:	bf00      	nop
 80041fc:	58000080 	.word	0x58000080
 8004200:	58024400 	.word	0x58024400
 8004204:	58000400 	.word	0x58000400
 8004208:	58020000 	.word	0x58020000
 800420c:	58020400 	.word	0x58020400
 8004210:	58020800 	.word	0x58020800
 8004214:	58020c00 	.word	0x58020c00
 8004218:	58021000 	.word	0x58021000
 800421c:	58021400 	.word	0x58021400
 8004220:	58021800 	.word	0x58021800
 8004224:	58021c00 	.word	0x58021c00
 8004228:	58022400 	.word	0x58022400
 800422c:	2300      	movs	r3, #0
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	f002 0203 	and.w	r2, r2, #3
 8004234:	0092      	lsls	r2, r2, #2
 8004236:	4093      	lsls	r3, r2
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800423e:	4938      	ldr	r1, [pc, #224]	; (8004320 <HAL_GPIO_Init+0x34c>)
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	089b      	lsrs	r3, r3, #2
 8004244:	3302      	adds	r3, #2
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800424c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	43db      	mvns	r3, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800427a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	43db      	mvns	r3, r3
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4013      	ands	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80042a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	43db      	mvns	r3, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4013      	ands	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	3301      	adds	r3, #1
 8004300:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	f47f ae6b 	bne.w	8003fe8 <HAL_GPIO_Init+0x14>
  }
}
 8004312:	bf00      	nop
 8004314:	bf00      	nop
 8004316:	3724      	adds	r7, #36	; 0x24
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	58000400 	.word	0x58000400

08004324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	460b      	mov	r3, r1
 800432e:	807b      	strh	r3, [r7, #2]
 8004330:	4613      	mov	r3, r2
 8004332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004334:	787b      	ldrb	r3, [r7, #1]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800433a:	887a      	ldrh	r2, [r7, #2]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004340:	e003      	b.n	800434a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004342:	887b      	ldrh	r3, [r7, #2]
 8004344:	041a      	lsls	r2, r3, #16
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	619a      	str	r2, [r3, #24]
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af02      	add	r7, sp, #8
 800435e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004364:	f7fd fc16 	bl	8001b94 <HAL_GetTick>
 8004368:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	e0a5      	b.n	80044c2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004380:	2b00      	cmp	r3, #0
 8004382:	f040 809e 	bne.w	80044c2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fc ff86 	bl	8001298 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800438c:	f241 3188 	movw	r1, #5000	; 0x1388
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f89d 	bl	80044d0 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	4b4b      	ldr	r3, [pc, #300]	; (80044cc <HAL_OSPI_Init+0x174>)
 800439e:	4013      	ands	r3, r2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68d1      	ldr	r1, [r2, #12]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6912      	ldr	r2, [r2, #16]
 80043a8:	3a01      	subs	r2, #1
 80043aa:	0412      	lsls	r2, r2, #16
 80043ac:	4311      	orrs	r1, r2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6952      	ldr	r2, [r2, #20]
 80043b2:	3a01      	subs	r2, #1
 80043b4:	0212      	lsls	r2, r2, #8
 80043b6:	4311      	orrs	r1, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043bc:	4311      	orrs	r1, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	69d2      	ldr	r2, [r2, #28]
 80043c2:	4311      	orrs	r1, r2
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	430b      	orrs	r3, r1
 80043ca:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1a      	ldr	r2, [r3, #32]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043fc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	3b01      	subs	r3, #1
 800440e:	021a      	lsls	r2, r3, #8
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2200      	movs	r2, #0
 8004422:	2120      	movs	r1, #32
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fd4b 	bl	8004ec0 <OSPI_WaitFlagStateUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d146      	bne.n	80044c2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	1e5a      	subs	r2, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800446a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0201 	orr.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d107      	bne.n	80044aa <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0202 	orr.w	r2, r2, #2
 80044a8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044b2:	d103      	bne.n	80044bc <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	651a      	str	r2, [r3, #80]	; 0x50
 80044ba:	e002      	b.n	80044c2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	f8e0f8f4 	.word	0xf8e0f8f4

080044d0 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b094      	sub	sp, #80	; 0x50
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a9d      	ldr	r2, [pc, #628]	; (8004784 <HAL_OSPIM_Config+0x294>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d105      	bne.n	800451e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8004516:	2301      	movs	r3, #1
 8004518:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800451c:	e004      	b.n	8004528 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800451e:	2301      	movs	r3, #1
 8004520:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800452e:	e01d      	b.n	800456c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004530:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004534:	3301      	adds	r3, #1
 8004536:	b2d8      	uxtb	r0, r3
 8004538:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800453c:	f107 0114 	add.w	r1, r7, #20
 8004540:	4613      	mov	r3, r2
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	4413      	add	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	440b      	add	r3, r1
 800454a:	4619      	mov	r1, r3
 800454c:	f000 fcf0 	bl	8004f30 <OSPIM_GetConfig>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2208      	movs	r2, #8
 8004560:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004562:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004566:	3301      	adds	r3, #1
 8004568:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800456c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004570:	2b01      	cmp	r3, #1
 8004572:	d9dd      	bls.n	8004530 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8004574:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004578:	2b00      	cmp	r3, #0
 800457a:	f040 8495 	bne.w	8004ea8 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800457e:	4b81      	ldr	r3, [pc, #516]	; (8004784 <HAL_OSPIM_Config+0x294>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00b      	beq.n	80045a2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800458a:	4b7e      	ldr	r3, [pc, #504]	; (8004784 <HAL_OSPIM_Config+0x294>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a7d      	ldr	r2, [pc, #500]	; (8004784 <HAL_OSPIM_Config+0x294>)
 8004590:	f023 0301 	bic.w	r3, r3, #1
 8004594:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004596:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80045a2:	4b79      	ldr	r3, [pc, #484]	; (8004788 <HAL_OSPIM_Config+0x298>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80045ae:	4b76      	ldr	r3, [pc, #472]	; (8004788 <HAL_OSPIM_Config+0x298>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a75      	ldr	r2, [pc, #468]	; (8004788 <HAL_OSPIM_Config+0x298>)
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80045ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80045be:	f043 0302 	orr.w	r3, r3, #2
 80045c2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80045c6:	4971      	ldr	r1, [pc, #452]	; (800478c <HAL_OSPIM_Config+0x29c>)
 80045c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ca:	4613      	mov	r3, r2
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	4413      	add	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	3350      	adds	r3, #80	; 0x50
 80045d4:	443b      	add	r3, r7
 80045d6:	3b34      	subs	r3, #52	; 0x34
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3b01      	subs	r3, #1
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	6859      	ldr	r1, [r3, #4]
 80045e2:	486a      	ldr	r0, [pc, #424]	; (800478c <HAL_OSPIM_Config+0x29c>)
 80045e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e6:	4613      	mov	r3, r2
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4413      	add	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	3350      	adds	r3, #80	; 0x50
 80045f0:	443b      	add	r3, r7
 80045f2:	3b34      	subs	r3, #52	; 0x34
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4403      	add	r3, r0
 8004600:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8004602:	4b62      	ldr	r3, [pc, #392]	; (800478c <HAL_OSPIM_Config+0x29c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80c0 	beq.w	8004790 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004610:	4b5e      	ldr	r3, [pc, #376]	; (800478c <HAL_OSPIM_Config+0x29c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a5d      	ldr	r2, [pc, #372]	; (800478c <HAL_OSPIM_Config+0x29c>)
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800461c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004620:	2b01      	cmp	r3, #1
 8004622:	f040 8162 	bne.w	80048ea <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8004626:	4959      	ldr	r1, [pc, #356]	; (800478c <HAL_OSPIM_Config+0x29c>)
 8004628:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800462c:	4613      	mov	r3, r2
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	4413      	add	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	3350      	adds	r3, #80	; 0x50
 8004636:	443b      	add	r3, r7
 8004638:	3b3c      	subs	r3, #60	; 0x3c
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3b01      	subs	r3, #1
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	6859      	ldr	r1, [r3, #4]
 8004644:	4851      	ldr	r0, [pc, #324]	; (800478c <HAL_OSPIM_Config+0x29c>)
 8004646:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800464a:	4613      	mov	r3, r2
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	4413      	add	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	3350      	adds	r3, #80	; 0x50
 8004654:	443b      	add	r3, r7
 8004656:	3b3c      	subs	r3, #60	; 0x3c
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3b01      	subs	r3, #1
 800465c:	f041 0202 	orr.w	r2, r1, #2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4403      	add	r3, r0
 8004664:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004666:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800466a:	4613      	mov	r3, r2
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	4413      	add	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	3350      	adds	r3, #80	; 0x50
 8004674:	443b      	add	r3, r7
 8004676:	3b38      	subs	r3, #56	; 0x38
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01f      	beq.n	80046be <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800467e:	4943      	ldr	r1, [pc, #268]	; (800478c <HAL_OSPIM_Config+0x29c>)
 8004680:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004684:	4613      	mov	r3, r2
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	4413      	add	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	3350      	adds	r3, #80	; 0x50
 800468e:	443b      	add	r3, r7
 8004690:	3b38      	subs	r3, #56	; 0x38
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3b01      	subs	r3, #1
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	6859      	ldr	r1, [r3, #4]
 800469c:	483b      	ldr	r0, [pc, #236]	; (800478c <HAL_OSPIM_Config+0x29c>)
 800469e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80046a2:	4613      	mov	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	4413      	add	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	3350      	adds	r3, #80	; 0x50
 80046ac:	443b      	add	r3, r7
 80046ae:	3b38      	subs	r3, #56	; 0x38
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	f041 0220 	orr.w	r2, r1, #32
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4403      	add	r3, r0
 80046bc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80046be:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80046c2:	4613      	mov	r3, r2
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	4413      	add	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	3350      	adds	r3, #80	; 0x50
 80046cc:	443b      	add	r3, r7
 80046ce:	3b30      	subs	r3, #48	; 0x30
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d023      	beq.n	800471e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80046d6:	492d      	ldr	r1, [pc, #180]	; (800478c <HAL_OSPIM_Config+0x29c>)
 80046d8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80046dc:	4613      	mov	r3, r2
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	4413      	add	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	3350      	adds	r3, #80	; 0x50
 80046e6:	443b      	add	r3, r7
 80046e8:	3b30      	subs	r3, #48	; 0x30
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	4824      	ldr	r0, [pc, #144]	; (800478c <HAL_OSPIM_Config+0x29c>)
 80046fa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80046fe:	4613      	mov	r3, r2
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	4413      	add	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	3350      	adds	r3, #80	; 0x50
 8004708:	443b      	add	r3, r7
 800470a:	3b30      	subs	r3, #48	; 0x30
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3b01      	subs	r3, #1
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4403      	add	r3, r0
 800471c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800471e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004722:	4613      	mov	r3, r2
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	4413      	add	r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	3350      	adds	r3, #80	; 0x50
 800472c:	443b      	add	r3, r7
 800472e:	3b2c      	subs	r3, #44	; 0x2c
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80d9 	beq.w	80048ea <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8004738:	4914      	ldr	r1, [pc, #80]	; (800478c <HAL_OSPIM_Config+0x29c>)
 800473a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800473e:	4613      	mov	r3, r2
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	4413      	add	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	3350      	adds	r3, #80	; 0x50
 8004748:	443b      	add	r3, r7
 800474a:	3b2c      	subs	r3, #44	; 0x2c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3b01      	subs	r3, #1
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	6859      	ldr	r1, [r3, #4]
 800475a:	480c      	ldr	r0, [pc, #48]	; (800478c <HAL_OSPIM_Config+0x29c>)
 800475c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004760:	4613      	mov	r3, r2
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4413      	add	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	3350      	adds	r3, #80	; 0x50
 800476a:	443b      	add	r3, r7
 800476c:	3b2c      	subs	r3, #44	; 0x2c
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3b01      	subs	r3, #1
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4403      	add	r3, r0
 800477e:	605a      	str	r2, [r3, #4]
 8004780:	e0b3      	b.n	80048ea <HAL_OSPIM_Config+0x3fa>
 8004782:	bf00      	nop
 8004784:	52005000 	.word	0x52005000
 8004788:	5200a000 	.word	0x5200a000
 800478c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8004790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004792:	4613      	mov	r3, r2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4413      	add	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	3350      	adds	r3, #80	; 0x50
 800479c:	443b      	add	r3, r7
 800479e:	3b3c      	subs	r3, #60	; 0x3c
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 80a1 	beq.w	80048ea <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80047a8:	4993      	ldr	r1, [pc, #588]	; (80049f8 <HAL_OSPIM_Config+0x508>)
 80047aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047ac:	4613      	mov	r3, r2
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	4413      	add	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	3350      	adds	r3, #80	; 0x50
 80047b6:	443b      	add	r3, r7
 80047b8:	3b3c      	subs	r3, #60	; 0x3c
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3b01      	subs	r3, #1
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	6859      	ldr	r1, [r3, #4]
 80047c4:	488c      	ldr	r0, [pc, #560]	; (80049f8 <HAL_OSPIM_Config+0x508>)
 80047c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047c8:	4613      	mov	r3, r2
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	4413      	add	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	3350      	adds	r3, #80	; 0x50
 80047d2:	443b      	add	r3, r7
 80047d4:	3b3c      	subs	r3, #60	; 0x3c
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3b01      	subs	r3, #1
 80047da:	f021 0201 	bic.w	r2, r1, #1
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4403      	add	r3, r0
 80047e2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80047e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047e6:	4613      	mov	r3, r2
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	4413      	add	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	3350      	adds	r3, #80	; 0x50
 80047f0:	443b      	add	r3, r7
 80047f2:	3b38      	subs	r3, #56	; 0x38
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d01d      	beq.n	8004836 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80047fa:	497f      	ldr	r1, [pc, #508]	; (80049f8 <HAL_OSPIM_Config+0x508>)
 80047fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047fe:	4613      	mov	r3, r2
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	4413      	add	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	3350      	adds	r3, #80	; 0x50
 8004808:	443b      	add	r3, r7
 800480a:	3b38      	subs	r3, #56	; 0x38
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3b01      	subs	r3, #1
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	4878      	ldr	r0, [pc, #480]	; (80049f8 <HAL_OSPIM_Config+0x508>)
 8004818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800481a:	4613      	mov	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	4413      	add	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	3350      	adds	r3, #80	; 0x50
 8004824:	443b      	add	r3, r7
 8004826:	3b38      	subs	r3, #56	; 0x38
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3b01      	subs	r3, #1
 800482c:	f021 0210 	bic.w	r2, r1, #16
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4403      	add	r3, r0
 8004834:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004838:	4613      	mov	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	3350      	adds	r3, #80	; 0x50
 8004842:	443b      	add	r3, r7
 8004844:	3b30      	subs	r3, #48	; 0x30
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d021      	beq.n	8004890 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800484c:	496a      	ldr	r1, [pc, #424]	; (80049f8 <HAL_OSPIM_Config+0x508>)
 800484e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004850:	4613      	mov	r3, r2
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	4413      	add	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	3350      	adds	r3, #80	; 0x50
 800485a:	443b      	add	r3, r7
 800485c:	3b30      	subs	r3, #48	; 0x30
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3b01      	subs	r3, #1
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	6859      	ldr	r1, [r3, #4]
 800486c:	4862      	ldr	r0, [pc, #392]	; (80049f8 <HAL_OSPIM_Config+0x508>)
 800486e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004870:	4613      	mov	r3, r2
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4413      	add	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	3350      	adds	r3, #80	; 0x50
 800487a:	443b      	add	r3, r7
 800487c:	3b30      	subs	r3, #48	; 0x30
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3b01      	subs	r3, #1
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4403      	add	r3, r0
 800488e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004892:	4613      	mov	r3, r2
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	4413      	add	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	3350      	adds	r3, #80	; 0x50
 800489c:	443b      	add	r3, r7
 800489e:	3b2c      	subs	r3, #44	; 0x2c
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d021      	beq.n	80048ea <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80048a6:	4954      	ldr	r1, [pc, #336]	; (80049f8 <HAL_OSPIM_Config+0x508>)
 80048a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048aa:	4613      	mov	r3, r2
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	4413      	add	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	3350      	adds	r3, #80	; 0x50
 80048b4:	443b      	add	r3, r7
 80048b6:	3b2c      	subs	r3, #44	; 0x2c
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	6859      	ldr	r1, [r3, #4]
 80048c6:	484c      	ldr	r0, [pc, #304]	; (80049f8 <HAL_OSPIM_Config+0x508>)
 80048c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ca:	4613      	mov	r3, r2
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	4413      	add	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	3350      	adds	r3, #80	; 0x50
 80048d4:	443b      	add	r3, r7
 80048d6:	3b2c      	subs	r3, #44	; 0x2c
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3b01      	subs	r3, #1
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4403      	add	r3, r0
 80048e8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6819      	ldr	r1, [r3, #0]
 80048ee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80048f2:	4613      	mov	r3, r2
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	4413      	add	r3, r2
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	3350      	adds	r3, #80	; 0x50
 80048fc:	443b      	add	r3, r7
 80048fe:	3b3c      	subs	r3, #60	; 0x3c
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4299      	cmp	r1, r3
 8004904:	d038      	beq.n	8004978 <HAL_OSPIM_Config+0x488>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	6859      	ldr	r1, [r3, #4]
 800490a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800490e:	4613      	mov	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	3350      	adds	r3, #80	; 0x50
 8004918:	443b      	add	r3, r7
 800491a:	3b38      	subs	r3, #56	; 0x38
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4299      	cmp	r1, r3
 8004920:	d02a      	beq.n	8004978 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	6899      	ldr	r1, [r3, #8]
 8004926:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800492a:	4613      	mov	r3, r2
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	4413      	add	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	3350      	adds	r3, #80	; 0x50
 8004934:	443b      	add	r3, r7
 8004936:	3b34      	subs	r3, #52	; 0x34
 8004938:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800493a:	4299      	cmp	r1, r3
 800493c:	d01c      	beq.n	8004978 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	68d9      	ldr	r1, [r3, #12]
 8004942:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	3350      	adds	r3, #80	; 0x50
 8004950:	443b      	add	r3, r7
 8004952:	3b30      	subs	r3, #48	; 0x30
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4299      	cmp	r1, r3
 8004958:	d00e      	beq.n	8004978 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6919      	ldr	r1, [r3, #16]
 800495e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004962:	4613      	mov	r3, r2
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	4413      	add	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	3350      	adds	r3, #80	; 0x50
 800496c:	443b      	add	r3, r7
 800496e:	3b2c      	subs	r3, #44	; 0x2c
 8004970:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004972:	4299      	cmp	r1, r3
 8004974:	f040 810e 	bne.w	8004b94 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	6819      	ldr	r1, [r3, #0]
 800497c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004980:	4613      	mov	r3, r2
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	4413      	add	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	3350      	adds	r3, #80	; 0x50
 800498a:	443b      	add	r3, r7
 800498c:	3b3c      	subs	r3, #60	; 0x3c
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4299      	cmp	r1, r3
 8004992:	d133      	bne.n	80049fc <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800499c:	4613      	mov	r3, r2
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	4413      	add	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	3350      	adds	r3, #80	; 0x50
 80049a6:	443b      	add	r3, r7
 80049a8:	3b38      	subs	r3, #56	; 0x38
 80049aa:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80049ac:	4299      	cmp	r1, r3
 80049ae:	d125      	bne.n	80049fc <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	68d9      	ldr	r1, [r3, #12]
 80049b4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80049b8:	4613      	mov	r3, r2
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	4413      	add	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	3350      	adds	r3, #80	; 0x50
 80049c2:	443b      	add	r3, r7
 80049c4:	3b30      	subs	r3, #48	; 0x30
 80049c6:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80049c8:	4299      	cmp	r1, r3
 80049ca:	d117      	bne.n	80049fc <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	6919      	ldr	r1, [r3, #16]
 80049d0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80049d4:	4613      	mov	r3, r2
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	4413      	add	r3, r2
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	3350      	adds	r3, #80	; 0x50
 80049de:	443b      	add	r3, r7
 80049e0:	3b2c      	subs	r3, #44	; 0x2c
 80049e2:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80049e4:	4299      	cmp	r1, r3
 80049e6:	d109      	bne.n	80049fc <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80049e8:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <HAL_OSPIM_Config+0x508>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a02      	ldr	r2, [pc, #8]	; (80049f8 <HAL_OSPIM_Config+0x508>)
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	e0ce      	b.n	8004b94 <HAL_OSPIM_Config+0x6a4>
 80049f6:	bf00      	nop
 80049f8:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80049fc:	49bb      	ldr	r1, [pc, #748]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 80049fe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004a02:	4613      	mov	r3, r2
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	4413      	add	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	3350      	adds	r3, #80	; 0x50
 8004a0c:	443b      	add	r3, r7
 8004a0e:	3b3c      	subs	r3, #60	; 0x3c
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	6859      	ldr	r1, [r3, #4]
 8004a1a:	48b4      	ldr	r0, [pc, #720]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004a1c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004a20:	4613      	mov	r3, r2
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	4413      	add	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	3350      	adds	r3, #80	; 0x50
 8004a2a:	443b      	add	r3, r7
 8004a2c:	3b3c      	subs	r3, #60	; 0x3c
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	f021 0201 	bic.w	r2, r1, #1
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4403      	add	r3, r0
 8004a3a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004a3c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004a40:	4613      	mov	r3, r2
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	4413      	add	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	3350      	adds	r3, #80	; 0x50
 8004a4a:	443b      	add	r3, r7
 8004a4c:	3b38      	subs	r3, #56	; 0x38
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01f      	beq.n	8004a94 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004a54:	49a5      	ldr	r1, [pc, #660]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004a56:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	4413      	add	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	3350      	adds	r3, #80	; 0x50
 8004a64:	443b      	add	r3, r7
 8004a66:	3b38      	subs	r3, #56	; 0x38
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	489e      	ldr	r0, [pc, #632]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004a74:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004a78:	4613      	mov	r3, r2
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	4413      	add	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	3350      	adds	r3, #80	; 0x50
 8004a82:	443b      	add	r3, r7
 8004a84:	3b38      	subs	r3, #56	; 0x38
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	f021 0210 	bic.w	r2, r1, #16
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4403      	add	r3, r0
 8004a92:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004a94:	4995      	ldr	r1, [pc, #596]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004a96:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	4413      	add	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	3350      	adds	r3, #80	; 0x50
 8004aa4:	443b      	add	r3, r7
 8004aa6:	3b34      	subs	r3, #52	; 0x34
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	6859      	ldr	r1, [r3, #4]
 8004ab2:	488e      	ldr	r0, [pc, #568]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004ab4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004ab8:	4613      	mov	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	4413      	add	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	3350      	adds	r3, #80	; 0x50
 8004ac2:	443b      	add	r3, r7
 8004ac4:	3b34      	subs	r3, #52	; 0x34
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4403      	add	r3, r0
 8004ad2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004ad4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004ad8:	4613      	mov	r3, r2
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	4413      	add	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	3350      	adds	r3, #80	; 0x50
 8004ae2:	443b      	add	r3, r7
 8004ae4:	3b30      	subs	r3, #48	; 0x30
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d023      	beq.n	8004b34 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004aec:	497f      	ldr	r1, [pc, #508]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004aee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004af2:	4613      	mov	r3, r2
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	4413      	add	r3, r2
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	3350      	adds	r3, #80	; 0x50
 8004afc:	443b      	add	r3, r7
 8004afe:	3b30      	subs	r3, #48	; 0x30
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	6859      	ldr	r1, [r3, #4]
 8004b0e:	4877      	ldr	r0, [pc, #476]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004b10:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b14:	4613      	mov	r3, r2
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	4413      	add	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	3350      	adds	r3, #80	; 0x50
 8004b1e:	443b      	add	r3, r7
 8004b20:	3b30      	subs	r3, #48	; 0x30
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4403      	add	r3, r0
 8004b32:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004b34:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b38:	4613      	mov	r3, r2
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	3350      	adds	r3, #80	; 0x50
 8004b42:	443b      	add	r3, r7
 8004b44:	3b2c      	subs	r3, #44	; 0x2c
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d023      	beq.n	8004b94 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004b4c:	4967      	ldr	r1, [pc, #412]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004b4e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b52:	4613      	mov	r3, r2
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	4413      	add	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	3350      	adds	r3, #80	; 0x50
 8004b5c:	443b      	add	r3, r7
 8004b5e:	3b2c      	subs	r3, #44	; 0x2c
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	6859      	ldr	r1, [r3, #4]
 8004b6e:	485f      	ldr	r0, [pc, #380]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004b70:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004b74:	4613      	mov	r3, r2
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	4413      	add	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	3350      	adds	r3, #80	; 0x50
 8004b7e:	443b      	add	r3, r7
 8004b80:	3b2c      	subs	r3, #44	; 0x2c
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4403      	add	r3, r0
 8004b92:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004b94:	4a55      	ldr	r2, [pc, #340]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba8:	025b      	lsls	r3, r3, #9
 8004baa:	431a      	orrs	r2, r3
 8004bac:	494f      	ldr	r1, [pc, #316]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	1e5a      	subs	r2, r3, #1
 8004bc4:	4b49      	ldr	r3, [pc, #292]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	0c1b      	lsrs	r3, r3, #16
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d90a      	bls.n	8004be6 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8004bd0:	4b46      	ldr	r3, [pc, #280]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	4942      	ldr	r1, [pc, #264]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8004be6:	4b41      	ldr	r3, [pc, #260]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 809a 	beq.w	8004d28 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8004bf4:	4a3d      	ldr	r2, [pc, #244]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f023 0203 	bic.w	r2, r3, #3
 8004c06:	4939      	ldr	r1, [pc, #228]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d011      	beq.n	8004c44 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8004c20:	4a32      	ldr	r2, [pc, #200]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c32:	492e      	ldr	r1, [pc, #184]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	f042 0210 	orr.w	r2, r2, #16
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d016      	beq.n	8004c7e <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004c50:	4a26      	ldr	r2, [pc, #152]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c66:	4921      	ldr	r1, [pc, #132]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	605a      	str	r2, [r3, #4]
 8004c7c:	e019      	b.n	8004cb2 <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d015      	beq.n	8004cb2 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004c86:	4a19      	ldr	r2, [pc, #100]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004c9c:	4913      	ldr	r1, [pc, #76]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d018      	beq.n	8004cf0 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004cbe:	4a0b      	ldr	r2, [pc, #44]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004cd4:	4905      	ldr	r1, [pc, #20]	; (8004cec <HAL_OSPIM_Config+0x7fc>)
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	605a      	str	r2, [r3, #4]
 8004cea:	e0c5      	b.n	8004e78 <HAL_OSPIM_Config+0x988>
 8004cec:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80bf 	beq.w	8004e78 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004cfa:	4a6e      	ldr	r2, [pc, #440]	; (8004eb4 <HAL_OSPIM_Config+0x9c4>)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d10:	4968      	ldr	r1, [pc, #416]	; (8004eb4 <HAL_OSPIM_Config+0x9c4>)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	e0a7      	b.n	8004e78 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004d28:	4a62      	ldr	r2, [pc, #392]	; (8004eb4 <HAL_OSPIM_Config+0x9c4>)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f023 0203 	bic.w	r2, r3, #3
 8004d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	495c      	ldr	r1, [pc, #368]	; (8004eb4 <HAL_OSPIM_Config+0x9c4>)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d014      	beq.n	8004d84 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004d5a:	4a56      	ldr	r2, [pc, #344]	; (8004eb4 <HAL_OSPIM_Config+0x9c4>)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d6e:	015b      	lsls	r3, r3, #5
 8004d70:	431a      	orrs	r2, r3
 8004d72:	4950      	ldr	r1, [pc, #320]	; (8004eb4 <HAL_OSPIM_Config+0x9c4>)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	f042 0210 	orr.w	r2, r2, #16
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d019      	beq.n	8004dc4 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d90:	4a48      	ldr	r2, [pc, #288]	; (8004eb4 <HAL_OSPIM_Config+0x9c4>)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da8:	049b      	lsls	r3, r3, #18
 8004daa:	431a      	orrs	r2, r3
 8004dac:	4941      	ldr	r1, [pc, #260]	; (8004eb4 <HAL_OSPIM_Config+0x9c4>)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	605a      	str	r2, [r3, #4]
 8004dc2:	e01c      	b.n	8004dfe <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d018      	beq.n	8004dfe <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004dcc:	4a39      	ldr	r2, [pc, #228]	; (8004eb4 <HAL_OSPIM_Config+0x9c4>)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de4:	069b      	lsls	r3, r3, #26
 8004de6:	431a      	orrs	r2, r3
 8004de8:	4932      	ldr	r1, [pc, #200]	; (8004eb4 <HAL_OSPIM_Config+0x9c4>)
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d019      	beq.n	8004e3e <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e0a:	4a2a      	ldr	r2, [pc, #168]	; (8004eb4 <HAL_OSPIM_Config+0x9c4>)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e22:	049b      	lsls	r3, r3, #18
 8004e24:	431a      	orrs	r2, r3
 8004e26:	4923      	ldr	r1, [pc, #140]	; (8004eb4 <HAL_OSPIM_Config+0x9c4>)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	605a      	str	r2, [r3, #4]
 8004e3c:	e01c      	b.n	8004e78 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d018      	beq.n	8004e78 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e46:	4a1b      	ldr	r2, [pc, #108]	; (8004eb4 <HAL_OSPIM_Config+0x9c4>)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5e:	069b      	lsls	r3, r3, #26
 8004e60:	431a      	orrs	r2, r3
 8004e62:	4914      	ldr	r1, [pc, #80]	; (8004eb4 <HAL_OSPIM_Config+0x9c4>)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004e78:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004e84:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <HAL_OSPIM_Config+0x9c8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a0b      	ldr	r2, [pc, #44]	; (8004eb8 <HAL_OSPIM_Config+0x9c8>)
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004e90:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <HAL_OSPIM_Config+0x9cc>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a06      	ldr	r2, [pc, #24]	; (8004ebc <HAL_OSPIM_Config+0x9cc>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004ea8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3750      	adds	r7, #80	; 0x50
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	5200b400 	.word	0x5200b400
 8004eb8:	52005000 	.word	0x52005000
 8004ebc:	5200a000 	.word	0x5200a000

08004ec0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004ed0:	e01a      	b.n	8004f08 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d016      	beq.n	8004f08 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eda:	f7fc fe5b 	bl	8001b94 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d302      	bcc.n	8004ef0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10b      	bne.n	8004f08 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ef6:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efc:	f043 0201 	orr.w	r2, r3, #1
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e00e      	b.n	8004f26 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6a1a      	ldr	r2, [r3, #32]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	bf14      	ite	ne
 8004f16:	2301      	movne	r3, #1
 8004f18:	2300      	moveq	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d1d6      	bne.n	8004ed2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	6039      	str	r1, [r7, #0]
 8004f3a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <OSPIM_GetConfig+0x26>
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d802      	bhi.n	8004f56 <OSPIM_GetConfig+0x26>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	75fb      	strb	r3, [r7, #23]
 8004f5a:	e098      	b.n	800508e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2200      	movs	r2, #0
 8004f66:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2200      	movs	r2, #0
 8004f72:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2200      	movs	r2, #0
 8004f78:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d10b      	bne.n	8004f98 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8004f80:	4b46      	ldr	r3, [pc, #280]	; (800509c <OSPIM_GetConfig+0x16c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004f8c:	4b44      	ldr	r3, [pc, #272]	; (80050a0 <OSPIM_GetConfig+0x170>)
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	e002      	b.n	8004f98 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8004f92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f96:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e074      	b.n	8005088 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8004f9e:	4a3f      	ldr	r2, [pc, #252]	; (800509c <OSPIM_GetConfig+0x16c>)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4053      	eors	r3, r2
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d103      	bne.n	8004fca <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4053      	eors	r3, r2
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d103      	bne.n	8004fea <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4053      	eors	r3, r2
 8004ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d018      	beq.n	8005046 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4053      	eors	r3, r2
 800501a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d111      	bne.n	8005046 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3301      	adds	r3, #1
 8005030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	60da      	str	r2, [r3, #12]
 8005038:	e005      	b.n	8005046 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3301      	adds	r3, #1
 800503e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d018      	beq.n	8005082 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4053      	eors	r3, r2
 8005056:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d111      	bne.n	8005082 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3301      	adds	r3, #1
 800506c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	611a      	str	r2, [r3, #16]
 8005074:	e005      	b.n	8005082 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3301      	adds	r3, #1
 800507a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3301      	adds	r3, #1
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d987      	bls.n	8004f9e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800508e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005090:	4618      	mov	r0, r3
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	5200b400 	.word	0x5200b400
 80050a0:	04040222 	.word	0x04040222

080050a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e0fe      	b.n	80052b4 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f00a f80e 	bl	800f0ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2203      	movs	r2, #3
 80050d4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f006 fbfa 	bl	800b8d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	7c1a      	ldrb	r2, [r3, #16]
 80050ea:	f88d 2000 	strb.w	r2, [sp]
 80050ee:	3304      	adds	r3, #4
 80050f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050f2:	f006 facb 	bl	800b68c <USB_CoreInit>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0d5      	b.n	80052b4 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2100      	movs	r1, #0
 800510e:	4618      	mov	r0, r3
 8005110:	f006 fbf2 	bl	800b8f8 <USB_SetCurrentMode>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e0c6      	b.n	80052b4 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005126:	2300      	movs	r3, #0
 8005128:	73fb      	strb	r3, [r7, #15]
 800512a:	e04a      	b.n	80051c2 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800512c:	7bfa      	ldrb	r2, [r7, #15]
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	3315      	adds	r3, #21
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005140:	7bfa      	ldrb	r2, [r7, #15]
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	3314      	adds	r3, #20
 8005150:	7bfa      	ldrb	r2, [r7, #15]
 8005152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005154:	7bfa      	ldrb	r2, [r7, #15]
 8005156:	7bfb      	ldrb	r3, [r7, #15]
 8005158:	b298      	uxth	r0, r3
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	4613      	mov	r3, r2
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	4413      	add	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	332e      	adds	r3, #46	; 0x2e
 8005168:	4602      	mov	r2, r0
 800516a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800516c:	7bfa      	ldrb	r2, [r7, #15]
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	4613      	mov	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	3318      	adds	r3, #24
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005180:	7bfa      	ldrb	r2, [r7, #15]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	331c      	adds	r3, #28
 8005190:	2200      	movs	r2, #0
 8005192:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005194:	7bfa      	ldrb	r2, [r7, #15]
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	3320      	adds	r3, #32
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051a8:	7bfa      	ldrb	r2, [r7, #15]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	3324      	adds	r3, #36	; 0x24
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	3301      	adds	r3, #1
 80051c0:	73fb      	strb	r3, [r7, #15]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	791b      	ldrb	r3, [r3, #4]
 80051c6:	7bfa      	ldrb	r2, [r7, #15]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d3af      	bcc.n	800512c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051cc:	2300      	movs	r3, #0
 80051ce:	73fb      	strb	r3, [r7, #15]
 80051d0:	e044      	b.n	800525c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051d2:	7bfa      	ldrb	r2, [r7, #15]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	f203 2355 	addw	r3, r3, #597	; 0x255
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80051e8:	7bfa      	ldrb	r2, [r7, #15]
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80051fa:	7bfa      	ldrb	r2, [r7, #15]
 80051fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051fe:	7bfa      	ldrb	r2, [r7, #15]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005214:	7bfa      	ldrb	r2, [r7, #15]
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800522a:	7bfa      	ldrb	r2, [r7, #15]
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	440b      	add	r3, r1
 8005238:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005240:	7bfa      	ldrb	r2, [r7, #15]
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	3301      	adds	r3, #1
 800525a:	73fb      	strb	r3, [r7, #15]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	791b      	ldrb	r3, [r3, #4]
 8005260:	7bfa      	ldrb	r2, [r7, #15]
 8005262:	429a      	cmp	r2, r3
 8005264:	d3b5      	bcc.n	80051d2 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	7c1a      	ldrb	r2, [r3, #16]
 800526e:	f88d 2000 	strb.w	r2, [sp]
 8005272:	3304      	adds	r3, #4
 8005274:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005276:	f006 fb8b 	bl	800b990 <USB_DevInit>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e013      	b.n	80052b4 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	7b1b      	ldrb	r3, [r3, #12]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d102      	bne.n	80052a8 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f001 f96c 	bl	8006580 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f007 fbca 	bl	800ca46 <USB_DevDisconnect>

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_PCD_Start+0x1c>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e022      	b.n	800531e <HAL_PCD_Start+0x62>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d009      	beq.n	8005300 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d105      	bne.n	8005300 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f006 fad5 	bl	800b8b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f007 fb78 	bl	800ca04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005326:	b590      	push	{r4, r7, lr}
 8005328:	b08d      	sub	sp, #52	; 0x34
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4618      	mov	r0, r3
 800533e:	f007 fc36 	bl	800cbae <USB_GetMode>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	f040 84b9 	bne.w	8005cbc <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4618      	mov	r0, r3
 8005350:	f007 fb9a 	bl	800ca88 <USB_ReadInterrupts>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 84af 	beq.w	8005cba <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	0a1b      	lsrs	r3, r3, #8
 8005366:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f007 fb87 	bl	800ca88 <USB_ReadInterrupts>
 800537a:	4603      	mov	r3, r0
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b02      	cmp	r3, #2
 8005382:	d107      	bne.n	8005394 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695a      	ldr	r2, [r3, #20]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f002 0202 	and.w	r2, r2, #2
 8005392:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f007 fb75 	bl	800ca88 <USB_ReadInterrupts>
 800539e:	4603      	mov	r3, r0
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b10      	cmp	r3, #16
 80053a6:	d161      	bne.n	800546c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0210 	bic.w	r2, r2, #16
 80053b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	f003 020f 	and.w	r2, r3, #15
 80053c4:	4613      	mov	r3, r2
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	4413      	add	r3, r2
 80053d4:	3304      	adds	r3, #4
 80053d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	0c5b      	lsrs	r3, r3, #17
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d124      	bne.n	800542e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d035      	beq.n	800545c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	091b      	lsrs	r3, r3, #4
 80053f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80053fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053fe:	b29b      	uxth	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	6a38      	ldr	r0, [r7, #32]
 8005404:	f007 f9ac 	bl	800c760 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	091b      	lsrs	r3, r3, #4
 8005410:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005414:	441a      	add	r2, r3
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	695a      	ldr	r2, [r3, #20]
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	091b      	lsrs	r3, r3, #4
 8005422:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005426:	441a      	add	r2, r3
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	615a      	str	r2, [r3, #20]
 800542c:	e016      	b.n	800545c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	0c5b      	lsrs	r3, r3, #17
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	2b06      	cmp	r3, #6
 8005438:	d110      	bne.n	800545c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005440:	2208      	movs	r2, #8
 8005442:	4619      	mov	r1, r3
 8005444:	6a38      	ldr	r0, [r7, #32]
 8005446:	f007 f98b 	bl	800c760 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	695a      	ldr	r2, [r3, #20]
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	091b      	lsrs	r3, r3, #4
 8005452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005456:	441a      	add	r2, r3
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0210 	orr.w	r2, r2, #16
 800546a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4618      	mov	r0, r3
 8005472:	f007 fb09 	bl	800ca88 <USB_ReadInterrupts>
 8005476:	4603      	mov	r3, r0
 8005478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800547c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005480:	f040 80a7 	bne.w	80055d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f007 fb0e 	bl	800caae <USB_ReadDevAllOutEpInterrupt>
 8005492:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005494:	e099      	b.n	80055ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 808e 	beq.w	80055be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	4611      	mov	r1, r2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f007 fb32 	bl	800cb16 <USB_ReadDevOutEPInterrupt>
 80054b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00c      	beq.n	80054d8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ca:	461a      	mov	r2, r3
 80054cc:	2301      	movs	r3, #1
 80054ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80054d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fece 	bl	8006274 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00c      	beq.n	80054fc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ee:	461a      	mov	r2, r3
 80054f0:	2308      	movs	r3, #8
 80054f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80054f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 ffa4 	bl	8006444 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b00      	cmp	r3, #0
 8005504:	d008      	beq.n	8005518 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005512:	461a      	mov	r2, r3
 8005514:	2310      	movs	r3, #16
 8005516:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d030      	beq.n	8005584 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552a:	2b80      	cmp	r3, #128	; 0x80
 800552c:	d109      	bne.n	8005542 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800553c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005540:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005544:	4613      	mov	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	4413      	add	r3, r2
 8005554:	3304      	adds	r3, #4
 8005556:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	78db      	ldrb	r3, [r3, #3]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d108      	bne.n	8005572 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2200      	movs	r2, #0
 8005564:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	b2db      	uxtb	r3, r3
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f009 feb5 	bl	800f2dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557e:	461a      	mov	r2, r3
 8005580:	2302      	movs	r3, #2
 8005582:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559a:	461a      	mov	r2, r3
 800559c:	2320      	movs	r3, #32
 800559e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d009      	beq.n	80055be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b6:	461a      	mov	r2, r3
 80055b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	3301      	adds	r3, #1
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f47f af62 	bne.w	8005496 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f007 fa56 	bl	800ca88 <USB_ReadInterrupts>
 80055dc:	4603      	mov	r3, r0
 80055de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055e6:	f040 80db 	bne.w	80057a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f007 fa77 	bl	800cae2 <USB_ReadDevAllInEpInterrupt>
 80055f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80055fa:	e0cd      	b.n	8005798 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 80c2 	beq.w	800578c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	4611      	mov	r1, r2
 8005612:	4618      	mov	r0, r3
 8005614:	f007 fa9d 	bl	800cb52 <USB_ReadDevInEPInterrupt>
 8005618:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d057      	beq.n	80056d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	2201      	movs	r2, #1
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	43db      	mvns	r3, r3
 800563e:	69f9      	ldr	r1, [r7, #28]
 8005640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005644:	4013      	ands	r3, r2
 8005646:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005654:	461a      	mov	r2, r3
 8005656:	2301      	movs	r3, #1
 8005658:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	799b      	ldrb	r3, [r3, #6]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d132      	bne.n	80056c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005666:	4613      	mov	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	3320      	adds	r3, #32
 8005672:	6819      	ldr	r1, [r3, #0]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005678:	4613      	mov	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	4413      	add	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4403      	add	r3, r0
 8005682:	331c      	adds	r3, #28
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4419      	add	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800568c:	4613      	mov	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4403      	add	r3, r0
 8005696:	3320      	adds	r3, #32
 8005698:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	2b00      	cmp	r3, #0
 800569e:	d113      	bne.n	80056c8 <HAL_PCD_IRQHandler+0x3a2>
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a4:	4613      	mov	r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	3324      	adds	r3, #36	; 0x24
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d108      	bne.n	80056c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80056c0:	461a      	mov	r2, r3
 80056c2:	2101      	movs	r1, #1
 80056c4:	f007 faa6 	bl	800cc14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f009 fd7f 	bl	800f1d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d008      	beq.n	80056f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ea:	461a      	mov	r2, r3
 80056ec:	2308      	movs	r3, #8
 80056ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f003 0310 	and.w	r3, r3, #16
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d008      	beq.n	800570c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005706:	461a      	mov	r2, r3
 8005708:	2310      	movs	r3, #16
 800570a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d008      	beq.n	8005728 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005722:	461a      	mov	r2, r3
 8005724:	2340      	movs	r3, #64	; 0x40
 8005726:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d023      	beq.n	800577a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005734:	6a38      	ldr	r0, [r7, #32]
 8005736:	f006 fa89 	bl	800bc4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800573a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573c:	4613      	mov	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	3310      	adds	r3, #16
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	4413      	add	r3, r2
 800574a:	3304      	adds	r3, #4
 800574c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	78db      	ldrb	r3, [r3, #3]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d108      	bne.n	8005768 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2200      	movs	r2, #0
 800575a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	b2db      	uxtb	r3, r3
 8005760:	4619      	mov	r1, r3
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f009 fdcc 	bl	800f300 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005774:	461a      	mov	r2, r3
 8005776:	2302      	movs	r3, #2
 8005778:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fce8 	bl	800615c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	3301      	adds	r3, #1
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	2b00      	cmp	r3, #0
 800579c:	f47f af2e 	bne.w	80055fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f007 f96f 	bl	800ca88 <USB_ReadInterrupts>
 80057aa:	4603      	mov	r3, r0
 80057ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057b4:	d122      	bne.n	80057fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057c4:	f023 0301 	bic.w	r3, r3, #1
 80057c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d108      	bne.n	80057e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80057dc:	2100      	movs	r1, #0
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fef2 	bl	80065c8 <HAL_PCDEx_LPM_Callback>
 80057e4:	e002      	b.n	80057ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f009 fd6a 	bl	800f2c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695a      	ldr	r2, [r3, #20]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80057fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f007 f941 	bl	800ca88 <USB_ReadInterrupts>
 8005806:	4603      	mov	r3, r0
 8005808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800580c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005810:	d112      	bne.n	8005838 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b01      	cmp	r3, #1
 8005820:	d102      	bne.n	8005828 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f009 fd26 	bl	800f274 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695a      	ldr	r2, [r3, #20]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005836:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4618      	mov	r0, r3
 800583e:	f007 f923 	bl	800ca88 <USB_ReadInterrupts>
 8005842:	4603      	mov	r3, r0
 8005844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005848:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800584c:	d121      	bne.n	8005892 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695a      	ldr	r2, [r3, #20]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800585c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8005864:	2b00      	cmp	r3, #0
 8005866:	d111      	bne.n	800588c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	089b      	lsrs	r3, r3, #2
 8005878:	f003 020f 	and.w	r2, r3, #15
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005882:	2101      	movs	r1, #1
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fe9f 	bl	80065c8 <HAL_PCDEx_LPM_Callback>
 800588a:	e002      	b.n	8005892 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f009 fcf1 	bl	800f274 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	f007 f8f6 	bl	800ca88 <USB_ReadInterrupts>
 800589c:	4603      	mov	r3, r0
 800589e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a6:	f040 80b7 	bne.w	8005a18 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b8:	f023 0301 	bic.w	r3, r3, #1
 80058bc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2110      	movs	r1, #16
 80058c4:	4618      	mov	r0, r3
 80058c6:	f006 f9c1 	bl	800bc4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058ca:	2300      	movs	r3, #0
 80058cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ce:	e046      	b.n	800595e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	461a      	mov	r2, r3
 80058de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058e2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005902:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005910:	461a      	mov	r2, r3
 8005912:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005916:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	440a      	add	r2, r1
 800592e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005936:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	440a      	add	r2, r1
 800594e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005952:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005956:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	3301      	adds	r3, #1
 800595c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	791b      	ldrb	r3, [r3, #4]
 8005962:	461a      	mov	r2, r3
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	4293      	cmp	r3, r2
 8005968:	d3b2      	bcc.n	80058d0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005978:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800597c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	7bdb      	ldrb	r3, [r3, #15]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d016      	beq.n	80059b4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005996:	f043 030b 	orr.w	r3, r3, #11
 800599a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ac:	f043 030b 	orr.w	r3, r3, #11
 80059b0:	6453      	str	r3, [r2, #68]	; 0x44
 80059b2:	e015      	b.n	80059e0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c2:	4619      	mov	r1, r3
 80059c4:	f242 032b 	movw	r3, #8235	; 0x202b
 80059c8:	4313      	orrs	r3, r2
 80059ca:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059da:	f043 030b 	orr.w	r3, r3, #11
 80059de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6818      	ldr	r0, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a02:	461a      	mov	r2, r3
 8005a04:	f007 f906 	bl	800cc14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f007 f833 	bl	800ca88 <USB_ReadInterrupts>
 8005a22:	4603      	mov	r3, r0
 8005a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a2c:	d123      	bne.n	8005a76 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f007 f8ca 	bl	800cbcc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f006 f97e 	bl	800bd3e <USB_GetDevSpeed>
 8005a42:	4603      	mov	r3, r0
 8005a44:	461a      	mov	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681c      	ldr	r4, [r3, #0]
 8005a4e:	f001 fd1b 	bl	8007488 <HAL_RCC_GetHCLKFreq>
 8005a52:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f005 fe88 	bl	800b770 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f009 fbde 	bl	800f222 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695a      	ldr	r2, [r3, #20]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f007 f804 	bl	800ca88 <USB_ReadInterrupts>
 8005a80:	4603      	mov	r3, r0
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b08      	cmp	r3, #8
 8005a88:	d10a      	bne.n	8005aa0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f009 fbbb 	bl	800f206 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695a      	ldr	r2, [r3, #20]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f002 0208 	and.w	r2, r2, #8
 8005a9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f006 ffef 	bl	800ca88 <USB_ReadInterrupts>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab0:	2b80      	cmp	r3, #128	; 0x80
 8005ab2:	d123      	bne.n	8005afc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac4:	e014      	b.n	8005af0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aca:	4613      	mov	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	f203 2357 	addw	r3, r3, #599	; 0x257
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d105      	bne.n	8005aea <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fb08 	bl	80060fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	3301      	adds	r3, #1
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	791b      	ldrb	r3, [r3, #4]
 8005af4:	461a      	mov	r2, r3
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d3e4      	bcc.n	8005ac6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f006 ffc1 	bl	800ca88 <USB_ReadInterrupts>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b10:	d13c      	bne.n	8005b8c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b12:	2301      	movs	r3, #1
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
 8005b16:	e02b      	b.n	8005b70 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	3318      	adds	r3, #24
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d115      	bne.n	8005b6a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005b3e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	da12      	bge.n	8005b6a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b48:	4613      	mov	r3, r2
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	3317      	adds	r3, #23
 8005b54:	2201      	movs	r2, #1
 8005b56:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fac8 	bl	80060fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	791b      	ldrb	r3, [r3, #4]
 8005b74:	461a      	mov	r2, r3
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d3cd      	bcc.n	8005b18 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695a      	ldr	r2, [r3, #20]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f006 ff79 	bl	800ca88 <USB_ReadInterrupts>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ba0:	d156      	bne.n	8005c50 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba6:	e045      	b.n	8005c34 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bb8:	6879      	ldr	r1, [r7, #4]
 8005bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d12e      	bne.n	8005c2e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005bd0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	da2b      	bge.n	8005c2e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8005be2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d121      	bne.n	8005c2e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bee:	4613      	mov	r3, r2
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	440b      	add	r3, r1
 8005bf8:	f203 2357 	addw	r3, r3, #599	; 0x257
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c2a:	6053      	str	r3, [r2, #4]
            break;
 8005c2c:	e008      	b.n	8005c40 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	3301      	adds	r3, #1
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	791b      	ldrb	r3, [r3, #4]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d3b3      	bcc.n	8005ba8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695a      	ldr	r2, [r3, #20]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f006 ff17 	bl	800ca88 <USB_ReadInterrupts>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c64:	d10a      	bne.n	8005c7c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f009 fb5c 	bl	800f324 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f006 ff01 	bl	800ca88 <USB_ReadInterrupts>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d115      	bne.n	8005cbc <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f009 fb4c 	bl	800f340 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6859      	ldr	r1, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
 8005cb8:	e000      	b.n	8005cbc <HAL_PCD_IRQHandler+0x996>
      return;
 8005cba:	bf00      	nop
    }
  }
}
 8005cbc:	3734      	adds	r7, #52	; 0x34
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd90      	pop	{r4, r7, pc}

08005cc2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_PCD_SetAddress+0x1a>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e012      	b.n	8005d02 <HAL_PCD_SetAddress+0x40>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	78fa      	ldrb	r2, [r7, #3]
 8005ce8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	78fa      	ldrb	r2, [r7, #3]
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f006 fe60 	bl	800c9b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	4608      	mov	r0, r1
 8005d14:	4611      	mov	r1, r2
 8005d16:	461a      	mov	r2, r3
 8005d18:	4603      	mov	r3, r0
 8005d1a:	70fb      	strb	r3, [r7, #3]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	803b      	strh	r3, [r7, #0]
 8005d20:	4613      	mov	r3, r2
 8005d22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	da0f      	bge.n	8005d50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	f003 020f 	and.w	r2, r3, #15
 8005d36:	4613      	mov	r3, r2
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	3310      	adds	r3, #16
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	4413      	add	r3, r2
 8005d44:	3304      	adds	r3, #4
 8005d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	705a      	strb	r2, [r3, #1]
 8005d4e:	e00f      	b.n	8005d70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	f003 020f 	and.w	r2, r3, #15
 8005d56:	4613      	mov	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	4413      	add	r3, r2
 8005d66:	3304      	adds	r3, #4
 8005d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	f003 030f 	and.w	r3, r3, #15
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005d7c:	883a      	ldrh	r2, [r7, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	78ba      	ldrb	r2, [r7, #2]
 8005d86:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d004      	beq.n	8005d9a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d9a:	78bb      	ldrb	r3, [r7, #2]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d102      	bne.n	8005da6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_PCD_EP_Open+0xaa>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e00e      	b.n	8005dd2 <HAL_PCD_EP_Open+0xc8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68f9      	ldr	r1, [r7, #12]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f005 ffe0 	bl	800bd88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8005dd0:	7afb      	ldrb	r3, [r7, #11]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	da0f      	bge.n	8005e0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	f003 020f 	and.w	r2, r3, #15
 8005df4:	4613      	mov	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	3310      	adds	r3, #16
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4413      	add	r3, r2
 8005e02:	3304      	adds	r3, #4
 8005e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	705a      	strb	r2, [r3, #1]
 8005e0c:	e00f      	b.n	8005e2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	f003 020f 	and.w	r2, r3, #15
 8005e14:	4613      	mov	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4413      	add	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	4413      	add	r3, r2
 8005e24:	3304      	adds	r3, #4
 8005e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_PCD_EP_Close+0x6e>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e00e      	b.n	8005e66 <HAL_PCD_EP_Close+0x8c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68f9      	ldr	r1, [r7, #12]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f006 f81e 	bl	800be98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b086      	sub	sp, #24
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e7e:	7afb      	ldrb	r3, [r7, #11]
 8005e80:	f003 020f 	and.w	r2, r3, #15
 8005e84:	4613      	mov	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	4413      	add	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	3304      	adds	r3, #4
 8005e96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2200      	movs	r2, #0
 8005eae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eb0:	7afb      	ldrb	r3, [r7, #11]
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	799b      	ldrb	r3, [r3, #6]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d102      	bne.n	8005eca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	799b      	ldrb	r3, [r3, #6]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	6979      	ldr	r1, [r7, #20]
 8005ed6:	f006 f8bb 	bl	800c050 <USB_EPStartXfer>

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	f003 020f 	and.w	r2, r3, #15
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8005f06:	681b      	ldr	r3, [r3, #0]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	460b      	mov	r3, r1
 8005f22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f24:	7afb      	ldrb	r3, [r7, #11]
 8005f26:	f003 020f 	and.w	r2, r3, #15
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	3310      	adds	r3, #16
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	3304      	adds	r3, #4
 8005f3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2201      	movs	r2, #1
 8005f52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f54:	7afb      	ldrb	r3, [r7, #11]
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	799b      	ldrb	r3, [r3, #6]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d102      	bne.n	8005f6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	799b      	ldrb	r3, [r3, #6]
 8005f76:	461a      	mov	r2, r3
 8005f78:	6979      	ldr	r1, [r7, #20]
 8005f7a:	f006 f869 	bl	800c050 <USB_EPStartXfer>

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	7912      	ldrb	r2, [r2, #4]
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e04f      	b.n	8006046 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	da0f      	bge.n	8005fce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fae:	78fb      	ldrb	r3, [r7, #3]
 8005fb0:	f003 020f 	and.w	r2, r3, #15
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	4413      	add	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	3310      	adds	r3, #16
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	705a      	strb	r2, [r3, #1]
 8005fcc:	e00d      	b.n	8005fea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005fce:	78fa      	ldrb	r2, [r7, #3]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	4413      	add	r3, r2
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006002:	2b01      	cmp	r3, #1
 8006004:	d101      	bne.n	800600a <HAL_PCD_EP_SetStall+0x82>
 8006006:	2302      	movs	r3, #2
 8006008:	e01d      	b.n	8006046 <HAL_PCD_EP_SetStall+0xbe>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	4618      	mov	r0, r3
 800601a:	f006 fbf9 	bl	800c810 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800601e:	78fb      	ldrb	r3, [r7, #3]
 8006020:	f003 030f 	and.w	r3, r3, #15
 8006024:	2b00      	cmp	r3, #0
 8006026:	d109      	bne.n	800603c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6818      	ldr	r0, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	7999      	ldrb	r1, [r3, #6]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006036:	461a      	mov	r2, r3
 8006038:	f006 fdec 	bl	800cc14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	460b      	mov	r3, r1
 8006058:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800605a:	78fb      	ldrb	r3, [r7, #3]
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	7912      	ldrb	r2, [r2, #4]
 8006064:	4293      	cmp	r3, r2
 8006066:	d901      	bls.n	800606c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e042      	b.n	80060f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800606c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006070:	2b00      	cmp	r3, #0
 8006072:	da0f      	bge.n	8006094 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	f003 020f 	and.w	r2, r3, #15
 800607a:	4613      	mov	r3, r2
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	4413      	add	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	3310      	adds	r3, #16
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	4413      	add	r3, r2
 8006088:	3304      	adds	r3, #4
 800608a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	705a      	strb	r2, [r3, #1]
 8006092:	e00f      	b.n	80060b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	f003 020f 	and.w	r2, r3, #15
 800609a:	4613      	mov	r3, r2
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	4413      	add	r3, r2
 80060aa:	3304      	adds	r3, #4
 80060ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_PCD_EP_ClrStall+0x86>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e00e      	b.n	80060f2 <HAL_PCD_EP_ClrStall+0xa4>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68f9      	ldr	r1, [r7, #12]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f006 fc02 	bl	800c8ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	460b      	mov	r3, r1
 8006104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006106:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800610a:	2b00      	cmp	r3, #0
 800610c:	da0c      	bge.n	8006128 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	f003 020f 	and.w	r2, r3, #15
 8006114:	4613      	mov	r3, r2
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	4413      	add	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	3310      	adds	r3, #16
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	4413      	add	r3, r2
 8006122:	3304      	adds	r3, #4
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	e00c      	b.n	8006142 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	f003 020f 	and.w	r2, r3, #15
 800612e:	4613      	mov	r3, r2
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	4413      	add	r3, r2
 800613e:	3304      	adds	r3, #4
 8006140:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68f9      	ldr	r1, [r7, #12]
 8006148:	4618      	mov	r0, r3
 800614a:	f006 fa21 	bl	800c590 <USB_EPStopXfer>
 800614e:	4603      	mov	r3, r0
 8006150:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006152:	7afb      	ldrb	r3, [r7, #11]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08a      	sub	sp, #40	; 0x28
 8006160:	af02      	add	r7, sp, #8
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	4613      	mov	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	3310      	adds	r3, #16
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	4413      	add	r3, r2
 8006180:	3304      	adds	r3, #4
 8006182:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	695a      	ldr	r2, [r3, #20]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	429a      	cmp	r2, r3
 800618e:	d901      	bls.n	8006194 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e06b      	b.n	800626c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d902      	bls.n	80061b0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	3303      	adds	r3, #3
 80061b4:	089b      	lsrs	r3, r3, #2
 80061b6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061b8:	e02a      	b.n	8006210 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d902      	bls.n	80061d6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	3303      	adds	r3, #3
 80061da:	089b      	lsrs	r3, r3, #2
 80061dc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	68d9      	ldr	r1, [r3, #12]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	4603      	mov	r3, r0
 80061f2:	6978      	ldr	r0, [r7, #20]
 80061f4:	f006 fa76 	bl	800c6e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	441a      	add	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	695a      	ldr	r2, [r3, #20]
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	441a      	add	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	429a      	cmp	r2, r3
 8006224:	d809      	bhi.n	800623a <PCD_WriteEmptyTxFifo+0xde>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	695a      	ldr	r2, [r3, #20]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800622e:	429a      	cmp	r2, r3
 8006230:	d203      	bcs.n	800623a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1bf      	bne.n	80061ba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	691a      	ldr	r2, [r3, #16]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	429a      	cmp	r2, r3
 8006244:	d811      	bhi.n	800626a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	f003 030f 	and.w	r3, r3, #15
 800624c:	2201      	movs	r2, #1
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	43db      	mvns	r3, r3
 8006260:	6939      	ldr	r1, [r7, #16]
 8006262:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006266:	4013      	ands	r3, r2
 8006268:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3720      	adds	r7, #32
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	333c      	adds	r3, #60	; 0x3c
 800628c:	3304      	adds	r3, #4
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	799b      	ldrb	r3, [r3, #6]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d17b      	bne.n	80063a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d015      	beq.n	80062e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	4a61      	ldr	r2, [pc, #388]	; (800643c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	f240 80b9 	bls.w	8006430 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80b3 	beq.w	8006430 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d6:	461a      	mov	r2, r3
 80062d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062dc:	6093      	str	r3, [r2, #8]
 80062de:	e0a7      	b.n	8006430 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d009      	beq.n	80062fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f6:	461a      	mov	r2, r3
 80062f8:	2320      	movs	r3, #32
 80062fa:	6093      	str	r3, [r2, #8]
 80062fc:	e098      	b.n	8006430 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006304:	2b00      	cmp	r3, #0
 8006306:	f040 8093 	bne.w	8006430 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	4a4b      	ldr	r2, [pc, #300]	; (800643c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d90f      	bls.n	8006332 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006328:	461a      	mov	r2, r3
 800632a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800632e:	6093      	str	r3, [r2, #8]
 8006330:	e07e      	b.n	8006430 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	4613      	mov	r3, r2
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	4413      	add	r3, r2
 8006344:	3304      	adds	r3, #4
 8006346:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a1a      	ldr	r2, [r3, #32]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	0159      	lsls	r1, r3, #5
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	440b      	add	r3, r1
 8006354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800635e:	1ad2      	subs	r2, r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d114      	bne.n	8006394 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d109      	bne.n	8006386 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800637c:	461a      	mov	r2, r3
 800637e:	2101      	movs	r1, #1
 8006380:	f006 fc48 	bl	800cc14 <USB_EP0_OutStart>
 8006384:	e006      	b.n	8006394 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	441a      	add	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	b2db      	uxtb	r3, r3
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f008 fefe 	bl	800f19c <HAL_PCD_DataOutStageCallback>
 80063a0:	e046      	b.n	8006430 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	4a26      	ldr	r2, [pc, #152]	; (8006440 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d124      	bne.n	80063f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00a      	beq.n	80063ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	461a      	mov	r2, r3
 80063c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063c6:	6093      	str	r3, [r2, #8]
 80063c8:	e032      	b.n	8006430 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d008      	beq.n	80063e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e0:	461a      	mov	r2, r3
 80063e2:	2320      	movs	r3, #32
 80063e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f008 fed5 	bl	800f19c <HAL_PCD_DataOutStageCallback>
 80063f2:	e01d      	b.n	8006430 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d114      	bne.n	8006424 <PCD_EP_OutXfrComplete_int+0x1b0>
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	4613      	mov	r3, r2
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	440b      	add	r3, r1
 8006408:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d108      	bne.n	8006424 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800641c:	461a      	mov	r2, r3
 800641e:	2100      	movs	r1, #0
 8006420:	f006 fbf8 	bl	800cc14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f008 feb6 	bl	800f19c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3720      	adds	r7, #32
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	4f54300a 	.word	0x4f54300a
 8006440:	4f54310a 	.word	0x4f54310a

08006444 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	333c      	adds	r3, #60	; 0x3c
 800645c:	3304      	adds	r3, #4
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4a15      	ldr	r2, [pc, #84]	; (80064cc <PCD_EP_OutSetupPacket_int+0x88>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d90e      	bls.n	8006498 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006480:	2b00      	cmp	r3, #0
 8006482:	d009      	beq.n	8006498 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006490:	461a      	mov	r2, r3
 8006492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006496:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f008 fe6d 	bl	800f178 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4a0a      	ldr	r2, [pc, #40]	; (80064cc <PCD_EP_OutSetupPacket_int+0x88>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d90c      	bls.n	80064c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	799b      	ldrb	r3, [r3, #6]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d108      	bne.n	80064c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80064b8:	461a      	mov	r2, r3
 80064ba:	2101      	movs	r1, #1
 80064bc:	f006 fbaa 	bl	800cc14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3718      	adds	r7, #24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	4f54300a 	.word	0x4f54300a

080064d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	70fb      	strb	r3, [r7, #3]
 80064dc:	4613      	mov	r3, r2
 80064de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d107      	bne.n	80064fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80064ee:	883b      	ldrh	r3, [r7, #0]
 80064f0:	0419      	lsls	r1, r3, #16
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	629a      	str	r2, [r3, #40]	; 0x28
 80064fc:	e028      	b.n	8006550 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	0c1b      	lsrs	r3, r3, #16
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	4413      	add	r3, r2
 800650a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800650c:	2300      	movs	r3, #0
 800650e:	73fb      	strb	r3, [r7, #15]
 8006510:	e00d      	b.n	800652e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	3340      	adds	r3, #64	; 0x40
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	0c1b      	lsrs	r3, r3, #16
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	4413      	add	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	3301      	adds	r3, #1
 800652c:	73fb      	strb	r3, [r7, #15]
 800652e:	7bfa      	ldrb	r2, [r7, #15]
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	3b01      	subs	r3, #1
 8006534:	429a      	cmp	r2, r3
 8006536:	d3ec      	bcc.n	8006512 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006538:	883b      	ldrh	r3, [r7, #0]
 800653a:	0418      	lsls	r0, r3, #16
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6819      	ldr	r1, [r3, #0]
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	3b01      	subs	r3, #1
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	4302      	orrs	r2, r0
 8006548:	3340      	adds	r3, #64	; 0x40
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	887a      	ldrh	r2, [r7, #2]
 8006570:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065ae:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	10000003 	.word	0x10000003

080065c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80065e8:	4b19      	ldr	r3, [pc, #100]	; (8006650 <HAL_PWREx_ConfigSupply+0x70>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f003 0304 	and.w	r3, r3, #4
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d00a      	beq.n	800660a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80065f4:	4b16      	ldr	r3, [pc, #88]	; (8006650 <HAL_PWREx_ConfigSupply+0x70>)
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d001      	beq.n	8006606 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e01f      	b.n	8006646 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	e01d      	b.n	8006646 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800660a:	4b11      	ldr	r3, [pc, #68]	; (8006650 <HAL_PWREx_ConfigSupply+0x70>)
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f023 0207 	bic.w	r2, r3, #7
 8006612:	490f      	ldr	r1, [pc, #60]	; (8006650 <HAL_PWREx_ConfigSupply+0x70>)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4313      	orrs	r3, r2
 8006618:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800661a:	f7fb fabb 	bl	8001b94 <HAL_GetTick>
 800661e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006620:	e009      	b.n	8006636 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006622:	f7fb fab7 	bl	8001b94 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006630:	d901      	bls.n	8006636 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e007      	b.n	8006646 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006636:	4b06      	ldr	r3, [pc, #24]	; (8006650 <HAL_PWREx_ConfigSupply+0x70>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800663e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006642:	d1ee      	bne.n	8006622 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	58024800 	.word	0x58024800

08006654 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006658:	4b05      	ldr	r3, [pc, #20]	; (8006670 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	4a04      	ldr	r2, [pc, #16]	; (8006670 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800665e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006662:	60d3      	str	r3, [r2, #12]
}
 8006664:	bf00      	nop
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	58024800 	.word	0x58024800

08006674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08c      	sub	sp, #48	; 0x30
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e3c8      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 8087 	beq.w	80067a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006694:	4b88      	ldr	r3, [pc, #544]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800669e:	4b86      	ldr	r3, [pc, #536]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 80066a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	2b10      	cmp	r3, #16
 80066a8:	d007      	beq.n	80066ba <HAL_RCC_OscConfig+0x46>
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	2b18      	cmp	r3, #24
 80066ae:	d110      	bne.n	80066d2 <HAL_RCC_OscConfig+0x5e>
 80066b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d10b      	bne.n	80066d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ba:	4b7f      	ldr	r3, [pc, #508]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d06c      	beq.n	80067a0 <HAL_RCC_OscConfig+0x12c>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d168      	bne.n	80067a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e3a2      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066da:	d106      	bne.n	80066ea <HAL_RCC_OscConfig+0x76>
 80066dc:	4b76      	ldr	r3, [pc, #472]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a75      	ldr	r2, [pc, #468]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 80066e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	e02e      	b.n	8006748 <HAL_RCC_OscConfig+0xd4>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10c      	bne.n	800670c <HAL_RCC_OscConfig+0x98>
 80066f2:	4b71      	ldr	r3, [pc, #452]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a70      	ldr	r2, [pc, #448]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 80066f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	4b6e      	ldr	r3, [pc, #440]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a6d      	ldr	r2, [pc, #436]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	e01d      	b.n	8006748 <HAL_RCC_OscConfig+0xd4>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006714:	d10c      	bne.n	8006730 <HAL_RCC_OscConfig+0xbc>
 8006716:	4b68      	ldr	r3, [pc, #416]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a67      	ldr	r2, [pc, #412]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 800671c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	4b65      	ldr	r3, [pc, #404]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a64      	ldr	r2, [pc, #400]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	e00b      	b.n	8006748 <HAL_RCC_OscConfig+0xd4>
 8006730:	4b61      	ldr	r3, [pc, #388]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a60      	ldr	r2, [pc, #384]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	4b5e      	ldr	r3, [pc, #376]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a5d      	ldr	r2, [pc, #372]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d013      	beq.n	8006778 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006750:	f7fb fa20 	bl	8001b94 <HAL_GetTick>
 8006754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006756:	e008      	b.n	800676a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006758:	f7fb fa1c 	bl	8001b94 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b64      	cmp	r3, #100	; 0x64
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e356      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800676a:	4b53      	ldr	r3, [pc, #332]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0f0      	beq.n	8006758 <HAL_RCC_OscConfig+0xe4>
 8006776:	e014      	b.n	80067a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006778:	f7fb fa0c 	bl	8001b94 <HAL_GetTick>
 800677c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006780:	f7fb fa08 	bl	8001b94 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b64      	cmp	r3, #100	; 0x64
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e342      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006792:	4b49      	ldr	r3, [pc, #292]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1f0      	bne.n	8006780 <HAL_RCC_OscConfig+0x10c>
 800679e:	e000      	b.n	80067a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 808c 	beq.w	80068c8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067b0:	4b41      	ldr	r3, [pc, #260]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067ba:	4b3f      	ldr	r3, [pc, #252]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 80067bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <HAL_RCC_OscConfig+0x162>
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	2b18      	cmp	r3, #24
 80067ca:	d137      	bne.n	800683c <HAL_RCC_OscConfig+0x1c8>
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d132      	bne.n	800683c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067d6:	4b38      	ldr	r3, [pc, #224]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <HAL_RCC_OscConfig+0x17a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e314      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80067ee:	4b32      	ldr	r3, [pc, #200]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f023 0219 	bic.w	r2, r3, #25
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	492f      	ldr	r1, [pc, #188]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006800:	f7fb f9c8 	bl	8001b94 <HAL_GetTick>
 8006804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006808:	f7fb f9c4 	bl	8001b94 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e2fe      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800681a:	4b27      	ldr	r3, [pc, #156]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0304 	and.w	r3, r3, #4
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0f0      	beq.n	8006808 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006826:	4b24      	ldr	r3, [pc, #144]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	061b      	lsls	r3, r3, #24
 8006834:	4920      	ldr	r1, [pc, #128]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006836:	4313      	orrs	r3, r2
 8006838:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800683a:	e045      	b.n	80068c8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d026      	beq.n	8006892 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006844:	4b1c      	ldr	r3, [pc, #112]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f023 0219 	bic.w	r2, r3, #25
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	4919      	ldr	r1, [pc, #100]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006852:	4313      	orrs	r3, r2
 8006854:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006856:	f7fb f99d 	bl	8001b94 <HAL_GetTick>
 800685a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800685e:	f7fb f999 	bl	8001b94 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e2d3      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006870:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0f0      	beq.n	800685e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800687c:	4b0e      	ldr	r3, [pc, #56]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	061b      	lsls	r3, r3, #24
 800688a:	490b      	ldr	r1, [pc, #44]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 800688c:	4313      	orrs	r3, r2
 800688e:	604b      	str	r3, [r1, #4]
 8006890:	e01a      	b.n	80068c8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a08      	ldr	r2, [pc, #32]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006898:	f023 0301 	bic.w	r3, r3, #1
 800689c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689e:	f7fb f979 	bl	8001b94 <HAL_GetTick>
 80068a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068a4:	e00a      	b.n	80068bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068a6:	f7fb f975 	bl	8001b94 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d903      	bls.n	80068bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e2af      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
 80068b8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068bc:	4b96      	ldr	r3, [pc, #600]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1ee      	bne.n	80068a6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0310 	and.w	r3, r3, #16
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d06a      	beq.n	80069aa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068d4:	4b90      	ldr	r3, [pc, #576]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068dc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068de:	4b8e      	ldr	r3, [pc, #568]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 80068e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	2b08      	cmp	r3, #8
 80068e8:	d007      	beq.n	80068fa <HAL_RCC_OscConfig+0x286>
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	2b18      	cmp	r3, #24
 80068ee:	d11b      	bne.n	8006928 <HAL_RCC_OscConfig+0x2b4>
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d116      	bne.n	8006928 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068fa:	4b87      	ldr	r3, [pc, #540]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d005      	beq.n	8006912 <HAL_RCC_OscConfig+0x29e>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	2b80      	cmp	r3, #128	; 0x80
 800690c:	d001      	beq.n	8006912 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e282      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006912:	4b81      	ldr	r3, [pc, #516]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	061b      	lsls	r3, r3, #24
 8006920:	497d      	ldr	r1, [pc, #500]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006922:	4313      	orrs	r3, r2
 8006924:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006926:	e040      	b.n	80069aa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d023      	beq.n	8006978 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006930:	4b79      	ldr	r3, [pc, #484]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a78      	ldr	r2, [pc, #480]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693c:	f7fb f92a 	bl	8001b94 <HAL_GetTick>
 8006940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006944:	f7fb f926 	bl	8001b94 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e260      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006956:	4b70      	ldr	r3, [pc, #448]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0f0      	beq.n	8006944 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006962:	4b6d      	ldr	r3, [pc, #436]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	061b      	lsls	r3, r3, #24
 8006970:	4969      	ldr	r1, [pc, #420]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006972:	4313      	orrs	r3, r2
 8006974:	60cb      	str	r3, [r1, #12]
 8006976:	e018      	b.n	80069aa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006978:	4b67      	ldr	r3, [pc, #412]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a66      	ldr	r2, [pc, #408]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 800697e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006984:	f7fb f906 	bl	8001b94 <HAL_GetTick>
 8006988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800698a:	e008      	b.n	800699e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800698c:	f7fb f902 	bl	8001b94 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e23c      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800699e:	4b5e      	ldr	r3, [pc, #376]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1f0      	bne.n	800698c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0308 	and.w	r3, r3, #8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d036      	beq.n	8006a24 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d019      	beq.n	80069f2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069be:	4b56      	ldr	r3, [pc, #344]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 80069c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c2:	4a55      	ldr	r2, [pc, #340]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 80069c4:	f043 0301 	orr.w	r3, r3, #1
 80069c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ca:	f7fb f8e3 	bl	8001b94 <HAL_GetTick>
 80069ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069d0:	e008      	b.n	80069e4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069d2:	f7fb f8df 	bl	8001b94 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d901      	bls.n	80069e4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e219      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069e4:	4b4c      	ldr	r3, [pc, #304]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 80069e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0f0      	beq.n	80069d2 <HAL_RCC_OscConfig+0x35e>
 80069f0:	e018      	b.n	8006a24 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069f2:	4b49      	ldr	r3, [pc, #292]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 80069f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f6:	4a48      	ldr	r2, [pc, #288]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 80069f8:	f023 0301 	bic.w	r3, r3, #1
 80069fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069fe:	f7fb f8c9 	bl	8001b94 <HAL_GetTick>
 8006a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a04:	e008      	b.n	8006a18 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a06:	f7fb f8c5 	bl	8001b94 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e1ff      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a18:	4b3f      	ldr	r3, [pc, #252]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1f0      	bne.n	8006a06 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0320 	and.w	r3, r3, #32
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d036      	beq.n	8006a9e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d019      	beq.n	8006a6c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a38:	4b37      	ldr	r3, [pc, #220]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a36      	ldr	r2, [pc, #216]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006a3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a44:	f7fb f8a6 	bl	8001b94 <HAL_GetTick>
 8006a48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a4c:	f7fb f8a2 	bl	8001b94 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e1dc      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a5e:	4b2e      	ldr	r3, [pc, #184]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d0f0      	beq.n	8006a4c <HAL_RCC_OscConfig+0x3d8>
 8006a6a:	e018      	b.n	8006a9e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a6c:	4b2a      	ldr	r3, [pc, #168]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a29      	ldr	r2, [pc, #164]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006a72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a78:	f7fb f88c 	bl	8001b94 <HAL_GetTick>
 8006a7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a80:	f7fb f888 	bl	8001b94 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e1c2      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a92:	4b21      	ldr	r3, [pc, #132]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f0      	bne.n	8006a80 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 8086 	beq.w	8006bb8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006aac:	4b1b      	ldr	r3, [pc, #108]	; (8006b1c <HAL_RCC_OscConfig+0x4a8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a1a      	ldr	r2, [pc, #104]	; (8006b1c <HAL_RCC_OscConfig+0x4a8>)
 8006ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ab8:	f7fb f86c 	bl	8001b94 <HAL_GetTick>
 8006abc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ac0:	f7fb f868 	bl	8001b94 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b64      	cmp	r3, #100	; 0x64
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e1a2      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ad2:	4b12      	ldr	r3, [pc, #72]	; (8006b1c <HAL_RCC_OscConfig+0x4a8>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0f0      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d106      	bne.n	8006af4 <HAL_RCC_OscConfig+0x480>
 8006ae6:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aea:	4a0b      	ldr	r2, [pc, #44]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006aec:	f043 0301 	orr.w	r3, r3, #1
 8006af0:	6713      	str	r3, [r2, #112]	; 0x70
 8006af2:	e032      	b.n	8006b5a <HAL_RCC_OscConfig+0x4e6>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d111      	bne.n	8006b20 <HAL_RCC_OscConfig+0x4ac>
 8006afc:	4b06      	ldr	r3, [pc, #24]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b00:	4a05      	ldr	r2, [pc, #20]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006b02:	f023 0301 	bic.w	r3, r3, #1
 8006b06:	6713      	str	r3, [r2, #112]	; 0x70
 8006b08:	4b03      	ldr	r3, [pc, #12]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0c:	4a02      	ldr	r2, [pc, #8]	; (8006b18 <HAL_RCC_OscConfig+0x4a4>)
 8006b0e:	f023 0304 	bic.w	r3, r3, #4
 8006b12:	6713      	str	r3, [r2, #112]	; 0x70
 8006b14:	e021      	b.n	8006b5a <HAL_RCC_OscConfig+0x4e6>
 8006b16:	bf00      	nop
 8006b18:	58024400 	.word	0x58024400
 8006b1c:	58024800 	.word	0x58024800
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2b05      	cmp	r3, #5
 8006b26:	d10c      	bne.n	8006b42 <HAL_RCC_OscConfig+0x4ce>
 8006b28:	4b83      	ldr	r3, [pc, #524]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2c:	4a82      	ldr	r2, [pc, #520]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006b2e:	f043 0304 	orr.w	r3, r3, #4
 8006b32:	6713      	str	r3, [r2, #112]	; 0x70
 8006b34:	4b80      	ldr	r3, [pc, #512]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b38:	4a7f      	ldr	r2, [pc, #508]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006b3a:	f043 0301 	orr.w	r3, r3, #1
 8006b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b40:	e00b      	b.n	8006b5a <HAL_RCC_OscConfig+0x4e6>
 8006b42:	4b7d      	ldr	r3, [pc, #500]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b46:	4a7c      	ldr	r2, [pc, #496]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006b48:	f023 0301 	bic.w	r3, r3, #1
 8006b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b4e:	4b7a      	ldr	r3, [pc, #488]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b52:	4a79      	ldr	r2, [pc, #484]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006b54:	f023 0304 	bic.w	r3, r3, #4
 8006b58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d015      	beq.n	8006b8e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b62:	f7fb f817 	bl	8001b94 <HAL_GetTick>
 8006b66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b68:	e00a      	b.n	8006b80 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b6a:	f7fb f813 	bl	8001b94 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e14b      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b80:	4b6d      	ldr	r3, [pc, #436]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0ee      	beq.n	8006b6a <HAL_RCC_OscConfig+0x4f6>
 8006b8c:	e014      	b.n	8006bb8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b8e:	f7fb f801 	bl	8001b94 <HAL_GetTick>
 8006b92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b94:	e00a      	b.n	8006bac <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b96:	f7fa fffd 	bl	8001b94 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d901      	bls.n	8006bac <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e135      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bac:	4b62      	ldr	r3, [pc, #392]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1ee      	bne.n	8006b96 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 812a 	beq.w	8006e16 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006bc2:	4b5d      	ldr	r3, [pc, #372]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bca:	2b18      	cmp	r3, #24
 8006bcc:	f000 80ba 	beq.w	8006d44 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	f040 8095 	bne.w	8006d04 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bda:	4b57      	ldr	r3, [pc, #348]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a56      	ldr	r2, [pc, #344]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be6:	f7fa ffd5 	bl	8001b94 <HAL_GetTick>
 8006bea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bec:	e008      	b.n	8006c00 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bee:	f7fa ffd1 	bl	8001b94 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e10b      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c00:	4b4d      	ldr	r3, [pc, #308]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1f0      	bne.n	8006bee <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c0c:	4b4a      	ldr	r3, [pc, #296]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c10:	4b4a      	ldr	r3, [pc, #296]	; (8006d3c <HAL_RCC_OscConfig+0x6c8>)
 8006c12:	4013      	ands	r3, r2
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006c1c:	0112      	lsls	r2, r2, #4
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	4945      	ldr	r1, [pc, #276]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	628b      	str	r3, [r1, #40]	; 0x28
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c34:	3b01      	subs	r3, #1
 8006c36:	025b      	lsls	r3, r3, #9
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	3b01      	subs	r3, #1
 8006c42:	041b      	lsls	r3, r3, #16
 8006c44:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	061b      	lsls	r3, r3, #24
 8006c52:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c56:	4938      	ldr	r1, [pc, #224]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006c5c:	4b36      	ldr	r3, [pc, #216]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	4a35      	ldr	r2, [pc, #212]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006c62:	f023 0301 	bic.w	r3, r3, #1
 8006c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c68:	4b33      	ldr	r3, [pc, #204]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c6c:	4b34      	ldr	r3, [pc, #208]	; (8006d40 <HAL_RCC_OscConfig+0x6cc>)
 8006c6e:	4013      	ands	r3, r2
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006c74:	00d2      	lsls	r2, r2, #3
 8006c76:	4930      	ldr	r1, [pc, #192]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006c7c:	4b2e      	ldr	r3, [pc, #184]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	f023 020c 	bic.w	r2, r3, #12
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	492b      	ldr	r1, [pc, #172]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c8e:	4b2a      	ldr	r3, [pc, #168]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c92:	f023 0202 	bic.w	r2, r3, #2
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9a:	4927      	ldr	r1, [pc, #156]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ca0:	4b25      	ldr	r3, [pc, #148]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	4a24      	ldr	r2, [pc, #144]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006caa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cac:	4b22      	ldr	r3, [pc, #136]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	4a21      	ldr	r2, [pc, #132]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006cb8:	4b1f      	ldr	r3, [pc, #124]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbc:	4a1e      	ldr	r2, [pc, #120]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006cbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006cc4:	4b1c      	ldr	r3, [pc, #112]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc8:	4a1b      	ldr	r2, [pc, #108]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006cca:	f043 0301 	orr.w	r3, r3, #1
 8006cce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cd0:	4b19      	ldr	r3, [pc, #100]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a18      	ldr	r2, [pc, #96]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cdc:	f7fa ff5a 	bl	8001b94 <HAL_GetTick>
 8006ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ce4:	f7fa ff56 	bl	8001b94 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e090      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cf6:	4b10      	ldr	r3, [pc, #64]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0f0      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x670>
 8006d02:	e088      	b.n	8006e16 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d04:	4b0c      	ldr	r3, [pc, #48]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a0b      	ldr	r2, [pc, #44]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d10:	f7fa ff40 	bl	8001b94 <HAL_GetTick>
 8006d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d18:	f7fa ff3c 	bl	8001b94 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e076      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d2a:	4b03      	ldr	r3, [pc, #12]	; (8006d38 <HAL_RCC_OscConfig+0x6c4>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1f0      	bne.n	8006d18 <HAL_RCC_OscConfig+0x6a4>
 8006d36:	e06e      	b.n	8006e16 <HAL_RCC_OscConfig+0x7a2>
 8006d38:	58024400 	.word	0x58024400
 8006d3c:	fffffc0c 	.word	0xfffffc0c
 8006d40:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d44:	4b36      	ldr	r3, [pc, #216]	; (8006e20 <HAL_RCC_OscConfig+0x7ac>)
 8006d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d4a:	4b35      	ldr	r3, [pc, #212]	; (8006e20 <HAL_RCC_OscConfig+0x7ac>)
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d031      	beq.n	8006dbc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f003 0203 	and.w	r2, r3, #3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d12a      	bne.n	8006dbc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	091b      	lsrs	r3, r3, #4
 8006d6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d122      	bne.n	8006dbc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d11a      	bne.n	8006dbc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	0a5b      	lsrs	r3, r3, #9
 8006d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d111      	bne.n	8006dbc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	0c1b      	lsrs	r3, r3, #16
 8006d9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d108      	bne.n	8006dbc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	0e1b      	lsrs	r3, r3, #24
 8006dae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d001      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e02b      	b.n	8006e18 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006dc0:	4b17      	ldr	r3, [pc, #92]	; (8006e20 <HAL_RCC_OscConfig+0x7ac>)
 8006dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc4:	08db      	lsrs	r3, r3, #3
 8006dc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d01f      	beq.n	8006e16 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006dd6:	4b12      	ldr	r3, [pc, #72]	; (8006e20 <HAL_RCC_OscConfig+0x7ac>)
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	4a11      	ldr	r2, [pc, #68]	; (8006e20 <HAL_RCC_OscConfig+0x7ac>)
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006de2:	f7fa fed7 	bl	8001b94 <HAL_GetTick>
 8006de6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006de8:	bf00      	nop
 8006dea:	f7fa fed3 	bl	8001b94 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d0f9      	beq.n	8006dea <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006df6:	4b0a      	ldr	r3, [pc, #40]	; (8006e20 <HAL_RCC_OscConfig+0x7ac>)
 8006df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dfa:	4b0a      	ldr	r3, [pc, #40]	; (8006e24 <HAL_RCC_OscConfig+0x7b0>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e02:	00d2      	lsls	r2, r2, #3
 8006e04:	4906      	ldr	r1, [pc, #24]	; (8006e20 <HAL_RCC_OscConfig+0x7ac>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006e0a:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <HAL_RCC_OscConfig+0x7ac>)
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	4a04      	ldr	r2, [pc, #16]	; (8006e20 <HAL_RCC_OscConfig+0x7ac>)
 8006e10:	f043 0301 	orr.w	r3, r3, #1
 8006e14:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3730      	adds	r7, #48	; 0x30
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	58024400 	.word	0x58024400
 8006e24:	ffff0007 	.word	0xffff0007

08006e28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e19c      	b.n	8007176 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e3c:	4b8a      	ldr	r3, [pc, #552]	; (8007068 <HAL_RCC_ClockConfig+0x240>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 030f 	and.w	r3, r3, #15
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d910      	bls.n	8006e6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e4a:	4b87      	ldr	r3, [pc, #540]	; (8007068 <HAL_RCC_ClockConfig+0x240>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f023 020f 	bic.w	r2, r3, #15
 8006e52:	4985      	ldr	r1, [pc, #532]	; (8007068 <HAL_RCC_ClockConfig+0x240>)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e5a:	4b83      	ldr	r3, [pc, #524]	; (8007068 <HAL_RCC_ClockConfig+0x240>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d001      	beq.n	8006e6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e184      	b.n	8007176 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d010      	beq.n	8006e9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691a      	ldr	r2, [r3, #16]
 8006e7c:	4b7b      	ldr	r3, [pc, #492]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d908      	bls.n	8006e9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e88:	4b78      	ldr	r3, [pc, #480]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	4975      	ldr	r1, [pc, #468]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0308 	and.w	r3, r3, #8
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d010      	beq.n	8006ec8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	695a      	ldr	r2, [r3, #20]
 8006eaa:	4b70      	ldr	r3, [pc, #448]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d908      	bls.n	8006ec8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006eb6:	4b6d      	ldr	r3, [pc, #436]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	496a      	ldr	r1, [pc, #424]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d010      	beq.n	8006ef6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699a      	ldr	r2, [r3, #24]
 8006ed8:	4b64      	ldr	r3, [pc, #400]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d908      	bls.n	8006ef6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ee4:	4b61      	ldr	r3, [pc, #388]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	495e      	ldr	r1, [pc, #376]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d010      	beq.n	8006f24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	69da      	ldr	r2, [r3, #28]
 8006f06:	4b59      	ldr	r3, [pc, #356]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d908      	bls.n	8006f24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f12:	4b56      	ldr	r3, [pc, #344]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	4953      	ldr	r1, [pc, #332]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0302 	and.w	r3, r3, #2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d010      	beq.n	8006f52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	4b4d      	ldr	r3, [pc, #308]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	f003 030f 	and.w	r3, r3, #15
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d908      	bls.n	8006f52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f40:	4b4a      	ldr	r3, [pc, #296]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	f023 020f 	bic.w	r2, r3, #15
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	4947      	ldr	r1, [pc, #284]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d055      	beq.n	800700a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006f5e:	4b43      	ldr	r3, [pc, #268]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	4940      	ldr	r1, [pc, #256]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d107      	bne.n	8006f88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f78:	4b3c      	ldr	r3, [pc, #240]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d121      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e0f6      	b.n	8007176 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d107      	bne.n	8006fa0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f90:	4b36      	ldr	r3, [pc, #216]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d115      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e0ea      	b.n	8007176 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d107      	bne.n	8006fb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006fa8:	4b30      	ldr	r3, [pc, #192]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d109      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e0de      	b.n	8007176 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fb8:	4b2c      	ldr	r3, [pc, #176]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0304 	and.w	r3, r3, #4
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e0d6      	b.n	8007176 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fc8:	4b28      	ldr	r3, [pc, #160]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f023 0207 	bic.w	r2, r3, #7
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	4925      	ldr	r1, [pc, #148]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fda:	f7fa fddb 	bl	8001b94 <HAL_GetTick>
 8006fde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fe0:	e00a      	b.n	8006ff8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fe2:	f7fa fdd7 	bl	8001b94 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e0be      	b.n	8007176 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ff8:	4b1c      	ldr	r3, [pc, #112]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	429a      	cmp	r2, r3
 8007008:	d1eb      	bne.n	8006fe2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d010      	beq.n	8007038 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	4b14      	ldr	r3, [pc, #80]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	429a      	cmp	r2, r3
 8007024:	d208      	bcs.n	8007038 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007026:	4b11      	ldr	r3, [pc, #68]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f023 020f 	bic.w	r2, r3, #15
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	490e      	ldr	r1, [pc, #56]	; (800706c <HAL_RCC_ClockConfig+0x244>)
 8007034:	4313      	orrs	r3, r2
 8007036:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007038:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <HAL_RCC_ClockConfig+0x240>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 030f 	and.w	r3, r3, #15
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	429a      	cmp	r2, r3
 8007044:	d214      	bcs.n	8007070 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007046:	4b08      	ldr	r3, [pc, #32]	; (8007068 <HAL_RCC_ClockConfig+0x240>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f023 020f 	bic.w	r2, r3, #15
 800704e:	4906      	ldr	r1, [pc, #24]	; (8007068 <HAL_RCC_ClockConfig+0x240>)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	4313      	orrs	r3, r2
 8007054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007056:	4b04      	ldr	r3, [pc, #16]	; (8007068 <HAL_RCC_ClockConfig+0x240>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 030f 	and.w	r3, r3, #15
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d005      	beq.n	8007070 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e086      	b.n	8007176 <HAL_RCC_ClockConfig+0x34e>
 8007068:	52002000 	.word	0x52002000
 800706c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d010      	beq.n	800709e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691a      	ldr	r2, [r3, #16]
 8007080:	4b3f      	ldr	r3, [pc, #252]	; (8007180 <HAL_RCC_ClockConfig+0x358>)
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007088:	429a      	cmp	r2, r3
 800708a:	d208      	bcs.n	800709e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800708c:	4b3c      	ldr	r3, [pc, #240]	; (8007180 <HAL_RCC_ClockConfig+0x358>)
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	4939      	ldr	r1, [pc, #228]	; (8007180 <HAL_RCC_ClockConfig+0x358>)
 800709a:	4313      	orrs	r3, r2
 800709c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0308 	and.w	r3, r3, #8
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d010      	beq.n	80070cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	695a      	ldr	r2, [r3, #20]
 80070ae:	4b34      	ldr	r3, [pc, #208]	; (8007180 <HAL_RCC_ClockConfig+0x358>)
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d208      	bcs.n	80070cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80070ba:	4b31      	ldr	r3, [pc, #196]	; (8007180 <HAL_RCC_ClockConfig+0x358>)
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	492e      	ldr	r1, [pc, #184]	; (8007180 <HAL_RCC_ClockConfig+0x358>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0310 	and.w	r3, r3, #16
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d010      	beq.n	80070fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699a      	ldr	r2, [r3, #24]
 80070dc:	4b28      	ldr	r3, [pc, #160]	; (8007180 <HAL_RCC_ClockConfig+0x358>)
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d208      	bcs.n	80070fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80070e8:	4b25      	ldr	r3, [pc, #148]	; (8007180 <HAL_RCC_ClockConfig+0x358>)
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	4922      	ldr	r1, [pc, #136]	; (8007180 <HAL_RCC_ClockConfig+0x358>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b00      	cmp	r3, #0
 8007104:	d010      	beq.n	8007128 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69da      	ldr	r2, [r3, #28]
 800710a:	4b1d      	ldr	r3, [pc, #116]	; (8007180 <HAL_RCC_ClockConfig+0x358>)
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007112:	429a      	cmp	r2, r3
 8007114:	d208      	bcs.n	8007128 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007116:	4b1a      	ldr	r3, [pc, #104]	; (8007180 <HAL_RCC_ClockConfig+0x358>)
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	4917      	ldr	r1, [pc, #92]	; (8007180 <HAL_RCC_ClockConfig+0x358>)
 8007124:	4313      	orrs	r3, r2
 8007126:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007128:	f000 f834 	bl	8007194 <HAL_RCC_GetSysClockFreq>
 800712c:	4602      	mov	r2, r0
 800712e:	4b14      	ldr	r3, [pc, #80]	; (8007180 <HAL_RCC_ClockConfig+0x358>)
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	0a1b      	lsrs	r3, r3, #8
 8007134:	f003 030f 	and.w	r3, r3, #15
 8007138:	4912      	ldr	r1, [pc, #72]	; (8007184 <HAL_RCC_ClockConfig+0x35c>)
 800713a:	5ccb      	ldrb	r3, [r1, r3]
 800713c:	f003 031f 	and.w	r3, r3, #31
 8007140:	fa22 f303 	lsr.w	r3, r2, r3
 8007144:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007146:	4b0e      	ldr	r3, [pc, #56]	; (8007180 <HAL_RCC_ClockConfig+0x358>)
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	4a0d      	ldr	r2, [pc, #52]	; (8007184 <HAL_RCC_ClockConfig+0x35c>)
 8007150:	5cd3      	ldrb	r3, [r2, r3]
 8007152:	f003 031f 	and.w	r3, r3, #31
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	fa22 f303 	lsr.w	r3, r2, r3
 800715c:	4a0a      	ldr	r2, [pc, #40]	; (8007188 <HAL_RCC_ClockConfig+0x360>)
 800715e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007160:	4a0a      	ldr	r2, [pc, #40]	; (800718c <HAL_RCC_ClockConfig+0x364>)
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007166:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <HAL_RCC_ClockConfig+0x368>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f7fa fcc8 	bl	8001b00 <HAL_InitTick>
 8007170:	4603      	mov	r3, r0
 8007172:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007174:	7bfb      	ldrb	r3, [r7, #15]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	58024400 	.word	0x58024400
 8007184:	0800f7cc 	.word	0x0800f7cc
 8007188:	24000004 	.word	0x24000004
 800718c:	24000000 	.word	0x24000000
 8007190:	24000008 	.word	0x24000008

08007194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007194:	b480      	push	{r7}
 8007196:	b089      	sub	sp, #36	; 0x24
 8007198:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800719a:	4bb3      	ldr	r3, [pc, #716]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071a2:	2b18      	cmp	r3, #24
 80071a4:	f200 8155 	bhi.w	8007452 <HAL_RCC_GetSysClockFreq+0x2be>
 80071a8:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	08007215 	.word	0x08007215
 80071b4:	08007453 	.word	0x08007453
 80071b8:	08007453 	.word	0x08007453
 80071bc:	08007453 	.word	0x08007453
 80071c0:	08007453 	.word	0x08007453
 80071c4:	08007453 	.word	0x08007453
 80071c8:	08007453 	.word	0x08007453
 80071cc:	08007453 	.word	0x08007453
 80071d0:	0800723b 	.word	0x0800723b
 80071d4:	08007453 	.word	0x08007453
 80071d8:	08007453 	.word	0x08007453
 80071dc:	08007453 	.word	0x08007453
 80071e0:	08007453 	.word	0x08007453
 80071e4:	08007453 	.word	0x08007453
 80071e8:	08007453 	.word	0x08007453
 80071ec:	08007453 	.word	0x08007453
 80071f0:	08007241 	.word	0x08007241
 80071f4:	08007453 	.word	0x08007453
 80071f8:	08007453 	.word	0x08007453
 80071fc:	08007453 	.word	0x08007453
 8007200:	08007453 	.word	0x08007453
 8007204:	08007453 	.word	0x08007453
 8007208:	08007453 	.word	0x08007453
 800720c:	08007453 	.word	0x08007453
 8007210:	08007247 	.word	0x08007247
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007214:	4b94      	ldr	r3, [pc, #592]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0320 	and.w	r3, r3, #32
 800721c:	2b00      	cmp	r3, #0
 800721e:	d009      	beq.n	8007234 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007220:	4b91      	ldr	r3, [pc, #580]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	08db      	lsrs	r3, r3, #3
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	4a90      	ldr	r2, [pc, #576]	; (800746c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800722c:	fa22 f303 	lsr.w	r3, r2, r3
 8007230:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007232:	e111      	b.n	8007458 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007234:	4b8d      	ldr	r3, [pc, #564]	; (800746c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007236:	61bb      	str	r3, [r7, #24]
      break;
 8007238:	e10e      	b.n	8007458 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800723a:	4b8d      	ldr	r3, [pc, #564]	; (8007470 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800723c:	61bb      	str	r3, [r7, #24]
      break;
 800723e:	e10b      	b.n	8007458 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007240:	4b8c      	ldr	r3, [pc, #560]	; (8007474 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007242:	61bb      	str	r3, [r7, #24]
      break;
 8007244:	e108      	b.n	8007458 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007246:	4b88      	ldr	r3, [pc, #544]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724a:	f003 0303 	and.w	r3, r3, #3
 800724e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007250:	4b85      	ldr	r3, [pc, #532]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007254:	091b      	lsrs	r3, r3, #4
 8007256:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800725a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800725c:	4b82      	ldr	r3, [pc, #520]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007266:	4b80      	ldr	r3, [pc, #512]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726a:	08db      	lsrs	r3, r3, #3
 800726c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	fb02 f303 	mul.w	r3, r2, r3
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 80e1 	beq.w	800744c <HAL_RCC_GetSysClockFreq+0x2b8>
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2b02      	cmp	r3, #2
 800728e:	f000 8083 	beq.w	8007398 <HAL_RCC_GetSysClockFreq+0x204>
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b02      	cmp	r3, #2
 8007296:	f200 80a1 	bhi.w	80073dc <HAL_RCC_GetSysClockFreq+0x248>
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <HAL_RCC_GetSysClockFreq+0x114>
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d056      	beq.n	8007354 <HAL_RCC_GetSysClockFreq+0x1c0>
 80072a6:	e099      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072a8:	4b6f      	ldr	r3, [pc, #444]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0320 	and.w	r3, r3, #32
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d02d      	beq.n	8007310 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072b4:	4b6c      	ldr	r3, [pc, #432]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	08db      	lsrs	r3, r3, #3
 80072ba:	f003 0303 	and.w	r3, r3, #3
 80072be:	4a6b      	ldr	r2, [pc, #428]	; (800746c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80072c0:	fa22 f303 	lsr.w	r3, r2, r3
 80072c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	ee07 3a90 	vmov	s15, r3
 80072cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072de:	4b62      	ldr	r3, [pc, #392]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80072f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007478 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800730e:	e087      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800747c <HAL_RCC_GetSysClockFreq+0x2e8>
 800731e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007322:	4b51      	ldr	r3, [pc, #324]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007332:	ed97 6a02 	vldr	s12, [r7, #8]
 8007336:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007478 <HAL_RCC_GetSysClockFreq+0x2e4>
 800733a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007352:	e065      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007480 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007366:	4b40      	ldr	r3, [pc, #256]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007376:	ed97 6a02 	vldr	s12, [r7, #8]
 800737a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007478 <HAL_RCC_GetSysClockFreq+0x2e4>
 800737e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800738a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007392:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007396:	e043      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007484 <HAL_RCC_GetSysClockFreq+0x2f0>
 80073a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073aa:	4b2f      	ldr	r3, [pc, #188]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80073be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007478 <HAL_RCC_GetSysClockFreq+0x2e4>
 80073c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80073da:	e021      	b.n	8007420 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007480 <HAL_RCC_GetSysClockFreq+0x2ec>
 80073ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ee:	4b1e      	ldr	r3, [pc, #120]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007402:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007478 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800741e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007420:	4b11      	ldr	r3, [pc, #68]	; (8007468 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007424:	0a5b      	lsrs	r3, r3, #9
 8007426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800742a:	3301      	adds	r3, #1
 800742c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	ee07 3a90 	vmov	s15, r3
 8007434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007438:	edd7 6a07 	vldr	s13, [r7, #28]
 800743c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007444:	ee17 3a90 	vmov	r3, s15
 8007448:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800744a:	e005      	b.n	8007458 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	61bb      	str	r3, [r7, #24]
      break;
 8007450:	e002      	b.n	8007458 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007452:	4b07      	ldr	r3, [pc, #28]	; (8007470 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007454:	61bb      	str	r3, [r7, #24]
      break;
 8007456:	bf00      	nop
  }

  return sysclockfreq;
 8007458:	69bb      	ldr	r3, [r7, #24]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3724      	adds	r7, #36	; 0x24
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	58024400 	.word	0x58024400
 800746c:	03d09000 	.word	0x03d09000
 8007470:	003d0900 	.word	0x003d0900
 8007474:	017d7840 	.word	0x017d7840
 8007478:	46000000 	.word	0x46000000
 800747c:	4c742400 	.word	0x4c742400
 8007480:	4a742400 	.word	0x4a742400
 8007484:	4bbebc20 	.word	0x4bbebc20

08007488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800748e:	f7ff fe81 	bl	8007194 <HAL_RCC_GetSysClockFreq>
 8007492:	4602      	mov	r2, r0
 8007494:	4b10      	ldr	r3, [pc, #64]	; (80074d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	0a1b      	lsrs	r3, r3, #8
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	490f      	ldr	r1, [pc, #60]	; (80074dc <HAL_RCC_GetHCLKFreq+0x54>)
 80074a0:	5ccb      	ldrb	r3, [r1, r3]
 80074a2:	f003 031f 	and.w	r3, r3, #31
 80074a6:	fa22 f303 	lsr.w	r3, r2, r3
 80074aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074ac:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	4a09      	ldr	r2, [pc, #36]	; (80074dc <HAL_RCC_GetHCLKFreq+0x54>)
 80074b6:	5cd3      	ldrb	r3, [r2, r3]
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	fa22 f303 	lsr.w	r3, r2, r3
 80074c2:	4a07      	ldr	r2, [pc, #28]	; (80074e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80074c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80074c6:	4a07      	ldr	r2, [pc, #28]	; (80074e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80074cc:	4b04      	ldr	r3, [pc, #16]	; (80074e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80074ce:	681b      	ldr	r3, [r3, #0]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	58024400 	.word	0x58024400
 80074dc:	0800f7cc 	.word	0x0800f7cc
 80074e0:	24000004 	.word	0x24000004
 80074e4:	24000000 	.word	0x24000000

080074e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80074ec:	f7ff ffcc 	bl	8007488 <HAL_RCC_GetHCLKFreq>
 80074f0:	4602      	mov	r2, r0
 80074f2:	4b06      	ldr	r3, [pc, #24]	; (800750c <HAL_RCC_GetPCLK1Freq+0x24>)
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	091b      	lsrs	r3, r3, #4
 80074f8:	f003 0307 	and.w	r3, r3, #7
 80074fc:	4904      	ldr	r1, [pc, #16]	; (8007510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80074fe:	5ccb      	ldrb	r3, [r1, r3]
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007508:	4618      	mov	r0, r3
 800750a:	bd80      	pop	{r7, pc}
 800750c:	58024400 	.word	0x58024400
 8007510:	0800f7cc 	.word	0x0800f7cc

08007514 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007518:	b0c6      	sub	sp, #280	; 0x118
 800751a:	af00      	add	r7, sp, #0
 800751c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007520:	2300      	movs	r3, #0
 8007522:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007526:	2300      	movs	r3, #0
 8007528:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800752c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007534:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007538:	2500      	movs	r5, #0
 800753a:	ea54 0305 	orrs.w	r3, r4, r5
 800753e:	d049      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007546:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800754a:	d02f      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800754c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007550:	d828      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007556:	d01a      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800755c:	d822      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007566:	d007      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007568:	e01c      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800756a:	4bab      	ldr	r3, [pc, #684]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800756c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756e:	4aaa      	ldr	r2, [pc, #680]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007574:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007576:	e01a      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800757c:	3308      	adds	r3, #8
 800757e:	2102      	movs	r1, #2
 8007580:	4618      	mov	r0, r3
 8007582:	f002 fa49 	bl	8009a18 <RCCEx_PLL2_Config>
 8007586:	4603      	mov	r3, r0
 8007588:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800758c:	e00f      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800758e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007592:	3328      	adds	r3, #40	; 0x28
 8007594:	2102      	movs	r1, #2
 8007596:	4618      	mov	r0, r3
 8007598:	f002 faf0 	bl	8009b7c <RCCEx_PLL3_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80075a2:	e004      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80075aa:	e000      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80075ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10a      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80075b6:	4b98      	ldr	r3, [pc, #608]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80075be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075c4:	4a94      	ldr	r2, [pc, #592]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80075c6:	430b      	orrs	r3, r1
 80075c8:	6513      	str	r3, [r2, #80]	; 0x50
 80075ca:	e003      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075dc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80075e0:	f04f 0900 	mov.w	r9, #0
 80075e4:	ea58 0309 	orrs.w	r3, r8, r9
 80075e8:	d047      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80075ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d82a      	bhi.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80075f4:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80075f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fa:	bf00      	nop
 80075fc:	08007611 	.word	0x08007611
 8007600:	0800761f 	.word	0x0800761f
 8007604:	08007635 	.word	0x08007635
 8007608:	08007653 	.word	0x08007653
 800760c:	08007653 	.word	0x08007653
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007610:	4b81      	ldr	r3, [pc, #516]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	4a80      	ldr	r2, [pc, #512]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800761a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800761c:	e01a      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800761e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007622:	3308      	adds	r3, #8
 8007624:	2100      	movs	r1, #0
 8007626:	4618      	mov	r0, r3
 8007628:	f002 f9f6 	bl	8009a18 <RCCEx_PLL2_Config>
 800762c:	4603      	mov	r3, r0
 800762e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007632:	e00f      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007638:	3328      	adds	r3, #40	; 0x28
 800763a:	2100      	movs	r1, #0
 800763c:	4618      	mov	r0, r3
 800763e:	f002 fa9d 	bl	8009b7c <RCCEx_PLL3_Config>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007648:	e004      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007650:	e000      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007654:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800765c:	4b6e      	ldr	r3, [pc, #440]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800765e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007660:	f023 0107 	bic.w	r1, r3, #7
 8007664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766a:	4a6b      	ldr	r2, [pc, #428]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800766c:	430b      	orrs	r3, r1
 800766e:	6513      	str	r3, [r2, #80]	; 0x50
 8007670:	e003      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007672:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007676:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8007686:	f04f 0b00 	mov.w	fp, #0
 800768a:	ea5a 030b 	orrs.w	r3, sl, fp
 800768e:	d05b      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007694:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007698:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800769c:	d03b      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800769e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80076a2:	d834      	bhi.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80076a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076a8:	d037      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80076aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076ae:	d82e      	bhi.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80076b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076b4:	d033      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80076b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076ba:	d828      	bhi.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80076bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076c0:	d01a      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80076c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076c6:	d822      	bhi.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80076cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076d0:	d007      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80076d2:	e01c      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d4:	4b50      	ldr	r3, [pc, #320]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	4a4f      	ldr	r2, [pc, #316]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80076da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076e0:	e01e      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e6:	3308      	adds	r3, #8
 80076e8:	2100      	movs	r1, #0
 80076ea:	4618      	mov	r0, r3
 80076ec:	f002 f994 	bl	8009a18 <RCCEx_PLL2_Config>
 80076f0:	4603      	mov	r3, r0
 80076f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80076f6:	e013      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076fc:	3328      	adds	r3, #40	; 0x28
 80076fe:	2100      	movs	r1, #0
 8007700:	4618      	mov	r0, r3
 8007702:	f002 fa3b 	bl	8009b7c <RCCEx_PLL3_Config>
 8007706:	4603      	mov	r3, r0
 8007708:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800770c:	e008      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007714:	e004      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007716:	bf00      	nop
 8007718:	e002      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800771a:	bf00      	nop
 800771c:	e000      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800771e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007720:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10b      	bne.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007728:	4b3b      	ldr	r3, [pc, #236]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800772a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800772c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007734:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007738:	4a37      	ldr	r2, [pc, #220]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800773a:	430b      	orrs	r3, r1
 800773c:	6593      	str	r3, [r2, #88]	; 0x58
 800773e:	e003      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007740:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007744:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007750:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007754:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007758:	2300      	movs	r3, #0
 800775a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800775e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007762:	460b      	mov	r3, r1
 8007764:	4313      	orrs	r3, r2
 8007766:	d05d      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800776c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007770:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007774:	d03b      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007776:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800777a:	d834      	bhi.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800777c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007780:	d037      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007782:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007786:	d82e      	bhi.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007788:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800778c:	d033      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800778e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007792:	d828      	bhi.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007794:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007798:	d01a      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800779a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800779e:	d822      	bhi.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d003      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 80077a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077a8:	d007      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80077aa:	e01c      	b.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077ac:	4b1a      	ldr	r3, [pc, #104]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	4a19      	ldr	r2, [pc, #100]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80077b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077b8:	e01e      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077be:	3308      	adds	r3, #8
 80077c0:	2100      	movs	r1, #0
 80077c2:	4618      	mov	r0, r3
 80077c4:	f002 f928 	bl	8009a18 <RCCEx_PLL2_Config>
 80077c8:	4603      	mov	r3, r0
 80077ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80077ce:	e013      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d4:	3328      	adds	r3, #40	; 0x28
 80077d6:	2100      	movs	r1, #0
 80077d8:	4618      	mov	r0, r3
 80077da:	f002 f9cf 	bl	8009b7c <RCCEx_PLL3_Config>
 80077de:	4603      	mov	r3, r0
 80077e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077e4:	e008      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80077ec:	e004      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80077ee:	bf00      	nop
 80077f0:	e002      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80077f2:	bf00      	nop
 80077f4:	e000      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80077f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10d      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007800:	4b05      	ldr	r3, [pc, #20]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007804:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800780c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007810:	4a01      	ldr	r2, [pc, #4]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007812:	430b      	orrs	r3, r1
 8007814:	6593      	str	r3, [r2, #88]	; 0x58
 8007816:	e005      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007820:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007830:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007834:	2300      	movs	r3, #0
 8007836:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800783a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800783e:	460b      	mov	r3, r1
 8007840:	4313      	orrs	r3, r2
 8007842:	d03a      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784a:	2b30      	cmp	r3, #48	; 0x30
 800784c:	d01f      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800784e:	2b30      	cmp	r3, #48	; 0x30
 8007850:	d819      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007852:	2b20      	cmp	r3, #32
 8007854:	d00c      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007856:	2b20      	cmp	r3, #32
 8007858:	d815      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800785a:	2b00      	cmp	r3, #0
 800785c:	d019      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800785e:	2b10      	cmp	r3, #16
 8007860:	d111      	bne.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007862:	4baa      	ldr	r3, [pc, #680]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007866:	4aa9      	ldr	r2, [pc, #676]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800786c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800786e:	e011      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007874:	3308      	adds	r3, #8
 8007876:	2102      	movs	r1, #2
 8007878:	4618      	mov	r0, r3
 800787a:	f002 f8cd 	bl	8009a18 <RCCEx_PLL2_Config>
 800787e:	4603      	mov	r3, r0
 8007880:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007884:	e006      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800788c:	e002      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800788e:	bf00      	nop
 8007890:	e000      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007894:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10a      	bne.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800789c:	4b9b      	ldr	r3, [pc, #620]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800789e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80078a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078aa:	4a98      	ldr	r2, [pc, #608]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80078ac:	430b      	orrs	r3, r1
 80078ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078b0:	e003      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80078ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80078c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078ca:	2300      	movs	r3, #0
 80078cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80078d4:	460b      	mov	r3, r1
 80078d6:	4313      	orrs	r3, r2
 80078d8:	d051      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80078da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078e4:	d035      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80078e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078ea:	d82e      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80078ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078f0:	d031      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80078f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078f6:	d828      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80078f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078fc:	d01a      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80078fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007902:	d822      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800790c:	d007      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800790e:	e01c      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007910:	4b7e      	ldr	r3, [pc, #504]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007914:	4a7d      	ldr	r2, [pc, #500]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800791a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800791c:	e01c      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800791e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007922:	3308      	adds	r3, #8
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f002 f876 	bl	8009a18 <RCCEx_PLL2_Config>
 800792c:	4603      	mov	r3, r0
 800792e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007932:	e011      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007938:	3328      	adds	r3, #40	; 0x28
 800793a:	2100      	movs	r1, #0
 800793c:	4618      	mov	r0, r3
 800793e:	f002 f91d 	bl	8009b7c <RCCEx_PLL3_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007948:	e006      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007950:	e002      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007952:	bf00      	nop
 8007954:	e000      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007958:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007960:	4b6a      	ldr	r3, [pc, #424]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007964:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796e:	4a67      	ldr	r2, [pc, #412]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007970:	430b      	orrs	r3, r1
 8007972:	6513      	str	r3, [r2, #80]	; 0x50
 8007974:	e003      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007976:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800797a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800797e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800798a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800798e:	2300      	movs	r3, #0
 8007990:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007994:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007998:	460b      	mov	r3, r1
 800799a:	4313      	orrs	r3, r2
 800799c:	d053      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800799e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079a8:	d033      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80079aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079ae:	d82c      	bhi.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80079b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079b4:	d02f      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80079b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079ba:	d826      	bhi.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80079bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079c0:	d02b      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80079c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079c6:	d820      	bhi.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80079c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079cc:	d012      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80079ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079d2:	d81a      	bhi.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d022      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80079d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079dc:	d115      	bne.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e2:	3308      	adds	r3, #8
 80079e4:	2101      	movs	r1, #1
 80079e6:	4618      	mov	r0, r3
 80079e8:	f002 f816 	bl	8009a18 <RCCEx_PLL2_Config>
 80079ec:	4603      	mov	r3, r0
 80079ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80079f2:	e015      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f8:	3328      	adds	r3, #40	; 0x28
 80079fa:	2101      	movs	r1, #1
 80079fc:	4618      	mov	r0, r3
 80079fe:	f002 f8bd 	bl	8009b7c <RCCEx_PLL3_Config>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a08:	e00a      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007a10:	e006      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007a12:	bf00      	nop
 8007a14:	e004      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007a16:	bf00      	nop
 8007a18:	e002      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007a1a:	bf00      	nop
 8007a1c:	e000      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10a      	bne.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a28:	4b38      	ldr	r3, [pc, #224]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a2c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a36:	4a35      	ldr	r2, [pc, #212]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	6513      	str	r3, [r2, #80]	; 0x50
 8007a3c:	e003      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a42:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a56:	2300      	movs	r3, #0
 8007a58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a5c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a60:	460b      	mov	r3, r1
 8007a62:	4313      	orrs	r3, r2
 8007a64:	d058      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a72:	d033      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a78:	d82c      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a7e:	d02f      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a84:	d826      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007a86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a8a:	d02b      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007a8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a90:	d820      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a96:	d012      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a9c:	d81a      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d022      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007aa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007aa6:	d115      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aac:	3308      	adds	r3, #8
 8007aae:	2101      	movs	r1, #1
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f001 ffb1 	bl	8009a18 <RCCEx_PLL2_Config>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007abc:	e015      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac2:	3328      	adds	r3, #40	; 0x28
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f002 f858 	bl	8009b7c <RCCEx_PLL3_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007ad2:	e00a      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007ada:	e006      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007adc:	bf00      	nop
 8007ade:	e004      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007ae0:	bf00      	nop
 8007ae2:	e002      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007ae4:	bf00      	nop
 8007ae6:	e000      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10e      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007af2:	4b06      	ldr	r3, [pc, #24]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007afe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b02:	4a02      	ldr	r2, [pc, #8]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b04:	430b      	orrs	r3, r1
 8007b06:	6593      	str	r3, [r2, #88]	; 0x58
 8007b08:	e006      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007b0a:	bf00      	nop
 8007b0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007b24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007b2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4313      	orrs	r3, r2
 8007b36:	d037      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b42:	d00e      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b48:	d816      	bhi.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d018      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b52:	d111      	bne.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b54:	4bc4      	ldr	r3, [pc, #784]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	4ac3      	ldr	r2, [pc, #780]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b60:	e00f      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b66:	3308      	adds	r3, #8
 8007b68:	2101      	movs	r1, #1
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f001 ff54 	bl	8009a18 <RCCEx_PLL2_Config>
 8007b70:	4603      	mov	r3, r0
 8007b72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b76:	e004      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007b7e:	e000      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10a      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b8a:	4bb7      	ldr	r3, [pc, #732]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b98:	4ab3      	ldr	r2, [pc, #716]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	6513      	str	r3, [r2, #80]	; 0x50
 8007b9e:	e003      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ba4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	d039      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d81c      	bhi.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007bd2:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd8:	08007c15 	.word	0x08007c15
 8007bdc:	08007be9 	.word	0x08007be9
 8007be0:	08007bf7 	.word	0x08007bf7
 8007be4:	08007c15 	.word	0x08007c15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007be8:	4b9f      	ldr	r3, [pc, #636]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	4a9e      	ldr	r2, [pc, #632]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007bf4:	e00f      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	2102      	movs	r1, #2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f001 ff0a 	bl	8009a18 <RCCEx_PLL2_Config>
 8007c04:	4603      	mov	r3, r0
 8007c06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c0a:	e004      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007c12:	e000      	b.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c1e:	4b92      	ldr	r3, [pc, #584]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c22:	f023 0103 	bic.w	r1, r3, #3
 8007c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c2c:	4a8e      	ldr	r2, [pc, #568]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c32:	e003      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007c48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c56:	460b      	mov	r3, r1
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f000 8099 	beq.w	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c5e:	4b83      	ldr	r3, [pc, #524]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a82      	ldr	r2, [pc, #520]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c6a:	f7f9 ff93 	bl	8001b94 <HAL_GetTick>
 8007c6e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c72:	e00b      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c74:	f7f9 ff8e 	bl	8001b94 <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	2b64      	cmp	r3, #100	; 0x64
 8007c82:	d903      	bls.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007c8a:	e005      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c8c:	4b77      	ldr	r3, [pc, #476]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d0ed      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007c98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d173      	bne.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007ca0:	4b71      	ldr	r3, [pc, #452]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ca2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ca8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007cac:	4053      	eors	r3, r2
 8007cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d015      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cb6:	4b6c      	ldr	r3, [pc, #432]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cc2:	4b69      	ldr	r3, [pc, #420]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc6:	4a68      	ldr	r2, [pc, #416]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ccc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cce:	4b66      	ldr	r3, [pc, #408]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd2:	4a65      	ldr	r2, [pc, #404]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cd8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007cda:	4a63      	ldr	r2, [pc, #396]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ce0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ce6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cee:	d118      	bne.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf0:	f7f9 ff50 	bl	8001b94 <HAL_GetTick>
 8007cf4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cf8:	e00d      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cfa:	f7f9 ff4b 	bl	8001b94 <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d04:	1ad2      	subs	r2, r2, r3
 8007d06:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d903      	bls.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8007d14:	e005      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d16:	4b54      	ldr	r3, [pc, #336]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0eb      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007d22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d129      	bne.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d3a:	d10e      	bne.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007d3c:	4b4a      	ldr	r3, [pc, #296]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d4c:	091a      	lsrs	r2, r3, #4
 8007d4e:	4b48      	ldr	r3, [pc, #288]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007d50:	4013      	ands	r3, r2
 8007d52:	4a45      	ldr	r2, [pc, #276]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d54:	430b      	orrs	r3, r1
 8007d56:	6113      	str	r3, [r2, #16]
 8007d58:	e005      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007d5a:	4b43      	ldr	r3, [pc, #268]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	4a42      	ldr	r2, [pc, #264]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007d64:	6113      	str	r3, [r2, #16]
 8007d66:	4b40      	ldr	r3, [pc, #256]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d68:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d76:	4a3c      	ldr	r2, [pc, #240]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d78:	430b      	orrs	r3, r1
 8007d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d7c:	e008      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d82:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8007d86:	e003      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d98:	f002 0301 	and.w	r3, r2, #1
 8007d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007da0:	2300      	movs	r3, #0
 8007da2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007da6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007daa:	460b      	mov	r3, r1
 8007dac:	4313      	orrs	r3, r2
 8007dae:	f000 808f 	beq.w	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007db8:	2b28      	cmp	r3, #40	; 0x28
 8007dba:	d871      	bhi.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007dbc:	a201      	add	r2, pc, #4	; (adr r2, 8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc2:	bf00      	nop
 8007dc4:	08007ea9 	.word	0x08007ea9
 8007dc8:	08007ea1 	.word	0x08007ea1
 8007dcc:	08007ea1 	.word	0x08007ea1
 8007dd0:	08007ea1 	.word	0x08007ea1
 8007dd4:	08007ea1 	.word	0x08007ea1
 8007dd8:	08007ea1 	.word	0x08007ea1
 8007ddc:	08007ea1 	.word	0x08007ea1
 8007de0:	08007ea1 	.word	0x08007ea1
 8007de4:	08007e75 	.word	0x08007e75
 8007de8:	08007ea1 	.word	0x08007ea1
 8007dec:	08007ea1 	.word	0x08007ea1
 8007df0:	08007ea1 	.word	0x08007ea1
 8007df4:	08007ea1 	.word	0x08007ea1
 8007df8:	08007ea1 	.word	0x08007ea1
 8007dfc:	08007ea1 	.word	0x08007ea1
 8007e00:	08007ea1 	.word	0x08007ea1
 8007e04:	08007e8b 	.word	0x08007e8b
 8007e08:	08007ea1 	.word	0x08007ea1
 8007e0c:	08007ea1 	.word	0x08007ea1
 8007e10:	08007ea1 	.word	0x08007ea1
 8007e14:	08007ea1 	.word	0x08007ea1
 8007e18:	08007ea1 	.word	0x08007ea1
 8007e1c:	08007ea1 	.word	0x08007ea1
 8007e20:	08007ea1 	.word	0x08007ea1
 8007e24:	08007ea9 	.word	0x08007ea9
 8007e28:	08007ea1 	.word	0x08007ea1
 8007e2c:	08007ea1 	.word	0x08007ea1
 8007e30:	08007ea1 	.word	0x08007ea1
 8007e34:	08007ea1 	.word	0x08007ea1
 8007e38:	08007ea1 	.word	0x08007ea1
 8007e3c:	08007ea1 	.word	0x08007ea1
 8007e40:	08007ea1 	.word	0x08007ea1
 8007e44:	08007ea9 	.word	0x08007ea9
 8007e48:	08007ea1 	.word	0x08007ea1
 8007e4c:	08007ea1 	.word	0x08007ea1
 8007e50:	08007ea1 	.word	0x08007ea1
 8007e54:	08007ea1 	.word	0x08007ea1
 8007e58:	08007ea1 	.word	0x08007ea1
 8007e5c:	08007ea1 	.word	0x08007ea1
 8007e60:	08007ea1 	.word	0x08007ea1
 8007e64:	08007ea9 	.word	0x08007ea9
 8007e68:	58024400 	.word	0x58024400
 8007e6c:	58024800 	.word	0x58024800
 8007e70:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e78:	3308      	adds	r3, #8
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 fdcb 	bl	8009a18 <RCCEx_PLL2_Config>
 8007e82:	4603      	mov	r3, r0
 8007e84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007e88:	e00f      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e8e:	3328      	adds	r3, #40	; 0x28
 8007e90:	2101      	movs	r1, #1
 8007e92:	4618      	mov	r0, r3
 8007e94:	f001 fe72 	bl	8009b7c <RCCEx_PLL3_Config>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007e9e:	e004      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007ea6:	e000      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eaa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10a      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007eb2:	4bbf      	ldr	r3, [pc, #764]	; (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ec0:	4abb      	ldr	r2, [pc, #748]	; (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ec2:	430b      	orrs	r3, r1
 8007ec4:	6553      	str	r3, [r2, #84]	; 0x54
 8007ec6:	e003      	b.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ecc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	f002 0302 	and.w	r3, r2, #2
 8007edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ee6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4313      	orrs	r3, r2
 8007eee:	d041      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef6:	2b05      	cmp	r3, #5
 8007ef8:	d824      	bhi.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007efa:	a201      	add	r2, pc, #4	; (adr r2, 8007f00 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f00:	08007f4d 	.word	0x08007f4d
 8007f04:	08007f19 	.word	0x08007f19
 8007f08:	08007f2f 	.word	0x08007f2f
 8007f0c:	08007f4d 	.word	0x08007f4d
 8007f10:	08007f4d 	.word	0x08007f4d
 8007f14:	08007f4d 	.word	0x08007f4d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	2101      	movs	r1, #1
 8007f20:	4618      	mov	r0, r3
 8007f22:	f001 fd79 	bl	8009a18 <RCCEx_PLL2_Config>
 8007f26:	4603      	mov	r3, r0
 8007f28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f2c:	e00f      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f32:	3328      	adds	r3, #40	; 0x28
 8007f34:	2101      	movs	r1, #1
 8007f36:	4618      	mov	r0, r3
 8007f38:	f001 fe20 	bl	8009b7c <RCCEx_PLL3_Config>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f42:	e004      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007f4a:	e000      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10a      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007f56:	4b96      	ldr	r3, [pc, #600]	; (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5a:	f023 0107 	bic.w	r1, r3, #7
 8007f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f64:	4a92      	ldr	r2, [pc, #584]	; (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007f66:	430b      	orrs	r3, r1
 8007f68:	6553      	str	r3, [r2, #84]	; 0x54
 8007f6a:	e003      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	f002 0304 	and.w	r3, r2, #4
 8007f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f84:	2300      	movs	r3, #0
 8007f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f8a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4313      	orrs	r3, r2
 8007f92:	d044      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9c:	2b05      	cmp	r3, #5
 8007f9e:	d825      	bhi.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007ff5 	.word	0x08007ff5
 8007fac:	08007fc1 	.word	0x08007fc1
 8007fb0:	08007fd7 	.word	0x08007fd7
 8007fb4:	08007ff5 	.word	0x08007ff5
 8007fb8:	08007ff5 	.word	0x08007ff5
 8007fbc:	08007ff5 	.word	0x08007ff5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f001 fd25 	bl	8009a18 <RCCEx_PLL2_Config>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007fd4:	e00f      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fda:	3328      	adds	r3, #40	; 0x28
 8007fdc:	2101      	movs	r1, #1
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 fdcc 	bl	8009b7c <RCCEx_PLL3_Config>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007fea:	e004      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007ff2:	e000      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ff6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10b      	bne.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ffe:	4b6c      	ldr	r3, [pc, #432]	; (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008002:	f023 0107 	bic.w	r1, r3, #7
 8008006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800800a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800e:	4a68      	ldr	r2, [pc, #416]	; (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008010:	430b      	orrs	r3, r1
 8008012:	6593      	str	r3, [r2, #88]	; 0x58
 8008014:	e003      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008016:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800801a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800801e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	f002 0320 	and.w	r3, r2, #32
 800802a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800802e:	2300      	movs	r3, #0
 8008030:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008034:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008038:	460b      	mov	r3, r1
 800803a:	4313      	orrs	r3, r2
 800803c:	d055      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800803e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800804a:	d033      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800804c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008050:	d82c      	bhi.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008056:	d02f      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800805c:	d826      	bhi.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800805e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008062:	d02b      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008064:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008068:	d820      	bhi.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800806a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800806e:	d012      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008074:	d81a      	bhi.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d022      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800807a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800807e:	d115      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008084:	3308      	adds	r3, #8
 8008086:	2100      	movs	r1, #0
 8008088:	4618      	mov	r0, r3
 800808a:	f001 fcc5 	bl	8009a18 <RCCEx_PLL2_Config>
 800808e:	4603      	mov	r3, r0
 8008090:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008094:	e015      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809a:	3328      	adds	r3, #40	; 0x28
 800809c:	2102      	movs	r1, #2
 800809e:	4618      	mov	r0, r3
 80080a0:	f001 fd6c 	bl	8009b7c <RCCEx_PLL3_Config>
 80080a4:	4603      	mov	r3, r0
 80080a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80080aa:	e00a      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80080b2:	e006      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80080b4:	bf00      	nop
 80080b6:	e004      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80080b8:	bf00      	nop
 80080ba:	e002      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80080bc:	bf00      	nop
 80080be:	e000      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80080c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10b      	bne.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080ca:	4b39      	ldr	r3, [pc, #228]	; (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80080cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80080d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080da:	4a35      	ldr	r2, [pc, #212]	; (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80080dc:	430b      	orrs	r3, r1
 80080de:	6553      	str	r3, [r2, #84]	; 0x54
 80080e0:	e003      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80080e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80080ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80080f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080fa:	2300      	movs	r3, #0
 80080fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008100:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008104:	460b      	mov	r3, r1
 8008106:	4313      	orrs	r3, r2
 8008108:	d058      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800810a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800810e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008112:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008116:	d033      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008118:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800811c:	d82c      	bhi.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800811e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008122:	d02f      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008128:	d826      	bhi.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800812a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800812e:	d02b      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008130:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008134:	d820      	bhi.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800813a:	d012      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800813c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008140:	d81a      	bhi.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008142:	2b00      	cmp	r3, #0
 8008144:	d022      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800814a:	d115      	bne.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800814c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008150:	3308      	adds	r3, #8
 8008152:	2100      	movs	r1, #0
 8008154:	4618      	mov	r0, r3
 8008156:	f001 fc5f 	bl	8009a18 <RCCEx_PLL2_Config>
 800815a:	4603      	mov	r3, r0
 800815c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008160:	e015      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008166:	3328      	adds	r3, #40	; 0x28
 8008168:	2102      	movs	r1, #2
 800816a:	4618      	mov	r0, r3
 800816c:	f001 fd06 	bl	8009b7c <RCCEx_PLL3_Config>
 8008170:	4603      	mov	r3, r0
 8008172:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008176:	e00a      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800817e:	e006      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008180:	bf00      	nop
 8008182:	e004      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008184:	bf00      	nop
 8008186:	e002      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008188:	bf00      	nop
 800818a:	e000      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800818c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800818e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10e      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008196:	4b06      	ldr	r3, [pc, #24]	; (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800819e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081a6:	4a02      	ldr	r2, [pc, #8]	; (80081b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80081a8:	430b      	orrs	r3, r1
 80081aa:	6593      	str	r3, [r2, #88]	; 0x58
 80081ac:	e006      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80081ae:	bf00      	nop
 80081b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80081b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80081bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80081c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081cc:	2300      	movs	r3, #0
 80081ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80081d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80081d6:	460b      	mov	r3, r1
 80081d8:	4313      	orrs	r3, r2
 80081da:	d055      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80081dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081e8:	d033      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80081ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081ee:	d82c      	bhi.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80081f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081f4:	d02f      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80081f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081fa:	d826      	bhi.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80081fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008200:	d02b      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008202:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008206:	d820      	bhi.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800820c:	d012      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800820e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008212:	d81a      	bhi.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008214:	2b00      	cmp	r3, #0
 8008216:	d022      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800821c:	d115      	bne.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800821e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008222:	3308      	adds	r3, #8
 8008224:	2100      	movs	r1, #0
 8008226:	4618      	mov	r0, r3
 8008228:	f001 fbf6 	bl	8009a18 <RCCEx_PLL2_Config>
 800822c:	4603      	mov	r3, r0
 800822e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008232:	e015      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008238:	3328      	adds	r3, #40	; 0x28
 800823a:	2102      	movs	r1, #2
 800823c:	4618      	mov	r0, r3
 800823e:	f001 fc9d 	bl	8009b7c <RCCEx_PLL3_Config>
 8008242:	4603      	mov	r3, r0
 8008244:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008248:	e00a      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008250:	e006      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008252:	bf00      	nop
 8008254:	e004      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008256:	bf00      	nop
 8008258:	e002      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800825a:	bf00      	nop
 800825c:	e000      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800825e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008260:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10b      	bne.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008268:	4ba0      	ldr	r3, [pc, #640]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800826a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008274:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008278:	4a9c      	ldr	r2, [pc, #624]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800827a:	430b      	orrs	r3, r1
 800827c:	6593      	str	r3, [r2, #88]	; 0x58
 800827e:	e003      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008280:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008284:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800828c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008290:	f002 0308 	and.w	r3, r2, #8
 8008294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008298:	2300      	movs	r3, #0
 800829a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800829e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80082a2:	460b      	mov	r3, r1
 80082a4:	4313      	orrs	r3, r2
 80082a6:	d01e      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80082a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082b4:	d10c      	bne.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ba:	3328      	adds	r3, #40	; 0x28
 80082bc:	2102      	movs	r1, #2
 80082be:	4618      	mov	r0, r3
 80082c0:	f001 fc5c 	bl	8009b7c <RCCEx_PLL3_Config>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80082d0:	4b86      	ldr	r3, [pc, #536]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082e0:	4a82      	ldr	r2, [pc, #520]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80082e2:	430b      	orrs	r3, r1
 80082e4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f002 0310 	and.w	r3, r2, #16
 80082f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082f6:	2300      	movs	r3, #0
 80082f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80082fc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008300:	460b      	mov	r3, r1
 8008302:	4313      	orrs	r3, r2
 8008304:	d01e      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800830a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800830e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008312:	d10c      	bne.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008318:	3328      	adds	r3, #40	; 0x28
 800831a:	2102      	movs	r1, #2
 800831c:	4618      	mov	r0, r3
 800831e:	f001 fc2d 	bl	8009b7c <RCCEx_PLL3_Config>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800832e:	4b6f      	ldr	r3, [pc, #444]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008332:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800833a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800833e:	4a6b      	ldr	r2, [pc, #428]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008340:	430b      	orrs	r3, r1
 8008342:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008350:	67bb      	str	r3, [r7, #120]	; 0x78
 8008352:	2300      	movs	r3, #0
 8008354:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008356:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800835a:	460b      	mov	r3, r1
 800835c:	4313      	orrs	r3, r2
 800835e:	d03e      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008364:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800836c:	d022      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800836e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008372:	d81b      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008374:	2b00      	cmp	r3, #0
 8008376:	d003      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800837c:	d00b      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800837e:	e015      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008384:	3308      	adds	r3, #8
 8008386:	2100      	movs	r1, #0
 8008388:	4618      	mov	r0, r3
 800838a:	f001 fb45 	bl	8009a18 <RCCEx_PLL2_Config>
 800838e:	4603      	mov	r3, r0
 8008390:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008394:	e00f      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800839a:	3328      	adds	r3, #40	; 0x28
 800839c:	2102      	movs	r1, #2
 800839e:	4618      	mov	r0, r3
 80083a0:	f001 fbec 	bl	8009b7c <RCCEx_PLL3_Config>
 80083a4:	4603      	mov	r3, r0
 80083a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80083aa:	e004      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80083b2:	e000      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80083b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10b      	bne.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083be:	4b4b      	ldr	r3, [pc, #300]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80083c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80083ce:	4a47      	ldr	r2, [pc, #284]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80083d0:	430b      	orrs	r3, r1
 80083d2:	6593      	str	r3, [r2, #88]	; 0x58
 80083d4:	e003      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80083da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80083ea:	673b      	str	r3, [r7, #112]	; 0x70
 80083ec:	2300      	movs	r3, #0
 80083ee:	677b      	str	r3, [r7, #116]	; 0x74
 80083f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80083f4:	460b      	mov	r3, r1
 80083f6:	4313      	orrs	r3, r2
 80083f8:	d03b      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80083fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008402:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008406:	d01f      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008408:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800840c:	d818      	bhi.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800840e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008412:	d003      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008418:	d007      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800841a:	e011      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800841c:	4b33      	ldr	r3, [pc, #204]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008420:	4a32      	ldr	r2, [pc, #200]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008426:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008428:	e00f      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800842a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800842e:	3328      	adds	r3, #40	; 0x28
 8008430:	2101      	movs	r1, #1
 8008432:	4618      	mov	r0, r3
 8008434:	f001 fba2 	bl	8009b7c <RCCEx_PLL3_Config>
 8008438:	4603      	mov	r3, r0
 800843a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800843e:	e004      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008446:	e000      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800844a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10b      	bne.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008452:	4b26      	ldr	r3, [pc, #152]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008456:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800845a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800845e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008462:	4a22      	ldr	r2, [pc, #136]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008464:	430b      	orrs	r3, r1
 8008466:	6553      	str	r3, [r2, #84]	; 0x54
 8008468:	e003      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800846a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800846e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800847e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008480:	2300      	movs	r3, #0
 8008482:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008484:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008488:	460b      	mov	r3, r1
 800848a:	4313      	orrs	r3, r2
 800848c:	d034      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800848e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800849c:	d007      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800849e:	e011      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084a0:	4b12      	ldr	r3, [pc, #72]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	4a11      	ldr	r2, [pc, #68]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80084ac:	e00e      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084b2:	3308      	adds	r3, #8
 80084b4:	2102      	movs	r1, #2
 80084b6:	4618      	mov	r0, r3
 80084b8:	f001 faae 	bl	8009a18 <RCCEx_PLL2_Config>
 80084bc:	4603      	mov	r3, r0
 80084be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80084c2:	e003      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80084ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10d      	bne.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80084d4:	4b05      	ldr	r3, [pc, #20]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e2:	4a02      	ldr	r2, [pc, #8]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80084e4:	430b      	orrs	r3, r1
 80084e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084e8:	e006      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80084ea:	bf00      	nop
 80084ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80084f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80084f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008504:	663b      	str	r3, [r7, #96]	; 0x60
 8008506:	2300      	movs	r3, #0
 8008508:	667b      	str	r3, [r7, #100]	; 0x64
 800850a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800850e:	460b      	mov	r3, r1
 8008510:	4313      	orrs	r3, r2
 8008512:	d00c      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008518:	3328      	adds	r3, #40	; 0x28
 800851a:	2102      	movs	r1, #2
 800851c:	4618      	mov	r0, r3
 800851e:	f001 fb2d 	bl	8009b7c <RCCEx_PLL3_Config>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800852e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008536:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800853a:	65bb      	str	r3, [r7, #88]	; 0x58
 800853c:	2300      	movs	r3, #0
 800853e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008540:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008544:	460b      	mov	r3, r1
 8008546:	4313      	orrs	r3, r2
 8008548:	d036      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800854a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008554:	d018      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800855a:	d811      	bhi.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800855c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008560:	d014      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008566:	d80b      	bhi.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008568:	2b00      	cmp	r3, #0
 800856a:	d011      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800856c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008570:	d106      	bne.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008572:	4bb7      	ldr	r3, [pc, #732]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008576:	4ab6      	ldr	r2, [pc, #728]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800857c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800857e:	e008      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008586:	e004      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008588:	bf00      	nop
 800858a:	e002      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800858c:	bf00      	nop
 800858e:	e000      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008592:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10a      	bne.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800859a:	4bad      	ldr	r3, [pc, #692]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800859c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800859e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085a8:	4aa9      	ldr	r2, [pc, #676]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085aa:	430b      	orrs	r3, r1
 80085ac:	6553      	str	r3, [r2, #84]	; 0x54
 80085ae:	e003      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80085b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80085c4:	653b      	str	r3, [r7, #80]	; 0x50
 80085c6:	2300      	movs	r3, #0
 80085c8:	657b      	str	r3, [r7, #84]	; 0x54
 80085ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80085ce:	460b      	mov	r3, r1
 80085d0:	4313      	orrs	r3, r2
 80085d2:	d009      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80085d4:	4b9e      	ldr	r3, [pc, #632]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80085dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e2:	4a9b      	ldr	r2, [pc, #620]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80085e4:	430b      	orrs	r3, r1
 80085e6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80085e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80085f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80085f6:	2300      	movs	r3, #0
 80085f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085fa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80085fe:	460b      	mov	r3, r1
 8008600:	4313      	orrs	r3, r2
 8008602:	d009      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008604:	4b92      	ldr	r3, [pc, #584]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008608:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800860c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008612:	4a8f      	ldr	r2, [pc, #572]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008614:	430b      	orrs	r3, r1
 8008616:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008624:	643b      	str	r3, [r7, #64]	; 0x40
 8008626:	2300      	movs	r3, #0
 8008628:	647b      	str	r3, [r7, #68]	; 0x44
 800862a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800862e:	460b      	mov	r3, r1
 8008630:	4313      	orrs	r3, r2
 8008632:	d00e      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008634:	4b86      	ldr	r3, [pc, #536]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	4a85      	ldr	r2, [pc, #532]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800863a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800863e:	6113      	str	r3, [r2, #16]
 8008640:	4b83      	ldr	r3, [pc, #524]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008642:	6919      	ldr	r1, [r3, #16]
 8008644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008648:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800864c:	4a80      	ldr	r2, [pc, #512]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800864e:	430b      	orrs	r3, r1
 8008650:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800865e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008660:	2300      	movs	r3, #0
 8008662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008664:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008668:	460b      	mov	r3, r1
 800866a:	4313      	orrs	r3, r2
 800866c:	d009      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800866e:	4b78      	ldr	r3, [pc, #480]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008672:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800867a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867c:	4a74      	ldr	r2, [pc, #464]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800867e:	430b      	orrs	r3, r1
 8008680:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800868e:	633b      	str	r3, [r7, #48]	; 0x30
 8008690:	2300      	movs	r3, #0
 8008692:	637b      	str	r3, [r7, #52]	; 0x34
 8008694:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008698:	460b      	mov	r3, r1
 800869a:	4313      	orrs	r3, r2
 800869c:	d00a      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800869e:	4b6c      	ldr	r3, [pc, #432]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80086a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80086a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ae:	4a68      	ldr	r2, [pc, #416]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80086b0:	430b      	orrs	r3, r1
 80086b2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80086b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	2100      	movs	r1, #0
 80086be:	62b9      	str	r1, [r7, #40]	; 0x28
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80086ca:	460b      	mov	r3, r1
 80086cc:	4313      	orrs	r3, r2
 80086ce:	d011      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086d4:	3308      	adds	r3, #8
 80086d6:	2100      	movs	r1, #0
 80086d8:	4618      	mov	r0, r3
 80086da:	f001 f99d 	bl	8009a18 <RCCEx_PLL2_Config>
 80086de:	4603      	mov	r3, r0
 80086e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80086e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d003      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80086f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80086f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	2100      	movs	r1, #0
 80086fe:	6239      	str	r1, [r7, #32]
 8008700:	f003 0302 	and.w	r3, r3, #2
 8008704:	627b      	str	r3, [r7, #36]	; 0x24
 8008706:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800870a:	460b      	mov	r3, r1
 800870c:	4313      	orrs	r3, r2
 800870e:	d011      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008714:	3308      	adds	r3, #8
 8008716:	2101      	movs	r1, #1
 8008718:	4618      	mov	r0, r3
 800871a:	f001 f97d 	bl	8009a18 <RCCEx_PLL2_Config>
 800871e:	4603      	mov	r3, r0
 8008720:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008724:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008728:	2b00      	cmp	r3, #0
 800872a:	d003      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800872c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008730:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873c:	2100      	movs	r1, #0
 800873e:	61b9      	str	r1, [r7, #24]
 8008740:	f003 0304 	and.w	r3, r3, #4
 8008744:	61fb      	str	r3, [r7, #28]
 8008746:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800874a:	460b      	mov	r3, r1
 800874c:	4313      	orrs	r3, r2
 800874e:	d011      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008754:	3308      	adds	r3, #8
 8008756:	2102      	movs	r1, #2
 8008758:	4618      	mov	r0, r3
 800875a:	f001 f95d 	bl	8009a18 <RCCEx_PLL2_Config>
 800875e:	4603      	mov	r3, r0
 8008760:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008764:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008770:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877c:	2100      	movs	r1, #0
 800877e:	6139      	str	r1, [r7, #16]
 8008780:	f003 0308 	and.w	r3, r3, #8
 8008784:	617b      	str	r3, [r7, #20]
 8008786:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800878a:	460b      	mov	r3, r1
 800878c:	4313      	orrs	r3, r2
 800878e:	d011      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008794:	3328      	adds	r3, #40	; 0x28
 8008796:	2100      	movs	r1, #0
 8008798:	4618      	mov	r0, r3
 800879a:	f001 f9ef 	bl	8009b7c <RCCEx_PLL3_Config>
 800879e:	4603      	mov	r3, r0
 80087a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80087a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80087b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80087b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087bc:	2100      	movs	r1, #0
 80087be:	60b9      	str	r1, [r7, #8]
 80087c0:	f003 0310 	and.w	r3, r3, #16
 80087c4:	60fb      	str	r3, [r7, #12]
 80087c6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80087ca:	460b      	mov	r3, r1
 80087cc:	4313      	orrs	r3, r2
 80087ce:	d011      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087d4:	3328      	adds	r3, #40	; 0x28
 80087d6:	2101      	movs	r1, #1
 80087d8:	4618      	mov	r0, r3
 80087da:	f001 f9cf 	bl	8009b7c <RCCEx_PLL3_Config>
 80087de:	4603      	mov	r3, r0
 80087e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80087e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d003      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80087f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80087f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	2100      	movs	r1, #0
 80087fe:	6039      	str	r1, [r7, #0]
 8008800:	f003 0320 	and.w	r3, r3, #32
 8008804:	607b      	str	r3, [r7, #4]
 8008806:	e9d7 1200 	ldrd	r1, r2, [r7]
 800880a:	460b      	mov	r3, r1
 800880c:	4313      	orrs	r3, r2
 800880e:	d011      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008814:	3328      	adds	r3, #40	; 0x28
 8008816:	2102      	movs	r1, #2
 8008818:	4618      	mov	r0, r3
 800881a:	f001 f9af 	bl	8009b7c <RCCEx_PLL3_Config>
 800881e:	4603      	mov	r3, r0
 8008820:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008824:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008828:	2b00      	cmp	r3, #0
 800882a:	d003      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008830:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8008834:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	e000      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
}
 8008842:	4618      	mov	r0, r3
 8008844:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8008848:	46bd      	mov	sp, r7
 800884a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800884e:	bf00      	nop
 8008850:	58024400 	.word	0x58024400

08008854 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b090      	sub	sp, #64	; 0x40
 8008858:	af00      	add	r7, sp, #0
 800885a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800885e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008862:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008866:	430b      	orrs	r3, r1
 8008868:	f040 8094 	bne.w	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800886c:	4b9b      	ldr	r3, [pc, #620]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800886e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008870:	f003 0307 	and.w	r3, r3, #7
 8008874:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	2b04      	cmp	r3, #4
 800887a:	f200 8087 	bhi.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800887e:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	08008899 	.word	0x08008899
 8008888:	080088c1 	.word	0x080088c1
 800888c:	080088e9 	.word	0x080088e9
 8008890:	08008985 	.word	0x08008985
 8008894:	08008911 	.word	0x08008911
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008898:	4b90      	ldr	r3, [pc, #576]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088a4:	d108      	bne.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 ff62 	bl	8009774 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088b4:	f000 bc93 	b.w	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088bc:	f000 bc8f 	b.w	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088c0:	4b86      	ldr	r3, [pc, #536]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088cc:	d108      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ce:	f107 0318 	add.w	r3, r7, #24
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fca6 	bl	8009224 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088dc:	f000 bc7f 	b.w	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088e4:	f000 bc7b 	b.w	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088e8:	4b7c      	ldr	r3, [pc, #496]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088f4:	d108      	bne.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088f6:	f107 030c 	add.w	r3, r7, #12
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fde6 	bl	80094cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008904:	f000 bc6b 	b.w	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008908:	2300      	movs	r3, #0
 800890a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800890c:	f000 bc67 	b.w	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008910:	4b72      	ldr	r3, [pc, #456]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008914:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008918:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800891a:	4b70      	ldr	r3, [pc, #448]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0304 	and.w	r3, r3, #4
 8008922:	2b04      	cmp	r3, #4
 8008924:	d10c      	bne.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008928:	2b00      	cmp	r3, #0
 800892a:	d109      	bne.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800892c:	4b6b      	ldr	r3, [pc, #428]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	08db      	lsrs	r3, r3, #3
 8008932:	f003 0303 	and.w	r3, r3, #3
 8008936:	4a6a      	ldr	r2, [pc, #424]	; (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008938:	fa22 f303 	lsr.w	r3, r2, r3
 800893c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800893e:	e01f      	b.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008940:	4b66      	ldr	r3, [pc, #408]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800894c:	d106      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800894e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008954:	d102      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008956:	4b63      	ldr	r3, [pc, #396]	; (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800895a:	e011      	b.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800895c:	4b5f      	ldr	r3, [pc, #380]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008968:	d106      	bne.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800896a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008970:	d102      	bne.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008972:	4b5d      	ldr	r3, [pc, #372]	; (8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008976:	e003      	b.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800897c:	f000 bc2f 	b.w	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008980:	f000 bc2d 	b.w	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008984:	4b59      	ldr	r3, [pc, #356]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008988:	f000 bc29 	b.w	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008990:	f000 bc25 	b.w	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008998:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800899c:	430b      	orrs	r3, r1
 800899e:	f040 80a7 	bne.w	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80089a2:	4b4e      	ldr	r3, [pc, #312]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80089a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80089aa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80089ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089b2:	d054      	beq.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089ba:	f200 808b 	bhi.w	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80089c4:	f000 8083 	beq.w	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80089ce:	f200 8081 	bhi.w	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089d8:	d02f      	beq.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089e0:	d878      	bhi.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80089e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d004      	beq.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80089e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089ee:	d012      	beq.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80089f0:	e070      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089f2:	4b3a      	ldr	r3, [pc, #232]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089fe:	d107      	bne.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 feb5 	bl	8009774 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a0e:	e3e6      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a14:	e3e3      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a16:	4b31      	ldr	r3, [pc, #196]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a22:	d107      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a24:	f107 0318 	add.w	r3, r7, #24
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 fbfb 	bl	8009224 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a32:	e3d4      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a38:	e3d1      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a3a:	4b28      	ldr	r3, [pc, #160]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a46:	d107      	bne.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a48:	f107 030c 	add.w	r3, r7, #12
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 fd3d 	bl	80094cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a56:	e3c2      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a5c:	e3bf      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a5e:	4b1f      	ldr	r3, [pc, #124]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a66:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a68:	4b1c      	ldr	r3, [pc, #112]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b04      	cmp	r3, #4
 8008a72:	d10c      	bne.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d109      	bne.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a7a:	4b18      	ldr	r3, [pc, #96]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	08db      	lsrs	r3, r3, #3
 8008a80:	f003 0303 	and.w	r3, r3, #3
 8008a84:	4a16      	ldr	r2, [pc, #88]	; (8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008a86:	fa22 f303 	lsr.w	r3, r2, r3
 8008a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a8c:	e01e      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a8e:	4b13      	ldr	r3, [pc, #76]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a9a:	d106      	bne.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008aa2:	d102      	bne.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008aa4:	4b0f      	ldr	r3, [pc, #60]	; (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aa8:	e010      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008aaa:	4b0c      	ldr	r3, [pc, #48]	; (8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ab6:	d106      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008abe:	d102      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ac0:	4b09      	ldr	r3, [pc, #36]	; (8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ac4:	e002      	b.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008aca:	e388      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008acc:	e387      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ace:	4b07      	ldr	r3, [pc, #28]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ad2:	e384      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ad8:	e381      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008ada:	bf00      	nop
 8008adc:	58024400 	.word	0x58024400
 8008ae0:	03d09000 	.word	0x03d09000
 8008ae4:	003d0900 	.word	0x003d0900
 8008ae8:	017d7840 	.word	0x017d7840
 8008aec:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008af4:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008af8:	430b      	orrs	r3, r1
 8008afa:	f040 809c 	bne.w	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008afe:	4b9e      	ldr	r3, [pc, #632]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b02:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008b06:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b0e:	d054      	beq.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b16:	f200 808b 	bhi.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b20:	f000 8083 	beq.w	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b2a:	f200 8081 	bhi.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b34:	d02f      	beq.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b3c:	d878      	bhi.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d004      	beq.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b4a:	d012      	beq.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008b4c:	e070      	b.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b4e:	4b8a      	ldr	r3, [pc, #552]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b5a:	d107      	bne.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 fe07 	bl	8009774 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b6a:	e338      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b70:	e335      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b72:	4b81      	ldr	r3, [pc, #516]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b7e:	d107      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b80:	f107 0318 	add.w	r3, r7, #24
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 fb4d 	bl	8009224 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b8e:	e326      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b94:	e323      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b96:	4b78      	ldr	r3, [pc, #480]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ba2:	d107      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ba4:	f107 030c 	add.w	r3, r7, #12
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 fc8f 	bl	80094cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bb2:	e314      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bb8:	e311      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bba:	4b6f      	ldr	r3, [pc, #444]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bc2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bc4:	4b6c      	ldr	r3, [pc, #432]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d10c      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d109      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bd6:	4b68      	ldr	r3, [pc, #416]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	08db      	lsrs	r3, r3, #3
 8008bdc:	f003 0303 	and.w	r3, r3, #3
 8008be0:	4a66      	ldr	r2, [pc, #408]	; (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008be2:	fa22 f303 	lsr.w	r3, r2, r3
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008be8:	e01e      	b.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bea:	4b63      	ldr	r3, [pc, #396]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf6:	d106      	bne.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bfe:	d102      	bne.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c00:	4b5f      	ldr	r3, [pc, #380]	; (8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c04:	e010      	b.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c06:	4b5c      	ldr	r3, [pc, #368]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c12:	d106      	bne.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c1a:	d102      	bne.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c1c:	4b59      	ldr	r3, [pc, #356]	; (8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c20:	e002      	b.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008c26:	e2da      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c28:	e2d9      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c2a:	4b57      	ldr	r3, [pc, #348]	; (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c2e:	e2d6      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c34:	e2d3      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008c36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c3a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008c3e:	430b      	orrs	r3, r1
 8008c40:	f040 80a7 	bne.w	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008c44:	4b4c      	ldr	r3, [pc, #304]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c48:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008c4c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c54:	d055      	beq.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c5c:	f200 8096 	bhi.w	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c66:	f000 8084 	beq.w	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c70:	f200 808c 	bhi.w	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c7a:	d030      	beq.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c82:	f200 8083 	bhi.w	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d004      	beq.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c92:	d012      	beq.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008c94:	e07a      	b.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c96:	4b38      	ldr	r3, [pc, #224]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ca2:	d107      	bne.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 fd63 	bl	8009774 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cb2:	e294      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cb8:	e291      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cba:	4b2f      	ldr	r3, [pc, #188]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cc6:	d107      	bne.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cc8:	f107 0318 	add.w	r3, r7, #24
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 faa9 	bl	8009224 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cd6:	e282      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cdc:	e27f      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cde:	4b26      	ldr	r3, [pc, #152]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cea:	d107      	bne.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cec:	f107 030c 	add.w	r3, r7, #12
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 fbeb 	bl	80094cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cfa:	e270      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d00:	e26d      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d02:	4b1d      	ldr	r3, [pc, #116]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d0c:	4b1a      	ldr	r3, [pc, #104]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0304 	and.w	r3, r3, #4
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d10c      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d109      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d1e:	4b16      	ldr	r3, [pc, #88]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	08db      	lsrs	r3, r3, #3
 8008d24:	f003 0303 	and.w	r3, r3, #3
 8008d28:	4a14      	ldr	r2, [pc, #80]	; (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d30:	e01e      	b.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d32:	4b11      	ldr	r3, [pc, #68]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d3e:	d106      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d46:	d102      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d48:	4b0d      	ldr	r3, [pc, #52]	; (8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d4c:	e010      	b.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d4e:	4b0a      	ldr	r3, [pc, #40]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d5a:	d106      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d62:	d102      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d64:	4b07      	ldr	r3, [pc, #28]	; (8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d68:	e002      	b.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008d6e:	e236      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d70:	e235      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d72:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d76:	e232      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d78:	58024400 	.word	0x58024400
 8008d7c:	03d09000 	.word	0x03d09000
 8008d80:	003d0900 	.word	0x003d0900
 8008d84:	017d7840 	.word	0x017d7840
 8008d88:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d90:	e225      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d96:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008d9a:	430b      	orrs	r3, r1
 8008d9c:	f040 8085 	bne.w	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008da0:	4b9c      	ldr	r3, [pc, #624]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008da8:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008db0:	d06b      	beq.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008db8:	d874      	bhi.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008dc0:	d056      	beq.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008dc8:	d86c      	bhi.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dcc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008dd0:	d03b      	beq.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008dd8:	d864      	bhi.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008de0:	d021      	beq.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008de8:	d85c      	bhi.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d004      	beq.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008df6:	d004      	beq.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008df8:	e054      	b.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008dfa:	f7fe fb75 	bl	80074e8 <HAL_RCC_GetPCLK1Freq>
 8008dfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e00:	e1ed      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e02:	4b84      	ldr	r3, [pc, #528]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e0e:	d107      	bne.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e10:	f107 0318 	add.w	r3, r7, #24
 8008e14:	4618      	mov	r0, r3
 8008e16:	f000 fa05 	bl	8009224 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e1e:	e1de      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e20:	2300      	movs	r3, #0
 8008e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e24:	e1db      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e26:	4b7b      	ldr	r3, [pc, #492]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e32:	d107      	bne.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e34:	f107 030c 	add.w	r3, r7, #12
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 fb47 	bl	80094cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e42:	e1cc      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e48:	e1c9      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e4a:	4b72      	ldr	r3, [pc, #456]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0304 	and.w	r3, r3, #4
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	d109      	bne.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e56:	4b6f      	ldr	r3, [pc, #444]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	08db      	lsrs	r3, r3, #3
 8008e5c:	f003 0303 	and.w	r3, r3, #3
 8008e60:	4a6d      	ldr	r2, [pc, #436]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008e62:	fa22 f303 	lsr.w	r3, r2, r3
 8008e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e68:	e1b9      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e6e:	e1b6      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008e70:	4b68      	ldr	r3, [pc, #416]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e7c:	d102      	bne.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008e7e:	4b67      	ldr	r3, [pc, #412]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e82:	e1ac      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e84:	2300      	movs	r3, #0
 8008e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e88:	e1a9      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e8a:	4b62      	ldr	r3, [pc, #392]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e96:	d102      	bne.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008e98:	4b61      	ldr	r3, [pc, #388]	; (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e9c:	e19f      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ea2:	e19c      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ea8:	e199      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eae:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008eb2:	430b      	orrs	r3, r1
 8008eb4:	d173      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008eb6:	4b57      	ldr	r3, [pc, #348]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ebe:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ec6:	d02f      	beq.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ece:	d863      	bhi.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d004      	beq.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008edc:	d012      	beq.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008ede:	e05b      	b.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ee0:	4b4c      	ldr	r3, [pc, #304]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008eec:	d107      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eee:	f107 0318 	add.w	r3, r7, #24
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 f996 	bl	8009224 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008efc:	e16f      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f02:	e16c      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f04:	4b43      	ldr	r3, [pc, #268]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f10:	d107      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f12:	f107 030c 	add.w	r3, r7, #12
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 fad8 	bl	80094cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f20:	e15d      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f26:	e15a      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f28:	4b3a      	ldr	r3, [pc, #232]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f30:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f32:	4b38      	ldr	r3, [pc, #224]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0304 	and.w	r3, r3, #4
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	d10c      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d109      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f44:	4b33      	ldr	r3, [pc, #204]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	08db      	lsrs	r3, r3, #3
 8008f4a:	f003 0303 	and.w	r3, r3, #3
 8008f4e:	4a32      	ldr	r2, [pc, #200]	; (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008f50:	fa22 f303 	lsr.w	r3, r2, r3
 8008f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f56:	e01e      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f58:	4b2e      	ldr	r3, [pc, #184]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f64:	d106      	bne.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f6c:	d102      	bne.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f6e:	4b2b      	ldr	r3, [pc, #172]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f72:	e010      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f74:	4b27      	ldr	r3, [pc, #156]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f80:	d106      	bne.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f88:	d102      	bne.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f8a:	4b25      	ldr	r3, [pc, #148]	; (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f8e:	e002      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008f94:	e123      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f96:	e122      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f9c:	e11f      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa2:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008fa6:	430b      	orrs	r3, r1
 8008fa8:	d13c      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008faa:	4b1a      	ldr	r3, [pc, #104]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fb2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d004      	beq.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fc0:	d012      	beq.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008fc2:	e023      	b.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fc4:	4b13      	ldr	r3, [pc, #76]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fd0:	d107      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 fbcc 	bl	8009774 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fe0:	e0fd      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fe6:	e0fa      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fe8:	4b0a      	ldr	r3, [pc, #40]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ff4:	d107      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ff6:	f107 0318 	add.w	r3, r7, #24
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 f912 	bl	8009224 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009004:	e0eb      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800900a:	e0e8      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800900c:	2300      	movs	r3, #0
 800900e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009010:	e0e5      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009012:	bf00      	nop
 8009014:	58024400 	.word	0x58024400
 8009018:	03d09000 	.word	0x03d09000
 800901c:	003d0900 	.word	0x003d0900
 8009020:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009028:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800902c:	430b      	orrs	r3, r1
 800902e:	f040 8085 	bne.w	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009032:	4b6d      	ldr	r3, [pc, #436]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009036:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800903a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800903c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009042:	d06b      	beq.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800904a:	d874      	bhi.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009052:	d056      	beq.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800905a:	d86c      	bhi.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800905c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009062:	d03b      	beq.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800906a:	d864      	bhi.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800906c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009072:	d021      	beq.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8009074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800907a:	d85c      	bhi.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	2b00      	cmp	r3, #0
 8009080:	d004      	beq.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8009082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009088:	d004      	beq.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800908a:	e054      	b.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800908c:	f000 f8b4 	bl	80091f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009090:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009092:	e0a4      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009094:	4b54      	ldr	r3, [pc, #336]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800909c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090a0:	d107      	bne.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090a2:	f107 0318 	add.w	r3, r7, #24
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 f8bc 	bl	8009224 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090b0:	e095      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090b2:	2300      	movs	r3, #0
 80090b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090b6:	e092      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090b8:	4b4b      	ldr	r3, [pc, #300]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090c4:	d107      	bne.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090c6:	f107 030c 	add.w	r3, r7, #12
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 f9fe 	bl	80094cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090d4:	e083      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090da:	e080      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090dc:	4b42      	ldr	r3, [pc, #264]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 0304 	and.w	r3, r3, #4
 80090e4:	2b04      	cmp	r3, #4
 80090e6:	d109      	bne.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090e8:	4b3f      	ldr	r3, [pc, #252]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	08db      	lsrs	r3, r3, #3
 80090ee:	f003 0303 	and.w	r3, r3, #3
 80090f2:	4a3e      	ldr	r2, [pc, #248]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80090f4:	fa22 f303 	lsr.w	r3, r2, r3
 80090f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090fa:	e070      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009100:	e06d      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009102:	4b39      	ldr	r3, [pc, #228]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800910a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800910e:	d102      	bne.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8009110:	4b37      	ldr	r3, [pc, #220]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009112:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009114:	e063      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800911a:	e060      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800911c:	4b32      	ldr	r3, [pc, #200]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009128:	d102      	bne.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800912a:	4b32      	ldr	r3, [pc, #200]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800912c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800912e:	e056      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009130:	2300      	movs	r3, #0
 8009132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009134:	e053      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009136:	2300      	movs	r3, #0
 8009138:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800913a:	e050      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800913c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009140:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009144:	430b      	orrs	r3, r1
 8009146:	d148      	bne.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009148:	4b27      	ldr	r3, [pc, #156]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800914a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800914c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009150:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009158:	d02a      	beq.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800915a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009160:	d838      	bhi.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009164:	2b00      	cmp	r3, #0
 8009166:	d004      	beq.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800916e:	d00d      	beq.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009170:	e030      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009172:	4b1d      	ldr	r3, [pc, #116]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800917a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800917e:	d102      	bne.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8009180:	4b1c      	ldr	r3, [pc, #112]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009182:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009184:	e02b      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009186:	2300      	movs	r3, #0
 8009188:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800918a:	e028      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800918c:	4b16      	ldr	r3, [pc, #88]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009194:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009198:	d107      	bne.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800919a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 fae8 	bl	8009774 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091a8:	e019      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091aa:	2300      	movs	r3, #0
 80091ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091ae:	e016      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091b0:	4b0d      	ldr	r3, [pc, #52]	; (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091bc:	d107      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091be:	f107 0318 	add.w	r3, r7, #24
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 f82e 	bl	8009224 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091cc:	e007      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091d2:	e004      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80091d4:	2300      	movs	r3, #0
 80091d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091d8:	e001      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80091de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3740      	adds	r7, #64	; 0x40
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	58024400 	.word	0x58024400
 80091ec:	03d09000 	.word	0x03d09000
 80091f0:	003d0900 	.word	0x003d0900
 80091f4:	017d7840 	.word	0x017d7840

080091f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80091fc:	f7fe f944 	bl	8007488 <HAL_RCC_GetHCLKFreq>
 8009200:	4602      	mov	r2, r0
 8009202:	4b06      	ldr	r3, [pc, #24]	; (800921c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	091b      	lsrs	r3, r3, #4
 8009208:	f003 0307 	and.w	r3, r3, #7
 800920c:	4904      	ldr	r1, [pc, #16]	; (8009220 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800920e:	5ccb      	ldrb	r3, [r1, r3]
 8009210:	f003 031f 	and.w	r3, r3, #31
 8009214:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009218:	4618      	mov	r0, r3
 800921a:	bd80      	pop	{r7, pc}
 800921c:	58024400 	.word	0x58024400
 8009220:	0800f7cc 	.word	0x0800f7cc

08009224 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009224:	b480      	push	{r7}
 8009226:	b089      	sub	sp, #36	; 0x24
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800922c:	4ba1      	ldr	r3, [pc, #644]	; (80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800922e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009230:	f003 0303 	and.w	r3, r3, #3
 8009234:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009236:	4b9f      	ldr	r3, [pc, #636]	; (80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923a:	0b1b      	lsrs	r3, r3, #12
 800923c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009240:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009242:	4b9c      	ldr	r3, [pc, #624]	; (80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009246:	091b      	lsrs	r3, r3, #4
 8009248:	f003 0301 	and.w	r3, r3, #1
 800924c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800924e:	4b99      	ldr	r3, [pc, #612]	; (80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009252:	08db      	lsrs	r3, r3, #3
 8009254:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	fb02 f303 	mul.w	r3, r2, r3
 800925e:	ee07 3a90 	vmov	s15, r3
 8009262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009266:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2b00      	cmp	r3, #0
 800926e:	f000 8111 	beq.w	8009494 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	2b02      	cmp	r3, #2
 8009276:	f000 8083 	beq.w	8009380 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	2b02      	cmp	r3, #2
 800927e:	f200 80a1 	bhi.w	80093c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d056      	beq.n	800933c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800928e:	e099      	b.n	80093c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009290:	4b88      	ldr	r3, [pc, #544]	; (80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0320 	and.w	r3, r3, #32
 8009298:	2b00      	cmp	r3, #0
 800929a:	d02d      	beq.n	80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800929c:	4b85      	ldr	r3, [pc, #532]	; (80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	08db      	lsrs	r3, r3, #3
 80092a2:	f003 0303 	and.w	r3, r3, #3
 80092a6:	4a84      	ldr	r2, [pc, #528]	; (80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80092a8:	fa22 f303 	lsr.w	r3, r2, r3
 80092ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	ee07 3a90 	vmov	s15, r3
 80092b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	ee07 3a90 	vmov	s15, r3
 80092be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092c6:	4b7b      	ldr	r3, [pc, #492]	; (80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ce:	ee07 3a90 	vmov	s15, r3
 80092d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80092da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80094bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80092f6:	e087      	b.n	8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	ee07 3a90 	vmov	s15, r3
 80092fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009302:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80094c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800930a:	4b6a      	ldr	r3, [pc, #424]	; (80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800930c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009312:	ee07 3a90 	vmov	s15, r3
 8009316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931a:	ed97 6a03 	vldr	s12, [r7, #12]
 800931e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80094bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800932a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800932e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800933a:	e065      	b.n	8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009346:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800934a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800934e:	4b59      	ldr	r3, [pc, #356]	; (80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009356:	ee07 3a90 	vmov	s15, r3
 800935a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800935e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009362:	eddf 5a56 	vldr	s11, [pc, #344]	; 80094bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800936a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800936e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800937a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800937e:	e043      	b.n	8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	ee07 3a90 	vmov	s15, r3
 8009386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800938e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009392:	4b48      	ldr	r3, [pc, #288]	; (80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939a:	ee07 3a90 	vmov	s15, r3
 800939e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80094bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093c2:	e021      	b.n	8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	ee07 3a90 	vmov	s15, r3
 80093ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80094c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093d6:	4b37      	ldr	r3, [pc, #220]	; (80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093de:	ee07 3a90 	vmov	s15, r3
 80093e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80094bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009406:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009408:	4b2a      	ldr	r3, [pc, #168]	; (80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800940a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940c:	0a5b      	lsrs	r3, r3, #9
 800940e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800941e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009422:	edd7 6a07 	vldr	s13, [r7, #28]
 8009426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800942a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800942e:	ee17 2a90 	vmov	r2, s15
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009436:	4b1f      	ldr	r3, [pc, #124]	; (80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943a:	0c1b      	lsrs	r3, r3, #16
 800943c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009440:	ee07 3a90 	vmov	s15, r3
 8009444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009448:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800944c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009450:	edd7 6a07 	vldr	s13, [r7, #28]
 8009454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800945c:	ee17 2a90 	vmov	r2, s15
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009464:	4b13      	ldr	r3, [pc, #76]	; (80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009468:	0e1b      	lsrs	r3, r3, #24
 800946a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009476:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800947a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800947e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800948a:	ee17 2a90 	vmov	r2, s15
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009492:	e008      	b.n	80094a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	609a      	str	r2, [r3, #8]
}
 80094a6:	bf00      	nop
 80094a8:	3724      	adds	r7, #36	; 0x24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	58024400 	.word	0x58024400
 80094b8:	03d09000 	.word	0x03d09000
 80094bc:	46000000 	.word	0x46000000
 80094c0:	4c742400 	.word	0x4c742400
 80094c4:	4a742400 	.word	0x4a742400
 80094c8:	4bbebc20 	.word	0x4bbebc20

080094cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b089      	sub	sp, #36	; 0x24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094d4:	4ba1      	ldr	r3, [pc, #644]	; (800975c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d8:	f003 0303 	and.w	r3, r3, #3
 80094dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80094de:	4b9f      	ldr	r3, [pc, #636]	; (800975c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e2:	0d1b      	lsrs	r3, r3, #20
 80094e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80094ea:	4b9c      	ldr	r3, [pc, #624]	; (800975c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ee:	0a1b      	lsrs	r3, r3, #8
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80094f6:	4b99      	ldr	r3, [pc, #612]	; (800975c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fa:	08db      	lsrs	r3, r3, #3
 80094fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	fb02 f303 	mul.w	r3, r2, r3
 8009506:	ee07 3a90 	vmov	s15, r3
 800950a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800950e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 8111 	beq.w	800973c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	2b02      	cmp	r3, #2
 800951e:	f000 8083 	beq.w	8009628 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	2b02      	cmp	r3, #2
 8009526:	f200 80a1 	bhi.w	800966c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d003      	beq.n	8009538 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d056      	beq.n	80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009536:	e099      	b.n	800966c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009538:	4b88      	ldr	r3, [pc, #544]	; (800975c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 0320 	and.w	r3, r3, #32
 8009540:	2b00      	cmp	r3, #0
 8009542:	d02d      	beq.n	80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009544:	4b85      	ldr	r3, [pc, #532]	; (800975c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	08db      	lsrs	r3, r3, #3
 800954a:	f003 0303 	and.w	r3, r3, #3
 800954e:	4a84      	ldr	r2, [pc, #528]	; (8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009550:	fa22 f303 	lsr.w	r3, r2, r3
 8009554:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	ee07 3a90 	vmov	s15, r3
 800955c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	ee07 3a90 	vmov	s15, r3
 8009566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800956e:	4b7b      	ldr	r3, [pc, #492]	; (800975c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009576:	ee07 3a90 	vmov	s15, r3
 800957a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800957e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009582:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009764 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800958a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800958e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800959a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800959e:	e087      	b.n	80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	ee07 3a90 	vmov	s15, r3
 80095a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009768 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80095ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b2:	4b6a      	ldr	r3, [pc, #424]	; (800975c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ba:	ee07 3a90 	vmov	s15, r3
 80095be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009764 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095e2:	e065      	b.n	80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800976c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095f6:	4b59      	ldr	r3, [pc, #356]	; (800975c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009606:	ed97 6a03 	vldr	s12, [r7, #12]
 800960a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009764 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800960e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800961a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800961e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009626:	e043      	b.n	80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	ee07 3a90 	vmov	s15, r3
 800962e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009632:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800963a:	4b48      	ldr	r3, [pc, #288]	; (800975c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800963c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800964a:	ed97 6a03 	vldr	s12, [r7, #12]
 800964e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009764 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800965a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800965e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800966a:	e021      	b.n	80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	ee07 3a90 	vmov	s15, r3
 8009672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009676:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800976c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800967a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800967e:	4b37      	ldr	r3, [pc, #220]	; (800975c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009686:	ee07 3a90 	vmov	s15, r3
 800968a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800968e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009692:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009764 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800969a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800969e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80096b0:	4b2a      	ldr	r3, [pc, #168]	; (800975c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b4:	0a5b      	lsrs	r3, r3, #9
 80096b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ba:	ee07 3a90 	vmov	s15, r3
 80096be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80096ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096d6:	ee17 2a90 	vmov	r2, s15
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80096de:	4b1f      	ldr	r3, [pc, #124]	; (800975c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e2:	0c1b      	lsrs	r3, r3, #16
 80096e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096e8:	ee07 3a90 	vmov	s15, r3
 80096ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80096fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009704:	ee17 2a90 	vmov	r2, s15
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800970c:	4b13      	ldr	r3, [pc, #76]	; (800975c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800970e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009710:	0e1b      	lsrs	r3, r3, #24
 8009712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009716:	ee07 3a90 	vmov	s15, r3
 800971a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009726:	edd7 6a07 	vldr	s13, [r7, #28]
 800972a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800972e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009732:	ee17 2a90 	vmov	r2, s15
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800973a:	e008      	b.n	800974e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	609a      	str	r2, [r3, #8]
}
 800974e:	bf00      	nop
 8009750:	3724      	adds	r7, #36	; 0x24
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	58024400 	.word	0x58024400
 8009760:	03d09000 	.word	0x03d09000
 8009764:	46000000 	.word	0x46000000
 8009768:	4c742400 	.word	0x4c742400
 800976c:	4a742400 	.word	0x4a742400
 8009770:	4bbebc20 	.word	0x4bbebc20

08009774 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009774:	b480      	push	{r7}
 8009776:	b089      	sub	sp, #36	; 0x24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800977c:	4ba0      	ldr	r3, [pc, #640]	; (8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800977e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009780:	f003 0303 	and.w	r3, r3, #3
 8009784:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009786:	4b9e      	ldr	r3, [pc, #632]	; (8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978a:	091b      	lsrs	r3, r3, #4
 800978c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009790:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009792:	4b9b      	ldr	r3, [pc, #620]	; (8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800979c:	4b98      	ldr	r3, [pc, #608]	; (8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800979e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a0:	08db      	lsrs	r3, r3, #3
 80097a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	fb02 f303 	mul.w	r3, r2, r3
 80097ac:	ee07 3a90 	vmov	s15, r3
 80097b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f000 8111 	beq.w	80099e2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	f000 8083 	beq.w	80098ce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	f200 80a1 	bhi.w	8009912 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d003      	beq.n	80097de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d056      	beq.n	800988a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80097dc:	e099      	b.n	8009912 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097de:	4b88      	ldr	r3, [pc, #544]	; (8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0320 	and.w	r3, r3, #32
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d02d      	beq.n	8009846 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097ea:	4b85      	ldr	r3, [pc, #532]	; (8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	08db      	lsrs	r3, r3, #3
 80097f0:	f003 0303 	and.w	r3, r3, #3
 80097f4:	4a83      	ldr	r2, [pc, #524]	; (8009a04 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80097f6:	fa22 f303 	lsr.w	r3, r2, r3
 80097fa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	ee07 3a90 	vmov	s15, r3
 8009802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	ee07 3a90 	vmov	s15, r3
 800980c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009814:	4b7a      	ldr	r3, [pc, #488]	; (8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800981c:	ee07 3a90 	vmov	s15, r3
 8009820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009824:	ed97 6a03 	vldr	s12, [r7, #12]
 8009828:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009a08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800982c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009830:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009834:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800983c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009840:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009844:	e087      	b.n	8009956 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	ee07 3a90 	vmov	s15, r3
 800984c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009850:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009858:	4b69      	ldr	r3, [pc, #420]	; (8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800985a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009860:	ee07 3a90 	vmov	s15, r3
 8009864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009868:	ed97 6a03 	vldr	s12, [r7, #12]
 800986c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009a08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009870:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800987c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009884:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009888:	e065      	b.n	8009956 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	ee07 3a90 	vmov	s15, r3
 8009890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009894:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009a10 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009898:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800989c:	4b58      	ldr	r3, [pc, #352]	; (8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800989e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a4:	ee07 3a90 	vmov	s15, r3
 80098a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80098b0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009a08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098cc:	e043      	b.n	8009956 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	ee07 3a90 	vmov	s15, r3
 80098d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009a14 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80098dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098e0:	4b47      	ldr	r3, [pc, #284]	; (8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e8:	ee07 3a90 	vmov	s15, r3
 80098ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80098f4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009a08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009900:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009904:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800990c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009910:	e021      	b.n	8009956 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	ee07 3a90 	vmov	s15, r3
 8009918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009920:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009924:	4b36      	ldr	r3, [pc, #216]	; (8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800992c:	ee07 3a90 	vmov	s15, r3
 8009930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009934:	ed97 6a03 	vldr	s12, [r7, #12]
 8009938:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009a08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800993c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009940:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009944:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009948:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800994c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009950:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009954:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009956:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800995a:	0a5b      	lsrs	r3, r3, #9
 800995c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009960:	ee07 3a90 	vmov	s15, r3
 8009964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009968:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800996c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009970:	edd7 6a07 	vldr	s13, [r7, #28]
 8009974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800997c:	ee17 2a90 	vmov	r2, s15
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009984:	4b1e      	ldr	r3, [pc, #120]	; (8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009988:	0c1b      	lsrs	r3, r3, #16
 800998a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800998e:	ee07 3a90 	vmov	s15, r3
 8009992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800999a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800999e:	edd7 6a07 	vldr	s13, [r7, #28]
 80099a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099aa:	ee17 2a90 	vmov	r2, s15
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80099b2:	4b13      	ldr	r3, [pc, #76]	; (8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b6:	0e1b      	lsrs	r3, r3, #24
 80099b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099bc:	ee07 3a90 	vmov	s15, r3
 80099c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80099d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099d8:	ee17 2a90 	vmov	r2, s15
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80099e0:	e008      	b.n	80099f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	609a      	str	r2, [r3, #8]
}
 80099f4:	bf00      	nop
 80099f6:	3724      	adds	r7, #36	; 0x24
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	58024400 	.word	0x58024400
 8009a04:	03d09000 	.word	0x03d09000
 8009a08:	46000000 	.word	0x46000000
 8009a0c:	4c742400 	.word	0x4c742400
 8009a10:	4a742400 	.word	0x4a742400
 8009a14:	4bbebc20 	.word	0x4bbebc20

08009a18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a26:	4b53      	ldr	r3, [pc, #332]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2a:	f003 0303 	and.w	r3, r3, #3
 8009a2e:	2b03      	cmp	r3, #3
 8009a30:	d101      	bne.n	8009a36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e099      	b.n	8009b6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a36:	4b4f      	ldr	r3, [pc, #316]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a4e      	ldr	r2, [pc, #312]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009a3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a42:	f7f8 f8a7 	bl	8001b94 <HAL_GetTick>
 8009a46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a48:	e008      	b.n	8009a5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a4a:	f7f8 f8a3 	bl	8001b94 <HAL_GetTick>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d901      	bls.n	8009a5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e086      	b.n	8009b6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a5c:	4b45      	ldr	r3, [pc, #276]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1f0      	bne.n	8009a4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a68:	4b42      	ldr	r3, [pc, #264]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	031b      	lsls	r3, r3, #12
 8009a76:	493f      	ldr	r1, [pc, #252]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	628b      	str	r3, [r1, #40]	; 0x28
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	025b      	lsls	r3, r3, #9
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	431a      	orrs	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	3b01      	subs	r3, #1
 8009a98:	041b      	lsls	r3, r3, #16
 8009a9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a9e:	431a      	orrs	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	061b      	lsls	r3, r3, #24
 8009aa8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009aac:	4931      	ldr	r1, [pc, #196]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009ab2:	4b30      	ldr	r3, [pc, #192]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	695b      	ldr	r3, [r3, #20]
 8009abe:	492d      	ldr	r1, [pc, #180]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ac4:	4b2b      	ldr	r3, [pc, #172]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac8:	f023 0220 	bic.w	r2, r3, #32
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	4928      	ldr	r1, [pc, #160]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009ad6:	4b27      	ldr	r3, [pc, #156]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ada:	4a26      	ldr	r2, [pc, #152]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009adc:	f023 0310 	bic.w	r3, r3, #16
 8009ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009ae2:	4b24      	ldr	r3, [pc, #144]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ae6:	4b24      	ldr	r3, [pc, #144]	; (8009b78 <RCCEx_PLL2_Config+0x160>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	69d2      	ldr	r2, [r2, #28]
 8009aee:	00d2      	lsls	r2, r2, #3
 8009af0:	4920      	ldr	r1, [pc, #128]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009af2:	4313      	orrs	r3, r2
 8009af4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009af6:	4b1f      	ldr	r3, [pc, #124]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afa:	4a1e      	ldr	r2, [pc, #120]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009afc:	f043 0310 	orr.w	r3, r3, #16
 8009b00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d106      	bne.n	8009b16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b08:	4b1a      	ldr	r3, [pc, #104]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0c:	4a19      	ldr	r2, [pc, #100]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009b0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b14:	e00f      	b.n	8009b36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d106      	bne.n	8009b2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b1c:	4b15      	ldr	r3, [pc, #84]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b20:	4a14      	ldr	r2, [pc, #80]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b28:	e005      	b.n	8009b36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b2a:	4b12      	ldr	r3, [pc, #72]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2e:	4a11      	ldr	r2, [pc, #68]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b36:	4b0f      	ldr	r3, [pc, #60]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a0e      	ldr	r2, [pc, #56]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009b3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b42:	f7f8 f827 	bl	8001b94 <HAL_GetTick>
 8009b46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b48:	e008      	b.n	8009b5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b4a:	f7f8 f823 	bl	8001b94 <HAL_GetTick>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d901      	bls.n	8009b5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e006      	b.n	8009b6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b5c:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <RCCEx_PLL2_Config+0x15c>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d0f0      	beq.n	8009b4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	58024400 	.word	0x58024400
 8009b78:	ffff0007 	.word	0xffff0007

08009b7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b86:	2300      	movs	r3, #0
 8009b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b8a:	4b53      	ldr	r3, [pc, #332]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8e:	f003 0303 	and.w	r3, r3, #3
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d101      	bne.n	8009b9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e099      	b.n	8009cce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009b9a:	4b4f      	ldr	r3, [pc, #316]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a4e      	ldr	r2, [pc, #312]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ba6:	f7f7 fff5 	bl	8001b94 <HAL_GetTick>
 8009baa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bac:	e008      	b.n	8009bc0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bae:	f7f7 fff1 	bl	8001b94 <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d901      	bls.n	8009bc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e086      	b.n	8009cce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bc0:	4b45      	ldr	r3, [pc, #276]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1f0      	bne.n	8009bae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009bcc:	4b42      	ldr	r3, [pc, #264]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	051b      	lsls	r3, r3, #20
 8009bda:	493f      	ldr	r1, [pc, #252]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	628b      	str	r3, [r1, #40]	; 0x28
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	3b01      	subs	r3, #1
 8009be6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	025b      	lsls	r3, r3, #9
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	431a      	orrs	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	041b      	lsls	r3, r3, #16
 8009bfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c02:	431a      	orrs	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	061b      	lsls	r3, r3, #24
 8009c0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c10:	4931      	ldr	r1, [pc, #196]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c16:	4b30      	ldr	r3, [pc, #192]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	492d      	ldr	r1, [pc, #180]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c28:	4b2b      	ldr	r3, [pc, #172]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	4928      	ldr	r1, [pc, #160]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c36:	4313      	orrs	r3, r2
 8009c38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c3a:	4b27      	ldr	r3, [pc, #156]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3e:	4a26      	ldr	r2, [pc, #152]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c46:	4b24      	ldr	r3, [pc, #144]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c4a:	4b24      	ldr	r3, [pc, #144]	; (8009cdc <RCCEx_PLL3_Config+0x160>)
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	69d2      	ldr	r2, [r2, #28]
 8009c52:	00d2      	lsls	r2, r2, #3
 8009c54:	4920      	ldr	r1, [pc, #128]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c5a:	4b1f      	ldr	r3, [pc, #124]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5e:	4a1e      	ldr	r2, [pc, #120]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d106      	bne.n	8009c7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c6c:	4b1a      	ldr	r3, [pc, #104]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c70:	4a19      	ldr	r2, [pc, #100]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c78:	e00f      	b.n	8009c9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d106      	bne.n	8009c8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c80:	4b15      	ldr	r3, [pc, #84]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	4a14      	ldr	r2, [pc, #80]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c8c:	e005      	b.n	8009c9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009c8e:	4b12      	ldr	r3, [pc, #72]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c92:	4a11      	ldr	r2, [pc, #68]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009c9a:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a0e      	ldr	r2, [pc, #56]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ca6:	f7f7 ff75 	bl	8001b94 <HAL_GetTick>
 8009caa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cac:	e008      	b.n	8009cc0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009cae:	f7f7 ff71 	bl	8001b94 <HAL_GetTick>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d901      	bls.n	8009cc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e006      	b.n	8009cce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cc0:	4b05      	ldr	r3, [pc, #20]	; (8009cd8 <RCCEx_PLL3_Config+0x15c>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d0f0      	beq.n	8009cae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	58024400 	.word	0x58024400
 8009cdc:	ffff0007 	.word	0xffff0007

08009ce0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
 8009cec:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d904      	bls.n	8009cfe <HAL_SAI_InitProtocol+0x1e>
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	3b03      	subs	r3, #3
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d812      	bhi.n	8009d22 <HAL_SAI_InitProtocol+0x42>
 8009cfc:	e008      	b.n	8009d10 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	68b9      	ldr	r1, [r7, #8]
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f000 fb8b 	bl	800a420 <SAI_InitI2S>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d0e:	e00b      	b.n	8009d28 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	68b9      	ldr	r1, [r7, #8]
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 fc34 	bl	800a584 <SAI_InitPCM>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d20:	e002      	b.n	8009d28 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	75fb      	strb	r3, [r7, #23]
      break;
 8009d26:	bf00      	nop
  }

  if (status == HAL_OK)
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d104      	bne.n	8009d38 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f000 f808 	bl	8009d44 <HAL_SAI_Init>
 8009d34:	4603      	mov	r3, r0
 8009d36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b08a      	sub	sp, #40	; 0x28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e201      	b.n	800a15a <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d113      	bne.n	8009d88 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a99      	ldr	r2, [pc, #612]	; (8009fcc <HAL_SAI_Init+0x288>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d004      	beq.n	8009d74 <HAL_SAI_Init+0x30>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a98      	ldr	r2, [pc, #608]	; (8009fd0 <HAL_SAI_Init+0x28c>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d107      	bne.n	8009d84 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d103      	bne.n	8009d84 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d001      	beq.n	8009d88 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e1e8      	b.n	800a15a <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a8f      	ldr	r2, [pc, #572]	; (8009fcc <HAL_SAI_Init+0x288>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d004      	beq.n	8009d9c <HAL_SAI_Init+0x58>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a8f      	ldr	r2, [pc, #572]	; (8009fd4 <HAL_SAI_Init+0x290>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d102      	bne.n	8009da2 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 8009d9c:	4b8e      	ldr	r3, [pc, #568]	; (8009fd8 <HAL_SAI_Init+0x294>)
 8009d9e:	61bb      	str	r3, [r7, #24]
 8009da0:	e00e      	b.n	8009dc0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a8a      	ldr	r2, [pc, #552]	; (8009fd0 <HAL_SAI_Init+0x28c>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d004      	beq.n	8009db6 <HAL_SAI_Init+0x72>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a8a      	ldr	r2, [pc, #552]	; (8009fdc <HAL_SAI_Init+0x298>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d102      	bne.n	8009dbc <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 8009db6:	4b8a      	ldr	r3, [pc, #552]	; (8009fe0 <HAL_SAI_Init+0x29c>)
 8009db8:	61bb      	str	r3, [r7, #24]
 8009dba:	e001      	b.n	8009dc0 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e1cc      	b.n	800a15a <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d106      	bne.n	8009dda <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7f7 fb89 	bl	80014ec <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fc8c 	bl	800a6f8 <SAI_Disable>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e1b7      	b.n	800a15a <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2202      	movs	r2, #2
 8009dee:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d00c      	beq.n	8009e14 <HAL_SAI_Init+0xd0>
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d80d      	bhi.n	8009e1a <HAL_SAI_Init+0xd6>
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d002      	beq.n	8009e08 <HAL_SAI_Init+0xc4>
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d003      	beq.n	8009e0e <HAL_SAI_Init+0xca>
 8009e06:	e008      	b.n	8009e1a <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009e0c:	e008      	b.n	8009e20 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009e0e:	2310      	movs	r3, #16
 8009e10:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009e12:	e005      	b.n	8009e20 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009e14:	2320      	movs	r3, #32
 8009e16:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009e18:	e002      	b.n	8009e20 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009e1e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	2b05      	cmp	r3, #5
 8009e26:	d822      	bhi.n	8009e6e <HAL_SAI_Init+0x12a>
 8009e28:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <HAL_SAI_Init+0xec>)
 8009e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2e:	bf00      	nop
 8009e30:	08009e49 	.word	0x08009e49
 8009e34:	08009e4f 	.word	0x08009e4f
 8009e38:	08009e57 	.word	0x08009e57
 8009e3c:	08009e6f 	.word	0x08009e6f
 8009e40:	08009e6f 	.word	0x08009e6f
 8009e44:	08009e5f 	.word	0x08009e5f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	61fb      	str	r3, [r7, #28]
      break;
 8009e4c:	e012      	b.n	8009e74 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e52:	61fb      	str	r3, [r7, #28]
      break;
 8009e54:	e00e      	b.n	8009e74 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009e56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e5a:	61fb      	str	r3, [r7, #28]
      break;
 8009e5c:	e00a      	b.n	8009e74 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009e5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e62:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	f043 0303 	orr.w	r3, r3, #3
 8009e6a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009e6c:	e002      	b.n	8009e74 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	61fb      	str	r3, [r7, #28]
      break;
 8009e72:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e78:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	f000 808a 	beq.w	8009f98 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 8009e84:	2300      	movs	r3, #0
 8009e86:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a4f      	ldr	r2, [pc, #316]	; (8009fcc <HAL_SAI_Init+0x288>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d004      	beq.n	8009e9c <HAL_SAI_Init+0x158>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a4f      	ldr	r2, [pc, #316]	; (8009fd4 <HAL_SAI_Init+0x290>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d106      	bne.n	8009eaa <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009e9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009ea0:	f04f 0100 	mov.w	r1, #0
 8009ea4:	f7fe fcd6 	bl	8008854 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ea8:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a48      	ldr	r2, [pc, #288]	; (8009fd0 <HAL_SAI_Init+0x28c>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d106      	bne.n	8009ec2 <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009eb4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009eb8:	f04f 0100 	mov.w	r1, #0
 8009ebc:	f7fe fcca 	bl	8008854 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ec0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a45      	ldr	r2, [pc, #276]	; (8009fdc <HAL_SAI_Init+0x298>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d106      	bne.n	8009eda <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8009ecc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009ed0:	f04f 0100 	mov.w	r1, #0
 8009ed4:	f7fe fcbe 	bl	8008854 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ed8:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ee2:	d120      	bne.n	8009f26 <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee8:	2b04      	cmp	r3, #4
 8009eea:	d102      	bne.n	8009ef2 <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8009eec:	2340      	movs	r3, #64	; 0x40
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	e00a      	b.n	8009f08 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ef6:	2b08      	cmp	r3, #8
 8009ef8:	d103      	bne.n	8009f02 <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8009efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	e002      	b.n	8009f08 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f06:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	005b      	lsls	r3, r3, #1
 8009f12:	4619      	mov	r1, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a1b      	ldr	r3, [r3, #32]
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	fb02 f303 	mul.w	r3, r2, r3
 8009f1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f22:	613b      	str	r3, [r7, #16]
 8009f24:	e017      	b.n	8009f56 <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f2e:	d101      	bne.n	8009f34 <HAL_SAI_Init+0x1f0>
 8009f30:	2302      	movs	r3, #2
 8009f32:	e000      	b.n	8009f36 <HAL_SAI_Init+0x1f2>
 8009f34:	2301      	movs	r3, #1
 8009f36:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	005b      	lsls	r3, r3, #1
 8009f42:	4619      	mov	r1, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a1b      	ldr	r3, [r3, #32]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	fb02 f303 	mul.w	r3, r2, r3
 8009f4e:	021b      	lsls	r3, r3, #8
 8009f50:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f54:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	4a22      	ldr	r2, [pc, #136]	; (8009fe4 <HAL_SAI_Init+0x2a0>)
 8009f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5e:	08da      	lsrs	r2, r3, #3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009f64:	6939      	ldr	r1, [r7, #16]
 8009f66:	4b1f      	ldr	r3, [pc, #124]	; (8009fe4 <HAL_SAI_Init+0x2a0>)
 8009f68:	fba3 2301 	umull	r2, r3, r3, r1
 8009f6c:	08da      	lsrs	r2, r3, #3
 8009f6e:	4613      	mov	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	005b      	lsls	r3, r3, #1
 8009f76:	1aca      	subs	r2, r1, r3
 8009f78:	2a08      	cmp	r2, #8
 8009f7a:	d904      	bls.n	8009f86 <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f80:	1c5a      	adds	r2, r3, #1
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f8a:	2b04      	cmp	r3, #4
 8009f8c:	d104      	bne.n	8009f98 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f92:	085a      	lsrs	r2, r3, #1
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d003      	beq.n	8009fa8 <HAL_SAI_Init+0x264>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d109      	bne.n	8009fbc <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d101      	bne.n	8009fb4 <HAL_SAI_Init+0x270>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	e001      	b.n	8009fb8 <HAL_SAI_Init+0x274>
 8009fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fb8:	623b      	str	r3, [r7, #32]
 8009fba:	e017      	b.n	8009fec <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d111      	bne.n	8009fe8 <HAL_SAI_Init+0x2a4>
 8009fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fc8:	e00f      	b.n	8009fea <HAL_SAI_Init+0x2a6>
 8009fca:	bf00      	nop
 8009fcc:	40015804 	.word	0x40015804
 8009fd0:	58005404 	.word	0x58005404
 8009fd4:	40015824 	.word	0x40015824
 8009fd8:	40015800 	.word	0x40015800
 8009fdc:	58005424 	.word	0x58005424
 8009fe0:	58005400 	.word	0x58005400
 8009fe4:	cccccccd 	.word	0xcccccccd
 8009fe8:	2300      	movs	r3, #0
 8009fea:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	6819      	ldr	r1, [r3, #0]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	4b5b      	ldr	r3, [pc, #364]	; (800a164 <HAL_SAI_Init+0x420>)
 8009ff8:	400b      	ands	r3, r1
 8009ffa:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6819      	ldr	r1, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	685a      	ldr	r2, [r3, #4]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a010:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a016:	431a      	orrs	r2, r3
 800a018:	6a3b      	ldr	r3, [r7, #32]
 800a01a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800a024:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	695b      	ldr	r3, [r3, #20]
 800a02a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a030:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a036:	051b      	lsls	r3, r3, #20
 800a038:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a03e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	430a      	orrs	r2, r1
 800a04c:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6859      	ldr	r1, [r3, #4]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	4b43      	ldr	r3, [pc, #268]	; (800a168 <HAL_SAI_Init+0x424>)
 800a05a:	400b      	ands	r3, r1
 800a05c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	6859      	ldr	r1, [r3, #4]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	69da      	ldr	r2, [r3, #28]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a06c:	431a      	orrs	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a072:	431a      	orrs	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	430a      	orrs	r2, r1
 800a07a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6899      	ldr	r1, [r3, #8]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	4b39      	ldr	r3, [pc, #228]	; (800a16c <HAL_SAI_Init+0x428>)
 800a088:	400b      	ands	r3, r1
 800a08a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6899      	ldr	r1, [r3, #8]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a096:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a09c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a0a2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a0a8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a0b2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	430a      	orrs	r2, r1
 800a0ba:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68d9      	ldr	r1, [r3, #12]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a0ca:	400b      	ands	r3, r1
 800a0cc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68d9      	ldr	r1, [r3, #12]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0dc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0e2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a0e4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	021b      	lsls	r3, r3, #8
 800a0ee:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a1c      	ldr	r2, [pc, #112]	; (800a170 <HAL_SAI_Init+0x42c>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d004      	beq.n	800a10c <HAL_SAI_Init+0x3c8>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a1b      	ldr	r2, [pc, #108]	; (800a174 <HAL_SAI_Init+0x430>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d119      	bne.n	800a140 <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a110:	f023 0201 	bic.w	r2, r3, #1
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d10e      	bne.n	800a140 <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a12a:	3b01      	subs	r3, #1
 800a12c:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a12e:	431a      	orrs	r2, r3
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a138:	f043 0201 	orr.w	r2, r3, #1
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3728      	adds	r7, #40	; 0x28
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	f005c010 	.word	0xf005c010
 800a168:	ffff1ff0 	.word	0xffff1ff0
 800a16c:	fff88000 	.word	0xfff88000
 800a170:	40015804 	.word	0x40015804
 800a174:	58005404 	.word	0x58005404

0800a178 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	4613      	mov	r3, r2
 800a184:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800a186:	f7f7 fd05 	bl	8001b94 <HAL_GetTick>
 800a18a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d002      	beq.n	800a198 <HAL_SAI_Transmit_DMA+0x20>
 800a192:	88fb      	ldrh	r3, [r7, #6]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e098      	b.n	800a2ce <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	f040 8091 	bne.w	800a2cc <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d101      	bne.n	800a1b8 <HAL_SAI_Transmit_DMA+0x40>
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	e08a      	b.n	800a2ce <HAL_SAI_Transmit_DMA+0x156>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	88fa      	ldrh	r2, [r7, #6]
 800a1ca:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	88fa      	ldrh	r2, [r7, #6]
 800a1d2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2212      	movs	r2, #18
 800a1e2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1ec:	4a3a      	ldr	r2, [pc, #232]	; (800a2d8 <HAL_SAI_Transmit_DMA+0x160>)
 800a1ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1f6:	4a39      	ldr	r2, [pc, #228]	; (800a2dc <HAL_SAI_Transmit_DMA+0x164>)
 800a1f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a200:	4a37      	ldr	r2, [pc, #220]	; (800a2e0 <HAL_SAI_Transmit_DMA+0x168>)
 800a202:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a20a:	2200      	movs	r2, #0
 800a20c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a218:	4619      	mov	r1, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	331c      	adds	r3, #28
 800a220:	461a      	mov	r2, r3
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800a228:	f7f8 f94c 	bl	80024c4 <HAL_DMA_Start_IT>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d005      	beq.n	800a23e <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	e047      	b.n	800a2ce <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a23e:	2100      	movs	r1, #0
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 fa21 	bl	800a688 <SAI_InterruptFlag>
 800a246:	4601      	mov	r1, r0
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	691a      	ldr	r2, [r3, #16]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	430a      	orrs	r2, r1
 800a254:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a264:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a266:	e015      	b.n	800a294 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800a268:	f7f7 fc94 	bl	8001b94 <HAL_GetTick>
 800a26c:	4602      	mov	r2, r0
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a276:	d90d      	bls.n	800a294 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a27e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800a290:	2303      	movs	r3, #3
 800a292:	e01c      	b.n	800a2ce <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0e2      	beq.n	800a268 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d107      	bne.n	800a2c0 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a2be:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	e000      	b.n	800a2ce <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800a2cc:	2302      	movs	r3, #2
  }
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3718      	adds	r7, #24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	0800a7cd 	.word	0x0800a7cd
 800a2dc:	0800a76d 	.word	0x0800a76d
 800a2e0:	0800a865 	.word	0x0800a865

0800a2e4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d002      	beq.n	800a2fe <HAL_SAI_Receive_DMA+0x1a>
 800a2f8:	88fb      	ldrh	r3, [r7, #6]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d101      	bne.n	800a302 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e079      	b.n	800a3f6 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d172      	bne.n	800a3f4 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a314:	2b01      	cmp	r3, #1
 800a316:	d101      	bne.n	800a31c <HAL_SAI_Receive_DMA+0x38>
 800a318:	2302      	movs	r3, #2
 800a31a:	e06c      	b.n	800a3f6 <HAL_SAI_Receive_DMA+0x112>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	88fa      	ldrh	r2, [r7, #6]
 800a32e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	88fa      	ldrh	r2, [r7, #6]
 800a336:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2222      	movs	r2, #34	; 0x22
 800a346:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a350:	4a2b      	ldr	r2, [pc, #172]	; (800a400 <HAL_SAI_Receive_DMA+0x11c>)
 800a352:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a35a:	4a2a      	ldr	r2, [pc, #168]	; (800a404 <HAL_SAI_Receive_DMA+0x120>)
 800a35c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a364:	4a28      	ldr	r2, [pc, #160]	; (800a408 <HAL_SAI_Receive_DMA+0x124>)
 800a366:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a36e:	2200      	movs	r2, #0
 800a370:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	331c      	adds	r3, #28
 800a37e:	4619      	mov	r1, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a384:	461a      	mov	r2, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800a38c:	f7f8 f89a 	bl	80024c4 <HAL_DMA_Start_IT>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d005      	beq.n	800a3a2 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e029      	b.n	800a3f6 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 f96f 	bl	800a688 <SAI_InterruptFlag>
 800a3aa:	4601      	mov	r1, r0
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	691a      	ldr	r2, [r3, #16]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	430a      	orrs	r2, r1
 800a3b8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a3c8:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d107      	bne.n	800a3e8 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a3e6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	e000      	b.n	800a3f6 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800a3f4:	2302      	movs	r3, #2
  }
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	0800a849 	.word	0x0800a849
 800a404:	0800a7e9 	.word	0x0800a7e9
 800a408:	0800a865 	.word	0x0800a865

0800a40c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a420:	b480      	push	{r7}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
 800a42c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d003      	beq.n	800a44e <SAI_InitI2S+0x2e>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d103      	bne.n	800a456 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	651a      	str	r2, [r3, #80]	; 0x50
 800a454:	e002      	b.n	800a45c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2201      	movs	r2, #1
 800a45a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a462:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a46a:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	683a      	ldr	r2, [r7, #0]
 800a476:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	f003 0301 	and.w	r3, r3, #1
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	e077      	b.n	800a576 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d107      	bne.n	800a49c <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a498:	665a      	str	r2, [r3, #100]	; 0x64
 800a49a:	e006      	b.n	800a4aa <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a4a2:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b03      	cmp	r3, #3
 800a4ae:	d84f      	bhi.n	800a550 <SAI_InitI2S+0x130>
 800a4b0:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <SAI_InitI2S+0x98>)
 800a4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b6:	bf00      	nop
 800a4b8:	0800a4c9 	.word	0x0800a4c9
 800a4bc:	0800a4eb 	.word	0x0800a4eb
 800a4c0:	0800a50d 	.word	0x0800a50d
 800a4c4:	0800a52f 	.word	0x0800a52f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2280      	movs	r2, #128	; 0x80
 800a4cc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	085b      	lsrs	r3, r3, #1
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	085b      	lsrs	r3, r3, #1
 800a4dc:	011a      	lsls	r2, r3, #4
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2240      	movs	r2, #64	; 0x40
 800a4e6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a4e8:	e035      	b.n	800a556 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2280      	movs	r2, #128	; 0x80
 800a4ee:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	085b      	lsrs	r3, r3, #1
 800a4f4:	019a      	lsls	r2, r3, #6
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	085b      	lsrs	r3, r3, #1
 800a4fe:	015a      	lsls	r2, r3, #5
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2280      	movs	r2, #128	; 0x80
 800a508:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a50a:	e024      	b.n	800a556 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	22c0      	movs	r2, #192	; 0xc0
 800a510:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	085b      	lsrs	r3, r3, #1
 800a516:	019a      	lsls	r2, r3, #6
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	085b      	lsrs	r3, r3, #1
 800a520:	015a      	lsls	r2, r3, #5
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2280      	movs	r2, #128	; 0x80
 800a52a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a52c:	e013      	b.n	800a556 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	22e0      	movs	r2, #224	; 0xe0
 800a532:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	085b      	lsrs	r3, r3, #1
 800a538:	019a      	lsls	r2, r3, #6
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	085b      	lsrs	r3, r3, #1
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2280      	movs	r2, #128	; 0x80
 800a54c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a54e:	e002      	b.n	800a556 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	75fb      	strb	r3, [r7, #23]
      break;
 800a554:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	2b02      	cmp	r3, #2
 800a55a:	d10b      	bne.n	800a574 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d102      	bne.n	800a568 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2210      	movs	r2, #16
 800a566:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d102      	bne.n	800a574 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2208      	movs	r2, #8
 800a572:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800a574:	7dfb      	ldrb	r3, [r7, #23]
}
 800a576:	4618      	mov	r0, r3
 800a578:	371c      	adds	r7, #28
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop

0800a584 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
 800a590:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d003      	beq.n	800a5b2 <SAI_InitPCM+0x2e>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d103      	bne.n	800a5ba <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	651a      	str	r2, [r3, #80]	; 0x50
 800a5b8:	e002      	b.n	800a5c0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a5cc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a5d4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5e8:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b04      	cmp	r3, #4
 800a5ee:	d103      	bne.n	800a5f8 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	659a      	str	r2, [r3, #88]	; 0x58
 800a5f6:	e002      	b.n	800a5fe <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	220d      	movs	r2, #13
 800a5fc:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b03      	cmp	r3, #3
 800a602:	d837      	bhi.n	800a674 <SAI_InitPCM+0xf0>
 800a604:	a201      	add	r2, pc, #4	; (adr r2, 800a60c <SAI_InitPCM+0x88>)
 800a606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60a:	bf00      	nop
 800a60c:	0800a61d 	.word	0x0800a61d
 800a610:	0800a633 	.word	0x0800a633
 800a614:	0800a649 	.word	0x0800a649
 800a618:	0800a65f 	.word	0x0800a65f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2280      	movs	r2, #128	; 0x80
 800a620:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	011a      	lsls	r2, r3, #4
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2240      	movs	r2, #64	; 0x40
 800a62e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a630:	e023      	b.n	800a67a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2280      	movs	r2, #128	; 0x80
 800a636:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	015a      	lsls	r2, r3, #5
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2280      	movs	r2, #128	; 0x80
 800a644:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a646:	e018      	b.n	800a67a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	22c0      	movs	r2, #192	; 0xc0
 800a64c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	015a      	lsls	r2, r3, #5
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2280      	movs	r2, #128	; 0x80
 800a65a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a65c:	e00d      	b.n	800a67a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	22e0      	movs	r2, #224	; 0xe0
 800a662:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	015a      	lsls	r2, r3, #5
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2280      	movs	r2, #128	; 0x80
 800a670:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a672:	e002      	b.n	800a67a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	75fb      	strb	r3, [r7, #23]
      break;
 800a678:	bf00      	nop
  }

  return status;
 800a67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	371c      	adds	r7, #28
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800a694:	2301      	movs	r3, #1
 800a696:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800a698:	78fb      	ldrb	r3, [r7, #3]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d103      	bne.n	800a6a6 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f043 0308 	orr.w	r3, r3, #8
 800a6a4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6aa:	2b08      	cmp	r3, #8
 800a6ac:	d10b      	bne.n	800a6c6 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	d003      	beq.n	800a6be <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d103      	bne.n	800a6c6 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f043 0310 	orr.w	r3, r3, #16
 800a6c4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	2b03      	cmp	r3, #3
 800a6cc:	d003      	beq.n	800a6d6 <SAI_InterruptFlag+0x4e>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d104      	bne.n	800a6e0 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a6dc:	60fb      	str	r3, [r7, #12]
 800a6de:	e003      	b.n	800a6e8 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f043 0304 	orr.w	r3, r3, #4
 800a6e6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
	...

0800a6f8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a700:	4b18      	ldr	r3, [pc, #96]	; (800a764 <SAI_Disable+0x6c>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a18      	ldr	r2, [pc, #96]	; (800a768 <SAI_Disable+0x70>)
 800a706:	fba2 2303 	umull	r2, r3, r2, r3
 800a70a:	0b1b      	lsrs	r3, r3, #12
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a722:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10a      	bne.n	800a740 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a730:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800a73a:	2303      	movs	r3, #3
 800a73c:	72fb      	strb	r3, [r7, #11]
      break;
 800a73e:	e009      	b.n	800a754 <SAI_Disable+0x5c>
    }
    count--;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	3b01      	subs	r3, #1
 800a744:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a750:	2b00      	cmp	r3, #0
 800a752:	d1e7      	bne.n	800a724 <SAI_Disable+0x2c>

  return status;
 800a754:	7afb      	ldrb	r3, [r7, #11]
}
 800a756:	4618      	mov	r0, r3
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	24000000 	.word	0x24000000
 800a768:	95cbec1b 	.word	0x95cbec1b

0800a76c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a778:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	69db      	ldr	r3, [r3, #28]
 800a77e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a782:	d01c      	beq.n	800a7be <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a79a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a79c:	2100      	movs	r1, #0
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f7ff ff72 	bl	800a688 <SAI_InterruptFlag>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	43d9      	mvns	r1, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	691a      	ldr	r2, [r3, #16]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	400a      	ands	r2, r1
 800a7b4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f7f6 f998 	bl	8000af4 <HAL_SAI_TxCpltCallback>
#endif
}
 800a7c4:	bf00      	nop
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f7f6 f9ec 	bl	8000bb8 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800a7e0:	bf00      	nop
 800a7e2:	3710      	adds	r7, #16
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	69db      	ldr	r3, [r3, #28]
 800a7fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7fe:	d01c      	beq.n	800a83a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a80e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a818:	2100      	movs	r1, #0
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f7ff ff34 	bl	800a688 <SAI_InterruptFlag>
 800a820:	4603      	mov	r3, r0
 800a822:	43d9      	mvns	r1, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	691a      	ldr	r2, [r3, #16]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	400a      	ands	r2, r1
 800a830:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f7f6 fa1e 	bl	8000c7c <HAL_SAI_RxCpltCallback>
#endif
}
 800a840:	bf00      	nop
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a854:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f7f6 fac6 	bl	8000de8 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800a85c:	bf00      	nop
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a870:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7f8 ffba 	bl	80037ec <HAL_DMA_GetError>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d01d      	beq.n	800a8ba <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a884:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a89c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f7ff ff2a 	bl	800a6f8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800a8b4:	68f8      	ldr	r0, [r7, #12]
 800a8b6:	f7ff fda9 	bl	800a40c <HAL_SAI_ErrorCallback>
#endif
  }
}
 800a8ba:	bf00      	nop
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
	...

0800a8c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d101      	bne.n	800a8d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e02b      	b.n	800a930 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d106      	bne.n	800a8f2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7f5 ff5b 	bl	80007a8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2202      	movs	r2, #2
 800a8f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	3304      	adds	r3, #4
 800a902:	4619      	mov	r1, r3
 800a904:	4610      	mov	r0, r2
 800a906:	f000 fdbf 	bl	800b488 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6818      	ldr	r0, [r3, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	461a      	mov	r2, r3
 800a914:	6839      	ldr	r1, [r7, #0]
 800a916:	f000 fe13 	bl	800b540 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a91a:	4b07      	ldr	r3, [pc, #28]	; (800a938 <HAL_SDRAM_Init+0x74>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a06      	ldr	r2, [pc, #24]	; (800a938 <HAL_SDRAM_Init+0x74>)
 800a920:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a924:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	52004000 	.word	0x52004000

0800a93c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a94e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a950:	7dfb      	ldrb	r3, [r7, #23]
 800a952:	2b02      	cmp	r3, #2
 800a954:	d101      	bne.n	800a95a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a956:	2302      	movs	r3, #2
 800a958:	e021      	b.n	800a99e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a95a:	7dfb      	ldrb	r3, [r7, #23]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d002      	beq.n	800a966 <HAL_SDRAM_SendCommand+0x2a>
 800a960:	7dfb      	ldrb	r3, [r7, #23]
 800a962:	2b05      	cmp	r3, #5
 800a964:	d118      	bne.n	800a998 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2202      	movs	r2, #2
 800a96a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	68b9      	ldr	r1, [r7, #8]
 800a976:	4618      	mov	r0, r3
 800a978:	f000 fe4c 	bl	800b614 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b02      	cmp	r3, #2
 800a982:	d104      	bne.n	800a98e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2205      	movs	r2, #5
 800a988:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a98c:	e006      	b.n	800a99c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2201      	movs	r2, #1
 800a992:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a996:	e001      	b.n	800a99c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e000      	b.n	800a99e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3718      	adds	r7, #24
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d101      	bne.n	800a9c0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a9bc:	2302      	movs	r3, #2
 800a9be:	e016      	b.n	800a9ee <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d10f      	bne.n	800a9ec <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 fe3e 	bl	800b65c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	e000      	b.n	800a9ee <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
	...

0800a9f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d101      	bne.n	800aa0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e10f      	b.n	800ac2a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a87      	ldr	r2, [pc, #540]	; (800ac34 <HAL_SPI_Init+0x23c>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d00f      	beq.n	800aa3a <HAL_SPI_Init+0x42>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a86      	ldr	r2, [pc, #536]	; (800ac38 <HAL_SPI_Init+0x240>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d00a      	beq.n	800aa3a <HAL_SPI_Init+0x42>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a84      	ldr	r2, [pc, #528]	; (800ac3c <HAL_SPI_Init+0x244>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d005      	beq.n	800aa3a <HAL_SPI_Init+0x42>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	2b0f      	cmp	r3, #15
 800aa34:	d901      	bls.n	800aa3a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e0f7      	b.n	800ac2a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 fd08 	bl	800b450 <SPI_GetPacketSize>
 800aa40:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a7b      	ldr	r2, [pc, #492]	; (800ac34 <HAL_SPI_Init+0x23c>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d00c      	beq.n	800aa66 <HAL_SPI_Init+0x6e>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a79      	ldr	r2, [pc, #484]	; (800ac38 <HAL_SPI_Init+0x240>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d007      	beq.n	800aa66 <HAL_SPI_Init+0x6e>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a78      	ldr	r2, [pc, #480]	; (800ac3c <HAL_SPI_Init+0x244>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d002      	beq.n	800aa66 <HAL_SPI_Init+0x6e>
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2b08      	cmp	r3, #8
 800aa64:	d811      	bhi.n	800aa8a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aa6a:	4a72      	ldr	r2, [pc, #456]	; (800ac34 <HAL_SPI_Init+0x23c>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d009      	beq.n	800aa84 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a70      	ldr	r2, [pc, #448]	; (800ac38 <HAL_SPI_Init+0x240>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d004      	beq.n	800aa84 <HAL_SPI_Init+0x8c>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a6f      	ldr	r2, [pc, #444]	; (800ac3c <HAL_SPI_Init+0x244>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d104      	bne.n	800aa8e <HAL_SPI_Init+0x96>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2b10      	cmp	r3, #16
 800aa88:	d901      	bls.n	800aa8e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e0cd      	b.n	800ac2a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d106      	bne.n	800aaa8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7f6 fe5e 	bl	8001764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2202      	movs	r2, #2
 800aaac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f022 0201 	bic.w	r2, r2, #1
 800aabe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800aaca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aad4:	d119      	bne.n	800ab0a <HAL_SPI_Init+0x112>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aade:	d103      	bne.n	800aae8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d008      	beq.n	800aafa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10c      	bne.n	800ab0a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aaf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aaf8:	d107      	bne.n	800ab0a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ab08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00f      	beq.n	800ab36 <HAL_SPI_Init+0x13e>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	2b06      	cmp	r3, #6
 800ab1c:	d90b      	bls.n	800ab36 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	430a      	orrs	r2, r1
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	e007      	b.n	800ab46 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	69da      	ldr	r2, [r3, #28]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab4e:	431a      	orrs	r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	431a      	orrs	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab58:	ea42 0103 	orr.w	r1, r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	68da      	ldr	r2, [r3, #12]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	430a      	orrs	r2, r1
 800ab66:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab70:	431a      	orrs	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab76:	431a      	orrs	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	691b      	ldr	r3, [r3, #16]
 800ab82:	431a      	orrs	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	695b      	ldr	r3, [r3, #20]
 800ab88:	431a      	orrs	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	431a      	orrs	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	431a      	orrs	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab9a:	431a      	orrs	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	431a      	orrs	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aba6:	ea42 0103 	orr.w	r1, r2, r3
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	430a      	orrs	r2, r1
 800abb4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d113      	bne.n	800abe6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abd0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800abe4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f022 0201 	bic.w	r2, r2, #1
 800abf4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00a      	beq.n	800ac18 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	430a      	orrs	r2, r1
 800ac16:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	40013000 	.word	0x40013000
 800ac38:	40003800 	.word	0x40003800
 800ac3c:	40003c00 	.word	0x40003c00

0800ac40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b08e      	sub	sp, #56	; 0x38
 800ac44:	af02      	add	r7, sp, #8
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
 800ac4c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	3320      	adds	r3, #32
 800ac54:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	3330      	adds	r3, #48	; 0x30
 800ac5c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac62:	095b      	lsrs	r3, r3, #5
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	3301      	adds	r3, #1
 800ac68:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac6a:	f7f6 ff93 	bl	8001b94 <HAL_GetTick>
 800ac6e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800ac70:	887b      	ldrh	r3, [r7, #2]
 800ac72:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800ac74:	887b      	ldrh	r3, [r7, #2]
 800ac76:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d001      	beq.n	800ac88 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800ac84:	2302      	movs	r3, #2
 800ac86:	e310      	b.n	800b2aa <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d005      	beq.n	800ac9a <HAL_SPI_TransmitReceive+0x5a>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <HAL_SPI_TransmitReceive+0x5a>
 800ac94:	887b      	ldrh	r3, [r7, #2]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d101      	bne.n	800ac9e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e305      	b.n	800b2aa <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d101      	bne.n	800acac <HAL_SPI_TransmitReceive+0x6c>
 800aca8:	2302      	movs	r3, #2
 800acaa:	e2fe      	b.n	800b2aa <HAL_SPI_TransmitReceive+0x66a>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2201      	movs	r2, #1
 800acb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2205      	movs	r2, #5
 800acb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	887a      	ldrh	r2, [r7, #2]
 800acce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	887a      	ldrh	r2, [r7, #2]
 800acd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	887a      	ldrh	r2, [r7, #2]
 800ace4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	887a      	ldrh	r2, [r7, #2]
 800acec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68da      	ldr	r2, [r3, #12]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800ad0a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a70      	ldr	r2, [pc, #448]	; (800aed4 <HAL_SPI_TransmitReceive+0x294>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d009      	beq.n	800ad2a <HAL_SPI_TransmitReceive+0xea>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a6f      	ldr	r2, [pc, #444]	; (800aed8 <HAL_SPI_TransmitReceive+0x298>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d004      	beq.n	800ad2a <HAL_SPI_TransmitReceive+0xea>
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a6d      	ldr	r2, [pc, #436]	; (800aedc <HAL_SPI_TransmitReceive+0x29c>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d102      	bne.n	800ad30 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800ad2a:	2310      	movs	r3, #16
 800ad2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad2e:	e001      	b.n	800ad34 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800ad30:	2308      	movs	r3, #8
 800ad32:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	685a      	ldr	r2, [r3, #4]
 800ad3a:	4b69      	ldr	r3, [pc, #420]	; (800aee0 <HAL_SPI_TransmitReceive+0x2a0>)
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	8879      	ldrh	r1, [r7, #2]
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	6812      	ldr	r2, [r2, #0]
 800ad44:	430b      	orrs	r3, r1
 800ad46:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f042 0201 	orr.w	r2, r2, #1
 800ad56:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad60:	d107      	bne.n	800ad72 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	2b0f      	cmp	r3, #15
 800ad78:	f240 80a2 	bls.w	800aec0 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800ad7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7e:	089b      	lsrs	r3, r3, #2
 800ad80:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ad82:	e094      	b.n	800aeae <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	f003 0302 	and.w	r3, r3, #2
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d120      	bne.n	800add4 <HAL_SPI_TransmitReceive+0x194>
 800ad92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d01d      	beq.n	800add4 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ad98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ad9a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d217      	bcs.n	800add4 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	6812      	ldr	r2, [r2, #0]
 800adae:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adb4:	1d1a      	adds	r2, r3, #4
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	3b01      	subs	r3, #1
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800add2:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	695b      	ldr	r3, [r3, #20]
 800adda:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800addc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d065      	beq.n	800aeae <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	695b      	ldr	r3, [r3, #20]
 800ade8:	f003 0301 	and.w	r3, r3, #1
 800adec:	2b01      	cmp	r3, #1
 800adee:	d118      	bne.n	800ae22 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adf8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800adfa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae00:	1d1a      	adds	r2, r3, #4
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae1e:	853b      	strh	r3, [r7, #40]	; 0x28
 800ae20:	e045      	b.n	800aeae <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ae22:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ae24:	8bfb      	ldrh	r3, [r7, #30]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d21d      	bcs.n	800ae66 <HAL_SPI_TransmitReceive+0x226>
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d018      	beq.n	800ae66 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ae3e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae44:	1d1a      	adds	r2, r3, #4
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	3b01      	subs	r3, #1
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae62:	853b      	strh	r3, [r7, #40]	; 0x28
 800ae64:	e023      	b.n	800aeae <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae66:	f7f6 fe95 	bl	8001b94 <HAL_GetTick>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d803      	bhi.n	800ae7e <HAL_SPI_TransmitReceive+0x23e>
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7c:	d102      	bne.n	800ae84 <HAL_SPI_TransmitReceive+0x244>
 800ae7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d114      	bne.n	800aeae <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f000 fa15 	bl	800b2b4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800aeaa:	2303      	movs	r3, #3
 800aeac:	e1fd      	b.n	800b2aa <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aeae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f47f af67 	bne.w	800ad84 <HAL_SPI_TransmitReceive+0x144>
 800aeb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f47f af63 	bne.w	800ad84 <HAL_SPI_TransmitReceive+0x144>
 800aebe:	e1ce      	b.n	800b25e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	2b07      	cmp	r3, #7
 800aec6:	f240 81c2 	bls.w	800b24e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800aeca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aecc:	085b      	lsrs	r3, r3, #1
 800aece:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aed0:	e0c9      	b.n	800b066 <HAL_SPI_TransmitReceive+0x426>
 800aed2:	bf00      	nop
 800aed4:	40013000 	.word	0x40013000
 800aed8:	40003800 	.word	0x40003800
 800aedc:	40003c00 	.word	0x40003c00
 800aee0:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	695b      	ldr	r3, [r3, #20]
 800aeea:	f003 0302 	and.w	r3, r3, #2
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d11f      	bne.n	800af32 <HAL_SPI_TransmitReceive+0x2f2>
 800aef2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d01c      	beq.n	800af32 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800aef8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800aefa:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800aefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefe:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800af00:	429a      	cmp	r2, r3
 800af02:	d216      	bcs.n	800af32 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af08:	881a      	ldrh	r2, [r3, #0]
 800af0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af12:	1c9a      	adds	r2, r3, #2
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800af1e:	b29b      	uxth	r3, r3
 800af20:	3b01      	subs	r3, #1
 800af22:	b29a      	uxth	r2, r3
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800af30:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	695b      	ldr	r3, [r3, #20]
 800af38:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800af3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f000 8092 	beq.w	800b066 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	f003 0301 	and.w	r3, r3, #1
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d118      	bne.n	800af82 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af54:	6a3a      	ldr	r2, [r7, #32]
 800af56:	8812      	ldrh	r2, [r2, #0]
 800af58:	b292      	uxth	r2, r2
 800af5a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af60:	1c9a      	adds	r2, r3, #2
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	3b01      	subs	r3, #1
 800af70:	b29a      	uxth	r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af7e:	853b      	strh	r3, [r7, #40]	; 0x28
 800af80:	e071      	b.n	800b066 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800af82:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800af84:	8bfb      	ldrh	r3, [r7, #30]
 800af86:	429a      	cmp	r2, r3
 800af88:	d228      	bcs.n	800afdc <HAL_SPI_TransmitReceive+0x39c>
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af90:	2b00      	cmp	r3, #0
 800af92:	d023      	beq.n	800afdc <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af98:	6a3a      	ldr	r2, [r7, #32]
 800af9a:	8812      	ldrh	r2, [r2, #0]
 800af9c:	b292      	uxth	r2, r2
 800af9e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afa4:	1c9a      	adds	r2, r3, #2
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afae:	6a3a      	ldr	r2, [r7, #32]
 800afb0:	8812      	ldrh	r2, [r2, #0]
 800afb2:	b292      	uxth	r2, r2
 800afb4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afba:	1c9a      	adds	r2, r3, #2
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	3b02      	subs	r3, #2
 800afca:	b29a      	uxth	r2, r3
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800afd8:	853b      	strh	r3, [r7, #40]	; 0x28
 800afda:	e044      	b.n	800b066 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800afdc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d11d      	bne.n	800b01e <HAL_SPI_TransmitReceive+0x3de>
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d018      	beq.n	800b01e <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aff0:	6a3a      	ldr	r2, [r7, #32]
 800aff2:	8812      	ldrh	r2, [r2, #0]
 800aff4:	b292      	uxth	r2, r2
 800aff6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800affc:	1c9a      	adds	r2, r3, #2
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b008:	b29b      	uxth	r3, r3
 800b00a:	3b01      	subs	r3, #1
 800b00c:	b29a      	uxth	r2, r3
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b01a:	853b      	strh	r3, [r7, #40]	; 0x28
 800b01c:	e023      	b.n	800b066 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b01e:	f7f6 fdb9 	bl	8001b94 <HAL_GetTick>
 800b022:	4602      	mov	r2, r0
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	1ad3      	subs	r3, r2, r3
 800b028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d803      	bhi.n	800b036 <HAL_SPI_TransmitReceive+0x3f6>
 800b02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b034:	d102      	bne.n	800b03c <HAL_SPI_TransmitReceive+0x3fc>
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d114      	bne.n	800b066 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f000 f939 	bl	800b2b4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b048:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2201      	movs	r2, #1
 800b056:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800b062:	2303      	movs	r3, #3
 800b064:	e121      	b.n	800b2aa <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b066:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f47f af3b 	bne.w	800aee4 <HAL_SPI_TransmitReceive+0x2a4>
 800b06e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b070:	2b00      	cmp	r3, #0
 800b072:	f47f af37 	bne.w	800aee4 <HAL_SPI_TransmitReceive+0x2a4>
 800b076:	e0f2      	b.n	800b25e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	f003 0302 	and.w	r3, r3, #2
 800b082:	2b02      	cmp	r3, #2
 800b084:	d121      	bne.n	800b0ca <HAL_SPI_TransmitReceive+0x48a>
 800b086:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d01e      	beq.n	800b0ca <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b08c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b08e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800b090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b092:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b094:	429a      	cmp	r2, r3
 800b096:	d218      	bcs.n	800b0ca <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	3320      	adds	r3, #32
 800b0a2:	7812      	ldrb	r2, [r2, #0]
 800b0a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0aa:	1c5a      	adds	r2, r3, #1
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	b29a      	uxth	r2, r3
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0c8:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	695b      	ldr	r3, [r3, #20]
 800b0d0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b0d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f000 80ba 	beq.w	800b24e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	f003 0301 	and.w	r3, r3, #1
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d11b      	bne.n	800b120 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0f4:	7812      	ldrb	r2, [r2, #0]
 800b0f6:	b2d2      	uxtb	r2, r2
 800b0f8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0fe:	1c5a      	adds	r2, r3, #1
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	3b01      	subs	r3, #1
 800b10e:	b29a      	uxth	r2, r3
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b11c:	853b      	strh	r3, [r7, #40]	; 0x28
 800b11e:	e096      	b.n	800b24e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b120:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b122:	8bfb      	ldrh	r3, [r7, #30]
 800b124:	429a      	cmp	r2, r3
 800b126:	d24a      	bcs.n	800b1be <HAL_SPI_TransmitReceive+0x57e>
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d045      	beq.n	800b1be <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b13e:	7812      	ldrb	r2, [r2, #0]
 800b140:	b2d2      	uxtb	r2, r2
 800b142:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b148:	1c5a      	adds	r2, r3, #1
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b15a:	7812      	ldrb	r2, [r2, #0]
 800b15c:	b2d2      	uxtb	r2, r2
 800b15e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b164:	1c5a      	adds	r2, r3, #1
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b176:	7812      	ldrb	r2, [r2, #0]
 800b178:	b2d2      	uxtb	r2, r2
 800b17a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b180:	1c5a      	adds	r2, r3, #1
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b192:	7812      	ldrb	r2, [r2, #0]
 800b194:	b2d2      	uxtb	r2, r2
 800b196:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b19c:	1c5a      	adds	r2, r3, #1
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	3b04      	subs	r3, #4
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1ba:	853b      	strh	r3, [r7, #40]	; 0x28
 800b1bc:	e047      	b.n	800b24e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b1be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b1c0:	2b03      	cmp	r3, #3
 800b1c2:	d820      	bhi.n	800b206 <HAL_SPI_TransmitReceive+0x5c6>
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d01b      	beq.n	800b206 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1da:	7812      	ldrb	r2, [r2, #0]
 800b1dc:	b2d2      	uxtb	r2, r2
 800b1de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1e4:	1c5a      	adds	r2, r3, #1
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b202:	853b      	strh	r3, [r7, #40]	; 0x28
 800b204:	e023      	b.n	800b24e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b206:	f7f6 fcc5 	bl	8001b94 <HAL_GetTick>
 800b20a:	4602      	mov	r2, r0
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b212:	429a      	cmp	r2, r3
 800b214:	d803      	bhi.n	800b21e <HAL_SPI_TransmitReceive+0x5de>
 800b216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b21c:	d102      	bne.n	800b224 <HAL_SPI_TransmitReceive+0x5e4>
 800b21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b220:	2b00      	cmp	r3, #0
 800b222:	d114      	bne.n	800b24e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f000 f845 	bl	800b2b4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b230:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800b24a:	2303      	movs	r3, #3
 800b24c:	e02d      	b.n	800b2aa <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b24e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b250:	2b00      	cmp	r3, #0
 800b252:	f47f af11 	bne.w	800b078 <HAL_SPI_TransmitReceive+0x438>
 800b256:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f47f af0d 	bne.w	800b078 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b264:	2200      	movs	r2, #0
 800b266:	2108      	movs	r1, #8
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f000 f8c3 	bl	800b3f4 <SPI_WaitOnFlagUntilTimeout>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d007      	beq.n	800b284 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b27a:	f043 0220 	orr.w	r2, r3, #32
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f000 f815 	bl	800b2b4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2201      	movs	r2, #1
 800b28e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d001      	beq.n	800b2a8 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e000      	b.n	800b2aa <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800b2a8:	2300      	movs	r3, #0
  }
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3730      	adds	r7, #48	; 0x30
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop

0800b2b4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	695b      	ldr	r3, [r3, #20]
 800b2c2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	699a      	ldr	r2, [r3, #24]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f042 0208 	orr.w	r2, r2, #8
 800b2d2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	699a      	ldr	r2, [r3, #24]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f042 0210 	orr.w	r2, r2, #16
 800b2e2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f022 0201 	bic.w	r2, r2, #1
 800b2f2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6919      	ldr	r1, [r3, #16]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	4b3c      	ldr	r3, [pc, #240]	; (800b3f0 <SPI_CloseTransfer+0x13c>)
 800b300:	400b      	ands	r3, r1
 800b302:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	689a      	ldr	r2, [r3, #8]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b312:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	2b04      	cmp	r3, #4
 800b31e:	d014      	beq.n	800b34a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f003 0320 	and.w	r3, r3, #32
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00f      	beq.n	800b34a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b330:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	699a      	ldr	r2, [r3, #24]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f042 0220 	orr.w	r2, r2, #32
 800b348:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b03      	cmp	r3, #3
 800b354:	d014      	beq.n	800b380 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00f      	beq.n	800b380 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b366:	f043 0204 	orr.w	r2, r3, #4
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	699a      	ldr	r2, [r3, #24]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b37e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00f      	beq.n	800b3aa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b390:	f043 0201 	orr.w	r2, r3, #1
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	699a      	ldr	r2, [r3, #24]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00f      	beq.n	800b3d4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3ba:	f043 0208 	orr.w	r2, r3, #8
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	699a      	ldr	r2, [r3, #24]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b3d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b3e4:	bf00      	nop
 800b3e6:	3714      	adds	r7, #20
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr
 800b3f0:	fffffc90 	.word	0xfffffc90

0800b3f4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	4613      	mov	r3, r2
 800b402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b404:	e010      	b.n	800b428 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b406:	f7f6 fbc5 	bl	8001b94 <HAL_GetTick>
 800b40a:	4602      	mov	r2, r0
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	683a      	ldr	r2, [r7, #0]
 800b412:	429a      	cmp	r2, r3
 800b414:	d803      	bhi.n	800b41e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b41c:	d102      	bne.n	800b424 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d101      	bne.n	800b428 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b424:	2303      	movs	r3, #3
 800b426:	e00f      	b.n	800b448 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	695a      	ldr	r2, [r3, #20]
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	4013      	ands	r3, r2
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	429a      	cmp	r2, r3
 800b436:	bf0c      	ite	eq
 800b438:	2301      	moveq	r3, #1
 800b43a:	2300      	movne	r3, #0
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	461a      	mov	r2, r3
 800b440:	79fb      	ldrb	r3, [r7, #7]
 800b442:	429a      	cmp	r2, r3
 800b444:	d0df      	beq.n	800b406 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b450:	b480      	push	{r7}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b45c:	095b      	lsrs	r3, r3, #5
 800b45e:	3301      	adds	r3, #1
 800b460:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	3301      	adds	r3, #1
 800b468:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	3307      	adds	r3, #7
 800b46e:	08db      	lsrs	r3, r3, #3
 800b470:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	fb02 f303 	mul.w	r3, r2, r3
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
	...

0800b488 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d121      	bne.n	800b4de <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	4b27      	ldr	r3, [pc, #156]	; (800b53c <FMC_SDRAM_Init+0xb4>)
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	6851      	ldr	r1, [r2, #4]
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	6892      	ldr	r2, [r2, #8]
 800b4aa:	4311      	orrs	r1, r2
 800b4ac:	683a      	ldr	r2, [r7, #0]
 800b4ae:	68d2      	ldr	r2, [r2, #12]
 800b4b0:	4311      	orrs	r1, r2
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	6912      	ldr	r2, [r2, #16]
 800b4b6:	4311      	orrs	r1, r2
 800b4b8:	683a      	ldr	r2, [r7, #0]
 800b4ba:	6952      	ldr	r2, [r2, #20]
 800b4bc:	4311      	orrs	r1, r2
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	6992      	ldr	r2, [r2, #24]
 800b4c2:	4311      	orrs	r1, r2
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	69d2      	ldr	r2, [r2, #28]
 800b4c8:	4311      	orrs	r1, r2
 800b4ca:	683a      	ldr	r2, [r7, #0]
 800b4cc:	6a12      	ldr	r2, [r2, #32]
 800b4ce:	4311      	orrs	r1, r2
 800b4d0:	683a      	ldr	r2, [r7, #0]
 800b4d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b4d4:	430a      	orrs	r2, r1
 800b4d6:	431a      	orrs	r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	601a      	str	r2, [r3, #0]
 800b4dc:	e026      	b.n	800b52c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	69d9      	ldr	r1, [r3, #28]
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	6a1b      	ldr	r3, [r3, #32]
 800b4ee:	4319      	orrs	r1, r3
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f4:	430b      	orrs	r3, r1
 800b4f6:	431a      	orrs	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685a      	ldr	r2, [r3, #4]
 800b500:	4b0e      	ldr	r3, [pc, #56]	; (800b53c <FMC_SDRAM_Init+0xb4>)
 800b502:	4013      	ands	r3, r2
 800b504:	683a      	ldr	r2, [r7, #0]
 800b506:	6851      	ldr	r1, [r2, #4]
 800b508:	683a      	ldr	r2, [r7, #0]
 800b50a:	6892      	ldr	r2, [r2, #8]
 800b50c:	4311      	orrs	r1, r2
 800b50e:	683a      	ldr	r2, [r7, #0]
 800b510:	68d2      	ldr	r2, [r2, #12]
 800b512:	4311      	orrs	r1, r2
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	6912      	ldr	r2, [r2, #16]
 800b518:	4311      	orrs	r1, r2
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	6952      	ldr	r2, [r2, #20]
 800b51e:	4311      	orrs	r1, r2
 800b520:	683a      	ldr	r2, [r7, #0]
 800b522:	6992      	ldr	r2, [r2, #24]
 800b524:	430a      	orrs	r2, r1
 800b526:	431a      	orrs	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	370c      	adds	r7, #12
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	ffff8000 	.word	0xffff8000

0800b540 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d128      	bne.n	800b5a4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	1e59      	subs	r1, r3, #1
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	3b01      	subs	r3, #1
 800b566:	011b      	lsls	r3, r3, #4
 800b568:	4319      	orrs	r1, r3
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	3b01      	subs	r3, #1
 800b570:	021b      	lsls	r3, r3, #8
 800b572:	4319      	orrs	r1, r3
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	3b01      	subs	r3, #1
 800b57a:	031b      	lsls	r3, r3, #12
 800b57c:	4319      	orrs	r1, r3
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	3b01      	subs	r3, #1
 800b584:	041b      	lsls	r3, r3, #16
 800b586:	4319      	orrs	r1, r3
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	695b      	ldr	r3, [r3, #20]
 800b58c:	3b01      	subs	r3, #1
 800b58e:	051b      	lsls	r3, r3, #20
 800b590:	4319      	orrs	r1, r3
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	699b      	ldr	r3, [r3, #24]
 800b596:	3b01      	subs	r3, #1
 800b598:	061b      	lsls	r3, r3, #24
 800b59a:	430b      	orrs	r3, r1
 800b59c:	431a      	orrs	r2, r3
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	609a      	str	r2, [r3, #8]
 800b5a2:	e02d      	b.n	800b600 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	689a      	ldr	r2, [r3, #8]
 800b5a8:	4b19      	ldr	r3, [pc, #100]	; (800b610 <FMC_SDRAM_Timing_Init+0xd0>)
 800b5aa:	4013      	ands	r3, r2
 800b5ac:	68ba      	ldr	r2, [r7, #8]
 800b5ae:	68d2      	ldr	r2, [r2, #12]
 800b5b0:	3a01      	subs	r2, #1
 800b5b2:	0311      	lsls	r1, r2, #12
 800b5b4:	68ba      	ldr	r2, [r7, #8]
 800b5b6:	6952      	ldr	r2, [r2, #20]
 800b5b8:	3a01      	subs	r2, #1
 800b5ba:	0512      	lsls	r2, r2, #20
 800b5bc:	430a      	orrs	r2, r1
 800b5be:	431a      	orrs	r2, r3
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	1e59      	subs	r1, r3, #1
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	011b      	lsls	r3, r3, #4
 800b5da:	4319      	orrs	r1, r3
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	021b      	lsls	r3, r3, #8
 800b5e4:	4319      	orrs	r1, r3
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	041b      	lsls	r3, r3, #16
 800b5ee:	4319      	orrs	r1, r3
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	699b      	ldr	r3, [r3, #24]
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	061b      	lsls	r3, r3, #24
 800b5f8:	430b      	orrs	r3, r1
 800b5fa:	431a      	orrs	r2, r3
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	ff0f0fff 	.word	0xff0f0fff

0800b614 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	691a      	ldr	r2, [r3, #16]
 800b624:	4b0c      	ldr	r3, [pc, #48]	; (800b658 <FMC_SDRAM_SendCommand+0x44>)
 800b626:	4013      	ands	r3, r2
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	6811      	ldr	r1, [r2, #0]
 800b62c:	68ba      	ldr	r2, [r7, #8]
 800b62e:	6852      	ldr	r2, [r2, #4]
 800b630:	4311      	orrs	r1, r2
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	6892      	ldr	r2, [r2, #8]
 800b636:	3a01      	subs	r2, #1
 800b638:	0152      	lsls	r2, r2, #5
 800b63a:	4311      	orrs	r1, r2
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	68d2      	ldr	r2, [r2, #12]
 800b640:	0252      	lsls	r2, r2, #9
 800b642:	430a      	orrs	r2, r1
 800b644:	431a      	orrs	r2, r3
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3714      	adds	r7, #20
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr
 800b658:	ffc00000 	.word	0xffc00000

0800b65c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	695a      	ldr	r2, [r3, #20]
 800b66a:	4b07      	ldr	r3, [pc, #28]	; (800b688 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b66c:	4013      	ands	r3, r2
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	0052      	lsls	r2, r2, #1
 800b672:	431a      	orrs	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop
 800b688:	ffffc001 	.word	0xffffc001

0800b68c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b68c:	b084      	sub	sp, #16
 800b68e:	b580      	push	{r7, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	f107 001c 	add.w	r0, r7, #28
 800b69a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b69e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d121      	bne.n	800b6ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68da      	ldr	r2, [r3, #12]
 800b6b6:	4b2c      	ldr	r3, [pc, #176]	; (800b768 <USB_CoreInit+0xdc>)
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b6ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d105      	bne.n	800b6de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f001 faf6 	bl	800ccd0 <USB_CoreReset>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	73fb      	strb	r3, [r7, #15]
 800b6e8:	e01b      	b.n	800b722 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f001 faea 	bl	800ccd0 <USB_CoreReset>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b700:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b704:	2b00      	cmp	r3, #0
 800b706:	d106      	bne.n	800b716 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	639a      	str	r2, [r3, #56]	; 0x38
 800b714:	e005      	b.n	800b722 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b722:	7fbb      	ldrb	r3, [r7, #30]
 800b724:	2b01      	cmp	r3, #1
 800b726:	d116      	bne.n	800b756 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b736:	4b0d      	ldr	r3, [pc, #52]	; (800b76c <USB_CoreInit+0xe0>)
 800b738:	4313      	orrs	r3, r2
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	f043 0206 	orr.w	r2, r3, #6
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	f043 0220 	orr.w	r2, r3, #32
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b756:	7bfb      	ldrb	r3, [r7, #15]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b762:	b004      	add	sp, #16
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	ffbdffbf 	.word	0xffbdffbf
 800b76c:	03ee0000 	.word	0x03ee0000

0800b770 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b770:	b480      	push	{r7}
 800b772:	b087      	sub	sp, #28
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	4613      	mov	r3, r2
 800b77c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	2b02      	cmp	r3, #2
 800b782:	d165      	bne.n	800b850 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	4a41      	ldr	r2, [pc, #260]	; (800b88c <USB_SetTurnaroundTime+0x11c>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d906      	bls.n	800b79a <USB_SetTurnaroundTime+0x2a>
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	4a40      	ldr	r2, [pc, #256]	; (800b890 <USB_SetTurnaroundTime+0x120>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d202      	bcs.n	800b79a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b794:	230f      	movs	r3, #15
 800b796:	617b      	str	r3, [r7, #20]
 800b798:	e062      	b.n	800b860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	4a3c      	ldr	r2, [pc, #240]	; (800b890 <USB_SetTurnaroundTime+0x120>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d306      	bcc.n	800b7b0 <USB_SetTurnaroundTime+0x40>
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	4a3b      	ldr	r2, [pc, #236]	; (800b894 <USB_SetTurnaroundTime+0x124>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d202      	bcs.n	800b7b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b7aa:	230e      	movs	r3, #14
 800b7ac:	617b      	str	r3, [r7, #20]
 800b7ae:	e057      	b.n	800b860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	4a38      	ldr	r2, [pc, #224]	; (800b894 <USB_SetTurnaroundTime+0x124>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d306      	bcc.n	800b7c6 <USB_SetTurnaroundTime+0x56>
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	4a37      	ldr	r2, [pc, #220]	; (800b898 <USB_SetTurnaroundTime+0x128>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d202      	bcs.n	800b7c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b7c0:	230d      	movs	r3, #13
 800b7c2:	617b      	str	r3, [r7, #20]
 800b7c4:	e04c      	b.n	800b860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	4a33      	ldr	r2, [pc, #204]	; (800b898 <USB_SetTurnaroundTime+0x128>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d306      	bcc.n	800b7dc <USB_SetTurnaroundTime+0x6c>
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	4a32      	ldr	r2, [pc, #200]	; (800b89c <USB_SetTurnaroundTime+0x12c>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d802      	bhi.n	800b7dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b7d6:	230c      	movs	r3, #12
 800b7d8:	617b      	str	r3, [r7, #20]
 800b7da:	e041      	b.n	800b860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	4a2f      	ldr	r2, [pc, #188]	; (800b89c <USB_SetTurnaroundTime+0x12c>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d906      	bls.n	800b7f2 <USB_SetTurnaroundTime+0x82>
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	4a2e      	ldr	r2, [pc, #184]	; (800b8a0 <USB_SetTurnaroundTime+0x130>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d802      	bhi.n	800b7f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b7ec:	230b      	movs	r3, #11
 800b7ee:	617b      	str	r3, [r7, #20]
 800b7f0:	e036      	b.n	800b860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	4a2a      	ldr	r2, [pc, #168]	; (800b8a0 <USB_SetTurnaroundTime+0x130>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d906      	bls.n	800b808 <USB_SetTurnaroundTime+0x98>
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	4a29      	ldr	r2, [pc, #164]	; (800b8a4 <USB_SetTurnaroundTime+0x134>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d802      	bhi.n	800b808 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b802:	230a      	movs	r3, #10
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	e02b      	b.n	800b860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	4a26      	ldr	r2, [pc, #152]	; (800b8a4 <USB_SetTurnaroundTime+0x134>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d906      	bls.n	800b81e <USB_SetTurnaroundTime+0xae>
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	4a25      	ldr	r2, [pc, #148]	; (800b8a8 <USB_SetTurnaroundTime+0x138>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d202      	bcs.n	800b81e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b818:	2309      	movs	r3, #9
 800b81a:	617b      	str	r3, [r7, #20]
 800b81c:	e020      	b.n	800b860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	4a21      	ldr	r2, [pc, #132]	; (800b8a8 <USB_SetTurnaroundTime+0x138>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d306      	bcc.n	800b834 <USB_SetTurnaroundTime+0xc4>
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	4a20      	ldr	r2, [pc, #128]	; (800b8ac <USB_SetTurnaroundTime+0x13c>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d802      	bhi.n	800b834 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b82e:	2308      	movs	r3, #8
 800b830:	617b      	str	r3, [r7, #20]
 800b832:	e015      	b.n	800b860 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	4a1d      	ldr	r2, [pc, #116]	; (800b8ac <USB_SetTurnaroundTime+0x13c>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d906      	bls.n	800b84a <USB_SetTurnaroundTime+0xda>
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	4a1c      	ldr	r2, [pc, #112]	; (800b8b0 <USB_SetTurnaroundTime+0x140>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d202      	bcs.n	800b84a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b844:	2307      	movs	r3, #7
 800b846:	617b      	str	r3, [r7, #20]
 800b848:	e00a      	b.n	800b860 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b84a:	2306      	movs	r3, #6
 800b84c:	617b      	str	r3, [r7, #20]
 800b84e:	e007      	b.n	800b860 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b850:	79fb      	ldrb	r3, [r7, #7]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d102      	bne.n	800b85c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b856:	2309      	movs	r3, #9
 800b858:	617b      	str	r3, [r7, #20]
 800b85a:	e001      	b.n	800b860 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b85c:	2309      	movs	r3, #9
 800b85e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	68da      	ldr	r2, [r3, #12]
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	029b      	lsls	r3, r3, #10
 800b874:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b878:	431a      	orrs	r2, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	371c      	adds	r7, #28
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	00d8acbf 	.word	0x00d8acbf
 800b890:	00e4e1c0 	.word	0x00e4e1c0
 800b894:	00f42400 	.word	0x00f42400
 800b898:	01067380 	.word	0x01067380
 800b89c:	011a499f 	.word	0x011a499f
 800b8a0:	01312cff 	.word	0x01312cff
 800b8a4:	014ca43f 	.word	0x014ca43f
 800b8a8:	016e3600 	.word	0x016e3600
 800b8ac:	01a6ab1f 	.word	0x01a6ab1f
 800b8b0:	01e84800 	.word	0x01e84800

0800b8b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	689b      	ldr	r3, [r3, #8]
 800b8c0:	f043 0201 	orr.w	r2, r3, #1
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	370c      	adds	r7, #12
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr

0800b8d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b083      	sub	sp, #12
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	f023 0201 	bic.w	r2, r3, #1
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	460b      	mov	r3, r1
 800b902:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b904:	2300      	movs	r3, #0
 800b906:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b914:	78fb      	ldrb	r3, [r7, #3]
 800b916:	2b01      	cmp	r3, #1
 800b918:	d115      	bne.n	800b946 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b926:	200a      	movs	r0, #10
 800b928:	f7f6 f940 	bl	8001bac <HAL_Delay>
      ms += 10U;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	330a      	adds	r3, #10
 800b930:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f001 f93b 	bl	800cbae <USB_GetMode>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d01e      	beq.n	800b97c <USB_SetCurrentMode+0x84>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2bc7      	cmp	r3, #199	; 0xc7
 800b942:	d9f0      	bls.n	800b926 <USB_SetCurrentMode+0x2e>
 800b944:	e01a      	b.n	800b97c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b946:	78fb      	ldrb	r3, [r7, #3]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d115      	bne.n	800b978 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b958:	200a      	movs	r0, #10
 800b95a:	f7f6 f927 	bl	8001bac <HAL_Delay>
      ms += 10U;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	330a      	adds	r3, #10
 800b962:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f001 f922 	bl	800cbae <USB_GetMode>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d005      	beq.n	800b97c <USB_SetCurrentMode+0x84>
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2bc7      	cmp	r3, #199	; 0xc7
 800b974:	d9f0      	bls.n	800b958 <USB_SetCurrentMode+0x60>
 800b976:	e001      	b.n	800b97c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b978:	2301      	movs	r3, #1
 800b97a:	e005      	b.n	800b988 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2bc8      	cmp	r3, #200	; 0xc8
 800b980:	d101      	bne.n	800b986 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b982:	2301      	movs	r3, #1
 800b984:	e000      	b.n	800b988 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b990:	b084      	sub	sp, #16
 800b992:	b580      	push	{r7, lr}
 800b994:	b086      	sub	sp, #24
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
 800b99a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b99e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	613b      	str	r3, [r7, #16]
 800b9ae:	e009      	b.n	800b9c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	3340      	adds	r3, #64	; 0x40
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4413      	add	r3, r2
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	613b      	str	r3, [r7, #16]
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	2b0e      	cmp	r3, #14
 800b9c8:	d9f2      	bls.n	800b9b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b9ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d11c      	bne.n	800ba0c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9e0:	f043 0302 	orr.w	r3, r3, #2
 800b9e4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	601a      	str	r2, [r3, #0]
 800ba0a:	e005      	b.n	800ba18 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba1e:	461a      	mov	r2, r3
 800ba20:	2300      	movs	r3, #0
 800ba22:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba24:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d10d      	bne.n	800ba48 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ba2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d104      	bne.n	800ba3e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ba34:	2100      	movs	r1, #0
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 f968 	bl	800bd0c <USB_SetDevSpeed>
 800ba3c:	e008      	b.n	800ba50 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ba3e:	2101      	movs	r1, #1
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 f963 	bl	800bd0c <USB_SetDevSpeed>
 800ba46:	e003      	b.n	800ba50 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ba48:	2103      	movs	r1, #3
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f95e 	bl	800bd0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ba50:	2110      	movs	r1, #16
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 f8fa 	bl	800bc4c <USB_FlushTxFifo>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d001      	beq.n	800ba62 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f924 	bl	800bcb0 <USB_FlushRxFifo>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d001      	beq.n	800ba72 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba78:	461a      	mov	r2, r3
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba84:	461a      	mov	r2, r3
 800ba86:	2300      	movs	r3, #0
 800ba88:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba90:	461a      	mov	r2, r3
 800ba92:	2300      	movs	r3, #0
 800ba94:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba96:	2300      	movs	r3, #0
 800ba98:	613b      	str	r3, [r7, #16]
 800ba9a:	e043      	b.n	800bb24 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	015a      	lsls	r2, r3, #5
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	4413      	add	r3, r2
 800baa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800baae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bab2:	d118      	bne.n	800bae6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d10a      	bne.n	800bad0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	015a      	lsls	r2, r3, #5
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	4413      	add	r3, r2
 800bac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac6:	461a      	mov	r2, r3
 800bac8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bacc:	6013      	str	r3, [r2, #0]
 800bace:	e013      	b.n	800baf8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	015a      	lsls	r2, r3, #5
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	4413      	add	r3, r2
 800bad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800badc:	461a      	mov	r2, r3
 800bade:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bae2:	6013      	str	r3, [r2, #0]
 800bae4:	e008      	b.n	800baf8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	015a      	lsls	r2, r3, #5
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	4413      	add	r3, r2
 800baee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baf2:	461a      	mov	r2, r3
 800baf4:	2300      	movs	r3, #0
 800baf6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	015a      	lsls	r2, r3, #5
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	4413      	add	r3, r2
 800bb00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb04:	461a      	mov	r2, r3
 800bb06:	2300      	movs	r3, #0
 800bb08:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	015a      	lsls	r2, r3, #5
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	4413      	add	r3, r2
 800bb12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb16:	461a      	mov	r2, r3
 800bb18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	3301      	adds	r3, #1
 800bb22:	613b      	str	r3, [r7, #16]
 800bb24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb28:	461a      	mov	r2, r3
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d3b5      	bcc.n	800ba9c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb30:	2300      	movs	r3, #0
 800bb32:	613b      	str	r3, [r7, #16]
 800bb34:	e043      	b.n	800bbbe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	015a      	lsls	r2, r3, #5
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb4c:	d118      	bne.n	800bb80 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10a      	bne.n	800bb6a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	015a      	lsls	r2, r3, #5
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb60:	461a      	mov	r2, r3
 800bb62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb66:	6013      	str	r3, [r2, #0]
 800bb68:	e013      	b.n	800bb92 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	015a      	lsls	r2, r3, #5
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	4413      	add	r3, r2
 800bb72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb76:	461a      	mov	r2, r3
 800bb78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bb7c:	6013      	str	r3, [r2, #0]
 800bb7e:	e008      	b.n	800bb92 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	015a      	lsls	r2, r3, #5
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	4413      	add	r3, r2
 800bb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	2300      	movs	r3, #0
 800bb90:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	015a      	lsls	r2, r3, #5
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	4413      	add	r3, r2
 800bb9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb9e:	461a      	mov	r2, r3
 800bba0:	2300      	movs	r3, #0
 800bba2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	015a      	lsls	r2, r3, #5
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	4413      	add	r3, r2
 800bbac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bbb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	613b      	str	r3, [r7, #16]
 800bbbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d3b5      	bcc.n	800bb36 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbd0:	691b      	ldr	r3, [r3, #16]
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbdc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bbea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bbec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d105      	bne.n	800bc00 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	699b      	ldr	r3, [r3, #24]
 800bbf8:	f043 0210 	orr.w	r2, r3, #16
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	699a      	ldr	r2, [r3, #24]
 800bc04:	4b0f      	ldr	r3, [pc, #60]	; (800bc44 <USB_DevInit+0x2b4>)
 800bc06:	4313      	orrs	r3, r2
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bc0c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d005      	beq.n	800bc20 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	699b      	ldr	r3, [r3, #24]
 800bc18:	f043 0208 	orr.w	r2, r3, #8
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bc20:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d105      	bne.n	800bc34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	699a      	ldr	r2, [r3, #24]
 800bc2c:	4b06      	ldr	r3, [pc, #24]	; (800bc48 <USB_DevInit+0x2b8>)
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bc34:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3718      	adds	r7, #24
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc40:	b004      	add	sp, #16
 800bc42:	4770      	bx	lr
 800bc44:	803c3800 	.word	0x803c3800
 800bc48:	40000004 	.word	0x40000004

0800bc4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bc56:	2300      	movs	r3, #0
 800bc58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bc66:	d901      	bls.n	800bc6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bc68:	2303      	movs	r3, #3
 800bc6a:	e01b      	b.n	800bca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	daf2      	bge.n	800bc5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bc74:	2300      	movs	r3, #0
 800bc76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	019b      	lsls	r3, r3, #6
 800bc7c:	f043 0220 	orr.w	r2, r3, #32
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	3301      	adds	r3, #1
 800bc88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bc90:	d901      	bls.n	800bc96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bc92:	2303      	movs	r3, #3
 800bc94:	e006      	b.n	800bca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	f003 0320 	and.w	r3, r3, #32
 800bc9e:	2b20      	cmp	r3, #32
 800bca0:	d0f0      	beq.n	800bc84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3714      	adds	r7, #20
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bcc8:	d901      	bls.n	800bcce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bcca:	2303      	movs	r3, #3
 800bccc:	e018      	b.n	800bd00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	691b      	ldr	r3, [r3, #16]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	daf2      	bge.n	800bcbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2210      	movs	r2, #16
 800bcde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	3301      	adds	r3, #1
 800bce4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bcec:	d901      	bls.n	800bcf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bcee:	2303      	movs	r3, #3
 800bcf0:	e006      	b.n	800bd00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	f003 0310 	and.w	r3, r3, #16
 800bcfa:	2b10      	cmp	r3, #16
 800bcfc:	d0f0      	beq.n	800bce0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3714      	adds	r7, #20
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	460b      	mov	r3, r1
 800bd16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	78fb      	ldrb	r3, [r7, #3]
 800bd26:	68f9      	ldr	r1, [r7, #12]
 800bd28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3714      	adds	r7, #20
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr

0800bd3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800bd3e:	b480      	push	{r7}
 800bd40:	b087      	sub	sp, #28
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	f003 0306 	and.w	r3, r3, #6
 800bd56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d102      	bne.n	800bd64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	75fb      	strb	r3, [r7, #23]
 800bd62:	e00a      	b.n	800bd7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2b02      	cmp	r3, #2
 800bd68:	d002      	beq.n	800bd70 <USB_GetDevSpeed+0x32>
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2b06      	cmp	r3, #6
 800bd6e:	d102      	bne.n	800bd76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bd70:	2302      	movs	r3, #2
 800bd72:	75fb      	strb	r3, [r7, #23]
 800bd74:	e001      	b.n	800bd7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bd76:	230f      	movs	r3, #15
 800bd78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bd7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	371c      	adds	r7, #28
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	785b      	ldrb	r3, [r3, #1]
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d139      	bne.n	800be18 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdaa:	69da      	ldr	r2, [r3, #28]
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	f003 030f 	and.w	r3, r3, #15
 800bdb4:	2101      	movs	r1, #1
 800bdb6:	fa01 f303 	lsl.w	r3, r1, r3
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	68f9      	ldr	r1, [r7, #12]
 800bdbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	015a      	lsls	r2, r3, #5
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	4413      	add	r3, r2
 800bdce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d153      	bne.n	800be84 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	015a      	lsls	r2, r3, #5
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	4413      	add	r3, r2
 800bde4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	791b      	ldrb	r3, [r3, #4]
 800bdf6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bdf8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	059b      	lsls	r3, r3, #22
 800bdfe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800be00:	431a      	orrs	r2, r3
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	0159      	lsls	r1, r3, #5
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	440b      	add	r3, r1
 800be0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be0e:	4619      	mov	r1, r3
 800be10:	4b20      	ldr	r3, [pc, #128]	; (800be94 <USB_ActivateEndpoint+0x10c>)
 800be12:	4313      	orrs	r3, r2
 800be14:	600b      	str	r3, [r1, #0]
 800be16:	e035      	b.n	800be84 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be1e:	69da      	ldr	r2, [r3, #28]
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	f003 030f 	and.w	r3, r3, #15
 800be28:	2101      	movs	r1, #1
 800be2a:	fa01 f303 	lsl.w	r3, r1, r3
 800be2e:	041b      	lsls	r3, r3, #16
 800be30:	68f9      	ldr	r1, [r7, #12]
 800be32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be36:	4313      	orrs	r3, r2
 800be38:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	015a      	lsls	r2, r3, #5
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	4413      	add	r3, r2
 800be42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d119      	bne.n	800be84 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	015a      	lsls	r2, r3, #5
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	4413      	add	r3, r2
 800be58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	791b      	ldrb	r3, [r3, #4]
 800be6a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800be6c:	430b      	orrs	r3, r1
 800be6e:	431a      	orrs	r2, r3
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	0159      	lsls	r1, r3, #5
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	440b      	add	r3, r1
 800be78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be7c:	4619      	mov	r1, r3
 800be7e:	4b05      	ldr	r3, [pc, #20]	; (800be94 <USB_ActivateEndpoint+0x10c>)
 800be80:	4313      	orrs	r3, r2
 800be82:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	3714      	adds	r7, #20
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	10008000 	.word	0x10008000

0800be98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	785b      	ldrb	r3, [r3, #1]
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d161      	bne.n	800bf78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	015a      	lsls	r2, r3, #5
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	4413      	add	r3, r2
 800bebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800beca:	d11f      	bne.n	800bf0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	015a      	lsls	r2, r3, #5
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	4413      	add	r3, r2
 800bed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68ba      	ldr	r2, [r7, #8]
 800bedc:	0151      	lsls	r1, r2, #5
 800bede:	68fa      	ldr	r2, [r7, #12]
 800bee0:	440a      	add	r2, r1
 800bee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bee6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800beea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	015a      	lsls	r2, r3, #5
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	4413      	add	r3, r2
 800bef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	0151      	lsls	r1, r2, #5
 800befe:	68fa      	ldr	r2, [r7, #12]
 800bf00:	440a      	add	r2, r1
 800bf02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	f003 030f 	and.w	r3, r3, #15
 800bf1c:	2101      	movs	r1, #1
 800bf1e:	fa01 f303 	lsl.w	r3, r1, r3
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	43db      	mvns	r3, r3
 800bf26:	68f9      	ldr	r1, [r7, #12]
 800bf28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf2c:	4013      	ands	r3, r2
 800bf2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf36:	69da      	ldr	r2, [r3, #28]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	f003 030f 	and.w	r3, r3, #15
 800bf40:	2101      	movs	r1, #1
 800bf42:	fa01 f303 	lsl.w	r3, r1, r3
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	43db      	mvns	r3, r3
 800bf4a:	68f9      	ldr	r1, [r7, #12]
 800bf4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf50:	4013      	ands	r3, r2
 800bf52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	015a      	lsls	r2, r3, #5
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	4413      	add	r3, r2
 800bf5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	0159      	lsls	r1, r3, #5
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	440b      	add	r3, r1
 800bf6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf6e:	4619      	mov	r1, r3
 800bf70:	4b35      	ldr	r3, [pc, #212]	; (800c048 <USB_DeactivateEndpoint+0x1b0>)
 800bf72:	4013      	ands	r3, r2
 800bf74:	600b      	str	r3, [r1, #0]
 800bf76:	e060      	b.n	800c03a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	015a      	lsls	r2, r3, #5
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	4413      	add	r3, r2
 800bf80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf8e:	d11f      	bne.n	800bfd0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	0151      	lsls	r1, r2, #5
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	440a      	add	r2, r1
 800bfa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bfae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	015a      	lsls	r2, r3, #5
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	68ba      	ldr	r2, [r7, #8]
 800bfc0:	0151      	lsls	r1, r2, #5
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	440a      	add	r2, r1
 800bfc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bfce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	f003 030f 	and.w	r3, r3, #15
 800bfe0:	2101      	movs	r1, #1
 800bfe2:	fa01 f303 	lsl.w	r3, r1, r3
 800bfe6:	041b      	lsls	r3, r3, #16
 800bfe8:	43db      	mvns	r3, r3
 800bfea:	68f9      	ldr	r1, [r7, #12]
 800bfec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bff0:	4013      	ands	r3, r2
 800bff2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bffa:	69da      	ldr	r2, [r3, #28]
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	f003 030f 	and.w	r3, r3, #15
 800c004:	2101      	movs	r1, #1
 800c006:	fa01 f303 	lsl.w	r3, r1, r3
 800c00a:	041b      	lsls	r3, r3, #16
 800c00c:	43db      	mvns	r3, r3
 800c00e:	68f9      	ldr	r1, [r7, #12]
 800c010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c014:	4013      	ands	r3, r2
 800c016:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	015a      	lsls	r2, r3, #5
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	4413      	add	r3, r2
 800c020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	0159      	lsls	r1, r3, #5
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	440b      	add	r3, r1
 800c02e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c032:	4619      	mov	r1, r3
 800c034:	4b05      	ldr	r3, [pc, #20]	; (800c04c <USB_DeactivateEndpoint+0x1b4>)
 800c036:	4013      	ands	r3, r2
 800c038:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3714      	adds	r7, #20
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr
 800c048:	ec337800 	.word	0xec337800
 800c04c:	eff37800 	.word	0xeff37800

0800c050 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b08a      	sub	sp, #40	; 0x28
 800c054:	af02      	add	r7, sp, #8
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	4613      	mov	r3, r2
 800c05c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	785b      	ldrb	r3, [r3, #1]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	f040 8181 	bne.w	800c374 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d132      	bne.n	800c0e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	015a      	lsls	r2, r3, #5
 800c07e:	69fb      	ldr	r3, [r7, #28]
 800c080:	4413      	add	r3, r2
 800c082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c086:	691a      	ldr	r2, [r3, #16]
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	0159      	lsls	r1, r3, #5
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	440b      	add	r3, r1
 800c090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c094:	4619      	mov	r1, r3
 800c096:	4ba5      	ldr	r3, [pc, #660]	; (800c32c <USB_EPStartXfer+0x2dc>)
 800c098:	4013      	ands	r3, r2
 800c09a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	015a      	lsls	r2, r3, #5
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0a8:	691b      	ldr	r3, [r3, #16]
 800c0aa:	69ba      	ldr	r2, [r7, #24]
 800c0ac:	0151      	lsls	r1, r2, #5
 800c0ae:	69fa      	ldr	r2, [r7, #28]
 800c0b0:	440a      	add	r2, r1
 800c0b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c0ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	015a      	lsls	r2, r3, #5
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c8:	691a      	ldr	r2, [r3, #16]
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	0159      	lsls	r1, r3, #5
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	440b      	add	r3, r1
 800c0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	4b95      	ldr	r3, [pc, #596]	; (800c330 <USB_EPStartXfer+0x2e0>)
 800c0da:	4013      	ands	r3, r2
 800c0dc:	610b      	str	r3, [r1, #16]
 800c0de:	e092      	b.n	800c206 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	015a      	lsls	r2, r3, #5
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ec:	691a      	ldr	r2, [r3, #16]
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	0159      	lsls	r1, r3, #5
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	440b      	add	r3, r1
 800c0f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	4b8c      	ldr	r3, [pc, #560]	; (800c330 <USB_EPStartXfer+0x2e0>)
 800c0fe:	4013      	ands	r3, r2
 800c100:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	015a      	lsls	r2, r3, #5
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	4413      	add	r3, r2
 800c10a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c10e:	691a      	ldr	r2, [r3, #16]
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	0159      	lsls	r1, r3, #5
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	440b      	add	r3, r1
 800c118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c11c:	4619      	mov	r1, r3
 800c11e:	4b83      	ldr	r3, [pc, #524]	; (800c32c <USB_EPStartXfer+0x2dc>)
 800c120:	4013      	ands	r3, r2
 800c122:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800c124:	69bb      	ldr	r3, [r7, #24]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d11a      	bne.n	800c160 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	691a      	ldr	r2, [r3, #16]
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	429a      	cmp	r2, r3
 800c134:	d903      	bls.n	800c13e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	689a      	ldr	r2, [r3, #8]
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	015a      	lsls	r2, r3, #5
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	4413      	add	r3, r2
 800c146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	69ba      	ldr	r2, [r7, #24]
 800c14e:	0151      	lsls	r1, r2, #5
 800c150:	69fa      	ldr	r2, [r7, #28]
 800c152:	440a      	add	r2, r1
 800c154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c158:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c15c:	6113      	str	r3, [r2, #16]
 800c15e:	e01b      	b.n	800c198 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	015a      	lsls	r2, r3, #5
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	4413      	add	r3, r2
 800c168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c16c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	6919      	ldr	r1, [r3, #16]
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	440b      	add	r3, r1
 800c178:	1e59      	subs	r1, r3, #1
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c182:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c184:	4b6b      	ldr	r3, [pc, #428]	; (800c334 <USB_EPStartXfer+0x2e4>)
 800c186:	400b      	ands	r3, r1
 800c188:	69b9      	ldr	r1, [r7, #24]
 800c18a:	0148      	lsls	r0, r1, #5
 800c18c:	69f9      	ldr	r1, [r7, #28]
 800c18e:	4401      	add	r1, r0
 800c190:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c194:	4313      	orrs	r3, r2
 800c196:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	015a      	lsls	r2, r3, #5
 800c19c:	69fb      	ldr	r3, [r7, #28]
 800c19e:	4413      	add	r3, r2
 800c1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a4:	691a      	ldr	r2, [r3, #16]
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	691b      	ldr	r3, [r3, #16]
 800c1aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1ae:	69b9      	ldr	r1, [r7, #24]
 800c1b0:	0148      	lsls	r0, r1, #5
 800c1b2:	69f9      	ldr	r1, [r7, #28]
 800c1b4:	4401      	add	r1, r0
 800c1b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	791b      	ldrb	r3, [r3, #4]
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d11f      	bne.n	800c206 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	015a      	lsls	r2, r3, #5
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	69ba      	ldr	r2, [r7, #24]
 800c1d6:	0151      	lsls	r1, r2, #5
 800c1d8:	69fa      	ldr	r2, [r7, #28]
 800c1da:	440a      	add	r2, r1
 800c1dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c1e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	015a      	lsls	r2, r3, #5
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1f2:	691b      	ldr	r3, [r3, #16]
 800c1f4:	69ba      	ldr	r2, [r7, #24]
 800c1f6:	0151      	lsls	r1, r2, #5
 800c1f8:	69fa      	ldr	r2, [r7, #28]
 800c1fa:	440a      	add	r2, r1
 800c1fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c200:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c204:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c206:	79fb      	ldrb	r3, [r7, #7]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d14b      	bne.n	800c2a4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	69db      	ldr	r3, [r3, #28]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d009      	beq.n	800c228 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	015a      	lsls	r2, r3, #5
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	4413      	add	r3, r2
 800c21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c220:	461a      	mov	r2, r3
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	69db      	ldr	r3, [r3, #28]
 800c226:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	791b      	ldrb	r3, [r3, #4]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d128      	bne.n	800c282 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d110      	bne.n	800c262 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	015a      	lsls	r2, r3, #5
 800c244:	69fb      	ldr	r3, [r7, #28]
 800c246:	4413      	add	r3, r2
 800c248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	69ba      	ldr	r2, [r7, #24]
 800c250:	0151      	lsls	r1, r2, #5
 800c252:	69fa      	ldr	r2, [r7, #28]
 800c254:	440a      	add	r2, r1
 800c256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c25a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c25e:	6013      	str	r3, [r2, #0]
 800c260:	e00f      	b.n	800c282 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	015a      	lsls	r2, r3, #5
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	4413      	add	r3, r2
 800c26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	69ba      	ldr	r2, [r7, #24]
 800c272:	0151      	lsls	r1, r2, #5
 800c274:	69fa      	ldr	r2, [r7, #28]
 800c276:	440a      	add	r2, r1
 800c278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c27c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c280:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	015a      	lsls	r2, r3, #5
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	4413      	add	r3, r2
 800c28a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	69ba      	ldr	r2, [r7, #24]
 800c292:	0151      	lsls	r1, r2, #5
 800c294:	69fa      	ldr	r2, [r7, #28]
 800c296:	440a      	add	r2, r1
 800c298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c29c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c2a0:	6013      	str	r3, [r2, #0]
 800c2a2:	e16a      	b.n	800c57a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	015a      	lsls	r2, r3, #5
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	69ba      	ldr	r2, [r7, #24]
 800c2b4:	0151      	lsls	r1, r2, #5
 800c2b6:	69fa      	ldr	r2, [r7, #28]
 800c2b8:	440a      	add	r2, r1
 800c2ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c2c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	791b      	ldrb	r3, [r3, #4]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d015      	beq.n	800c2f8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f000 8152 	beq.w	800c57a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	f003 030f 	and.w	r3, r3, #15
 800c2e6:	2101      	movs	r1, #1
 800c2e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c2ec:	69f9      	ldr	r1, [r7, #28]
 800c2ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	634b      	str	r3, [r1, #52]	; 0x34
 800c2f6:	e140      	b.n	800c57a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c304:	2b00      	cmp	r3, #0
 800c306:	d117      	bne.n	800c338 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	015a      	lsls	r2, r3, #5
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	4413      	add	r3, r2
 800c310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	69ba      	ldr	r2, [r7, #24]
 800c318:	0151      	lsls	r1, r2, #5
 800c31a:	69fa      	ldr	r2, [r7, #28]
 800c31c:	440a      	add	r2, r1
 800c31e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c322:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c326:	6013      	str	r3, [r2, #0]
 800c328:	e016      	b.n	800c358 <USB_EPStartXfer+0x308>
 800c32a:	bf00      	nop
 800c32c:	e007ffff 	.word	0xe007ffff
 800c330:	fff80000 	.word	0xfff80000
 800c334:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	015a      	lsls	r2, r3, #5
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	4413      	add	r3, r2
 800c340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	69ba      	ldr	r2, [r7, #24]
 800c348:	0151      	lsls	r1, r2, #5
 800c34a:	69fa      	ldr	r2, [r7, #28]
 800c34c:	440a      	add	r2, r1
 800c34e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c356:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	68d9      	ldr	r1, [r3, #12]
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	781a      	ldrb	r2, [r3, #0]
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	691b      	ldr	r3, [r3, #16]
 800c364:	b298      	uxth	r0, r3
 800c366:	79fb      	ldrb	r3, [r7, #7]
 800c368:	9300      	str	r3, [sp, #0]
 800c36a:	4603      	mov	r3, r0
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f000 f9b9 	bl	800c6e4 <USB_WritePacket>
 800c372:	e102      	b.n	800c57a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	015a      	lsls	r2, r3, #5
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	4413      	add	r3, r2
 800c37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c380:	691a      	ldr	r2, [r3, #16]
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	0159      	lsls	r1, r3, #5
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	440b      	add	r3, r1
 800c38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c38e:	4619      	mov	r1, r3
 800c390:	4b7c      	ldr	r3, [pc, #496]	; (800c584 <USB_EPStartXfer+0x534>)
 800c392:	4013      	ands	r3, r2
 800c394:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	015a      	lsls	r2, r3, #5
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	4413      	add	r3, r2
 800c39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3a2:	691a      	ldr	r2, [r3, #16]
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	0159      	lsls	r1, r3, #5
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	440b      	add	r3, r1
 800c3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	4b75      	ldr	r3, [pc, #468]	; (800c588 <USB_EPStartXfer+0x538>)
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d12f      	bne.n	800c41e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d003      	beq.n	800c3ce <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	689a      	ldr	r2, [r3, #8]
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	689a      	ldr	r2, [r3, #8]
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	015a      	lsls	r2, r3, #5
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	4413      	add	r3, r2
 800c3de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e2:	691a      	ldr	r2, [r3, #16]
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	6a1b      	ldr	r3, [r3, #32]
 800c3e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3ec:	69b9      	ldr	r1, [r7, #24]
 800c3ee:	0148      	lsls	r0, r1, #5
 800c3f0:	69f9      	ldr	r1, [r7, #28]
 800c3f2:	4401      	add	r1, r0
 800c3f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	015a      	lsls	r2, r3, #5
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	4413      	add	r3, r2
 800c404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c408:	691b      	ldr	r3, [r3, #16]
 800c40a:	69ba      	ldr	r2, [r7, #24]
 800c40c:	0151      	lsls	r1, r2, #5
 800c40e:	69fa      	ldr	r2, [r7, #28]
 800c410:	440a      	add	r2, r1
 800c412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c416:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c41a:	6113      	str	r3, [r2, #16]
 800c41c:	e05f      	b.n	800c4de <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	691b      	ldr	r3, [r3, #16]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d123      	bne.n	800c46e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	015a      	lsls	r2, r3, #5
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	4413      	add	r3, r2
 800c42e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c432:	691a      	ldr	r2, [r3, #16]
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c43c:	69b9      	ldr	r1, [r7, #24]
 800c43e:	0148      	lsls	r0, r1, #5
 800c440:	69f9      	ldr	r1, [r7, #28]
 800c442:	4401      	add	r1, r0
 800c444:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c448:	4313      	orrs	r3, r2
 800c44a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	015a      	lsls	r2, r3, #5
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	4413      	add	r3, r2
 800c454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c458:	691b      	ldr	r3, [r3, #16]
 800c45a:	69ba      	ldr	r2, [r7, #24]
 800c45c:	0151      	lsls	r1, r2, #5
 800c45e:	69fa      	ldr	r2, [r7, #28]
 800c460:	440a      	add	r2, r1
 800c462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c466:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c46a:	6113      	str	r3, [r2, #16]
 800c46c:	e037      	b.n	800c4de <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	691a      	ldr	r2, [r3, #16]
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	4413      	add	r3, r2
 800c478:	1e5a      	subs	r2, r3, #1
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c482:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	8afa      	ldrh	r2, [r7, #22]
 800c48a:	fb03 f202 	mul.w	r2, r3, r2
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	015a      	lsls	r2, r3, #5
 800c496:	69fb      	ldr	r3, [r7, #28]
 800c498:	4413      	add	r3, r2
 800c49a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c49e:	691a      	ldr	r2, [r3, #16]
 800c4a0:	8afb      	ldrh	r3, [r7, #22]
 800c4a2:	04d9      	lsls	r1, r3, #19
 800c4a4:	4b39      	ldr	r3, [pc, #228]	; (800c58c <USB_EPStartXfer+0x53c>)
 800c4a6:	400b      	ands	r3, r1
 800c4a8:	69b9      	ldr	r1, [r7, #24]
 800c4aa:	0148      	lsls	r0, r1, #5
 800c4ac:	69f9      	ldr	r1, [r7, #28]
 800c4ae:	4401      	add	r1, r0
 800c4b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	015a      	lsls	r2, r3, #5
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	4413      	add	r3, r2
 800c4c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4c4:	691a      	ldr	r2, [r3, #16]
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	6a1b      	ldr	r3, [r3, #32]
 800c4ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4ce:	69b9      	ldr	r1, [r7, #24]
 800c4d0:	0148      	lsls	r0, r1, #5
 800c4d2:	69f9      	ldr	r1, [r7, #28]
 800c4d4:	4401      	add	r1, r0
 800c4d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c4de:	79fb      	ldrb	r3, [r7, #7]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d10d      	bne.n	800c500 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d009      	beq.n	800c500 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	68d9      	ldr	r1, [r3, #12]
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	015a      	lsls	r2, r3, #5
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4fc:	460a      	mov	r2, r1
 800c4fe:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	791b      	ldrb	r3, [r3, #4]
 800c504:	2b01      	cmp	r3, #1
 800c506:	d128      	bne.n	800c55a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c514:	2b00      	cmp	r3, #0
 800c516:	d110      	bne.n	800c53a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	015a      	lsls	r2, r3, #5
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	4413      	add	r3, r2
 800c520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	69ba      	ldr	r2, [r7, #24]
 800c528:	0151      	lsls	r1, r2, #5
 800c52a:	69fa      	ldr	r2, [r7, #28]
 800c52c:	440a      	add	r2, r1
 800c52e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c532:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c536:	6013      	str	r3, [r2, #0]
 800c538:	e00f      	b.n	800c55a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	015a      	lsls	r2, r3, #5
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	4413      	add	r3, r2
 800c542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	69ba      	ldr	r2, [r7, #24]
 800c54a:	0151      	lsls	r1, r2, #5
 800c54c:	69fa      	ldr	r2, [r7, #28]
 800c54e:	440a      	add	r2, r1
 800c550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c558:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	015a      	lsls	r2, r3, #5
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	4413      	add	r3, r2
 800c562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	69ba      	ldr	r2, [r7, #24]
 800c56a:	0151      	lsls	r1, r2, #5
 800c56c:	69fa      	ldr	r2, [r7, #28]
 800c56e:	440a      	add	r2, r1
 800c570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c574:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c578:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3720      	adds	r7, #32
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	fff80000 	.word	0xfff80000
 800c588:	e007ffff 	.word	0xe007ffff
 800c58c:	1ff80000 	.word	0x1ff80000

0800c590 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c590:	b480      	push	{r7}
 800c592:	b087      	sub	sp, #28
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c59a:	2300      	movs	r3, #0
 800c59c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	785b      	ldrb	r3, [r3, #1]
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d14a      	bne.n	800c644 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	015a      	lsls	r2, r3, #5
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5c6:	f040 8086 	bne.w	800c6d6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	015a      	lsls	r2, r3, #5
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	7812      	ldrb	r2, [r2, #0]
 800c5de:	0151      	lsls	r1, r2, #5
 800c5e0:	693a      	ldr	r2, [r7, #16]
 800c5e2:	440a      	add	r2, r1
 800c5e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c5ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	015a      	lsls	r2, r3, #5
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	4413      	add	r3, r2
 800c5f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	7812      	ldrb	r2, [r2, #0]
 800c602:	0151      	lsls	r1, r2, #5
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	440a      	add	r2, r1
 800c608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c60c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c610:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	3301      	adds	r3, #1
 800c616:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c61e:	4293      	cmp	r3, r2
 800c620:	d902      	bls.n	800c628 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	75fb      	strb	r3, [r7, #23]
          break;
 800c626:	e056      	b.n	800c6d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	015a      	lsls	r2, r3, #5
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	4413      	add	r3, r2
 800c632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c63c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c640:	d0e7      	beq.n	800c612 <USB_EPStopXfer+0x82>
 800c642:	e048      	b.n	800c6d6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	015a      	lsls	r2, r3, #5
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	4413      	add	r3, r2
 800c64e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c65c:	d13b      	bne.n	800c6d6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	015a      	lsls	r2, r3, #5
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	4413      	add	r3, r2
 800c668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	683a      	ldr	r2, [r7, #0]
 800c670:	7812      	ldrb	r2, [r2, #0]
 800c672:	0151      	lsls	r1, r2, #5
 800c674:	693a      	ldr	r2, [r7, #16]
 800c676:	440a      	add	r2, r1
 800c678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c67c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c680:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	015a      	lsls	r2, r3, #5
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	4413      	add	r3, r2
 800c68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	683a      	ldr	r2, [r7, #0]
 800c694:	7812      	ldrb	r2, [r2, #0]
 800c696:	0151      	lsls	r1, r2, #5
 800c698:	693a      	ldr	r2, [r7, #16]
 800c69a:	440a      	add	r2, r1
 800c69c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c6a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f242 7210 	movw	r2, #10000	; 0x2710
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d902      	bls.n	800c6bc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	75fb      	strb	r3, [r7, #23]
          break;
 800c6ba:	e00c      	b.n	800c6d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	015a      	lsls	r2, r3, #5
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6d4:	d0e7      	beq.n	800c6a6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c6d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	371c      	adds	r7, #28
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b089      	sub	sp, #36	; 0x24
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	4611      	mov	r1, r2
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	71fb      	strb	r3, [r7, #7]
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c702:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c706:	2b00      	cmp	r3, #0
 800c708:	d123      	bne.n	800c752 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c70a:	88bb      	ldrh	r3, [r7, #4]
 800c70c:	3303      	adds	r3, #3
 800c70e:	089b      	lsrs	r3, r3, #2
 800c710:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c712:	2300      	movs	r3, #0
 800c714:	61bb      	str	r3, [r7, #24]
 800c716:	e018      	b.n	800c74a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c718:	79fb      	ldrb	r3, [r7, #7]
 800c71a:	031a      	lsls	r2, r3, #12
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	4413      	add	r3, r2
 800c720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c724:	461a      	mov	r2, r3
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	3301      	adds	r3, #1
 800c730:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	3301      	adds	r3, #1
 800c736:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	3301      	adds	r3, #1
 800c73c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	3301      	adds	r3, #1
 800c742:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	3301      	adds	r3, #1
 800c748:	61bb      	str	r3, [r7, #24]
 800c74a:	69ba      	ldr	r2, [r7, #24]
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d3e2      	bcc.n	800c718 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3724      	adds	r7, #36	; 0x24
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c760:	b480      	push	{r7}
 800c762:	b08b      	sub	sp, #44	; 0x2c
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	4613      	mov	r3, r2
 800c76c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c776:	88fb      	ldrh	r3, [r7, #6]
 800c778:	089b      	lsrs	r3, r3, #2
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c77e:	88fb      	ldrh	r3, [r7, #6]
 800c780:	f003 0303 	and.w	r3, r3, #3
 800c784:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c786:	2300      	movs	r3, #0
 800c788:	623b      	str	r3, [r7, #32]
 800c78a:	e014      	b.n	800c7b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	601a      	str	r2, [r3, #0]
    pDest++;
 800c798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79a:	3301      	adds	r3, #1
 800c79c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c7b0:	6a3b      	ldr	r3, [r7, #32]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	623b      	str	r3, [r7, #32]
 800c7b6:	6a3a      	ldr	r2, [r7, #32]
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d3e6      	bcc.n	800c78c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c7be:	8bfb      	ldrh	r3, [r7, #30]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d01e      	beq.n	800c802 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c7c8:	69bb      	ldr	r3, [r7, #24]
 800c7ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	f107 0310 	add.w	r3, r7, #16
 800c7d4:	6812      	ldr	r2, [r2, #0]
 800c7d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c7d8:	693a      	ldr	r2, [r7, #16]
 800c7da:	6a3b      	ldr	r3, [r7, #32]
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	00db      	lsls	r3, r3, #3
 800c7e0:	fa22 f303 	lsr.w	r3, r2, r3
 800c7e4:	b2da      	uxtb	r2, r3
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e8:	701a      	strb	r2, [r3, #0]
      i++;
 800c7ea:	6a3b      	ldr	r3, [r7, #32]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	623b      	str	r3, [r7, #32]
      pDest++;
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c7f6:	8bfb      	ldrh	r3, [r7, #30]
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c7fc:	8bfb      	ldrh	r3, [r7, #30]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1ea      	bne.n	800c7d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c804:	4618      	mov	r0, r3
 800c806:	372c      	adds	r7, #44	; 0x2c
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c810:	b480      	push	{r7}
 800c812:	b085      	sub	sp, #20
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	785b      	ldrb	r3, [r3, #1]
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d12c      	bne.n	800c886 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	015a      	lsls	r2, r3, #5
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	4413      	add	r3, r2
 800c834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	db12      	blt.n	800c864 <USB_EPSetStall+0x54>
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00f      	beq.n	800c864 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	015a      	lsls	r2, r3, #5
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	4413      	add	r3, r2
 800c84c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	0151      	lsls	r1, r2, #5
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	440a      	add	r2, r1
 800c85a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c85e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c862:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	015a      	lsls	r2, r3, #5
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	4413      	add	r3, r2
 800c86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	0151      	lsls	r1, r2, #5
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	440a      	add	r2, r1
 800c87a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c87e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c882:	6013      	str	r3, [r2, #0]
 800c884:	e02b      	b.n	800c8de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	015a      	lsls	r2, r3, #5
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	4413      	add	r3, r2
 800c88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	db12      	blt.n	800c8be <USB_EPSetStall+0xae>
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00f      	beq.n	800c8be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	015a      	lsls	r2, r3, #5
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68ba      	ldr	r2, [r7, #8]
 800c8ae:	0151      	lsls	r1, r2, #5
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	440a      	add	r2, r1
 800c8b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c8bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	015a      	lsls	r2, r3, #5
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	68ba      	ldr	r2, [r7, #8]
 800c8ce:	0151      	lsls	r1, r2, #5
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	440a      	add	r2, r1
 800c8d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c8dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c8de:	2300      	movs	r3, #0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3714      	adds	r7, #20
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b085      	sub	sp, #20
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	785b      	ldrb	r3, [r3, #1]
 800c904:	2b01      	cmp	r3, #1
 800c906:	d128      	bne.n	800c95a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	015a      	lsls	r2, r3, #5
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	4413      	add	r3, r2
 800c910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	68ba      	ldr	r2, [r7, #8]
 800c918:	0151      	lsls	r1, r2, #5
 800c91a:	68fa      	ldr	r2, [r7, #12]
 800c91c:	440a      	add	r2, r1
 800c91e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c922:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c926:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	791b      	ldrb	r3, [r3, #4]
 800c92c:	2b03      	cmp	r3, #3
 800c92e:	d003      	beq.n	800c938 <USB_EPClearStall+0x4c>
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	791b      	ldrb	r3, [r3, #4]
 800c934:	2b02      	cmp	r3, #2
 800c936:	d138      	bne.n	800c9aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	015a      	lsls	r2, r3, #5
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	4413      	add	r3, r2
 800c940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68ba      	ldr	r2, [r7, #8]
 800c948:	0151      	lsls	r1, r2, #5
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	440a      	add	r2, r1
 800c94e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c956:	6013      	str	r3, [r2, #0]
 800c958:	e027      	b.n	800c9aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	015a      	lsls	r2, r3, #5
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	4413      	add	r3, r2
 800c962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68ba      	ldr	r2, [r7, #8]
 800c96a:	0151      	lsls	r1, r2, #5
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	440a      	add	r2, r1
 800c970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c974:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c978:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	791b      	ldrb	r3, [r3, #4]
 800c97e:	2b03      	cmp	r3, #3
 800c980:	d003      	beq.n	800c98a <USB_EPClearStall+0x9e>
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	791b      	ldrb	r3, [r3, #4]
 800c986:	2b02      	cmp	r3, #2
 800c988:	d10f      	bne.n	800c9aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	015a      	lsls	r2, r3, #5
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	4413      	add	r3, r2
 800c992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68ba      	ldr	r2, [r7, #8]
 800c99a:	0151      	lsls	r1, r2, #5
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	440a      	add	r2, r1
 800c9a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3714      	adds	r7, #20
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c9da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	78fb      	ldrb	r3, [r7, #3]
 800c9e6:	011b      	lsls	r3, r3, #4
 800c9e8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c9ec:	68f9      	ldr	r1, [r7, #12]
 800c9ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3714      	adds	r7, #20
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b085      	sub	sp, #20
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca1e:	f023 0303 	bic.w	r3, r3, #3
 800ca22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca32:	f023 0302 	bic.w	r3, r3, #2
 800ca36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3714      	adds	r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr

0800ca46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca46:	b480      	push	{r7}
 800ca48:	b085      	sub	sp, #20
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca60:	f023 0303 	bic.w	r3, r3, #3
 800ca64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca74:	f043 0302 	orr.w	r3, r3, #2
 800ca78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	695b      	ldr	r3, [r3, #20]
 800ca94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	699b      	ldr	r3, [r3, #24]
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800caa0:	68fb      	ldr	r3, [r7, #12]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3714      	adds	r7, #20
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr

0800caae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800caae:	b480      	push	{r7}
 800cab0:	b085      	sub	sp, #20
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac0:	699b      	ldr	r3, [r3, #24]
 800cac2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caca:	69db      	ldr	r3, [r3, #28]
 800cacc:	68ba      	ldr	r2, [r7, #8]
 800cace:	4013      	ands	r3, r2
 800cad0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	0c1b      	lsrs	r3, r3, #16
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3714      	adds	r7, #20
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr

0800cae2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cae2:	b480      	push	{r7}
 800cae4:	b085      	sub	sp, #20
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caf4:	699b      	ldr	r3, [r3, #24]
 800caf6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cafe:	69db      	ldr	r3, [r3, #28]
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	4013      	ands	r3, r2
 800cb04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	b29b      	uxth	r3, r3
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3714      	adds	r7, #20
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr

0800cb16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cb16:	b480      	push	{r7}
 800cb18:	b085      	sub	sp, #20
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
 800cb1e:	460b      	mov	r3, r1
 800cb20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cb26:	78fb      	ldrb	r3, [r7, #3]
 800cb28:	015a      	lsls	r2, r3, #5
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb3c:	695b      	ldr	r3, [r3, #20]
 800cb3e:	68ba      	ldr	r2, [r7, #8]
 800cb40:	4013      	ands	r3, r2
 800cb42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cb44:	68bb      	ldr	r3, [r7, #8]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3714      	adds	r7, #20
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr

0800cb52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cb52:	b480      	push	{r7}
 800cb54:	b087      	sub	sp, #28
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb68:	691b      	ldr	r3, [r3, #16]
 800cb6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cb76:	78fb      	ldrb	r3, [r7, #3]
 800cb78:	f003 030f 	and.w	r3, r3, #15
 800cb7c:	68fa      	ldr	r2, [r7, #12]
 800cb7e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb82:	01db      	lsls	r3, r3, #7
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	693a      	ldr	r2, [r7, #16]
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cb8c:	78fb      	ldrb	r3, [r7, #3]
 800cb8e:	015a      	lsls	r2, r3, #5
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	4413      	add	r3, r2
 800cb94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb98:	689b      	ldr	r3, [r3, #8]
 800cb9a:	693a      	ldr	r2, [r7, #16]
 800cb9c:	4013      	ands	r3, r2
 800cb9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cba0:	68bb      	ldr	r3, [r7, #8]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	371c      	adds	r7, #28
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr

0800cbae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800cbae:	b480      	push	{r7}
 800cbb0:	b083      	sub	sp, #12
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	695b      	ldr	r3, [r3, #20]
 800cbba:	f003 0301 	and.w	r3, r3, #1
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	370c      	adds	r7, #12
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
	...

0800cbcc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	4b09      	ldr	r3, [pc, #36]	; (800cc10 <USB_ActivateSetup+0x44>)
 800cbea:	4013      	ands	r3, r2
 800cbec:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc02:	2300      	movs	r3, #0
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr
 800cc10:	fffff800 	.word	0xfffff800

0800cc14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b087      	sub	sp, #28
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	607a      	str	r2, [r7, #4]
 800cc20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	333c      	adds	r3, #60	; 0x3c
 800cc2a:	3304      	adds	r3, #4
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	4a26      	ldr	r2, [pc, #152]	; (800cccc <USB_EP0_OutStart+0xb8>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d90a      	bls.n	800cc4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc48:	d101      	bne.n	800cc4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	e037      	b.n	800ccbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc54:	461a      	mov	r2, r3
 800cc56:	2300      	movs	r3, #0
 800cc58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	697a      	ldr	r2, [r7, #20]
 800cc64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc74:	691b      	ldr	r3, [r3, #16]
 800cc76:	697a      	ldr	r2, [r7, #20]
 800cc78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc7c:	f043 0318 	orr.w	r3, r3, #24
 800cc80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cc94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cc96:	7afb      	ldrb	r3, [r7, #11]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d10f      	bne.n	800ccbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cca2:	461a      	mov	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	697a      	ldr	r2, [r7, #20]
 800ccb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccb6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ccba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	371c      	adds	r7, #28
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	4f54300a 	.word	0x4f54300a

0800ccd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b085      	sub	sp, #20
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	3301      	adds	r3, #1
 800cce0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800cce8:	d901      	bls.n	800ccee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ccea:	2303      	movs	r3, #3
 800ccec:	e01b      	b.n	800cd26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	691b      	ldr	r3, [r3, #16]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	daf2      	bge.n	800ccdc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	f043 0201 	orr.w	r2, r3, #1
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800cd12:	d901      	bls.n	800cd18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cd14:	2303      	movs	r3, #3
 800cd16:	e006      	b.n	800cd26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	691b      	ldr	r3, [r3, #16]
 800cd1c:	f003 0301 	and.w	r3, r3, #1
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d0f0      	beq.n	800cd06 <USB_CoreReset+0x36>

  return HAL_OK;
 800cd24:	2300      	movs	r3, #0
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3714      	adds	r7, #20
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr
	...

0800cd34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cd40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cd44:	f002 fc9a 	bl	800f67c <USBD_static_malloc>
 800cd48:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d109      	bne.n	800cd64 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	32b0      	adds	r2, #176	; 0xb0
 800cd5a:	2100      	movs	r1, #0
 800cd5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cd60:	2302      	movs	r3, #2
 800cd62:	e0d4      	b.n	800cf0e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cd64:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800cd68:	2100      	movs	r1, #0
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	f002 fcca 	bl	800f704 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	32b0      	adds	r2, #176	; 0xb0
 800cd7a:	68f9      	ldr	r1, [r7, #12]
 800cd7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	32b0      	adds	r2, #176	; 0xb0
 800cd8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	7c1b      	ldrb	r3, [r3, #16]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d138      	bne.n	800ce0e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cd9c:	4b5e      	ldr	r3, [pc, #376]	; (800cf18 <USBD_CDC_Init+0x1e4>)
 800cd9e:	7819      	ldrb	r1, [r3, #0]
 800cda0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cda4:	2202      	movs	r2, #2
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f002 fb45 	bl	800f436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cdac:	4b5a      	ldr	r3, [pc, #360]	; (800cf18 <USBD_CDC_Init+0x1e4>)
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	f003 020f 	and.w	r2, r3, #15
 800cdb4:	6879      	ldr	r1, [r7, #4]
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	4413      	add	r3, r2
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	440b      	add	r3, r1
 800cdc0:	3324      	adds	r3, #36	; 0x24
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cdc6:	4b55      	ldr	r3, [pc, #340]	; (800cf1c <USBD_CDC_Init+0x1e8>)
 800cdc8:	7819      	ldrb	r1, [r3, #0]
 800cdca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdce:	2202      	movs	r2, #2
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f002 fb30 	bl	800f436 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cdd6:	4b51      	ldr	r3, [pc, #324]	; (800cf1c <USBD_CDC_Init+0x1e8>)
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	f003 020f 	and.w	r2, r3, #15
 800cdde:	6879      	ldr	r1, [r7, #4]
 800cde0:	4613      	mov	r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	4413      	add	r3, r2
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	440b      	add	r3, r1
 800cdea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cdee:	2201      	movs	r2, #1
 800cdf0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cdf2:	4b4b      	ldr	r3, [pc, #300]	; (800cf20 <USBD_CDC_Init+0x1ec>)
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	f003 020f 	and.w	r2, r3, #15
 800cdfa:	6879      	ldr	r1, [r7, #4]
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	4413      	add	r3, r2
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	440b      	add	r3, r1
 800ce06:	3326      	adds	r3, #38	; 0x26
 800ce08:	2210      	movs	r2, #16
 800ce0a:	801a      	strh	r2, [r3, #0]
 800ce0c:	e035      	b.n	800ce7a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ce0e:	4b42      	ldr	r3, [pc, #264]	; (800cf18 <USBD_CDC_Init+0x1e4>)
 800ce10:	7819      	ldrb	r1, [r3, #0]
 800ce12:	2340      	movs	r3, #64	; 0x40
 800ce14:	2202      	movs	r2, #2
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f002 fb0d 	bl	800f436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ce1c:	4b3e      	ldr	r3, [pc, #248]	; (800cf18 <USBD_CDC_Init+0x1e4>)
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	f003 020f 	and.w	r2, r3, #15
 800ce24:	6879      	ldr	r1, [r7, #4]
 800ce26:	4613      	mov	r3, r2
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	4413      	add	r3, r2
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	440b      	add	r3, r1
 800ce30:	3324      	adds	r3, #36	; 0x24
 800ce32:	2201      	movs	r2, #1
 800ce34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ce36:	4b39      	ldr	r3, [pc, #228]	; (800cf1c <USBD_CDC_Init+0x1e8>)
 800ce38:	7819      	ldrb	r1, [r3, #0]
 800ce3a:	2340      	movs	r3, #64	; 0x40
 800ce3c:	2202      	movs	r2, #2
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f002 faf9 	bl	800f436 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ce44:	4b35      	ldr	r3, [pc, #212]	; (800cf1c <USBD_CDC_Init+0x1e8>)
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	f003 020f 	and.w	r2, r3, #15
 800ce4c:	6879      	ldr	r1, [r7, #4]
 800ce4e:	4613      	mov	r3, r2
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	4413      	add	r3, r2
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	440b      	add	r3, r1
 800ce58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ce60:	4b2f      	ldr	r3, [pc, #188]	; (800cf20 <USBD_CDC_Init+0x1ec>)
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	f003 020f 	and.w	r2, r3, #15
 800ce68:	6879      	ldr	r1, [r7, #4]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	009b      	lsls	r3, r3, #2
 800ce6e:	4413      	add	r3, r2
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	440b      	add	r3, r1
 800ce74:	3326      	adds	r3, #38	; 0x26
 800ce76:	2210      	movs	r2, #16
 800ce78:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ce7a:	4b29      	ldr	r3, [pc, #164]	; (800cf20 <USBD_CDC_Init+0x1ec>)
 800ce7c:	7819      	ldrb	r1, [r3, #0]
 800ce7e:	2308      	movs	r3, #8
 800ce80:	2203      	movs	r2, #3
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f002 fad7 	bl	800f436 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ce88:	4b25      	ldr	r3, [pc, #148]	; (800cf20 <USBD_CDC_Init+0x1ec>)
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	f003 020f 	and.w	r2, r3, #15
 800ce90:	6879      	ldr	r1, [r7, #4]
 800ce92:	4613      	mov	r3, r2
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	4413      	add	r3, r2
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	440b      	add	r3, r1
 800ce9c:	3324      	adds	r3, #36	; 0x24
 800ce9e:	2201      	movs	r2, #1
 800cea0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	33b0      	adds	r3, #176	; 0xb0
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	4413      	add	r3, r2
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d101      	bne.n	800cedc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ced8:	2302      	movs	r3, #2
 800ceda:	e018      	b.n	800cf0e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	7c1b      	ldrb	r3, [r3, #16]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d10a      	bne.n	800cefa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cee4:	4b0d      	ldr	r3, [pc, #52]	; (800cf1c <USBD_CDC_Init+0x1e8>)
 800cee6:	7819      	ldrb	r1, [r3, #0]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ceee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f002 fb8e 	bl	800f614 <USBD_LL_PrepareReceive>
 800cef8:	e008      	b.n	800cf0c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cefa:	4b08      	ldr	r3, [pc, #32]	; (800cf1c <USBD_CDC_Init+0x1e8>)
 800cefc:	7819      	ldrb	r1, [r3, #0]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cf04:	2340      	movs	r3, #64	; 0x40
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f002 fb84 	bl	800f614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cf0c:	2300      	movs	r3, #0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	24000097 	.word	0x24000097
 800cf1c:	24000098 	.word	0x24000098
 800cf20:	24000099 	.word	0x24000099

0800cf24 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cf30:	4b3a      	ldr	r3, [pc, #232]	; (800d01c <USBD_CDC_DeInit+0xf8>)
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	4619      	mov	r1, r3
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f002 faa3 	bl	800f482 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cf3c:	4b37      	ldr	r3, [pc, #220]	; (800d01c <USBD_CDC_DeInit+0xf8>)
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	f003 020f 	and.w	r2, r3, #15
 800cf44:	6879      	ldr	r1, [r7, #4]
 800cf46:	4613      	mov	r3, r2
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	4413      	add	r3, r2
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	440b      	add	r3, r1
 800cf50:	3324      	adds	r3, #36	; 0x24
 800cf52:	2200      	movs	r2, #0
 800cf54:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cf56:	4b32      	ldr	r3, [pc, #200]	; (800d020 <USBD_CDC_DeInit+0xfc>)
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f002 fa90 	bl	800f482 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cf62:	4b2f      	ldr	r3, [pc, #188]	; (800d020 <USBD_CDC_DeInit+0xfc>)
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	f003 020f 	and.w	r2, r3, #15
 800cf6a:	6879      	ldr	r1, [r7, #4]
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	009b      	lsls	r3, r3, #2
 800cf70:	4413      	add	r3, r2
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	440b      	add	r3, r1
 800cf76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cf7e:	4b29      	ldr	r3, [pc, #164]	; (800d024 <USBD_CDC_DeInit+0x100>)
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	4619      	mov	r1, r3
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f002 fa7c 	bl	800f482 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cf8a:	4b26      	ldr	r3, [pc, #152]	; (800d024 <USBD_CDC_DeInit+0x100>)
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	f003 020f 	and.w	r2, r3, #15
 800cf92:	6879      	ldr	r1, [r7, #4]
 800cf94:	4613      	mov	r3, r2
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	4413      	add	r3, r2
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	440b      	add	r3, r1
 800cf9e:	3324      	adds	r3, #36	; 0x24
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cfa4:	4b1f      	ldr	r3, [pc, #124]	; (800d024 <USBD_CDC_DeInit+0x100>)
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	f003 020f 	and.w	r2, r3, #15
 800cfac:	6879      	ldr	r1, [r7, #4]
 800cfae:	4613      	mov	r3, r2
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	4413      	add	r3, r2
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	440b      	add	r3, r1
 800cfb8:	3326      	adds	r3, #38	; 0x26
 800cfba:	2200      	movs	r2, #0
 800cfbc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	32b0      	adds	r2, #176	; 0xb0
 800cfc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d01f      	beq.n	800d010 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	33b0      	adds	r3, #176	; 0xb0
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	4413      	add	r3, r2
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	32b0      	adds	r2, #176	; 0xb0
 800cfee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cff2:	4618      	mov	r0, r3
 800cff4:	f002 fb50 	bl	800f698 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	32b0      	adds	r2, #176	; 0xb0
 800d002:	2100      	movs	r1, #0
 800d004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d010:	2300      	movs	r3, #0
}
 800d012:	4618      	mov	r0, r3
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	24000097 	.word	0x24000097
 800d020:	24000098 	.word	0x24000098
 800d024:	24000099 	.word	0x24000099

0800d028 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b086      	sub	sp, #24
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	32b0      	adds	r2, #176	; 0xb0
 800d03c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d040:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d042:	2300      	movs	r3, #0
 800d044:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d046:	2300      	movs	r3, #0
 800d048:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d04a:	2300      	movs	r3, #0
 800d04c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d101      	bne.n	800d058 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d054:	2303      	movs	r3, #3
 800d056:	e0bf      	b.n	800d1d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d060:	2b00      	cmp	r3, #0
 800d062:	d050      	beq.n	800d106 <USBD_CDC_Setup+0xde>
 800d064:	2b20      	cmp	r3, #32
 800d066:	f040 80af 	bne.w	800d1c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	88db      	ldrh	r3, [r3, #6]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d03a      	beq.n	800d0e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	b25b      	sxtb	r3, r3
 800d078:	2b00      	cmp	r3, #0
 800d07a:	da1b      	bge.n	800d0b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	33b0      	adds	r3, #176	; 0xb0
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	4413      	add	r3, r2
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d092:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d094:	683a      	ldr	r2, [r7, #0]
 800d096:	88d2      	ldrh	r2, [r2, #6]
 800d098:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	88db      	ldrh	r3, [r3, #6]
 800d09e:	2b07      	cmp	r3, #7
 800d0a0:	bf28      	it	cs
 800d0a2:	2307      	movcs	r3, #7
 800d0a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	89fa      	ldrh	r2, [r7, #14]
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f001 fd95 	bl	800ebdc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d0b2:	e090      	b.n	800d1d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	785a      	ldrb	r2, [r3, #1]
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	88db      	ldrh	r3, [r3, #6]
 800d0c2:	2b3f      	cmp	r3, #63	; 0x3f
 800d0c4:	d803      	bhi.n	800d0ce <USBD_CDC_Setup+0xa6>
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	88db      	ldrh	r3, [r3, #6]
 800d0ca:	b2da      	uxtb	r2, r3
 800d0cc:	e000      	b.n	800d0d0 <USBD_CDC_Setup+0xa8>
 800d0ce:	2240      	movs	r2, #64	; 0x40
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d0d6:	6939      	ldr	r1, [r7, #16]
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d0de:	461a      	mov	r2, r3
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f001 fda7 	bl	800ec34 <USBD_CtlPrepareRx>
      break;
 800d0e6:	e076      	b.n	800d1d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	33b0      	adds	r3, #176	; 0xb0
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	4413      	add	r3, r2
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	683a      	ldr	r2, [r7, #0]
 800d0fc:	7850      	ldrb	r0, [r2, #1]
 800d0fe:	2200      	movs	r2, #0
 800d100:	6839      	ldr	r1, [r7, #0]
 800d102:	4798      	blx	r3
      break;
 800d104:	e067      	b.n	800d1d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	785b      	ldrb	r3, [r3, #1]
 800d10a:	2b0b      	cmp	r3, #11
 800d10c:	d851      	bhi.n	800d1b2 <USBD_CDC_Setup+0x18a>
 800d10e:	a201      	add	r2, pc, #4	; (adr r2, 800d114 <USBD_CDC_Setup+0xec>)
 800d110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d114:	0800d145 	.word	0x0800d145
 800d118:	0800d1c1 	.word	0x0800d1c1
 800d11c:	0800d1b3 	.word	0x0800d1b3
 800d120:	0800d1b3 	.word	0x0800d1b3
 800d124:	0800d1b3 	.word	0x0800d1b3
 800d128:	0800d1b3 	.word	0x0800d1b3
 800d12c:	0800d1b3 	.word	0x0800d1b3
 800d130:	0800d1b3 	.word	0x0800d1b3
 800d134:	0800d1b3 	.word	0x0800d1b3
 800d138:	0800d1b3 	.word	0x0800d1b3
 800d13c:	0800d16f 	.word	0x0800d16f
 800d140:	0800d199 	.word	0x0800d199
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	2b03      	cmp	r3, #3
 800d14e:	d107      	bne.n	800d160 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d150:	f107 030a 	add.w	r3, r7, #10
 800d154:	2202      	movs	r2, #2
 800d156:	4619      	mov	r1, r3
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f001 fd3f 	bl	800ebdc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d15e:	e032      	b.n	800d1c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d160:	6839      	ldr	r1, [r7, #0]
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f001 fcbd 	bl	800eae2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d168:	2303      	movs	r3, #3
 800d16a:	75fb      	strb	r3, [r7, #23]
          break;
 800d16c:	e02b      	b.n	800d1c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d174:	b2db      	uxtb	r3, r3
 800d176:	2b03      	cmp	r3, #3
 800d178:	d107      	bne.n	800d18a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d17a:	f107 030d 	add.w	r3, r7, #13
 800d17e:	2201      	movs	r2, #1
 800d180:	4619      	mov	r1, r3
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f001 fd2a 	bl	800ebdc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d188:	e01d      	b.n	800d1c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d18a:	6839      	ldr	r1, [r7, #0]
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f001 fca8 	bl	800eae2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d192:	2303      	movs	r3, #3
 800d194:	75fb      	strb	r3, [r7, #23]
          break;
 800d196:	e016      	b.n	800d1c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	2b03      	cmp	r3, #3
 800d1a2:	d00f      	beq.n	800d1c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d1a4:	6839      	ldr	r1, [r7, #0]
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f001 fc9b 	bl	800eae2 <USBD_CtlError>
            ret = USBD_FAIL;
 800d1ac:	2303      	movs	r3, #3
 800d1ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d1b0:	e008      	b.n	800d1c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d1b2:	6839      	ldr	r1, [r7, #0]
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f001 fc94 	bl	800eae2 <USBD_CtlError>
          ret = USBD_FAIL;
 800d1ba:	2303      	movs	r3, #3
 800d1bc:	75fb      	strb	r3, [r7, #23]
          break;
 800d1be:	e002      	b.n	800d1c6 <USBD_CDC_Setup+0x19e>
          break;
 800d1c0:	bf00      	nop
 800d1c2:	e008      	b.n	800d1d6 <USBD_CDC_Setup+0x1ae>
          break;
 800d1c4:	bf00      	nop
      }
      break;
 800d1c6:	e006      	b.n	800d1d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d1c8:	6839      	ldr	r1, [r7, #0]
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f001 fc89 	bl	800eae2 <USBD_CtlError>
      ret = USBD_FAIL;
 800d1d0:	2303      	movs	r3, #3
 800d1d2:	75fb      	strb	r3, [r7, #23]
      break;
 800d1d4:	bf00      	nop
  }

  return (uint8_t)ret;
 800d1d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3718      	adds	r7, #24
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	32b0      	adds	r2, #176	; 0xb0
 800d1fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d101      	bne.n	800d20a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d206:	2303      	movs	r3, #3
 800d208:	e065      	b.n	800d2d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	32b0      	adds	r2, #176	; 0xb0
 800d214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d218:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d21a:	78fb      	ldrb	r3, [r7, #3]
 800d21c:	f003 020f 	and.w	r2, r3, #15
 800d220:	6879      	ldr	r1, [r7, #4]
 800d222:	4613      	mov	r3, r2
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	4413      	add	r3, r2
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	440b      	add	r3, r1
 800d22c:	3318      	adds	r3, #24
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d02f      	beq.n	800d294 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d234:	78fb      	ldrb	r3, [r7, #3]
 800d236:	f003 020f 	and.w	r2, r3, #15
 800d23a:	6879      	ldr	r1, [r7, #4]
 800d23c:	4613      	mov	r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	4413      	add	r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	440b      	add	r3, r1
 800d246:	3318      	adds	r3, #24
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	78fb      	ldrb	r3, [r7, #3]
 800d24c:	f003 010f 	and.w	r1, r3, #15
 800d250:	68f8      	ldr	r0, [r7, #12]
 800d252:	460b      	mov	r3, r1
 800d254:	00db      	lsls	r3, r3, #3
 800d256:	440b      	add	r3, r1
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	4403      	add	r3, r0
 800d25c:	331c      	adds	r3, #28
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	fbb2 f1f3 	udiv	r1, r2, r3
 800d264:	fb01 f303 	mul.w	r3, r1, r3
 800d268:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d112      	bne.n	800d294 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d26e:	78fb      	ldrb	r3, [r7, #3]
 800d270:	f003 020f 	and.w	r2, r3, #15
 800d274:	6879      	ldr	r1, [r7, #4]
 800d276:	4613      	mov	r3, r2
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	4413      	add	r3, r2
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	440b      	add	r3, r1
 800d280:	3318      	adds	r3, #24
 800d282:	2200      	movs	r2, #0
 800d284:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d286:	78f9      	ldrb	r1, [r7, #3]
 800d288:	2300      	movs	r3, #0
 800d28a:	2200      	movs	r2, #0
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f002 f9a0 	bl	800f5d2 <USBD_LL_Transmit>
 800d292:	e01f      	b.n	800d2d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	2200      	movs	r2, #0
 800d298:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	33b0      	adds	r3, #176	; 0xb0
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	4413      	add	r3, r2
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	691b      	ldr	r3, [r3, #16]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d010      	beq.n	800d2d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	33b0      	adds	r3, #176	; 0xb0
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	4413      	add	r3, r2
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	68ba      	ldr	r2, [r7, #8]
 800d2c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d2ca:	68ba      	ldr	r2, [r7, #8]
 800d2cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d2d0:	78fa      	ldrb	r2, [r7, #3]
 800d2d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3710      	adds	r7, #16
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b084      	sub	sp, #16
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	32b0      	adds	r2, #176	; 0xb0
 800d2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	32b0      	adds	r2, #176	; 0xb0
 800d304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d101      	bne.n	800d310 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d30c:	2303      	movs	r3, #3
 800d30e:	e01a      	b.n	800d346 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d310:	78fb      	ldrb	r3, [r7, #3]
 800d312:	4619      	mov	r1, r3
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f002 f99e 	bl	800f656 <USBD_LL_GetRxDataSize>
 800d31a:	4602      	mov	r2, r0
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	33b0      	adds	r3, #176	; 0xb0
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	4413      	add	r3, r2
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	68fa      	ldr	r2, [r7, #12]
 800d336:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d33a:	68fa      	ldr	r2, [r7, #12]
 800d33c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d340:	4611      	mov	r1, r2
 800d342:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d344:	2300      	movs	r3, #0
}
 800d346:	4618      	mov	r0, r3
 800d348:	3710      	adds	r7, #16
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b084      	sub	sp, #16
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	32b0      	adds	r2, #176	; 0xb0
 800d360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d364:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d101      	bne.n	800d370 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d36c:	2303      	movs	r3, #3
 800d36e:	e025      	b.n	800d3bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	33b0      	adds	r3, #176	; 0xb0
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4413      	add	r3, r2
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d01a      	beq.n	800d3ba <USBD_CDC_EP0_RxReady+0x6c>
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d38a:	2bff      	cmp	r3, #255	; 0xff
 800d38c:	d015      	beq.n	800d3ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	33b0      	adds	r3, #176	; 0xb0
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	4413      	add	r3, r2
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	689b      	ldr	r3, [r3, #8]
 800d3a0:	68fa      	ldr	r2, [r7, #12]
 800d3a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d3a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d3ae:	b292      	uxth	r2, r2
 800d3b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	22ff      	movs	r2, #255	; 0xff
 800d3b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d3ba:	2300      	movs	r3, #0
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b086      	sub	sp, #24
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d3cc:	2182      	movs	r1, #130	; 0x82
 800d3ce:	4818      	ldr	r0, [pc, #96]	; (800d430 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3d0:	f000 fd4f 	bl	800de72 <USBD_GetEpDesc>
 800d3d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d3d6:	2101      	movs	r1, #1
 800d3d8:	4815      	ldr	r0, [pc, #84]	; (800d430 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3da:	f000 fd4a 	bl	800de72 <USBD_GetEpDesc>
 800d3de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d3e0:	2181      	movs	r1, #129	; 0x81
 800d3e2:	4813      	ldr	r0, [pc, #76]	; (800d430 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d3e4:	f000 fd45 	bl	800de72 <USBD_GetEpDesc>
 800d3e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d002      	beq.n	800d3f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	2210      	movs	r2, #16
 800d3f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d006      	beq.n	800d40a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d404:	711a      	strb	r2, [r3, #4]
 800d406:	2200      	movs	r2, #0
 800d408:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d006      	beq.n	800d41e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2200      	movs	r2, #0
 800d414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d418:	711a      	strb	r2, [r3, #4]
 800d41a:	2200      	movs	r2, #0
 800d41c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2243      	movs	r2, #67	; 0x43
 800d422:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d424:	4b02      	ldr	r3, [pc, #8]	; (800d430 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d426:	4618      	mov	r0, r3
 800d428:	3718      	adds	r7, #24
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	24000054 	.word	0x24000054

0800d434 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b086      	sub	sp, #24
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d43c:	2182      	movs	r1, #130	; 0x82
 800d43e:	4818      	ldr	r0, [pc, #96]	; (800d4a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d440:	f000 fd17 	bl	800de72 <USBD_GetEpDesc>
 800d444:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d446:	2101      	movs	r1, #1
 800d448:	4815      	ldr	r0, [pc, #84]	; (800d4a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d44a:	f000 fd12 	bl	800de72 <USBD_GetEpDesc>
 800d44e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d450:	2181      	movs	r1, #129	; 0x81
 800d452:	4813      	ldr	r0, [pc, #76]	; (800d4a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d454:	f000 fd0d 	bl	800de72 <USBD_GetEpDesc>
 800d458:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d002      	beq.n	800d466 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	2210      	movs	r2, #16
 800d464:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d006      	beq.n	800d47a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	2200      	movs	r2, #0
 800d470:	711a      	strb	r2, [r3, #4]
 800d472:	2200      	movs	r2, #0
 800d474:	f042 0202 	orr.w	r2, r2, #2
 800d478:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d006      	beq.n	800d48e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2200      	movs	r2, #0
 800d484:	711a      	strb	r2, [r3, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	f042 0202 	orr.w	r2, r2, #2
 800d48c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2243      	movs	r2, #67	; 0x43
 800d492:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d494:	4b02      	ldr	r3, [pc, #8]	; (800d4a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d496:	4618      	mov	r0, r3
 800d498:	3718      	adds	r7, #24
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	24000054 	.word	0x24000054

0800d4a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b086      	sub	sp, #24
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d4ac:	2182      	movs	r1, #130	; 0x82
 800d4ae:	4818      	ldr	r0, [pc, #96]	; (800d510 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4b0:	f000 fcdf 	bl	800de72 <USBD_GetEpDesc>
 800d4b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d4b6:	2101      	movs	r1, #1
 800d4b8:	4815      	ldr	r0, [pc, #84]	; (800d510 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4ba:	f000 fcda 	bl	800de72 <USBD_GetEpDesc>
 800d4be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d4c0:	2181      	movs	r1, #129	; 0x81
 800d4c2:	4813      	ldr	r0, [pc, #76]	; (800d510 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d4c4:	f000 fcd5 	bl	800de72 <USBD_GetEpDesc>
 800d4c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d002      	beq.n	800d4d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	2210      	movs	r2, #16
 800d4d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d006      	beq.n	800d4ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4e4:	711a      	strb	r2, [r3, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d006      	beq.n	800d4fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4f8:	711a      	strb	r2, [r3, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2243      	movs	r2, #67	; 0x43
 800d502:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d504:	4b02      	ldr	r3, [pc, #8]	; (800d510 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d506:	4618      	mov	r0, r3
 800d508:	3718      	adds	r7, #24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	24000054 	.word	0x24000054

0800d514 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	220a      	movs	r2, #10
 800d520:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d522:	4b03      	ldr	r3, [pc, #12]	; (800d530 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d524:	4618      	mov	r0, r3
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr
 800d530:	24000010 	.word	0x24000010

0800d534 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d101      	bne.n	800d548 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d544:	2303      	movs	r3, #3
 800d546:	e009      	b.n	800d55c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	33b0      	adds	r3, #176	; 0xb0
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	4413      	add	r3, r2
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d55a:	2300      	movs	r3, #0
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	370c      	adds	r7, #12
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr

0800d568 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d568:	b480      	push	{r7}
 800d56a:	b087      	sub	sp, #28
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	60b9      	str	r1, [r7, #8]
 800d572:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	32b0      	adds	r2, #176	; 0xb0
 800d57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d582:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d101      	bne.n	800d58e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d58a:	2303      	movs	r3, #3
 800d58c:	e008      	b.n	800d5a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	68ba      	ldr	r2, [r7, #8]
 800d592:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	371c      	adds	r7, #28
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b085      	sub	sp, #20
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	32b0      	adds	r2, #176	; 0xb0
 800d5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d101      	bne.n	800d5d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d5cc:	2303      	movs	r3, #3
 800d5ce:	e004      	b.n	800d5da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	683a      	ldr	r2, [r7, #0]
 800d5d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3714      	adds	r7, #20
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr
	...

0800d5e8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	32b0      	adds	r2, #176	; 0xb0
 800d5fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5fe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d600:	2301      	movs	r3, #1
 800d602:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d101      	bne.n	800d60e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d60a:	2303      	movs	r3, #3
 800d60c:	e025      	b.n	800d65a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d614:	2b00      	cmp	r3, #0
 800d616:	d11f      	bne.n	800d658 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	2201      	movs	r2, #1
 800d61c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d620:	4b10      	ldr	r3, [pc, #64]	; (800d664 <USBD_CDC_TransmitPacket+0x7c>)
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	f003 020f 	and.w	r2, r3, #15
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	4613      	mov	r3, r2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	4413      	add	r3, r2
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	4403      	add	r3, r0
 800d63a:	3318      	adds	r3, #24
 800d63c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d63e:	4b09      	ldr	r3, [pc, #36]	; (800d664 <USBD_CDC_TransmitPacket+0x7c>)
 800d640:	7819      	ldrb	r1, [r3, #0]
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f001 ffbf 	bl	800f5d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d654:	2300      	movs	r3, #0
 800d656:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d658:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	24000097 	.word	0x24000097

0800d668 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	32b0      	adds	r2, #176	; 0xb0
 800d67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d67e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	32b0      	adds	r2, #176	; 0xb0
 800d68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d101      	bne.n	800d696 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d692:	2303      	movs	r3, #3
 800d694:	e018      	b.n	800d6c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	7c1b      	ldrb	r3, [r3, #16]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d10a      	bne.n	800d6b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d69e:	4b0c      	ldr	r3, [pc, #48]	; (800d6d0 <USBD_CDC_ReceivePacket+0x68>)
 800d6a0:	7819      	ldrb	r1, [r3, #0]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d6a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f001 ffb1 	bl	800f614 <USBD_LL_PrepareReceive>
 800d6b2:	e008      	b.n	800d6c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d6b4:	4b06      	ldr	r3, [pc, #24]	; (800d6d0 <USBD_CDC_ReceivePacket+0x68>)
 800d6b6:	7819      	ldrb	r1, [r3, #0]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d6be:	2340      	movs	r3, #64	; 0x40
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f001 ffa7 	bl	800f614 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d6c6:	2300      	movs	r3, #0
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3710      	adds	r7, #16
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	24000098 	.word	0x24000098

0800d6d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b086      	sub	sp, #24
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d101      	bne.n	800d6ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d6e8:	2303      	movs	r3, #3
 800d6ea:	e01f      	b.n	800d72c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2200      	movs	r2, #0
 800d700:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d003      	beq.n	800d712 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2201      	movs	r2, #1
 800d716:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	79fa      	ldrb	r2, [r7, #7]
 800d71e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f001 fe1b 	bl	800f35c <USBD_LL_Init>
 800d726:	4603      	mov	r3, r0
 800d728:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d72a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3718      	adds	r7, #24
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d73e:	2300      	movs	r3, #0
 800d740:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d101      	bne.n	800d74c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d748:	2303      	movs	r3, #3
 800d74a:	e025      	b.n	800d798 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	683a      	ldr	r2, [r7, #0]
 800d750:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	32ae      	adds	r2, #174	; 0xae
 800d75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d764:	2b00      	cmp	r3, #0
 800d766:	d00f      	beq.n	800d788 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	32ae      	adds	r2, #174	; 0xae
 800d772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d778:	f107 020e 	add.w	r2, r7, #14
 800d77c:	4610      	mov	r0, r2
 800d77e:	4798      	blx	r3
 800d780:	4602      	mov	r2, r0
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d78e:	1c5a      	adds	r2, r3, #1
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d796:	2300      	movs	r3, #0
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f001 fe29 	bl	800f400 <USBD_LL_Start>
 800d7ae:	4603      	mov	r3, r0
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3708      	adds	r7, #8
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d7c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	370c      	adds	r7, #12
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr

0800d7ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b084      	sub	sp, #16
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d009      	beq.n	800d7fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	78fa      	ldrb	r2, [r7, #3]
 800d7f2:	4611      	mov	r1, r2
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	4798      	blx	r3
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3710      	adds	r7, #16
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b084      	sub	sp, #16
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
 800d80e:	460b      	mov	r3, r1
 800d810:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d812:	2300      	movs	r3, #0
 800d814:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	78fa      	ldrb	r2, [r7, #3]
 800d820:	4611      	mov	r1, r2
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	4798      	blx	r3
 800d826:	4603      	mov	r3, r0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d001      	beq.n	800d830 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d82c:	2303      	movs	r3, #3
 800d82e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d830:	7bfb      	ldrb	r3, [r7, #15]
}
 800d832:	4618      	mov	r0, r3
 800d834:	3710      	adds	r7, #16
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b084      	sub	sp, #16
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d84a:	6839      	ldr	r1, [r7, #0]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f001 f90e 	bl	800ea6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2201      	movs	r2, #1
 800d856:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d860:	461a      	mov	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d86e:	f003 031f 	and.w	r3, r3, #31
 800d872:	2b02      	cmp	r3, #2
 800d874:	d01a      	beq.n	800d8ac <USBD_LL_SetupStage+0x72>
 800d876:	2b02      	cmp	r3, #2
 800d878:	d822      	bhi.n	800d8c0 <USBD_LL_SetupStage+0x86>
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d002      	beq.n	800d884 <USBD_LL_SetupStage+0x4a>
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d00a      	beq.n	800d898 <USBD_LL_SetupStage+0x5e>
 800d882:	e01d      	b.n	800d8c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d88a:	4619      	mov	r1, r3
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 fb65 	bl	800df5c <USBD_StdDevReq>
 800d892:	4603      	mov	r3, r0
 800d894:	73fb      	strb	r3, [r7, #15]
      break;
 800d896:	e020      	b.n	800d8da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d89e:	4619      	mov	r1, r3
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 fbcd 	bl	800e040 <USBD_StdItfReq>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	73fb      	strb	r3, [r7, #15]
      break;
 800d8aa:	e016      	b.n	800d8da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 fc2f 	bl	800e118 <USBD_StdEPReq>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	73fb      	strb	r3, [r7, #15]
      break;
 800d8be:	e00c      	b.n	800d8da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d8c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f001 fdf6 	bl	800f4c0 <USBD_LL_StallEP>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	73fb      	strb	r3, [r7, #15]
      break;
 800d8d8:	bf00      	nop
  }

  return ret;
 800d8da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3710      	adds	r7, #16
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b086      	sub	sp, #24
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	607a      	str	r2, [r7, #4]
 800d8f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d8f6:	7afb      	ldrb	r3, [r7, #11]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d16e      	bne.n	800d9da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d902:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d90a:	2b03      	cmp	r3, #3
 800d90c:	f040 8098 	bne.w	800da40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	689a      	ldr	r2, [r3, #8]
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d913      	bls.n	800d944 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	689a      	ldr	r2, [r3, #8]
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	1ad2      	subs	r2, r2, r3
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	68da      	ldr	r2, [r3, #12]
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	4293      	cmp	r3, r2
 800d934:	bf28      	it	cs
 800d936:	4613      	movcs	r3, r2
 800d938:	461a      	mov	r2, r3
 800d93a:	6879      	ldr	r1, [r7, #4]
 800d93c:	68f8      	ldr	r0, [r7, #12]
 800d93e:	f001 f996 	bl	800ec6e <USBD_CtlContinueRx>
 800d942:	e07d      	b.n	800da40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d94a:	f003 031f 	and.w	r3, r3, #31
 800d94e:	2b02      	cmp	r3, #2
 800d950:	d014      	beq.n	800d97c <USBD_LL_DataOutStage+0x98>
 800d952:	2b02      	cmp	r3, #2
 800d954:	d81d      	bhi.n	800d992 <USBD_LL_DataOutStage+0xae>
 800d956:	2b00      	cmp	r3, #0
 800d958:	d002      	beq.n	800d960 <USBD_LL_DataOutStage+0x7c>
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d003      	beq.n	800d966 <USBD_LL_DataOutStage+0x82>
 800d95e:	e018      	b.n	800d992 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d960:	2300      	movs	r3, #0
 800d962:	75bb      	strb	r3, [r7, #22]
            break;
 800d964:	e018      	b.n	800d998 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	4619      	mov	r1, r3
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f000 fa64 	bl	800de3e <USBD_CoreFindIF>
 800d976:	4603      	mov	r3, r0
 800d978:	75bb      	strb	r3, [r7, #22]
            break;
 800d97a:	e00d      	b.n	800d998 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d982:	b2db      	uxtb	r3, r3
 800d984:	4619      	mov	r1, r3
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f000 fa66 	bl	800de58 <USBD_CoreFindEP>
 800d98c:	4603      	mov	r3, r0
 800d98e:	75bb      	strb	r3, [r7, #22]
            break;
 800d990:	e002      	b.n	800d998 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d992:	2300      	movs	r3, #0
 800d994:	75bb      	strb	r3, [r7, #22]
            break;
 800d996:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d998:	7dbb      	ldrb	r3, [r7, #22]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d119      	bne.n	800d9d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	2b03      	cmp	r3, #3
 800d9a8:	d113      	bne.n	800d9d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d9aa:	7dba      	ldrb	r2, [r7, #22]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	32ae      	adds	r2, #174	; 0xae
 800d9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00b      	beq.n	800d9d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d9ba:	7dba      	ldrb	r2, [r7, #22]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d9c2:	7dba      	ldrb	r2, [r7, #22]
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	32ae      	adds	r2, #174	; 0xae
 800d9c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9cc:	691b      	ldr	r3, [r3, #16]
 800d9ce:	68f8      	ldr	r0, [r7, #12]
 800d9d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d9d2:	68f8      	ldr	r0, [r7, #12]
 800d9d4:	f001 f95c 	bl	800ec90 <USBD_CtlSendStatus>
 800d9d8:	e032      	b.n	800da40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d9da:	7afb      	ldrb	r3, [r7, #11]
 800d9dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	68f8      	ldr	r0, [r7, #12]
 800d9e6:	f000 fa37 	bl	800de58 <USBD_CoreFindEP>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9ee:	7dbb      	ldrb	r3, [r7, #22]
 800d9f0:	2bff      	cmp	r3, #255	; 0xff
 800d9f2:	d025      	beq.n	800da40 <USBD_LL_DataOutStage+0x15c>
 800d9f4:	7dbb      	ldrb	r3, [r7, #22]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d122      	bne.n	800da40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da00:	b2db      	uxtb	r3, r3
 800da02:	2b03      	cmp	r3, #3
 800da04:	d117      	bne.n	800da36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800da06:	7dba      	ldrb	r2, [r7, #22]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	32ae      	adds	r2, #174	; 0xae
 800da0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da10:	699b      	ldr	r3, [r3, #24]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d00f      	beq.n	800da36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800da16:	7dba      	ldrb	r2, [r7, #22]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800da1e:	7dba      	ldrb	r2, [r7, #22]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	32ae      	adds	r2, #174	; 0xae
 800da24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da28:	699b      	ldr	r3, [r3, #24]
 800da2a:	7afa      	ldrb	r2, [r7, #11]
 800da2c:	4611      	mov	r1, r2
 800da2e:	68f8      	ldr	r0, [r7, #12]
 800da30:	4798      	blx	r3
 800da32:	4603      	mov	r3, r0
 800da34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800da36:	7dfb      	ldrb	r3, [r7, #23]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d001      	beq.n	800da40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800da3c:	7dfb      	ldrb	r3, [r7, #23]
 800da3e:	e000      	b.n	800da42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800da40:	2300      	movs	r3, #0
}
 800da42:	4618      	mov	r0, r3
 800da44:	3718      	adds	r7, #24
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b086      	sub	sp, #24
 800da4e:	af00      	add	r7, sp, #0
 800da50:	60f8      	str	r0, [r7, #12]
 800da52:	460b      	mov	r3, r1
 800da54:	607a      	str	r2, [r7, #4]
 800da56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800da58:	7afb      	ldrb	r3, [r7, #11]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d16f      	bne.n	800db3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	3314      	adds	r3, #20
 800da62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da6a:	2b02      	cmp	r3, #2
 800da6c:	d15a      	bne.n	800db24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	689a      	ldr	r2, [r3, #8]
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	68db      	ldr	r3, [r3, #12]
 800da76:	429a      	cmp	r2, r3
 800da78:	d914      	bls.n	800daa4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	689a      	ldr	r2, [r3, #8]
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	68db      	ldr	r3, [r3, #12]
 800da82:	1ad2      	subs	r2, r2, r3
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	689b      	ldr	r3, [r3, #8]
 800da8c:	461a      	mov	r2, r3
 800da8e:	6879      	ldr	r1, [r7, #4]
 800da90:	68f8      	ldr	r0, [r7, #12]
 800da92:	f001 f8be 	bl	800ec12 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da96:	2300      	movs	r3, #0
 800da98:	2200      	movs	r2, #0
 800da9a:	2100      	movs	r1, #0
 800da9c:	68f8      	ldr	r0, [r7, #12]
 800da9e:	f001 fdb9 	bl	800f614 <USBD_LL_PrepareReceive>
 800daa2:	e03f      	b.n	800db24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	68da      	ldr	r2, [r3, #12]
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	429a      	cmp	r2, r3
 800daae:	d11c      	bne.n	800daea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	685a      	ldr	r2, [r3, #4]
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dab8:	429a      	cmp	r2, r3
 800daba:	d316      	bcc.n	800daea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	685a      	ldr	r2, [r3, #4]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d20f      	bcs.n	800daea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800daca:	2200      	movs	r2, #0
 800dacc:	2100      	movs	r1, #0
 800dace:	68f8      	ldr	r0, [r7, #12]
 800dad0:	f001 f89f 	bl	800ec12 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2200      	movs	r2, #0
 800dad8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dadc:	2300      	movs	r3, #0
 800dade:	2200      	movs	r2, #0
 800dae0:	2100      	movs	r1, #0
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f001 fd96 	bl	800f614 <USBD_LL_PrepareReceive>
 800dae8:	e01c      	b.n	800db24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	2b03      	cmp	r3, #3
 800daf4:	d10f      	bne.n	800db16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dafc:	68db      	ldr	r3, [r3, #12]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d009      	beq.n	800db16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2200      	movs	r2, #0
 800db06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	68f8      	ldr	r0, [r7, #12]
 800db14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800db16:	2180      	movs	r1, #128	; 0x80
 800db18:	68f8      	ldr	r0, [r7, #12]
 800db1a:	f001 fcd1 	bl	800f4c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	f001 f8c9 	bl	800ecb6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d03a      	beq.n	800dba4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f7ff fe42 	bl	800d7b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	2200      	movs	r2, #0
 800db38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800db3c:	e032      	b.n	800dba4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800db3e:	7afb      	ldrb	r3, [r7, #11]
 800db40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db44:	b2db      	uxtb	r3, r3
 800db46:	4619      	mov	r1, r3
 800db48:	68f8      	ldr	r0, [r7, #12]
 800db4a:	f000 f985 	bl	800de58 <USBD_CoreFindEP>
 800db4e:	4603      	mov	r3, r0
 800db50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db52:	7dfb      	ldrb	r3, [r7, #23]
 800db54:	2bff      	cmp	r3, #255	; 0xff
 800db56:	d025      	beq.n	800dba4 <USBD_LL_DataInStage+0x15a>
 800db58:	7dfb      	ldrb	r3, [r7, #23]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d122      	bne.n	800dba4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db64:	b2db      	uxtb	r3, r3
 800db66:	2b03      	cmp	r3, #3
 800db68:	d11c      	bne.n	800dba4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800db6a:	7dfa      	ldrb	r2, [r7, #23]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	32ae      	adds	r2, #174	; 0xae
 800db70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db74:	695b      	ldr	r3, [r3, #20]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d014      	beq.n	800dba4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800db7a:	7dfa      	ldrb	r2, [r7, #23]
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800db82:	7dfa      	ldrb	r2, [r7, #23]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	32ae      	adds	r2, #174	; 0xae
 800db88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db8c:	695b      	ldr	r3, [r3, #20]
 800db8e:	7afa      	ldrb	r2, [r7, #11]
 800db90:	4611      	mov	r1, r2
 800db92:	68f8      	ldr	r0, [r7, #12]
 800db94:	4798      	blx	r3
 800db96:	4603      	mov	r3, r0
 800db98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800db9a:	7dbb      	ldrb	r3, [r7, #22]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dba0:	7dbb      	ldrb	r3, [r7, #22]
 800dba2:	e000      	b.n	800dba6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dba4:	2300      	movs	r3, #0
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3718      	adds	r7, #24
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}

0800dbae <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b084      	sub	sp, #16
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d014      	beq.n	800dc14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d00e      	beq.n	800dc14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	6852      	ldr	r2, [r2, #4]
 800dc02:	b2d2      	uxtb	r2, r2
 800dc04:	4611      	mov	r1, r2
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	4798      	blx	r3
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d001      	beq.n	800dc14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dc10:	2303      	movs	r3, #3
 800dc12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc14:	2340      	movs	r3, #64	; 0x40
 800dc16:	2200      	movs	r2, #0
 800dc18:	2100      	movs	r1, #0
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f001 fc0b 	bl	800f436 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2201      	movs	r2, #1
 800dc24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2240      	movs	r2, #64	; 0x40
 800dc2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc30:	2340      	movs	r3, #64	; 0x40
 800dc32:	2200      	movs	r2, #0
 800dc34:	2180      	movs	r1, #128	; 0x80
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f001 fbfd 	bl	800f436 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2240      	movs	r2, #64	; 0x40
 800dc46:	621a      	str	r2, [r3, #32]

  return ret;
 800dc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dc52:	b480      	push	{r7}
 800dc54:	b083      	sub	sp, #12
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	78fa      	ldrb	r2, [r7, #3]
 800dc62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	370c      	adds	r7, #12
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr

0800dc72 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dc72:	b480      	push	{r7}
 800dc74:	b083      	sub	sp, #12
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	2b04      	cmp	r3, #4
 800dc84:	d006      	beq.n	800dc94 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc8c:	b2da      	uxtb	r2, r3
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2204      	movs	r2, #4
 800dc98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	370c      	adds	r7, #12
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr

0800dcaa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dcaa:	b480      	push	{r7}
 800dcac:	b083      	sub	sp, #12
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	2b04      	cmp	r3, #4
 800dcbc:	d106      	bne.n	800dccc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dccc:	2300      	movs	r3, #0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	370c      	adds	r7, #12
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr

0800dcda <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b082      	sub	sp, #8
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	2b03      	cmp	r3, #3
 800dcec:	d110      	bne.n	800dd10 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d00b      	beq.n	800dd10 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcfe:	69db      	ldr	r3, [r3, #28]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d005      	beq.n	800dd10 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd0a:	69db      	ldr	r3, [r3, #28]
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dd10:	2300      	movs	r3, #0
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3708      	adds	r7, #8
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b082      	sub	sp, #8
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
 800dd22:	460b      	mov	r3, r1
 800dd24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	32ae      	adds	r2, #174	; 0xae
 800dd30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d101      	bne.n	800dd3c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dd38:	2303      	movs	r3, #3
 800dd3a:	e01c      	b.n	800dd76 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	2b03      	cmp	r3, #3
 800dd46:	d115      	bne.n	800dd74 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	32ae      	adds	r2, #174	; 0xae
 800dd52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd56:	6a1b      	ldr	r3, [r3, #32]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d00b      	beq.n	800dd74 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	32ae      	adds	r2, #174	; 0xae
 800dd66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd6a:	6a1b      	ldr	r3, [r3, #32]
 800dd6c:	78fa      	ldrb	r2, [r7, #3]
 800dd6e:	4611      	mov	r1, r2
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dd74:	2300      	movs	r3, #0
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3708      	adds	r7, #8
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}

0800dd7e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dd7e:	b580      	push	{r7, lr}
 800dd80:	b082      	sub	sp, #8
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
 800dd86:	460b      	mov	r3, r1
 800dd88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	32ae      	adds	r2, #174	; 0xae
 800dd94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d101      	bne.n	800dda0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dd9c:	2303      	movs	r3, #3
 800dd9e:	e01c      	b.n	800ddda <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	2b03      	cmp	r3, #3
 800ddaa:	d115      	bne.n	800ddd8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	32ae      	adds	r2, #174	; 0xae
 800ddb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d00b      	beq.n	800ddd8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	32ae      	adds	r2, #174	; 0xae
 800ddca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd0:	78fa      	ldrb	r2, [r7, #3]
 800ddd2:	4611      	mov	r1, r2
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ddd8:	2300      	movs	r3, #0
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3708      	adds	r7, #8
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dde2:	b480      	push	{r7}
 800dde4:	b083      	sub	sp, #12
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ddea:	2300      	movs	r3, #0
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800de00:	2300      	movs	r3, #0
 800de02:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2201      	movs	r2, #1
 800de08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de12:	2b00      	cmp	r3, #0
 800de14:	d00e      	beq.n	800de34 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	687a      	ldr	r2, [r7, #4]
 800de20:	6852      	ldr	r2, [r2, #4]
 800de22:	b2d2      	uxtb	r2, r2
 800de24:	4611      	mov	r1, r2
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	4798      	blx	r3
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d001      	beq.n	800de34 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800de30:	2303      	movs	r3, #3
 800de32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800de34:	7bfb      	ldrb	r3, [r7, #15]
}
 800de36:	4618      	mov	r0, r3
 800de38:	3710      	adds	r7, #16
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}

0800de3e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800de3e:	b480      	push	{r7}
 800de40:	b083      	sub	sp, #12
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
 800de46:	460b      	mov	r3, r1
 800de48:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800de4a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	370c      	adds	r7, #12
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr

0800de58 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800de58:	b480      	push	{r7}
 800de5a:	b083      	sub	sp, #12
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	460b      	mov	r3, r1
 800de62:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800de64:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800de66:	4618      	mov	r0, r3
 800de68:	370c      	adds	r7, #12
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr

0800de72 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b086      	sub	sp, #24
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	460b      	mov	r3, r1
 800de7c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800de86:	2300      	movs	r3, #0
 800de88:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	885b      	ldrh	r3, [r3, #2]
 800de8e:	b29a      	uxth	r2, r3
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	b29b      	uxth	r3, r3
 800de96:	429a      	cmp	r2, r3
 800de98:	d920      	bls.n	800dedc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dea2:	e013      	b.n	800decc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dea4:	f107 030a 	add.w	r3, r7, #10
 800dea8:	4619      	mov	r1, r3
 800deaa:	6978      	ldr	r0, [r7, #20]
 800deac:	f000 f81b 	bl	800dee6 <USBD_GetNextDesc>
 800deb0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	785b      	ldrb	r3, [r3, #1]
 800deb6:	2b05      	cmp	r3, #5
 800deb8:	d108      	bne.n	800decc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	789b      	ldrb	r3, [r3, #2]
 800dec2:	78fa      	ldrb	r2, [r7, #3]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d008      	beq.n	800deda <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dec8:	2300      	movs	r3, #0
 800deca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	885b      	ldrh	r3, [r3, #2]
 800ded0:	b29a      	uxth	r2, r3
 800ded2:	897b      	ldrh	r3, [r7, #10]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d8e5      	bhi.n	800dea4 <USBD_GetEpDesc+0x32>
 800ded8:	e000      	b.n	800dedc <USBD_GetEpDesc+0x6a>
          break;
 800deda:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dedc:	693b      	ldr	r3, [r7, #16]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3718      	adds	r7, #24
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}

0800dee6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dee6:	b480      	push	{r7}
 800dee8:	b085      	sub	sp, #20
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
 800deee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	881a      	ldrh	r2, [r3, #0]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	b29b      	uxth	r3, r3
 800defe:	4413      	add	r3, r2
 800df00:	b29a      	uxth	r2, r3
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	461a      	mov	r2, r3
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	4413      	add	r3, r2
 800df10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800df12:	68fb      	ldr	r3, [r7, #12]
}
 800df14:	4618      	mov	r0, r3
 800df16:	3714      	adds	r7, #20
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800df20:	b480      	push	{r7}
 800df22:	b087      	sub	sp, #28
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	3301      	adds	r3, #1
 800df36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800df3e:	8a3b      	ldrh	r3, [r7, #16]
 800df40:	021b      	lsls	r3, r3, #8
 800df42:	b21a      	sxth	r2, r3
 800df44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800df48:	4313      	orrs	r3, r2
 800df4a:	b21b      	sxth	r3, r3
 800df4c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800df4e:	89fb      	ldrh	r3, [r7, #14]
}
 800df50:	4618      	mov	r0, r3
 800df52:	371c      	adds	r7, #28
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr

0800df5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df66:	2300      	movs	r3, #0
 800df68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df72:	2b40      	cmp	r3, #64	; 0x40
 800df74:	d005      	beq.n	800df82 <USBD_StdDevReq+0x26>
 800df76:	2b40      	cmp	r3, #64	; 0x40
 800df78:	d857      	bhi.n	800e02a <USBD_StdDevReq+0xce>
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00f      	beq.n	800df9e <USBD_StdDevReq+0x42>
 800df7e:	2b20      	cmp	r3, #32
 800df80:	d153      	bne.n	800e02a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	32ae      	adds	r2, #174	; 0xae
 800df8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	6839      	ldr	r1, [r7, #0]
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	4798      	blx	r3
 800df98:	4603      	mov	r3, r0
 800df9a:	73fb      	strb	r3, [r7, #15]
      break;
 800df9c:	e04a      	b.n	800e034 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	785b      	ldrb	r3, [r3, #1]
 800dfa2:	2b09      	cmp	r3, #9
 800dfa4:	d83b      	bhi.n	800e01e <USBD_StdDevReq+0xc2>
 800dfa6:	a201      	add	r2, pc, #4	; (adr r2, 800dfac <USBD_StdDevReq+0x50>)
 800dfa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfac:	0800e001 	.word	0x0800e001
 800dfb0:	0800e015 	.word	0x0800e015
 800dfb4:	0800e01f 	.word	0x0800e01f
 800dfb8:	0800e00b 	.word	0x0800e00b
 800dfbc:	0800e01f 	.word	0x0800e01f
 800dfc0:	0800dfdf 	.word	0x0800dfdf
 800dfc4:	0800dfd5 	.word	0x0800dfd5
 800dfc8:	0800e01f 	.word	0x0800e01f
 800dfcc:	0800dff7 	.word	0x0800dff7
 800dfd0:	0800dfe9 	.word	0x0800dfe9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dfd4:	6839      	ldr	r1, [r7, #0]
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f000 fa3c 	bl	800e454 <USBD_GetDescriptor>
          break;
 800dfdc:	e024      	b.n	800e028 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dfde:	6839      	ldr	r1, [r7, #0]
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f000 fba1 	bl	800e728 <USBD_SetAddress>
          break;
 800dfe6:	e01f      	b.n	800e028 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dfe8:	6839      	ldr	r1, [r7, #0]
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f000 fbe0 	bl	800e7b0 <USBD_SetConfig>
 800dff0:	4603      	mov	r3, r0
 800dff2:	73fb      	strb	r3, [r7, #15]
          break;
 800dff4:	e018      	b.n	800e028 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dff6:	6839      	ldr	r1, [r7, #0]
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f000 fc83 	bl	800e904 <USBD_GetConfig>
          break;
 800dffe:	e013      	b.n	800e028 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e000:	6839      	ldr	r1, [r7, #0]
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 fcb4 	bl	800e970 <USBD_GetStatus>
          break;
 800e008:	e00e      	b.n	800e028 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e00a:	6839      	ldr	r1, [r7, #0]
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 fce3 	bl	800e9d8 <USBD_SetFeature>
          break;
 800e012:	e009      	b.n	800e028 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e014:	6839      	ldr	r1, [r7, #0]
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 fd07 	bl	800ea2a <USBD_ClrFeature>
          break;
 800e01c:	e004      	b.n	800e028 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e01e:	6839      	ldr	r1, [r7, #0]
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 fd5e 	bl	800eae2 <USBD_CtlError>
          break;
 800e026:	bf00      	nop
      }
      break;
 800e028:	e004      	b.n	800e034 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e02a:	6839      	ldr	r1, [r7, #0]
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 fd58 	bl	800eae2 <USBD_CtlError>
      break;
 800e032:	bf00      	nop
  }

  return ret;
 800e034:	7bfb      	ldrb	r3, [r7, #15]
}
 800e036:	4618      	mov	r0, r3
 800e038:	3710      	adds	r7, #16
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop

0800e040 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e04a:	2300      	movs	r3, #0
 800e04c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e056:	2b40      	cmp	r3, #64	; 0x40
 800e058:	d005      	beq.n	800e066 <USBD_StdItfReq+0x26>
 800e05a:	2b40      	cmp	r3, #64	; 0x40
 800e05c:	d852      	bhi.n	800e104 <USBD_StdItfReq+0xc4>
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d001      	beq.n	800e066 <USBD_StdItfReq+0x26>
 800e062:	2b20      	cmp	r3, #32
 800e064:	d14e      	bne.n	800e104 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	3b01      	subs	r3, #1
 800e070:	2b02      	cmp	r3, #2
 800e072:	d840      	bhi.n	800e0f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	889b      	ldrh	r3, [r3, #4]
 800e078:	b2db      	uxtb	r3, r3
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	d836      	bhi.n	800e0ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	889b      	ldrh	r3, [r3, #4]
 800e082:	b2db      	uxtb	r3, r3
 800e084:	4619      	mov	r1, r3
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f7ff fed9 	bl	800de3e <USBD_CoreFindIF>
 800e08c:	4603      	mov	r3, r0
 800e08e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e090:	7bbb      	ldrb	r3, [r7, #14]
 800e092:	2bff      	cmp	r3, #255	; 0xff
 800e094:	d01d      	beq.n	800e0d2 <USBD_StdItfReq+0x92>
 800e096:	7bbb      	ldrb	r3, [r7, #14]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d11a      	bne.n	800e0d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e09c:	7bba      	ldrb	r2, [r7, #14]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	32ae      	adds	r2, #174	; 0xae
 800e0a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0a6:	689b      	ldr	r3, [r3, #8]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00f      	beq.n	800e0cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e0ac:	7bba      	ldrb	r2, [r7, #14]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e0b4:	7bba      	ldrb	r2, [r7, #14]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	32ae      	adds	r2, #174	; 0xae
 800e0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	6839      	ldr	r1, [r7, #0]
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	4798      	blx	r3
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e0ca:	e004      	b.n	800e0d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e0cc:	2303      	movs	r3, #3
 800e0ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e0d0:	e001      	b.n	800e0d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e0d2:	2303      	movs	r3, #3
 800e0d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	88db      	ldrh	r3, [r3, #6]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d110      	bne.n	800e100 <USBD_StdItfReq+0xc0>
 800e0de:	7bfb      	ldrb	r3, [r7, #15]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d10d      	bne.n	800e100 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f000 fdd3 	bl	800ec90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e0ea:	e009      	b.n	800e100 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e0ec:	6839      	ldr	r1, [r7, #0]
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 fcf7 	bl	800eae2 <USBD_CtlError>
          break;
 800e0f4:	e004      	b.n	800e100 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e0f6:	6839      	ldr	r1, [r7, #0]
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 fcf2 	bl	800eae2 <USBD_CtlError>
          break;
 800e0fe:	e000      	b.n	800e102 <USBD_StdItfReq+0xc2>
          break;
 800e100:	bf00      	nop
      }
      break;
 800e102:	e004      	b.n	800e10e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e104:	6839      	ldr	r1, [r7, #0]
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 fceb 	bl	800eae2 <USBD_CtlError>
      break;
 800e10c:	bf00      	nop
  }

  return ret;
 800e10e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e110:	4618      	mov	r0, r3
 800e112:	3710      	adds	r7, #16
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}

0800e118 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e122:	2300      	movs	r3, #0
 800e124:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	889b      	ldrh	r3, [r3, #4]
 800e12a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e134:	2b40      	cmp	r3, #64	; 0x40
 800e136:	d007      	beq.n	800e148 <USBD_StdEPReq+0x30>
 800e138:	2b40      	cmp	r3, #64	; 0x40
 800e13a:	f200 817f 	bhi.w	800e43c <USBD_StdEPReq+0x324>
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d02a      	beq.n	800e198 <USBD_StdEPReq+0x80>
 800e142:	2b20      	cmp	r3, #32
 800e144:	f040 817a 	bne.w	800e43c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e148:	7bbb      	ldrb	r3, [r7, #14]
 800e14a:	4619      	mov	r1, r3
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f7ff fe83 	bl	800de58 <USBD_CoreFindEP>
 800e152:	4603      	mov	r3, r0
 800e154:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e156:	7b7b      	ldrb	r3, [r7, #13]
 800e158:	2bff      	cmp	r3, #255	; 0xff
 800e15a:	f000 8174 	beq.w	800e446 <USBD_StdEPReq+0x32e>
 800e15e:	7b7b      	ldrb	r3, [r7, #13]
 800e160:	2b00      	cmp	r3, #0
 800e162:	f040 8170 	bne.w	800e446 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e166:	7b7a      	ldrb	r2, [r7, #13]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e16e:	7b7a      	ldrb	r2, [r7, #13]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	32ae      	adds	r2, #174	; 0xae
 800e174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e178:	689b      	ldr	r3, [r3, #8]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	f000 8163 	beq.w	800e446 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e180:	7b7a      	ldrb	r2, [r7, #13]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	32ae      	adds	r2, #174	; 0xae
 800e186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e18a:	689b      	ldr	r3, [r3, #8]
 800e18c:	6839      	ldr	r1, [r7, #0]
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	4798      	blx	r3
 800e192:	4603      	mov	r3, r0
 800e194:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e196:	e156      	b.n	800e446 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	785b      	ldrb	r3, [r3, #1]
 800e19c:	2b03      	cmp	r3, #3
 800e19e:	d008      	beq.n	800e1b2 <USBD_StdEPReq+0x9a>
 800e1a0:	2b03      	cmp	r3, #3
 800e1a2:	f300 8145 	bgt.w	800e430 <USBD_StdEPReq+0x318>
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	f000 809b 	beq.w	800e2e2 <USBD_StdEPReq+0x1ca>
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d03c      	beq.n	800e22a <USBD_StdEPReq+0x112>
 800e1b0:	e13e      	b.n	800e430 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	2b02      	cmp	r3, #2
 800e1bc:	d002      	beq.n	800e1c4 <USBD_StdEPReq+0xac>
 800e1be:	2b03      	cmp	r3, #3
 800e1c0:	d016      	beq.n	800e1f0 <USBD_StdEPReq+0xd8>
 800e1c2:	e02c      	b.n	800e21e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1c4:	7bbb      	ldrb	r3, [r7, #14]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d00d      	beq.n	800e1e6 <USBD_StdEPReq+0xce>
 800e1ca:	7bbb      	ldrb	r3, [r7, #14]
 800e1cc:	2b80      	cmp	r3, #128	; 0x80
 800e1ce:	d00a      	beq.n	800e1e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1d0:	7bbb      	ldrb	r3, [r7, #14]
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f001 f973 	bl	800f4c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1da:	2180      	movs	r1, #128	; 0x80
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f001 f96f 	bl	800f4c0 <USBD_LL_StallEP>
 800e1e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e1e4:	e020      	b.n	800e228 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e1e6:	6839      	ldr	r1, [r7, #0]
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f000 fc7a 	bl	800eae2 <USBD_CtlError>
              break;
 800e1ee:	e01b      	b.n	800e228 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	885b      	ldrh	r3, [r3, #2]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d10e      	bne.n	800e216 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e1f8:	7bbb      	ldrb	r3, [r7, #14]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d00b      	beq.n	800e216 <USBD_StdEPReq+0xfe>
 800e1fe:	7bbb      	ldrb	r3, [r7, #14]
 800e200:	2b80      	cmp	r3, #128	; 0x80
 800e202:	d008      	beq.n	800e216 <USBD_StdEPReq+0xfe>
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	88db      	ldrh	r3, [r3, #6]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d104      	bne.n	800e216 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e20c:	7bbb      	ldrb	r3, [r7, #14]
 800e20e:	4619      	mov	r1, r3
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f001 f955 	bl	800f4c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 fd3a 	bl	800ec90 <USBD_CtlSendStatus>

              break;
 800e21c:	e004      	b.n	800e228 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e21e:	6839      	ldr	r1, [r7, #0]
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f000 fc5e 	bl	800eae2 <USBD_CtlError>
              break;
 800e226:	bf00      	nop
          }
          break;
 800e228:	e107      	b.n	800e43a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e230:	b2db      	uxtb	r3, r3
 800e232:	2b02      	cmp	r3, #2
 800e234:	d002      	beq.n	800e23c <USBD_StdEPReq+0x124>
 800e236:	2b03      	cmp	r3, #3
 800e238:	d016      	beq.n	800e268 <USBD_StdEPReq+0x150>
 800e23a:	e04b      	b.n	800e2d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e23c:	7bbb      	ldrb	r3, [r7, #14]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d00d      	beq.n	800e25e <USBD_StdEPReq+0x146>
 800e242:	7bbb      	ldrb	r3, [r7, #14]
 800e244:	2b80      	cmp	r3, #128	; 0x80
 800e246:	d00a      	beq.n	800e25e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e248:	7bbb      	ldrb	r3, [r7, #14]
 800e24a:	4619      	mov	r1, r3
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f001 f937 	bl	800f4c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e252:	2180      	movs	r1, #128	; 0x80
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f001 f933 	bl	800f4c0 <USBD_LL_StallEP>
 800e25a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e25c:	e040      	b.n	800e2e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e25e:	6839      	ldr	r1, [r7, #0]
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f000 fc3e 	bl	800eae2 <USBD_CtlError>
              break;
 800e266:	e03b      	b.n	800e2e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	885b      	ldrh	r3, [r3, #2]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d136      	bne.n	800e2de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e270:	7bbb      	ldrb	r3, [r7, #14]
 800e272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e276:	2b00      	cmp	r3, #0
 800e278:	d004      	beq.n	800e284 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e27a:	7bbb      	ldrb	r3, [r7, #14]
 800e27c:	4619      	mov	r1, r3
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f001 f93d 	bl	800f4fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f000 fd03 	bl	800ec90 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e28a:	7bbb      	ldrb	r3, [r7, #14]
 800e28c:	4619      	mov	r1, r3
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f7ff fde2 	bl	800de58 <USBD_CoreFindEP>
 800e294:	4603      	mov	r3, r0
 800e296:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e298:	7b7b      	ldrb	r3, [r7, #13]
 800e29a:	2bff      	cmp	r3, #255	; 0xff
 800e29c:	d01f      	beq.n	800e2de <USBD_StdEPReq+0x1c6>
 800e29e:	7b7b      	ldrb	r3, [r7, #13]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d11c      	bne.n	800e2de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e2a4:	7b7a      	ldrb	r2, [r7, #13]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e2ac:	7b7a      	ldrb	r2, [r7, #13]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	32ae      	adds	r2, #174	; 0xae
 800e2b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d010      	beq.n	800e2de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e2bc:	7b7a      	ldrb	r2, [r7, #13]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	32ae      	adds	r2, #174	; 0xae
 800e2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2c6:	689b      	ldr	r3, [r3, #8]
 800e2c8:	6839      	ldr	r1, [r7, #0]
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	4798      	blx	r3
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e2d2:	e004      	b.n	800e2de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e2d4:	6839      	ldr	r1, [r7, #0]
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 fc03 	bl	800eae2 <USBD_CtlError>
              break;
 800e2dc:	e000      	b.n	800e2e0 <USBD_StdEPReq+0x1c8>
              break;
 800e2de:	bf00      	nop
          }
          break;
 800e2e0:	e0ab      	b.n	800e43a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	2b02      	cmp	r3, #2
 800e2ec:	d002      	beq.n	800e2f4 <USBD_StdEPReq+0x1dc>
 800e2ee:	2b03      	cmp	r3, #3
 800e2f0:	d032      	beq.n	800e358 <USBD_StdEPReq+0x240>
 800e2f2:	e097      	b.n	800e424 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2f4:	7bbb      	ldrb	r3, [r7, #14]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d007      	beq.n	800e30a <USBD_StdEPReq+0x1f2>
 800e2fa:	7bbb      	ldrb	r3, [r7, #14]
 800e2fc:	2b80      	cmp	r3, #128	; 0x80
 800e2fe:	d004      	beq.n	800e30a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e300:	6839      	ldr	r1, [r7, #0]
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 fbed 	bl	800eae2 <USBD_CtlError>
                break;
 800e308:	e091      	b.n	800e42e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e30a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	da0b      	bge.n	800e32a <USBD_StdEPReq+0x212>
 800e312:	7bbb      	ldrb	r3, [r7, #14]
 800e314:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e318:	4613      	mov	r3, r2
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	4413      	add	r3, r2
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	3310      	adds	r3, #16
 800e322:	687a      	ldr	r2, [r7, #4]
 800e324:	4413      	add	r3, r2
 800e326:	3304      	adds	r3, #4
 800e328:	e00b      	b.n	800e342 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e32a:	7bbb      	ldrb	r3, [r7, #14]
 800e32c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e330:	4613      	mov	r3, r2
 800e332:	009b      	lsls	r3, r3, #2
 800e334:	4413      	add	r3, r2
 800e336:	009b      	lsls	r3, r3, #2
 800e338:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	4413      	add	r3, r2
 800e340:	3304      	adds	r3, #4
 800e342:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	2200      	movs	r2, #0
 800e348:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	2202      	movs	r2, #2
 800e34e:	4619      	mov	r1, r3
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f000 fc43 	bl	800ebdc <USBD_CtlSendData>
              break;
 800e356:	e06a      	b.n	800e42e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	da11      	bge.n	800e384 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e360:	7bbb      	ldrb	r3, [r7, #14]
 800e362:	f003 020f 	and.w	r2, r3, #15
 800e366:	6879      	ldr	r1, [r7, #4]
 800e368:	4613      	mov	r3, r2
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	4413      	add	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	440b      	add	r3, r1
 800e372:	3324      	adds	r3, #36	; 0x24
 800e374:	881b      	ldrh	r3, [r3, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d117      	bne.n	800e3aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e37a:	6839      	ldr	r1, [r7, #0]
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f000 fbb0 	bl	800eae2 <USBD_CtlError>
                  break;
 800e382:	e054      	b.n	800e42e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e384:	7bbb      	ldrb	r3, [r7, #14]
 800e386:	f003 020f 	and.w	r2, r3, #15
 800e38a:	6879      	ldr	r1, [r7, #4]
 800e38c:	4613      	mov	r3, r2
 800e38e:	009b      	lsls	r3, r3, #2
 800e390:	4413      	add	r3, r2
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	440b      	add	r3, r1
 800e396:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e39a:	881b      	ldrh	r3, [r3, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d104      	bne.n	800e3aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e3a0:	6839      	ldr	r1, [r7, #0]
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 fb9d 	bl	800eae2 <USBD_CtlError>
                  break;
 800e3a8:	e041      	b.n	800e42e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	da0b      	bge.n	800e3ca <USBD_StdEPReq+0x2b2>
 800e3b2:	7bbb      	ldrb	r3, [r7, #14]
 800e3b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	4413      	add	r3, r2
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	3310      	adds	r3, #16
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	3304      	adds	r3, #4
 800e3c8:	e00b      	b.n	800e3e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e3ca:	7bbb      	ldrb	r3, [r7, #14]
 800e3cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3d0:	4613      	mov	r3, r2
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	4413      	add	r3, r2
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	4413      	add	r3, r2
 800e3e0:	3304      	adds	r3, #4
 800e3e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e3e4:	7bbb      	ldrb	r3, [r7, #14]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d002      	beq.n	800e3f0 <USBD_StdEPReq+0x2d8>
 800e3ea:	7bbb      	ldrb	r3, [r7, #14]
 800e3ec:	2b80      	cmp	r3, #128	; 0x80
 800e3ee:	d103      	bne.n	800e3f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	601a      	str	r2, [r3, #0]
 800e3f6:	e00e      	b.n	800e416 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e3f8:	7bbb      	ldrb	r3, [r7, #14]
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f001 f89d 	bl	800f53c <USBD_LL_IsStallEP>
 800e402:	4603      	mov	r3, r0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d003      	beq.n	800e410 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	2201      	movs	r2, #1
 800e40c:	601a      	str	r2, [r3, #0]
 800e40e:	e002      	b.n	800e416 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	2200      	movs	r2, #0
 800e414:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	2202      	movs	r2, #2
 800e41a:	4619      	mov	r1, r3
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f000 fbdd 	bl	800ebdc <USBD_CtlSendData>
              break;
 800e422:	e004      	b.n	800e42e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e424:	6839      	ldr	r1, [r7, #0]
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 fb5b 	bl	800eae2 <USBD_CtlError>
              break;
 800e42c:	bf00      	nop
          }
          break;
 800e42e:	e004      	b.n	800e43a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e430:	6839      	ldr	r1, [r7, #0]
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f000 fb55 	bl	800eae2 <USBD_CtlError>
          break;
 800e438:	bf00      	nop
      }
      break;
 800e43a:	e005      	b.n	800e448 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e43c:	6839      	ldr	r1, [r7, #0]
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f000 fb4f 	bl	800eae2 <USBD_CtlError>
      break;
 800e444:	e000      	b.n	800e448 <USBD_StdEPReq+0x330>
      break;
 800e446:	bf00      	nop
  }

  return ret;
 800e448:	7bfb      	ldrb	r3, [r7, #15]
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
	...

0800e454 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e45e:	2300      	movs	r3, #0
 800e460:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e462:	2300      	movs	r3, #0
 800e464:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e466:	2300      	movs	r3, #0
 800e468:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	885b      	ldrh	r3, [r3, #2]
 800e46e:	0a1b      	lsrs	r3, r3, #8
 800e470:	b29b      	uxth	r3, r3
 800e472:	3b01      	subs	r3, #1
 800e474:	2b06      	cmp	r3, #6
 800e476:	f200 8128 	bhi.w	800e6ca <USBD_GetDescriptor+0x276>
 800e47a:	a201      	add	r2, pc, #4	; (adr r2, 800e480 <USBD_GetDescriptor+0x2c>)
 800e47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e480:	0800e49d 	.word	0x0800e49d
 800e484:	0800e4b5 	.word	0x0800e4b5
 800e488:	0800e4f5 	.word	0x0800e4f5
 800e48c:	0800e6cb 	.word	0x0800e6cb
 800e490:	0800e6cb 	.word	0x0800e6cb
 800e494:	0800e66b 	.word	0x0800e66b
 800e498:	0800e697 	.word	0x0800e697
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	687a      	ldr	r2, [r7, #4]
 800e4a6:	7c12      	ldrb	r2, [r2, #16]
 800e4a8:	f107 0108 	add.w	r1, r7, #8
 800e4ac:	4610      	mov	r0, r2
 800e4ae:	4798      	blx	r3
 800e4b0:	60f8      	str	r0, [r7, #12]
      break;
 800e4b2:	e112      	b.n	800e6da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	7c1b      	ldrb	r3, [r3, #16]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d10d      	bne.n	800e4d8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4c4:	f107 0208 	add.w	r2, r7, #8
 800e4c8:	4610      	mov	r0, r2
 800e4ca:	4798      	blx	r3
 800e4cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	2202      	movs	r2, #2
 800e4d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e4d6:	e100      	b.n	800e6da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4e0:	f107 0208 	add.w	r2, r7, #8
 800e4e4:	4610      	mov	r0, r2
 800e4e6:	4798      	blx	r3
 800e4e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	2202      	movs	r2, #2
 800e4f0:	701a      	strb	r2, [r3, #0]
      break;
 800e4f2:	e0f2      	b.n	800e6da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	885b      	ldrh	r3, [r3, #2]
 800e4f8:	b2db      	uxtb	r3, r3
 800e4fa:	2b05      	cmp	r3, #5
 800e4fc:	f200 80ac 	bhi.w	800e658 <USBD_GetDescriptor+0x204>
 800e500:	a201      	add	r2, pc, #4	; (adr r2, 800e508 <USBD_GetDescriptor+0xb4>)
 800e502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e506:	bf00      	nop
 800e508:	0800e521 	.word	0x0800e521
 800e50c:	0800e555 	.word	0x0800e555
 800e510:	0800e589 	.word	0x0800e589
 800e514:	0800e5bd 	.word	0x0800e5bd
 800e518:	0800e5f1 	.word	0x0800e5f1
 800e51c:	0800e625 	.word	0x0800e625
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d00b      	beq.n	800e544 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	7c12      	ldrb	r2, [r2, #16]
 800e538:	f107 0108 	add.w	r1, r7, #8
 800e53c:	4610      	mov	r0, r2
 800e53e:	4798      	blx	r3
 800e540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e542:	e091      	b.n	800e668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e544:	6839      	ldr	r1, [r7, #0]
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 facb 	bl	800eae2 <USBD_CtlError>
            err++;
 800e54c:	7afb      	ldrb	r3, [r7, #11]
 800e54e:	3301      	adds	r3, #1
 800e550:	72fb      	strb	r3, [r7, #11]
          break;
 800e552:	e089      	b.n	800e668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e55a:	689b      	ldr	r3, [r3, #8]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00b      	beq.n	800e578 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e566:	689b      	ldr	r3, [r3, #8]
 800e568:	687a      	ldr	r2, [r7, #4]
 800e56a:	7c12      	ldrb	r2, [r2, #16]
 800e56c:	f107 0108 	add.w	r1, r7, #8
 800e570:	4610      	mov	r0, r2
 800e572:	4798      	blx	r3
 800e574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e576:	e077      	b.n	800e668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e578:	6839      	ldr	r1, [r7, #0]
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 fab1 	bl	800eae2 <USBD_CtlError>
            err++;
 800e580:	7afb      	ldrb	r3, [r7, #11]
 800e582:	3301      	adds	r3, #1
 800e584:	72fb      	strb	r3, [r7, #11]
          break;
 800e586:	e06f      	b.n	800e668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00b      	beq.n	800e5ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	7c12      	ldrb	r2, [r2, #16]
 800e5a0:	f107 0108 	add.w	r1, r7, #8
 800e5a4:	4610      	mov	r0, r2
 800e5a6:	4798      	blx	r3
 800e5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5aa:	e05d      	b.n	800e668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e5ac:	6839      	ldr	r1, [r7, #0]
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 fa97 	bl	800eae2 <USBD_CtlError>
            err++;
 800e5b4:	7afb      	ldrb	r3, [r7, #11]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800e5ba:	e055      	b.n	800e668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5c2:	691b      	ldr	r3, [r3, #16]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00b      	beq.n	800e5e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5ce:	691b      	ldr	r3, [r3, #16]
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	7c12      	ldrb	r2, [r2, #16]
 800e5d4:	f107 0108 	add.w	r1, r7, #8
 800e5d8:	4610      	mov	r0, r2
 800e5da:	4798      	blx	r3
 800e5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5de:	e043      	b.n	800e668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e5e0:	6839      	ldr	r1, [r7, #0]
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 fa7d 	bl	800eae2 <USBD_CtlError>
            err++;
 800e5e8:	7afb      	ldrb	r3, [r7, #11]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800e5ee:	e03b      	b.n	800e668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5f6:	695b      	ldr	r3, [r3, #20]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d00b      	beq.n	800e614 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e602:	695b      	ldr	r3, [r3, #20]
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	7c12      	ldrb	r2, [r2, #16]
 800e608:	f107 0108 	add.w	r1, r7, #8
 800e60c:	4610      	mov	r0, r2
 800e60e:	4798      	blx	r3
 800e610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e612:	e029      	b.n	800e668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e614:	6839      	ldr	r1, [r7, #0]
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f000 fa63 	bl	800eae2 <USBD_CtlError>
            err++;
 800e61c:	7afb      	ldrb	r3, [r7, #11]
 800e61e:	3301      	adds	r3, #1
 800e620:	72fb      	strb	r3, [r7, #11]
          break;
 800e622:	e021      	b.n	800e668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e62a:	699b      	ldr	r3, [r3, #24]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00b      	beq.n	800e648 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e636:	699b      	ldr	r3, [r3, #24]
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	7c12      	ldrb	r2, [r2, #16]
 800e63c:	f107 0108 	add.w	r1, r7, #8
 800e640:	4610      	mov	r0, r2
 800e642:	4798      	blx	r3
 800e644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e646:	e00f      	b.n	800e668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e648:	6839      	ldr	r1, [r7, #0]
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 fa49 	bl	800eae2 <USBD_CtlError>
            err++;
 800e650:	7afb      	ldrb	r3, [r7, #11]
 800e652:	3301      	adds	r3, #1
 800e654:	72fb      	strb	r3, [r7, #11]
          break;
 800e656:	e007      	b.n	800e668 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e658:	6839      	ldr	r1, [r7, #0]
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f000 fa41 	bl	800eae2 <USBD_CtlError>
          err++;
 800e660:	7afb      	ldrb	r3, [r7, #11]
 800e662:	3301      	adds	r3, #1
 800e664:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e666:	bf00      	nop
      }
      break;
 800e668:	e037      	b.n	800e6da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	7c1b      	ldrb	r3, [r3, #16]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d109      	bne.n	800e686 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e67a:	f107 0208 	add.w	r2, r7, #8
 800e67e:	4610      	mov	r0, r2
 800e680:	4798      	blx	r3
 800e682:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e684:	e029      	b.n	800e6da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e686:	6839      	ldr	r1, [r7, #0]
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f000 fa2a 	bl	800eae2 <USBD_CtlError>
        err++;
 800e68e:	7afb      	ldrb	r3, [r7, #11]
 800e690:	3301      	adds	r3, #1
 800e692:	72fb      	strb	r3, [r7, #11]
      break;
 800e694:	e021      	b.n	800e6da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	7c1b      	ldrb	r3, [r3, #16]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d10d      	bne.n	800e6ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a6:	f107 0208 	add.w	r2, r7, #8
 800e6aa:	4610      	mov	r0, r2
 800e6ac:	4798      	blx	r3
 800e6ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	2207      	movs	r2, #7
 800e6b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e6b8:	e00f      	b.n	800e6da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e6ba:	6839      	ldr	r1, [r7, #0]
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 fa10 	bl	800eae2 <USBD_CtlError>
        err++;
 800e6c2:	7afb      	ldrb	r3, [r7, #11]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	72fb      	strb	r3, [r7, #11]
      break;
 800e6c8:	e007      	b.n	800e6da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e6ca:	6839      	ldr	r1, [r7, #0]
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 fa08 	bl	800eae2 <USBD_CtlError>
      err++;
 800e6d2:	7afb      	ldrb	r3, [r7, #11]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	72fb      	strb	r3, [r7, #11]
      break;
 800e6d8:	bf00      	nop
  }

  if (err != 0U)
 800e6da:	7afb      	ldrb	r3, [r7, #11]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d11e      	bne.n	800e71e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	88db      	ldrh	r3, [r3, #6]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d016      	beq.n	800e716 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e6e8:	893b      	ldrh	r3, [r7, #8]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00e      	beq.n	800e70c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	88da      	ldrh	r2, [r3, #6]
 800e6f2:	893b      	ldrh	r3, [r7, #8]
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	bf28      	it	cs
 800e6f8:	4613      	movcs	r3, r2
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e6fe:	893b      	ldrh	r3, [r7, #8]
 800e700:	461a      	mov	r2, r3
 800e702:	68f9      	ldr	r1, [r7, #12]
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f000 fa69 	bl	800ebdc <USBD_CtlSendData>
 800e70a:	e009      	b.n	800e720 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e70c:	6839      	ldr	r1, [r7, #0]
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f000 f9e7 	bl	800eae2 <USBD_CtlError>
 800e714:	e004      	b.n	800e720 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f000 faba 	bl	800ec90 <USBD_CtlSendStatus>
 800e71c:	e000      	b.n	800e720 <USBD_GetDescriptor+0x2cc>
    return;
 800e71e:	bf00      	nop
  }
}
 800e720:	3710      	adds	r7, #16
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop

0800e728 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	889b      	ldrh	r3, [r3, #4]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d131      	bne.n	800e79e <USBD_SetAddress+0x76>
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	88db      	ldrh	r3, [r3, #6]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d12d      	bne.n	800e79e <USBD_SetAddress+0x76>
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	885b      	ldrh	r3, [r3, #2]
 800e746:	2b7f      	cmp	r3, #127	; 0x7f
 800e748:	d829      	bhi.n	800e79e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	885b      	ldrh	r3, [r3, #2]
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e754:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	2b03      	cmp	r3, #3
 800e760:	d104      	bne.n	800e76c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e762:	6839      	ldr	r1, [r7, #0]
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 f9bc 	bl	800eae2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e76a:	e01d      	b.n	800e7a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	7bfa      	ldrb	r2, [r7, #15]
 800e770:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e774:	7bfb      	ldrb	r3, [r7, #15]
 800e776:	4619      	mov	r1, r3
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f000 ff0b 	bl	800f594 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 fa86 	bl	800ec90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e784:	7bfb      	ldrb	r3, [r7, #15]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d004      	beq.n	800e794 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2202      	movs	r2, #2
 800e78e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e792:	e009      	b.n	800e7a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2201      	movs	r2, #1
 800e798:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e79c:	e004      	b.n	800e7a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e79e:	6839      	ldr	r1, [r7, #0]
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f000 f99e 	bl	800eae2 <USBD_CtlError>
  }
}
 800e7a6:	bf00      	nop
 800e7a8:	bf00      	nop
 800e7aa:	3710      	adds	r7, #16
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	885b      	ldrh	r3, [r3, #2]
 800e7c2:	b2da      	uxtb	r2, r3
 800e7c4:	4b4e      	ldr	r3, [pc, #312]	; (800e900 <USBD_SetConfig+0x150>)
 800e7c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e7c8:	4b4d      	ldr	r3, [pc, #308]	; (800e900 <USBD_SetConfig+0x150>)
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d905      	bls.n	800e7dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e7d0:	6839      	ldr	r1, [r7, #0]
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 f985 	bl	800eae2 <USBD_CtlError>
    return USBD_FAIL;
 800e7d8:	2303      	movs	r3, #3
 800e7da:	e08c      	b.n	800e8f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	2b02      	cmp	r3, #2
 800e7e6:	d002      	beq.n	800e7ee <USBD_SetConfig+0x3e>
 800e7e8:	2b03      	cmp	r3, #3
 800e7ea:	d029      	beq.n	800e840 <USBD_SetConfig+0x90>
 800e7ec:	e075      	b.n	800e8da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e7ee:	4b44      	ldr	r3, [pc, #272]	; (800e900 <USBD_SetConfig+0x150>)
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d020      	beq.n	800e838 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e7f6:	4b42      	ldr	r3, [pc, #264]	; (800e900 <USBD_SetConfig+0x150>)
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e800:	4b3f      	ldr	r3, [pc, #252]	; (800e900 <USBD_SetConfig+0x150>)
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	4619      	mov	r1, r3
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f7fe ffe1 	bl	800d7ce <USBD_SetClassConfig>
 800e80c:	4603      	mov	r3, r0
 800e80e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e810:	7bfb      	ldrb	r3, [r7, #15]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d008      	beq.n	800e828 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e816:	6839      	ldr	r1, [r7, #0]
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f000 f962 	bl	800eae2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2202      	movs	r2, #2
 800e822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e826:	e065      	b.n	800e8f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f000 fa31 	bl	800ec90 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2203      	movs	r2, #3
 800e832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e836:	e05d      	b.n	800e8f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 fa29 	bl	800ec90 <USBD_CtlSendStatus>
      break;
 800e83e:	e059      	b.n	800e8f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e840:	4b2f      	ldr	r3, [pc, #188]	; (800e900 <USBD_SetConfig+0x150>)
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d112      	bne.n	800e86e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2202      	movs	r2, #2
 800e84c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e850:	4b2b      	ldr	r3, [pc, #172]	; (800e900 <USBD_SetConfig+0x150>)
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	461a      	mov	r2, r3
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e85a:	4b29      	ldr	r3, [pc, #164]	; (800e900 <USBD_SetConfig+0x150>)
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	4619      	mov	r1, r3
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7fe ffd0 	bl	800d806 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f000 fa12 	bl	800ec90 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e86c:	e042      	b.n	800e8f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e86e:	4b24      	ldr	r3, [pc, #144]	; (800e900 <USBD_SetConfig+0x150>)
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	461a      	mov	r2, r3
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d02a      	beq.n	800e8d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	b2db      	uxtb	r3, r3
 800e882:	4619      	mov	r1, r3
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f7fe ffbe 	bl	800d806 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e88a:	4b1d      	ldr	r3, [pc, #116]	; (800e900 <USBD_SetConfig+0x150>)
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	461a      	mov	r2, r3
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e894:	4b1a      	ldr	r3, [pc, #104]	; (800e900 <USBD_SetConfig+0x150>)
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	4619      	mov	r1, r3
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7fe ff97 	bl	800d7ce <USBD_SetClassConfig>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e8a4:	7bfb      	ldrb	r3, [r7, #15]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d00f      	beq.n	800e8ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e8aa:	6839      	ldr	r1, [r7, #0]
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f000 f918 	bl	800eae2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	685b      	ldr	r3, [r3, #4]
 800e8b6:	b2db      	uxtb	r3, r3
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f7fe ffa3 	bl	800d806 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2202      	movs	r2, #2
 800e8c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e8c8:	e014      	b.n	800e8f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f000 f9e0 	bl	800ec90 <USBD_CtlSendStatus>
      break;
 800e8d0:	e010      	b.n	800e8f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 f9dc 	bl	800ec90 <USBD_CtlSendStatus>
      break;
 800e8d8:	e00c      	b.n	800e8f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e8da:	6839      	ldr	r1, [r7, #0]
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 f900 	bl	800eae2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e8e2:	4b07      	ldr	r3, [pc, #28]	; (800e900 <USBD_SetConfig+0x150>)
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f7fe ff8c 	bl	800d806 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e8ee:	2303      	movs	r3, #3
 800e8f0:	73fb      	strb	r3, [r7, #15]
      break;
 800e8f2:	bf00      	nop
  }

  return ret;
 800e8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3710      	adds	r7, #16
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	24000500 	.word	0x24000500

0800e904 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	88db      	ldrh	r3, [r3, #6]
 800e912:	2b01      	cmp	r3, #1
 800e914:	d004      	beq.n	800e920 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e916:	6839      	ldr	r1, [r7, #0]
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 f8e2 	bl	800eae2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e91e:	e023      	b.n	800e968 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e926:	b2db      	uxtb	r3, r3
 800e928:	2b02      	cmp	r3, #2
 800e92a:	dc02      	bgt.n	800e932 <USBD_GetConfig+0x2e>
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	dc03      	bgt.n	800e938 <USBD_GetConfig+0x34>
 800e930:	e015      	b.n	800e95e <USBD_GetConfig+0x5a>
 800e932:	2b03      	cmp	r3, #3
 800e934:	d00b      	beq.n	800e94e <USBD_GetConfig+0x4a>
 800e936:	e012      	b.n	800e95e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2200      	movs	r2, #0
 800e93c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	3308      	adds	r3, #8
 800e942:	2201      	movs	r2, #1
 800e944:	4619      	mov	r1, r3
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f000 f948 	bl	800ebdc <USBD_CtlSendData>
        break;
 800e94c:	e00c      	b.n	800e968 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	3304      	adds	r3, #4
 800e952:	2201      	movs	r2, #1
 800e954:	4619      	mov	r1, r3
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 f940 	bl	800ebdc <USBD_CtlSendData>
        break;
 800e95c:	e004      	b.n	800e968 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e95e:	6839      	ldr	r1, [r7, #0]
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f000 f8be 	bl	800eae2 <USBD_CtlError>
        break;
 800e966:	bf00      	nop
}
 800e968:	bf00      	nop
 800e96a:	3708      	adds	r7, #8
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e980:	b2db      	uxtb	r3, r3
 800e982:	3b01      	subs	r3, #1
 800e984:	2b02      	cmp	r3, #2
 800e986:	d81e      	bhi.n	800e9c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	88db      	ldrh	r3, [r3, #6]
 800e98c:	2b02      	cmp	r3, #2
 800e98e:	d004      	beq.n	800e99a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e990:	6839      	ldr	r1, [r7, #0]
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f000 f8a5 	bl	800eae2 <USBD_CtlError>
        break;
 800e998:	e01a      	b.n	800e9d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2201      	movs	r2, #1
 800e99e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d005      	beq.n	800e9b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	f043 0202 	orr.w	r2, r3, #2
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	330c      	adds	r3, #12
 800e9ba:	2202      	movs	r2, #2
 800e9bc:	4619      	mov	r1, r3
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 f90c 	bl	800ebdc <USBD_CtlSendData>
      break;
 800e9c4:	e004      	b.n	800e9d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e9c6:	6839      	ldr	r1, [r7, #0]
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f000 f88a 	bl	800eae2 <USBD_CtlError>
      break;
 800e9ce:	bf00      	nop
  }
}
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	885b      	ldrh	r3, [r3, #2]
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d107      	bne.n	800e9fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f000 f94c 	bl	800ec90 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e9f8:	e013      	b.n	800ea22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	885b      	ldrh	r3, [r3, #2]
 800e9fe:	2b02      	cmp	r3, #2
 800ea00:	d10b      	bne.n	800ea1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	889b      	ldrh	r3, [r3, #4]
 800ea06:	0a1b      	lsrs	r3, r3, #8
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 f93c 	bl	800ec90 <USBD_CtlSendStatus>
}
 800ea18:	e003      	b.n	800ea22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ea1a:	6839      	ldr	r1, [r7, #0]
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f000 f860 	bl	800eae2 <USBD_CtlError>
}
 800ea22:	bf00      	nop
 800ea24:	3708      	adds	r7, #8
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}

0800ea2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea2a:	b580      	push	{r7, lr}
 800ea2c:	b082      	sub	sp, #8
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
 800ea32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	2b02      	cmp	r3, #2
 800ea40:	d80b      	bhi.n	800ea5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	885b      	ldrh	r3, [r3, #2]
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d10c      	bne.n	800ea64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f000 f91c 	bl	800ec90 <USBD_CtlSendStatus>
      }
      break;
 800ea58:	e004      	b.n	800ea64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ea5a:	6839      	ldr	r1, [r7, #0]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 f840 	bl	800eae2 <USBD_CtlError>
      break;
 800ea62:	e000      	b.n	800ea66 <USBD_ClrFeature+0x3c>
      break;
 800ea64:	bf00      	nop
  }
}
 800ea66:	bf00      	nop
 800ea68:	3708      	adds	r7, #8
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ea6e:	b580      	push	{r7, lr}
 800ea70:	b084      	sub	sp, #16
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
 800ea76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	781a      	ldrb	r2, [r3, #0]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	3301      	adds	r3, #1
 800ea88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	781a      	ldrb	r2, [r3, #0]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	3301      	adds	r3, #1
 800ea96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ea98:	68f8      	ldr	r0, [r7, #12]
 800ea9a:	f7ff fa41 	bl	800df20 <SWAPBYTE>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	3301      	adds	r3, #1
 800eab0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	f7ff fa34 	bl	800df20 <SWAPBYTE>
 800eab8:	4603      	mov	r3, r0
 800eaba:	461a      	mov	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	3301      	adds	r3, #1
 800eac4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	3301      	adds	r3, #1
 800eaca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f7ff fa27 	bl	800df20 <SWAPBYTE>
 800ead2:	4603      	mov	r3, r0
 800ead4:	461a      	mov	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	80da      	strh	r2, [r3, #6]
}
 800eada:	bf00      	nop
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}

0800eae2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eae2:	b580      	push	{r7, lr}
 800eae4:	b082      	sub	sp, #8
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
 800eaea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eaec:	2180      	movs	r1, #128	; 0x80
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 fce6 	bl	800f4c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 fce2 	bl	800f4c0 <USBD_LL_StallEP>
}
 800eafc:	bf00      	nop
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b086      	sub	sp, #24
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eb10:	2300      	movs	r3, #0
 800eb12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d042      	beq.n	800eba0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800eb1e:	6938      	ldr	r0, [r7, #16]
 800eb20:	f000 f842 	bl	800eba8 <USBD_GetLen>
 800eb24:	4603      	mov	r3, r0
 800eb26:	3301      	adds	r3, #1
 800eb28:	005b      	lsls	r3, r3, #1
 800eb2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb2e:	d808      	bhi.n	800eb42 <USBD_GetString+0x3e>
 800eb30:	6938      	ldr	r0, [r7, #16]
 800eb32:	f000 f839 	bl	800eba8 <USBD_GetLen>
 800eb36:	4603      	mov	r3, r0
 800eb38:	3301      	adds	r3, #1
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	005b      	lsls	r3, r3, #1
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	e001      	b.n	800eb46 <USBD_GetString+0x42>
 800eb42:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eb4a:	7dfb      	ldrb	r3, [r7, #23]
 800eb4c:	68ba      	ldr	r2, [r7, #8]
 800eb4e:	4413      	add	r3, r2
 800eb50:	687a      	ldr	r2, [r7, #4]
 800eb52:	7812      	ldrb	r2, [r2, #0]
 800eb54:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb56:	7dfb      	ldrb	r3, [r7, #23]
 800eb58:	3301      	adds	r3, #1
 800eb5a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eb5c:	7dfb      	ldrb	r3, [r7, #23]
 800eb5e:	68ba      	ldr	r2, [r7, #8]
 800eb60:	4413      	add	r3, r2
 800eb62:	2203      	movs	r2, #3
 800eb64:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb66:	7dfb      	ldrb	r3, [r7, #23]
 800eb68:	3301      	adds	r3, #1
 800eb6a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eb6c:	e013      	b.n	800eb96 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800eb6e:	7dfb      	ldrb	r3, [r7, #23]
 800eb70:	68ba      	ldr	r2, [r7, #8]
 800eb72:	4413      	add	r3, r2
 800eb74:	693a      	ldr	r2, [r7, #16]
 800eb76:	7812      	ldrb	r2, [r2, #0]
 800eb78:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	613b      	str	r3, [r7, #16]
    idx++;
 800eb80:	7dfb      	ldrb	r3, [r7, #23]
 800eb82:	3301      	adds	r3, #1
 800eb84:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eb86:	7dfb      	ldrb	r3, [r7, #23]
 800eb88:	68ba      	ldr	r2, [r7, #8]
 800eb8a:	4413      	add	r3, r2
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	701a      	strb	r2, [r3, #0]
    idx++;
 800eb90:	7dfb      	ldrb	r3, [r7, #23]
 800eb92:	3301      	adds	r3, #1
 800eb94:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d1e7      	bne.n	800eb6e <USBD_GetString+0x6a>
 800eb9e:	e000      	b.n	800eba2 <USBD_GetString+0x9e>
    return;
 800eba0:	bf00      	nop
  }
}
 800eba2:	3718      	adds	r7, #24
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b085      	sub	sp, #20
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ebb8:	e005      	b.n	800ebc6 <USBD_GetLen+0x1e>
  {
    len++;
 800ebba:	7bfb      	ldrb	r3, [r7, #15]
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d1f5      	bne.n	800ebba <USBD_GetLen+0x12>
  }

  return len;
 800ebce:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3714      	adds	r7, #20
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr

0800ebdc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2202      	movs	r2, #2
 800ebec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	68ba      	ldr	r2, [r7, #8]
 800ec00:	2100      	movs	r1, #0
 800ec02:	68f8      	ldr	r0, [r7, #12]
 800ec04:	f000 fce5 	bl	800f5d2 <USBD_LL_Transmit>

  return USBD_OK;
 800ec08:	2300      	movs	r3, #0
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3710      	adds	r7, #16
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}

0800ec12 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ec12:	b580      	push	{r7, lr}
 800ec14:	b084      	sub	sp, #16
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	60f8      	str	r0, [r7, #12]
 800ec1a:	60b9      	str	r1, [r7, #8]
 800ec1c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	68ba      	ldr	r2, [r7, #8]
 800ec22:	2100      	movs	r1, #0
 800ec24:	68f8      	ldr	r0, [r7, #12]
 800ec26:	f000 fcd4 	bl	800f5d2 <USBD_LL_Transmit>

  return USBD_OK;
 800ec2a:	2300      	movs	r3, #0
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3710      	adds	r7, #16
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b084      	sub	sp, #16
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2203      	movs	r2, #3
 800ec44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	68ba      	ldr	r2, [r7, #8]
 800ec5c:	2100      	movs	r1, #0
 800ec5e:	68f8      	ldr	r0, [r7, #12]
 800ec60:	f000 fcd8 	bl	800f614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec64:	2300      	movs	r3, #0
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3710      	adds	r7, #16
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b084      	sub	sp, #16
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	60f8      	str	r0, [r7, #12]
 800ec76:	60b9      	str	r1, [r7, #8]
 800ec78:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	68ba      	ldr	r2, [r7, #8]
 800ec7e:	2100      	movs	r1, #0
 800ec80:	68f8      	ldr	r0, [r7, #12]
 800ec82:	f000 fcc7 	bl	800f614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec86:	2300      	movs	r3, #0
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3710      	adds	r7, #16
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2204      	movs	r2, #4
 800ec9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800eca0:	2300      	movs	r3, #0
 800eca2:	2200      	movs	r2, #0
 800eca4:	2100      	movs	r1, #0
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f000 fc93 	bl	800f5d2 <USBD_LL_Transmit>

  return USBD_OK;
 800ecac:	2300      	movs	r3, #0
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3708      	adds	r7, #8
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ecb6:	b580      	push	{r7, lr}
 800ecb8:	b082      	sub	sp, #8
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2205      	movs	r2, #5
 800ecc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	2200      	movs	r2, #0
 800ecca:	2100      	movs	r1, #0
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 fca1 	bl	800f614 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ecd2:	2300      	movs	r3, #0
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3708      	adds	r7, #8
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800ece0:	2201      	movs	r2, #1
 800ece2:	4913      	ldr	r1, [pc, #76]	; (800ed30 <MX_USB_DEVICE_Init+0x54>)
 800ece4:	4813      	ldr	r0, [pc, #76]	; (800ed34 <MX_USB_DEVICE_Init+0x58>)
 800ece6:	f7fe fcf5 	bl	800d6d4 <USBD_Init>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d001      	beq.n	800ecf4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ecf0:	f7f2 fa6d 	bl	80011ce <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800ecf4:	4910      	ldr	r1, [pc, #64]	; (800ed38 <MX_USB_DEVICE_Init+0x5c>)
 800ecf6:	480f      	ldr	r0, [pc, #60]	; (800ed34 <MX_USB_DEVICE_Init+0x58>)
 800ecf8:	f7fe fd1c 	bl	800d734 <USBD_RegisterClass>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d001      	beq.n	800ed06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ed02:	f7f2 fa64 	bl	80011ce <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800ed06:	490d      	ldr	r1, [pc, #52]	; (800ed3c <MX_USB_DEVICE_Init+0x60>)
 800ed08:	480a      	ldr	r0, [pc, #40]	; (800ed34 <MX_USB_DEVICE_Init+0x58>)
 800ed0a:	f7fe fc13 	bl	800d534 <USBD_CDC_RegisterInterface>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d001      	beq.n	800ed18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ed14:	f7f2 fa5b 	bl	80011ce <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800ed18:	4806      	ldr	r0, [pc, #24]	; (800ed34 <MX_USB_DEVICE_Init+0x58>)
 800ed1a:	f7fe fd41 	bl	800d7a0 <USBD_Start>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d001      	beq.n	800ed28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ed24:	f7f2 fa53 	bl	80011ce <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800ed28:	f7f7 fc94 	bl	8006654 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ed2c:	bf00      	nop
 800ed2e:	bd80      	pop	{r7, pc}
 800ed30:	240000b0 	.word	0x240000b0
 800ed34:	24000504 	.word	0x24000504
 800ed38:	2400001c 	.word	0x2400001c
 800ed3c:	2400009c 	.word	0x2400009c

0800ed40 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800ed44:	2200      	movs	r2, #0
 800ed46:	4905      	ldr	r1, [pc, #20]	; (800ed5c <CDC_Init_HS+0x1c>)
 800ed48:	4805      	ldr	r0, [pc, #20]	; (800ed60 <CDC_Init_HS+0x20>)
 800ed4a:	f7fe fc0d 	bl	800d568 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800ed4e:	4905      	ldr	r1, [pc, #20]	; (800ed64 <CDC_Init_HS+0x24>)
 800ed50:	4803      	ldr	r0, [pc, #12]	; (800ed60 <CDC_Init_HS+0x20>)
 800ed52:	f7fe fc2b 	bl	800d5ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ed56:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	bd80      	pop	{r7, pc}
 800ed5c:	24000fe0 	.word	0x24000fe0
 800ed60:	24000504 	.word	0x24000504
 800ed64:	240007e0 	.word	0x240007e0

0800ed68 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800ed68:	b480      	push	{r7}
 800ed6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800ed6c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b083      	sub	sp, #12
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	4603      	mov	r3, r0
 800ed80:	6039      	str	r1, [r7, #0]
 800ed82:	71fb      	strb	r3, [r7, #7]
 800ed84:	4613      	mov	r3, r2
 800ed86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ed88:	79fb      	ldrb	r3, [r7, #7]
 800ed8a:	2b23      	cmp	r3, #35	; 0x23
 800ed8c:	d84a      	bhi.n	800ee24 <CDC_Control_HS+0xac>
 800ed8e:	a201      	add	r2, pc, #4	; (adr r2, 800ed94 <CDC_Control_HS+0x1c>)
 800ed90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed94:	0800ee25 	.word	0x0800ee25
 800ed98:	0800ee25 	.word	0x0800ee25
 800ed9c:	0800ee25 	.word	0x0800ee25
 800eda0:	0800ee25 	.word	0x0800ee25
 800eda4:	0800ee25 	.word	0x0800ee25
 800eda8:	0800ee25 	.word	0x0800ee25
 800edac:	0800ee25 	.word	0x0800ee25
 800edb0:	0800ee25 	.word	0x0800ee25
 800edb4:	0800ee25 	.word	0x0800ee25
 800edb8:	0800ee25 	.word	0x0800ee25
 800edbc:	0800ee25 	.word	0x0800ee25
 800edc0:	0800ee25 	.word	0x0800ee25
 800edc4:	0800ee25 	.word	0x0800ee25
 800edc8:	0800ee25 	.word	0x0800ee25
 800edcc:	0800ee25 	.word	0x0800ee25
 800edd0:	0800ee25 	.word	0x0800ee25
 800edd4:	0800ee25 	.word	0x0800ee25
 800edd8:	0800ee25 	.word	0x0800ee25
 800eddc:	0800ee25 	.word	0x0800ee25
 800ede0:	0800ee25 	.word	0x0800ee25
 800ede4:	0800ee25 	.word	0x0800ee25
 800ede8:	0800ee25 	.word	0x0800ee25
 800edec:	0800ee25 	.word	0x0800ee25
 800edf0:	0800ee25 	.word	0x0800ee25
 800edf4:	0800ee25 	.word	0x0800ee25
 800edf8:	0800ee25 	.word	0x0800ee25
 800edfc:	0800ee25 	.word	0x0800ee25
 800ee00:	0800ee25 	.word	0x0800ee25
 800ee04:	0800ee25 	.word	0x0800ee25
 800ee08:	0800ee25 	.word	0x0800ee25
 800ee0c:	0800ee25 	.word	0x0800ee25
 800ee10:	0800ee25 	.word	0x0800ee25
 800ee14:	0800ee25 	.word	0x0800ee25
 800ee18:	0800ee25 	.word	0x0800ee25
 800ee1c:	0800ee25 	.word	0x0800ee25
 800ee20:	0800ee25 	.word	0x0800ee25
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ee24:	bf00      	nop
  }

  return (USBD_OK);
 800ee26:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	370c      	adds	r7, #12
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr

0800ee34 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800ee3e:	6879      	ldr	r1, [r7, #4]
 800ee40:	4805      	ldr	r0, [pc, #20]	; (800ee58 <CDC_Receive_HS+0x24>)
 800ee42:	f7fe fbb3 	bl	800d5ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800ee46:	4804      	ldr	r0, [pc, #16]	; (800ee58 <CDC_Receive_HS+0x24>)
 800ee48:	f7fe fc0e 	bl	800d668 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ee4c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3708      	adds	r7, #8
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	24000504 	.word	0x24000504

0800ee5c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b084      	sub	sp, #16
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	460b      	mov	r3, r1
 800ee66:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800ee6c:	4b0d      	ldr	r3, [pc, #52]	; (800eea4 <CDC_Transmit_HS+0x48>)
 800ee6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee72:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d001      	beq.n	800ee82 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800ee7e:	2301      	movs	r3, #1
 800ee80:	e00b      	b.n	800ee9a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800ee82:	887b      	ldrh	r3, [r7, #2]
 800ee84:	461a      	mov	r2, r3
 800ee86:	6879      	ldr	r1, [r7, #4]
 800ee88:	4806      	ldr	r0, [pc, #24]	; (800eea4 <CDC_Transmit_HS+0x48>)
 800ee8a:	f7fe fb6d 	bl	800d568 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800ee8e:	4805      	ldr	r0, [pc, #20]	; (800eea4 <CDC_Transmit_HS+0x48>)
 800ee90:	f7fe fbaa 	bl	800d5e8 <USBD_CDC_TransmitPacket>
 800ee94:	4603      	mov	r3, r0
 800ee96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800ee98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3710      	adds	r7, #16
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	24000504 	.word	0x24000504

0800eea8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b087      	sub	sp, #28
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	4613      	mov	r3, r2
 800eeb4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800eeba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	371c      	adds	r7, #28
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr
	...

0800eecc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eecc:	b480      	push	{r7}
 800eece:	b083      	sub	sp, #12
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	4603      	mov	r3, r0
 800eed4:	6039      	str	r1, [r7, #0]
 800eed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	2212      	movs	r2, #18
 800eedc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800eede:	4b03      	ldr	r3, [pc, #12]	; (800eeec <USBD_HS_DeviceDescriptor+0x20>)
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	370c      	adds	r7, #12
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr
 800eeec:	240000cc 	.word	0x240000cc

0800eef0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eef0:	b480      	push	{r7}
 800eef2:	b083      	sub	sp, #12
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	4603      	mov	r3, r0
 800eef8:	6039      	str	r1, [r7, #0]
 800eefa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	2204      	movs	r2, #4
 800ef00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ef02:	4b03      	ldr	r3, [pc, #12]	; (800ef10 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	370c      	adds	r7, #12
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr
 800ef10:	240000e0 	.word	0x240000e0

0800ef14 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	6039      	str	r1, [r7, #0]
 800ef1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef20:	79fb      	ldrb	r3, [r7, #7]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d105      	bne.n	800ef32 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ef26:	683a      	ldr	r2, [r7, #0]
 800ef28:	4907      	ldr	r1, [pc, #28]	; (800ef48 <USBD_HS_ProductStrDescriptor+0x34>)
 800ef2a:	4808      	ldr	r0, [pc, #32]	; (800ef4c <USBD_HS_ProductStrDescriptor+0x38>)
 800ef2c:	f7ff fdea 	bl	800eb04 <USBD_GetString>
 800ef30:	e004      	b.n	800ef3c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ef32:	683a      	ldr	r2, [r7, #0]
 800ef34:	4904      	ldr	r1, [pc, #16]	; (800ef48 <USBD_HS_ProductStrDescriptor+0x34>)
 800ef36:	4805      	ldr	r0, [pc, #20]	; (800ef4c <USBD_HS_ProductStrDescriptor+0x38>)
 800ef38:	f7ff fde4 	bl	800eb04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef3c:	4b02      	ldr	r3, [pc, #8]	; (800ef48 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3708      	adds	r7, #8
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	240017e0 	.word	0x240017e0
 800ef4c:	0800f784 	.word	0x0800f784

0800ef50 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	4603      	mov	r3, r0
 800ef58:	6039      	str	r1, [r7, #0]
 800ef5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ef5c:	683a      	ldr	r2, [r7, #0]
 800ef5e:	4904      	ldr	r1, [pc, #16]	; (800ef70 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ef60:	4804      	ldr	r0, [pc, #16]	; (800ef74 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ef62:	f7ff fdcf 	bl	800eb04 <USBD_GetString>
  return USBD_StrDesc;
 800ef66:	4b02      	ldr	r3, [pc, #8]	; (800ef70 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3708      	adds	r7, #8
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	240017e0 	.word	0x240017e0
 800ef74:	0800f79c 	.word	0x0800f79c

0800ef78 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	4603      	mov	r3, r0
 800ef80:	6039      	str	r1, [r7, #0]
 800ef82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	221a      	movs	r2, #26
 800ef88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ef8a:	f000 f843 	bl	800f014 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ef8e:	4b02      	ldr	r3, [pc, #8]	; (800ef98 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3708      	adds	r7, #8
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	240000e4 	.word	0x240000e4

0800ef9c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	4603      	mov	r3, r0
 800efa4:	6039      	str	r1, [r7, #0]
 800efa6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800efa8:	79fb      	ldrb	r3, [r7, #7]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d105      	bne.n	800efba <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800efae:	683a      	ldr	r2, [r7, #0]
 800efb0:	4907      	ldr	r1, [pc, #28]	; (800efd0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800efb2:	4808      	ldr	r0, [pc, #32]	; (800efd4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800efb4:	f7ff fda6 	bl	800eb04 <USBD_GetString>
 800efb8:	e004      	b.n	800efc4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800efba:	683a      	ldr	r2, [r7, #0]
 800efbc:	4904      	ldr	r1, [pc, #16]	; (800efd0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800efbe:	4805      	ldr	r0, [pc, #20]	; (800efd4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800efc0:	f7ff fda0 	bl	800eb04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800efc4:	4b02      	ldr	r3, [pc, #8]	; (800efd0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3708      	adds	r7, #8
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	bf00      	nop
 800efd0:	240017e0 	.word	0x240017e0
 800efd4:	0800f7b0 	.word	0x0800f7b0

0800efd8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b082      	sub	sp, #8
 800efdc:	af00      	add	r7, sp, #0
 800efde:	4603      	mov	r3, r0
 800efe0:	6039      	str	r1, [r7, #0]
 800efe2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800efe4:	79fb      	ldrb	r3, [r7, #7]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d105      	bne.n	800eff6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800efea:	683a      	ldr	r2, [r7, #0]
 800efec:	4907      	ldr	r1, [pc, #28]	; (800f00c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800efee:	4808      	ldr	r0, [pc, #32]	; (800f010 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800eff0:	f7ff fd88 	bl	800eb04 <USBD_GetString>
 800eff4:	e004      	b.n	800f000 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800eff6:	683a      	ldr	r2, [r7, #0]
 800eff8:	4904      	ldr	r1, [pc, #16]	; (800f00c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800effa:	4805      	ldr	r0, [pc, #20]	; (800f010 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800effc:	f7ff fd82 	bl	800eb04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f000:	4b02      	ldr	r3, [pc, #8]	; (800f00c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800f002:	4618      	mov	r0, r3
 800f004:	3708      	adds	r7, #8
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	240017e0 	.word	0x240017e0
 800f010:	0800f7bc 	.word	0x0800f7bc

0800f014 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f01a:	4b0f      	ldr	r3, [pc, #60]	; (800f058 <Get_SerialNum+0x44>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f020:	4b0e      	ldr	r3, [pc, #56]	; (800f05c <Get_SerialNum+0x48>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f026:	4b0e      	ldr	r3, [pc, #56]	; (800f060 <Get_SerialNum+0x4c>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	4413      	add	r3, r2
 800f032:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d009      	beq.n	800f04e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f03a:	2208      	movs	r2, #8
 800f03c:	4909      	ldr	r1, [pc, #36]	; (800f064 <Get_SerialNum+0x50>)
 800f03e:	68f8      	ldr	r0, [r7, #12]
 800f040:	f000 f814 	bl	800f06c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f044:	2204      	movs	r2, #4
 800f046:	4908      	ldr	r1, [pc, #32]	; (800f068 <Get_SerialNum+0x54>)
 800f048:	68b8      	ldr	r0, [r7, #8]
 800f04a:	f000 f80f 	bl	800f06c <IntToUnicode>
  }
}
 800f04e:	bf00      	nop
 800f050:	3710      	adds	r7, #16
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
 800f056:	bf00      	nop
 800f058:	1ff1e800 	.word	0x1ff1e800
 800f05c:	1ff1e804 	.word	0x1ff1e804
 800f060:	1ff1e808 	.word	0x1ff1e808
 800f064:	240000e6 	.word	0x240000e6
 800f068:	240000f6 	.word	0x240000f6

0800f06c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b087      	sub	sp, #28
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	4613      	mov	r3, r2
 800f078:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f07a:	2300      	movs	r3, #0
 800f07c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f07e:	2300      	movs	r3, #0
 800f080:	75fb      	strb	r3, [r7, #23]
 800f082:	e027      	b.n	800f0d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	0f1b      	lsrs	r3, r3, #28
 800f088:	2b09      	cmp	r3, #9
 800f08a:	d80b      	bhi.n	800f0a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	0f1b      	lsrs	r3, r3, #28
 800f090:	b2da      	uxtb	r2, r3
 800f092:	7dfb      	ldrb	r3, [r7, #23]
 800f094:	005b      	lsls	r3, r3, #1
 800f096:	4619      	mov	r1, r3
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	440b      	add	r3, r1
 800f09c:	3230      	adds	r2, #48	; 0x30
 800f09e:	b2d2      	uxtb	r2, r2
 800f0a0:	701a      	strb	r2, [r3, #0]
 800f0a2:	e00a      	b.n	800f0ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	0f1b      	lsrs	r3, r3, #28
 800f0a8:	b2da      	uxtb	r2, r3
 800f0aa:	7dfb      	ldrb	r3, [r7, #23]
 800f0ac:	005b      	lsls	r3, r3, #1
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	440b      	add	r3, r1
 800f0b4:	3237      	adds	r2, #55	; 0x37
 800f0b6:	b2d2      	uxtb	r2, r2
 800f0b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	011b      	lsls	r3, r3, #4
 800f0be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f0c0:	7dfb      	ldrb	r3, [r7, #23]
 800f0c2:	005b      	lsls	r3, r3, #1
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	68ba      	ldr	r2, [r7, #8]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f0ce:	7dfb      	ldrb	r3, [r7, #23]
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	75fb      	strb	r3, [r7, #23]
 800f0d4:	7dfa      	ldrb	r2, [r7, #23]
 800f0d6:	79fb      	ldrb	r3, [r7, #7]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d3d3      	bcc.n	800f084 <IntToUnicode+0x18>
  }
}
 800f0dc:	bf00      	nop
 800f0de:	bf00      	nop
 800f0e0:	371c      	adds	r7, #28
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e8:	4770      	bx	lr
	...

0800f0ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b0b2      	sub	sp, #200	; 0xc8
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f0f4:	f107 0310 	add.w	r3, r7, #16
 800f0f8:	22b8      	movs	r2, #184	; 0xb8
 800f0fa:	2100      	movs	r1, #0
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f000 fb01 	bl	800f704 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	4a1a      	ldr	r2, [pc, #104]	; (800f170 <HAL_PCD_MspInit+0x84>)
 800f108:	4293      	cmp	r3, r2
 800f10a:	d12c      	bne.n	800f166 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f10c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800f110:	f04f 0300 	mov.w	r3, #0
 800f114:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f118:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800f11c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f120:	f107 0310 	add.w	r3, r7, #16
 800f124:	4618      	mov	r0, r3
 800f126:	f7f8 f9f5 	bl	8007514 <HAL_RCCEx_PeriphCLKConfig>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d001      	beq.n	800f134 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 800f130:	f7f2 f84d 	bl	80011ce <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f134:	f7f7 fa8e 	bl	8006654 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800f138:	4b0e      	ldr	r3, [pc, #56]	; (800f174 <HAL_PCD_MspInit+0x88>)
 800f13a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f13e:	4a0d      	ldr	r2, [pc, #52]	; (800f174 <HAL_PCD_MspInit+0x88>)
 800f140:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f144:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f148:	4b0a      	ldr	r3, [pc, #40]	; (800f174 <HAL_PCD_MspInit+0x88>)
 800f14a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f14e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f152:	60fb      	str	r3, [r7, #12]
 800f154:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800f156:	2200      	movs	r2, #0
 800f158:	2100      	movs	r1, #0
 800f15a:	204d      	movs	r0, #77	; 0x4d
 800f15c:	f7f2 fe25 	bl	8001daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800f160:	204d      	movs	r0, #77	; 0x4d
 800f162:	f7f2 fe3c 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800f166:	bf00      	nop
 800f168:	37c8      	adds	r7, #200	; 0xc8
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	40040000 	.word	0x40040000
 800f174:	58024400 	.word	0x58024400

0800f178 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800f18c:	4619      	mov	r1, r3
 800f18e:	4610      	mov	r0, r2
 800f190:	f7fe fb53 	bl	800d83a <USBD_LL_SetupStage>
}
 800f194:	bf00      	nop
 800f196:	3708      	adds	r7, #8
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f1ae:	78fa      	ldrb	r2, [r7, #3]
 800f1b0:	6879      	ldr	r1, [r7, #4]
 800f1b2:	4613      	mov	r3, r2
 800f1b4:	00db      	lsls	r3, r3, #3
 800f1b6:	4413      	add	r3, r2
 800f1b8:	009b      	lsls	r3, r3, #2
 800f1ba:	440b      	add	r3, r1
 800f1bc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	78fb      	ldrb	r3, [r7, #3]
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	f7fe fb8d 	bl	800d8e4 <USBD_LL_DataOutStage>
}
 800f1ca:	bf00      	nop
 800f1cc:	3708      	adds	r7, #8
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}

0800f1d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b082      	sub	sp, #8
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
 800f1da:	460b      	mov	r3, r1
 800f1dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f1e4:	78fa      	ldrb	r2, [r7, #3]
 800f1e6:	6879      	ldr	r1, [r7, #4]
 800f1e8:	4613      	mov	r3, r2
 800f1ea:	00db      	lsls	r3, r3, #3
 800f1ec:	4413      	add	r3, r2
 800f1ee:	009b      	lsls	r3, r3, #2
 800f1f0:	440b      	add	r3, r1
 800f1f2:	3320      	adds	r3, #32
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	78fb      	ldrb	r3, [r7, #3]
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	f7fe fc26 	bl	800da4a <USBD_LL_DataInStage>
}
 800f1fe:	bf00      	nop
 800f200:	3708      	adds	r7, #8
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f206:	b580      	push	{r7, lr}
 800f208:	b082      	sub	sp, #8
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f214:	4618      	mov	r0, r3
 800f216:	f7fe fd60 	bl	800dcda <USBD_LL_SOF>
}
 800f21a:	bf00      	nop
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b084      	sub	sp, #16
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f22a:	2301      	movs	r3, #1
 800f22c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	79db      	ldrb	r3, [r3, #7]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d102      	bne.n	800f23c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f236:	2300      	movs	r3, #0
 800f238:	73fb      	strb	r3, [r7, #15]
 800f23a:	e008      	b.n	800f24e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	79db      	ldrb	r3, [r3, #7]
 800f240:	2b02      	cmp	r3, #2
 800f242:	d102      	bne.n	800f24a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f244:	2301      	movs	r3, #1
 800f246:	73fb      	strb	r3, [r7, #15]
 800f248:	e001      	b.n	800f24e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f24a:	f7f1 ffc0 	bl	80011ce <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f254:	7bfa      	ldrb	r2, [r7, #15]
 800f256:	4611      	mov	r1, r2
 800f258:	4618      	mov	r0, r3
 800f25a:	f7fe fcfa 	bl	800dc52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f264:	4618      	mov	r0, r3
 800f266:	f7fe fca2 	bl	800dbae <USBD_LL_Reset>
}
 800f26a:	bf00      	nop
 800f26c:	3710      	adds	r7, #16
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}
	...

0800f274 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f282:	4618      	mov	r0, r3
 800f284:	f7fe fcf5 	bl	800dc72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	687a      	ldr	r2, [r7, #4]
 800f294:	6812      	ldr	r2, [r2, #0]
 800f296:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f29a:	f043 0301 	orr.w	r3, r3, #1
 800f29e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	7adb      	ldrb	r3, [r3, #11]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d005      	beq.n	800f2b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f2a8:	4b04      	ldr	r3, [pc, #16]	; (800f2bc <HAL_PCD_SuspendCallback+0x48>)
 800f2aa:	691b      	ldr	r3, [r3, #16]
 800f2ac:	4a03      	ldr	r2, [pc, #12]	; (800f2bc <HAL_PCD_SuspendCallback+0x48>)
 800f2ae:	f043 0306 	orr.w	r3, r3, #6
 800f2b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f2b4:	bf00      	nop
 800f2b6:	3708      	adds	r7, #8
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	e000ed00 	.word	0xe000ed00

0800f2c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fe fceb 	bl	800dcaa <USBD_LL_Resume>
}
 800f2d4:	bf00      	nop
 800f2d6:	3708      	adds	r7, #8
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}

0800f2dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b082      	sub	sp, #8
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f2ee:	78fa      	ldrb	r2, [r7, #3]
 800f2f0:	4611      	mov	r1, r2
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fe fd43 	bl	800dd7e <USBD_LL_IsoOUTIncomplete>
}
 800f2f8:	bf00      	nop
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b082      	sub	sp, #8
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	460b      	mov	r3, r1
 800f30a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f312:	78fa      	ldrb	r2, [r7, #3]
 800f314:	4611      	mov	r1, r2
 800f316:	4618      	mov	r0, r3
 800f318:	f7fe fcff 	bl	800dd1a <USBD_LL_IsoINIncomplete>
}
 800f31c:	bf00      	nop
 800f31e:	3708      	adds	r7, #8
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f332:	4618      	mov	r0, r3
 800f334:	f7fe fd55 	bl	800dde2 <USBD_LL_DevConnected>
}
 800f338:	bf00      	nop
 800f33a:	3708      	adds	r7, #8
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b082      	sub	sp, #8
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f34e:	4618      	mov	r0, r3
 800f350:	f7fe fd52 	bl	800ddf8 <USBD_LL_DevDisconnected>
}
 800f354:	bf00      	nop
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}

0800f35c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d140      	bne.n	800f3ee <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800f36c:	4a22      	ldr	r2, [pc, #136]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	4a20      	ldr	r2, [pc, #128]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f378:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800f37c:	4b1e      	ldr	r3, [pc, #120]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f37e:	4a1f      	ldr	r2, [pc, #124]	; (800f3fc <USBD_LL_Init+0xa0>)
 800f380:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800f382:	4b1d      	ldr	r3, [pc, #116]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f384:	2209      	movs	r2, #9
 800f386:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800f388:	4b1b      	ldr	r3, [pc, #108]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f38a:	2202      	movs	r2, #2
 800f38c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800f38e:	4b1a      	ldr	r3, [pc, #104]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f390:	2200      	movs	r2, #0
 800f392:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800f394:	4b18      	ldr	r3, [pc, #96]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f396:	2202      	movs	r2, #2
 800f398:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800f39a:	4b17      	ldr	r3, [pc, #92]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f39c:	2200      	movs	r2, #0
 800f39e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800f3a0:	4b15      	ldr	r3, [pc, #84]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800f3a6:	4b14      	ldr	r3, [pc, #80]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800f3ac:	4b12      	ldr	r3, [pc, #72]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800f3b2:	4b11      	ldr	r3, [pc, #68]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800f3b8:	4b0f      	ldr	r3, [pc, #60]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800f3be:	480e      	ldr	r0, [pc, #56]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f3c0:	f7f5 fe70 	bl	80050a4 <HAL_PCD_Init>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d001      	beq.n	800f3ce <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f3ca:	f7f1 ff00 	bl	80011ce <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800f3ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f3d2:	4809      	ldr	r0, [pc, #36]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f3d4:	f7f7 f8c3 	bl	800655e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800f3d8:	2280      	movs	r2, #128	; 0x80
 800f3da:	2100      	movs	r1, #0
 800f3dc:	4806      	ldr	r0, [pc, #24]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f3de:	f7f7 f877 	bl	80064d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800f3e2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800f3e6:	2101      	movs	r1, #1
 800f3e8:	4803      	ldr	r0, [pc, #12]	; (800f3f8 <USBD_LL_Init+0x9c>)
 800f3ea:	f7f7 f871 	bl	80064d0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800f3ee:	2300      	movs	r3, #0
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3708      	adds	r7, #8
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	240019e0 	.word	0x240019e0
 800f3fc:	40040000 	.word	0x40040000

0800f400 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f408:	2300      	movs	r3, #0
 800f40a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f40c:	2300      	movs	r3, #0
 800f40e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f416:	4618      	mov	r0, r3
 800f418:	f7f5 ff50 	bl	80052bc <HAL_PCD_Start>
 800f41c:	4603      	mov	r3, r0
 800f41e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f420:	7bfb      	ldrb	r3, [r7, #15]
 800f422:	4618      	mov	r0, r3
 800f424:	f000 f942 	bl	800f6ac <USBD_Get_USB_Status>
 800f428:	4603      	mov	r3, r0
 800f42a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f42c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3710      	adds	r7, #16
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f436:	b580      	push	{r7, lr}
 800f438:	b084      	sub	sp, #16
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
 800f43e:	4608      	mov	r0, r1
 800f440:	4611      	mov	r1, r2
 800f442:	461a      	mov	r2, r3
 800f444:	4603      	mov	r3, r0
 800f446:	70fb      	strb	r3, [r7, #3]
 800f448:	460b      	mov	r3, r1
 800f44a:	70bb      	strb	r3, [r7, #2]
 800f44c:	4613      	mov	r3, r2
 800f44e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f450:	2300      	movs	r3, #0
 800f452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f454:	2300      	movs	r3, #0
 800f456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f45e:	78bb      	ldrb	r3, [r7, #2]
 800f460:	883a      	ldrh	r2, [r7, #0]
 800f462:	78f9      	ldrb	r1, [r7, #3]
 800f464:	f7f6 fc51 	bl	8005d0a <HAL_PCD_EP_Open>
 800f468:	4603      	mov	r3, r0
 800f46a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f46c:	7bfb      	ldrb	r3, [r7, #15]
 800f46e:	4618      	mov	r0, r3
 800f470:	f000 f91c 	bl	800f6ac <USBD_Get_USB_Status>
 800f474:	4603      	mov	r3, r0
 800f476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f478:	7bbb      	ldrb	r3, [r7, #14]
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f482:	b580      	push	{r7, lr}
 800f484:	b084      	sub	sp, #16
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
 800f48a:	460b      	mov	r3, r1
 800f48c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f48e:	2300      	movs	r3, #0
 800f490:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f492:	2300      	movs	r3, #0
 800f494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f49c:	78fa      	ldrb	r2, [r7, #3]
 800f49e:	4611      	mov	r1, r2
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7f6 fc9a 	bl	8005dda <HAL_PCD_EP_Close>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4aa:	7bfb      	ldrb	r3, [r7, #15]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f000 f8fd 	bl	800f6ac <USBD_Get_USB_Status>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3710      	adds	r7, #16
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}

0800f4c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b084      	sub	sp, #16
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f4da:	78fa      	ldrb	r2, [r7, #3]
 800f4dc:	4611      	mov	r1, r2
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7f6 fd52 	bl	8005f88 <HAL_PCD_EP_SetStall>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4e8:	7bfb      	ldrb	r3, [r7, #15]
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f000 f8de 	bl	800f6ac <USBD_Get_USB_Status>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3710      	adds	r7, #16
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b084      	sub	sp, #16
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
 800f506:	460b      	mov	r3, r1
 800f508:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f50a:	2300      	movs	r3, #0
 800f50c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f50e:	2300      	movs	r3, #0
 800f510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f518:	78fa      	ldrb	r2, [r7, #3]
 800f51a:	4611      	mov	r1, r2
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7f6 fd96 	bl	800604e <HAL_PCD_EP_ClrStall>
 800f522:	4603      	mov	r3, r0
 800f524:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f526:	7bfb      	ldrb	r3, [r7, #15]
 800f528:	4618      	mov	r0, r3
 800f52a:	f000 f8bf 	bl	800f6ac <USBD_Get_USB_Status>
 800f52e:	4603      	mov	r3, r0
 800f530:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f532:	7bbb      	ldrb	r3, [r7, #14]
}
 800f534:	4618      	mov	r0, r3
 800f536:	3710      	adds	r7, #16
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}

0800f53c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f53c:	b480      	push	{r7}
 800f53e:	b085      	sub	sp, #20
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	460b      	mov	r3, r1
 800f546:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f54e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f554:	2b00      	cmp	r3, #0
 800f556:	da0b      	bge.n	800f570 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f558:	78fb      	ldrb	r3, [r7, #3]
 800f55a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f55e:	68f9      	ldr	r1, [r7, #12]
 800f560:	4613      	mov	r3, r2
 800f562:	00db      	lsls	r3, r3, #3
 800f564:	4413      	add	r3, r2
 800f566:	009b      	lsls	r3, r3, #2
 800f568:	440b      	add	r3, r1
 800f56a:	3316      	adds	r3, #22
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	e00b      	b.n	800f588 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f570:	78fb      	ldrb	r3, [r7, #3]
 800f572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f576:	68f9      	ldr	r1, [r7, #12]
 800f578:	4613      	mov	r3, r2
 800f57a:	00db      	lsls	r3, r3, #3
 800f57c:	4413      	add	r3, r2
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	440b      	add	r3, r1
 800f582:	f203 2356 	addw	r3, r3, #598	; 0x256
 800f586:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3714      	adds	r7, #20
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr

0800f594 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	460b      	mov	r3, r1
 800f59e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f5ae:	78fa      	ldrb	r2, [r7, #3]
 800f5b0:	4611      	mov	r1, r2
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7f6 fb85 	bl	8005cc2 <HAL_PCD_SetAddress>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5bc:	7bfb      	ldrb	r3, [r7, #15]
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f000 f874 	bl	800f6ac <USBD_Get_USB_Status>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}

0800f5d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5d2:	b580      	push	{r7, lr}
 800f5d4:	b086      	sub	sp, #24
 800f5d6:	af00      	add	r7, sp, #0
 800f5d8:	60f8      	str	r0, [r7, #12]
 800f5da:	607a      	str	r2, [r7, #4]
 800f5dc:	603b      	str	r3, [r7, #0]
 800f5de:	460b      	mov	r3, r1
 800f5e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f5f0:	7af9      	ldrb	r1, [r7, #11]
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	f7f6 fc8d 	bl	8005f14 <HAL_PCD_EP_Transmit>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5fe:	7dfb      	ldrb	r3, [r7, #23]
 800f600:	4618      	mov	r0, r3
 800f602:	f000 f853 	bl	800f6ac <USBD_Get_USB_Status>
 800f606:	4603      	mov	r3, r0
 800f608:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f60a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3718      	adds	r7, #24
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b086      	sub	sp, #24
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	607a      	str	r2, [r7, #4]
 800f61e:	603b      	str	r3, [r7, #0]
 800f620:	460b      	mov	r3, r1
 800f622:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f624:	2300      	movs	r3, #0
 800f626:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f628:	2300      	movs	r3, #0
 800f62a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f632:	7af9      	ldrb	r1, [r7, #11]
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	f7f6 fc19 	bl	8005e6e <HAL_PCD_EP_Receive>
 800f63c:	4603      	mov	r3, r0
 800f63e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f640:	7dfb      	ldrb	r3, [r7, #23]
 800f642:	4618      	mov	r0, r3
 800f644:	f000 f832 	bl	800f6ac <USBD_Get_USB_Status>
 800f648:	4603      	mov	r3, r0
 800f64a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f64c:	7dbb      	ldrb	r3, [r7, #22]
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3718      	adds	r7, #24
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}

0800f656 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f656:	b580      	push	{r7, lr}
 800f658:	b082      	sub	sp, #8
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	6078      	str	r0, [r7, #4]
 800f65e:	460b      	mov	r3, r1
 800f660:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f668:	78fa      	ldrb	r2, [r7, #3]
 800f66a:	4611      	mov	r1, r2
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7f6 fc39 	bl	8005ee4 <HAL_PCD_EP_GetRxCount>
 800f672:	4603      	mov	r3, r0
}
 800f674:	4618      	mov	r0, r3
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f684:	4b03      	ldr	r3, [pc, #12]	; (800f694 <USBD_static_malloc+0x18>)
}
 800f686:	4618      	mov	r0, r3
 800f688:	370c      	adds	r7, #12
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr
 800f692:	bf00      	nop
 800f694:	24001ec4 	.word	0x24001ec4

0800f698 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800f6a0:	bf00      	nop
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b085      	sub	sp, #20
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f6ba:	79fb      	ldrb	r3, [r7, #7]
 800f6bc:	2b03      	cmp	r3, #3
 800f6be:	d817      	bhi.n	800f6f0 <USBD_Get_USB_Status+0x44>
 800f6c0:	a201      	add	r2, pc, #4	; (adr r2, 800f6c8 <USBD_Get_USB_Status+0x1c>)
 800f6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c6:	bf00      	nop
 800f6c8:	0800f6d9 	.word	0x0800f6d9
 800f6cc:	0800f6df 	.word	0x0800f6df
 800f6d0:	0800f6e5 	.word	0x0800f6e5
 800f6d4:	0800f6eb 	.word	0x0800f6eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	73fb      	strb	r3, [r7, #15]
    break;
 800f6dc:	e00b      	b.n	800f6f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f6de:	2303      	movs	r3, #3
 800f6e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f6e2:	e008      	b.n	800f6f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f6e8:	e005      	b.n	800f6f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f6ea:	2303      	movs	r3, #3
 800f6ec:	73fb      	strb	r3, [r7, #15]
    break;
 800f6ee:	e002      	b.n	800f6f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f6f0:	2303      	movs	r3, #3
 800f6f2:	73fb      	strb	r3, [r7, #15]
    break;
 800f6f4:	bf00      	nop
  }
  return usb_status;
 800f6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3714      	adds	r7, #20
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <memset>:
 800f704:	4402      	add	r2, r0
 800f706:	4603      	mov	r3, r0
 800f708:	4293      	cmp	r3, r2
 800f70a:	d100      	bne.n	800f70e <memset+0xa>
 800f70c:	4770      	bx	lr
 800f70e:	f803 1b01 	strb.w	r1, [r3], #1
 800f712:	e7f9      	b.n	800f708 <memset+0x4>

0800f714 <__libc_init_array>:
 800f714:	b570      	push	{r4, r5, r6, lr}
 800f716:	4d0d      	ldr	r5, [pc, #52]	; (800f74c <__libc_init_array+0x38>)
 800f718:	4c0d      	ldr	r4, [pc, #52]	; (800f750 <__libc_init_array+0x3c>)
 800f71a:	1b64      	subs	r4, r4, r5
 800f71c:	10a4      	asrs	r4, r4, #2
 800f71e:	2600      	movs	r6, #0
 800f720:	42a6      	cmp	r6, r4
 800f722:	d109      	bne.n	800f738 <__libc_init_array+0x24>
 800f724:	4d0b      	ldr	r5, [pc, #44]	; (800f754 <__libc_init_array+0x40>)
 800f726:	4c0c      	ldr	r4, [pc, #48]	; (800f758 <__libc_init_array+0x44>)
 800f728:	f000 f818 	bl	800f75c <_init>
 800f72c:	1b64      	subs	r4, r4, r5
 800f72e:	10a4      	asrs	r4, r4, #2
 800f730:	2600      	movs	r6, #0
 800f732:	42a6      	cmp	r6, r4
 800f734:	d105      	bne.n	800f742 <__libc_init_array+0x2e>
 800f736:	bd70      	pop	{r4, r5, r6, pc}
 800f738:	f855 3b04 	ldr.w	r3, [r5], #4
 800f73c:	4798      	blx	r3
 800f73e:	3601      	adds	r6, #1
 800f740:	e7ee      	b.n	800f720 <__libc_init_array+0xc>
 800f742:	f855 3b04 	ldr.w	r3, [r5], #4
 800f746:	4798      	blx	r3
 800f748:	3601      	adds	r6, #1
 800f74a:	e7f2      	b.n	800f732 <__libc_init_array+0x1e>
 800f74c:	0800f7e4 	.word	0x0800f7e4
 800f750:	0800f7e4 	.word	0x0800f7e4
 800f754:	0800f7e4 	.word	0x0800f7e4
 800f758:	0800f7e8 	.word	0x0800f7e8

0800f75c <_init>:
 800f75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75e:	bf00      	nop
 800f760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f762:	bc08      	pop	{r3}
 800f764:	469e      	mov	lr, r3
 800f766:	4770      	bx	lr

0800f768 <_fini>:
 800f768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f76a:	bf00      	nop
 800f76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f76e:	bc08      	pop	{r3}
 800f770:	469e      	mov	lr, r3
 800f772:	4770      	bx	lr
