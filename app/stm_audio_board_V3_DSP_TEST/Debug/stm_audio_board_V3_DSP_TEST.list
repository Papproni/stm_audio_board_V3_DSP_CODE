
stm_audio_board_V3_DSP_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .sdram_section 0000002c  c0000000  c0000000  00030000  2**2
                  ALLOC
  2 .text         00008d58  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  08009024  08009024  00019024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800903c  0800903c  0001903c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009040  08009040  00019040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08009044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000394  24000010  08009054  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003a4  08009054  000203a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000126c5  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002d4a  00000000  00000000  00032746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000dd8  00000000  00000000  00035490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000a6e  00000000  00000000  00036268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000336eb  00000000  00000000  00036cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000159f7  00000000  00000000  0006a3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00143240  00000000  00000000  0007fdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003760  00000000  00000000  001c2ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000092  00000000  00000000  001c6758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800900c 	.word	0x0800900c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800900c 	.word	0x0800900c

0800030c <ad1939_write_reg>:
#include "AD1939_driver.h"


// send bytes
int ad1939_write_reg(uint8_t reg_address, uint8_t data){
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af02      	add	r7, sp, #8
 8000312:	4603      	mov	r3, r0
 8000314:	460a      	mov	r2, r1
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]
	int8_t retval = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	73fb      	strb	r3, [r7, #15]
	TXdata[0] = AD1939_Global_Address_Write;
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <ad1939_write_reg+0x4c>)
 8000322:	2208      	movs	r2, #8
 8000324:	701a      	strb	r2, [r3, #0]
	TXdata[1] = reg_address;
 8000326:	4a0c      	ldr	r2, [pc, #48]	; (8000358 <ad1939_write_reg+0x4c>)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	7053      	strb	r3, [r2, #1]
	TXdata[2] = data;
 800032c:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <ad1939_write_reg+0x4c>)
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	7093      	strb	r3, [r2, #2]

//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 retval = HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000332:	4b0a      	ldr	r3, [pc, #40]	; (800035c <ad1939_write_reg+0x50>)
 8000334:	6818      	ldr	r0, [r3, #0]
 8000336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2303      	movs	r3, #3
 800033e:	4a08      	ldr	r2, [pc, #32]	; (8000360 <ad1939_write_reg+0x54>)
 8000340:	4905      	ldr	r1, [pc, #20]	; (8000358 <ad1939_write_reg+0x4c>)
 8000342:	f008 f911 	bl	8008568 <HAL_SPI_TransmitReceive>
 8000346:	4603      	mov	r3, r0
 8000348:	73fb      	strb	r3, [r7, #15]
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 //HAL_Delay(10);
	return retval;
 800034a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	24000030 	.word	0x24000030
 800035c:	2400002c 	.word	0x2400002c
 8000360:	24000034 	.word	0x24000034

08000364 <ad1939_pll_locked>:

	return retval;
}

int ad1939_pll_locked()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af02      	add	r7, sp, #8
	TXdata[0] = AD1939_Global_Address_Read;
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <ad1939_pll_locked+0x3c>)
 800036c:	2209      	movs	r2, #9
 800036e:	701a      	strb	r2, [r3, #0]
	TXdata[1] = AD1939_PLL_Control_1;
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000372:	2201      	movs	r2, #1
 8000374:	705a      	strb	r2, [r3, #1]
	TXdata[2] = 0b00000100;
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000378:	2204      	movs	r2, #4
 800037a:	709a      	strb	r2, [r3, #2]
	HAL_Delay(10);
 800037c:	200a      	movs	r0, #10
 800037e:	f001 f9fd 	bl	800177c <HAL_Delay>
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 0);
	 // SPI SEND CMD
	 HAL_SPI_TransmitReceive(AD1939_spi, TXdata, RXdata, 3, 1000);
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <ad1939_pll_locked+0x40>)
 8000384:	6818      	ldr	r0, [r3, #0]
 8000386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	2303      	movs	r3, #3
 800038e:	4a06      	ldr	r2, [pc, #24]	; (80003a8 <ad1939_pll_locked+0x44>)
 8000390:	4903      	ldr	r1, [pc, #12]	; (80003a0 <ad1939_pll_locked+0x3c>)
 8000392:	f008 f8e9 	bl	8008568 <HAL_SPI_TransmitReceive>
	 // CS HIGH
//	 HAL_GPIO_WritePin(CODEC_CS_GPIO_Port, CODEC_CS_Pin, 1);

	 return 0;
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	24000030 	.word	0x24000030
 80003a4:	2400002c 	.word	0x2400002c
 80003a8:	24000034 	.word	0x24000034

080003ac <ad1939_init>:

// FUNCTION: ad1939_init sets up the interface
int ad1939_init(SPI_HandleTypeDef* hspi_codec) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
    AD1939_spi = hspi_codec;
 80003b4:	4a3d      	ldr	r2, [pc, #244]	; (80004ac <ad1939_init+0x100>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6013      	str	r3, [r2, #0]

    // TODO: TURN OFF PLL and DISABLE ADC, DAC


    // CLOCK settings
    if (ad1939_write_reg(AD1939_PLL_Control_0, 0b10111110)) return -1;
 80003ba:	21be      	movs	r1, #190	; 0xbe
 80003bc:	2000      	movs	r0, #0
 80003be:	f7ff ffa5 	bl	800030c <ad1939_write_reg>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d002      	beq.n	80003ce <ad1939_init+0x22>
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295
 80003cc:	e069      	b.n	80004a2 <ad1939_init+0xf6>

    if (ad1939_write_reg(AD1939_PLL_Control_1, 0b00000100)) return -1;
 80003ce:	2104      	movs	r1, #4
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff ff9b 	bl	800030c <ad1939_write_reg>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d002      	beq.n	80003e2 <ad1939_init+0x36>
 80003dc:	f04f 33ff 	mov.w	r3, #4294967295
 80003e0:	e05f      	b.n	80004a2 <ad1939_init+0xf6>





    HAL_Delay(100);
 80003e2:	2064      	movs	r0, #100	; 0x64
 80003e4:	f001 f9ca 	bl	800177c <HAL_Delay>

    if(ad1939_pll_locked()){
 80003e8:	f7ff ffbc 	bl	8000364 <ad1939_pll_locked>
    // 192 khz
    //    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000100)) return -1;
    // 96 khz
//            if (ad1939_write_reg(AD1939_DAC_Control_0, 0b00000010)) return -1;
    // 48 Khz
    if (ad1939_write_reg(AD1939_DAC_Control_0, 0b01000000)) return -1;
 80003ec:	2140      	movs	r1, #64	; 0x40
 80003ee:	2002      	movs	r0, #2
 80003f0:	f7ff ff8c 	bl	800030c <ad1939_write_reg>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d002      	beq.n	8000400 <ad1939_init+0x54>
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
 80003fe:	e050      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Control_1, 0b00000100)) return -1; // Slave setup
 8000400:	2104      	movs	r1, #4
 8000402:	2003      	movs	r0, #3
 8000404:	f7ff ff82 	bl	800030c <ad1939_write_reg>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d002      	beq.n	8000414 <ad1939_init+0x68>
 800040e:	f04f 33ff 	mov.w	r3, #4294967295
 8000412:	e046      	b.n	80004a2 <ad1939_init+0xf6>
    //if (ad1939_write_reg(AD1939_DAC_Control_1, 0b01110000)) return -1; // MASTER setup
    if (ad1939_write_reg(AD1939_DAC_Control_2, 0b00000000)) return -1;
 8000414:	2100      	movs	r1, #0
 8000416:	2004      	movs	r0, #4
 8000418:	f7ff ff78 	bl	800030c <ad1939_write_reg>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d002      	beq.n	8000428 <ad1939_init+0x7c>
 8000422:	f04f 33ff 	mov.w	r3, #4294967295
 8000426:	e03c      	b.n	80004a2 <ad1939_init+0xf6>

    // DAC MUTE SETTINGS
    // OL2N and OL2P 0011 1011
    if (ad1939_write_reg(AD1939_DAC_Mutes, 0x00)) return -1; // enable only DAC2 L and R channels
 8000428:	2100      	movs	r1, #0
 800042a:	2005      	movs	r0, #5
 800042c:	f7ff ff6e 	bl	800030c <ad1939_write_reg>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d002      	beq.n	800043c <ad1939_init+0x90>
 8000436:	f04f 33ff 	mov.w	r3, #4294967295
 800043a:	e032      	b.n	80004a2 <ad1939_init+0xf6>

    // DAC2 VOLUME SETTINGS (other channels are muted)
    if (ad1939_write_reg(AD1939_DAC_Vol_L2, 0x00)) return -1; // no attenuation
 800043c:	2100      	movs	r1, #0
 800043e:	2008      	movs	r0, #8
 8000440:	f7ff ff64 	bl	800030c <ad1939_write_reg>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d002      	beq.n	8000450 <ad1939_init+0xa4>
 800044a:	f04f 33ff 	mov.w	r3, #4294967295
 800044e:	e028      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_DAC_Vol_R2, 0x00)) return -1; // no attenuation
 8000450:	2100      	movs	r1, #0
 8000452:	2009      	movs	r0, #9
 8000454:	f7ff ff5a 	bl	800030c <ad1939_write_reg>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d002      	beq.n	8000464 <ad1939_init+0xb8>
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
 8000462:	e01e      	b.n	80004a2 <ad1939_init+0xf6>
    // 192 khz
	//    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b10000000)) return -1;
    // 96khz
//        if (ad1939_write_reg(AD1939_ADC_Control_0, 0b01000000)) return -1;
        // 48 Khz
    if (ad1939_write_reg(AD1939_ADC_Control_0, 0b00000000)) return -1;
 8000464:	2100      	movs	r1, #0
 8000466:	200e      	movs	r0, #14
 8000468:	f7ff ff50 	bl	800030c <ad1939_write_reg>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d002      	beq.n	8000478 <ad1939_init+0xcc>
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
 8000476:	e014      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_1, 0b00100000 )) return -1;
 8000478:	2120      	movs	r1, #32
 800047a:	200f      	movs	r0, #15
 800047c:	f7ff ff46 	bl	800030c <ad1939_write_reg>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d002      	beq.n	800048c <ad1939_init+0xe0>
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	e00a      	b.n	80004a2 <ad1939_init+0xf6>
    if (ad1939_write_reg(AD1939_ADC_Control_2, 0x00 )) return -1;
 800048c:	2100      	movs	r1, #0
 800048e:	2010      	movs	r0, #16
 8000490:	f7ff ff3c 	bl	800030c <ad1939_write_reg>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d002      	beq.n	80004a0 <ad1939_init+0xf4>
 800049a:	f04f 33ff 	mov.w	r3, #4294967295
 800049e:	e000      	b.n	80004a2 <ad1939_init+0xf6>



    return 0; // Return 0 if all writes are successful
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	2400002c 	.word	0x2400002c

080004b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b6:	4b19      	ldr	r3, [pc, #100]	; (800051c <MX_DMA_Init+0x6c>)
 80004b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004bc:	4a17      	ldr	r2, [pc, #92]	; (800051c <MX_DMA_Init+0x6c>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <MX_DMA_Init+0x6c>)
 80004c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004cc:	f003 0301 	and.w	r3, r3, #1
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <MX_DMA_Init+0x6c>)
 80004d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004da:	4a10      	ldr	r2, [pc, #64]	; (800051c <MX_DMA_Init+0x6c>)
 80004dc:	f043 0302 	orr.w	r3, r3, #2
 80004e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80004e4:	4b0d      	ldr	r3, [pc, #52]	; (800051c <MX_DMA_Init+0x6c>)
 80004e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004ea:	f003 0302 	and.w	r3, r3, #2
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	200b      	movs	r0, #11
 80004f8:	f001 fa3f 	bl	800197a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80004fc:	200b      	movs	r0, #11
 80004fe:	f001 fa56 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	2038      	movs	r0, #56	; 0x38
 8000508:	f001 fa37 	bl	800197a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800050c:	2038      	movs	r0, #56	; 0x38
 800050e:	f001 fa4e 	bl	80019ae <HAL_NVIC_EnableIRQ>

}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	58024400 	.word	0x58024400

08000520 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b08c      	sub	sp, #48	; 0x30
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800053a:	4b3c      	ldr	r3, [pc, #240]	; (800062c <MX_FMC_Init+0x10c>)
 800053c:	4a3c      	ldr	r2, [pc, #240]	; (8000630 <MX_FMC_Init+0x110>)
 800053e:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000540:	4b3a      	ldr	r3, [pc, #232]	; (800062c <MX_FMC_Init+0x10c>)
 8000542:	2200      	movs	r2, #0
 8000544:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000546:	4b39      	ldr	r3, [pc, #228]	; (800062c <MX_FMC_Init+0x10c>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 800054c:	4b37      	ldr	r3, [pc, #220]	; (800062c <MX_FMC_Init+0x10c>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000552:	4b36      	ldr	r3, [pc, #216]	; (800062c <MX_FMC_Init+0x10c>)
 8000554:	2210      	movs	r2, #16
 8000556:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000558:	4b34      	ldr	r3, [pc, #208]	; (800062c <MX_FMC_Init+0x10c>)
 800055a:	2200      	movs	r2, #0
 800055c:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800055e:	4b33      	ldr	r3, [pc, #204]	; (800062c <MX_FMC_Init+0x10c>)
 8000560:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000564:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000566:	4b31      	ldr	r3, [pc, #196]	; (800062c <MX_FMC_Init+0x10c>)
 8000568:	2200      	movs	r2, #0
 800056a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800056c:	4b2f      	ldr	r3, [pc, #188]	; (800062c <MX_FMC_Init+0x10c>)
 800056e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000572:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000574:	4b2d      	ldr	r3, [pc, #180]	; (800062c <MX_FMC_Init+0x10c>)
 8000576:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800057a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800057c:	4b2b      	ldr	r3, [pc, #172]	; (800062c <MX_FMC_Init+0x10c>)
 800057e:	2200      	movs	r2, #0
 8000580:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000582:	2302      	movs	r3, #2
 8000584:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 800058a:	2305      	movs	r3, #5
 800058c:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 800058e:	2306      	movs	r3, #6
 8000590:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000592:	2303      	movs	r3, #3
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000596:	2302      	movs	r3, #2
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 800059a:	2302      	movs	r3, #2
 800059c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	4821      	ldr	r0, [pc, #132]	; (800062c <MX_FMC_Init+0x10c>)
 80005a6:	f007 fe21 	bl	80081ec <HAL_SDRAM_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 80005b0:	f000 fd29 	bl	8001006 <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
   /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
   /* Step 3: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 80005b4:	2301      	movs	r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1; /* configure the Target Bank bits */
 80005b8:	2310      	movs	r3, #16
 80005ba:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber      = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80005ca:	4619      	mov	r1, r3
 80005cc:	4817      	ldr	r0, [pc, #92]	; (800062c <MX_FMC_Init+0x10c>)
 80005ce:	f007 fe49 	bl	8008264 <HAL_SDRAM_SendCommand>
    HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 80005d2:	2001      	movs	r0, #1
 80005d4:	f001 f8d2 	bl	800177c <HAL_Delay>
    /* Step 5: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 80005d8:	2302      	movs	r3, #2
 80005da:	607b      	str	r3, [r7, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	f640 72ff 	movw	r2, #4095	; 0xfff
 80005e2:	4619      	mov	r1, r3
 80005e4:	4811      	ldr	r0, [pc, #68]	; (800062c <MX_FMC_Init+0x10c>)
 80005e6:	f007 fe3d 	bl	8008264 <HAL_SDRAM_SendCommand>
    /* Step 6: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 80005ea:	2303      	movs	r3, #3
 80005ec:	607b      	str	r3, [r7, #4]
    Command.AutoRefreshNumber      = 2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	60fb      	str	r3, [r7, #12]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80005f8:	4619      	mov	r1, r3
 80005fa:	480c      	ldr	r0, [pc, #48]	; (800062c <MX_FMC_Init+0x10c>)
 80005fc:	f007 fe32 	bl	8008264 <HAL_SDRAM_SendCommand>
    /* Step 7: Program the external memory mode register */
    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000600:	2304      	movs	r3, #4
 8000602:	607b      	str	r3, [r7, #4]
    Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000604:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000608:	613b      	str	r3, [r7, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000610:	4619      	mov	r1, r3
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <MX_FMC_Init+0x10c>)
 8000614:	f007 fe26 	bl	8008264 <HAL_SDRAM_SendCommand>
    /* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
    /* Set the device refresh rate
     * COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
             = [(32ms/2048) * 270/2MHz] - 20 = 2089*/

    HAL_SDRAM_ProgramRefreshRate(&hsdram1, 2090);
 8000618:	f640 012a 	movw	r1, #2090	; 0x82a
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <MX_FMC_Init+0x10c>)
 800061e:	f007 fe56 	bl	80082ce <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000622:	bf00      	nop
 8000624:	3730      	adds	r7, #48	; 0x30
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	24000038 	.word	0x24000038
 8000630:	52004140 	.word	0x52004140

08000634 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000634:	b580      	push	{r7, lr}
 8000636:	b0b6      	sub	sp, #216	; 0xd8
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800064a:	4b5b      	ldr	r3, [pc, #364]	; (80007b8 <HAL_FMC_MspInit+0x184>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	f040 80ae 	bne.w	80007b0 <HAL_FMC_MspInit+0x17c>
    return;
  }
  FMC_Initialized = 1;
 8000654:	4b58      	ldr	r3, [pc, #352]	; (80007b8 <HAL_FMC_MspInit+0x184>)
 8000656:	2201      	movs	r2, #1
 8000658:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	22b8      	movs	r2, #184	; 0xb8
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f008 fca6 	bl	8008fb4 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800066c:	f04f 0300 	mov.w	r3, #0
 8000670:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000674:	2300      	movs	r3, #0
 8000676:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	4618      	mov	r0, r3
 800067e:	f004 fbdd 	bl	8004e3c <HAL_RCCEx_PeriphCLKConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000688:	f000 fcbd 	bl	8001006 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800068c:	4b4b      	ldr	r3, [pc, #300]	; (80007bc <HAL_FMC_MspInit+0x188>)
 800068e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000692:	4a4a      	ldr	r2, [pc, #296]	; (80007bc <HAL_FMC_MspInit+0x188>)
 8000694:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000698:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800069c:	4b47      	ldr	r3, [pc, #284]	; (80007bc <HAL_FMC_MspInit+0x188>)
 800069e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80006a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006aa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80006ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006c4:	230c      	movs	r3, #12
 80006c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006ca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006ce:	4619      	mov	r1, r3
 80006d0:	483b      	ldr	r0, [pc, #236]	; (80007c0 <HAL_FMC_MspInit+0x18c>)
 80006d2:	f003 fa67 	bl	8003ba4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80006d6:	230d      	movs	r3, #13
 80006d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e8:	2303      	movs	r3, #3
 80006ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006ee:	230c      	movs	r3, #12
 80006f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006f8:	4619      	mov	r1, r3
 80006fa:	4832      	ldr	r0, [pc, #200]	; (80007c4 <HAL_FMC_MspInit+0x190>)
 80006fc:	f003 fa52 	bl	8003ba4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000700:	2330      	movs	r3, #48	; 0x30
 8000702:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000718:	230c      	movs	r3, #12
 800071a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000722:	4619      	mov	r1, r3
 8000724:	4828      	ldr	r0, [pc, #160]	; (80007c8 <HAL_FMC_MspInit+0x194>)
 8000726:	f003 fa3d 	bl	8003ba4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 800072a:	f248 1311 	movw	r3, #33041	; 0x8111
 800072e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000744:	230c      	movs	r3, #12
 8000746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800074a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800074e:	4619      	mov	r1, r3
 8000750:	481e      	ldr	r0, [pc, #120]	; (80007cc <HAL_FMC_MspInit+0x198>)
 8000752:	f003 fa27 	bl	8003ba4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000756:	f24e 7383 	movw	r3, #59267	; 0xe783
 800075a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076a:	2303      	movs	r3, #3
 800076c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000770:	230c      	movs	r3, #12
 8000772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000776:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800077a:	4619      	mov	r1, r3
 800077c:	4814      	ldr	r0, [pc, #80]	; (80007d0 <HAL_FMC_MspInit+0x19c>)
 800077e:	f003 fa11 	bl	8003ba4 <HAL_GPIO_Init>


  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000782:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000786:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800079c:	230c      	movs	r3, #12
 800079e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007a6:	4619      	mov	r1, r3
 80007a8:	480a      	ldr	r0, [pc, #40]	; (80007d4 <HAL_FMC_MspInit+0x1a0>)
 80007aa:	f003 f9fb 	bl	8003ba4 <HAL_GPIO_Init>
 80007ae:	e000      	b.n	80007b2 <HAL_FMC_MspInit+0x17e>
    return;
 80007b0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007b2:	37d8      	adds	r7, #216	; 0xd8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2400006c 	.word	0x2400006c
 80007bc:	58024400 	.word	0x58024400
 80007c0:	58021400 	.word	0x58021400
 80007c4:	58020800 	.word	0x58020800
 80007c8:	58020000 	.word	0x58020000
 80007cc:	58021800 	.word	0x58021800
 80007d0:	58021000 	.word	0x58021000
 80007d4:	58020c00 	.word	0x58020c00

080007d8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007e0:	f7ff ff28 	bl	8000634 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30
 80007f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000802:	4b40      	ldr	r3, [pc, #256]	; (8000904 <MX_GPIO_Init+0x118>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000808:	4a3e      	ldr	r2, [pc, #248]	; (8000904 <MX_GPIO_Init+0x118>)
 800080a:	f043 0310 	orr.w	r3, r3, #16
 800080e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000812:	4b3c      	ldr	r3, [pc, #240]	; (8000904 <MX_GPIO_Init+0x118>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000818:	f003 0310 	and.w	r3, r3, #16
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000820:	4b38      	ldr	r3, [pc, #224]	; (8000904 <MX_GPIO_Init+0x118>)
 8000822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000826:	4a37      	ldr	r2, [pc, #220]	; (8000904 <MX_GPIO_Init+0x118>)
 8000828:	f043 0320 	orr.w	r3, r3, #32
 800082c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000830:	4b34      	ldr	r3, [pc, #208]	; (8000904 <MX_GPIO_Init+0x118>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000836:	f003 0320 	and.w	r3, r3, #32
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	4b31      	ldr	r3, [pc, #196]	; (8000904 <MX_GPIO_Init+0x118>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	4a2f      	ldr	r2, [pc, #188]	; (8000904 <MX_GPIO_Init+0x118>)
 8000846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800084e:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <MX_GPIO_Init+0x118>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	4b29      	ldr	r3, [pc, #164]	; (8000904 <MX_GPIO_Init+0x118>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000862:	4a28      	ldr	r2, [pc, #160]	; (8000904 <MX_GPIO_Init+0x118>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <MX_GPIO_Init+0x118>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_GPIO_Init+0x118>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000880:	4a20      	ldr	r2, [pc, #128]	; (8000904 <MX_GPIO_Init+0x118>)
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800088a:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <MX_GPIO_Init+0x118>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_GPIO_Init+0x118>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	4a19      	ldr	r2, [pc, #100]	; (8000904 <MX_GPIO_Init+0x118>)
 80008a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_GPIO_Init+0x118>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_GPIO_Init+0x118>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	4a11      	ldr	r2, [pc, #68]	; (8000904 <MX_GPIO_Init+0x118>)
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_GPIO_Init+0x118>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	f003 0308 	and.w	r3, r3, #8
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2120      	movs	r1, #32
 80008d8:	480b      	ldr	r0, [pc, #44]	; (8000908 <MX_GPIO_Init+0x11c>)
 80008da:	f003 fb0b 	bl	8003ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008de:	2320      	movs	r3, #32
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_GPIO_Init+0x11c>)
 80008f6:	f003 f955 	bl	8003ba4 <HAL_GPIO_Init>

}
 80008fa:	bf00      	nop
 80008fc:	3730      	adds	r7, #48	; 0x30
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	58024400 	.word	0x58024400
 8000908:	58021800 	.word	0x58021800

0800090c <HAL_SAI_TxCpltCallback>:
volatile uint8_t 			ADC_HALF_COMPLETE_FLAG = 0;
volatile uint8_t 			DAC_HALF_COMPLETE_FLAG = 0;
volatile uint32_t input_i2s_buffer_au32[16];
volatile uint32_t output_i2s_buffer_au32[16];

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai){
 800090c:	b480      	push	{r7}
 800090e:	b08b      	sub	sp, #44	; 0x2c
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 0;
 8000914:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <HAL_SAI_TxCpltCallback+0xb4>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
 800091a:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <HAL_SAI_TxCpltCallback+0xb8>)
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	2340      	movs	r3, #64	; 0x40
 8000920:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	2b00      	cmp	r3, #0
 8000926:	dd1d      	ble.n	8000964 <HAL_SAI_TxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f003 021f 	and.w	r2, r3, #31
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	4413      	add	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000938:	f3bf 8f4f 	dsb	sy
}
 800093c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800093e:	4a22      	ldr	r2, [pc, #136]	; (80009c8 <HAL_SAI_TxCpltCallback+0xbc>)
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	3320      	adds	r3, #32
 800094a:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3b20      	subs	r3, #32
 8000950:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2b00      	cmp	r3, #0
 8000956:	dcf2      	bgt.n	800093e <HAL_SAI_TxCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000958:	f3bf 8f4f 	dsb	sy
}
 800095c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800095e:	f3bf 8f6f 	isb	sy
}
 8000962:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000964:	bf00      	nop
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_SAI_TxCpltCallback+0xc0>)
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	2b00      	cmp	r3, #0
 8000972:	dd1d      	ble.n	80009b0 <HAL_SAI_TxCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	f003 021f 	and.w	r2, r3, #31
 800097a:	6a3b      	ldr	r3, [r7, #32]
 800097c:	4413      	add	r3, r2
 800097e:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000982:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000984:	f3bf 8f4f 	dsb	sy
}
 8000988:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <HAL_SAI_TxCpltCallback+0xbc>)
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	3320      	adds	r3, #32
 8000996:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	3b20      	subs	r3, #32
 800099c:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	dcf2      	bgt.n	800098a <HAL_SAI_TxCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 80009a4:	f3bf 8f4f 	dsb	sy
}
 80009a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009aa:	f3bf 8f6f 	isb	sy
}
 80009ae:	bf00      	nop
}
 80009b0:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 80009b2:	bf00      	nop
 80009b4:	372c      	adds	r7, #44	; 0x2c
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	24000071 	.word	0x24000071
 80009c4:	24000074 	.word	0x24000074
 80009c8:	e000ed00 	.word	0xe000ed00
 80009cc:	240000b4 	.word	0x240000b4

080009d0 <HAL_SAI_TxHalfCpltCallback>:
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 80009d0:	b480      	push	{r7}
 80009d2:	b08b      	sub	sp, #44	; 0x2c
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	DAC_HALF_COMPLETE_FLAG = 1;
 80009d8:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <HAL_SAI_TxHalfCpltCallback+0xb4>)
 80009da:	2201      	movs	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <HAL_SAI_TxHalfCpltCallback+0xb8>)
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	dd1d      	ble.n	8000a28 <HAL_SAI_TxHalfCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	f003 021f 	and.w	r2, r3, #31
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	4413      	add	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80009fc:	f3bf 8f4f 	dsb	sy
}
 8000a00:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000a02:	4a22      	ldr	r2, [pc, #136]	; (8000a8c <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	3320      	adds	r3, #32
 8000a0e:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3b20      	subs	r3, #32
 8000a14:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	dcf2      	bgt.n	8000a02 <HAL_SAI_TxHalfCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a1c:	f3bf 8f4f 	dsb	sy
}
 8000a20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a22:	f3bf 8f6f 	isb	sy
}
 8000a26:	bf00      	nop
}
 8000a28:	bf00      	nop
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_SAI_TxHalfCpltCallback+0xc0>)
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a2e:	2340      	movs	r3, #64	; 0x40
 8000a30:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000a32:	6a3b      	ldr	r3, [r7, #32]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	dd1d      	ble.n	8000a74 <HAL_SAI_TxHalfCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3a:	f003 021f 	and.w	r2, r3, #31
 8000a3e:	6a3b      	ldr	r3, [r7, #32]
 8000a40:	4413      	add	r3, r2
 8000a42:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a46:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a48:	f3bf 8f4f 	dsb	sy
}
 8000a4c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	3320      	adds	r3, #32
 8000a5a:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	3b20      	subs	r3, #32
 8000a60:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	dcf2      	bgt.n	8000a4e <HAL_SAI_TxHalfCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a68:	f3bf 8f4f 	dsb	sy
}
 8000a6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a6e:	f3bf 8f6f 	isb	sy
}
 8000a72:	bf00      	nop
}
 8000a74:	bf00      	nop
	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
		SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000a76:	bf00      	nop
 8000a78:	372c      	adds	r7, #44	; 0x2c
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	24000071 	.word	0x24000071
 8000a88:	24000074 	.word	0x24000074
 8000a8c:	e000ed00 	.word	0xe000ed00
 8000a90:	240000b4 	.word	0x240000b4

08000a94 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000a94:	b480      	push	{r7}
 8000a96:	b093      	sub	sp, #76	; 0x4c
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 0;
 8000a9c:	4b54      	ldr	r3, [pc, #336]	; (8000bf0 <HAL_SAI_RxCpltCallback+0x15c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
 8000aa2:	4b54      	ldr	r3, [pc, #336]	; (8000bf4 <HAL_SAI_RxCpltCallback+0x160>)
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	2340      	movs	r3, #64	; 0x40
 8000aa8:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	dd1d      	ble.n	8000aec <HAL_SAI_RxCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	f003 021f 	and.w	r2, r3, #31
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	4413      	add	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac0:	f3bf 8f4f 	dsb	sy
}
 8000ac4:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000ac6:	4a4c      	ldr	r2, [pc, #304]	; (8000bf8 <HAL_SAI_RxCpltCallback+0x164>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	3320      	adds	r3, #32
 8000ad2:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3b20      	subs	r3, #32
 8000ad8:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	dcf2      	bgt.n	8000ac6 <HAL_SAI_RxCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ae0:	f3bf 8f4f 	dsb	sy
}
 8000ae4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ae6:	f3bf 8f6f 	isb	sy
}
 8000aea:	bf00      	nop
}
 8000aec:	bf00      	nop
 8000aee:	4b43      	ldr	r3, [pc, #268]	; (8000bfc <HAL_SAI_RxCpltCallback+0x168>)
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
 8000af2:	2340      	movs	r3, #64	; 0x40
 8000af4:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000af6:	6a3b      	ldr	r3, [r7, #32]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	dd1d      	ble.n	8000b38 <HAL_SAI_RxCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	f003 021f 	and.w	r2, r3, #31
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	4413      	add	r3, r2
 8000b06:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b0c:	f3bf 8f4f 	dsb	sy
}
 8000b10:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000b12:	4a39      	ldr	r2, [pc, #228]	; (8000bf8 <HAL_SAI_RxCpltCallback+0x164>)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	3320      	adds	r3, #32
 8000b1e:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	3b20      	subs	r3, #32
 8000b24:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	dcf2      	bgt.n	8000b12 <HAL_SAI_RxCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b2c:	f3bf 8f4f 	dsb	sy
}
 8000b30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b32:	f3bf 8f6f 	isb	sy
}
 8000b36:	bf00      	nop
}
 8000b38:	bf00      	nop

	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	output_i2s_buffer_au32[14] = input_i2s_buffer_au32[10];
 8000b3a:	4b2e      	ldr	r3, [pc, #184]	; (8000bf4 <HAL_SAI_RxCpltCallback+0x160>)
 8000b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3e:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <HAL_SAI_RxCpltCallback+0x168>)
 8000b40:	6393      	str	r3, [r2, #56]	; 0x38
	output_i2s_buffer_au32[15] = input_i2s_buffer_au32[11];
 8000b42:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <HAL_SAI_RxCpltCallback+0x160>)
 8000b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b46:	4a2d      	ldr	r2, [pc, #180]	; (8000bfc <HAL_SAI_RxCpltCallback+0x168>)
 8000b48:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <HAL_SAI_RxCpltCallback+0x160>)
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8000b4e:	2340      	movs	r3, #64	; 0x40
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 8000b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	dd1d      	ble.n	8000b94 <HAL_SAI_RxCpltCallback+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b5a:	f003 021f 	and.w	r2, r3, #31
 8000b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b60:	4413      	add	r3, r2
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 8000b68:	f3bf 8f4f 	dsb	sy
}
 8000b6c:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000b6e:	4a22      	ldr	r2, [pc, #136]	; (8000bf8 <HAL_SAI_RxCpltCallback+0x164>)
 8000b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b72:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b78:	3320      	adds	r3, #32
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b7e:	3b20      	subs	r3, #32
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	dcf2      	bgt.n	8000b6e <HAL_SAI_RxCpltCallback+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b88:	f3bf 8f4f 	dsb	sy
}
 8000b8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b8e:	f3bf 8f6f 	isb	sy
}
 8000b92:	bf00      	nop
}
 8000b94:	bf00      	nop
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <HAL_SAI_RxCpltCallback+0x168>)
 8000b98:	647b      	str	r3, [r7, #68]	; 0x44
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8000b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	dd1d      	ble.n	8000be0 <HAL_SAI_RxCpltCallback+0x14c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ba6:	f003 021f 	and.w	r2, r3, #31
 8000baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bac:	4413      	add	r3, r2
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb4:	f3bf 8f4f 	dsb	sy
}
 8000bb8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <HAL_SAI_RxCpltCallback+0x164>)
 8000bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bbe:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bc4:	3320      	adds	r3, #32
 8000bc6:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bca:	3b20      	subs	r3, #32
 8000bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 8000bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	dcf2      	bgt.n	8000bba <HAL_SAI_RxCpltCallback+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd4:	f3bf 8f4f 	dsb	sy
}
 8000bd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bda:	f3bf 8f6f 	isb	sy
}
 8000bde:	bf00      	nop
}
 8000be0:	bf00      	nop

	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
}
 8000be2:	bf00      	nop
 8000be4:	374c      	adds	r7, #76	; 0x4c
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	24000070 	.word	0x24000070
 8000bf4:	24000074 	.word	0x24000074
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	240000b4 	.word	0x240000b4

08000c00 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8000c00:	b480      	push	{r7}
 8000c02:	b093      	sub	sp, #76	; 0x4c
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	ADC_HALF_COMPLETE_FLAG = 1;
 8000c08:	4b54      	ldr	r3, [pc, #336]	; (8000d5c <HAL_SAI_RxHalfCpltCallback+0x15c>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	4b54      	ldr	r3, [pc, #336]	; (8000d60 <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	2340      	movs	r3, #64	; 0x40
 8000c14:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dd1d      	ble.n	8000c58 <HAL_SAI_RxHalfCpltCallback+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	f003 021f 	and.w	r2, r3, #31
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	4413      	add	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c2c:	f3bf 8f4f 	dsb	sy
}
 8000c30:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c32:	4a4c      	ldr	r2, [pc, #304]	; (8000d64 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	3320      	adds	r3, #32
 8000c3e:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	3b20      	subs	r3, #32
 8000c44:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	dcf2      	bgt.n	8000c32 <HAL_SAI_RxHalfCpltCallback+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4c:	f3bf 8f4f 	dsb	sy
}
 8000c50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c52:	f3bf 8f6f 	isb	sy
}
 8000c56:	bf00      	nop
}
 8000c58:	bf00      	nop
 8000c5a:	4b43      	ldr	r3, [pc, #268]	; (8000d68 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c5e:	2340      	movs	r3, #64	; 0x40
 8000c60:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000c62:	6a3b      	ldr	r3, [r7, #32]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	dd1d      	ble.n	8000ca4 <HAL_SAI_RxHalfCpltCallback+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	f003 021f 	and.w	r2, r3, #31
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	4413      	add	r3, r2
 8000c72:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c78:	f3bf 8f4f 	dsb	sy
}
 8000c7c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000c7e:	4a39      	ldr	r2, [pc, #228]	; (8000d64 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	3320      	adds	r3, #32
 8000c8a:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	3b20      	subs	r3, #32
 8000c90:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	dcf2      	bgt.n	8000c7e <HAL_SAI_RxHalfCpltCallback+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c98:	f3bf 8f4f 	dsb	sy
}
 8000c9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c9e:	f3bf 8f6f 	isb	sy
}
 8000ca2:	bf00      	nop
}
 8000ca4:	bf00      	nop


	SCB_CleanDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	output_i2s_buffer_au32[6] = input_i2s_buffer_au32[2];
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	4a2f      	ldr	r2, [pc, #188]	; (8000d68 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000cac:	6193      	str	r3, [r2, #24]
	output_i2s_buffer_au32[7] = input_i2s_buffer_au32[3];
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	4a2d      	ldr	r2, [pc, #180]	; (8000d68 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000cb4:	61d3      	str	r3, [r2, #28]
 8000cb6:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <HAL_SAI_RxHalfCpltCallback+0x168>)
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8000cba:	2340      	movs	r3, #64	; 0x40
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
    if ( dsize > 0 ) { 
 8000cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	dd1d      	ble.n	8000d00 <HAL_SAI_RxHalfCpltCallback+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc6:	f003 021f 	and.w	r2, r3, #31
 8000cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ccc:	4413      	add	r3, r2
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 8000cd4:	f3bf 8f4f 	dsb	sy
}
 8000cd8:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000cda:	4a22      	ldr	r2, [pc, #136]	; (8000d64 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cde:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce4:	3320      	adds	r3, #32
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cea:	3b20      	subs	r3, #32
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      } while ( op_size > 0 );
 8000cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	dcf2      	bgt.n	8000cda <HAL_SAI_RxHalfCpltCallback+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf4:	f3bf 8f4f 	dsb	sy
}
 8000cf8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cfa:	f3bf 8f6f 	isb	sy
}
 8000cfe:	bf00      	nop
}
 8000d00:	bf00      	nop
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_SAI_RxHalfCpltCallback+0x160>)
 8000d04:	647b      	str	r3, [r7, #68]	; 0x44
 8000d06:	2340      	movs	r3, #64	; 0x40
 8000d08:	643b      	str	r3, [r7, #64]	; 0x40
    if ( dsize > 0 ) { 
 8000d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	dd1d      	ble.n	8000d4c <HAL_SAI_RxHalfCpltCallback+0x14c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d12:	f003 021f 	and.w	r2, r3, #31
 8000d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d18:	4413      	add	r3, r2
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("dsb 0xF":::"memory");
 8000d20:	f3bf 8f4f 	dsb	sy
}
 8000d24:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <HAL_SAI_RxHalfCpltCallback+0x164>)
 8000d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d2a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d30:	3320      	adds	r3, #32
 8000d32:	63bb      	str	r3, [r7, #56]	; 0x38
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d36:	3b20      	subs	r3, #32
 8000d38:	63fb      	str	r3, [r7, #60]	; 0x3c
      } while ( op_size > 0 );
 8000d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	dcf2      	bgt.n	8000d26 <HAL_SAI_RxHalfCpltCallback+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d40:	f3bf 8f4f 	dsb	sy
}
 8000d44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d46:	f3bf 8f6f 	isb	sy
}
 8000d4a:	bf00      	nop
}
 8000d4c:	bf00      	nop

	SCB_CleanDCache_by_Addr(output_i2s_buffer_au32, sizeof(output_i2s_buffer_au32));
	SCB_InvalidateDCache_by_Addr(input_i2s_buffer_au32, sizeof(input_i2s_buffer_au32));
}
 8000d4e:	bf00      	nop
 8000d50:	374c      	adds	r7, #76	; 0x4c
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	24000070 	.word	0x24000070
 8000d60:	24000074 	.word	0x24000074
 8000d64:	e000ed00 	.word	0xe000ed00
 8000d68:	240000b4 	.word	0x240000b4

08000d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000d72:	4b4c      	ldr	r3, [pc, #304]	; (8000ea4 <main+0x138>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d11b      	bne.n	8000db6 <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d7e:	f3bf 8f4f 	dsb	sy
}
 8000d82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d84:	f3bf 8f6f 	isb	sy
}
 8000d88:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d8a:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <main+0x138>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d92:	f3bf 8f4f 	dsb	sy
}
 8000d96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d98:	f3bf 8f6f 	isb	sy
}
 8000d9c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d9e:	4b41      	ldr	r3, [pc, #260]	; (8000ea4 <main+0x138>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	4a40      	ldr	r2, [pc, #256]	; (8000ea4 <main+0x138>)
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000daa:	f3bf 8f4f 	dsb	sy
}
 8000dae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000db0:	f3bf 8f6f 	isb	sy
}
 8000db4:	e000      	b.n	8000db8 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000db6:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db8:	f000 fc4e 	bl	8001658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbc:	f000 f882 	bl	8000ec4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000dc0:	f000 f8ee 	bl	8000fa0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc4:	f7ff fd12 	bl	80007ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000dc8:	f7ff fb72 	bl	80004b0 <MX_DMA_Init>
  MX_SAI1_Init();
 8000dcc:	f000 f920 	bl	8001010 <MX_SAI1_Init>
  MX_SPI1_Init();
 8000dd0:	f000 fa64 	bl	800129c <MX_SPI1_Init>
  MX_FMC_Init();
 8000dd4:	f7ff fba4 	bl	8000520 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  // init SAI interface
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, output_i2s_buffer_au32, 	16);
 8000dd8:	2210      	movs	r2, #16
 8000dda:	4933      	ldr	r1, [pc, #204]	; (8000ea8 <main+0x13c>)
 8000ddc:	4833      	ldr	r0, [pc, #204]	; (8000eac <main+0x140>)
 8000dde:	f006 fe5f 	bl	8007aa0 <HAL_SAI_Transmit_DMA>
	HAL_SAI_Receive_DMA(&hsai_BlockB1, input_i2s_buffer_au32, 	16);
 8000de2:	2210      	movs	r2, #16
 8000de4:	4932      	ldr	r1, [pc, #200]	; (8000eb0 <main+0x144>)
 8000de6:	4833      	ldr	r0, [pc, #204]	; (8000eb4 <main+0x148>)
 8000de8:	f006 ff10 	bl	8007c0c <HAL_SAI_Receive_DMA>

  // init CODEC
	ad1939_init(&hspi1);
 8000dec:	4832      	ldr	r0, [pc, #200]	; (8000eb8 <main+0x14c>)
 8000dee:	f7ff fadd 	bl	80003ac <ad1939_init>
  while (1)
  {
	  uint32_t fmctestStart;
	  uint32_t fmctestStop;

	  fmctestStart = HAL_GetTick();
 8000df2:	f000 fcb7 	bl	8001764 <HAL_GetTick>
 8000df6:	60b8      	str	r0, [r7, #8]
	  uint32_t errorCounter =0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
	  for(uint32_t i = 0; i<10000;i++){
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
 8000e00:	e03e      	b.n	8000e80 <main+0x114>

		  for(uint32_t j=0; j<250;j++){
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	e035      	b.n	8000e74 <main+0x108>
			  fmctestStart = HAL_GetTick();
 8000e08:	f000 fcac 	bl	8001764 <HAL_GetTick>
 8000e0c:	60b8      	str	r0, [r7, #8]
//			  for(uint32_t counter = 0; counter<SDRAM_SIZE; counter++){
//				  *(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) = (uint8_t) j;
//			  }

			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	e008      	b.n	8000e26 <main+0xba>
			 				  sdram_array[counter] = j<<16;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	041a      	lsls	r2, r3, #16
 8000e18:	4928      	ldr	r1, [pc, #160]	; (8000ebc <main+0x150>)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	3301      	adds	r3, #1
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	2b09      	cmp	r3, #9
 8000e2a:	d9f3      	bls.n	8000e14 <main+0xa8>

//			  for(uint32_t counter = 0; counter<SDRAM_SIZE; counter++){
//			  				  if(*(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) != j){
//			  					  errorCounter++;
//			  				  }
			  if( sdram_test_variable != j){
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <main+0x154>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d002      	beq.n	8000e3c <main+0xd0>
				  errorCounter++;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	61fb      	str	r3, [r7, #28]
			  }
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	e00c      	b.n	8000e5c <main+0xf0>
				  if( sdram_array[counter] != j){
 8000e42:	4a1e      	ldr	r2, [pc, #120]	; (8000ebc <main+0x150>)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d002      	beq.n	8000e56 <main+0xea>
					  errorCounter++;
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	3301      	adds	r3, #1
 8000e54:	61fb      	str	r3, [r7, #28]
			  for(uint32_t counter = 0; counter<ARRAY_SIZE; counter++){
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b09      	cmp	r3, #9
 8000e60:	d9ef      	bls.n	8000e42 <main+0xd6>
				  }
			  }
			  fmctestStop = (HAL_GetTick()-fmctestStart);
 8000e62:	f000 fc7f 	bl	8001764 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	603b      	str	r3, [r7, #0]
		  for(uint32_t j=0; j<250;j++){
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2bf9      	cmp	r3, #249	; 0xf9
 8000e78:	d9c6      	bls.n	8000e08 <main+0x9c>
	  for(uint32_t i = 0; i<10000;i++){
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d9bb      	bls.n	8000e02 <main+0x96>
		  }

	  }

	  if(errorCounter){
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d000      	beq.n	8000e92 <main+0x126>
		  while(1){
 8000e90:	e7fe      	b.n	8000e90 <main+0x124>

		  }
	  }

	  uint8_t var = *(__IO uint8_t*)(SDRAM_ADDRESS_START);
 8000e92:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(50);
 8000e9a:	2032      	movs	r0, #50	; 0x32
 8000e9c:	f000 fc6e 	bl	800177c <HAL_Delay>
  {
 8000ea0:	e7a7      	b.n	8000df2 <main+0x86>
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00
 8000ea8:	240000b4 	.word	0x240000b4
 8000eac:	240000f4 	.word	0x240000f4
 8000eb0:	24000074 	.word	0x24000074
 8000eb4:	2400018c 	.word	0x2400018c
 8000eb8:	24000318 	.word	0x24000318
 8000ebc:	c0000000 	.word	0xc0000000
 8000ec0:	c0000028 	.word	0xc0000028

08000ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b09c      	sub	sp, #112	; 0x70
 8000ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	224c      	movs	r2, #76	; 0x4c
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f008 f86e 	bl	8008fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2220      	movs	r2, #32
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f008 f868 	bl	8008fb4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f003 f81f 	bl	8003f28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <SystemClock_Config+0xd8>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	4a2a      	ldr	r2, [pc, #168]	; (8000f9c <SystemClock_Config+0xd8>)
 8000ef4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ef8:	6193      	str	r3, [r2, #24]
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <SystemClock_Config+0xd8>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f06:	bf00      	nop
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <SystemClock_Config+0xd8>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f14:	d1f8      	bne.n	8000f08 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f16:	2301      	movs	r3, #1
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f20:	2302      	movs	r3, #2
 8000f22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f24:	2302      	movs	r3, #2
 8000f26:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000f2c:	232c      	movs	r3, #44	; 0x2c
 8000f2e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 f825 	bl	8003f9c <HAL_RCC_OscConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f58:	f000 f855 	bl	8001006 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5c:	233f      	movs	r3, #63	; 0x3f
 8000f5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f60:	2303      	movs	r3, #3
 8000f62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f6c:	2340      	movs	r3, #64	; 0x40
 8000f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f70:	2340      	movs	r3, #64	; 0x40
 8000f72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f7a:	2340      	movs	r3, #64	; 0x40
 8000f7c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2103      	movs	r1, #3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 fbe4 	bl	8004750 <HAL_RCC_ClockConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000f8e:	f000 f83a 	bl	8001006 <Error_Handler>
  }
}
 8000f92:	bf00      	nop
 8000f94:	3770      	adds	r7, #112	; 0x70
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	58024800 	.word	0x58024800

08000fa0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b0ae      	sub	sp, #184	; 0xb8
 8000fa4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	22b8      	movs	r2, #184	; 0xb8
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f008 f801 	bl	8008fb4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1;
 8000fb2:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8000fb6:	f04f 0300 	mov.w	r3, #0
 8000fba:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 15;
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000fd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2950;
 8000fdc:	f640 3386 	movw	r3, #2950	; 0xb86
 8000fe0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fea:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 ff24 	bl	8004e3c <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8000ffa:	f000 f804 	bl	8001006 <Error_Handler>
  }
}
 8000ffe:	bf00      	nop
 8001000:	37b8      	adds	r7, #184	; 0xb8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800100a:	b672      	cpsid	i
}
 800100c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100e:	e7fe      	b.n	800100e <Error_Handler+0x8>

08001010 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <MX_SAI1_Init+0xb0>)
 8001016:	4a2b      	ldr	r2, [pc, #172]	; (80010c4 <MX_SAI1_Init+0xb4>)
 8001018:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800101a:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <MX_SAI1_Init+0xb0>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <MX_SAI1_Init+0xb0>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <MX_SAI1_Init+0xb0>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <MX_SAI1_Init+0xb0>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <MX_SAI1_Init+0xb0>)
 8001034:	2200      	movs	r2, #0
 8001036:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <MX_SAI1_Init+0xb0>)
 800103a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800103e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <MX_SAI1_Init+0xb0>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_SAI1_Init+0xb0>)
 8001048:	2200      	movs	r2, #0
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <MX_SAI1_Init+0xb0>)
 800104e:	2200      	movs	r2, #0
 8001050:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_SAI1_Init+0xb0>)
 8001054:	2200      	movs	r2, #0
 8001056:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001058:	2308      	movs	r3, #8
 800105a:	2202      	movs	r2, #2
 800105c:	2100      	movs	r1, #0
 800105e:	4818      	ldr	r0, [pc, #96]	; (80010c0 <MX_SAI1_Init+0xb0>)
 8001060:	f006 fad2 	bl	8007608 <HAL_SAI_InitProtocol>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 800106a:	f7ff ffcc 	bl	8001006 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_SAI1_Init+0xb8>)
 8001070:	4a16      	ldr	r2, [pc, #88]	; (80010cc <MX_SAI1_Init+0xbc>)
 8001072:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_SAI1_Init+0xb8>)
 8001076:	2203      	movs	r2, #3
 8001078:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_SAI1_Init+0xb8>)
 800107c:	2201      	movs	r2, #1
 800107e:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_SAI1_Init+0xb8>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_SAI1_Init+0xb8>)
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_SAI1_Init+0xb8>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <MX_SAI1_Init+0xb8>)
 8001094:	2200      	movs	r2, #0
 8001096:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_SAI1_Init+0xb8>)
 800109a:	2200      	movs	r2, #0
 800109c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_SAI1_Init+0xb8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 80010a4:	2308      	movs	r3, #8
 80010a6:	2202      	movs	r2, #2
 80010a8:	2100      	movs	r1, #0
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <MX_SAI1_Init+0xb8>)
 80010ac:	f006 faac 	bl	8007608 <HAL_SAI_InitProtocol>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 80010b6:	f7ff ffa6 	bl	8001006 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	240000f4 	.word	0x240000f4
 80010c4:	40015804 	.word	0x40015804
 80010c8:	2400018c 	.word	0x2400018c
 80010cc:	40015824 	.word	0x40015824

080010d0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a66      	ldr	r2, [pc, #408]	; (8001278 <HAL_SAI_MspInit+0x1a8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d160      	bne.n	80011a4 <HAL_SAI_MspInit+0xd4>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80010e2:	4b66      	ldr	r3, [pc, #408]	; (800127c <HAL_SAI_MspInit+0x1ac>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10e      	bne.n	8001108 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80010ea:	4b65      	ldr	r3, [pc, #404]	; (8001280 <HAL_SAI_MspInit+0x1b0>)
 80010ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010f0:	4a63      	ldr	r2, [pc, #396]	; (8001280 <HAL_SAI_MspInit+0x1b0>)
 80010f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80010fa:	4b61      	ldr	r3, [pc, #388]	; (8001280 <HAL_SAI_MspInit+0x1b0>)
 80010fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001100:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001108:	4b5c      	ldr	r3, [pc, #368]	; (800127c <HAL_SAI_MspInit+0x1ac>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	4a5b      	ldr	r2, [pc, #364]	; (800127c <HAL_SAI_MspInit+0x1ac>)
 8001110:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001112:	2370      	movs	r3, #112	; 0x70
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001122:	2306      	movs	r3, #6
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4855      	ldr	r0, [pc, #340]	; (8001284 <HAL_SAI_MspInit+0x1b4>)
 800112e:	f002 fd39 	bl	8003ba4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8001132:	4b55      	ldr	r3, [pc, #340]	; (8001288 <HAL_SAI_MspInit+0x1b8>)
 8001134:	4a55      	ldr	r2, [pc, #340]	; (800128c <HAL_SAI_MspInit+0x1bc>)
 8001136:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_SAI_MspInit+0x1b8>)
 800113a:	2257      	movs	r2, #87	; 0x57
 800113c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800113e:	4b52      	ldr	r3, [pc, #328]	; (8001288 <HAL_SAI_MspInit+0x1b8>)
 8001140:	2240      	movs	r2, #64	; 0x40
 8001142:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001144:	4b50      	ldr	r3, [pc, #320]	; (8001288 <HAL_SAI_MspInit+0x1b8>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800114a:	4b4f      	ldr	r3, [pc, #316]	; (8001288 <HAL_SAI_MspInit+0x1b8>)
 800114c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001150:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001152:	4b4d      	ldr	r3, [pc, #308]	; (8001288 <HAL_SAI_MspInit+0x1b8>)
 8001154:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001158:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800115a:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <HAL_SAI_MspInit+0x1b8>)
 800115c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001160:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001162:	4b49      	ldr	r3, [pc, #292]	; (8001288 <HAL_SAI_MspInit+0x1b8>)
 8001164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001168:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <HAL_SAI_MspInit+0x1b8>)
 800116c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001170:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001172:	4b45      	ldr	r3, [pc, #276]	; (8001288 <HAL_SAI_MspInit+0x1b8>)
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001178:	4843      	ldr	r0, [pc, #268]	; (8001288 <HAL_SAI_MspInit+0x1b8>)
 800117a:	f000 fc33 	bl	80019e4 <HAL_DMA_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8001184:	f7ff ff3f 	bl	8001006 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a3f      	ldr	r2, [pc, #252]	; (8001288 <HAL_SAI_MspInit+0x1b8>)
 800118c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001190:	4a3d      	ldr	r2, [pc, #244]	; (8001288 <HAL_SAI_MspInit+0x1b8>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a3b      	ldr	r2, [pc, #236]	; (8001288 <HAL_SAI_MspInit+0x1b8>)
 800119a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800119e:	4a3a      	ldr	r2, [pc, #232]	; (8001288 <HAL_SAI_MspInit+0x1b8>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a39      	ldr	r2, [pc, #228]	; (8001290 <HAL_SAI_MspInit+0x1c0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d160      	bne.n	8001270 <HAL_SAI_MspInit+0x1a0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80011ae:	4b33      	ldr	r3, [pc, #204]	; (800127c <HAL_SAI_MspInit+0x1ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10e      	bne.n	80011d4 <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80011b6:	4b32      	ldr	r3, [pc, #200]	; (8001280 <HAL_SAI_MspInit+0x1b0>)
 80011b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011bc:	4a30      	ldr	r2, [pc, #192]	; (8001280 <HAL_SAI_MspInit+0x1b0>)
 80011be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <HAL_SAI_MspInit+0x1b0>)
 80011c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <HAL_SAI_MspInit+0x1ac>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	4a28      	ldr	r2, [pc, #160]	; (800127c <HAL_SAI_MspInit+0x1ac>)
 80011dc:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011de:	2308      	movs	r3, #8
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80011ee:	2306      	movs	r3, #6
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4822      	ldr	r0, [pc, #136]	; (8001284 <HAL_SAI_MspInit+0x1b4>)
 80011fa:	f002 fcd3 	bl	8003ba4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream0;
 80011fe:	4b25      	ldr	r3, [pc, #148]	; (8001294 <HAL_SAI_MspInit+0x1c4>)
 8001200:	4a25      	ldr	r2, [pc, #148]	; (8001298 <HAL_SAI_MspInit+0x1c8>)
 8001202:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8001204:	4b23      	ldr	r3, [pc, #140]	; (8001294 <HAL_SAI_MspInit+0x1c4>)
 8001206:	2258      	movs	r2, #88	; 0x58
 8001208:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_SAI_MspInit+0x1c4>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <HAL_SAI_MspInit+0x1c4>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <HAL_SAI_MspInit+0x1c4>)
 8001218:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121c:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_SAI_MspInit+0x1c4>)
 8001220:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001224:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_SAI_MspInit+0x1c4>)
 8001228:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800122c:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_SAI_MspInit+0x1c4>)
 8001230:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001234:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_SAI_MspInit+0x1c4>)
 8001238:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800123c:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_SAI_MspInit+0x1c4>)
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001244:	4813      	ldr	r0, [pc, #76]	; (8001294 <HAL_SAI_MspInit+0x1c4>)
 8001246:	f000 fbcd 	bl	80019e4 <HAL_DMA_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 8001250:	f7ff fed9 	bl	8001006 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <HAL_SAI_MspInit+0x1c4>)
 8001258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_SAI_MspInit+0x1c4>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <HAL_SAI_MspInit+0x1c4>)
 8001266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_SAI_MspInit+0x1c4>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001270:	bf00      	nop
 8001272:	3728      	adds	r7, #40	; 0x28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40015804 	.word	0x40015804
 800127c:	24000314 	.word	0x24000314
 8001280:	58024400 	.word	0x58024400
 8001284:	58021000 	.word	0x58021000
 8001288:	24000224 	.word	0x24000224
 800128c:	40020010 	.word	0x40020010
 8001290:	40015824 	.word	0x40015824
 8001294:	2400029c 	.word	0x2400029c
 8001298:	40020410 	.word	0x40020410

0800129c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <MX_SPI1_Init+0xa4>)
 80012a2:	4a28      	ldr	r2, [pc, #160]	; (8001344 <MX_SPI1_Init+0xa8>)
 80012a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <MX_SPI1_Init+0xa4>)
 80012a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <MX_SPI1_Init+0xa4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <MX_SPI1_Init+0xa4>)
 80012b6:	2207      	movs	r2, #7
 80012b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <MX_SPI1_Init+0xa4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <MX_SPI1_Init+0xa4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <MX_SPI1_Init+0xa4>)
 80012c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80012cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_SPI1_Init+0xa4>)
 80012d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_SPI1_Init+0xa4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <MX_SPI1_Init+0xa4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_SPI1_Init+0xa4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_SPI1_Init+0xa4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_SPI1_Init+0xa4>)
 80012f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_SPI1_Init+0xa4>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <MX_SPI1_Init+0xa4>)
 80012fe:	2200      	movs	r2, #0
 8001300:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_SPI1_Init+0xa4>)
 8001304:	2200      	movs	r2, #0
 8001306:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <MX_SPI1_Init+0xa4>)
 800130a:	2200      	movs	r2, #0
 800130c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_SPI1_Init+0xa4>)
 8001310:	2200      	movs	r2, #0
 8001312:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <MX_SPI1_Init+0xa4>)
 8001316:	2200      	movs	r2, #0
 8001318:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_SPI1_Init+0xa4>)
 800131c:	2200      	movs	r2, #0
 800131e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <MX_SPI1_Init+0xa4>)
 8001322:	2200      	movs	r2, #0
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_SPI1_Init+0xa4>)
 8001328:	2200      	movs	r2, #0
 800132a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_SPI1_Init+0xa4>)
 800132e:	f006 fff7 	bl	8008320 <HAL_SPI_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001338:	f7ff fe65 	bl	8001006 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	24000318 	.word	0x24000318
 8001344:	40013000 	.word	0x40013000

08001348 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a3a      	ldr	r2, [pc, #232]	; (8001450 <HAL_SPI_MspInit+0x108>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d16d      	bne.n	8001446 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800136a:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <HAL_SPI_MspInit+0x10c>)
 800136c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001370:	4a38      	ldr	r2, [pc, #224]	; (8001454 <HAL_SPI_MspInit+0x10c>)
 8001372:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001376:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800137a:	4b36      	ldr	r3, [pc, #216]	; (8001454 <HAL_SPI_MspInit+0x10c>)
 800137c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	4b32      	ldr	r3, [pc, #200]	; (8001454 <HAL_SPI_MspInit+0x10c>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138e:	4a31      	ldr	r2, [pc, #196]	; (8001454 <HAL_SPI_MspInit+0x10c>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001398:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <HAL_SPI_MspInit+0x10c>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a6:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <HAL_SPI_MspInit+0x10c>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ac:	4a29      	ldr	r2, [pc, #164]	; (8001454 <HAL_SPI_MspInit+0x10c>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b6:	4b27      	ldr	r3, [pc, #156]	; (8001454 <HAL_SPI_MspInit+0x10c>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <HAL_SPI_MspInit+0x10c>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	4a22      	ldr	r2, [pc, #136]	; (8001454 <HAL_SPI_MspInit+0x10c>)
 80013cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_SPI_MspInit+0x10c>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> SPI1_MISO
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15;
 80013e2:	f248 0340 	movw	r3, #32832	; 0x8040
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f4:	2305      	movs	r3, #5
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	4816      	ldr	r0, [pc, #88]	; (8001458 <HAL_SPI_MspInit+0x110>)
 8001400:	f002 fbd0 	bl	8003ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001414:	2305      	movs	r3, #5
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	4619      	mov	r1, r3
 800141e:	480f      	ldr	r0, [pc, #60]	; (800145c <HAL_SPI_MspInit+0x114>)
 8001420:	f002 fbc0 	bl	8003ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001424:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001436:	2305      	movs	r3, #5
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	4807      	ldr	r0, [pc, #28]	; (8001460 <HAL_SPI_MspInit+0x118>)
 8001442:	f002 fbaf 	bl	8003ba4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001446:	bf00      	nop
 8001448:	3730      	adds	r7, #48	; 0x30
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40013000 	.word	0x40013000
 8001454:	58024400 	.word	0x58024400
 8001458:	58020000 	.word	0x58020000
 800145c:	58020c00 	.word	0x58020c00
 8001460:	58021800 	.word	0x58021800

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_MspInit+0x30>)
 800146c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001470:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_MspInit+0x30>)
 8001472:	f043 0302 	orr.w	r3, r3, #2
 8001476:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_MspInit+0x30>)
 800147c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	58024400 	.word	0x58024400

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800149c:	e7fe      	b.n	800149c <NMI_Handler+0x4>

0800149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <MemManage_Handler+0x4>

080014aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <BusFault_Handler+0x4>

080014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <UsageFault_Handler+0x4>

080014b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e4:	f000 f92a 	bl	800173c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}

080014ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <DMA1_Stream0_IRQHandler+0x10>)
 80014f2:	f001 f839 	bl	8002568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	24000224 	.word	0x24000224

08001500 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <DMA2_Stream0_IRQHandler+0x10>)
 8001506:	f001 f82f 	bl	8002568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2400029c 	.word	0x2400029c

08001514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001518:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <SystemInit+0xd0>)
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151e:	4a31      	ldr	r2, [pc, #196]	; (80015e4 <SystemInit+0xd0>)
 8001520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001528:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <SystemInit+0xd4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 030f 	and.w	r3, r3, #15
 8001530:	2b06      	cmp	r3, #6
 8001532:	d807      	bhi.n	8001544 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001534:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <SystemInit+0xd4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 030f 	bic.w	r3, r3, #15
 800153c:	4a2a      	ldr	r2, [pc, #168]	; (80015e8 <SystemInit+0xd4>)
 800153e:	f043 0307 	orr.w	r3, r3, #7
 8001542:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001544:	4b29      	ldr	r3, [pc, #164]	; (80015ec <SystemInit+0xd8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a28      	ldr	r2, [pc, #160]	; (80015ec <SystemInit+0xd8>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001550:	4b26      	ldr	r3, [pc, #152]	; (80015ec <SystemInit+0xd8>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001556:	4b25      	ldr	r3, [pc, #148]	; (80015ec <SystemInit+0xd8>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4924      	ldr	r1, [pc, #144]	; (80015ec <SystemInit+0xd8>)
 800155c:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <SystemInit+0xdc>)
 800155e:	4013      	ands	r3, r2
 8001560:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <SystemInit+0xd4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <SystemInit+0xd4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 030f 	bic.w	r3, r3, #15
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <SystemInit+0xd4>)
 8001578:	f043 0307 	orr.w	r3, r3, #7
 800157c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <SystemInit+0xd8>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <SystemInit+0xd8>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <SystemInit+0xd8>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <SystemInit+0xd8>)
 8001592:	4a18      	ldr	r2, [pc, #96]	; (80015f4 <SystemInit+0xe0>)
 8001594:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <SystemInit+0xd8>)
 8001598:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <SystemInit+0xe4>)
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <SystemInit+0xd8>)
 800159e:	4a17      	ldr	r2, [pc, #92]	; (80015fc <SystemInit+0xe8>)
 80015a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <SystemInit+0xd8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <SystemInit+0xd8>)
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <SystemInit+0xe8>)
 80015ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <SystemInit+0xd8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <SystemInit+0xd8>)
 80015b6:	4a11      	ldr	r2, [pc, #68]	; (80015fc <SystemInit+0xe8>)
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <SystemInit+0xd8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <SystemInit+0xd8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a09      	ldr	r2, [pc, #36]	; (80015ec <SystemInit+0xd8>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <SystemInit+0xd8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <SystemInit+0xec>)
 80015d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00
 80015e8:	52002000 	.word	0x52002000
 80015ec:	58024400 	.word	0x58024400
 80015f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80015f4:	02020200 	.word	0x02020200
 80015f8:	01ff0000 	.word	0x01ff0000
 80015fc:	01010280 	.word	0x01010280
 8001600:	52004000 	.word	0x52004000

08001604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001608:	f7ff ff84 	bl	8001514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800160e:	490d      	ldr	r1, [pc, #52]	; (8001644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001624:	4c0a      	ldr	r4, [pc, #40]	; (8001650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001632:	f007 fcc7 	bl	8008fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001636:	f7ff fb99 	bl	8000d6c <main>
  bx  lr
 800163a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001640:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001644:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001648:	08009044 	.word	0x08009044
  ldr r2, =_sbss
 800164c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001650:	240003a4 	.word	0x240003a4

08001654 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC3_IRQHandler>
	...

08001658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165e:	2003      	movs	r0, #3
 8001660:	f000 f980 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001664:	f003 fa2a 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8001668:	4602      	mov	r2, r0
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_Init+0x68>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	0a1b      	lsrs	r3, r3, #8
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	4913      	ldr	r1, [pc, #76]	; (80016c4 <HAL_Init+0x6c>)
 8001676:	5ccb      	ldrb	r3, [r1, r3]
 8001678:	f003 031f 	and.w	r3, r3, #31
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
 8001680:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_Init+0x68>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <HAL_Init+0x6c>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	fa22 f303 	lsr.w	r3, r2, r3
 8001698:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <HAL_Init+0x70>)
 800169a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <HAL_Init+0x74>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a2:	200f      	movs	r0, #15
 80016a4:	f000 f814 	bl	80016d0 <HAL_InitTick>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e002      	b.n	80016b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016b2:	f7ff fed7 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	58024400 	.word	0x58024400
 80016c4:	08009024 	.word	0x08009024
 80016c8:	24000004 	.word	0x24000004
 80016cc:	24000000 	.word	0x24000000

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_InitTick+0x60>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e021      	b.n	8001728 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <HAL_InitTick+0x64>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_InitTick+0x60>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f965 	bl	80019ca <HAL_SYSTICK_Config>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e00e      	b.n	8001728 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d80a      	bhi.n	8001726 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001710:	2200      	movs	r2, #0
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f000 f92f 	bl	800197a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <HAL_InitTick+0x68>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	e000      	b.n	8001728 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	2400000c 	.word	0x2400000c
 8001734:	24000000 	.word	0x24000000
 8001738:	24000008 	.word	0x24000008

0800173c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_IncTick+0x20>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x24>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_IncTick+0x24>)
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2400000c 	.word	0x2400000c
 8001760:	240003a0 	.word	0x240003a0

08001764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_GetTick+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	240003a0 	.word	0x240003a0

0800177c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff ffee 	bl	8001764 <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d005      	beq.n	80017a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_Delay+0x44>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a2:	bf00      	nop
 80017a4:	f7ff ffde 	bl	8001764 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f7      	bhi.n	80017a4 <HAL_Delay+0x28>
  {
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2400000c 	.word	0x2400000c

080017c4 <__NVIC_SetPriorityGrouping>:
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <__NVIC_SetPriorityGrouping+0x40>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <__NVIC_SetPriorityGrouping+0x40>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00
 8001808:	05fa0000 	.word	0x05fa0000

0800180c <__NVIC_GetPriorityGrouping>:
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4907      	ldr	r1, [pc, #28]	; (8001860 <__NVIC_EnableIRQ+0x38>)
 8001842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	; (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	; (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	; 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f7ff ff8e 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff29 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001988:	f7ff ff40 	bl	800180c <__NVIC_GetPriorityGrouping>
 800198c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	f7ff ff90 	bl	80018b8 <NVIC_EncodePriority>
 8001998:	4602      	mov	r2, r0
 800199a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff5f 	bl	8001864 <__NVIC_SetPriority>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff33 	bl	8001828 <__NVIC_EnableIRQ>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffa4 	bl	8001920 <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff feba 	bl	8001764 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e312      	b.n	8002022 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a66      	ldr	r2, [pc, #408]	; (8001b9c <HAL_DMA_Init+0x1b8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d04a      	beq.n	8001a9c <HAL_DMA_Init+0xb8>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a65      	ldr	r2, [pc, #404]	; (8001ba0 <HAL_DMA_Init+0x1bc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d045      	beq.n	8001a9c <HAL_DMA_Init+0xb8>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a63      	ldr	r2, [pc, #396]	; (8001ba4 <HAL_DMA_Init+0x1c0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d040      	beq.n	8001a9c <HAL_DMA_Init+0xb8>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a62      	ldr	r2, [pc, #392]	; (8001ba8 <HAL_DMA_Init+0x1c4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d03b      	beq.n	8001a9c <HAL_DMA_Init+0xb8>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a60      	ldr	r2, [pc, #384]	; (8001bac <HAL_DMA_Init+0x1c8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d036      	beq.n	8001a9c <HAL_DMA_Init+0xb8>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a5f      	ldr	r2, [pc, #380]	; (8001bb0 <HAL_DMA_Init+0x1cc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d031      	beq.n	8001a9c <HAL_DMA_Init+0xb8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a5d      	ldr	r2, [pc, #372]	; (8001bb4 <HAL_DMA_Init+0x1d0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d02c      	beq.n	8001a9c <HAL_DMA_Init+0xb8>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a5c      	ldr	r2, [pc, #368]	; (8001bb8 <HAL_DMA_Init+0x1d4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d027      	beq.n	8001a9c <HAL_DMA_Init+0xb8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a5a      	ldr	r2, [pc, #360]	; (8001bbc <HAL_DMA_Init+0x1d8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d022      	beq.n	8001a9c <HAL_DMA_Init+0xb8>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a59      	ldr	r2, [pc, #356]	; (8001bc0 <HAL_DMA_Init+0x1dc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d01d      	beq.n	8001a9c <HAL_DMA_Init+0xb8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a57      	ldr	r2, [pc, #348]	; (8001bc4 <HAL_DMA_Init+0x1e0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d018      	beq.n	8001a9c <HAL_DMA_Init+0xb8>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a56      	ldr	r2, [pc, #344]	; (8001bc8 <HAL_DMA_Init+0x1e4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d013      	beq.n	8001a9c <HAL_DMA_Init+0xb8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a54      	ldr	r2, [pc, #336]	; (8001bcc <HAL_DMA_Init+0x1e8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00e      	beq.n	8001a9c <HAL_DMA_Init+0xb8>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a53      	ldr	r2, [pc, #332]	; (8001bd0 <HAL_DMA_Init+0x1ec>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d009      	beq.n	8001a9c <HAL_DMA_Init+0xb8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <HAL_DMA_Init+0x1f0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d004      	beq.n	8001a9c <HAL_DMA_Init+0xb8>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a50      	ldr	r2, [pc, #320]	; (8001bd8 <HAL_DMA_Init+0x1f4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_DMA_Init+0xbc>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_DMA_Init+0xbe>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 813c 	beq.w	8001d20 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a37      	ldr	r2, [pc, #220]	; (8001b9c <HAL_DMA_Init+0x1b8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d04a      	beq.n	8001b58 <HAL_DMA_Init+0x174>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a36      	ldr	r2, [pc, #216]	; (8001ba0 <HAL_DMA_Init+0x1bc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d045      	beq.n	8001b58 <HAL_DMA_Init+0x174>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a34      	ldr	r2, [pc, #208]	; (8001ba4 <HAL_DMA_Init+0x1c0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d040      	beq.n	8001b58 <HAL_DMA_Init+0x174>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a33      	ldr	r2, [pc, #204]	; (8001ba8 <HAL_DMA_Init+0x1c4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d03b      	beq.n	8001b58 <HAL_DMA_Init+0x174>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a31      	ldr	r2, [pc, #196]	; (8001bac <HAL_DMA_Init+0x1c8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d036      	beq.n	8001b58 <HAL_DMA_Init+0x174>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a30      	ldr	r2, [pc, #192]	; (8001bb0 <HAL_DMA_Init+0x1cc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d031      	beq.n	8001b58 <HAL_DMA_Init+0x174>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a2e      	ldr	r2, [pc, #184]	; (8001bb4 <HAL_DMA_Init+0x1d0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d02c      	beq.n	8001b58 <HAL_DMA_Init+0x174>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a2d      	ldr	r2, [pc, #180]	; (8001bb8 <HAL_DMA_Init+0x1d4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d027      	beq.n	8001b58 <HAL_DMA_Init+0x174>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a2b      	ldr	r2, [pc, #172]	; (8001bbc <HAL_DMA_Init+0x1d8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d022      	beq.n	8001b58 <HAL_DMA_Init+0x174>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a2a      	ldr	r2, [pc, #168]	; (8001bc0 <HAL_DMA_Init+0x1dc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d01d      	beq.n	8001b58 <HAL_DMA_Init+0x174>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a28      	ldr	r2, [pc, #160]	; (8001bc4 <HAL_DMA_Init+0x1e0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d018      	beq.n	8001b58 <HAL_DMA_Init+0x174>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a27      	ldr	r2, [pc, #156]	; (8001bc8 <HAL_DMA_Init+0x1e4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d013      	beq.n	8001b58 <HAL_DMA_Init+0x174>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a25      	ldr	r2, [pc, #148]	; (8001bcc <HAL_DMA_Init+0x1e8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00e      	beq.n	8001b58 <HAL_DMA_Init+0x174>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a24      	ldr	r2, [pc, #144]	; (8001bd0 <HAL_DMA_Init+0x1ec>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d009      	beq.n	8001b58 <HAL_DMA_Init+0x174>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a22      	ldr	r2, [pc, #136]	; (8001bd4 <HAL_DMA_Init+0x1f0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d004      	beq.n	8001b58 <HAL_DMA_Init+0x174>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a21      	ldr	r2, [pc, #132]	; (8001bd8 <HAL_DMA_Init+0x1f4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d108      	bne.n	8001b6a <HAL_DMA_Init+0x186>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0201 	bic.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e007      	b.n	8001b7a <HAL_DMA_Init+0x196>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0201 	bic.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b7a:	e02f      	b.n	8001bdc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b7c:	f7ff fdf2 	bl	8001764 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d928      	bls.n	8001bdc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2203      	movs	r2, #3
 8001b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e242      	b.n	8002022 <HAL_DMA_Init+0x63e>
 8001b9c:	40020010 	.word	0x40020010
 8001ba0:	40020028 	.word	0x40020028
 8001ba4:	40020040 	.word	0x40020040
 8001ba8:	40020058 	.word	0x40020058
 8001bac:	40020070 	.word	0x40020070
 8001bb0:	40020088 	.word	0x40020088
 8001bb4:	400200a0 	.word	0x400200a0
 8001bb8:	400200b8 	.word	0x400200b8
 8001bbc:	40020410 	.word	0x40020410
 8001bc0:	40020428 	.word	0x40020428
 8001bc4:	40020440 	.word	0x40020440
 8001bc8:	40020458 	.word	0x40020458
 8001bcc:	40020470 	.word	0x40020470
 8001bd0:	40020488 	.word	0x40020488
 8001bd4:	400204a0 	.word	0x400204a0
 8001bd8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1c8      	bne.n	8001b7c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4b83      	ldr	r3, [pc, #524]	; (8001e04 <HAL_DMA_Init+0x420>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c02:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d107      	bne.n	8001c40 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b28      	cmp	r3, #40	; 0x28
 8001c46:	d903      	bls.n	8001c50 <HAL_DMA_Init+0x26c>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b2e      	cmp	r3, #46	; 0x2e
 8001c4e:	d91f      	bls.n	8001c90 <HAL_DMA_Init+0x2ac>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b3e      	cmp	r3, #62	; 0x3e
 8001c56:	d903      	bls.n	8001c60 <HAL_DMA_Init+0x27c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b42      	cmp	r3, #66	; 0x42
 8001c5e:	d917      	bls.n	8001c90 <HAL_DMA_Init+0x2ac>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b46      	cmp	r3, #70	; 0x46
 8001c66:	d903      	bls.n	8001c70 <HAL_DMA_Init+0x28c>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b48      	cmp	r3, #72	; 0x48
 8001c6e:	d90f      	bls.n	8001c90 <HAL_DMA_Init+0x2ac>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b4e      	cmp	r3, #78	; 0x4e
 8001c76:	d903      	bls.n	8001c80 <HAL_DMA_Init+0x29c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b52      	cmp	r3, #82	; 0x52
 8001c7e:	d907      	bls.n	8001c90 <HAL_DMA_Init+0x2ac>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b73      	cmp	r3, #115	; 0x73
 8001c86:	d905      	bls.n	8001c94 <HAL_DMA_Init+0x2b0>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b77      	cmp	r3, #119	; 0x77
 8001c8e:	d801      	bhi.n	8001c94 <HAL_DMA_Init+0x2b0>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_DMA_Init+0x2b2>
 8001c94:	2300      	movs	r3, #0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ca0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f023 0307 	bic.w	r3, r3, #7
 8001cb8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d117      	bne.n	8001cfc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00e      	beq.n	8001cfc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f001 fdd6 	bl	8003890 <DMA_CheckFifoParam>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d008      	beq.n	8001cfc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2240      	movs	r2, #64	; 0x40
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e192      	b.n	8002022 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f001 fd11 	bl	800372c <DMA_CalcBaseAndBitshift>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	f003 031f 	and.w	r3, r3, #31
 8001d16:	223f      	movs	r2, #63	; 0x3f
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	e0c8      	b.n	8001eb2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a38      	ldr	r2, [pc, #224]	; (8001e08 <HAL_DMA_Init+0x424>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d022      	beq.n	8001d70 <HAL_DMA_Init+0x38c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a37      	ldr	r2, [pc, #220]	; (8001e0c <HAL_DMA_Init+0x428>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d01d      	beq.n	8001d70 <HAL_DMA_Init+0x38c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a35      	ldr	r2, [pc, #212]	; (8001e10 <HAL_DMA_Init+0x42c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d018      	beq.n	8001d70 <HAL_DMA_Init+0x38c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <HAL_DMA_Init+0x430>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_DMA_Init+0x38c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a32      	ldr	r2, [pc, #200]	; (8001e18 <HAL_DMA_Init+0x434>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00e      	beq.n	8001d70 <HAL_DMA_Init+0x38c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a31      	ldr	r2, [pc, #196]	; (8001e1c <HAL_DMA_Init+0x438>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <HAL_DMA_Init+0x38c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a2f      	ldr	r2, [pc, #188]	; (8001e20 <HAL_DMA_Init+0x43c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d004      	beq.n	8001d70 <HAL_DMA_Init+0x38c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a2e      	ldr	r2, [pc, #184]	; (8001e24 <HAL_DMA_Init+0x440>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <HAL_DMA_Init+0x390>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_DMA_Init+0x392>
 8001d74:	2300      	movs	r3, #0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8092 	beq.w	8001ea0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a21      	ldr	r2, [pc, #132]	; (8001e08 <HAL_DMA_Init+0x424>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d021      	beq.n	8001dca <HAL_DMA_Init+0x3e6>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a20      	ldr	r2, [pc, #128]	; (8001e0c <HAL_DMA_Init+0x428>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d01c      	beq.n	8001dca <HAL_DMA_Init+0x3e6>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1e      	ldr	r2, [pc, #120]	; (8001e10 <HAL_DMA_Init+0x42c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d017      	beq.n	8001dca <HAL_DMA_Init+0x3e6>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <HAL_DMA_Init+0x430>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d012      	beq.n	8001dca <HAL_DMA_Init+0x3e6>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1b      	ldr	r2, [pc, #108]	; (8001e18 <HAL_DMA_Init+0x434>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00d      	beq.n	8001dca <HAL_DMA_Init+0x3e6>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1a      	ldr	r2, [pc, #104]	; (8001e1c <HAL_DMA_Init+0x438>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d008      	beq.n	8001dca <HAL_DMA_Init+0x3e6>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a18      	ldr	r2, [pc, #96]	; (8001e20 <HAL_DMA_Init+0x43c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d003      	beq.n	8001dca <HAL_DMA_Init+0x3e6>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_DMA_Init+0x440>)
 8001dc8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_DMA_Init+0x444>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b40      	cmp	r3, #64	; 0x40
 8001df0:	d01c      	beq.n	8001e2c <HAL_DMA_Init+0x448>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b80      	cmp	r3, #128	; 0x80
 8001df8:	d102      	bne.n	8001e00 <HAL_DMA_Init+0x41c>
 8001dfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dfe:	e016      	b.n	8001e2e <HAL_DMA_Init+0x44a>
 8001e00:	2300      	movs	r3, #0
 8001e02:	e014      	b.n	8001e2e <HAL_DMA_Init+0x44a>
 8001e04:	fe10803f 	.word	0xfe10803f
 8001e08:	58025408 	.word	0x58025408
 8001e0c:	5802541c 	.word	0x5802541c
 8001e10:	58025430 	.word	0x58025430
 8001e14:	58025444 	.word	0x58025444
 8001e18:	58025458 	.word	0x58025458
 8001e1c:	5802546c 	.word	0x5802546c
 8001e20:	58025480 	.word	0x58025480
 8001e24:	58025494 	.word	0x58025494
 8001e28:	fffe000f 	.word	0xfffe000f
 8001e2c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68d2      	ldr	r2, [r2, #12]
 8001e32:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e5c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b6e      	ldr	r3, [pc, #440]	; (800202c <HAL_DMA_Init+0x648>)
 8001e74:	4413      	add	r3, r2
 8001e76:	4a6e      	ldr	r2, [pc, #440]	; (8002030 <HAL_DMA_Init+0x64c>)
 8001e78:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	009a      	lsls	r2, r3, #2
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f001 fc51 	bl	800372c <DMA_CalcBaseAndBitshift>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	2201      	movs	r2, #1
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	e008      	b.n	8001eb2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2240      	movs	r2, #64	; 0x40
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0b7      	b.n	8002022 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a5f      	ldr	r2, [pc, #380]	; (8002034 <HAL_DMA_Init+0x650>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d072      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a5d      	ldr	r2, [pc, #372]	; (8002038 <HAL_DMA_Init+0x654>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d06d      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a5c      	ldr	r2, [pc, #368]	; (800203c <HAL_DMA_Init+0x658>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d068      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a5a      	ldr	r2, [pc, #360]	; (8002040 <HAL_DMA_Init+0x65c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d063      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a59      	ldr	r2, [pc, #356]	; (8002044 <HAL_DMA_Init+0x660>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d05e      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a57      	ldr	r2, [pc, #348]	; (8002048 <HAL_DMA_Init+0x664>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d059      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a56      	ldr	r2, [pc, #344]	; (800204c <HAL_DMA_Init+0x668>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d054      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a54      	ldr	r2, [pc, #336]	; (8002050 <HAL_DMA_Init+0x66c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d04f      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a53      	ldr	r2, [pc, #332]	; (8002054 <HAL_DMA_Init+0x670>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d04a      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a51      	ldr	r2, [pc, #324]	; (8002058 <HAL_DMA_Init+0x674>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d045      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a50      	ldr	r2, [pc, #320]	; (800205c <HAL_DMA_Init+0x678>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d040      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a4e      	ldr	r2, [pc, #312]	; (8002060 <HAL_DMA_Init+0x67c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d03b      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a4d      	ldr	r2, [pc, #308]	; (8002064 <HAL_DMA_Init+0x680>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d036      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a4b      	ldr	r2, [pc, #300]	; (8002068 <HAL_DMA_Init+0x684>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d031      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a4a      	ldr	r2, [pc, #296]	; (800206c <HAL_DMA_Init+0x688>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d02c      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a48      	ldr	r2, [pc, #288]	; (8002070 <HAL_DMA_Init+0x68c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d027      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a47      	ldr	r2, [pc, #284]	; (8002074 <HAL_DMA_Init+0x690>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d022      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a45      	ldr	r2, [pc, #276]	; (8002078 <HAL_DMA_Init+0x694>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01d      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a44      	ldr	r2, [pc, #272]	; (800207c <HAL_DMA_Init+0x698>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d018      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a42      	ldr	r2, [pc, #264]	; (8002080 <HAL_DMA_Init+0x69c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a41      	ldr	r2, [pc, #260]	; (8002084 <HAL_DMA_Init+0x6a0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d00e      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a3f      	ldr	r2, [pc, #252]	; (8002088 <HAL_DMA_Init+0x6a4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d009      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a3e      	ldr	r2, [pc, #248]	; (800208c <HAL_DMA_Init+0x6a8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d004      	beq.n	8001fa2 <HAL_DMA_Init+0x5be>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a3c      	ldr	r2, [pc, #240]	; (8002090 <HAL_DMA_Init+0x6ac>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_DMA_Init+0x5c2>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_DMA_Init+0x5c4>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d032      	beq.n	8002012 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f001 fceb 	bl	8003988 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b80      	cmp	r3, #128	; 0x80
 8001fb8:	d102      	bne.n	8001fc0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001fd4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d010      	beq.n	8002000 <HAL_DMA_Init+0x61c>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d80c      	bhi.n	8002000 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f001 fd68 	bl	8003abc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	e008      	b.n	8002012 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	a7fdabf8 	.word	0xa7fdabf8
 8002030:	cccccccd 	.word	0xcccccccd
 8002034:	40020010 	.word	0x40020010
 8002038:	40020028 	.word	0x40020028
 800203c:	40020040 	.word	0x40020040
 8002040:	40020058 	.word	0x40020058
 8002044:	40020070 	.word	0x40020070
 8002048:	40020088 	.word	0x40020088
 800204c:	400200a0 	.word	0x400200a0
 8002050:	400200b8 	.word	0x400200b8
 8002054:	40020410 	.word	0x40020410
 8002058:	40020428 	.word	0x40020428
 800205c:	40020440 	.word	0x40020440
 8002060:	40020458 	.word	0x40020458
 8002064:	40020470 	.word	0x40020470
 8002068:	40020488 	.word	0x40020488
 800206c:	400204a0 	.word	0x400204a0
 8002070:	400204b8 	.word	0x400204b8
 8002074:	58025408 	.word	0x58025408
 8002078:	5802541c 	.word	0x5802541c
 800207c:	58025430 	.word	0x58025430
 8002080:	58025444 	.word	0x58025444
 8002084:	58025458 	.word	0x58025458
 8002088:	5802546c 	.word	0x5802546c
 800208c:	58025480 	.word	0x58025480
 8002090:	58025494 	.word	0x58025494

08002094 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e226      	b.n	80024fe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_DMA_Start_IT+0x2a>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e21f      	b.n	80024fe <HAL_DMA_Start_IT+0x46a>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	f040 820a 	bne.w	80024e8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a68      	ldr	r2, [pc, #416]	; (8002288 <HAL_DMA_Start_IT+0x1f4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d04a      	beq.n	8002182 <HAL_DMA_Start_IT+0xee>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a66      	ldr	r2, [pc, #408]	; (800228c <HAL_DMA_Start_IT+0x1f8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d045      	beq.n	8002182 <HAL_DMA_Start_IT+0xee>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a65      	ldr	r2, [pc, #404]	; (8002290 <HAL_DMA_Start_IT+0x1fc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d040      	beq.n	8002182 <HAL_DMA_Start_IT+0xee>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a63      	ldr	r2, [pc, #396]	; (8002294 <HAL_DMA_Start_IT+0x200>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d03b      	beq.n	8002182 <HAL_DMA_Start_IT+0xee>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a62      	ldr	r2, [pc, #392]	; (8002298 <HAL_DMA_Start_IT+0x204>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d036      	beq.n	8002182 <HAL_DMA_Start_IT+0xee>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a60      	ldr	r2, [pc, #384]	; (800229c <HAL_DMA_Start_IT+0x208>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d031      	beq.n	8002182 <HAL_DMA_Start_IT+0xee>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a5f      	ldr	r2, [pc, #380]	; (80022a0 <HAL_DMA_Start_IT+0x20c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d02c      	beq.n	8002182 <HAL_DMA_Start_IT+0xee>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a5d      	ldr	r2, [pc, #372]	; (80022a4 <HAL_DMA_Start_IT+0x210>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d027      	beq.n	8002182 <HAL_DMA_Start_IT+0xee>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a5c      	ldr	r2, [pc, #368]	; (80022a8 <HAL_DMA_Start_IT+0x214>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d022      	beq.n	8002182 <HAL_DMA_Start_IT+0xee>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_DMA_Start_IT+0x218>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01d      	beq.n	8002182 <HAL_DMA_Start_IT+0xee>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a59      	ldr	r2, [pc, #356]	; (80022b0 <HAL_DMA_Start_IT+0x21c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d018      	beq.n	8002182 <HAL_DMA_Start_IT+0xee>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a57      	ldr	r2, [pc, #348]	; (80022b4 <HAL_DMA_Start_IT+0x220>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_DMA_Start_IT+0xee>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a56      	ldr	r2, [pc, #344]	; (80022b8 <HAL_DMA_Start_IT+0x224>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00e      	beq.n	8002182 <HAL_DMA_Start_IT+0xee>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a54      	ldr	r2, [pc, #336]	; (80022bc <HAL_DMA_Start_IT+0x228>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_DMA_Start_IT+0xee>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a53      	ldr	r2, [pc, #332]	; (80022c0 <HAL_DMA_Start_IT+0x22c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_DMA_Start_IT+0xee>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a51      	ldr	r2, [pc, #324]	; (80022c4 <HAL_DMA_Start_IT+0x230>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d108      	bne.n	8002194 <HAL_DMA_Start_IT+0x100>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e007      	b.n	80021a4 <HAL_DMA_Start_IT+0x110>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f001 f912 	bl	80033d4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a34      	ldr	r2, [pc, #208]	; (8002288 <HAL_DMA_Start_IT+0x1f4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d04a      	beq.n	8002250 <HAL_DMA_Start_IT+0x1bc>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a33      	ldr	r2, [pc, #204]	; (800228c <HAL_DMA_Start_IT+0x1f8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d045      	beq.n	8002250 <HAL_DMA_Start_IT+0x1bc>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a31      	ldr	r2, [pc, #196]	; (8002290 <HAL_DMA_Start_IT+0x1fc>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d040      	beq.n	8002250 <HAL_DMA_Start_IT+0x1bc>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a30      	ldr	r2, [pc, #192]	; (8002294 <HAL_DMA_Start_IT+0x200>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d03b      	beq.n	8002250 <HAL_DMA_Start_IT+0x1bc>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a2e      	ldr	r2, [pc, #184]	; (8002298 <HAL_DMA_Start_IT+0x204>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d036      	beq.n	8002250 <HAL_DMA_Start_IT+0x1bc>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a2d      	ldr	r2, [pc, #180]	; (800229c <HAL_DMA_Start_IT+0x208>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d031      	beq.n	8002250 <HAL_DMA_Start_IT+0x1bc>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a2b      	ldr	r2, [pc, #172]	; (80022a0 <HAL_DMA_Start_IT+0x20c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d02c      	beq.n	8002250 <HAL_DMA_Start_IT+0x1bc>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a2a      	ldr	r2, [pc, #168]	; (80022a4 <HAL_DMA_Start_IT+0x210>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d027      	beq.n	8002250 <HAL_DMA_Start_IT+0x1bc>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a28      	ldr	r2, [pc, #160]	; (80022a8 <HAL_DMA_Start_IT+0x214>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d022      	beq.n	8002250 <HAL_DMA_Start_IT+0x1bc>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a27      	ldr	r2, [pc, #156]	; (80022ac <HAL_DMA_Start_IT+0x218>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d01d      	beq.n	8002250 <HAL_DMA_Start_IT+0x1bc>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a25      	ldr	r2, [pc, #148]	; (80022b0 <HAL_DMA_Start_IT+0x21c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d018      	beq.n	8002250 <HAL_DMA_Start_IT+0x1bc>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a24      	ldr	r2, [pc, #144]	; (80022b4 <HAL_DMA_Start_IT+0x220>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d013      	beq.n	8002250 <HAL_DMA_Start_IT+0x1bc>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a22      	ldr	r2, [pc, #136]	; (80022b8 <HAL_DMA_Start_IT+0x224>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00e      	beq.n	8002250 <HAL_DMA_Start_IT+0x1bc>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a21      	ldr	r2, [pc, #132]	; (80022bc <HAL_DMA_Start_IT+0x228>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d009      	beq.n	8002250 <HAL_DMA_Start_IT+0x1bc>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a1f      	ldr	r2, [pc, #124]	; (80022c0 <HAL_DMA_Start_IT+0x22c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d004      	beq.n	8002250 <HAL_DMA_Start_IT+0x1bc>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a1e      	ldr	r2, [pc, #120]	; (80022c4 <HAL_DMA_Start_IT+0x230>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d101      	bne.n	8002254 <HAL_DMA_Start_IT+0x1c0>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_DMA_Start_IT+0x1c2>
 8002254:	2300      	movs	r3, #0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d036      	beq.n	80022c8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 021e 	bic.w	r2, r3, #30
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0216 	orr.w	r2, r2, #22
 800226c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d03e      	beq.n	80022f4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0208 	orr.w	r2, r2, #8
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	e035      	b.n	80022f4 <HAL_DMA_Start_IT+0x260>
 8002288:	40020010 	.word	0x40020010
 800228c:	40020028 	.word	0x40020028
 8002290:	40020040 	.word	0x40020040
 8002294:	40020058 	.word	0x40020058
 8002298:	40020070 	.word	0x40020070
 800229c:	40020088 	.word	0x40020088
 80022a0:	400200a0 	.word	0x400200a0
 80022a4:	400200b8 	.word	0x400200b8
 80022a8:	40020410 	.word	0x40020410
 80022ac:	40020428 	.word	0x40020428
 80022b0:	40020440 	.word	0x40020440
 80022b4:	40020458 	.word	0x40020458
 80022b8:	40020470 	.word	0x40020470
 80022bc:	40020488 	.word	0x40020488
 80022c0:	400204a0 	.word	0x400204a0
 80022c4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 020e 	bic.w	r2, r3, #14
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 020a 	orr.w	r2, r2, #10
 80022da:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0204 	orr.w	r2, r2, #4
 80022f2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a83      	ldr	r2, [pc, #524]	; (8002508 <HAL_DMA_Start_IT+0x474>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d072      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a82      	ldr	r2, [pc, #520]	; (800250c <HAL_DMA_Start_IT+0x478>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d06d      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a80      	ldr	r2, [pc, #512]	; (8002510 <HAL_DMA_Start_IT+0x47c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d068      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a7f      	ldr	r2, [pc, #508]	; (8002514 <HAL_DMA_Start_IT+0x480>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d063      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a7d      	ldr	r2, [pc, #500]	; (8002518 <HAL_DMA_Start_IT+0x484>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d05e      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7c      	ldr	r2, [pc, #496]	; (800251c <HAL_DMA_Start_IT+0x488>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d059      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a7a      	ldr	r2, [pc, #488]	; (8002520 <HAL_DMA_Start_IT+0x48c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d054      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a79      	ldr	r2, [pc, #484]	; (8002524 <HAL_DMA_Start_IT+0x490>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d04f      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a77      	ldr	r2, [pc, #476]	; (8002528 <HAL_DMA_Start_IT+0x494>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d04a      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a76      	ldr	r2, [pc, #472]	; (800252c <HAL_DMA_Start_IT+0x498>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d045      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a74      	ldr	r2, [pc, #464]	; (8002530 <HAL_DMA_Start_IT+0x49c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d040      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a73      	ldr	r2, [pc, #460]	; (8002534 <HAL_DMA_Start_IT+0x4a0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d03b      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a71      	ldr	r2, [pc, #452]	; (8002538 <HAL_DMA_Start_IT+0x4a4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d036      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a70      	ldr	r2, [pc, #448]	; (800253c <HAL_DMA_Start_IT+0x4a8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d031      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a6e      	ldr	r2, [pc, #440]	; (8002540 <HAL_DMA_Start_IT+0x4ac>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d02c      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a6d      	ldr	r2, [pc, #436]	; (8002544 <HAL_DMA_Start_IT+0x4b0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d027      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a6b      	ldr	r2, [pc, #428]	; (8002548 <HAL_DMA_Start_IT+0x4b4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d022      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a6a      	ldr	r2, [pc, #424]	; (800254c <HAL_DMA_Start_IT+0x4b8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d01d      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a68      	ldr	r2, [pc, #416]	; (8002550 <HAL_DMA_Start_IT+0x4bc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d018      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a67      	ldr	r2, [pc, #412]	; (8002554 <HAL_DMA_Start_IT+0x4c0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d013      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a65      	ldr	r2, [pc, #404]	; (8002558 <HAL_DMA_Start_IT+0x4c4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00e      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a64      	ldr	r2, [pc, #400]	; (800255c <HAL_DMA_Start_IT+0x4c8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d009      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a62      	ldr	r2, [pc, #392]	; (8002560 <HAL_DMA_Start_IT+0x4cc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d004      	beq.n	80023e4 <HAL_DMA_Start_IT+0x350>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a61      	ldr	r2, [pc, #388]	; (8002564 <HAL_DMA_Start_IT+0x4d0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d101      	bne.n	80023e8 <HAL_DMA_Start_IT+0x354>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_DMA_Start_IT+0x356>
 80023e8:	2300      	movs	r3, #0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01a      	beq.n	8002424 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800240a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800241e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002422:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a37      	ldr	r2, [pc, #220]	; (8002508 <HAL_DMA_Start_IT+0x474>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d04a      	beq.n	80024c4 <HAL_DMA_Start_IT+0x430>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a36      	ldr	r2, [pc, #216]	; (800250c <HAL_DMA_Start_IT+0x478>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d045      	beq.n	80024c4 <HAL_DMA_Start_IT+0x430>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a34      	ldr	r2, [pc, #208]	; (8002510 <HAL_DMA_Start_IT+0x47c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d040      	beq.n	80024c4 <HAL_DMA_Start_IT+0x430>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a33      	ldr	r2, [pc, #204]	; (8002514 <HAL_DMA_Start_IT+0x480>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d03b      	beq.n	80024c4 <HAL_DMA_Start_IT+0x430>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a31      	ldr	r2, [pc, #196]	; (8002518 <HAL_DMA_Start_IT+0x484>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d036      	beq.n	80024c4 <HAL_DMA_Start_IT+0x430>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a30      	ldr	r2, [pc, #192]	; (800251c <HAL_DMA_Start_IT+0x488>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d031      	beq.n	80024c4 <HAL_DMA_Start_IT+0x430>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2e      	ldr	r2, [pc, #184]	; (8002520 <HAL_DMA_Start_IT+0x48c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d02c      	beq.n	80024c4 <HAL_DMA_Start_IT+0x430>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a2d      	ldr	r2, [pc, #180]	; (8002524 <HAL_DMA_Start_IT+0x490>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d027      	beq.n	80024c4 <HAL_DMA_Start_IT+0x430>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2b      	ldr	r2, [pc, #172]	; (8002528 <HAL_DMA_Start_IT+0x494>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d022      	beq.n	80024c4 <HAL_DMA_Start_IT+0x430>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2a      	ldr	r2, [pc, #168]	; (800252c <HAL_DMA_Start_IT+0x498>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d01d      	beq.n	80024c4 <HAL_DMA_Start_IT+0x430>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a28      	ldr	r2, [pc, #160]	; (8002530 <HAL_DMA_Start_IT+0x49c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d018      	beq.n	80024c4 <HAL_DMA_Start_IT+0x430>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a27      	ldr	r2, [pc, #156]	; (8002534 <HAL_DMA_Start_IT+0x4a0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d013      	beq.n	80024c4 <HAL_DMA_Start_IT+0x430>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a25      	ldr	r2, [pc, #148]	; (8002538 <HAL_DMA_Start_IT+0x4a4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00e      	beq.n	80024c4 <HAL_DMA_Start_IT+0x430>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a24      	ldr	r2, [pc, #144]	; (800253c <HAL_DMA_Start_IT+0x4a8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d009      	beq.n	80024c4 <HAL_DMA_Start_IT+0x430>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a22      	ldr	r2, [pc, #136]	; (8002540 <HAL_DMA_Start_IT+0x4ac>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d004      	beq.n	80024c4 <HAL_DMA_Start_IT+0x430>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a21      	ldr	r2, [pc, #132]	; (8002544 <HAL_DMA_Start_IT+0x4b0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d108      	bne.n	80024d6 <HAL_DMA_Start_IT+0x442>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e012      	b.n	80024fc <HAL_DMA_Start_IT+0x468>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	e009      	b.n	80024fc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40020010 	.word	0x40020010
 800250c:	40020028 	.word	0x40020028
 8002510:	40020040 	.word	0x40020040
 8002514:	40020058 	.word	0x40020058
 8002518:	40020070 	.word	0x40020070
 800251c:	40020088 	.word	0x40020088
 8002520:	400200a0 	.word	0x400200a0
 8002524:	400200b8 	.word	0x400200b8
 8002528:	40020410 	.word	0x40020410
 800252c:	40020428 	.word	0x40020428
 8002530:	40020440 	.word	0x40020440
 8002534:	40020458 	.word	0x40020458
 8002538:	40020470 	.word	0x40020470
 800253c:	40020488 	.word	0x40020488
 8002540:	400204a0 	.word	0x400204a0
 8002544:	400204b8 	.word	0x400204b8
 8002548:	58025408 	.word	0x58025408
 800254c:	5802541c 	.word	0x5802541c
 8002550:	58025430 	.word	0x58025430
 8002554:	58025444 	.word	0x58025444
 8002558:	58025458 	.word	0x58025458
 800255c:	5802546c 	.word	0x5802546c
 8002560:	58025480 	.word	0x58025480
 8002564:	58025494 	.word	0x58025494

08002568 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	; 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002574:	4b67      	ldr	r3, [pc, #412]	; (8002714 <HAL_DMA_IRQHandler+0x1ac>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a67      	ldr	r2, [pc, #412]	; (8002718 <HAL_DMA_IRQHandler+0x1b0>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0a9b      	lsrs	r3, r3, #10
 8002580:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a5f      	ldr	r2, [pc, #380]	; (800271c <HAL_DMA_IRQHandler+0x1b4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d04a      	beq.n	800263a <HAL_DMA_IRQHandler+0xd2>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a5d      	ldr	r2, [pc, #372]	; (8002720 <HAL_DMA_IRQHandler+0x1b8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d045      	beq.n	800263a <HAL_DMA_IRQHandler+0xd2>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a5c      	ldr	r2, [pc, #368]	; (8002724 <HAL_DMA_IRQHandler+0x1bc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d040      	beq.n	800263a <HAL_DMA_IRQHandler+0xd2>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a5a      	ldr	r2, [pc, #360]	; (8002728 <HAL_DMA_IRQHandler+0x1c0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d03b      	beq.n	800263a <HAL_DMA_IRQHandler+0xd2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a59      	ldr	r2, [pc, #356]	; (800272c <HAL_DMA_IRQHandler+0x1c4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d036      	beq.n	800263a <HAL_DMA_IRQHandler+0xd2>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a57      	ldr	r2, [pc, #348]	; (8002730 <HAL_DMA_IRQHandler+0x1c8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d031      	beq.n	800263a <HAL_DMA_IRQHandler+0xd2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a56      	ldr	r2, [pc, #344]	; (8002734 <HAL_DMA_IRQHandler+0x1cc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d02c      	beq.n	800263a <HAL_DMA_IRQHandler+0xd2>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a54      	ldr	r2, [pc, #336]	; (8002738 <HAL_DMA_IRQHandler+0x1d0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d027      	beq.n	800263a <HAL_DMA_IRQHandler+0xd2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a53      	ldr	r2, [pc, #332]	; (800273c <HAL_DMA_IRQHandler+0x1d4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d022      	beq.n	800263a <HAL_DMA_IRQHandler+0xd2>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a51      	ldr	r2, [pc, #324]	; (8002740 <HAL_DMA_IRQHandler+0x1d8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01d      	beq.n	800263a <HAL_DMA_IRQHandler+0xd2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a50      	ldr	r2, [pc, #320]	; (8002744 <HAL_DMA_IRQHandler+0x1dc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d018      	beq.n	800263a <HAL_DMA_IRQHandler+0xd2>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a4e      	ldr	r2, [pc, #312]	; (8002748 <HAL_DMA_IRQHandler+0x1e0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_DMA_IRQHandler+0xd2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a4d      	ldr	r2, [pc, #308]	; (800274c <HAL_DMA_IRQHandler+0x1e4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00e      	beq.n	800263a <HAL_DMA_IRQHandler+0xd2>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a4b      	ldr	r2, [pc, #300]	; (8002750 <HAL_DMA_IRQHandler+0x1e8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d009      	beq.n	800263a <HAL_DMA_IRQHandler+0xd2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a4a      	ldr	r2, [pc, #296]	; (8002754 <HAL_DMA_IRQHandler+0x1ec>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d004      	beq.n	800263a <HAL_DMA_IRQHandler+0xd2>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a48      	ldr	r2, [pc, #288]	; (8002758 <HAL_DMA_IRQHandler+0x1f0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_DMA_IRQHandler+0xd6>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_DMA_IRQHandler+0xd8>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 842b 	beq.w	8002e9c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	2208      	movs	r2, #8
 8002650:	409a      	lsls	r2, r3
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80a2 	beq.w	80027a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a2e      	ldr	r2, [pc, #184]	; (800271c <HAL_DMA_IRQHandler+0x1b4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d04a      	beq.n	80026fc <HAL_DMA_IRQHandler+0x194>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a2d      	ldr	r2, [pc, #180]	; (8002720 <HAL_DMA_IRQHandler+0x1b8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d045      	beq.n	80026fc <HAL_DMA_IRQHandler+0x194>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a2b      	ldr	r2, [pc, #172]	; (8002724 <HAL_DMA_IRQHandler+0x1bc>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d040      	beq.n	80026fc <HAL_DMA_IRQHandler+0x194>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a2a      	ldr	r2, [pc, #168]	; (8002728 <HAL_DMA_IRQHandler+0x1c0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d03b      	beq.n	80026fc <HAL_DMA_IRQHandler+0x194>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a28      	ldr	r2, [pc, #160]	; (800272c <HAL_DMA_IRQHandler+0x1c4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d036      	beq.n	80026fc <HAL_DMA_IRQHandler+0x194>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a27      	ldr	r2, [pc, #156]	; (8002730 <HAL_DMA_IRQHandler+0x1c8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d031      	beq.n	80026fc <HAL_DMA_IRQHandler+0x194>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a25      	ldr	r2, [pc, #148]	; (8002734 <HAL_DMA_IRQHandler+0x1cc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02c      	beq.n	80026fc <HAL_DMA_IRQHandler+0x194>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a24      	ldr	r2, [pc, #144]	; (8002738 <HAL_DMA_IRQHandler+0x1d0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d027      	beq.n	80026fc <HAL_DMA_IRQHandler+0x194>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a22      	ldr	r2, [pc, #136]	; (800273c <HAL_DMA_IRQHandler+0x1d4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d022      	beq.n	80026fc <HAL_DMA_IRQHandler+0x194>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a21      	ldr	r2, [pc, #132]	; (8002740 <HAL_DMA_IRQHandler+0x1d8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d01d      	beq.n	80026fc <HAL_DMA_IRQHandler+0x194>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <HAL_DMA_IRQHandler+0x1dc>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d018      	beq.n	80026fc <HAL_DMA_IRQHandler+0x194>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <HAL_DMA_IRQHandler+0x1e0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d013      	beq.n	80026fc <HAL_DMA_IRQHandler+0x194>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1c      	ldr	r2, [pc, #112]	; (800274c <HAL_DMA_IRQHandler+0x1e4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00e      	beq.n	80026fc <HAL_DMA_IRQHandler+0x194>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1b      	ldr	r2, [pc, #108]	; (8002750 <HAL_DMA_IRQHandler+0x1e8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d009      	beq.n	80026fc <HAL_DMA_IRQHandler+0x194>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a19      	ldr	r2, [pc, #100]	; (8002754 <HAL_DMA_IRQHandler+0x1ec>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d004      	beq.n	80026fc <HAL_DMA_IRQHandler+0x194>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a18      	ldr	r2, [pc, #96]	; (8002758 <HAL_DMA_IRQHandler+0x1f0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d12f      	bne.n	800275c <HAL_DMA_IRQHandler+0x1f4>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	e02e      	b.n	8002770 <HAL_DMA_IRQHandler+0x208>
 8002712:	bf00      	nop
 8002714:	24000000 	.word	0x24000000
 8002718:	1b4e81b5 	.word	0x1b4e81b5
 800271c:	40020010 	.word	0x40020010
 8002720:	40020028 	.word	0x40020028
 8002724:	40020040 	.word	0x40020040
 8002728:	40020058 	.word	0x40020058
 800272c:	40020070 	.word	0x40020070
 8002730:	40020088 	.word	0x40020088
 8002734:	400200a0 	.word	0x400200a0
 8002738:	400200b8 	.word	0x400200b8
 800273c:	40020410 	.word	0x40020410
 8002740:	40020428 	.word	0x40020428
 8002744:	40020440 	.word	0x40020440
 8002748:	40020458 	.word	0x40020458
 800274c:	40020470 	.word	0x40020470
 8002750:	40020488 	.word	0x40020488
 8002754:	400204a0 	.word	0x400204a0
 8002758:	400204b8 	.word	0x400204b8
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	bf14      	ite	ne
 800276a:	2301      	movne	r3, #1
 800276c:	2300      	moveq	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d015      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0204 	bic.w	r2, r2, #4
 8002782:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	2208      	movs	r2, #8
 800278e:	409a      	lsls	r2, r3
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002798:	f043 0201 	orr.w	r2, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d06e      	beq.n	8002894 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a69      	ldr	r2, [pc, #420]	; (8002960 <HAL_DMA_IRQHandler+0x3f8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d04a      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2ee>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a67      	ldr	r2, [pc, #412]	; (8002964 <HAL_DMA_IRQHandler+0x3fc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d045      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2ee>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a66      	ldr	r2, [pc, #408]	; (8002968 <HAL_DMA_IRQHandler+0x400>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d040      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2ee>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a64      	ldr	r2, [pc, #400]	; (800296c <HAL_DMA_IRQHandler+0x404>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d03b      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2ee>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a63      	ldr	r2, [pc, #396]	; (8002970 <HAL_DMA_IRQHandler+0x408>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d036      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2ee>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a61      	ldr	r2, [pc, #388]	; (8002974 <HAL_DMA_IRQHandler+0x40c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d031      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2ee>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a60      	ldr	r2, [pc, #384]	; (8002978 <HAL_DMA_IRQHandler+0x410>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d02c      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2ee>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a5e      	ldr	r2, [pc, #376]	; (800297c <HAL_DMA_IRQHandler+0x414>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d027      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2ee>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a5d      	ldr	r2, [pc, #372]	; (8002980 <HAL_DMA_IRQHandler+0x418>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d022      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2ee>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a5b      	ldr	r2, [pc, #364]	; (8002984 <HAL_DMA_IRQHandler+0x41c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01d      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2ee>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a5a      	ldr	r2, [pc, #360]	; (8002988 <HAL_DMA_IRQHandler+0x420>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d018      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2ee>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a58      	ldr	r2, [pc, #352]	; (800298c <HAL_DMA_IRQHandler+0x424>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2ee>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a57      	ldr	r2, [pc, #348]	; (8002990 <HAL_DMA_IRQHandler+0x428>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00e      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2ee>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a55      	ldr	r2, [pc, #340]	; (8002994 <HAL_DMA_IRQHandler+0x42c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d009      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2ee>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a54      	ldr	r2, [pc, #336]	; (8002998 <HAL_DMA_IRQHandler+0x430>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d004      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2ee>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a52      	ldr	r2, [pc, #328]	; (800299c <HAL_DMA_IRQHandler+0x434>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d10a      	bne.n	800286c <HAL_DMA_IRQHandler+0x304>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf14      	ite	ne
 8002864:	2301      	movne	r3, #1
 8002866:	2300      	moveq	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	e003      	b.n	8002874 <HAL_DMA_IRQHandler+0x30c>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2300      	movs	r3, #0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00d      	beq.n	8002894 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	2201      	movs	r2, #1
 8002882:	409a      	lsls	r2, r3
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288c:	f043 0202 	orr.w	r2, r3, #2
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	2204      	movs	r2, #4
 800289e:	409a      	lsls	r2, r3
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 808f 	beq.w	80029c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a2c      	ldr	r2, [pc, #176]	; (8002960 <HAL_DMA_IRQHandler+0x3f8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d04a      	beq.n	800294a <HAL_DMA_IRQHandler+0x3e2>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a2a      	ldr	r2, [pc, #168]	; (8002964 <HAL_DMA_IRQHandler+0x3fc>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d045      	beq.n	800294a <HAL_DMA_IRQHandler+0x3e2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a29      	ldr	r2, [pc, #164]	; (8002968 <HAL_DMA_IRQHandler+0x400>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d040      	beq.n	800294a <HAL_DMA_IRQHandler+0x3e2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a27      	ldr	r2, [pc, #156]	; (800296c <HAL_DMA_IRQHandler+0x404>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d03b      	beq.n	800294a <HAL_DMA_IRQHandler+0x3e2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a26      	ldr	r2, [pc, #152]	; (8002970 <HAL_DMA_IRQHandler+0x408>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d036      	beq.n	800294a <HAL_DMA_IRQHandler+0x3e2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a24      	ldr	r2, [pc, #144]	; (8002974 <HAL_DMA_IRQHandler+0x40c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d031      	beq.n	800294a <HAL_DMA_IRQHandler+0x3e2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a23      	ldr	r2, [pc, #140]	; (8002978 <HAL_DMA_IRQHandler+0x410>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d02c      	beq.n	800294a <HAL_DMA_IRQHandler+0x3e2>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a21      	ldr	r2, [pc, #132]	; (800297c <HAL_DMA_IRQHandler+0x414>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d027      	beq.n	800294a <HAL_DMA_IRQHandler+0x3e2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a20      	ldr	r2, [pc, #128]	; (8002980 <HAL_DMA_IRQHandler+0x418>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d022      	beq.n	800294a <HAL_DMA_IRQHandler+0x3e2>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <HAL_DMA_IRQHandler+0x41c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01d      	beq.n	800294a <HAL_DMA_IRQHandler+0x3e2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1d      	ldr	r2, [pc, #116]	; (8002988 <HAL_DMA_IRQHandler+0x420>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d018      	beq.n	800294a <HAL_DMA_IRQHandler+0x3e2>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_DMA_IRQHandler+0x424>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_DMA_IRQHandler+0x3e2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1a      	ldr	r2, [pc, #104]	; (8002990 <HAL_DMA_IRQHandler+0x428>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00e      	beq.n	800294a <HAL_DMA_IRQHandler+0x3e2>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a18      	ldr	r2, [pc, #96]	; (8002994 <HAL_DMA_IRQHandler+0x42c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d009      	beq.n	800294a <HAL_DMA_IRQHandler+0x3e2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <HAL_DMA_IRQHandler+0x430>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d004      	beq.n	800294a <HAL_DMA_IRQHandler+0x3e2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a15      	ldr	r2, [pc, #84]	; (800299c <HAL_DMA_IRQHandler+0x434>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d12a      	bne.n	80029a0 <HAL_DMA_IRQHandler+0x438>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	bf14      	ite	ne
 8002958:	2301      	movne	r3, #1
 800295a:	2300      	moveq	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	e023      	b.n	80029a8 <HAL_DMA_IRQHandler+0x440>
 8002960:	40020010 	.word	0x40020010
 8002964:	40020028 	.word	0x40020028
 8002968:	40020040 	.word	0x40020040
 800296c:	40020058 	.word	0x40020058
 8002970:	40020070 	.word	0x40020070
 8002974:	40020088 	.word	0x40020088
 8002978:	400200a0 	.word	0x400200a0
 800297c:	400200b8 	.word	0x400200b8
 8002980:	40020410 	.word	0x40020410
 8002984:	40020428 	.word	0x40020428
 8002988:	40020440 	.word	0x40020440
 800298c:	40020458 	.word	0x40020458
 8002990:	40020470 	.word	0x40020470
 8002994:	40020488 	.word	0x40020488
 8002998:	400204a0 	.word	0x400204a0
 800299c:	400204b8 	.word	0x400204b8
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2300      	movs	r3, #0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00d      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	2204      	movs	r2, #4
 80029b6:	409a      	lsls	r2, r3
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	f043 0204 	orr.w	r2, r3, #4
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	2210      	movs	r2, #16
 80029d2:	409a      	lsls	r2, r3
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80a6 	beq.w	8002b2a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a85      	ldr	r2, [pc, #532]	; (8002bf8 <HAL_DMA_IRQHandler+0x690>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d04a      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x516>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a83      	ldr	r2, [pc, #524]	; (8002bfc <HAL_DMA_IRQHandler+0x694>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d045      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x516>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a82      	ldr	r2, [pc, #520]	; (8002c00 <HAL_DMA_IRQHandler+0x698>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d040      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x516>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a80      	ldr	r2, [pc, #512]	; (8002c04 <HAL_DMA_IRQHandler+0x69c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d03b      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x516>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a7f      	ldr	r2, [pc, #508]	; (8002c08 <HAL_DMA_IRQHandler+0x6a0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d036      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x516>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a7d      	ldr	r2, [pc, #500]	; (8002c0c <HAL_DMA_IRQHandler+0x6a4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d031      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x516>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a7c      	ldr	r2, [pc, #496]	; (8002c10 <HAL_DMA_IRQHandler+0x6a8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d02c      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x516>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a7a      	ldr	r2, [pc, #488]	; (8002c14 <HAL_DMA_IRQHandler+0x6ac>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d027      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x516>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a79      	ldr	r2, [pc, #484]	; (8002c18 <HAL_DMA_IRQHandler+0x6b0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d022      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x516>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a77      	ldr	r2, [pc, #476]	; (8002c1c <HAL_DMA_IRQHandler+0x6b4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d01d      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x516>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a76      	ldr	r2, [pc, #472]	; (8002c20 <HAL_DMA_IRQHandler+0x6b8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d018      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x516>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a74      	ldr	r2, [pc, #464]	; (8002c24 <HAL_DMA_IRQHandler+0x6bc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x516>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a73      	ldr	r2, [pc, #460]	; (8002c28 <HAL_DMA_IRQHandler+0x6c0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00e      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x516>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a71      	ldr	r2, [pc, #452]	; (8002c2c <HAL_DMA_IRQHandler+0x6c4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d009      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x516>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a70      	ldr	r2, [pc, #448]	; (8002c30 <HAL_DMA_IRQHandler+0x6c8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x516>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a6e      	ldr	r2, [pc, #440]	; (8002c34 <HAL_DMA_IRQHandler+0x6cc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10a      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x52c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf14      	ite	ne
 8002a8c:	2301      	movne	r3, #1
 8002a8e:	2300      	moveq	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	e009      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x540>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bf14      	ite	ne
 8002aa2:	2301      	movne	r3, #1
 8002aa4:	2300      	moveq	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d03e      	beq.n	8002b2a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2210      	movs	r2, #16
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d018      	beq.n	8002afc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d108      	bne.n	8002aea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d024      	beq.n	8002b2a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	4798      	blx	r3
 8002ae8:	e01f      	b.n	8002b2a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01b      	beq.n	8002b2a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
 8002afa:	e016      	b.n	8002b2a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d107      	bne.n	8002b1a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0208 	bic.w	r2, r2, #8
 8002b18:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	2220      	movs	r2, #32
 8002b34:	409a      	lsls	r2, r3
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 8110 	beq.w	8002d60 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a2c      	ldr	r2, [pc, #176]	; (8002bf8 <HAL_DMA_IRQHandler+0x690>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d04a      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x678>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2b      	ldr	r2, [pc, #172]	; (8002bfc <HAL_DMA_IRQHandler+0x694>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d045      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x678>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a29      	ldr	r2, [pc, #164]	; (8002c00 <HAL_DMA_IRQHandler+0x698>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d040      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x678>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a28      	ldr	r2, [pc, #160]	; (8002c04 <HAL_DMA_IRQHandler+0x69c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d03b      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x678>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <HAL_DMA_IRQHandler+0x6a0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d036      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x678>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a25      	ldr	r2, [pc, #148]	; (8002c0c <HAL_DMA_IRQHandler+0x6a4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d031      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x678>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a23      	ldr	r2, [pc, #140]	; (8002c10 <HAL_DMA_IRQHandler+0x6a8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d02c      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x678>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a22      	ldr	r2, [pc, #136]	; (8002c14 <HAL_DMA_IRQHandler+0x6ac>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d027      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x678>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a20      	ldr	r2, [pc, #128]	; (8002c18 <HAL_DMA_IRQHandler+0x6b0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d022      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x678>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1f      	ldr	r2, [pc, #124]	; (8002c1c <HAL_DMA_IRQHandler+0x6b4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d01d      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x678>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <HAL_DMA_IRQHandler+0x6b8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d018      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x678>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <HAL_DMA_IRQHandler+0x6bc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x678>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1a      	ldr	r2, [pc, #104]	; (8002c28 <HAL_DMA_IRQHandler+0x6c0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00e      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x678>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <HAL_DMA_IRQHandler+0x6c4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d009      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x678>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <HAL_DMA_IRQHandler+0x6c8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d004      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x678>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a16      	ldr	r2, [pc, #88]	; (8002c34 <HAL_DMA_IRQHandler+0x6cc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d12b      	bne.n	8002c38 <HAL_DMA_IRQHandler+0x6d0>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	bf14      	ite	ne
 8002bee:	2301      	movne	r3, #1
 8002bf0:	2300      	moveq	r3, #0
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	e02a      	b.n	8002c4c <HAL_DMA_IRQHandler+0x6e4>
 8002bf6:	bf00      	nop
 8002bf8:	40020010 	.word	0x40020010
 8002bfc:	40020028 	.word	0x40020028
 8002c00:	40020040 	.word	0x40020040
 8002c04:	40020058 	.word	0x40020058
 8002c08:	40020070 	.word	0x40020070
 8002c0c:	40020088 	.word	0x40020088
 8002c10:	400200a0 	.word	0x400200a0
 8002c14:	400200b8 	.word	0x400200b8
 8002c18:	40020410 	.word	0x40020410
 8002c1c:	40020428 	.word	0x40020428
 8002c20:	40020440 	.word	0x40020440
 8002c24:	40020458 	.word	0x40020458
 8002c28:	40020470 	.word	0x40020470
 8002c2c:	40020488 	.word	0x40020488
 8002c30:	400204a0 	.word	0x400204a0
 8002c34:	400204b8 	.word	0x400204b8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bf14      	ite	ne
 8002c46:	2301      	movne	r3, #1
 8002c48:	2300      	moveq	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8087 	beq.w	8002d60 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	409a      	lsls	r2, r3
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d139      	bne.n	8002ce2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0216 	bic.w	r2, r2, #22
 8002c7c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695a      	ldr	r2, [r3, #20]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c8c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d103      	bne.n	8002c9e <HAL_DMA_IRQHandler+0x736>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0208 	bic.w	r2, r2, #8
 8002cac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb2:	f003 031f 	and.w	r3, r3, #31
 8002cb6:	223f      	movs	r2, #63	; 0x3f
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 834a 	beq.w	800336c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
          }
          return;
 8002ce0:	e344      	b.n	800336c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d018      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d108      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d02c      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
 8002d0e:	e027      	b.n	8002d60 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d023      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
 8002d20:	e01e      	b.n	8002d60 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10f      	bne.n	8002d50 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0210 	bic.w	r2, r2, #16
 8002d3e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8306 	beq.w	8003376 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8088 	beq.w	8002e88 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a7a      	ldr	r2, [pc, #488]	; (8002f70 <HAL_DMA_IRQHandler+0xa08>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d04a      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x8b8>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a79      	ldr	r2, [pc, #484]	; (8002f74 <HAL_DMA_IRQHandler+0xa0c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d045      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x8b8>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a77      	ldr	r2, [pc, #476]	; (8002f78 <HAL_DMA_IRQHandler+0xa10>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d040      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x8b8>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a76      	ldr	r2, [pc, #472]	; (8002f7c <HAL_DMA_IRQHandler+0xa14>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d03b      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x8b8>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a74      	ldr	r2, [pc, #464]	; (8002f80 <HAL_DMA_IRQHandler+0xa18>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d036      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x8b8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a73      	ldr	r2, [pc, #460]	; (8002f84 <HAL_DMA_IRQHandler+0xa1c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d031      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x8b8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a71      	ldr	r2, [pc, #452]	; (8002f88 <HAL_DMA_IRQHandler+0xa20>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d02c      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x8b8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a70      	ldr	r2, [pc, #448]	; (8002f8c <HAL_DMA_IRQHandler+0xa24>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d027      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x8b8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a6e      	ldr	r2, [pc, #440]	; (8002f90 <HAL_DMA_IRQHandler+0xa28>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d022      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x8b8>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a6d      	ldr	r2, [pc, #436]	; (8002f94 <HAL_DMA_IRQHandler+0xa2c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d01d      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x8b8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a6b      	ldr	r2, [pc, #428]	; (8002f98 <HAL_DMA_IRQHandler+0xa30>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d018      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x8b8>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a6a      	ldr	r2, [pc, #424]	; (8002f9c <HAL_DMA_IRQHandler+0xa34>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d013      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x8b8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a68      	ldr	r2, [pc, #416]	; (8002fa0 <HAL_DMA_IRQHandler+0xa38>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00e      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x8b8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a67      	ldr	r2, [pc, #412]	; (8002fa4 <HAL_DMA_IRQHandler+0xa3c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d009      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x8b8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a65      	ldr	r2, [pc, #404]	; (8002fa8 <HAL_DMA_IRQHandler+0xa40>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x8b8>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a64      	ldr	r2, [pc, #400]	; (8002fac <HAL_DMA_IRQHandler+0xa44>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d108      	bne.n	8002e32 <HAL_DMA_IRQHandler+0x8ca>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e007      	b.n	8002e42 <HAL_DMA_IRQHandler+0x8da>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0201 	bic.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3301      	adds	r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d307      	bcc.n	8002e5e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f2      	bne.n	8002e42 <HAL_DMA_IRQHandler+0x8da>
 8002e5c:	e000      	b.n	8002e60 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002e5e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002e76:	e003      	b.n	8002e80 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8272 	beq.w	8003376 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4798      	blx	r3
 8002e9a:	e26c      	b.n	8003376 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a43      	ldr	r2, [pc, #268]	; (8002fb0 <HAL_DMA_IRQHandler+0xa48>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d022      	beq.n	8002eec <HAL_DMA_IRQHandler+0x984>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a42      	ldr	r2, [pc, #264]	; (8002fb4 <HAL_DMA_IRQHandler+0xa4c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d01d      	beq.n	8002eec <HAL_DMA_IRQHandler+0x984>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a40      	ldr	r2, [pc, #256]	; (8002fb8 <HAL_DMA_IRQHandler+0xa50>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d018      	beq.n	8002eec <HAL_DMA_IRQHandler+0x984>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a3f      	ldr	r2, [pc, #252]	; (8002fbc <HAL_DMA_IRQHandler+0xa54>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <HAL_DMA_IRQHandler+0x984>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a3d      	ldr	r2, [pc, #244]	; (8002fc0 <HAL_DMA_IRQHandler+0xa58>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00e      	beq.n	8002eec <HAL_DMA_IRQHandler+0x984>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a3c      	ldr	r2, [pc, #240]	; (8002fc4 <HAL_DMA_IRQHandler+0xa5c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d009      	beq.n	8002eec <HAL_DMA_IRQHandler+0x984>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a3a      	ldr	r2, [pc, #232]	; (8002fc8 <HAL_DMA_IRQHandler+0xa60>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_DMA_IRQHandler+0x984>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a39      	ldr	r2, [pc, #228]	; (8002fcc <HAL_DMA_IRQHandler+0xa64>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d101      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0x988>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <HAL_DMA_IRQHandler+0x98a>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 823f 	beq.w	8003376 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	2204      	movs	r2, #4
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80cd 	beq.w	80030b0 <HAL_DMA_IRQHandler+0xb48>
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80c7 	beq.w	80030b0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	409a      	lsls	r2, r3
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d049      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 8210 	beq.w	8003370 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f58:	e20a      	b.n	8003370 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 8206 	beq.w	8003370 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f6c:	e200      	b.n	8003370 <HAL_DMA_IRQHandler+0xe08>
 8002f6e:	bf00      	nop
 8002f70:	40020010 	.word	0x40020010
 8002f74:	40020028 	.word	0x40020028
 8002f78:	40020040 	.word	0x40020040
 8002f7c:	40020058 	.word	0x40020058
 8002f80:	40020070 	.word	0x40020070
 8002f84:	40020088 	.word	0x40020088
 8002f88:	400200a0 	.word	0x400200a0
 8002f8c:	400200b8 	.word	0x400200b8
 8002f90:	40020410 	.word	0x40020410
 8002f94:	40020428 	.word	0x40020428
 8002f98:	40020440 	.word	0x40020440
 8002f9c:	40020458 	.word	0x40020458
 8002fa0:	40020470 	.word	0x40020470
 8002fa4:	40020488 	.word	0x40020488
 8002fa8:	400204a0 	.word	0x400204a0
 8002fac:	400204b8 	.word	0x400204b8
 8002fb0:	58025408 	.word	0x58025408
 8002fb4:	5802541c 	.word	0x5802541c
 8002fb8:	58025430 	.word	0x58025430
 8002fbc:	58025444 	.word	0x58025444
 8002fc0:	58025458 	.word	0x58025458
 8002fc4:	5802546c 	.word	0x5802546c
 8002fc8:	58025480 	.word	0x58025480
 8002fcc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d160      	bne.n	800309c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a7f      	ldr	r2, [pc, #508]	; (80031dc <HAL_DMA_IRQHandler+0xc74>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d04a      	beq.n	800307a <HAL_DMA_IRQHandler+0xb12>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a7d      	ldr	r2, [pc, #500]	; (80031e0 <HAL_DMA_IRQHandler+0xc78>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d045      	beq.n	800307a <HAL_DMA_IRQHandler+0xb12>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a7c      	ldr	r2, [pc, #496]	; (80031e4 <HAL_DMA_IRQHandler+0xc7c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d040      	beq.n	800307a <HAL_DMA_IRQHandler+0xb12>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a7a      	ldr	r2, [pc, #488]	; (80031e8 <HAL_DMA_IRQHandler+0xc80>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d03b      	beq.n	800307a <HAL_DMA_IRQHandler+0xb12>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a79      	ldr	r2, [pc, #484]	; (80031ec <HAL_DMA_IRQHandler+0xc84>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d036      	beq.n	800307a <HAL_DMA_IRQHandler+0xb12>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a77      	ldr	r2, [pc, #476]	; (80031f0 <HAL_DMA_IRQHandler+0xc88>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d031      	beq.n	800307a <HAL_DMA_IRQHandler+0xb12>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a76      	ldr	r2, [pc, #472]	; (80031f4 <HAL_DMA_IRQHandler+0xc8c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d02c      	beq.n	800307a <HAL_DMA_IRQHandler+0xb12>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a74      	ldr	r2, [pc, #464]	; (80031f8 <HAL_DMA_IRQHandler+0xc90>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d027      	beq.n	800307a <HAL_DMA_IRQHandler+0xb12>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a73      	ldr	r2, [pc, #460]	; (80031fc <HAL_DMA_IRQHandler+0xc94>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d022      	beq.n	800307a <HAL_DMA_IRQHandler+0xb12>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a71      	ldr	r2, [pc, #452]	; (8003200 <HAL_DMA_IRQHandler+0xc98>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d01d      	beq.n	800307a <HAL_DMA_IRQHandler+0xb12>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a70      	ldr	r2, [pc, #448]	; (8003204 <HAL_DMA_IRQHandler+0xc9c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d018      	beq.n	800307a <HAL_DMA_IRQHandler+0xb12>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a6e      	ldr	r2, [pc, #440]	; (8003208 <HAL_DMA_IRQHandler+0xca0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <HAL_DMA_IRQHandler+0xb12>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a6d      	ldr	r2, [pc, #436]	; (800320c <HAL_DMA_IRQHandler+0xca4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00e      	beq.n	800307a <HAL_DMA_IRQHandler+0xb12>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6b      	ldr	r2, [pc, #428]	; (8003210 <HAL_DMA_IRQHandler+0xca8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d009      	beq.n	800307a <HAL_DMA_IRQHandler+0xb12>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a6a      	ldr	r2, [pc, #424]	; (8003214 <HAL_DMA_IRQHandler+0xcac>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d004      	beq.n	800307a <HAL_DMA_IRQHandler+0xb12>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a68      	ldr	r2, [pc, #416]	; (8003218 <HAL_DMA_IRQHandler+0xcb0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d108      	bne.n	800308c <HAL_DMA_IRQHandler+0xb24>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0208 	bic.w	r2, r2, #8
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e007      	b.n	800309c <HAL_DMA_IRQHandler+0xb34>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0204 	bic.w	r2, r2, #4
 800309a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8165 	beq.w	8003370 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030ae:	e15f      	b.n	8003370 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2202      	movs	r2, #2
 80030ba:	409a      	lsls	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80c5 	beq.w	8003250 <HAL_DMA_IRQHandler+0xce8>
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80bf 	beq.w	8003250 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	2202      	movs	r2, #2
 80030dc:	409a      	lsls	r2, r3
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d018      	beq.n	800311e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 813a 	beq.w	8003374 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003108:	e134      	b.n	8003374 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 8130 	beq.w	8003374 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800311c:	e12a      	b.n	8003374 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f003 0320 	and.w	r3, r3, #32
 8003124:	2b00      	cmp	r3, #0
 8003126:	f040 8089 	bne.w	800323c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a2b      	ldr	r2, [pc, #172]	; (80031dc <HAL_DMA_IRQHandler+0xc74>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d04a      	beq.n	80031ca <HAL_DMA_IRQHandler+0xc62>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a29      	ldr	r2, [pc, #164]	; (80031e0 <HAL_DMA_IRQHandler+0xc78>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d045      	beq.n	80031ca <HAL_DMA_IRQHandler+0xc62>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <HAL_DMA_IRQHandler+0xc7c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d040      	beq.n	80031ca <HAL_DMA_IRQHandler+0xc62>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a26      	ldr	r2, [pc, #152]	; (80031e8 <HAL_DMA_IRQHandler+0xc80>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d03b      	beq.n	80031ca <HAL_DMA_IRQHandler+0xc62>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a25      	ldr	r2, [pc, #148]	; (80031ec <HAL_DMA_IRQHandler+0xc84>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d036      	beq.n	80031ca <HAL_DMA_IRQHandler+0xc62>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a23      	ldr	r2, [pc, #140]	; (80031f0 <HAL_DMA_IRQHandler+0xc88>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d031      	beq.n	80031ca <HAL_DMA_IRQHandler+0xc62>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a22      	ldr	r2, [pc, #136]	; (80031f4 <HAL_DMA_IRQHandler+0xc8c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d02c      	beq.n	80031ca <HAL_DMA_IRQHandler+0xc62>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <HAL_DMA_IRQHandler+0xc90>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d027      	beq.n	80031ca <HAL_DMA_IRQHandler+0xc62>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <HAL_DMA_IRQHandler+0xc94>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d022      	beq.n	80031ca <HAL_DMA_IRQHandler+0xc62>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <HAL_DMA_IRQHandler+0xc98>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d01d      	beq.n	80031ca <HAL_DMA_IRQHandler+0xc62>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a1c      	ldr	r2, [pc, #112]	; (8003204 <HAL_DMA_IRQHandler+0xc9c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d018      	beq.n	80031ca <HAL_DMA_IRQHandler+0xc62>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <HAL_DMA_IRQHandler+0xca0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d013      	beq.n	80031ca <HAL_DMA_IRQHandler+0xc62>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a19      	ldr	r2, [pc, #100]	; (800320c <HAL_DMA_IRQHandler+0xca4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d00e      	beq.n	80031ca <HAL_DMA_IRQHandler+0xc62>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a17      	ldr	r2, [pc, #92]	; (8003210 <HAL_DMA_IRQHandler+0xca8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d009      	beq.n	80031ca <HAL_DMA_IRQHandler+0xc62>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a16      	ldr	r2, [pc, #88]	; (8003214 <HAL_DMA_IRQHandler+0xcac>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d004      	beq.n	80031ca <HAL_DMA_IRQHandler+0xc62>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a14      	ldr	r2, [pc, #80]	; (8003218 <HAL_DMA_IRQHandler+0xcb0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d128      	bne.n	800321c <HAL_DMA_IRQHandler+0xcb4>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0214 	bic.w	r2, r2, #20
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	e027      	b.n	800322c <HAL_DMA_IRQHandler+0xcc4>
 80031dc:	40020010 	.word	0x40020010
 80031e0:	40020028 	.word	0x40020028
 80031e4:	40020040 	.word	0x40020040
 80031e8:	40020058 	.word	0x40020058
 80031ec:	40020070 	.word	0x40020070
 80031f0:	40020088 	.word	0x40020088
 80031f4:	400200a0 	.word	0x400200a0
 80031f8:	400200b8 	.word	0x400200b8
 80031fc:	40020410 	.word	0x40020410
 8003200:	40020428 	.word	0x40020428
 8003204:	40020440 	.word	0x40020440
 8003208:	40020458 	.word	0x40020458
 800320c:	40020470 	.word	0x40020470
 8003210:	40020488 	.word	0x40020488
 8003214:	400204a0 	.word	0x400204a0
 8003218:	400204b8 	.word	0x400204b8
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 020a 	bic.w	r2, r2, #10
 800322a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8097 	beq.w	8003374 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800324e:	e091      	b.n	8003374 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2208      	movs	r2, #8
 800325a:	409a      	lsls	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 8088 	beq.w	8003376 <HAL_DMA_IRQHandler+0xe0e>
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8082 	beq.w	8003376 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a41      	ldr	r2, [pc, #260]	; (800337c <HAL_DMA_IRQHandler+0xe14>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d04a      	beq.n	8003312 <HAL_DMA_IRQHandler+0xdaa>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a3f      	ldr	r2, [pc, #252]	; (8003380 <HAL_DMA_IRQHandler+0xe18>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d045      	beq.n	8003312 <HAL_DMA_IRQHandler+0xdaa>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a3e      	ldr	r2, [pc, #248]	; (8003384 <HAL_DMA_IRQHandler+0xe1c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d040      	beq.n	8003312 <HAL_DMA_IRQHandler+0xdaa>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a3c      	ldr	r2, [pc, #240]	; (8003388 <HAL_DMA_IRQHandler+0xe20>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d03b      	beq.n	8003312 <HAL_DMA_IRQHandler+0xdaa>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a3b      	ldr	r2, [pc, #236]	; (800338c <HAL_DMA_IRQHandler+0xe24>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d036      	beq.n	8003312 <HAL_DMA_IRQHandler+0xdaa>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a39      	ldr	r2, [pc, #228]	; (8003390 <HAL_DMA_IRQHandler+0xe28>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d031      	beq.n	8003312 <HAL_DMA_IRQHandler+0xdaa>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a38      	ldr	r2, [pc, #224]	; (8003394 <HAL_DMA_IRQHandler+0xe2c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d02c      	beq.n	8003312 <HAL_DMA_IRQHandler+0xdaa>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a36      	ldr	r2, [pc, #216]	; (8003398 <HAL_DMA_IRQHandler+0xe30>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d027      	beq.n	8003312 <HAL_DMA_IRQHandler+0xdaa>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a35      	ldr	r2, [pc, #212]	; (800339c <HAL_DMA_IRQHandler+0xe34>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d022      	beq.n	8003312 <HAL_DMA_IRQHandler+0xdaa>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a33      	ldr	r2, [pc, #204]	; (80033a0 <HAL_DMA_IRQHandler+0xe38>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01d      	beq.n	8003312 <HAL_DMA_IRQHandler+0xdaa>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a32      	ldr	r2, [pc, #200]	; (80033a4 <HAL_DMA_IRQHandler+0xe3c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d018      	beq.n	8003312 <HAL_DMA_IRQHandler+0xdaa>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a30      	ldr	r2, [pc, #192]	; (80033a8 <HAL_DMA_IRQHandler+0xe40>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_DMA_IRQHandler+0xdaa>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a2f      	ldr	r2, [pc, #188]	; (80033ac <HAL_DMA_IRQHandler+0xe44>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00e      	beq.n	8003312 <HAL_DMA_IRQHandler+0xdaa>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a2d      	ldr	r2, [pc, #180]	; (80033b0 <HAL_DMA_IRQHandler+0xe48>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d009      	beq.n	8003312 <HAL_DMA_IRQHandler+0xdaa>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <HAL_DMA_IRQHandler+0xe4c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d004      	beq.n	8003312 <HAL_DMA_IRQHandler+0xdaa>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <HAL_DMA_IRQHandler+0xe50>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d108      	bne.n	8003324 <HAL_DMA_IRQHandler+0xdbc>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 021c 	bic.w	r2, r2, #28
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	e007      	b.n	8003334 <HAL_DMA_IRQHandler+0xdcc>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 020e 	bic.w	r2, r2, #14
 8003332:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2201      	movs	r2, #1
 800333e:	409a      	lsls	r2, r3
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
 800336a:	e004      	b.n	8003376 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800336c:	bf00      	nop
 800336e:	e002      	b.n	8003376 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003370:	bf00      	nop
 8003372:	e000      	b.n	8003376 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003374:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003376:	3728      	adds	r7, #40	; 0x28
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40020010 	.word	0x40020010
 8003380:	40020028 	.word	0x40020028
 8003384:	40020040 	.word	0x40020040
 8003388:	40020058 	.word	0x40020058
 800338c:	40020070 	.word	0x40020070
 8003390:	40020088 	.word	0x40020088
 8003394:	400200a0 	.word	0x400200a0
 8003398:	400200b8 	.word	0x400200b8
 800339c:	40020410 	.word	0x40020410
 80033a0:	40020428 	.word	0x40020428
 80033a4:	40020440 	.word	0x40020440
 80033a8:	40020458 	.word	0x40020458
 80033ac:	40020470 	.word	0x40020470
 80033b0:	40020488 	.word	0x40020488
 80033b4:	400204a0 	.word	0x400204a0
 80033b8:	400204b8 	.word	0x400204b8

080033bc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a7f      	ldr	r2, [pc, #508]	; (80035f0 <DMA_SetConfig+0x21c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d072      	beq.n	80034de <DMA_SetConfig+0x10a>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a7d      	ldr	r2, [pc, #500]	; (80035f4 <DMA_SetConfig+0x220>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d06d      	beq.n	80034de <DMA_SetConfig+0x10a>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a7c      	ldr	r2, [pc, #496]	; (80035f8 <DMA_SetConfig+0x224>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d068      	beq.n	80034de <DMA_SetConfig+0x10a>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a7a      	ldr	r2, [pc, #488]	; (80035fc <DMA_SetConfig+0x228>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d063      	beq.n	80034de <DMA_SetConfig+0x10a>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a79      	ldr	r2, [pc, #484]	; (8003600 <DMA_SetConfig+0x22c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d05e      	beq.n	80034de <DMA_SetConfig+0x10a>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a77      	ldr	r2, [pc, #476]	; (8003604 <DMA_SetConfig+0x230>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d059      	beq.n	80034de <DMA_SetConfig+0x10a>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a76      	ldr	r2, [pc, #472]	; (8003608 <DMA_SetConfig+0x234>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d054      	beq.n	80034de <DMA_SetConfig+0x10a>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a74      	ldr	r2, [pc, #464]	; (800360c <DMA_SetConfig+0x238>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d04f      	beq.n	80034de <DMA_SetConfig+0x10a>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a73      	ldr	r2, [pc, #460]	; (8003610 <DMA_SetConfig+0x23c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d04a      	beq.n	80034de <DMA_SetConfig+0x10a>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a71      	ldr	r2, [pc, #452]	; (8003614 <DMA_SetConfig+0x240>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d045      	beq.n	80034de <DMA_SetConfig+0x10a>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a70      	ldr	r2, [pc, #448]	; (8003618 <DMA_SetConfig+0x244>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d040      	beq.n	80034de <DMA_SetConfig+0x10a>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a6e      	ldr	r2, [pc, #440]	; (800361c <DMA_SetConfig+0x248>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d03b      	beq.n	80034de <DMA_SetConfig+0x10a>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6d      	ldr	r2, [pc, #436]	; (8003620 <DMA_SetConfig+0x24c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d036      	beq.n	80034de <DMA_SetConfig+0x10a>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a6b      	ldr	r2, [pc, #428]	; (8003624 <DMA_SetConfig+0x250>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d031      	beq.n	80034de <DMA_SetConfig+0x10a>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a6a      	ldr	r2, [pc, #424]	; (8003628 <DMA_SetConfig+0x254>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d02c      	beq.n	80034de <DMA_SetConfig+0x10a>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a68      	ldr	r2, [pc, #416]	; (800362c <DMA_SetConfig+0x258>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d027      	beq.n	80034de <DMA_SetConfig+0x10a>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a67      	ldr	r2, [pc, #412]	; (8003630 <DMA_SetConfig+0x25c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d022      	beq.n	80034de <DMA_SetConfig+0x10a>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a65      	ldr	r2, [pc, #404]	; (8003634 <DMA_SetConfig+0x260>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01d      	beq.n	80034de <DMA_SetConfig+0x10a>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a64      	ldr	r2, [pc, #400]	; (8003638 <DMA_SetConfig+0x264>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d018      	beq.n	80034de <DMA_SetConfig+0x10a>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a62      	ldr	r2, [pc, #392]	; (800363c <DMA_SetConfig+0x268>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <DMA_SetConfig+0x10a>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a61      	ldr	r2, [pc, #388]	; (8003640 <DMA_SetConfig+0x26c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <DMA_SetConfig+0x10a>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a5f      	ldr	r2, [pc, #380]	; (8003644 <DMA_SetConfig+0x270>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <DMA_SetConfig+0x10a>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a5e      	ldr	r2, [pc, #376]	; (8003648 <DMA_SetConfig+0x274>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <DMA_SetConfig+0x10a>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a5c      	ldr	r2, [pc, #368]	; (800364c <DMA_SetConfig+0x278>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <DMA_SetConfig+0x10e>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <DMA_SetConfig+0x110>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00d      	beq.n	8003504 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80034f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d004      	beq.n	8003504 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003502:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a39      	ldr	r2, [pc, #228]	; (80035f0 <DMA_SetConfig+0x21c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d04a      	beq.n	80035a4 <DMA_SetConfig+0x1d0>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a38      	ldr	r2, [pc, #224]	; (80035f4 <DMA_SetConfig+0x220>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d045      	beq.n	80035a4 <DMA_SetConfig+0x1d0>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a36      	ldr	r2, [pc, #216]	; (80035f8 <DMA_SetConfig+0x224>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d040      	beq.n	80035a4 <DMA_SetConfig+0x1d0>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a35      	ldr	r2, [pc, #212]	; (80035fc <DMA_SetConfig+0x228>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d03b      	beq.n	80035a4 <DMA_SetConfig+0x1d0>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a33      	ldr	r2, [pc, #204]	; (8003600 <DMA_SetConfig+0x22c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d036      	beq.n	80035a4 <DMA_SetConfig+0x1d0>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a32      	ldr	r2, [pc, #200]	; (8003604 <DMA_SetConfig+0x230>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d031      	beq.n	80035a4 <DMA_SetConfig+0x1d0>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a30      	ldr	r2, [pc, #192]	; (8003608 <DMA_SetConfig+0x234>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d02c      	beq.n	80035a4 <DMA_SetConfig+0x1d0>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2f      	ldr	r2, [pc, #188]	; (800360c <DMA_SetConfig+0x238>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d027      	beq.n	80035a4 <DMA_SetConfig+0x1d0>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a2d      	ldr	r2, [pc, #180]	; (8003610 <DMA_SetConfig+0x23c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d022      	beq.n	80035a4 <DMA_SetConfig+0x1d0>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a2c      	ldr	r2, [pc, #176]	; (8003614 <DMA_SetConfig+0x240>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d01d      	beq.n	80035a4 <DMA_SetConfig+0x1d0>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a2a      	ldr	r2, [pc, #168]	; (8003618 <DMA_SetConfig+0x244>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d018      	beq.n	80035a4 <DMA_SetConfig+0x1d0>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a29      	ldr	r2, [pc, #164]	; (800361c <DMA_SetConfig+0x248>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d013      	beq.n	80035a4 <DMA_SetConfig+0x1d0>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a27      	ldr	r2, [pc, #156]	; (8003620 <DMA_SetConfig+0x24c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00e      	beq.n	80035a4 <DMA_SetConfig+0x1d0>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a26      	ldr	r2, [pc, #152]	; (8003624 <DMA_SetConfig+0x250>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d009      	beq.n	80035a4 <DMA_SetConfig+0x1d0>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a24      	ldr	r2, [pc, #144]	; (8003628 <DMA_SetConfig+0x254>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <DMA_SetConfig+0x1d0>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a23      	ldr	r2, [pc, #140]	; (800362c <DMA_SetConfig+0x258>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d101      	bne.n	80035a8 <DMA_SetConfig+0x1d4>
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <DMA_SetConfig+0x1d6>
 80035a8:	2300      	movs	r3, #0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d059      	beq.n	8003662 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	223f      	movs	r2, #63	; 0x3f
 80035b8:	409a      	lsls	r2, r3
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035cc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d138      	bne.n	8003650 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80035ee:	e086      	b.n	80036fe <DMA_SetConfig+0x32a>
 80035f0:	40020010 	.word	0x40020010
 80035f4:	40020028 	.word	0x40020028
 80035f8:	40020040 	.word	0x40020040
 80035fc:	40020058 	.word	0x40020058
 8003600:	40020070 	.word	0x40020070
 8003604:	40020088 	.word	0x40020088
 8003608:	400200a0 	.word	0x400200a0
 800360c:	400200b8 	.word	0x400200b8
 8003610:	40020410 	.word	0x40020410
 8003614:	40020428 	.word	0x40020428
 8003618:	40020440 	.word	0x40020440
 800361c:	40020458 	.word	0x40020458
 8003620:	40020470 	.word	0x40020470
 8003624:	40020488 	.word	0x40020488
 8003628:	400204a0 	.word	0x400204a0
 800362c:	400204b8 	.word	0x400204b8
 8003630:	58025408 	.word	0x58025408
 8003634:	5802541c 	.word	0x5802541c
 8003638:	58025430 	.word	0x58025430
 800363c:	58025444 	.word	0x58025444
 8003640:	58025458 	.word	0x58025458
 8003644:	5802546c 	.word	0x5802546c
 8003648:	58025480 	.word	0x58025480
 800364c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	60da      	str	r2, [r3, #12]
}
 8003660:	e04d      	b.n	80036fe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a29      	ldr	r2, [pc, #164]	; (800370c <DMA_SetConfig+0x338>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <DMA_SetConfig+0x2de>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a27      	ldr	r2, [pc, #156]	; (8003710 <DMA_SetConfig+0x33c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01d      	beq.n	80036b2 <DMA_SetConfig+0x2de>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a26      	ldr	r2, [pc, #152]	; (8003714 <DMA_SetConfig+0x340>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <DMA_SetConfig+0x2de>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a24      	ldr	r2, [pc, #144]	; (8003718 <DMA_SetConfig+0x344>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <DMA_SetConfig+0x2de>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a23      	ldr	r2, [pc, #140]	; (800371c <DMA_SetConfig+0x348>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <DMA_SetConfig+0x2de>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a21      	ldr	r2, [pc, #132]	; (8003720 <DMA_SetConfig+0x34c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <DMA_SetConfig+0x2de>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a20      	ldr	r2, [pc, #128]	; (8003724 <DMA_SetConfig+0x350>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <DMA_SetConfig+0x2de>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <DMA_SetConfig+0x354>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <DMA_SetConfig+0x2e2>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <DMA_SetConfig+0x2e4>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d020      	beq.n	80036fe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	2201      	movs	r2, #1
 80036c6:	409a      	lsls	r2, r3
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d108      	bne.n	80036ee <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	60da      	str	r2, [r3, #12]
}
 80036ec:	e007      	b.n	80036fe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	60da      	str	r2, [r3, #12]
}
 80036fe:	bf00      	nop
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	58025408 	.word	0x58025408
 8003710:	5802541c 	.word	0x5802541c
 8003714:	58025430 	.word	0x58025430
 8003718:	58025444 	.word	0x58025444
 800371c:	58025458 	.word	0x58025458
 8003720:	5802546c 	.word	0x5802546c
 8003724:	58025480 	.word	0x58025480
 8003728:	58025494 	.word	0x58025494

0800372c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a42      	ldr	r2, [pc, #264]	; (8003844 <DMA_CalcBaseAndBitshift+0x118>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d04a      	beq.n	80037d4 <DMA_CalcBaseAndBitshift+0xa8>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a41      	ldr	r2, [pc, #260]	; (8003848 <DMA_CalcBaseAndBitshift+0x11c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d045      	beq.n	80037d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a3f      	ldr	r2, [pc, #252]	; (800384c <DMA_CalcBaseAndBitshift+0x120>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d040      	beq.n	80037d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a3e      	ldr	r2, [pc, #248]	; (8003850 <DMA_CalcBaseAndBitshift+0x124>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d03b      	beq.n	80037d4 <DMA_CalcBaseAndBitshift+0xa8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a3c      	ldr	r2, [pc, #240]	; (8003854 <DMA_CalcBaseAndBitshift+0x128>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d036      	beq.n	80037d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a3b      	ldr	r2, [pc, #236]	; (8003858 <DMA_CalcBaseAndBitshift+0x12c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d031      	beq.n	80037d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a39      	ldr	r2, [pc, #228]	; (800385c <DMA_CalcBaseAndBitshift+0x130>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d02c      	beq.n	80037d4 <DMA_CalcBaseAndBitshift+0xa8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a38      	ldr	r2, [pc, #224]	; (8003860 <DMA_CalcBaseAndBitshift+0x134>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d027      	beq.n	80037d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a36      	ldr	r2, [pc, #216]	; (8003864 <DMA_CalcBaseAndBitshift+0x138>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d022      	beq.n	80037d4 <DMA_CalcBaseAndBitshift+0xa8>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a35      	ldr	r2, [pc, #212]	; (8003868 <DMA_CalcBaseAndBitshift+0x13c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d01d      	beq.n	80037d4 <DMA_CalcBaseAndBitshift+0xa8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a33      	ldr	r2, [pc, #204]	; (800386c <DMA_CalcBaseAndBitshift+0x140>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d018      	beq.n	80037d4 <DMA_CalcBaseAndBitshift+0xa8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a32      	ldr	r2, [pc, #200]	; (8003870 <DMA_CalcBaseAndBitshift+0x144>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d013      	beq.n	80037d4 <DMA_CalcBaseAndBitshift+0xa8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a30      	ldr	r2, [pc, #192]	; (8003874 <DMA_CalcBaseAndBitshift+0x148>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00e      	beq.n	80037d4 <DMA_CalcBaseAndBitshift+0xa8>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2f      	ldr	r2, [pc, #188]	; (8003878 <DMA_CalcBaseAndBitshift+0x14c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d009      	beq.n	80037d4 <DMA_CalcBaseAndBitshift+0xa8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a2d      	ldr	r2, [pc, #180]	; (800387c <DMA_CalcBaseAndBitshift+0x150>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d004      	beq.n	80037d4 <DMA_CalcBaseAndBitshift+0xa8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a2c      	ldr	r2, [pc, #176]	; (8003880 <DMA_CalcBaseAndBitshift+0x154>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d101      	bne.n	80037d8 <DMA_CalcBaseAndBitshift+0xac>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <DMA_CalcBaseAndBitshift+0xae>
 80037d8:	2300      	movs	r3, #0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d024      	beq.n	8003828 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	3b10      	subs	r3, #16
 80037e6:	4a27      	ldr	r2, [pc, #156]	; (8003884 <DMA_CalcBaseAndBitshift+0x158>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	4a24      	ldr	r2, [pc, #144]	; (8003888 <DMA_CalcBaseAndBitshift+0x15c>)
 80037f8:	5cd3      	ldrb	r3, [r2, r3]
 80037fa:	461a      	mov	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d908      	bls.n	8003818 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	4b1f      	ldr	r3, [pc, #124]	; (800388c <DMA_CalcBaseAndBitshift+0x160>)
 800380e:	4013      	ands	r3, r2
 8003810:	1d1a      	adds	r2, r3, #4
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	659a      	str	r2, [r3, #88]	; 0x58
 8003816:	e00d      	b.n	8003834 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	4b1b      	ldr	r3, [pc, #108]	; (800388c <DMA_CalcBaseAndBitshift+0x160>)
 8003820:	4013      	ands	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6593      	str	r3, [r2, #88]	; 0x58
 8003826:	e005      	b.n	8003834 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40020010 	.word	0x40020010
 8003848:	40020028 	.word	0x40020028
 800384c:	40020040 	.word	0x40020040
 8003850:	40020058 	.word	0x40020058
 8003854:	40020070 	.word	0x40020070
 8003858:	40020088 	.word	0x40020088
 800385c:	400200a0 	.word	0x400200a0
 8003860:	400200b8 	.word	0x400200b8
 8003864:	40020410 	.word	0x40020410
 8003868:	40020428 	.word	0x40020428
 800386c:	40020440 	.word	0x40020440
 8003870:	40020458 	.word	0x40020458
 8003874:	40020470 	.word	0x40020470
 8003878:	40020488 	.word	0x40020488
 800387c:	400204a0 	.word	0x400204a0
 8003880:	400204b8 	.word	0x400204b8
 8003884:	aaaaaaab 	.word	0xaaaaaaab
 8003888:	08009034 	.word	0x08009034
 800388c:	fffffc00 	.word	0xfffffc00

08003890 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d120      	bne.n	80038e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d858      	bhi.n	800395e <DMA_CheckFifoParam+0xce>
 80038ac:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <DMA_CheckFifoParam+0x24>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	080038c5 	.word	0x080038c5
 80038b8:	080038d7 	.word	0x080038d7
 80038bc:	080038c5 	.word	0x080038c5
 80038c0:	0800395f 	.word	0x0800395f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d048      	beq.n	8003962 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80038d4:	e045      	b.n	8003962 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038de:	d142      	bne.n	8003966 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80038e4:	e03f      	b.n	8003966 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ee:	d123      	bne.n	8003938 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d838      	bhi.n	800396a <DMA_CheckFifoParam+0xda>
 80038f8:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <DMA_CheckFifoParam+0x70>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	08003911 	.word	0x08003911
 8003904:	08003917 	.word	0x08003917
 8003908:	08003911 	.word	0x08003911
 800390c:	08003929 	.word	0x08003929
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
        break;
 8003914:	e030      	b.n	8003978 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d025      	beq.n	800396e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003926:	e022      	b.n	800396e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003930:	d11f      	bne.n	8003972 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003936:	e01c      	b.n	8003972 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	2b02      	cmp	r3, #2
 800393e:	d902      	bls.n	8003946 <DMA_CheckFifoParam+0xb6>
 8003940:	2b03      	cmp	r3, #3
 8003942:	d003      	beq.n	800394c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003944:	e018      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	73fb      	strb	r3, [r7, #15]
        break;
 800394a:	e015      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00e      	beq.n	8003976 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
    break;
 800395c:	e00b      	b.n	8003976 <DMA_CheckFifoParam+0xe6>
        break;
 800395e:	bf00      	nop
 8003960:	e00a      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
        break;
 8003962:	bf00      	nop
 8003964:	e008      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
        break;
 8003966:	bf00      	nop
 8003968:	e006      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
        break;
 800396a:	bf00      	nop
 800396c:	e004      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
        break;
 800396e:	bf00      	nop
 8003970:	e002      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
        break;
 8003972:	bf00      	nop
 8003974:	e000      	b.n	8003978 <DMA_CheckFifoParam+0xe8>
    break;
 8003976:	bf00      	nop
    }
  }

  return status;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop

08003988 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a38      	ldr	r2, [pc, #224]	; (8003a7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d022      	beq.n	80039e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a36      	ldr	r2, [pc, #216]	; (8003a80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01d      	beq.n	80039e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a35      	ldr	r2, [pc, #212]	; (8003a84 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d018      	beq.n	80039e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a33      	ldr	r2, [pc, #204]	; (8003a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a32      	ldr	r2, [pc, #200]	; (8003a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a30      	ldr	r2, [pc, #192]	; (8003a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d009      	beq.n	80039e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a2f      	ldr	r2, [pc, #188]	; (8003a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a2d      	ldr	r2, [pc, #180]	; (8003a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d101      	bne.n	80039ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01a      	beq.n	8003a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	3b08      	subs	r3, #8
 80039f8:	4a28      	ldr	r2, [pc, #160]	; (8003a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a24      	ldr	r2, [pc, #144]	; (8003aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003a14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003a24:	e024      	b.n	8003a70 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	3b10      	subs	r3, #16
 8003a2e:	4a1e      	ldr	r2, [pc, #120]	; (8003aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4a1c      	ldr	r2, [pc, #112]	; (8003aac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d806      	bhi.n	8003a4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d902      	bls.n	8003a4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3308      	adds	r3, #8
 8003a4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	461a      	mov	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a16      	ldr	r2, [pc, #88]	; (8003ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003a60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	2201      	movs	r2, #1
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	58025408 	.word	0x58025408
 8003a80:	5802541c 	.word	0x5802541c
 8003a84:	58025430 	.word	0x58025430
 8003a88:	58025444 	.word	0x58025444
 8003a8c:	58025458 	.word	0x58025458
 8003a90:	5802546c 	.word	0x5802546c
 8003a94:	58025480 	.word	0x58025480
 8003a98:	58025494 	.word	0x58025494
 8003a9c:	cccccccd 	.word	0xcccccccd
 8003aa0:	16009600 	.word	0x16009600
 8003aa4:	58025880 	.word	0x58025880
 8003aa8:	aaaaaaab 	.word	0xaaaaaaab
 8003aac:	400204b8 	.word	0x400204b8
 8003ab0:	4002040f 	.word	0x4002040f
 8003ab4:	10008200 	.word	0x10008200
 8003ab8:	40020880 	.word	0x40020880

08003abc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d04a      	beq.n	8003b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d847      	bhi.n	8003b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a25      	ldr	r2, [pc, #148]	; (8003b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d022      	beq.n	8003b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a24      	ldr	r2, [pc, #144]	; (8003b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d01d      	beq.n	8003b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d018      	beq.n	8003b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a21      	ldr	r2, [pc, #132]	; (8003b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d013      	beq.n	8003b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1f      	ldr	r2, [pc, #124]	; (8003b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00e      	beq.n	8003b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1e      	ldr	r2, [pc, #120]	; (8003b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d009      	beq.n	8003b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1c      	ldr	r2, [pc, #112]	; (8003b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1b      	ldr	r2, [pc, #108]	; (8003b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d101      	bne.n	8003b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4b17      	ldr	r3, [pc, #92]	; (8003b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a15      	ldr	r2, [pc, #84]	; (8003b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003b44:	671a      	str	r2, [r3, #112]	; 0x70
 8003b46:	e009      	b.n	8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	461a      	mov	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a11      	ldr	r2, [pc, #68]	; (8003ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003b5a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	2201      	movs	r2, #1
 8003b62:	409a      	lsls	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	58025408 	.word	0x58025408
 8003b78:	5802541c 	.word	0x5802541c
 8003b7c:	58025430 	.word	0x58025430
 8003b80:	58025444 	.word	0x58025444
 8003b84:	58025458 	.word	0x58025458
 8003b88:	5802546c 	.word	0x5802546c
 8003b8c:	58025480 	.word	0x58025480
 8003b90:	58025494 	.word	0x58025494
 8003b94:	1600963f 	.word	0x1600963f
 8003b98:	58025940 	.word	0x58025940
 8003b9c:	1000823f 	.word	0x1000823f
 8003ba0:	40020940 	.word	0x40020940

08003ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b089      	sub	sp, #36	; 0x24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003bb2:	4b86      	ldr	r3, [pc, #536]	; (8003dcc <HAL_GPIO_Init+0x228>)
 8003bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bb6:	e18c      	b.n	8003ed2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 817e 	beq.w	8003ecc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d005      	beq.n	8003be8 <HAL_GPIO_Init+0x44>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d130      	bne.n	8003c4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c1e:	2201      	movs	r2, #1
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	f003 0201 	and.w	r2, r3, #1
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d017      	beq.n	8003c86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	2203      	movs	r2, #3
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43db      	mvns	r3, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d123      	bne.n	8003cda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	08da      	lsrs	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3208      	adds	r2, #8
 8003c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	220f      	movs	r2, #15
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	08da      	lsrs	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3208      	adds	r2, #8
 8003cd4:	69b9      	ldr	r1, [r7, #24]
 8003cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 0203 	and.w	r2, r3, #3
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80d8 	beq.w	8003ecc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1c:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <HAL_GPIO_Init+0x22c>)
 8003d1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d22:	4a2b      	ldr	r2, [pc, #172]	; (8003dd0 <HAL_GPIO_Init+0x22c>)
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d2c:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <HAL_GPIO_Init+0x22c>)
 8003d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d3a:	4a26      	ldr	r2, [pc, #152]	; (8003dd4 <HAL_GPIO_Init+0x230>)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	089b      	lsrs	r3, r3, #2
 8003d40:	3302      	adds	r3, #2
 8003d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	220f      	movs	r2, #15
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a1d      	ldr	r2, [pc, #116]	; (8003dd8 <HAL_GPIO_Init+0x234>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d04a      	beq.n	8003dfc <HAL_GPIO_Init+0x258>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <HAL_GPIO_Init+0x238>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d02b      	beq.n	8003dc6 <HAL_GPIO_Init+0x222>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a1b      	ldr	r2, [pc, #108]	; (8003de0 <HAL_GPIO_Init+0x23c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d025      	beq.n	8003dc2 <HAL_GPIO_Init+0x21e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a1a      	ldr	r2, [pc, #104]	; (8003de4 <HAL_GPIO_Init+0x240>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01f      	beq.n	8003dbe <HAL_GPIO_Init+0x21a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a19      	ldr	r2, [pc, #100]	; (8003de8 <HAL_GPIO_Init+0x244>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d019      	beq.n	8003dba <HAL_GPIO_Init+0x216>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a18      	ldr	r2, [pc, #96]	; (8003dec <HAL_GPIO_Init+0x248>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d013      	beq.n	8003db6 <HAL_GPIO_Init+0x212>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a17      	ldr	r2, [pc, #92]	; (8003df0 <HAL_GPIO_Init+0x24c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00d      	beq.n	8003db2 <HAL_GPIO_Init+0x20e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a16      	ldr	r2, [pc, #88]	; (8003df4 <HAL_GPIO_Init+0x250>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d007      	beq.n	8003dae <HAL_GPIO_Init+0x20a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <HAL_GPIO_Init+0x254>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d101      	bne.n	8003daa <HAL_GPIO_Init+0x206>
 8003da6:	2309      	movs	r3, #9
 8003da8:	e029      	b.n	8003dfe <HAL_GPIO_Init+0x25a>
 8003daa:	230a      	movs	r3, #10
 8003dac:	e027      	b.n	8003dfe <HAL_GPIO_Init+0x25a>
 8003dae:	2307      	movs	r3, #7
 8003db0:	e025      	b.n	8003dfe <HAL_GPIO_Init+0x25a>
 8003db2:	2306      	movs	r3, #6
 8003db4:	e023      	b.n	8003dfe <HAL_GPIO_Init+0x25a>
 8003db6:	2305      	movs	r3, #5
 8003db8:	e021      	b.n	8003dfe <HAL_GPIO_Init+0x25a>
 8003dba:	2304      	movs	r3, #4
 8003dbc:	e01f      	b.n	8003dfe <HAL_GPIO_Init+0x25a>
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e01d      	b.n	8003dfe <HAL_GPIO_Init+0x25a>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e01b      	b.n	8003dfe <HAL_GPIO_Init+0x25a>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e019      	b.n	8003dfe <HAL_GPIO_Init+0x25a>
 8003dca:	bf00      	nop
 8003dcc:	58000080 	.word	0x58000080
 8003dd0:	58024400 	.word	0x58024400
 8003dd4:	58000400 	.word	0x58000400
 8003dd8:	58020000 	.word	0x58020000
 8003ddc:	58020400 	.word	0x58020400
 8003de0:	58020800 	.word	0x58020800
 8003de4:	58020c00 	.word	0x58020c00
 8003de8:	58021000 	.word	0x58021000
 8003dec:	58021400 	.word	0x58021400
 8003df0:	58021800 	.word	0x58021800
 8003df4:	58021c00 	.word	0x58021c00
 8003df8:	58022400 	.word	0x58022400
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	f002 0203 	and.w	r2, r2, #3
 8003e04:	0092      	lsls	r2, r2, #2
 8003e06:	4093      	lsls	r3, r2
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e0e:	4938      	ldr	r1, [pc, #224]	; (8003ef0 <HAL_GPIO_Init+0x34c>)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	089b      	lsrs	r3, r3, #2
 8003e14:	3302      	adds	r3, #2
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f47f ae6b 	bne.w	8003bb8 <HAL_GPIO_Init+0x14>
  }
}
 8003ee2:	bf00      	nop
 8003ee4:	bf00      	nop
 8003ee6:	3724      	adds	r7, #36	; 0x24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	58000400 	.word	0x58000400

08003ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	807b      	strh	r3, [r7, #2]
 8003f00:	4613      	mov	r3, r2
 8003f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f04:	787b      	ldrb	r3, [r7, #1]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003f10:	e003      	b.n	8003f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003f12:	887b      	ldrh	r3, [r7, #2]
 8003f14:	041a      	lsls	r2, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	619a      	str	r2, [r3, #24]
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003f30:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <HAL_PWREx_ConfigSupply+0x70>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d00a      	beq.n	8003f52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f3c:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <HAL_PWREx_ConfigSupply+0x70>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d001      	beq.n	8003f4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e01f      	b.n	8003f8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e01d      	b.n	8003f8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f52:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <HAL_PWREx_ConfigSupply+0x70>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f023 0207 	bic.w	r2, r3, #7
 8003f5a:	490f      	ldr	r1, [pc, #60]	; (8003f98 <HAL_PWREx_ConfigSupply+0x70>)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f62:	f7fd fbff 	bl	8001764 <HAL_GetTick>
 8003f66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f68:	e009      	b.n	8003f7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f6a:	f7fd fbfb 	bl	8001764 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f78:	d901      	bls.n	8003f7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e007      	b.n	8003f8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f7e:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <HAL_PWREx_ConfigSupply+0x70>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8a:	d1ee      	bne.n	8003f6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	58024800 	.word	0x58024800

08003f9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08c      	sub	sp, #48	; 0x30
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e3c8      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8087 	beq.w	80040ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fbc:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fc6:	4b86      	ldr	r3, [pc, #536]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	2b10      	cmp	r3, #16
 8003fd0:	d007      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x46>
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd4:	2b18      	cmp	r3, #24
 8003fd6:	d110      	bne.n	8003ffa <HAL_RCC_OscConfig+0x5e>
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d10b      	bne.n	8003ffa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe2:	4b7f      	ldr	r3, [pc, #508]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d06c      	beq.n	80040c8 <HAL_RCC_OscConfig+0x12c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d168      	bne.n	80040c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e3a2      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004002:	d106      	bne.n	8004012 <HAL_RCC_OscConfig+0x76>
 8004004:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a75      	ldr	r2, [pc, #468]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 800400a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	e02e      	b.n	8004070 <HAL_RCC_OscConfig+0xd4>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0x98>
 800401a:	4b71      	ldr	r3, [pc, #452]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a70      	ldr	r2, [pc, #448]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8004020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	4b6e      	ldr	r3, [pc, #440]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a6d      	ldr	r2, [pc, #436]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 800402c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	e01d      	b.n	8004070 <HAL_RCC_OscConfig+0xd4>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800403c:	d10c      	bne.n	8004058 <HAL_RCC_OscConfig+0xbc>
 800403e:	4b68      	ldr	r3, [pc, #416]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a67      	ldr	r2, [pc, #412]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8004044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	4b65      	ldr	r3, [pc, #404]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a64      	ldr	r2, [pc, #400]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e00b      	b.n	8004070 <HAL_RCC_OscConfig+0xd4>
 8004058:	4b61      	ldr	r3, [pc, #388]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a60      	ldr	r2, [pc, #384]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 800405e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b5e      	ldr	r3, [pc, #376]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a5d      	ldr	r2, [pc, #372]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 800406a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800406e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d013      	beq.n	80040a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fd fb74 	bl	8001764 <HAL_GetTick>
 800407c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004080:	f7fd fb70 	bl	8001764 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b64      	cmp	r3, #100	; 0x64
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e356      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004092:	4b53      	ldr	r3, [pc, #332]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0xe4>
 800409e:	e014      	b.n	80040ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fd fb60 	bl	8001764 <HAL_GetTick>
 80040a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a8:	f7fd fb5c 	bl	8001764 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b64      	cmp	r3, #100	; 0x64
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e342      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040ba:	4b49      	ldr	r3, [pc, #292]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0x10c>
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 808c 	beq.w	80041f0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d8:	4b41      	ldr	r3, [pc, #260]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040e2:	4b3f      	ldr	r3, [pc, #252]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_RCC_OscConfig+0x162>
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	2b18      	cmp	r3, #24
 80040f2:	d137      	bne.n	8004164 <HAL_RCC_OscConfig+0x1c8>
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d132      	bne.n	8004164 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040fe:	4b38      	ldr	r3, [pc, #224]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_RCC_OscConfig+0x17a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e314      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004116:	4b32      	ldr	r3, [pc, #200]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 0219 	bic.w	r2, r3, #25
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	492f      	ldr	r1, [pc, #188]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fd fb1c 	bl	8001764 <HAL_GetTick>
 800412c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004130:	f7fd fb18 	bl	8001764 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e2fe      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004142:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414e:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	061b      	lsls	r3, r3, #24
 800415c:	4920      	ldr	r1, [pc, #128]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004162:	e045      	b.n	80041f0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d026      	beq.n	80041ba <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800416c:	4b1c      	ldr	r3, [pc, #112]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f023 0219 	bic.w	r2, r3, #25
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4919      	ldr	r1, [pc, #100]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 800417a:	4313      	orrs	r3, r2
 800417c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417e:	f7fd faf1 	bl	8001764 <HAL_GetTick>
 8004182:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004186:	f7fd faed 	bl	8001764 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e2d3      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004198:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a4:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	061b      	lsls	r3, r3, #24
 80041b2:	490b      	ldr	r1, [pc, #44]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	604b      	str	r3, [r1, #4]
 80041b8:	e01a      	b.n	80041f0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a08      	ldr	r2, [pc, #32]	; (80041e0 <HAL_RCC_OscConfig+0x244>)
 80041c0:	f023 0301 	bic.w	r3, r3, #1
 80041c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c6:	f7fd facd 	bl	8001764 <HAL_GetTick>
 80041ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041cc:	e00a      	b.n	80041e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ce:	f7fd fac9 	bl	8001764 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d903      	bls.n	80041e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e2af      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
 80041e0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041e4:	4b96      	ldr	r3, [pc, #600]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ee      	bne.n	80041ce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d06a      	beq.n	80042d2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041fc:	4b90      	ldr	r3, [pc, #576]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004204:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004206:	4b8e      	ldr	r3, [pc, #568]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b08      	cmp	r3, #8
 8004210:	d007      	beq.n	8004222 <HAL_RCC_OscConfig+0x286>
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b18      	cmp	r3, #24
 8004216:	d11b      	bne.n	8004250 <HAL_RCC_OscConfig+0x2b4>
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b01      	cmp	r3, #1
 8004220:	d116      	bne.n	8004250 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004222:	4b87      	ldr	r3, [pc, #540]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_RCC_OscConfig+0x29e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d001      	beq.n	800423a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e282      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800423a:	4b81      	ldr	r3, [pc, #516]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	061b      	lsls	r3, r3, #24
 8004248:	497d      	ldr	r1, [pc, #500]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 800424a:	4313      	orrs	r3, r2
 800424c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800424e:	e040      	b.n	80042d2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d023      	beq.n	80042a0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004258:	4b79      	ldr	r3, [pc, #484]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a78      	ldr	r2, [pc, #480]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 800425e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fd fa7e 	bl	8001764 <HAL_GetTick>
 8004268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800426c:	f7fd fa7a 	bl	8001764 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e260      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800427e:	4b70      	ldr	r3, [pc, #448]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800428a:	4b6d      	ldr	r3, [pc, #436]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	061b      	lsls	r3, r3, #24
 8004298:	4969      	ldr	r1, [pc, #420]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 800429a:	4313      	orrs	r3, r2
 800429c:	60cb      	str	r3, [r1, #12]
 800429e:	e018      	b.n	80042d2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80042a0:	4b67      	ldr	r3, [pc, #412]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a66      	ldr	r2, [pc, #408]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 80042a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fd fa5a 	bl	8001764 <HAL_GetTick>
 80042b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80042b4:	f7fd fa56 	bl	8001764 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e23c      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042c6:	4b5e      	ldr	r3, [pc, #376]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d036      	beq.n	800434c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d019      	beq.n	800431a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e6:	4b56      	ldr	r3, [pc, #344]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 80042e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ea:	4a55      	ldr	r2, [pc, #340]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f2:	f7fd fa37 	bl	8001764 <HAL_GetTick>
 80042f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fa:	f7fd fa33 	bl	8001764 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e219      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800430c:	4b4c      	ldr	r3, [pc, #304]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 800430e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCC_OscConfig+0x35e>
 8004318:	e018      	b.n	800434c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800431a:	4b49      	ldr	r3, [pc, #292]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 800431c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431e:	4a48      	ldr	r2, [pc, #288]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 8004320:	f023 0301 	bic.w	r3, r3, #1
 8004324:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004326:	f7fd fa1d 	bl	8001764 <HAL_GetTick>
 800432a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800432e:	f7fd fa19 	bl	8001764 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e1ff      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004340:	4b3f      	ldr	r3, [pc, #252]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 8004342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f0      	bne.n	800432e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d036      	beq.n	80043c6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d019      	beq.n	8004394 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004360:	4b37      	ldr	r3, [pc, #220]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a36      	ldr	r2, [pc, #216]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 8004366:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800436a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800436c:	f7fd f9fa 	bl	8001764 <HAL_GetTick>
 8004370:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004374:	f7fd f9f6 	bl	8001764 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e1dc      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004386:	4b2e      	ldr	r3, [pc, #184]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0x3d8>
 8004392:	e018      	b.n	80043c6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004394:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a29      	ldr	r2, [pc, #164]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 800439a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800439e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043a0:	f7fd f9e0 	bl	8001764 <HAL_GetTick>
 80043a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043a8:	f7fd f9dc 	bl	8001764 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e1c2      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043ba:	4b21      	ldr	r3, [pc, #132]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8086 	beq.w	80044e0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043d4:	4b1b      	ldr	r3, [pc, #108]	; (8004444 <HAL_RCC_OscConfig+0x4a8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1a      	ldr	r2, [pc, #104]	; (8004444 <HAL_RCC_OscConfig+0x4a8>)
 80043da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043e0:	f7fd f9c0 	bl	8001764 <HAL_GetTick>
 80043e4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e8:	f7fd f9bc 	bl	8001764 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e1a2      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043fa:	4b12      	ldr	r3, [pc, #72]	; (8004444 <HAL_RCC_OscConfig+0x4a8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d106      	bne.n	800441c <HAL_RCC_OscConfig+0x480>
 800440e:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004412:	4a0b      	ldr	r2, [pc, #44]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 8004414:	f043 0301 	orr.w	r3, r3, #1
 8004418:	6713      	str	r3, [r2, #112]	; 0x70
 800441a:	e032      	b.n	8004482 <HAL_RCC_OscConfig+0x4e6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d111      	bne.n	8004448 <HAL_RCC_OscConfig+0x4ac>
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	4a05      	ldr	r2, [pc, #20]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	6713      	str	r3, [r2, #112]	; 0x70
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	4a02      	ldr	r2, [pc, #8]	; (8004440 <HAL_RCC_OscConfig+0x4a4>)
 8004436:	f023 0304 	bic.w	r3, r3, #4
 800443a:	6713      	str	r3, [r2, #112]	; 0x70
 800443c:	e021      	b.n	8004482 <HAL_RCC_OscConfig+0x4e6>
 800443e:	bf00      	nop
 8004440:	58024400 	.word	0x58024400
 8004444:	58024800 	.word	0x58024800
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b05      	cmp	r3, #5
 800444e:	d10c      	bne.n	800446a <HAL_RCC_OscConfig+0x4ce>
 8004450:	4b83      	ldr	r3, [pc, #524]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 8004452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004454:	4a82      	ldr	r2, [pc, #520]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 8004456:	f043 0304 	orr.w	r3, r3, #4
 800445a:	6713      	str	r3, [r2, #112]	; 0x70
 800445c:	4b80      	ldr	r3, [pc, #512]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	4a7f      	ldr	r2, [pc, #508]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	6713      	str	r3, [r2, #112]	; 0x70
 8004468:	e00b      	b.n	8004482 <HAL_RCC_OscConfig+0x4e6>
 800446a:	4b7d      	ldr	r3, [pc, #500]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	4a7c      	ldr	r2, [pc, #496]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	6713      	str	r3, [r2, #112]	; 0x70
 8004476:	4b7a      	ldr	r3, [pc, #488]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447a:	4a79      	ldr	r2, [pc, #484]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 800447c:	f023 0304 	bic.w	r3, r3, #4
 8004480:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d015      	beq.n	80044b6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448a:	f7fd f96b 	bl	8001764 <HAL_GetTick>
 800448e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004490:	e00a      	b.n	80044a8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004492:	f7fd f967 	bl	8001764 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e14b      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044a8:	4b6d      	ldr	r3, [pc, #436]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ee      	beq.n	8004492 <HAL_RCC_OscConfig+0x4f6>
 80044b4:	e014      	b.n	80044e0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b6:	f7fd f955 	bl	8001764 <HAL_GetTick>
 80044ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044bc:	e00a      	b.n	80044d4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044be:	f7fd f951 	bl	8001764 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e135      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044d4:	4b62      	ldr	r3, [pc, #392]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1ee      	bne.n	80044be <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 812a 	beq.w	800473e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80044ea:	4b5d      	ldr	r3, [pc, #372]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044f2:	2b18      	cmp	r3, #24
 80044f4:	f000 80ba 	beq.w	800466c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	f040 8095 	bne.w	800462c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004502:	4b57      	ldr	r3, [pc, #348]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a56      	ldr	r2, [pc, #344]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 8004508:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800450c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7fd f929 	bl	8001764 <HAL_GetTick>
 8004512:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004516:	f7fd f925 	bl	8001764 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e10b      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004528:	4b4d      	ldr	r3, [pc, #308]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f0      	bne.n	8004516 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004534:	4b4a      	ldr	r3, [pc, #296]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 8004536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004538:	4b4a      	ldr	r3, [pc, #296]	; (8004664 <HAL_RCC_OscConfig+0x6c8>)
 800453a:	4013      	ands	r3, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004544:	0112      	lsls	r2, r2, #4
 8004546:	430a      	orrs	r2, r1
 8004548:	4945      	ldr	r1, [pc, #276]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 800454a:	4313      	orrs	r3, r2
 800454c:	628b      	str	r3, [r1, #40]	; 0x28
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	3b01      	subs	r3, #1
 8004554:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455c:	3b01      	subs	r3, #1
 800455e:	025b      	lsls	r3, r3, #9
 8004560:	b29b      	uxth	r3, r3
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	3b01      	subs	r3, #1
 800456a:	041b      	lsls	r3, r3, #16
 800456c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004576:	3b01      	subs	r3, #1
 8004578:	061b      	lsls	r3, r3, #24
 800457a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800457e:	4938      	ldr	r1, [pc, #224]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 8004580:	4313      	orrs	r3, r2
 8004582:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004584:	4b36      	ldr	r3, [pc, #216]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	4a35      	ldr	r2, [pc, #212]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004590:	4b33      	ldr	r3, [pc, #204]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 8004592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004594:	4b34      	ldr	r3, [pc, #208]	; (8004668 <HAL_RCC_OscConfig+0x6cc>)
 8004596:	4013      	ands	r3, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800459c:	00d2      	lsls	r2, r2, #3
 800459e:	4930      	ldr	r1, [pc, #192]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80045a4:	4b2e      	ldr	r3, [pc, #184]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	f023 020c 	bic.w	r2, r3, #12
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	492b      	ldr	r1, [pc, #172]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80045b6:	4b2a      	ldr	r3, [pc, #168]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	f023 0202 	bic.w	r2, r3, #2
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c2:	4927      	ldr	r1, [pc, #156]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045c8:	4b25      	ldr	r3, [pc, #148]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	4a24      	ldr	r2, [pc, #144]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d4:	4b22      	ldr	r3, [pc, #136]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	4a21      	ldr	r2, [pc, #132]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80045da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80045e0:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80045e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80045ec:	4b1c      	ldr	r3, [pc, #112]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	4a1b      	ldr	r2, [pc, #108]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f8:	4b19      	ldr	r3, [pc, #100]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a18      	ldr	r2, [pc, #96]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 80045fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fd f8ae 	bl	8001764 <HAL_GetTick>
 8004608:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800460c:	f7fd f8aa 	bl	8001764 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e090      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800461e:	4b10      	ldr	r3, [pc, #64]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0x670>
 800462a:	e088      	b.n	800473e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800462c:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a0b      	ldr	r2, [pc, #44]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 8004632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fd f894 	bl	8001764 <HAL_GetTick>
 800463c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004640:	f7fd f890 	bl	8001764 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e076      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004652:	4b03      	ldr	r3, [pc, #12]	; (8004660 <HAL_RCC_OscConfig+0x6c4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x6a4>
 800465e:	e06e      	b.n	800473e <HAL_RCC_OscConfig+0x7a2>
 8004660:	58024400 	.word	0x58024400
 8004664:	fffffc0c 	.word	0xfffffc0c
 8004668:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800466c:	4b36      	ldr	r3, [pc, #216]	; (8004748 <HAL_RCC_OscConfig+0x7ac>)
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004672:	4b35      	ldr	r3, [pc, #212]	; (8004748 <HAL_RCC_OscConfig+0x7ac>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	2b01      	cmp	r3, #1
 800467e:	d031      	beq.n	80046e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f003 0203 	and.w	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d12a      	bne.n	80046e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800469a:	429a      	cmp	r2, r3
 800469c:	d122      	bne.n	80046e4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d11a      	bne.n	80046e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	0a5b      	lsrs	r3, r3, #9
 80046b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d111      	bne.n	80046e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	0c1b      	lsrs	r3, r3, #16
 80046c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d108      	bne.n	80046e4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	0e1b      	lsrs	r3, r3, #24
 80046d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e02b      	b.n	8004740 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80046e8:	4b17      	ldr	r3, [pc, #92]	; (8004748 <HAL_RCC_OscConfig+0x7ac>)
 80046ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ec:	08db      	lsrs	r3, r3, #3
 80046ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d01f      	beq.n	800473e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80046fe:	4b12      	ldr	r3, [pc, #72]	; (8004748 <HAL_RCC_OscConfig+0x7ac>)
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	4a11      	ldr	r2, [pc, #68]	; (8004748 <HAL_RCC_OscConfig+0x7ac>)
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800470a:	f7fd f82b 	bl	8001764 <HAL_GetTick>
 800470e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004710:	bf00      	nop
 8004712:	f7fd f827 	bl	8001764 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	4293      	cmp	r3, r2
 800471c:	d0f9      	beq.n	8004712 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800471e:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <HAL_RCC_OscConfig+0x7ac>)
 8004720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <HAL_RCC_OscConfig+0x7b0>)
 8004724:	4013      	ands	r3, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800472a:	00d2      	lsls	r2, r2, #3
 800472c:	4906      	ldr	r1, [pc, #24]	; (8004748 <HAL_RCC_OscConfig+0x7ac>)
 800472e:	4313      	orrs	r3, r2
 8004730:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004732:	4b05      	ldr	r3, [pc, #20]	; (8004748 <HAL_RCC_OscConfig+0x7ac>)
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	4a04      	ldr	r2, [pc, #16]	; (8004748 <HAL_RCC_OscConfig+0x7ac>)
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3730      	adds	r7, #48	; 0x30
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	58024400 	.word	0x58024400
 800474c:	ffff0007 	.word	0xffff0007

08004750 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e19c      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004764:	4b8a      	ldr	r3, [pc, #552]	; (8004990 <HAL_RCC_ClockConfig+0x240>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d910      	bls.n	8004794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004772:	4b87      	ldr	r3, [pc, #540]	; (8004990 <HAL_RCC_ClockConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f023 020f 	bic.w	r2, r3, #15
 800477a:	4985      	ldr	r1, [pc, #532]	; (8004990 <HAL_RCC_ClockConfig+0x240>)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b83      	ldr	r3, [pc, #524]	; (8004990 <HAL_RCC_ClockConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e184      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d010      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	4b7b      	ldr	r3, [pc, #492]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d908      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047b0:	4b78      	ldr	r3, [pc, #480]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	4975      	ldr	r1, [pc, #468]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d010      	beq.n	80047f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	4b70      	ldr	r3, [pc, #448]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047da:	429a      	cmp	r2, r3
 80047dc:	d908      	bls.n	80047f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047de:	4b6d      	ldr	r3, [pc, #436]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	496a      	ldr	r1, [pc, #424]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d010      	beq.n	800481e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	4b64      	ldr	r3, [pc, #400]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004808:	429a      	cmp	r2, r3
 800480a:	d908      	bls.n	800481e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800480c:	4b61      	ldr	r3, [pc, #388]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	495e      	ldr	r1, [pc, #376]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 800481a:	4313      	orrs	r3, r2
 800481c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b00      	cmp	r3, #0
 8004828:	d010      	beq.n	800484c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	4b59      	ldr	r3, [pc, #356]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004836:	429a      	cmp	r2, r3
 8004838:	d908      	bls.n	800484c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800483a:	4b56      	ldr	r3, [pc, #344]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	4953      	ldr	r1, [pc, #332]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004848:	4313      	orrs	r3, r2
 800484a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d010      	beq.n	800487a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	4b4d      	ldr	r3, [pc, #308]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	429a      	cmp	r2, r3
 8004866:	d908      	bls.n	800487a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004868:	4b4a      	ldr	r3, [pc, #296]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f023 020f 	bic.w	r2, r3, #15
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4947      	ldr	r1, [pc, #284]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004876:	4313      	orrs	r3, r2
 8004878:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d055      	beq.n	8004932 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004886:	4b43      	ldr	r3, [pc, #268]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	4940      	ldr	r1, [pc, #256]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004894:	4313      	orrs	r3, r2
 8004896:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d107      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048a0:	4b3c      	ldr	r3, [pc, #240]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d121      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0f6      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d107      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048b8:	4b36      	ldr	r3, [pc, #216]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d115      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0ea      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d107      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048d0:	4b30      	ldr	r3, [pc, #192]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d109      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0de      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048e0:	4b2c      	ldr	r3, [pc, #176]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0d6      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048f0:	4b28      	ldr	r3, [pc, #160]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f023 0207 	bic.w	r2, r3, #7
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4925      	ldr	r1, [pc, #148]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004902:	f7fc ff2f 	bl	8001764 <HAL_GetTick>
 8004906:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004908:	e00a      	b.n	8004920 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490a:	f7fc ff2b 	bl	8001764 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f241 3288 	movw	r2, #5000	; 0x1388
 8004918:	4293      	cmp	r3, r2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e0be      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004920:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	429a      	cmp	r2, r3
 8004930:	d1eb      	bne.n	800490a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d010      	beq.n	8004960 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	4b14      	ldr	r3, [pc, #80]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	429a      	cmp	r2, r3
 800494c:	d208      	bcs.n	8004960 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800494e:	4b11      	ldr	r3, [pc, #68]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f023 020f 	bic.w	r2, r3, #15
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	490e      	ldr	r1, [pc, #56]	; (8004994 <HAL_RCC_ClockConfig+0x244>)
 800495c:	4313      	orrs	r3, r2
 800495e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <HAL_RCC_ClockConfig+0x240>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d214      	bcs.n	8004998 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496e:	4b08      	ldr	r3, [pc, #32]	; (8004990 <HAL_RCC_ClockConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 020f 	bic.w	r2, r3, #15
 8004976:	4906      	ldr	r1, [pc, #24]	; (8004990 <HAL_RCC_ClockConfig+0x240>)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	4313      	orrs	r3, r2
 800497c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b04      	ldr	r3, [pc, #16]	; (8004990 <HAL_RCC_ClockConfig+0x240>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d005      	beq.n	8004998 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e086      	b.n	8004a9e <HAL_RCC_ClockConfig+0x34e>
 8004990:	52002000 	.word	0x52002000
 8004994:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d010      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	4b3f      	ldr	r3, [pc, #252]	; (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d208      	bcs.n	80049c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049b4:	4b3c      	ldr	r3, [pc, #240]	; (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	4939      	ldr	r1, [pc, #228]	; (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d010      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695a      	ldr	r2, [r3, #20]
 80049d6:	4b34      	ldr	r3, [pc, #208]	; (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049de:	429a      	cmp	r2, r3
 80049e0:	d208      	bcs.n	80049f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049e2:	4b31      	ldr	r3, [pc, #196]	; (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	492e      	ldr	r1, [pc, #184]	; (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d010      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699a      	ldr	r2, [r3, #24]
 8004a04:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d208      	bcs.n	8004a22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a10:	4b25      	ldr	r3, [pc, #148]	; (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	4922      	ldr	r1, [pc, #136]	; (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d010      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69da      	ldr	r2, [r3, #28]
 8004a32:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d208      	bcs.n	8004a50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a3e:	4b1a      	ldr	r3, [pc, #104]	; (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	4917      	ldr	r1, [pc, #92]	; (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a50:	f000 f834 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004a54:	4602      	mov	r2, r0
 8004a56:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	0a1b      	lsrs	r3, r3, #8
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	4912      	ldr	r1, [pc, #72]	; (8004aac <HAL_RCC_ClockConfig+0x35c>)
 8004a62:	5ccb      	ldrb	r3, [r1, r3]
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <HAL_RCC_ClockConfig+0x358>)
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	4a0d      	ldr	r2, [pc, #52]	; (8004aac <HAL_RCC_ClockConfig+0x35c>)
 8004a78:	5cd3      	ldrb	r3, [r2, r3]
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
 8004a84:	4a0a      	ldr	r2, [pc, #40]	; (8004ab0 <HAL_RCC_ClockConfig+0x360>)
 8004a86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a88:	4a0a      	ldr	r2, [pc, #40]	; (8004ab4 <HAL_RCC_ClockConfig+0x364>)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <HAL_RCC_ClockConfig+0x368>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc fe1c 	bl	80016d0 <HAL_InitTick>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	58024400 	.word	0x58024400
 8004aac:	08009024 	.word	0x08009024
 8004ab0:	24000004 	.word	0x24000004
 8004ab4:	24000000 	.word	0x24000000
 8004ab8:	24000008 	.word	0x24000008

08004abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac2:	4bb3      	ldr	r3, [pc, #716]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aca:	2b18      	cmp	r3, #24
 8004acc:	f200 8155 	bhi.w	8004d7a <HAL_RCC_GetSysClockFreq+0x2be>
 8004ad0:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad6:	bf00      	nop
 8004ad8:	08004b3d 	.word	0x08004b3d
 8004adc:	08004d7b 	.word	0x08004d7b
 8004ae0:	08004d7b 	.word	0x08004d7b
 8004ae4:	08004d7b 	.word	0x08004d7b
 8004ae8:	08004d7b 	.word	0x08004d7b
 8004aec:	08004d7b 	.word	0x08004d7b
 8004af0:	08004d7b 	.word	0x08004d7b
 8004af4:	08004d7b 	.word	0x08004d7b
 8004af8:	08004b63 	.word	0x08004b63
 8004afc:	08004d7b 	.word	0x08004d7b
 8004b00:	08004d7b 	.word	0x08004d7b
 8004b04:	08004d7b 	.word	0x08004d7b
 8004b08:	08004d7b 	.word	0x08004d7b
 8004b0c:	08004d7b 	.word	0x08004d7b
 8004b10:	08004d7b 	.word	0x08004d7b
 8004b14:	08004d7b 	.word	0x08004d7b
 8004b18:	08004b69 	.word	0x08004b69
 8004b1c:	08004d7b 	.word	0x08004d7b
 8004b20:	08004d7b 	.word	0x08004d7b
 8004b24:	08004d7b 	.word	0x08004d7b
 8004b28:	08004d7b 	.word	0x08004d7b
 8004b2c:	08004d7b 	.word	0x08004d7b
 8004b30:	08004d7b 	.word	0x08004d7b
 8004b34:	08004d7b 	.word	0x08004d7b
 8004b38:	08004b6f 	.word	0x08004b6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b3c:	4b94      	ldr	r3, [pc, #592]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d009      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b48:	4b91      	ldr	r3, [pc, #580]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	08db      	lsrs	r3, r3, #3
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	4a90      	ldr	r2, [pc, #576]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
 8004b58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004b5a:	e111      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b5c:	4b8d      	ldr	r3, [pc, #564]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b5e:	61bb      	str	r3, [r7, #24]
      break;
 8004b60:	e10e      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004b62:	4b8d      	ldr	r3, [pc, #564]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b64:	61bb      	str	r3, [r7, #24]
      break;
 8004b66:	e10b      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004b68:	4b8c      	ldr	r3, [pc, #560]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b6a:	61bb      	str	r3, [r7, #24]
      break;
 8004b6c:	e108      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b6e:	4b88      	ldr	r3, [pc, #544]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b78:	4b85      	ldr	r3, [pc, #532]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b84:	4b82      	ldr	r3, [pc, #520]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004b8e:	4b80      	ldr	r3, [pc, #512]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b92:	08db      	lsrs	r3, r3, #3
 8004b94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	fb02 f303 	mul.w	r3, r2, r3
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 80e1 	beq.w	8004d74 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	f000 8083 	beq.w	8004cc0 <HAL_RCC_GetSysClockFreq+0x204>
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	f200 80a1 	bhi.w	8004d04 <HAL_RCC_GetSysClockFreq+0x248>
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x114>
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d056      	beq.n	8004c7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004bce:	e099      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bd0:	4b6f      	ldr	r3, [pc, #444]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d02d      	beq.n	8004c38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bdc:	4b6c      	ldr	r3, [pc, #432]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	08db      	lsrs	r3, r3, #3
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	4a6b      	ldr	r2, [pc, #428]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	ee07 3a90 	vmov	s15, r3
 8004bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c06:	4b62      	ldr	r3, [pc, #392]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c1a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004c36:	e087      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c42:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004da4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4a:	4b51      	ldr	r3, [pc, #324]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c5e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c7a:	e065      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004da8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8e:	4b40      	ldr	r3, [pc, #256]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ca2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cbe:	e043      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004dac <HAL_RCC_GetSysClockFreq+0x2f0>
 8004cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd2:	4b2f      	ldr	r3, [pc, #188]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ce6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d02:	e021      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004da8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d16:	4b1e      	ldr	r3, [pc, #120]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d2a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004d48:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	0a5b      	lsrs	r3, r3, #9
 8004d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d52:	3301      	adds	r3, #1
 8004d54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	ee07 3a90 	vmov	s15, r3
 8004d5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d60:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d6c:	ee17 3a90 	vmov	r3, s15
 8004d70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004d72:	e005      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61bb      	str	r3, [r7, #24]
      break;
 8004d78:	e002      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004d7a:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d7c:	61bb      	str	r3, [r7, #24]
      break;
 8004d7e:	bf00      	nop
  }

  return sysclockfreq;
 8004d80:	69bb      	ldr	r3, [r7, #24]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3724      	adds	r7, #36	; 0x24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	58024400 	.word	0x58024400
 8004d94:	03d09000 	.word	0x03d09000
 8004d98:	003d0900 	.word	0x003d0900
 8004d9c:	017d7840 	.word	0x017d7840
 8004da0:	46000000 	.word	0x46000000
 8004da4:	4c742400 	.word	0x4c742400
 8004da8:	4a742400 	.word	0x4a742400
 8004dac:	4bbebc20 	.word	0x4bbebc20

08004db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004db6:	f7ff fe81 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <HAL_RCC_GetHCLKFreq+0x50>)
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	490f      	ldr	r1, [pc, #60]	; (8004e04 <HAL_RCC_GetHCLKFreq+0x54>)
 8004dc8:	5ccb      	ldrb	r3, [r1, r3]
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004dd4:	4b0a      	ldr	r3, [pc, #40]	; (8004e00 <HAL_RCC_GetHCLKFreq+0x50>)
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	4a09      	ldr	r2, [pc, #36]	; (8004e04 <HAL_RCC_GetHCLKFreq+0x54>)
 8004dde:	5cd3      	ldrb	r3, [r2, r3]
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dea:	4a07      	ldr	r2, [pc, #28]	; (8004e08 <HAL_RCC_GetHCLKFreq+0x58>)
 8004dec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004dee:	4a07      	ldr	r2, [pc, #28]	; (8004e0c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004df4:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <HAL_RCC_GetHCLKFreq+0x58>)
 8004df6:	681b      	ldr	r3, [r3, #0]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	58024400 	.word	0x58024400
 8004e04:	08009024 	.word	0x08009024
 8004e08:	24000004 	.word	0x24000004
 8004e0c:	24000000 	.word	0x24000000

08004e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e14:	f7ff ffcc 	bl	8004db0 <HAL_RCC_GetHCLKFreq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	4904      	ldr	r1, [pc, #16]	; (8004e38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e26:	5ccb      	ldrb	r3, [r1, r3]
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	58024400 	.word	0x58024400
 8004e38:	08009024 	.word	0x08009024

08004e3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e40:	b0c6      	sub	sp, #280	; 0x118
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004e60:	2500      	movs	r5, #0
 8004e62:	ea54 0305 	orrs.w	r3, r4, r5
 8004e66:	d049      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e72:	d02f      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004e74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e78:	d828      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e7e:	d01a      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e84:	d822      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8e:	d007      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e90:	e01c      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e92:	4bab      	ldr	r3, [pc, #684]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	4aaa      	ldr	r2, [pc, #680]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e9e:	e01a      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	2102      	movs	r1, #2
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f002 fa49 	bl	8007340 <RCCEx_PLL2_Config>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004eb4:	e00f      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eba:	3328      	adds	r3, #40	; 0x28
 8004ebc:	2102      	movs	r1, #2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f002 faf0 	bl	80074a4 <RCCEx_PLL3_Config>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004eca:	e004      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004ed2:	e000      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ed6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ede:	4b98      	ldr	r3, [pc, #608]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eec:	4a94      	ldr	r2, [pc, #592]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	6513      	str	r3, [r2, #80]	; 0x50
 8004ef2:	e003      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ef8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004f08:	f04f 0900 	mov.w	r9, #0
 8004f0c:	ea58 0309 	orrs.w	r3, r8, r9
 8004f10:	d047      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d82a      	bhi.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f39 	.word	0x08004f39
 8004f28:	08004f47 	.word	0x08004f47
 8004f2c:	08004f5d 	.word	0x08004f5d
 8004f30:	08004f7b 	.word	0x08004f7b
 8004f34:	08004f7b 	.word	0x08004f7b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f38:	4b81      	ldr	r3, [pc, #516]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	4a80      	ldr	r2, [pc, #512]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f44:	e01a      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f002 f9f6 	bl	8007340 <RCCEx_PLL2_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f5a:	e00f      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f60:	3328      	adds	r3, #40	; 0x28
 8004f62:	2100      	movs	r1, #0
 8004f64:	4618      	mov	r0, r3
 8004f66:	f002 fa9d 	bl	80074a4 <RCCEx_PLL3_Config>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f70:	e004      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004f78:	e000      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004f7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10a      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f84:	4b6e      	ldr	r3, [pc, #440]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f88:	f023 0107 	bic.w	r1, r3, #7
 8004f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f92:	4a6b      	ldr	r2, [pc, #428]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f94:	430b      	orrs	r3, r1
 8004f96:	6513      	str	r3, [r2, #80]	; 0x50
 8004f98:	e003      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8004fae:	f04f 0b00 	mov.w	fp, #0
 8004fb2:	ea5a 030b 	orrs.w	r3, sl, fp
 8004fb6:	d05b      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fc0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004fc4:	d03b      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004fc6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004fca:	d834      	bhi.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004fcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd0:	d037      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004fd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd6:	d82e      	bhi.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004fd8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fdc:	d033      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004fde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fe2:	d828      	bhi.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe8:	d01a      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fee:	d822      	bhi.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ff8:	d007      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004ffa:	e01c      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ffc:	4b50      	ldr	r3, [pc, #320]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	4a4f      	ldr	r2, [pc, #316]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005006:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005008:	e01e      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800500a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800500e:	3308      	adds	r3, #8
 8005010:	2100      	movs	r1, #0
 8005012:	4618      	mov	r0, r3
 8005014:	f002 f994 	bl	8007340 <RCCEx_PLL2_Config>
 8005018:	4603      	mov	r3, r0
 800501a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800501e:	e013      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005024:	3328      	adds	r3, #40	; 0x28
 8005026:	2100      	movs	r1, #0
 8005028:	4618      	mov	r0, r3
 800502a:	f002 fa3b 	bl	80074a4 <RCCEx_PLL3_Config>
 800502e:	4603      	mov	r3, r0
 8005030:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005034:	e008      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800503c:	e004      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800503e:	bf00      	nop
 8005040:	e002      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005042:	bf00      	nop
 8005044:	e000      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005046:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005048:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005050:	4b3b      	ldr	r3, [pc, #236]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005054:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800505c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005060:	4a37      	ldr	r2, [pc, #220]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005062:	430b      	orrs	r3, r1
 8005064:	6593      	str	r3, [r2, #88]	; 0x58
 8005066:	e003      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005068:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800506c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800507c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005080:	2300      	movs	r3, #0
 8005082:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005086:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800508a:	460b      	mov	r3, r1
 800508c:	4313      	orrs	r3, r2
 800508e:	d05d      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005094:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005098:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800509c:	d03b      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800509e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80050a2:	d834      	bhi.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80050a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050a8:	d037      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80050aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050ae:	d82e      	bhi.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80050b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050b4:	d033      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80050b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050ba:	d828      	bhi.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80050bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050c0:	d01a      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80050c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050c6:	d822      	bhi.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80050cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050d0:	d007      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80050d2:	e01c      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d4:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	4a19      	ldr	r2, [pc, #100]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050e0:	e01e      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e6:	3308      	adds	r3, #8
 80050e8:	2100      	movs	r1, #0
 80050ea:	4618      	mov	r0, r3
 80050ec:	f002 f928 	bl	8007340 <RCCEx_PLL2_Config>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80050f6:	e013      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fc:	3328      	adds	r3, #40	; 0x28
 80050fe:	2100      	movs	r1, #0
 8005100:	4618      	mov	r0, r3
 8005102:	f002 f9cf 	bl	80074a4 <RCCEx_PLL3_Config>
 8005106:	4603      	mov	r3, r0
 8005108:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800510c:	e008      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005114:	e004      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005116:	bf00      	nop
 8005118:	e002      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800511a:	bf00      	nop
 800511c:	e000      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800511e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005120:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10d      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800512a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005134:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005138:	4a01      	ldr	r2, [pc, #4]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800513a:	430b      	orrs	r3, r1
 800513c:	6593      	str	r3, [r2, #88]	; 0x58
 800513e:	e005      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005144:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005148:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800514c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005158:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800515c:	2300      	movs	r3, #0
 800515e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005162:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005166:	460b      	mov	r3, r1
 8005168:	4313      	orrs	r3, r2
 800516a:	d03a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800516c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005172:	2b30      	cmp	r3, #48	; 0x30
 8005174:	d01f      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005176:	2b30      	cmp	r3, #48	; 0x30
 8005178:	d819      	bhi.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x372>
 800517a:	2b20      	cmp	r3, #32
 800517c:	d00c      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800517e:	2b20      	cmp	r3, #32
 8005180:	d815      	bhi.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d019      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005186:	2b10      	cmp	r3, #16
 8005188:	d111      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800518a:	4baa      	ldr	r3, [pc, #680]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	4aa9      	ldr	r2, [pc, #676]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005194:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005196:	e011      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800519c:	3308      	adds	r3, #8
 800519e:	2102      	movs	r1, #2
 80051a0:	4618      	mov	r0, r3
 80051a2:	f002 f8cd 	bl	8007340 <RCCEx_PLL2_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80051ac:	e006      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80051b4:	e002      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80051b6:	bf00      	nop
 80051b8:	e000      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80051ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80051c4:	4b9b      	ldr	r3, [pc, #620]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80051cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d2:	4a98      	ldr	r2, [pc, #608]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051d4:	430b      	orrs	r3, r1
 80051d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051d8:	e003      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80051e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80051ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051f2:	2300      	movs	r3, #0
 80051f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80051f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80051fc:	460b      	mov	r3, r1
 80051fe:	4313      	orrs	r3, r2
 8005200:	d051      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800520c:	d035      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800520e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005212:	d82e      	bhi.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005214:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005218:	d031      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800521a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800521e:	d828      	bhi.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005224:	d01a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800522a:	d822      	bhi.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005234:	d007      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005236:	e01c      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005238:	4b7e      	ldr	r3, [pc, #504]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	4a7d      	ldr	r2, [pc, #500]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800523e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005242:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005244:	e01c      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800524a:	3308      	adds	r3, #8
 800524c:	2100      	movs	r1, #0
 800524e:	4618      	mov	r0, r3
 8005250:	f002 f876 	bl	8007340 <RCCEx_PLL2_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800525a:	e011      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800525c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005260:	3328      	adds	r3, #40	; 0x28
 8005262:	2100      	movs	r1, #0
 8005264:	4618      	mov	r0, r3
 8005266:	f002 f91d 	bl	80074a4 <RCCEx_PLL3_Config>
 800526a:	4603      	mov	r3, r0
 800526c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005270:	e006      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005278:	e002      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800527a:	bf00      	nop
 800527c:	e000      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800527e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005280:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005288:	4b6a      	ldr	r3, [pc, #424]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800528a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005296:	4a67      	ldr	r2, [pc, #412]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005298:	430b      	orrs	r3, r1
 800529a:	6513      	str	r3, [r2, #80]	; 0x50
 800529c:	e003      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80052a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80052b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052b6:	2300      	movs	r3, #0
 80052b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052bc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4313      	orrs	r3, r2
 80052c4:	d053      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052d0:	d033      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80052d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052d6:	d82c      	bhi.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80052d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052dc:	d02f      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80052de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052e2:	d826      	bhi.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80052e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052e8:	d02b      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80052ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052ee:	d820      	bhi.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80052f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052f4:	d012      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80052f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052fa:	d81a      	bhi.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d022      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005304:	d115      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530a:	3308      	adds	r3, #8
 800530c:	2101      	movs	r1, #1
 800530e:	4618      	mov	r0, r3
 8005310:	f002 f816 	bl	8007340 <RCCEx_PLL2_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800531a:	e015      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800531c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005320:	3328      	adds	r3, #40	; 0x28
 8005322:	2101      	movs	r1, #1
 8005324:	4618      	mov	r0, r3
 8005326:	f002 f8bd 	bl	80074a4 <RCCEx_PLL3_Config>
 800532a:	4603      	mov	r3, r0
 800532c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005330:	e00a      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005338:	e006      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800533a:	bf00      	nop
 800533c:	e004      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800533e:	bf00      	nop
 8005340:	e002      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005342:	bf00      	nop
 8005344:	e000      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005348:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005350:	4b38      	ldr	r3, [pc, #224]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005354:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800535c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800535e:	4a35      	ldr	r2, [pc, #212]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005360:	430b      	orrs	r3, r1
 8005362:	6513      	str	r3, [r2, #80]	; 0x50
 8005364:	e003      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005366:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800536a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800536e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005376:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800537a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800537e:	2300      	movs	r3, #0
 8005380:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005384:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005388:	460b      	mov	r3, r1
 800538a:	4313      	orrs	r3, r2
 800538c:	d058      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800538e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005392:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005396:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800539a:	d033      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800539c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053a0:	d82c      	bhi.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80053a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a6:	d02f      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ac:	d826      	bhi.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80053ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053b2:	d02b      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80053b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053b8:	d820      	bhi.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80053ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053be:	d012      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80053c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c4:	d81a      	bhi.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d022      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80053ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053ce:	d115      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d4:	3308      	adds	r3, #8
 80053d6:	2101      	movs	r1, #1
 80053d8:	4618      	mov	r0, r3
 80053da:	f001 ffb1 	bl	8007340 <RCCEx_PLL2_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053e4:	e015      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ea:	3328      	adds	r3, #40	; 0x28
 80053ec:	2101      	movs	r1, #1
 80053ee:	4618      	mov	r0, r3
 80053f0:	f002 f858 	bl	80074a4 <RCCEx_PLL3_Config>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80053fa:	e00a      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005402:	e006      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005404:	bf00      	nop
 8005406:	e004      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005408:	bf00      	nop
 800540a:	e002      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800540c:	bf00      	nop
 800540e:	e000      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005412:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10e      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800541a:	4b06      	ldr	r3, [pc, #24]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800541c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005426:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800542a:	4a02      	ldr	r2, [pc, #8]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800542c:	430b      	orrs	r3, r1
 800542e:	6593      	str	r3, [r2, #88]	; 0x58
 8005430:	e006      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005432:	bf00      	nop
 8005434:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005438:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800543c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800544c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005450:	2300      	movs	r3, #0
 8005452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005456:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800545a:	460b      	mov	r3, r1
 800545c:	4313      	orrs	r3, r2
 800545e:	d037      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800546a:	d00e      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800546c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005470:	d816      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d018      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800547a:	d111      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800547c:	4bc4      	ldr	r3, [pc, #784]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	4ac3      	ldr	r2, [pc, #780]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005486:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005488:	e00f      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800548a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800548e:	3308      	adds	r3, #8
 8005490:	2101      	movs	r1, #1
 8005492:	4618      	mov	r0, r3
 8005494:	f001 ff54 	bl	8007340 <RCCEx_PLL2_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800549e:	e004      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80054a6:	e000      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80054a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054b2:	4bb7      	ldr	r3, [pc, #732]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80054ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054c0:	4ab3      	ldr	r2, [pc, #716]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054c2:	430b      	orrs	r3, r1
 80054c4:	6513      	str	r3, [r2, #80]	; 0x50
 80054c6:	e003      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80054dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054e0:	2300      	movs	r3, #0
 80054e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80054ea:	460b      	mov	r3, r1
 80054ec:	4313      	orrs	r3, r2
 80054ee:	d039      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80054f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d81c      	bhi.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80054fa:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80054fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005500:	0800553d 	.word	0x0800553d
 8005504:	08005511 	.word	0x08005511
 8005508:	0800551f 	.word	0x0800551f
 800550c:	0800553d 	.word	0x0800553d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005510:	4b9f      	ldr	r3, [pc, #636]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	4a9e      	ldr	r2, [pc, #632]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800551a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800551c:	e00f      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800551e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005522:	3308      	adds	r3, #8
 8005524:	2102      	movs	r1, #2
 8005526:	4618      	mov	r0, r3
 8005528:	f001 ff0a 	bl	8007340 <RCCEx_PLL2_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005532:	e004      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800553a:	e000      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800553c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800553e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10a      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005546:	4b92      	ldr	r3, [pc, #584]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554a:	f023 0103 	bic.w	r1, r3, #3
 800554e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005554:	4a8e      	ldr	r2, [pc, #568]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005556:	430b      	orrs	r3, r1
 8005558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800555a:	e003      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005560:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005570:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005574:	2300      	movs	r3, #0
 8005576:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800557a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800557e:	460b      	mov	r3, r1
 8005580:	4313      	orrs	r3, r2
 8005582:	f000 8099 	beq.w	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005586:	4b83      	ldr	r3, [pc, #524]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a82      	ldr	r2, [pc, #520]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800558c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005590:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005592:	f7fc f8e7 	bl	8001764 <HAL_GetTick>
 8005596:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800559a:	e00b      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800559c:	f7fc f8e2 	bl	8001764 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b64      	cmp	r3, #100	; 0x64
 80055aa:	d903      	bls.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80055b2:	e005      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055b4:	4b77      	ldr	r3, [pc, #476]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0ed      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80055c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d173      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80055c8:	4b71      	ldr	r3, [pc, #452]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055d4:	4053      	eors	r3, r2
 80055d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d015      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055de:	4b6c      	ldr	r3, [pc, #432]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055ea:	4b69      	ldr	r3, [pc, #420]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	4a68      	ldr	r2, [pc, #416]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055f6:	4b66      	ldr	r3, [pc, #408]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	4a65      	ldr	r2, [pc, #404]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005600:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005602:	4a63      	ldr	r2, [pc, #396]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005608:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800560a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800560e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005616:	d118      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005618:	f7fc f8a4 	bl	8001764 <HAL_GetTick>
 800561c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005620:	e00d      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005622:	f7fc f89f 	bl	8001764 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800562c:	1ad2      	subs	r2, r2, r3
 800562e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005632:	429a      	cmp	r2, r3
 8005634:	d903      	bls.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800563c:	e005      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800563e:	4b54      	ldr	r3, [pc, #336]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0eb      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800564a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800564e:	2b00      	cmp	r3, #0
 8005650:	d129      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005656:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800565a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005662:	d10e      	bne.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005664:	4b4a      	ldr	r3, [pc, #296]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800566c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005670:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005674:	091a      	lsrs	r2, r3, #4
 8005676:	4b48      	ldr	r3, [pc, #288]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005678:	4013      	ands	r3, r2
 800567a:	4a45      	ldr	r2, [pc, #276]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800567c:	430b      	orrs	r3, r1
 800567e:	6113      	str	r3, [r2, #16]
 8005680:	e005      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005682:	4b43      	ldr	r3, [pc, #268]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	4a42      	ldr	r2, [pc, #264]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005688:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800568c:	6113      	str	r3, [r2, #16]
 800568e:	4b40      	ldr	r3, [pc, #256]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005690:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005696:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800569a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800569e:	4a3c      	ldr	r2, [pc, #240]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056a0:	430b      	orrs	r3, r1
 80056a2:	6713      	str	r3, [r2, #112]	; 0x70
 80056a4:	e008      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80056ae:	e003      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80056b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	f002 0301 	and.w	r3, r2, #1
 80056c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056c8:	2300      	movs	r3, #0
 80056ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80056ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80056d2:	460b      	mov	r3, r1
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f000 808f 	beq.w	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80056da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056e0:	2b28      	cmp	r3, #40	; 0x28
 80056e2:	d871      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80056e4:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	080057d1 	.word	0x080057d1
 80056f0:	080057c9 	.word	0x080057c9
 80056f4:	080057c9 	.word	0x080057c9
 80056f8:	080057c9 	.word	0x080057c9
 80056fc:	080057c9 	.word	0x080057c9
 8005700:	080057c9 	.word	0x080057c9
 8005704:	080057c9 	.word	0x080057c9
 8005708:	080057c9 	.word	0x080057c9
 800570c:	0800579d 	.word	0x0800579d
 8005710:	080057c9 	.word	0x080057c9
 8005714:	080057c9 	.word	0x080057c9
 8005718:	080057c9 	.word	0x080057c9
 800571c:	080057c9 	.word	0x080057c9
 8005720:	080057c9 	.word	0x080057c9
 8005724:	080057c9 	.word	0x080057c9
 8005728:	080057c9 	.word	0x080057c9
 800572c:	080057b3 	.word	0x080057b3
 8005730:	080057c9 	.word	0x080057c9
 8005734:	080057c9 	.word	0x080057c9
 8005738:	080057c9 	.word	0x080057c9
 800573c:	080057c9 	.word	0x080057c9
 8005740:	080057c9 	.word	0x080057c9
 8005744:	080057c9 	.word	0x080057c9
 8005748:	080057c9 	.word	0x080057c9
 800574c:	080057d1 	.word	0x080057d1
 8005750:	080057c9 	.word	0x080057c9
 8005754:	080057c9 	.word	0x080057c9
 8005758:	080057c9 	.word	0x080057c9
 800575c:	080057c9 	.word	0x080057c9
 8005760:	080057c9 	.word	0x080057c9
 8005764:	080057c9 	.word	0x080057c9
 8005768:	080057c9 	.word	0x080057c9
 800576c:	080057d1 	.word	0x080057d1
 8005770:	080057c9 	.word	0x080057c9
 8005774:	080057c9 	.word	0x080057c9
 8005778:	080057c9 	.word	0x080057c9
 800577c:	080057c9 	.word	0x080057c9
 8005780:	080057c9 	.word	0x080057c9
 8005784:	080057c9 	.word	0x080057c9
 8005788:	080057c9 	.word	0x080057c9
 800578c:	080057d1 	.word	0x080057d1
 8005790:	58024400 	.word	0x58024400
 8005794:	58024800 	.word	0x58024800
 8005798:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800579c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a0:	3308      	adds	r3, #8
 80057a2:	2101      	movs	r1, #1
 80057a4:	4618      	mov	r0, r3
 80057a6:	f001 fdcb 	bl	8007340 <RCCEx_PLL2_Config>
 80057aa:	4603      	mov	r3, r0
 80057ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80057b0:	e00f      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b6:	3328      	adds	r3, #40	; 0x28
 80057b8:	2101      	movs	r1, #1
 80057ba:	4618      	mov	r0, r3
 80057bc:	f001 fe72 	bl	80074a4 <RCCEx_PLL3_Config>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80057c6:	e004      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80057ce:	e000      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80057d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80057da:	4bbf      	ldr	r3, [pc, #764]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80057dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057de:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80057e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057e8:	4abb      	ldr	r2, [pc, #748]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80057ea:	430b      	orrs	r3, r1
 80057ec:	6553      	str	r3, [r2, #84]	; 0x54
 80057ee:	e003      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80057f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f002 0302 	and.w	r3, r2, #2
 8005804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005808:	2300      	movs	r3, #0
 800580a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800580e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005812:	460b      	mov	r3, r1
 8005814:	4313      	orrs	r3, r2
 8005816:	d041      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581e:	2b05      	cmp	r3, #5
 8005820:	d824      	bhi.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005822:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	08005875 	.word	0x08005875
 800582c:	08005841 	.word	0x08005841
 8005830:	08005857 	.word	0x08005857
 8005834:	08005875 	.word	0x08005875
 8005838:	08005875 	.word	0x08005875
 800583c:	08005875 	.word	0x08005875
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005844:	3308      	adds	r3, #8
 8005846:	2101      	movs	r1, #1
 8005848:	4618      	mov	r0, r3
 800584a:	f001 fd79 	bl	8007340 <RCCEx_PLL2_Config>
 800584e:	4603      	mov	r3, r0
 8005850:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005854:	e00f      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800585a:	3328      	adds	r3, #40	; 0x28
 800585c:	2101      	movs	r1, #1
 800585e:	4618      	mov	r0, r3
 8005860:	f001 fe20 	bl	80074a4 <RCCEx_PLL3_Config>
 8005864:	4603      	mov	r3, r0
 8005866:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800586a:	e004      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005872:	e000      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005876:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10a      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800587e:	4b96      	ldr	r3, [pc, #600]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005882:	f023 0107 	bic.w	r1, r3, #7
 8005886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800588a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588c:	4a92      	ldr	r2, [pc, #584]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800588e:	430b      	orrs	r3, r1
 8005890:	6553      	str	r3, [r2, #84]	; 0x54
 8005892:	e003      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005894:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005898:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800589c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a4:	f002 0304 	and.w	r3, r2, #4
 80058a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058ac:	2300      	movs	r3, #0
 80058ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058b2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058b6:	460b      	mov	r3, r1
 80058b8:	4313      	orrs	r3, r2
 80058ba:	d044      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80058bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c4:	2b05      	cmp	r3, #5
 80058c6:	d825      	bhi.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80058c8:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80058ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ce:	bf00      	nop
 80058d0:	0800591d 	.word	0x0800591d
 80058d4:	080058e9 	.word	0x080058e9
 80058d8:	080058ff 	.word	0x080058ff
 80058dc:	0800591d 	.word	0x0800591d
 80058e0:	0800591d 	.word	0x0800591d
 80058e4:	0800591d 	.word	0x0800591d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ec:	3308      	adds	r3, #8
 80058ee:	2101      	movs	r1, #1
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 fd25 	bl	8007340 <RCCEx_PLL2_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80058fc:	e00f      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005902:	3328      	adds	r3, #40	; 0x28
 8005904:	2101      	movs	r1, #1
 8005906:	4618      	mov	r0, r3
 8005908:	f001 fdcc 	bl	80074a4 <RCCEx_PLL3_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005912:	e004      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800591a:	e000      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800591c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800591e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10b      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005926:	4b6c      	ldr	r3, [pc, #432]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592a:	f023 0107 	bic.w	r1, r3, #7
 800592e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005936:	4a68      	ldr	r2, [pc, #416]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005938:	430b      	orrs	r3, r1
 800593a:	6593      	str	r3, [r2, #88]	; 0x58
 800593c:	e003      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005942:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f002 0320 	and.w	r3, r2, #32
 8005952:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005956:	2300      	movs	r3, #0
 8005958:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800595c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005960:	460b      	mov	r3, r1
 8005962:	4313      	orrs	r3, r2
 8005964:	d055      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800596a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800596e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005972:	d033      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005978:	d82c      	bhi.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800597a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597e:	d02f      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005984:	d826      	bhi.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005986:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800598a:	d02b      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800598c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005990:	d820      	bhi.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005996:	d012      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800599c:	d81a      	bhi.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d022      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80059a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059a6:	d115      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ac:	3308      	adds	r3, #8
 80059ae:	2100      	movs	r1, #0
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 fcc5 	bl	8007340 <RCCEx_PLL2_Config>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059bc:	e015      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c2:	3328      	adds	r3, #40	; 0x28
 80059c4:	2102      	movs	r1, #2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 fd6c 	bl	80074a4 <RCCEx_PLL3_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80059d2:	e00a      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80059da:	e006      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80059dc:	bf00      	nop
 80059de:	e004      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80059e0:	bf00      	nop
 80059e2:	e002      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80059e4:	bf00      	nop
 80059e6:	e000      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80059e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10b      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059f2:	4b39      	ldr	r3, [pc, #228]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80059f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80059fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a02:	4a35      	ldr	r2, [pc, #212]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a04:	430b      	orrs	r3, r1
 8005a06:	6553      	str	r3, [r2, #84]	; 0x54
 8005a08:	e003      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005a1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a22:	2300      	movs	r3, #0
 8005a24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a28:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	d058      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005a3e:	d033      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005a40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005a44:	d82c      	bhi.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4a:	d02f      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a50:	d826      	bhi.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005a52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a56:	d02b      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005a58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a5c:	d820      	bhi.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a62:	d012      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a68:	d81a      	bhi.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d022      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a72:	d115      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a78:	3308      	adds	r3, #8
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f001 fc5f 	bl	8007340 <RCCEx_PLL2_Config>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a88:	e015      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a8e:	3328      	adds	r3, #40	; 0x28
 8005a90:	2102      	movs	r1, #2
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 fd06 	bl	80074a4 <RCCEx_PLL3_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a9e:	e00a      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005aa6:	e006      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005aa8:	bf00      	nop
 8005aaa:	e004      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005aac:	bf00      	nop
 8005aae:	e002      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005ab0:	bf00      	nop
 8005ab2:	e000      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10e      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005abe:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ace:	4a02      	ldr	r2, [pc, #8]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ad4:	e006      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005ad6:	bf00      	nop
 8005ad8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005adc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ae0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005af0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005af4:	2300      	movs	r3, #0
 8005af6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005afa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005afe:	460b      	mov	r3, r1
 8005b00:	4313      	orrs	r3, r2
 8005b02:	d055      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005b10:	d033      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005b12:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005b16:	d82c      	bhi.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b1c:	d02f      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b22:	d826      	bhi.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005b28:	d02b      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005b2a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005b2e:	d820      	bhi.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b34:	d012      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005b36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b3a:	d81a      	bhi.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d022      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b44:	d115      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 fbf6 	bl	8007340 <RCCEx_PLL2_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b5a:	e015      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b60:	3328      	adds	r3, #40	; 0x28
 8005b62:	2102      	movs	r1, #2
 8005b64:	4618      	mov	r0, r3
 8005b66:	f001 fc9d 	bl	80074a4 <RCCEx_PLL3_Config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005b70:	e00a      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005b78:	e006      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005b7a:	bf00      	nop
 8005b7c:	e004      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005b7e:	bf00      	nop
 8005b80:	e002      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005b82:	bf00      	nop
 8005b84:	e000      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10b      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b90:	4ba0      	ldr	r3, [pc, #640]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b94:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ba0:	4a9c      	ldr	r2, [pc, #624]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ba6:	e003      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005bac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb8:	f002 0308 	and.w	r3, r2, #8
 8005bbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005bc6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	d01e      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005be2:	3328      	adds	r3, #40	; 0x28
 8005be4:	2102      	movs	r1, #2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 fc5c 	bl	80074a4 <RCCEx_PLL3_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005bf8:	4b86      	ldr	r3, [pc, #536]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c08:	4a82      	ldr	r2, [pc, #520]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	f002 0310 	and.w	r3, r2, #16
 8005c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c24:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	d01e      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3a:	d10c      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c40:	3328      	adds	r3, #40	; 0x28
 8005c42:	2102      	movs	r1, #2
 8005c44:	4618      	mov	r0, r3
 8005c46:	f001 fc2d 	bl	80074a4 <RCCEx_PLL3_Config>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c56:	4b6f      	ldr	r3, [pc, #444]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c66:	4a6b      	ldr	r2, [pc, #428]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005c78:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c7e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005c82:	460b      	mov	r3, r1
 8005c84:	4313      	orrs	r3, r2
 8005c86:	d03e      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c94:	d022      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005c96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c9a:	d81b      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca4:	d00b      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005ca6:	e015      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cac:	3308      	adds	r3, #8
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 fb45 	bl	8007340 <RCCEx_PLL2_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005cbc:	e00f      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc2:	3328      	adds	r3, #40	; 0x28
 8005cc4:	2102      	movs	r1, #2
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f001 fbec 	bl	80074a4 <RCCEx_PLL3_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005cd2:	e004      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005cda:	e000      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cde:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ce6:	4b4b      	ldr	r3, [pc, #300]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005cf6:	4a47      	ldr	r2, [pc, #284]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8005cfc:	e003      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005d12:	673b      	str	r3, [r7, #112]	; 0x70
 8005d14:	2300      	movs	r3, #0
 8005d16:	677b      	str	r3, [r7, #116]	; 0x74
 8005d18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	d03b      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d2e:	d01f      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005d30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d34:	d818      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d3a:	d003      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005d3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d40:	d007      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005d42:	e011      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d44:	4b33      	ldr	r3, [pc, #204]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	4a32      	ldr	r2, [pc, #200]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d50:	e00f      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d56:	3328      	adds	r3, #40	; 0x28
 8005d58:	2101      	movs	r1, #1
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f001 fba2 	bl	80074a4 <RCCEx_PLL3_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005d66:	e004      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005d6e:	e000      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10b      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d7a:	4b26      	ldr	r3, [pc, #152]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d8a:	4a22      	ldr	r2, [pc, #136]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	6553      	str	r3, [r2, #84]	; 0x54
 8005d90:	e003      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d96:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005da6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005da8:	2300      	movs	r3, #0
 8005daa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005db0:	460b      	mov	r3, r1
 8005db2:	4313      	orrs	r3, r2
 8005db4:	d034      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc4:	d007      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005dc6:	e011      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc8:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	4a11      	ldr	r2, [pc, #68]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005dd4:	e00e      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dda:	3308      	adds	r3, #8
 8005ddc:	2102      	movs	r1, #2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 faae 	bl	8007340 <RCCEx_PLL2_Config>
 8005de4:	4603      	mov	r3, r0
 8005de6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005dea:	e003      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10d      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0a:	4a02      	ldr	r2, [pc, #8]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e10:	e006      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005e12:	bf00      	nop
 8005e14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e2e:	2300      	movs	r3, #0
 8005e30:	667b      	str	r3, [r7, #100]	; 0x64
 8005e32:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005e36:	460b      	mov	r3, r1
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	d00c      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e40:	3328      	adds	r3, #40	; 0x28
 8005e42:	2102      	movs	r1, #2
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 fb2d 	bl	80074a4 <RCCEx_PLL3_Config>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005e62:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e64:	2300      	movs	r3, #0
 8005e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e68:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	d036      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e7c:	d018      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005e7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e82:	d811      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e88:	d014      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e8e:	d80b      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d011      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e98:	d106      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e9a:	4bb7      	ldr	r3, [pc, #732]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	4ab6      	ldr	r2, [pc, #728]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005ea6:	e008      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005eae:	e004      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005eb0:	bf00      	nop
 8005eb2:	e002      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005eb4:	bf00      	nop
 8005eb6:	e000      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ec2:	4bad      	ldr	r3, [pc, #692]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed0:	4aa9      	ldr	r2, [pc, #676]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	6553      	str	r3, [r2, #84]	; 0x54
 8005ed6:	e003      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005edc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005eec:	653b      	str	r3, [r7, #80]	; 0x50
 8005eee:	2300      	movs	r3, #0
 8005ef0:	657b      	str	r3, [r7, #84]	; 0x54
 8005ef2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	d009      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005efc:	4b9e      	ldr	r3, [pc, #632]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0a:	4a9b      	ldr	r2, [pc, #620]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f0c:	430b      	orrs	r3, r1
 8005f0e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f1e:	2300      	movs	r3, #0
 8005f20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f22:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005f26:	460b      	mov	r3, r1
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	d009      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f2c:	4b92      	ldr	r3, [pc, #584]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f30:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f3a:	4a8f      	ldr	r2, [pc, #572]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005f4c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f4e:	2300      	movs	r3, #0
 8005f50:	647b      	str	r3, [r7, #68]	; 0x44
 8005f52:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005f56:	460b      	mov	r3, r1
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	d00e      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f5c:	4b86      	ldr	r3, [pc, #536]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	4a85      	ldr	r2, [pc, #532]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f66:	6113      	str	r3, [r2, #16]
 8005f68:	4b83      	ldr	r3, [pc, #524]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f6a:	6919      	ldr	r1, [r3, #16]
 8005f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f74:	4a80      	ldr	r2, [pc, #512]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f76:	430b      	orrs	r3, r1
 8005f78:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005f86:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f88:	2300      	movs	r3, #0
 8005f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f8c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005f90:	460b      	mov	r3, r1
 8005f92:	4313      	orrs	r3, r2
 8005f94:	d009      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f96:	4b78      	ldr	r3, [pc, #480]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa4:	4a74      	ldr	r2, [pc, #464]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb8:	2300      	movs	r3, #0
 8005fba:	637b      	str	r3, [r7, #52]	; 0x34
 8005fbc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	d00a      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fc6:	4b6c      	ldr	r3, [pc, #432]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fca:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd6:	4a68      	ldr	r2, [pc, #416]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	62b9      	str	r1, [r7, #40]	; 0x28
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	d011      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	2100      	movs	r1, #0
 8006000:	4618      	mov	r0, r3
 8006002:	f001 f99d 	bl	8007340 <RCCEx_PLL2_Config>
 8006006:	4603      	mov	r3, r0
 8006008:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800600c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006014:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006018:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006024:	2100      	movs	r1, #0
 8006026:	6239      	str	r1, [r7, #32]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
 800602e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006032:	460b      	mov	r3, r1
 8006034:	4313      	orrs	r3, r2
 8006036:	d011      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800603c:	3308      	adds	r3, #8
 800603e:	2101      	movs	r1, #1
 8006040:	4618      	mov	r0, r3
 8006042:	f001 f97d 	bl	8007340 <RCCEx_PLL2_Config>
 8006046:	4603      	mov	r3, r0
 8006048:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800604c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006054:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006058:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800605c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	2100      	movs	r1, #0
 8006066:	61b9      	str	r1, [r7, #24]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	61fb      	str	r3, [r7, #28]
 800606e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006072:	460b      	mov	r3, r1
 8006074:	4313      	orrs	r3, r2
 8006076:	d011      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800607c:	3308      	adds	r3, #8
 800607e:	2102      	movs	r1, #2
 8006080:	4618      	mov	r0, r3
 8006082:	f001 f95d 	bl	8007340 <RCCEx_PLL2_Config>
 8006086:	4603      	mov	r3, r0
 8006088:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800608c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006094:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006098:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800609c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	2100      	movs	r1, #0
 80060a6:	6139      	str	r1, [r7, #16]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80060b2:	460b      	mov	r3, r1
 80060b4:	4313      	orrs	r3, r2
 80060b6:	d011      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060bc:	3328      	adds	r3, #40	; 0x28
 80060be:	2100      	movs	r1, #0
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 f9ef 	bl	80074a4 <RCCEx_PLL3_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80060cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80060dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	2100      	movs	r1, #0
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060f2:	460b      	mov	r3, r1
 80060f4:	4313      	orrs	r3, r2
 80060f6:	d011      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060fc:	3328      	adds	r3, #40	; 0x28
 80060fe:	2101      	movs	r1, #1
 8006100:	4618      	mov	r0, r3
 8006102:	f001 f9cf 	bl	80074a4 <RCCEx_PLL3_Config>
 8006106:	4603      	mov	r3, r0
 8006108:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800610c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006114:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006118:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800611c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	2100      	movs	r1, #0
 8006126:	6039      	str	r1, [r7, #0]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	607b      	str	r3, [r7, #4]
 800612e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006132:	460b      	mov	r3, r1
 8006134:	4313      	orrs	r3, r2
 8006136:	d011      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800613c:	3328      	adds	r3, #40	; 0x28
 800613e:	2102      	movs	r1, #2
 8006140:	4618      	mov	r0, r3
 8006142:	f001 f9af 	bl	80074a4 <RCCEx_PLL3_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800614c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006158:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800615c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	e000      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
}
 800616a:	4618      	mov	r0, r3
 800616c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006170:	46bd      	mov	sp, r7
 8006172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006176:	bf00      	nop
 8006178:	58024400 	.word	0x58024400

0800617c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b090      	sub	sp, #64	; 0x40
 8006180:	af00      	add	r7, sp, #0
 8006182:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800618a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800618e:	430b      	orrs	r3, r1
 8006190:	f040 8094 	bne.w	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006194:	4b9b      	ldr	r3, [pc, #620]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	f200 8087 	bhi.w	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80061a6:	a201      	add	r2, pc, #4	; (adr r2, 80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	080061c1 	.word	0x080061c1
 80061b0:	080061e9 	.word	0x080061e9
 80061b4:	08006211 	.word	0x08006211
 80061b8:	080062ad 	.word	0x080062ad
 80061bc:	08006239 	.word	0x08006239
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061c0:	4b90      	ldr	r3, [pc, #576]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061cc:	d108      	bne.n	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 ff62 	bl	800709c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061dc:	f000 bc93 	b.w	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061e4:	f000 bc8f 	b.w	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061e8:	4b86      	ldr	r3, [pc, #536]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061f4:	d108      	bne.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061f6:	f107 0318 	add.w	r3, r7, #24
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fca6 	bl	8006b4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006204:	f000 bc7f 	b.w	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800620c:	f000 bc7b 	b.w	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006210:	4b7c      	ldr	r3, [pc, #496]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800621c:	d108      	bne.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800621e:	f107 030c 	add.w	r3, r7, #12
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fde6 	bl	8006df4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800622c:	f000 bc6b 	b.w	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006234:	f000 bc67 	b.w	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006238:	4b72      	ldr	r3, [pc, #456]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800623a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006240:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006242:	4b70      	ldr	r3, [pc, #448]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0304 	and.w	r3, r3, #4
 800624a:	2b04      	cmp	r3, #4
 800624c:	d10c      	bne.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800624e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006250:	2b00      	cmp	r3, #0
 8006252:	d109      	bne.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006254:	4b6b      	ldr	r3, [pc, #428]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	08db      	lsrs	r3, r3, #3
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	4a6a      	ldr	r2, [pc, #424]	; (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006260:	fa22 f303 	lsr.w	r3, r2, r3
 8006264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006266:	e01f      	b.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006268:	4b66      	ldr	r3, [pc, #408]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006274:	d106      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800627c:	d102      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800627e:	4b63      	ldr	r3, [pc, #396]	; (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006282:	e011      	b.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006284:	4b5f      	ldr	r3, [pc, #380]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006290:	d106      	bne.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006298:	d102      	bne.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800629a:	4b5d      	ldr	r3, [pc, #372]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800629c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800629e:	e003      	b.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80062a4:	f000 bc2f 	b.w	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80062a8:	f000 bc2d 	b.w	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80062ac:	4b59      	ldr	r3, [pc, #356]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80062ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062b0:	f000 bc29 	b.w	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062b8:	f000 bc25 	b.w	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80062bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80062c4:	430b      	orrs	r3, r1
 80062c6:	f040 80a7 	bne.w	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80062ca:	4b4e      	ldr	r3, [pc, #312]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ce:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80062d2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062da:	d054      	beq.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062e2:	f200 808b 	bhi.w	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062ec:	f000 8083 	beq.w	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062f6:	f200 8081 	bhi.w	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006300:	d02f      	beq.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006308:	d878      	bhi.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	2b00      	cmp	r3, #0
 800630e:	d004      	beq.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006316:	d012      	beq.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8006318:	e070      	b.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800631a:	4b3a      	ldr	r3, [pc, #232]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006322:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006326:	d107      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800632c:	4618      	mov	r0, r3
 800632e:	f000 feb5 	bl	800709c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006336:	e3e6      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006338:	2300      	movs	r3, #0
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800633c:	e3e3      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800633e:	4b31      	ldr	r3, [pc, #196]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800634a:	d107      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800634c:	f107 0318 	add.w	r3, r7, #24
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fbfb 	bl	8006b4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800635a:	e3d4      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006360:	e3d1      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006362:	4b28      	ldr	r3, [pc, #160]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800636a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800636e:	d107      	bne.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006370:	f107 030c 	add.w	r3, r7, #12
 8006374:	4618      	mov	r0, r3
 8006376:	f000 fd3d 	bl	8006df4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800637e:	e3c2      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006380:	2300      	movs	r3, #0
 8006382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006384:	e3bf      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006386:	4b1f      	ldr	r3, [pc, #124]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800638a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800638e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006390:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b04      	cmp	r3, #4
 800639a:	d10c      	bne.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800639c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063a2:	4b18      	ldr	r3, [pc, #96]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	08db      	lsrs	r3, r3, #3
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	4a16      	ldr	r2, [pc, #88]	; (8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80063ae:	fa22 f303 	lsr.w	r3, r2, r3
 80063b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b4:	e01e      	b.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063b6:	4b13      	ldr	r3, [pc, #76]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c2:	d106      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80063c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ca:	d102      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063cc:	4b0f      	ldr	r3, [pc, #60]	; (800640c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80063ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063d0:	e010      	b.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063d2:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063de:	d106      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80063e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063e6:	d102      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063e8:	4b09      	ldr	r3, [pc, #36]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80063ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ec:	e002      	b.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80063f2:	e388      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80063f4:	e387      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80063f6:	4b07      	ldr	r3, [pc, #28]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80063f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063fa:	e384      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80063fc:	2300      	movs	r3, #0
 80063fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006400:	e381      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006402:	bf00      	nop
 8006404:	58024400 	.word	0x58024400
 8006408:	03d09000 	.word	0x03d09000
 800640c:	003d0900 	.word	0x003d0900
 8006410:	017d7840 	.word	0x017d7840
 8006414:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800641c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006420:	430b      	orrs	r3, r1
 8006422:	f040 809c 	bne.w	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006426:	4b9e      	ldr	r3, [pc, #632]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800642e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006436:	d054      	beq.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800643e:	f200 808b 	bhi.w	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006448:	f000 8083 	beq.w	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006452:	f200 8081 	bhi.w	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800645c:	d02f      	beq.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006464:	d878      	bhi.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	2b00      	cmp	r3, #0
 800646a:	d004      	beq.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006472:	d012      	beq.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006474:	e070      	b.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006476:	4b8a      	ldr	r3, [pc, #552]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006482:	d107      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006488:	4618      	mov	r0, r3
 800648a:	f000 fe07 	bl	800709c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006492:	e338      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006498:	e335      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800649a:	4b81      	ldr	r3, [pc, #516]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064a6:	d107      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064a8:	f107 0318 	add.w	r3, r7, #24
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fb4d 	bl	8006b4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064b6:	e326      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064b8:	2300      	movs	r3, #0
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064bc:	e323      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064be:	4b78      	ldr	r3, [pc, #480]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ca:	d107      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064cc:	f107 030c 	add.w	r3, r7, #12
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 fc8f 	bl	8006df4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064da:	e314      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80064dc:	2300      	movs	r3, #0
 80064de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064e0:	e311      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064e2:	4b6f      	ldr	r3, [pc, #444]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064ec:	4b6c      	ldr	r3, [pc, #432]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d10c      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80064f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d109      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064fe:	4b68      	ldr	r3, [pc, #416]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	08db      	lsrs	r3, r3, #3
 8006504:	f003 0303 	and.w	r3, r3, #3
 8006508:	4a66      	ldr	r2, [pc, #408]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800650a:	fa22 f303 	lsr.w	r3, r2, r3
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006510:	e01e      	b.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006512:	4b63      	ldr	r3, [pc, #396]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651e:	d106      	bne.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006526:	d102      	bne.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006528:	4b5f      	ldr	r3, [pc, #380]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800652c:	e010      	b.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800652e:	4b5c      	ldr	r3, [pc, #368]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006536:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800653a:	d106      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800653c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006542:	d102      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006544:	4b59      	ldr	r3, [pc, #356]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006548:	e002      	b.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800654e:	e2da      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006550:	e2d9      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006552:	4b57      	ldr	r3, [pc, #348]	; (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006556:	e2d6      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800655c:	e2d3      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800655e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006562:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006566:	430b      	orrs	r3, r1
 8006568:	f040 80a7 	bne.w	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800656c:	4b4c      	ldr	r3, [pc, #304]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800656e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006570:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006574:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800657c:	d055      	beq.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006584:	f200 8096 	bhi.w	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800658e:	f000 8084 	beq.w	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8006592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006594:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006598:	f200 808c 	bhi.w	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800659c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a2:	d030      	beq.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065aa:	f200 8083 	bhi.w	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80065b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ba:	d012      	beq.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80065bc:	e07a      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065be:	4b38      	ldr	r3, [pc, #224]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065ca:	d107      	bne.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fd63 	bl	800709c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065da:	e294      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065dc:	2300      	movs	r3, #0
 80065de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065e0:	e291      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065e2:	4b2f      	ldr	r3, [pc, #188]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ee:	d107      	bne.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065f0:	f107 0318 	add.w	r3, r7, #24
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 faa9 	bl	8006b4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065fe:	e282      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006600:	2300      	movs	r3, #0
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006604:	e27f      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006606:	4b26      	ldr	r3, [pc, #152]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800660e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006612:	d107      	bne.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006614:	f107 030c 	add.w	r3, r7, #12
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fbeb 	bl	8006df4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006622:	e270      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006624:	2300      	movs	r3, #0
 8006626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006628:	e26d      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800662a:	4b1d      	ldr	r3, [pc, #116]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800662c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800662e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006632:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006634:	4b1a      	ldr	r3, [pc, #104]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b04      	cmp	r3, #4
 800663e:	d10c      	bne.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8006640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006642:	2b00      	cmp	r3, #0
 8006644:	d109      	bne.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006646:	4b16      	ldr	r3, [pc, #88]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	08db      	lsrs	r3, r3, #3
 800664c:	f003 0303 	and.w	r3, r3, #3
 8006650:	4a14      	ldr	r2, [pc, #80]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006652:	fa22 f303 	lsr.w	r3, r2, r3
 8006656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006658:	e01e      	b.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800665a:	4b11      	ldr	r3, [pc, #68]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006666:	d106      	bne.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800666e:	d102      	bne.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006670:	4b0d      	ldr	r3, [pc, #52]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006674:	e010      	b.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006676:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006682:	d106      	bne.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800668a:	d102      	bne.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800668c:	4b07      	ldr	r3, [pc, #28]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800668e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006690:	e002      	b.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006696:	e236      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006698:	e235      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800669a:	4b05      	ldr	r3, [pc, #20]	; (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800669c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800669e:	e232      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80066a0:	58024400 	.word	0x58024400
 80066a4:	03d09000 	.word	0x03d09000
 80066a8:	003d0900 	.word	0x003d0900
 80066ac:	017d7840 	.word	0x017d7840
 80066b0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066b8:	e225      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80066ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066be:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80066c2:	430b      	orrs	r3, r1
 80066c4:	f040 8085 	bne.w	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80066c8:	4b9c      	ldr	r3, [pc, #624]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80066ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066cc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80066d0:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066d8:	d06b      	beq.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066e0:	d874      	bhi.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066e8:	d056      	beq.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80066ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066f0:	d86c      	bhi.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066f8:	d03b      	beq.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006700:	d864      	bhi.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006708:	d021      	beq.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006710:	d85c      	bhi.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006714:	2b00      	cmp	r3, #0
 8006716:	d004      	beq.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8006718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800671e:	d004      	beq.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8006720:	e054      	b.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006722:	f7fe fb75 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
 8006726:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006728:	e1ed      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800672a:	4b84      	ldr	r3, [pc, #528]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006736:	d107      	bne.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006738:	f107 0318 	add.w	r3, r7, #24
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fa05 	bl	8006b4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006746:	e1de      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006748:	2300      	movs	r3, #0
 800674a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800674c:	e1db      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800674e:	4b7b      	ldr	r3, [pc, #492]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800675a:	d107      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800675c:	f107 030c 	add.w	r3, r7, #12
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fb47 	bl	8006df4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800676a:	e1cc      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006770:	e1c9      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006772:	4b72      	ldr	r3, [pc, #456]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0304 	and.w	r3, r3, #4
 800677a:	2b04      	cmp	r3, #4
 800677c:	d109      	bne.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800677e:	4b6f      	ldr	r3, [pc, #444]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	08db      	lsrs	r3, r3, #3
 8006784:	f003 0303 	and.w	r3, r3, #3
 8006788:	4a6d      	ldr	r2, [pc, #436]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800678a:	fa22 f303 	lsr.w	r3, r2, r3
 800678e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006790:	e1b9      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006796:	e1b6      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006798:	4b68      	ldr	r3, [pc, #416]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067a4:	d102      	bne.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80067a6:	4b67      	ldr	r3, [pc, #412]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80067a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067aa:	e1ac      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067b0:	e1a9      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067b2:	4b62      	ldr	r3, [pc, #392]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067be:	d102      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80067c0:	4b61      	ldr	r3, [pc, #388]	; (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067c4:	e19f      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ca:	e19c      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d0:	e199      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80067d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d6:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80067da:	430b      	orrs	r3, r1
 80067dc:	d173      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80067de:	4b57      	ldr	r3, [pc, #348]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067e6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ee:	d02f      	beq.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80067f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067f6:	d863      	bhi.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80067f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d004      	beq.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006804:	d012      	beq.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006806:	e05b      	b.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006808:	4b4c      	ldr	r3, [pc, #304]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006814:	d107      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006816:	f107 0318 	add.w	r3, r7, #24
 800681a:	4618      	mov	r0, r3
 800681c:	f000 f996 	bl	8006b4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006824:	e16f      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800682a:	e16c      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800682c:	4b43      	ldr	r3, [pc, #268]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006838:	d107      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800683a:	f107 030c 	add.w	r3, r7, #12
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fad8 	bl	8006df4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006848:	e15d      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800684e:	e15a      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006850:	4b3a      	ldr	r3, [pc, #232]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006854:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006858:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800685a:	4b38      	ldr	r3, [pc, #224]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b04      	cmp	r3, #4
 8006864:	d10c      	bne.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006868:	2b00      	cmp	r3, #0
 800686a:	d109      	bne.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800686c:	4b33      	ldr	r3, [pc, #204]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	08db      	lsrs	r3, r3, #3
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	4a32      	ldr	r2, [pc, #200]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006878:	fa22 f303 	lsr.w	r3, r2, r3
 800687c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800687e:	e01e      	b.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006880:	4b2e      	ldr	r3, [pc, #184]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800688c:	d106      	bne.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800688e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006890:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006894:	d102      	bne.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006896:	4b2b      	ldr	r3, [pc, #172]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800689a:	e010      	b.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800689c:	4b27      	ldr	r3, [pc, #156]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068a8:	d106      	bne.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80068aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068b0:	d102      	bne.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068b2:	4b25      	ldr	r3, [pc, #148]	; (8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80068b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b6:	e002      	b.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80068bc:	e123      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80068be:	e122      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068c4:	e11f      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80068c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ca:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80068ce:	430b      	orrs	r3, r1
 80068d0:	d13c      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80068d2:	4b1a      	ldr	r3, [pc, #104]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068da:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d004      	beq.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e8:	d012      	beq.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80068ea:	e023      	b.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068ec:	4b13      	ldr	r3, [pc, #76]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068f8:	d107      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fbcc 	bl	800709c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006908:	e0fd      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800690e:	e0fa      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006910:	4b0a      	ldr	r3, [pc, #40]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800691c:	d107      	bne.n	800692e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800691e:	f107 0318 	add.w	r3, r7, #24
 8006922:	4618      	mov	r0, r3
 8006924:	f000 f912 	bl	8006b4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800692c:	e0eb      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006932:	e0e8      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006938:	e0e5      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800693a:	bf00      	nop
 800693c:	58024400 	.word	0x58024400
 8006940:	03d09000 	.word	0x03d09000
 8006944:	003d0900 	.word	0x003d0900
 8006948:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800694c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006950:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006954:	430b      	orrs	r3, r1
 8006956:	f040 8085 	bne.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800695a:	4b6d      	ldr	r3, [pc, #436]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800695c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006962:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800696a:	d06b      	beq.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006972:	d874      	bhi.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697a:	d056      	beq.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006982:	d86c      	bhi.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006986:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800698a:	d03b      	beq.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006992:	d864      	bhi.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800699a:	d021      	beq.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a2:	d85c      	bhi.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80069a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d004      	beq.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069b0:	d004      	beq.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80069b2:	e054      	b.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80069b4:	f000 f8b4 	bl	8006b20 <HAL_RCCEx_GetD3PCLK1Freq>
 80069b8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069ba:	e0a4      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069bc:	4b54      	ldr	r3, [pc, #336]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069c8:	d107      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ca:	f107 0318 	add.w	r3, r7, #24
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 f8bc 	bl	8006b4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069d8:	e095      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069de:	e092      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069e0:	4b4b      	ldr	r3, [pc, #300]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ec:	d107      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ee:	f107 030c 	add.w	r3, r7, #12
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 f9fe 	bl	8006df4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069fc:	e083      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069fe:	2300      	movs	r3, #0
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a02:	e080      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a04:	4b42      	ldr	r3, [pc, #264]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d109      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a10:	4b3f      	ldr	r3, [pc, #252]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	08db      	lsrs	r3, r3, #3
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	4a3e      	ldr	r2, [pc, #248]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a22:	e070      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a24:	2300      	movs	r3, #0
 8006a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a28:	e06d      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a2a:	4b39      	ldr	r3, [pc, #228]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a36:	d102      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006a38:	4b37      	ldr	r3, [pc, #220]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a3c:	e063      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a42:	e060      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a44:	4b32      	ldr	r3, [pc, #200]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a50:	d102      	bne.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8006a52:	4b32      	ldr	r3, [pc, #200]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a56:	e056      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a5c:	e053      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a62:	e050      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a68:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006a6c:	430b      	orrs	r3, r1
 8006a6e:	d148      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006a70:	4b27      	ldr	r3, [pc, #156]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a78:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a80:	d02a      	beq.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a88:	d838      	bhi.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d004      	beq.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a96:	d00d      	beq.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006a98:	e030      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a9a:	4b1d      	ldr	r3, [pc, #116]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aa6:	d102      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006aa8:	4b1c      	ldr	r3, [pc, #112]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aac:	e02b      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ab2:	e028      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ab4:	4b16      	ldr	r3, [pc, #88]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ac0:	d107      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fae8 	bl	800709c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ad0:	e019      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ad6:	e016      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ad8:	4b0d      	ldr	r3, [pc, #52]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ae0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ae4:	d107      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ae6:	f107 0318 	add.w	r3, r7, #24
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 f82e 	bl	8006b4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006af4:	e007      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006afa:	e004      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b00:	e001      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006b02:	2300      	movs	r3, #0
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3740      	adds	r7, #64	; 0x40
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	58024400 	.word	0x58024400
 8006b14:	03d09000 	.word	0x03d09000
 8006b18:	003d0900 	.word	0x003d0900
 8006b1c:	017d7840 	.word	0x017d7840

08006b20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b24:	f7fe f944 	bl	8004db0 <HAL_RCC_GetHCLKFreq>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	091b      	lsrs	r3, r3, #4
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	4904      	ldr	r1, [pc, #16]	; (8006b48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b36:	5ccb      	ldrb	r3, [r1, r3]
 8006b38:	f003 031f 	and.w	r3, r3, #31
 8006b3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	58024400 	.word	0x58024400
 8006b48:	08009024 	.word	0x08009024

08006b4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b089      	sub	sp, #36	; 0x24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b54:	4ba1      	ldr	r3, [pc, #644]	; (8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b58:	f003 0303 	and.w	r3, r3, #3
 8006b5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006b5e:	4b9f      	ldr	r3, [pc, #636]	; (8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b62:	0b1b      	lsrs	r3, r3, #12
 8006b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b6a:	4b9c      	ldr	r3, [pc, #624]	; (8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6e:	091b      	lsrs	r3, r3, #4
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006b76:	4b99      	ldr	r3, [pc, #612]	; (8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7a:	08db      	lsrs	r3, r3, #3
 8006b7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	fb02 f303 	mul.w	r3, r2, r3
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 8111 	beq.w	8006dbc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	f000 8083 	beq.w	8006ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	f200 80a1 	bhi.w	8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d056      	beq.n	8006c64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006bb6:	e099      	b.n	8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bb8:	4b88      	ldr	r3, [pc, #544]	; (8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0320 	and.w	r3, r3, #32
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d02d      	beq.n	8006c20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bc4:	4b85      	ldr	r3, [pc, #532]	; (8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	08db      	lsrs	r3, r3, #3
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	4a84      	ldr	r2, [pc, #528]	; (8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	ee07 3a90 	vmov	s15, r3
 8006bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bee:	4b7b      	ldr	r3, [pc, #492]	; (8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf6:	ee07 3a90 	vmov	s15, r3
 8006bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c02:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c1e:	e087      	b.n	8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	ee07 3a90 	vmov	s15, r3
 8006c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006de8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c32:	4b6a      	ldr	r3, [pc, #424]	; (8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c46:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c62:	e065      	b.n	8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006dec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c76:	4b59      	ldr	r3, [pc, #356]	; (8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c7e:	ee07 3a90 	vmov	s15, r3
 8006c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ca6:	e043      	b.n	8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006df0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cba:	4b48      	ldr	r3, [pc, #288]	; (8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc2:	ee07 3a90 	vmov	s15, r3
 8006cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cce:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cea:	e021      	b.n	8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006dec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cfe:	4b37      	ldr	r3, [pc, #220]	; (8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006d30:	4b2a      	ldr	r3, [pc, #168]	; (8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d34:	0a5b      	lsrs	r3, r3, #9
 8006d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d3a:	ee07 3a90 	vmov	s15, r3
 8006d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d56:	ee17 2a90 	vmov	r2, s15
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006d5e:	4b1f      	ldr	r3, [pc, #124]	; (8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	0c1b      	lsrs	r3, r3, #16
 8006d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d68:	ee07 3a90 	vmov	s15, r3
 8006d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d78:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d84:	ee17 2a90 	vmov	r2, s15
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006d8c:	4b13      	ldr	r3, [pc, #76]	; (8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d90:	0e1b      	lsrs	r3, r3, #24
 8006d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006da2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006db2:	ee17 2a90 	vmov	r2, s15
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006dba:	e008      	b.n	8006dce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	609a      	str	r2, [r3, #8]
}
 8006dce:	bf00      	nop
 8006dd0:	3724      	adds	r7, #36	; 0x24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	58024400 	.word	0x58024400
 8006de0:	03d09000 	.word	0x03d09000
 8006de4:	46000000 	.word	0x46000000
 8006de8:	4c742400 	.word	0x4c742400
 8006dec:	4a742400 	.word	0x4a742400
 8006df0:	4bbebc20 	.word	0x4bbebc20

08006df4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b089      	sub	sp, #36	; 0x24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006dfc:	4ba1      	ldr	r3, [pc, #644]	; (8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e00:	f003 0303 	and.w	r3, r3, #3
 8006e04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006e06:	4b9f      	ldr	r3, [pc, #636]	; (8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0a:	0d1b      	lsrs	r3, r3, #20
 8006e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e12:	4b9c      	ldr	r3, [pc, #624]	; (8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	0a1b      	lsrs	r3, r3, #8
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e1e:	4b99      	ldr	r3, [pc, #612]	; (8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e22:	08db      	lsrs	r3, r3, #3
 8006e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	fb02 f303 	mul.w	r3, r2, r3
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 8111 	beq.w	8007064 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	f000 8083 	beq.w	8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	f200 80a1 	bhi.w	8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d056      	beq.n	8006f0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e5e:	e099      	b.n	8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e60:	4b88      	ldr	r3, [pc, #544]	; (8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0320 	and.w	r3, r3, #32
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d02d      	beq.n	8006ec8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e6c:	4b85      	ldr	r3, [pc, #532]	; (8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	08db      	lsrs	r3, r3, #3
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	4a84      	ldr	r2, [pc, #528]	; (8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006e78:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	ee07 3a90 	vmov	s15, r3
 8006e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e96:	4b7b      	ldr	r3, [pc, #492]	; (8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9e:	ee07 3a90 	vmov	s15, r3
 8006ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800708c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ec6:	e087      	b.n	8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007090 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eda:	4b6a      	ldr	r3, [pc, #424]	; (8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800708c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f0a:	e065      	b.n	8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007094 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1e:	4b59      	ldr	r3, [pc, #356]	; (8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f32:	eddf 5a56 	vldr	s11, [pc, #344]	; 800708c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f4e:	e043      	b.n	8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007098 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f62:	4b48      	ldr	r3, [pc, #288]	; (8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f76:	eddf 5a45 	vldr	s11, [pc, #276]	; 800708c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f92:	e021      	b.n	8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007094 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fa6:	4b37      	ldr	r3, [pc, #220]	; (8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800708c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006fd8:	4b2a      	ldr	r3, [pc, #168]	; (8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fdc:	0a5b      	lsrs	r3, r3, #9
 8006fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ff2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ffe:	ee17 2a90 	vmov	r2, s15
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007006:	4b1f      	ldr	r3, [pc, #124]	; (8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	0c1b      	lsrs	r3, r3, #16
 800700c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007010:	ee07 3a90 	vmov	s15, r3
 8007014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800701c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007020:	edd7 6a07 	vldr	s13, [r7, #28]
 8007024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800702c:	ee17 2a90 	vmov	r2, s15
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007034:	4b13      	ldr	r3, [pc, #76]	; (8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	0e1b      	lsrs	r3, r3, #24
 800703a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800704a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800704e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800705a:	ee17 2a90 	vmov	r2, s15
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007062:	e008      	b.n	8007076 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	609a      	str	r2, [r3, #8]
}
 8007076:	bf00      	nop
 8007078:	3724      	adds	r7, #36	; 0x24
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	58024400 	.word	0x58024400
 8007088:	03d09000 	.word	0x03d09000
 800708c:	46000000 	.word	0x46000000
 8007090:	4c742400 	.word	0x4c742400
 8007094:	4a742400 	.word	0x4a742400
 8007098:	4bbebc20 	.word	0x4bbebc20

0800709c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800709c:	b480      	push	{r7}
 800709e:	b089      	sub	sp, #36	; 0x24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070a4:	4ba0      	ldr	r3, [pc, #640]	; (8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a8:	f003 0303 	and.w	r3, r3, #3
 80070ac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80070ae:	4b9e      	ldr	r3, [pc, #632]	; (8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	091b      	lsrs	r3, r3, #4
 80070b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070b8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80070ba:	4b9b      	ldr	r3, [pc, #620]	; (8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80070c4:	4b98      	ldr	r3, [pc, #608]	; (8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c8:	08db      	lsrs	r3, r3, #3
 80070ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	fb02 f303 	mul.w	r3, r2, r3
 80070d4:	ee07 3a90 	vmov	s15, r3
 80070d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070dc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 8111 	beq.w	800730a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	f000 8083 	beq.w	80071f6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	f200 80a1 	bhi.w	800723a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d056      	beq.n	80071b2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007104:	e099      	b.n	800723a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007106:	4b88      	ldr	r3, [pc, #544]	; (8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d02d      	beq.n	800716e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007112:	4b85      	ldr	r3, [pc, #532]	; (8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	08db      	lsrs	r3, r3, #3
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	4a83      	ldr	r2, [pc, #524]	; (800732c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800711e:	fa22 f303 	lsr.w	r3, r2, r3
 8007122:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	ee07 3a90 	vmov	s15, r3
 8007134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713c:	4b7a      	ldr	r3, [pc, #488]	; (8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800713e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007144:	ee07 3a90 	vmov	s15, r3
 8007148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800714c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007150:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007330 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007154:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007158:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800715c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007168:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800716c:	e087      	b.n	800727e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	ee07 3a90 	vmov	s15, r3
 8007174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007178:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007334 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800717c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007180:	4b69      	ldr	r3, [pc, #420]	; (8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007188:	ee07 3a90 	vmov	s15, r3
 800718c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007190:	ed97 6a03 	vldr	s12, [r7, #12]
 8007194:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007330 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007198:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071b0:	e065      	b.n	800727e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	ee07 3a90 	vmov	s15, r3
 80071b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071bc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007338 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80071c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c4:	4b58      	ldr	r3, [pc, #352]	; (8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071cc:	ee07 3a90 	vmov	s15, r3
 80071d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007330 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071f4:	e043      	b.n	800727e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	ee07 3a90 	vmov	s15, r3
 80071fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007200:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800733c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007208:	4b47      	ldr	r3, [pc, #284]	; (8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800720a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007210:	ee07 3a90 	vmov	s15, r3
 8007214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007218:	ed97 6a03 	vldr	s12, [r7, #12]
 800721c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007330 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007220:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007228:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800722c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007234:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007238:	e021      	b.n	800727e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	ee07 3a90 	vmov	s15, r3
 8007240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007244:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007334 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724c:	4b36      	ldr	r3, [pc, #216]	; (8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800724e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007254:	ee07 3a90 	vmov	s15, r3
 8007258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007260:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007330 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007278:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800727c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800727e:	4b2a      	ldr	r3, [pc, #168]	; (8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	0a5b      	lsrs	r3, r3, #9
 8007284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007288:	ee07 3a90 	vmov	s15, r3
 800728c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007290:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007294:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007298:	edd7 6a07 	vldr	s13, [r7, #28]
 800729c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072a4:	ee17 2a90 	vmov	r2, s15
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80072ac:	4b1e      	ldr	r3, [pc, #120]	; (8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	0c1b      	lsrs	r3, r3, #16
 80072b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072d2:	ee17 2a90 	vmov	r2, s15
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80072da:	4b13      	ldr	r3, [pc, #76]	; (8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072de:	0e1b      	lsrs	r3, r3, #24
 80072e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e4:	ee07 3a90 	vmov	s15, r3
 80072e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007300:	ee17 2a90 	vmov	r2, s15
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007308:	e008      	b.n	800731c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	609a      	str	r2, [r3, #8]
}
 800731c:	bf00      	nop
 800731e:	3724      	adds	r7, #36	; 0x24
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	58024400 	.word	0x58024400
 800732c:	03d09000 	.word	0x03d09000
 8007330:	46000000 	.word	0x46000000
 8007334:	4c742400 	.word	0x4c742400
 8007338:	4a742400 	.word	0x4a742400
 800733c:	4bbebc20 	.word	0x4bbebc20

08007340 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800734e:	4b53      	ldr	r3, [pc, #332]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007352:	f003 0303 	and.w	r3, r3, #3
 8007356:	2b03      	cmp	r3, #3
 8007358:	d101      	bne.n	800735e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e099      	b.n	8007492 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800735e:	4b4f      	ldr	r3, [pc, #316]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a4e      	ldr	r2, [pc, #312]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007364:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800736a:	f7fa f9fb 	bl	8001764 <HAL_GetTick>
 800736e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007370:	e008      	b.n	8007384 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007372:	f7fa f9f7 	bl	8001764 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d901      	bls.n	8007384 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e086      	b.n	8007492 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007384:	4b45      	ldr	r3, [pc, #276]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1f0      	bne.n	8007372 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007390:	4b42      	ldr	r3, [pc, #264]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007394:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	031b      	lsls	r3, r3, #12
 800739e:	493f      	ldr	r1, [pc, #252]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	628b      	str	r3, [r1, #40]	; 0x28
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	3b01      	subs	r3, #1
 80073aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	025b      	lsls	r3, r3, #9
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	3b01      	subs	r3, #1
 80073c0:	041b      	lsls	r3, r3, #16
 80073c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	061b      	lsls	r3, r3, #24
 80073d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073d4:	4931      	ldr	r1, [pc, #196]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073da:	4b30      	ldr	r3, [pc, #192]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	492d      	ldr	r1, [pc, #180]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073ec:	4b2b      	ldr	r3, [pc, #172]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f0:	f023 0220 	bic.w	r2, r3, #32
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	4928      	ldr	r1, [pc, #160]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073fe:	4b27      	ldr	r3, [pc, #156]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	4a26      	ldr	r2, [pc, #152]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007404:	f023 0310 	bic.w	r3, r3, #16
 8007408:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800740a:	4b24      	ldr	r3, [pc, #144]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 800740c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800740e:	4b24      	ldr	r3, [pc, #144]	; (80074a0 <RCCEx_PLL2_Config+0x160>)
 8007410:	4013      	ands	r3, r2
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	69d2      	ldr	r2, [r2, #28]
 8007416:	00d2      	lsls	r2, r2, #3
 8007418:	4920      	ldr	r1, [pc, #128]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 800741a:	4313      	orrs	r3, r2
 800741c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800741e:	4b1f      	ldr	r3, [pc, #124]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007422:	4a1e      	ldr	r2, [pc, #120]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007424:	f043 0310 	orr.w	r3, r3, #16
 8007428:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d106      	bne.n	800743e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007430:	4b1a      	ldr	r3, [pc, #104]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	4a19      	ldr	r2, [pc, #100]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007436:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800743a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800743c:	e00f      	b.n	800745e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d106      	bne.n	8007452 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007444:	4b15      	ldr	r3, [pc, #84]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	4a14      	ldr	r2, [pc, #80]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 800744a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800744e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007450:	e005      	b.n	800745e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007452:	4b12      	ldr	r3, [pc, #72]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007456:	4a11      	ldr	r2, [pc, #68]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007458:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800745c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800745e:	4b0f      	ldr	r3, [pc, #60]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a0e      	ldr	r2, [pc, #56]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800746a:	f7fa f97b 	bl	8001764 <HAL_GetTick>
 800746e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007470:	e008      	b.n	8007484 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007472:	f7fa f977 	bl	8001764 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	2b02      	cmp	r3, #2
 800747e:	d901      	bls.n	8007484 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e006      	b.n	8007492 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007484:	4b05      	ldr	r3, [pc, #20]	; (800749c <RCCEx_PLL2_Config+0x15c>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0f0      	beq.n	8007472 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007490:	7bfb      	ldrb	r3, [r7, #15]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	58024400 	.word	0x58024400
 80074a0:	ffff0007 	.word	0xffff0007

080074a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074b2:	4b53      	ldr	r3, [pc, #332]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 80074b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d101      	bne.n	80074c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e099      	b.n	80075f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074c2:	4b4f      	ldr	r3, [pc, #316]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a4e      	ldr	r2, [pc, #312]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 80074c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ce:	f7fa f949 	bl	8001764 <HAL_GetTick>
 80074d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074d4:	e008      	b.n	80074e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074d6:	f7fa f945 	bl	8001764 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d901      	bls.n	80074e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e086      	b.n	80075f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074e8:	4b45      	ldr	r3, [pc, #276]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1f0      	bne.n	80074d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074f4:	4b42      	ldr	r3, [pc, #264]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	051b      	lsls	r3, r3, #20
 8007502:	493f      	ldr	r1, [pc, #252]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 8007504:	4313      	orrs	r3, r2
 8007506:	628b      	str	r3, [r1, #40]	; 0x28
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	3b01      	subs	r3, #1
 800750e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	3b01      	subs	r3, #1
 8007518:	025b      	lsls	r3, r3, #9
 800751a:	b29b      	uxth	r3, r3
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	3b01      	subs	r3, #1
 8007524:	041b      	lsls	r3, r3, #16
 8007526:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800752a:	431a      	orrs	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	3b01      	subs	r3, #1
 8007532:	061b      	lsls	r3, r3, #24
 8007534:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007538:	4931      	ldr	r1, [pc, #196]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 800753a:	4313      	orrs	r3, r2
 800753c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800753e:	4b30      	ldr	r3, [pc, #192]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 8007540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007542:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	492d      	ldr	r1, [pc, #180]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 800754c:	4313      	orrs	r3, r2
 800754e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007550:	4b2b      	ldr	r3, [pc, #172]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	4928      	ldr	r1, [pc, #160]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 800755e:	4313      	orrs	r3, r2
 8007560:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007562:	4b27      	ldr	r3, [pc, #156]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	4a26      	ldr	r2, [pc, #152]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 8007568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800756c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800756e:	4b24      	ldr	r3, [pc, #144]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 8007570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007572:	4b24      	ldr	r3, [pc, #144]	; (8007604 <RCCEx_PLL3_Config+0x160>)
 8007574:	4013      	ands	r3, r2
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	69d2      	ldr	r2, [r2, #28]
 800757a:	00d2      	lsls	r2, r2, #3
 800757c:	4920      	ldr	r1, [pc, #128]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 800757e:	4313      	orrs	r3, r2
 8007580:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007582:	4b1f      	ldr	r3, [pc, #124]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 8007584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007586:	4a1e      	ldr	r2, [pc, #120]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 8007588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800758c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d106      	bne.n	80075a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007594:	4b1a      	ldr	r3, [pc, #104]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 8007596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007598:	4a19      	ldr	r2, [pc, #100]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 800759a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800759e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075a0:	e00f      	b.n	80075c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d106      	bne.n	80075b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075a8:	4b15      	ldr	r3, [pc, #84]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	4a14      	ldr	r2, [pc, #80]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 80075ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075b4:	e005      	b.n	80075c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075b6:	4b12      	ldr	r3, [pc, #72]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	4a11      	ldr	r2, [pc, #68]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 80075bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075c2:	4b0f      	ldr	r3, [pc, #60]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a0e      	ldr	r2, [pc, #56]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 80075c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ce:	f7fa f8c9 	bl	8001764 <HAL_GetTick>
 80075d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075d4:	e008      	b.n	80075e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075d6:	f7fa f8c5 	bl	8001764 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d901      	bls.n	80075e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e006      	b.n	80075f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075e8:	4b05      	ldr	r3, [pc, #20]	; (8007600 <RCCEx_PLL3_Config+0x15c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0f0      	beq.n	80075d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	58024400 	.word	0x58024400
 8007604:	ffff0007 	.word	0xffff0007

08007608 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d904      	bls.n	8007626 <HAL_SAI_InitProtocol+0x1e>
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	3b03      	subs	r3, #3
 8007620:	2b01      	cmp	r3, #1
 8007622:	d812      	bhi.n	800764a <HAL_SAI_InitProtocol+0x42>
 8007624:	e008      	b.n	8007638 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 fb8b 	bl	8007d48 <SAI_InitI2S>
 8007632:	4603      	mov	r3, r0
 8007634:	75fb      	strb	r3, [r7, #23]
      break;
 8007636:	e00b      	b.n	8007650 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	68b9      	ldr	r1, [r7, #8]
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 fc34 	bl	8007eac <SAI_InitPCM>
 8007644:	4603      	mov	r3, r0
 8007646:	75fb      	strb	r3, [r7, #23]
      break;
 8007648:	e002      	b.n	8007650 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	75fb      	strb	r3, [r7, #23]
      break;
 800764e:	bf00      	nop
  }

  if (status == HAL_OK)
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d104      	bne.n	8007660 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f000 f808 	bl	800766c <HAL_SAI_Init>
 800765c:	4603      	mov	r3, r0
 800765e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007660:	7dfb      	ldrb	r3, [r7, #23]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08a      	sub	sp, #40	; 0x28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e201      	b.n	8007a82 <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007684:	2b01      	cmp	r3, #1
 8007686:	d113      	bne.n	80076b0 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a99      	ldr	r2, [pc, #612]	; (80078f4 <HAL_SAI_Init+0x288>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d004      	beq.n	800769c <HAL_SAI_Init+0x30>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a98      	ldr	r2, [pc, #608]	; (80078f8 <HAL_SAI_Init+0x28c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d107      	bne.n	80076ac <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d103      	bne.n	80076ac <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e1e8      	b.n	8007a82 <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a8f      	ldr	r2, [pc, #572]	; (80078f4 <HAL_SAI_Init+0x288>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d004      	beq.n	80076c4 <HAL_SAI_Init+0x58>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a8f      	ldr	r2, [pc, #572]	; (80078fc <HAL_SAI_Init+0x290>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d102      	bne.n	80076ca <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 80076c4:	4b8e      	ldr	r3, [pc, #568]	; (8007900 <HAL_SAI_Init+0x294>)
 80076c6:	61bb      	str	r3, [r7, #24]
 80076c8:	e00e      	b.n	80076e8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a8a      	ldr	r2, [pc, #552]	; (80078f8 <HAL_SAI_Init+0x28c>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d004      	beq.n	80076de <HAL_SAI_Init+0x72>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a8a      	ldr	r2, [pc, #552]	; (8007904 <HAL_SAI_Init+0x298>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d102      	bne.n	80076e4 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 80076de:	4b8a      	ldr	r3, [pc, #552]	; (8007908 <HAL_SAI_Init+0x29c>)
 80076e0:	61bb      	str	r3, [r7, #24]
 80076e2:	e001      	b.n	80076e8 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e1cc      	b.n	8007a82 <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d106      	bne.n	8007702 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7f9 fce7 	bl	80010d0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fc8c 	bl	8008020 <SAI_Disable>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e1b7      	b.n	8007a82 <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2202      	movs	r2, #2
 8007716:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	2b02      	cmp	r3, #2
 8007720:	d00c      	beq.n	800773c <HAL_SAI_Init+0xd0>
 8007722:	2b02      	cmp	r3, #2
 8007724:	d80d      	bhi.n	8007742 <HAL_SAI_Init+0xd6>
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <HAL_SAI_Init+0xc4>
 800772a:	2b01      	cmp	r3, #1
 800772c:	d003      	beq.n	8007736 <HAL_SAI_Init+0xca>
 800772e:	e008      	b.n	8007742 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007730:	2300      	movs	r3, #0
 8007732:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007734:	e008      	b.n	8007748 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007736:	2310      	movs	r3, #16
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800773a:	e005      	b.n	8007748 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800773c:	2320      	movs	r3, #32
 800773e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007740:	e002      	b.n	8007748 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 8007742:	2300      	movs	r3, #0
 8007744:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007746:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	2b05      	cmp	r3, #5
 800774e:	d822      	bhi.n	8007796 <HAL_SAI_Init+0x12a>
 8007750:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <HAL_SAI_Init+0xec>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007771 	.word	0x08007771
 800775c:	08007777 	.word	0x08007777
 8007760:	0800777f 	.word	0x0800777f
 8007764:	08007797 	.word	0x08007797
 8007768:	08007797 	.word	0x08007797
 800776c:	08007787 	.word	0x08007787
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007770:	2300      	movs	r3, #0
 8007772:	61fb      	str	r3, [r7, #28]
      break;
 8007774:	e012      	b.n	800779c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800777a:	61fb      	str	r3, [r7, #28]
      break;
 800777c:	e00e      	b.n	800779c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800777e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007782:	61fb      	str	r3, [r7, #28]
      break;
 8007784:	e00a      	b.n	800779c <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007786:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800778a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	f043 0303 	orr.w	r3, r3, #3
 8007792:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007794:	e002      	b.n	800779c <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8007796:	2300      	movs	r3, #0
 8007798:	61fb      	str	r3, [r7, #28]
      break;
 800779a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a0:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 808a 	beq.w	80078c0 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a4f      	ldr	r2, [pc, #316]	; (80078f4 <HAL_SAI_Init+0x288>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d004      	beq.n	80077c4 <HAL_SAI_Init+0x158>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a4f      	ldr	r2, [pc, #316]	; (80078fc <HAL_SAI_Init+0x290>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d106      	bne.n	80077d2 <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80077c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80077c8:	f04f 0100 	mov.w	r1, #0
 80077cc:	f7fe fcd6 	bl	800617c <HAL_RCCEx_GetPeriphCLKFreq>
 80077d0:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a48      	ldr	r2, [pc, #288]	; (80078f8 <HAL_SAI_Init+0x28c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d106      	bne.n	80077ea <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80077dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80077e0:	f04f 0100 	mov.w	r1, #0
 80077e4:	f7fe fcca 	bl	800617c <HAL_RCCEx_GetPeriphCLKFreq>
 80077e8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a45      	ldr	r2, [pc, #276]	; (8007904 <HAL_SAI_Init+0x298>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d106      	bne.n	8007802 <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80077f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80077f8:	f04f 0100 	mov.w	r1, #0
 80077fc:	f7fe fcbe 	bl	800617c <HAL_RCCEx_GetPeriphCLKFreq>
 8007800:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800780a:	d120      	bne.n	800784e <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007810:	2b04      	cmp	r3, #4
 8007812:	d102      	bne.n	800781a <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8007814:	2340      	movs	r3, #64	; 0x40
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	e00a      	b.n	8007830 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781e:	2b08      	cmp	r3, #8
 8007820:	d103      	bne.n	800782a <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8007822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	e002      	b.n	8007830 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	4619      	mov	r1, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	fb02 f303 	mul.w	r3, r2, r3
 8007846:	fbb1 f3f3 	udiv	r3, r1, r3
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	e017      	b.n	800787e <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007852:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007856:	d101      	bne.n	800785c <HAL_SAI_Init+0x1f0>
 8007858:	2302      	movs	r3, #2
 800785a:	e000      	b.n	800785e <HAL_SAI_Init+0x1f2>
 800785c:	2301      	movs	r3, #1
 800785e:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	4619      	mov	r1, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	fb02 f303 	mul.w	r3, r2, r3
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	fbb1 f3f3 	udiv	r3, r1, r3
 800787c:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	4a22      	ldr	r2, [pc, #136]	; (800790c <HAL_SAI_Init+0x2a0>)
 8007882:	fba2 2303 	umull	r2, r3, r2, r3
 8007886:	08da      	lsrs	r2, r3, #3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800788c:	6939      	ldr	r1, [r7, #16]
 800788e:	4b1f      	ldr	r3, [pc, #124]	; (800790c <HAL_SAI_Init+0x2a0>)
 8007890:	fba3 2301 	umull	r2, r3, r3, r1
 8007894:	08da      	lsrs	r2, r3, #3
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	1aca      	subs	r2, r1, r3
 80078a0:	2a08      	cmp	r2, #8
 80078a2:	d904      	bls.n	80078ae <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b2:	2b04      	cmp	r3, #4
 80078b4:	d104      	bne.n	80078c0 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	085a      	lsrs	r2, r3, #1
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <HAL_SAI_Init+0x264>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d109      	bne.n	80078e4 <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d101      	bne.n	80078dc <HAL_SAI_Init+0x270>
 80078d8:	2300      	movs	r3, #0
 80078da:	e001      	b.n	80078e0 <HAL_SAI_Init+0x274>
 80078dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078e0:	623b      	str	r3, [r7, #32]
 80078e2:	e017      	b.n	8007914 <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d111      	bne.n	8007910 <HAL_SAI_Init+0x2a4>
 80078ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078f0:	e00f      	b.n	8007912 <HAL_SAI_Init+0x2a6>
 80078f2:	bf00      	nop
 80078f4:	40015804 	.word	0x40015804
 80078f8:	58005404 	.word	0x58005404
 80078fc:	40015824 	.word	0x40015824
 8007900:	40015800 	.word	0x40015800
 8007904:	58005424 	.word	0x58005424
 8007908:	58005400 	.word	0x58005400
 800790c:	cccccccd 	.word	0xcccccccd
 8007910:	2300      	movs	r3, #0
 8007912:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6819      	ldr	r1, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4b5b      	ldr	r3, [pc, #364]	; (8007a8c <HAL_SAI_Init+0x420>)
 8007920:	400b      	ands	r3, r1
 8007922:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6819      	ldr	r1, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007932:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007938:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800793e:	431a      	orrs	r2, r3
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800794c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007958:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	051b      	lsls	r3, r3, #20
 8007960:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007966:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6859      	ldr	r1, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	4b43      	ldr	r3, [pc, #268]	; (8007a90 <HAL_SAI_Init+0x424>)
 8007982:	400b      	ands	r3, r1
 8007984:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6859      	ldr	r1, [r3, #4]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	69da      	ldr	r2, [r3, #28]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799a:	431a      	orrs	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6899      	ldr	r1, [r3, #8]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	4b39      	ldr	r3, [pc, #228]	; (8007a94 <HAL_SAI_Init+0x428>)
 80079b0:	400b      	ands	r3, r1
 80079b2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6899      	ldr	r1, [r3, #8]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079be:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80079c4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80079ca:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80079d0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d6:	3b01      	subs	r3, #1
 80079d8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80079da:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68d9      	ldr	r1, [r3, #12]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	f24f 0320 	movw	r3, #61472	; 0xf020
 80079f2:	400b      	ands	r3, r1
 80079f4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68d9      	ldr	r1, [r3, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a04:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a0a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007a0c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a12:	3b01      	subs	r3, #1
 8007a14:	021b      	lsls	r3, r3, #8
 8007a16:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a1c      	ldr	r2, [pc, #112]	; (8007a98 <HAL_SAI_Init+0x42c>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d004      	beq.n	8007a34 <HAL_SAI_Init+0x3c8>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a1b      	ldr	r2, [pc, #108]	; (8007a9c <HAL_SAI_Init+0x430>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d119      	bne.n	8007a68 <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a38:	f023 0201 	bic.w	r2, r3, #1
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d10e      	bne.n	8007a68 <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a52:	3b01      	subs	r3, #1
 8007a54:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007a56:	431a      	orrs	r2, r3
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a60:	f043 0201 	orr.w	r2, r3, #1
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3728      	adds	r7, #40	; 0x28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	f005c010 	.word	0xf005c010
 8007a90:	ffff1ff0 	.word	0xffff1ff0
 8007a94:	fff88000 	.word	0xfff88000
 8007a98:	40015804 	.word	0x40015804
 8007a9c:	58005404 	.word	0x58005404

08007aa0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007aae:	f7f9 fe59 	bl	8001764 <HAL_GetTick>
 8007ab2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <HAL_SAI_Transmit_DMA+0x20>
 8007aba:	88fb      	ldrh	r3, [r7, #6]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e098      	b.n	8007bf6 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	f040 8091 	bne.w	8007bf4 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_SAI_Transmit_DMA+0x40>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e08a      	b.n	8007bf6 <HAL_SAI_Transmit_DMA+0x156>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	88fa      	ldrh	r2, [r7, #6]
 8007af2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	88fa      	ldrh	r2, [r7, #6]
 8007afa:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2212      	movs	r2, #18
 8007b0a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b14:	4a3a      	ldr	r2, [pc, #232]	; (8007c00 <HAL_SAI_Transmit_DMA+0x160>)
 8007b16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b1e:	4a39      	ldr	r2, [pc, #228]	; (8007c04 <HAL_SAI_Transmit_DMA+0x164>)
 8007b20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b28:	4a37      	ldr	r2, [pc, #220]	; (8007c08 <HAL_SAI_Transmit_DMA+0x168>)
 8007b2a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b32:	2200      	movs	r2, #0
 8007b34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b40:	4619      	mov	r1, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	331c      	adds	r3, #28
 8007b48:	461a      	mov	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007b50:	f7fa faa0 	bl	8002094 <HAL_DMA_Start_IT>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d005      	beq.n	8007b66 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e047      	b.n	8007bf6 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007b66:	2100      	movs	r1, #0
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 fa21 	bl	8007fb0 <SAI_InterruptFlag>
 8007b6e:	4601      	mov	r1, r0
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691a      	ldr	r2, [r3, #16]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007b8c:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007b8e:	e015      	b.n	8007bbc <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007b90:	f7f9 fde8 	bl	8001764 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b9e:	d90d      	bls.n	8007bbc <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ba6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e01c      	b.n	8007bf6 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0e2      	beq.n	8007b90 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d107      	bne.n	8007be8 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007be6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	e000      	b.n	8007bf6 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8007bf4:	2302      	movs	r3, #2
  }
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	080080f5 	.word	0x080080f5
 8007c04:	08008095 	.word	0x08008095
 8007c08:	0800818d 	.word	0x0800818d

08007c0c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	4613      	mov	r3, r2
 8007c18:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <HAL_SAI_Receive_DMA+0x1a>
 8007c20:	88fb      	ldrh	r3, [r7, #6]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e079      	b.n	8007d1e <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d172      	bne.n	8007d1c <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d101      	bne.n	8007c44 <HAL_SAI_Receive_DMA+0x38>
 8007c40:	2302      	movs	r3, #2
 8007c42:	e06c      	b.n	8007d1e <HAL_SAI_Receive_DMA+0x112>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	88fa      	ldrh	r2, [r7, #6]
 8007c56:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	88fa      	ldrh	r2, [r7, #6]
 8007c5e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2222      	movs	r2, #34	; 0x22
 8007c6e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c78:	4a2b      	ldr	r2, [pc, #172]	; (8007d28 <HAL_SAI_Receive_DMA+0x11c>)
 8007c7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c82:	4a2a      	ldr	r2, [pc, #168]	; (8007d2c <HAL_SAI_Receive_DMA+0x120>)
 8007c84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c8c:	4a28      	ldr	r2, [pc, #160]	; (8007d30 <HAL_SAI_Receive_DMA+0x124>)
 8007c8e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c96:	2200      	movs	r2, #0
 8007c98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	331c      	adds	r3, #28
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cac:	461a      	mov	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007cb4:	f7fa f9ee 	bl	8002094 <HAL_DMA_Start_IT>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e029      	b.n	8007d1e <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007cca:	2100      	movs	r1, #0
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 f96f 	bl	8007fb0 <SAI_InterruptFlag>
 8007cd2:	4601      	mov	r1, r0
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	691a      	ldr	r2, [r3, #16]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007cf0:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d107      	bne.n	8007d10 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d0e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	e000      	b.n	8007d1e <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8007d1c:	2302      	movs	r3, #2
  }
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	08008171 	.word	0x08008171
 8007d2c:	08008111 	.word	0x08008111
 8007d30:	0800818d 	.word	0x0800818d

08007d34 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <SAI_InitI2S+0x2e>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d103      	bne.n	8007d7e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	651a      	str	r2, [r3, #80]	; 0x50
 8007d7c:	e002      	b.n	8007d84 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2201      	movs	r2, #1
 8007d82:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007d8a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d92:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e077      	b.n	8007e9e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d107      	bne.n	8007dc4 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007dc0:	665a      	str	r2, [r3, #100]	; 0x64
 8007dc2:	e006      	b.n	8007dd2 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007dca:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d84f      	bhi.n	8007e78 <SAI_InitI2S+0x130>
 8007dd8:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <SAI_InitI2S+0x98>)
 8007dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dde:	bf00      	nop
 8007de0:	08007df1 	.word	0x08007df1
 8007de4:	08007e13 	.word	0x08007e13
 8007de8:	08007e35 	.word	0x08007e35
 8007dec:	08007e57 	.word	0x08007e57
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2280      	movs	r2, #128	; 0x80
 8007df4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	085b      	lsrs	r3, r3, #1
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	085b      	lsrs	r3, r3, #1
 8007e04:	011a      	lsls	r2, r3, #4
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2240      	movs	r2, #64	; 0x40
 8007e0e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007e10:	e035      	b.n	8007e7e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2280      	movs	r2, #128	; 0x80
 8007e16:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	085b      	lsrs	r3, r3, #1
 8007e1c:	019a      	lsls	r2, r3, #6
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	085b      	lsrs	r3, r3, #1
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2280      	movs	r2, #128	; 0x80
 8007e30:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007e32:	e024      	b.n	8007e7e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	22c0      	movs	r2, #192	; 0xc0
 8007e38:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	085b      	lsrs	r3, r3, #1
 8007e3e:	019a      	lsls	r2, r3, #6
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	085b      	lsrs	r3, r3, #1
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2280      	movs	r2, #128	; 0x80
 8007e52:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007e54:	e013      	b.n	8007e7e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	22e0      	movs	r2, #224	; 0xe0
 8007e5a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	085b      	lsrs	r3, r3, #1
 8007e60:	019a      	lsls	r2, r3, #6
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	085b      	lsrs	r3, r3, #1
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2280      	movs	r2, #128	; 0x80
 8007e74:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007e76:	e002      	b.n	8007e7e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e7c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d10b      	bne.n	8007e9c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d102      	bne.n	8007e90 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2210      	movs	r2, #16
 8007e8e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d102      	bne.n	8007e9c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2208      	movs	r2, #8
 8007e9a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	371c      	adds	r7, #28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop

08007eac <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <SAI_InitPCM+0x2e>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d103      	bne.n	8007ee2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	651a      	str	r2, [r3, #80]	; 0x50
 8007ee0:	e002      	b.n	8007ee8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007ef4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007efc:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f10:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2b04      	cmp	r3, #4
 8007f16:	d103      	bne.n	8007f20 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	659a      	str	r2, [r3, #88]	; 0x58
 8007f1e:	e002      	b.n	8007f26 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	220d      	movs	r2, #13
 8007f24:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d837      	bhi.n	8007f9c <SAI_InitPCM+0xf0>
 8007f2c:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <SAI_InitPCM+0x88>)
 8007f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f32:	bf00      	nop
 8007f34:	08007f45 	.word	0x08007f45
 8007f38:	08007f5b 	.word	0x08007f5b
 8007f3c:	08007f71 	.word	0x08007f71
 8007f40:	08007f87 	.word	0x08007f87
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2280      	movs	r2, #128	; 0x80
 8007f48:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	011a      	lsls	r2, r3, #4
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2240      	movs	r2, #64	; 0x40
 8007f56:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f58:	e023      	b.n	8007fa2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2280      	movs	r2, #128	; 0x80
 8007f5e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2280      	movs	r2, #128	; 0x80
 8007f6c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f6e:	e018      	b.n	8007fa2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	22c0      	movs	r2, #192	; 0xc0
 8007f74:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2280      	movs	r2, #128	; 0x80
 8007f82:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f84:	e00d      	b.n	8007fa2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	22e0      	movs	r2, #224	; 0xe0
 8007f8a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2280      	movs	r2, #128	; 0x80
 8007f98:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8007f9a:	e002      	b.n	8007fa2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa0:	bf00      	nop
  }

  return status;
 8007fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	371c      	adds	r7, #28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d103      	bne.n	8007fce <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f043 0308 	orr.w	r3, r3, #8
 8007fcc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd2:	2b08      	cmp	r3, #8
 8007fd4:	d10b      	bne.n	8007fee <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d003      	beq.n	8007fe6 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d103      	bne.n	8007fee <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f043 0310 	orr.w	r3, r3, #16
 8007fec:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d003      	beq.n	8007ffe <SAI_InterruptFlag+0x4e>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d104      	bne.n	8008008 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	e003      	b.n	8008010 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f043 0304 	orr.w	r3, r3, #4
 800800e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008010:	68fb      	ldr	r3, [r7, #12]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
	...

08008020 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008028:	4b18      	ldr	r3, [pc, #96]	; (800808c <SAI_Disable+0x6c>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a18      	ldr	r2, [pc, #96]	; (8008090 <SAI_Disable+0x70>)
 800802e:	fba2 2303 	umull	r2, r3, r2, r3
 8008032:	0b1b      	lsrs	r3, r3, #12
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800804a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10a      	bne.n	8008068 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008058:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	72fb      	strb	r3, [r7, #11]
      break;
 8008066:	e009      	b.n	800807c <SAI_Disable+0x5c>
    }
    count--;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3b01      	subs	r3, #1
 800806c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e7      	bne.n	800804c <SAI_Disable+0x2c>

  return status;
 800807c:	7afb      	ldrb	r3, [r7, #11]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	24000000 	.word	0x24000000
 8008090:	95cbec1b 	.word	0x95cbec1b

08008094 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080aa:	d01c      	beq.n	80080e6 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80080c2:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80080c4:	2100      	movs	r1, #0
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7ff ff72 	bl	8007fb0 <SAI_InterruptFlag>
 80080cc:	4603      	mov	r3, r0
 80080ce:	43d9      	mvns	r1, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	691a      	ldr	r2, [r3, #16]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	400a      	ands	r2, r1
 80080dc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f7f8 fc10 	bl	800090c <HAL_SAI_TxCpltCallback>
#endif
}
 80080ec:	bf00      	nop
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008100:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f7f8 fc64 	bl	80009d0 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8008108:	bf00      	nop
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008126:	d01c      	beq.n	8008162 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008136:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008140:	2100      	movs	r1, #0
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f7ff ff34 	bl	8007fb0 <SAI_InterruptFlag>
 8008148:	4603      	mov	r3, r0
 800814a:	43d9      	mvns	r1, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	691a      	ldr	r2, [r3, #16]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	400a      	ands	r2, r1
 8008158:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7f8 fc96 	bl	8000a94 <HAL_SAI_RxCpltCallback>
#endif
}
 8008168:	bf00      	nop
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f7f8 fd3e 	bl	8000c00 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008184:	bf00      	nop
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7fb f90e 	bl	80033bc <HAL_DMA_GetError>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d01d      	beq.n	80081e2 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80081c4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f7ff ff2a 	bl	8008020 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f7ff fda9 	bl	8007d34 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80081e2:	bf00      	nop
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e02b      	b.n	8008258 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	d106      	bne.n	800821a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7f8 fadf 	bl	80007d8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2202      	movs	r2, #2
 800821e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	3304      	adds	r3, #4
 800822a:	4619      	mov	r1, r3
 800822c:	4610      	mov	r0, r2
 800822e:	f000 fdbf 	bl	8008db0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6818      	ldr	r0, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	461a      	mov	r2, r3
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	f000 fe13 	bl	8008e68 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008242:	4b07      	ldr	r3, [pc, #28]	; (8008260 <HAL_SDRAM_Init+0x74>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a06      	ldr	r2, [pc, #24]	; (8008260 <HAL_SDRAM_Init+0x74>)
 8008248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800824c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	52004000 	.word	0x52004000

08008264 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008276:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008278:	7dfb      	ldrb	r3, [r7, #23]
 800827a:	2b02      	cmp	r3, #2
 800827c:	d101      	bne.n	8008282 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800827e:	2302      	movs	r3, #2
 8008280:	e021      	b.n	80082c6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008282:	7dfb      	ldrb	r3, [r7, #23]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d002      	beq.n	800828e <HAL_SDRAM_SendCommand+0x2a>
 8008288:	7dfb      	ldrb	r3, [r7, #23]
 800828a:	2b05      	cmp	r3, #5
 800828c:	d118      	bne.n	80082c0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2202      	movs	r2, #2
 8008292:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	68b9      	ldr	r1, [r7, #8]
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fe4c 	bl	8008f3c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d104      	bne.n	80082b6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2205      	movs	r2, #5
 80082b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80082b4:	e006      	b.n	80082c4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80082be:	e001      	b.n	80082c4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e000      	b.n	80082c6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d101      	bne.n	80082e8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80082e4:	2302      	movs	r3, #2
 80082e6:	e016      	b.n	8008316 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d10f      	bne.n	8008314 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	4618      	mov	r0, r3
 8008304:	f000 fe3e 	bl	8008f84 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	e000      	b.n	8008316 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e10f      	b.n	8008552 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a87      	ldr	r2, [pc, #540]	; (800855c <HAL_SPI_Init+0x23c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d00f      	beq.n	8008362 <HAL_SPI_Init+0x42>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a86      	ldr	r2, [pc, #536]	; (8008560 <HAL_SPI_Init+0x240>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d00a      	beq.n	8008362 <HAL_SPI_Init+0x42>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a84      	ldr	r2, [pc, #528]	; (8008564 <HAL_SPI_Init+0x244>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d005      	beq.n	8008362 <HAL_SPI_Init+0x42>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	2b0f      	cmp	r3, #15
 800835c:	d901      	bls.n	8008362 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e0f7      	b.n	8008552 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fd08 	bl	8008d78 <SPI_GetPacketSize>
 8008368:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a7b      	ldr	r2, [pc, #492]	; (800855c <HAL_SPI_Init+0x23c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d00c      	beq.n	800838e <HAL_SPI_Init+0x6e>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a79      	ldr	r2, [pc, #484]	; (8008560 <HAL_SPI_Init+0x240>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d007      	beq.n	800838e <HAL_SPI_Init+0x6e>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a78      	ldr	r2, [pc, #480]	; (8008564 <HAL_SPI_Init+0x244>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d002      	beq.n	800838e <HAL_SPI_Init+0x6e>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b08      	cmp	r3, #8
 800838c:	d811      	bhi.n	80083b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008392:	4a72      	ldr	r2, [pc, #456]	; (800855c <HAL_SPI_Init+0x23c>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d009      	beq.n	80083ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a70      	ldr	r2, [pc, #448]	; (8008560 <HAL_SPI_Init+0x240>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d004      	beq.n	80083ac <HAL_SPI_Init+0x8c>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a6f      	ldr	r2, [pc, #444]	; (8008564 <HAL_SPI_Init+0x244>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d104      	bne.n	80083b6 <HAL_SPI_Init+0x96>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b10      	cmp	r3, #16
 80083b0:	d901      	bls.n	80083b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e0cd      	b.n	8008552 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d106      	bne.n	80083d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7f8 ffbc 	bl	8001348 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0201 	bic.w	r2, r2, #1
 80083e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80083f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083fc:	d119      	bne.n	8008432 <HAL_SPI_Init+0x112>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008406:	d103      	bne.n	8008410 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800840c:	2b00      	cmp	r3, #0
 800840e:	d008      	beq.n	8008422 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10c      	bne.n	8008432 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800841c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008420:	d107      	bne.n	8008432 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008430:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00f      	beq.n	800845e <HAL_SPI_Init+0x13e>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	2b06      	cmp	r3, #6
 8008444:	d90b      	bls.n	800845e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	e007      	b.n	800846e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800846c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	69da      	ldr	r2, [r3, #28]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008476:	431a      	orrs	r2, r3
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	431a      	orrs	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008480:	ea42 0103 	orr.w	r1, r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	430a      	orrs	r2, r1
 800848e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	431a      	orrs	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849e:	431a      	orrs	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	431a      	orrs	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	431a      	orrs	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	431a      	orrs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	431a      	orrs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c2:	431a      	orrs	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	431a      	orrs	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ce:	ea42 0103 	orr.w	r1, r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	430a      	orrs	r2, r1
 80084dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d113      	bne.n	800850e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800850c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 0201 	bic.w	r2, r2, #1
 800851c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00a      	beq.n	8008540 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	430a      	orrs	r2, r1
 800853e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	40013000 	.word	0x40013000
 8008560:	40003800 	.word	0x40003800
 8008564:	40003c00 	.word	0x40003c00

08008568 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b08e      	sub	sp, #56	; 0x38
 800856c:	af02      	add	r7, sp, #8
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3320      	adds	r3, #32
 800857c:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3330      	adds	r3, #48	; 0x30
 8008584:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858a:	095b      	lsrs	r3, r3, #5
 800858c:	b29b      	uxth	r3, r3
 800858e:	3301      	adds	r3, #1
 8008590:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008592:	f7f9 f8e7 	bl	8001764 <HAL_GetTick>
 8008596:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8008598:	887b      	ldrh	r3, [r7, #2]
 800859a:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 800859c:	887b      	ldrh	r3, [r7, #2]
 800859e:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d001      	beq.n	80085b0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80085ac:	2302      	movs	r3, #2
 80085ae:	e310      	b.n	8008bd2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d005      	beq.n	80085c2 <HAL_SPI_TransmitReceive+0x5a>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d002      	beq.n	80085c2 <HAL_SPI_TransmitReceive+0x5a>
 80085bc:	887b      	ldrh	r3, [r7, #2]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e305      	b.n	8008bd2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d101      	bne.n	80085d4 <HAL_SPI_TransmitReceive+0x6c>
 80085d0:	2302      	movs	r3, #2
 80085d2:	e2fe      	b.n	8008bd2 <HAL_SPI_TransmitReceive+0x66a>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2205      	movs	r2, #5
 80085e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	887a      	ldrh	r2, [r7, #2]
 80085f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	887a      	ldrh	r2, [r7, #2]
 80085fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	887a      	ldrh	r2, [r7, #2]
 800860c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	887a      	ldrh	r2, [r7, #2]
 8008614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68da      	ldr	r2, [r3, #12]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8008632:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a70      	ldr	r2, [pc, #448]	; (80087fc <HAL_SPI_TransmitReceive+0x294>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d009      	beq.n	8008652 <HAL_SPI_TransmitReceive+0xea>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a6f      	ldr	r2, [pc, #444]	; (8008800 <HAL_SPI_TransmitReceive+0x298>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d004      	beq.n	8008652 <HAL_SPI_TransmitReceive+0xea>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a6d      	ldr	r2, [pc, #436]	; (8008804 <HAL_SPI_TransmitReceive+0x29c>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d102      	bne.n	8008658 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8008652:	2310      	movs	r3, #16
 8008654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008656:	e001      	b.n	800865c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8008658:	2308      	movs	r3, #8
 800865a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	4b69      	ldr	r3, [pc, #420]	; (8008808 <HAL_SPI_TransmitReceive+0x2a0>)
 8008664:	4013      	ands	r3, r2
 8008666:	8879      	ldrh	r1, [r7, #2]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	6812      	ldr	r2, [r2, #0]
 800866c:	430b      	orrs	r3, r1
 800866e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f042 0201 	orr.w	r2, r2, #1
 800867e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008688:	d107      	bne.n	800869a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008698:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	2b0f      	cmp	r3, #15
 80086a0:	f240 80a2 	bls.w	80087e8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80086a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a6:	089b      	lsrs	r3, r3, #2
 80086a8:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80086aa:	e094      	b.n	80087d6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d120      	bne.n	80086fc <HAL_SPI_TransmitReceive+0x194>
 80086ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d01d      	beq.n	80086fc <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80086c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80086c2:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80086c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d217      	bcs.n	80086fc <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6812      	ldr	r2, [r2, #0]
 80086d6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086dc:	1d1a      	adds	r2, r3, #4
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086fa:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8008704:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008706:	2b00      	cmp	r3, #0
 8008708:	d065      	beq.n	80087d6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b01      	cmp	r3, #1
 8008716:	d118      	bne.n	800874a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008720:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008722:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008728:	1d1a      	adds	r2, r3, #4
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008734:	b29b      	uxth	r3, r3
 8008736:	3b01      	subs	r3, #1
 8008738:	b29a      	uxth	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008746:	853b      	strh	r3, [r7, #40]	; 0x28
 8008748:	e045      	b.n	80087d6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800874a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800874c:	8bfb      	ldrh	r3, [r7, #30]
 800874e:	429a      	cmp	r2, r3
 8008750:	d21d      	bcs.n	800878e <HAL_SPI_TransmitReceive+0x226>
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d018      	beq.n	800878e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008764:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008766:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800876c:	1d1a      	adds	r2, r3, #4
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008778:	b29b      	uxth	r3, r3
 800877a:	3b01      	subs	r3, #1
 800877c:	b29a      	uxth	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800878a:	853b      	strh	r3, [r7, #40]	; 0x28
 800878c:	e023      	b.n	80087d6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800878e:	f7f8 ffe9 	bl	8001764 <HAL_GetTick>
 8008792:	4602      	mov	r2, r0
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800879a:	429a      	cmp	r2, r3
 800879c:	d803      	bhi.n	80087a6 <HAL_SPI_TransmitReceive+0x23e>
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a4:	d102      	bne.n	80087ac <HAL_SPI_TransmitReceive+0x244>
 80087a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d114      	bne.n	80087d6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 fa15 	bl	8008bdc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e1fd      	b.n	8008bd2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80087d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f47f af67 	bne.w	80086ac <HAL_SPI_TransmitReceive+0x144>
 80087de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f47f af63 	bne.w	80086ac <HAL_SPI_TransmitReceive+0x144>
 80087e6:	e1ce      	b.n	8008b86 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	2b07      	cmp	r3, #7
 80087ee:	f240 81c2 	bls.w	8008b76 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80087f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f4:	085b      	lsrs	r3, r3, #1
 80087f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80087f8:	e0c9      	b.n	800898e <HAL_SPI_TransmitReceive+0x426>
 80087fa:	bf00      	nop
 80087fc:	40013000 	.word	0x40013000
 8008800:	40003800 	.word	0x40003800
 8008804:	40003c00 	.word	0x40003c00
 8008808:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	f003 0302 	and.w	r3, r3, #2
 8008816:	2b02      	cmp	r3, #2
 8008818:	d11f      	bne.n	800885a <HAL_SPI_TransmitReceive+0x2f2>
 800881a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800881c:	2b00      	cmp	r3, #0
 800881e:	d01c      	beq.n	800885a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008820:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008822:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008826:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008828:	429a      	cmp	r2, r3
 800882a:	d216      	bcs.n	800885a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008830:	881a      	ldrh	r2, [r3, #0]
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883a:	1c9a      	adds	r2, r3, #2
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008846:	b29b      	uxth	r3, r3
 8008848:	3b01      	subs	r3, #1
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008858:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8008862:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 8092 	beq.w	800898e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	2b01      	cmp	r3, #1
 8008876:	d118      	bne.n	80088aa <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800887c:	6a3a      	ldr	r2, [r7, #32]
 800887e:	8812      	ldrh	r2, [r2, #0]
 8008880:	b292      	uxth	r2, r2
 8008882:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008888:	1c9a      	adds	r2, r3, #2
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008894:	b29b      	uxth	r3, r3
 8008896:	3b01      	subs	r3, #1
 8008898:	b29a      	uxth	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80088a8:	e071      	b.n	800898e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80088aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80088ac:	8bfb      	ldrh	r3, [r7, #30]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d228      	bcs.n	8008904 <HAL_SPI_TransmitReceive+0x39c>
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d023      	beq.n	8008904 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088c0:	6a3a      	ldr	r2, [r7, #32]
 80088c2:	8812      	ldrh	r2, [r2, #0]
 80088c4:	b292      	uxth	r2, r2
 80088c6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088cc:	1c9a      	adds	r2, r3, #2
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088d6:	6a3a      	ldr	r2, [r7, #32]
 80088d8:	8812      	ldrh	r2, [r2, #0]
 80088da:	b292      	uxth	r2, r2
 80088dc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e2:	1c9a      	adds	r2, r3, #2
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	3b02      	subs	r3, #2
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008900:	853b      	strh	r3, [r7, #40]	; 0x28
 8008902:	e044      	b.n	800898e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008904:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008906:	2b01      	cmp	r3, #1
 8008908:	d11d      	bne.n	8008946 <HAL_SPI_TransmitReceive+0x3de>
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d018      	beq.n	8008946 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008918:	6a3a      	ldr	r2, [r7, #32]
 800891a:	8812      	ldrh	r2, [r2, #0]
 800891c:	b292      	uxth	r2, r2
 800891e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008924:	1c9a      	adds	r2, r3, #2
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008930:	b29b      	uxth	r3, r3
 8008932:	3b01      	subs	r3, #1
 8008934:	b29a      	uxth	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008942:	853b      	strh	r3, [r7, #40]	; 0x28
 8008944:	e023      	b.n	800898e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008946:	f7f8 ff0d 	bl	8001764 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008952:	429a      	cmp	r2, r3
 8008954:	d803      	bhi.n	800895e <HAL_SPI_TransmitReceive+0x3f6>
 8008956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895c:	d102      	bne.n	8008964 <HAL_SPI_TransmitReceive+0x3fc>
 800895e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008960:	2b00      	cmp	r3, #0
 8008962:	d114      	bne.n	800898e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 f939 	bl	8008bdc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008970:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e121      	b.n	8008bd2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800898e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008990:	2b00      	cmp	r3, #0
 8008992:	f47f af3b 	bne.w	800880c <HAL_SPI_TransmitReceive+0x2a4>
 8008996:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008998:	2b00      	cmp	r3, #0
 800899a:	f47f af37 	bne.w	800880c <HAL_SPI_TransmitReceive+0x2a4>
 800899e:	e0f2      	b.n	8008b86 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d121      	bne.n	80089f2 <HAL_SPI_TransmitReceive+0x48a>
 80089ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d01e      	beq.n	80089f2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80089b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80089b6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80089b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ba:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80089bc:	429a      	cmp	r2, r3
 80089be:	d218      	bcs.n	80089f2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	3320      	adds	r3, #32
 80089ca:	7812      	ldrb	r2, [r2, #0]
 80089cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089d2:	1c5a      	adds	r2, r3, #1
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089de:	b29b      	uxth	r3, r3
 80089e0:	3b01      	subs	r3, #1
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089f0:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80089fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f000 80ba 	beq.w	8008b76 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d11b      	bne.n	8008a48 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a1c:	7812      	ldrb	r2, [r2, #0]
 8008a1e:	b2d2      	uxtb	r2, r2
 8008a20:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a26:	1c5a      	adds	r2, r3, #1
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	3b01      	subs	r3, #1
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a44:	853b      	strh	r3, [r7, #40]	; 0x28
 8008a46:	e096      	b.n	8008b76 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008a48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008a4a:	8bfb      	ldrh	r3, [r7, #30]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d24a      	bcs.n	8008ae6 <HAL_SPI_TransmitReceive+0x57e>
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d045      	beq.n	8008ae6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a66:	7812      	ldrb	r2, [r2, #0]
 8008a68:	b2d2      	uxtb	r2, r2
 8008a6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a70:	1c5a      	adds	r2, r3, #1
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a82:	7812      	ldrb	r2, [r2, #0]
 8008a84:	b2d2      	uxtb	r2, r2
 8008a86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a8c:	1c5a      	adds	r2, r3, #1
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a9e:	7812      	ldrb	r2, [r2, #0]
 8008aa0:	b2d2      	uxtb	r2, r2
 8008aa2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aa8:	1c5a      	adds	r2, r3, #1
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aba:	7812      	ldrb	r2, [r2, #0]
 8008abc:	b2d2      	uxtb	r2, r2
 8008abe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ac4:	1c5a      	adds	r2, r3, #1
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	3b04      	subs	r3, #4
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ae2:	853b      	strh	r3, [r7, #40]	; 0x28
 8008ae4:	e047      	b.n	8008b76 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008ae6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d820      	bhi.n	8008b2e <HAL_SPI_TransmitReceive+0x5c6>
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d01b      	beq.n	8008b2e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b02:	7812      	ldrb	r2, [r2, #0]
 8008b04:	b2d2      	uxtb	r2, r2
 8008b06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b2a:	853b      	strh	r3, [r7, #40]	; 0x28
 8008b2c:	e023      	b.n	8008b76 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b2e:	f7f8 fe19 	bl	8001764 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d803      	bhi.n	8008b46 <HAL_SPI_TransmitReceive+0x5de>
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b44:	d102      	bne.n	8008b4c <HAL_SPI_TransmitReceive+0x5e4>
 8008b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d114      	bne.n	8008b76 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 f845 	bl	8008bdc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e02d      	b.n	8008bd2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008b76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f47f af11 	bne.w	80089a0 <HAL_SPI_TransmitReceive+0x438>
 8008b7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f47f af0d 	bne.w	80089a0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2108      	movs	r1, #8
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f000 f8c3 	bl	8008d1c <SPI_WaitOnFlagUntilTimeout>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d007      	beq.n	8008bac <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ba2:	f043 0220 	orr.w	r2, r3, #32
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f815 	bl	8008bdc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e000      	b.n	8008bd2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
  }
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3730      	adds	r7, #48	; 0x30
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop

08008bdc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	699a      	ldr	r2, [r3, #24]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f042 0208 	orr.w	r2, r2, #8
 8008bfa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	699a      	ldr	r2, [r3, #24]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f042 0210 	orr.w	r2, r2, #16
 8008c0a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f022 0201 	bic.w	r2, r2, #1
 8008c1a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6919      	ldr	r1, [r3, #16]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	4b3c      	ldr	r3, [pc, #240]	; (8008d18 <SPI_CloseTransfer+0x13c>)
 8008c28:	400b      	ands	r3, r1
 8008c2a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008c3a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b04      	cmp	r3, #4
 8008c46:	d014      	beq.n	8008c72 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f003 0320 	and.w	r3, r3, #32
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00f      	beq.n	8008c72 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	699a      	ldr	r2, [r3, #24]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f042 0220 	orr.w	r2, r2, #32
 8008c70:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	d014      	beq.n	8008ca8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00f      	beq.n	8008ca8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c8e:	f043 0204 	orr.w	r2, r3, #4
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	699a      	ldr	r2, [r3, #24]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ca6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00f      	beq.n	8008cd2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cb8:	f043 0201 	orr.w	r2, r3, #1
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	699a      	ldr	r2, [r3, #24]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cd0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00f      	beq.n	8008cfc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ce2:	f043 0208 	orr.w	r2, r3, #8
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	699a      	ldr	r2, [r3, #24]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cfa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008d0c:	bf00      	nop
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	fffffc90 	.word	0xfffffc90

08008d1c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	603b      	str	r3, [r7, #0]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008d2c:	e010      	b.n	8008d50 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d2e:	f7f8 fd19 	bl	8001764 <HAL_GetTick>
 8008d32:	4602      	mov	r2, r0
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d803      	bhi.n	8008d46 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d44:	d102      	bne.n	8008d4c <SPI_WaitOnFlagUntilTimeout+0x30>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e00f      	b.n	8008d70 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	695a      	ldr	r2, [r3, #20]
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	4013      	ands	r3, r2
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	bf0c      	ite	eq
 8008d60:	2301      	moveq	r3, #1
 8008d62:	2300      	movne	r3, #0
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	461a      	mov	r2, r3
 8008d68:	79fb      	ldrb	r3, [r7, #7]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d0df      	beq.n	8008d2e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d84:	095b      	lsrs	r3, r3, #5
 8008d86:	3301      	adds	r3, #1
 8008d88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	3307      	adds	r3, #7
 8008d96:	08db      	lsrs	r3, r3, #3
 8008d98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
	...

08008db0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d121      	bne.n	8008e06 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	4b27      	ldr	r3, [pc, #156]	; (8008e64 <FMC_SDRAM_Init+0xb4>)
 8008dc8:	4013      	ands	r3, r2
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	6851      	ldr	r1, [r2, #4]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	6892      	ldr	r2, [r2, #8]
 8008dd2:	4311      	orrs	r1, r2
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	68d2      	ldr	r2, [r2, #12]
 8008dd8:	4311      	orrs	r1, r2
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	6912      	ldr	r2, [r2, #16]
 8008dde:	4311      	orrs	r1, r2
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	6952      	ldr	r2, [r2, #20]
 8008de4:	4311      	orrs	r1, r2
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	6992      	ldr	r2, [r2, #24]
 8008dea:	4311      	orrs	r1, r2
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	69d2      	ldr	r2, [r2, #28]
 8008df0:	4311      	orrs	r1, r2
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	6a12      	ldr	r2, [r2, #32]
 8008df6:	4311      	orrs	r1, r2
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	e026      	b.n	8008e54 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	69d9      	ldr	r1, [r3, #28]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	4319      	orrs	r1, r3
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	430b      	orrs	r3, r1
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	4b0e      	ldr	r3, [pc, #56]	; (8008e64 <FMC_SDRAM_Init+0xb4>)
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	6851      	ldr	r1, [r2, #4]
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	6892      	ldr	r2, [r2, #8]
 8008e34:	4311      	orrs	r1, r2
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	68d2      	ldr	r2, [r2, #12]
 8008e3a:	4311      	orrs	r1, r2
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	6912      	ldr	r2, [r2, #16]
 8008e40:	4311      	orrs	r1, r2
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	6952      	ldr	r2, [r2, #20]
 8008e46:	4311      	orrs	r1, r2
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	6992      	ldr	r2, [r2, #24]
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	ffff8000 	.word	0xffff8000

08008e68 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d128      	bne.n	8008ecc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	1e59      	subs	r1, r3, #1
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	011b      	lsls	r3, r3, #4
 8008e90:	4319      	orrs	r1, r3
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	021b      	lsls	r3, r3, #8
 8008e9a:	4319      	orrs	r1, r3
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	031b      	lsls	r3, r3, #12
 8008ea4:	4319      	orrs	r1, r3
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	041b      	lsls	r3, r3, #16
 8008eae:	4319      	orrs	r1, r3
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	051b      	lsls	r3, r3, #20
 8008eb8:	4319      	orrs	r1, r3
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	061b      	lsls	r3, r3, #24
 8008ec2:	430b      	orrs	r3, r1
 8008ec4:	431a      	orrs	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	609a      	str	r2, [r3, #8]
 8008eca:	e02d      	b.n	8008f28 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	4b19      	ldr	r3, [pc, #100]	; (8008f38 <FMC_SDRAM_Timing_Init+0xd0>)
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	68d2      	ldr	r2, [r2, #12]
 8008ed8:	3a01      	subs	r2, #1
 8008eda:	0311      	lsls	r1, r2, #12
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	6952      	ldr	r2, [r2, #20]
 8008ee0:	3a01      	subs	r2, #1
 8008ee2:	0512      	lsls	r2, r2, #20
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	1e59      	subs	r1, r3, #1
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	3b01      	subs	r3, #1
 8008f00:	011b      	lsls	r3, r3, #4
 8008f02:	4319      	orrs	r1, r3
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	021b      	lsls	r3, r3, #8
 8008f0c:	4319      	orrs	r1, r3
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	041b      	lsls	r3, r3, #16
 8008f16:	4319      	orrs	r1, r3
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	061b      	lsls	r3, r3, #24
 8008f20:	430b      	orrs	r3, r1
 8008f22:	431a      	orrs	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	ff0f0fff 	.word	0xff0f0fff

08008f3c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	691a      	ldr	r2, [r3, #16]
 8008f4c:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <FMC_SDRAM_SendCommand+0x44>)
 8008f4e:	4013      	ands	r3, r2
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	6811      	ldr	r1, [r2, #0]
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	6852      	ldr	r2, [r2, #4]
 8008f58:	4311      	orrs	r1, r2
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	6892      	ldr	r2, [r2, #8]
 8008f5e:	3a01      	subs	r2, #1
 8008f60:	0152      	lsls	r2, r2, #5
 8008f62:	4311      	orrs	r1, r2
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	68d2      	ldr	r2, [r2, #12]
 8008f68:	0252      	lsls	r2, r2, #9
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	ffc00000 	.word	0xffc00000

08008f84 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	695a      	ldr	r2, [r3, #20]
 8008f92:	4b07      	ldr	r3, [pc, #28]	; (8008fb0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8008f94:	4013      	ands	r3, r2
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	0052      	lsls	r2, r2, #1
 8008f9a:	431a      	orrs	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	ffffc001 	.word	0xffffc001

08008fb4 <memset>:
 8008fb4:	4402      	add	r2, r0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d100      	bne.n	8008fbe <memset+0xa>
 8008fbc:	4770      	bx	lr
 8008fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008fc2:	e7f9      	b.n	8008fb8 <memset+0x4>

08008fc4 <__libc_init_array>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	4d0d      	ldr	r5, [pc, #52]	; (8008ffc <__libc_init_array+0x38>)
 8008fc8:	4c0d      	ldr	r4, [pc, #52]	; (8009000 <__libc_init_array+0x3c>)
 8008fca:	1b64      	subs	r4, r4, r5
 8008fcc:	10a4      	asrs	r4, r4, #2
 8008fce:	2600      	movs	r6, #0
 8008fd0:	42a6      	cmp	r6, r4
 8008fd2:	d109      	bne.n	8008fe8 <__libc_init_array+0x24>
 8008fd4:	4d0b      	ldr	r5, [pc, #44]	; (8009004 <__libc_init_array+0x40>)
 8008fd6:	4c0c      	ldr	r4, [pc, #48]	; (8009008 <__libc_init_array+0x44>)
 8008fd8:	f000 f818 	bl	800900c <_init>
 8008fdc:	1b64      	subs	r4, r4, r5
 8008fde:	10a4      	asrs	r4, r4, #2
 8008fe0:	2600      	movs	r6, #0
 8008fe2:	42a6      	cmp	r6, r4
 8008fe4:	d105      	bne.n	8008ff2 <__libc_init_array+0x2e>
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fec:	4798      	blx	r3
 8008fee:	3601      	adds	r6, #1
 8008ff0:	e7ee      	b.n	8008fd0 <__libc_init_array+0xc>
 8008ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ff6:	4798      	blx	r3
 8008ff8:	3601      	adds	r6, #1
 8008ffa:	e7f2      	b.n	8008fe2 <__libc_init_array+0x1e>
 8008ffc:	0800903c 	.word	0x0800903c
 8009000:	0800903c 	.word	0x0800903c
 8009004:	0800903c 	.word	0x0800903c
 8009008:	08009040 	.word	0x08009040

0800900c <_init>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	bf00      	nop
 8009010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009012:	bc08      	pop	{r3}
 8009014:	469e      	mov	lr, r3
 8009016:	4770      	bx	lr

08009018 <_fini>:
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901a:	bf00      	nop
 800901c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901e:	bc08      	pop	{r3}
 8009020:	469e      	mov	lr, r3
 8009022:	4770      	bx	lr
